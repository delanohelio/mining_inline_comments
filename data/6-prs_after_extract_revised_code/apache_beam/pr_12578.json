{"pr_number": 12578, "pr_title": "[BEAM-10703] Prepare Dataflow Java runner for shardable states", "pr_createdAt": "2020-08-14T00:07:07Z", "pr_url": "https://github.com/apache/beam/pull/12578", "timeline": [{"oid": "8c0490fd1f4764fe469bd86a330b6cde161a975a", "url": "https://github.com/apache/beam/commit/8c0490fd1f4764fe469bd86a330b6cde161a975a", "message": "Initial draft for Java worker changes", "committedDate": "2020-08-04T20:13:25Z", "type": "commit"}, {"oid": "7a823af335ccc0ea6b7d24e0118b499e13b50fd6", "url": "https://github.com/apache/beam/commit/7a823af335ccc0ea6b7d24e0118b499e13b50fd6", "message": "Resolve merge conflicts", "committedDate": "2020-08-04T20:26:14Z", "type": "commit"}, {"oid": "4af11bc0fb35ff4f6fc6c067a1bf8b69bac13d52", "url": "https://github.com/apache/beam/commit/4af11bc0fb35ff4f6fc6c067a1bf8b69bac13d52", "message": "Fix merge conflicts and format", "committedDate": "2020-08-13T18:15:59Z", "type": "commit"}, {"oid": "73de8133f0a83ee6ff5052cc39480ea6442fa6fe", "url": "https://github.com/apache/beam/commit/73de8133f0a83ee6ff5052cc39480ea6442fa6fe", "message": "Minor fixes", "committedDate": "2020-08-13T23:23:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4ODM3OQ==", "url": "https://github.com/apache/beam/pull/12578#discussion_r471788379", "bodyText": "shardedKey?", "author": "boyuanzz", "createdAt": "2020-08-17T21:35:55Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -2167,7 +2209,7 @@ public MapTask getMapTask() {\n     }\n \n     /** Mark the given key and work as active. */\n-    public boolean activateWork(ByteString key, Work work) {\n+    public boolean activateWork(ShardedKey key, Work work) {", "originalCommit": "73de8133f0a83ee6ff5052cc39480ea6442fa6fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4OTM4Ng==", "url": "https://github.com/apache/beam/pull/12578#discussion_r472389386", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-08-18T18:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4ODM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f971b077eeea63b57f18501116952494b58e8c51", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\nindex c4999521c8..a3bd4721cd 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\n\n@@ -2208,10 +2208,10 @@ public class StreamingDataflowWorker {\n           sdkWorkerHarness, key -> new ConcurrentLinkedQueue<>());\n     }\n \n-    /** Mark the given key and work as active. */\n-    public boolean activateWork(ShardedKey key, Work work) {\n+    /** Mark the given shardedKey and work as active. */\n+    public boolean activateWork(ShardedKey shardedKey, Work work) {\n       synchronized (activeWork) {\n-        Deque<Work> queue = activeWork.get(key);\n+        Deque<Work> queue = activeWork.get(shardedKey);\n         if (queue != null) {\n           Preconditions.checkState(!queue.isEmpty());\n           // Ensure we don't already have this work token queueud.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4ODQ3Ng==", "url": "https://github.com/apache/beam/pull/12578#discussion_r471788476", "bodyText": "sharedKey?", "author": "boyuanzz", "createdAt": "2020-08-17T21:36:09Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -2193,7 +2235,7 @@ public boolean activateWork(ByteString key, Work work) {\n     }\n \n     /** Marks the work for a the given key as complete. Schedules queued work for the key if any. */\n-    public void completeWork(ByteString key, long workToken) {\n+    public void completeWork(ShardedKey key, long workToken) {", "originalCommit": "73de8133f0a83ee6ff5052cc39480ea6442fa6fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4OTM1Mw==", "url": "https://github.com/apache/beam/pull/12578#discussion_r472389353", "bodyText": "Done", "author": "nehsyc", "createdAt": "2020-08-18T18:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4ODQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f971b077eeea63b57f18501116952494b58e8c51", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\nindex c4999521c8..a3bd4721cd 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\n\n@@ -2234,11 +2234,14 @@ public class StreamingDataflowWorker {\n       return true;\n     }\n \n-    /** Marks the work for a the given key as complete. Schedules queued work for the key if any. */\n-    public void completeWork(ShardedKey key, long workToken) {\n+    /**\n+     * Marks the work for a the given shardedKey as complete. Schedules queued work for the key if\n+     * any.\n+     */\n+    public void completeWork(ShardedKey shardedKey, long workToken) {\n       Work nextWork;\n       synchronized (activeWork) {\n-        Queue<Work> queue = activeWork.get(key);\n+        Queue<Work> queue = activeWork.get(shardedKey);\n         Preconditions.checkNotNull(queue);\n         Work completedWork = queue.peek();\n         // avoid Preconditions.checkNotNull and checkState here to prevent eagerly evaluating the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNTEzMg==", "url": "https://github.com/apache/beam/pull/12578#discussion_r471805132", "bodyText": "the cachedReader is also keyed: \n  \n    \n      beam/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\n    \n    \n        Lines 338 to 340\n      in\n      88acc52\n    \n    \n    \n    \n\n        \n          \n           public UnboundedSource.UnboundedReader<?> getCachedReader() { \n        \n\n        \n          \n             return readerCache.acquireReader(computationId, getSerializedKey(), getWork().getCacheToken()); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nShould it also be keyed by sharedKey?", "author": "boyuanzz", "createdAt": "2020-08-17T22:17:06Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -357,7 +358,7 @@ public void invalidateCache() {\n         }\n       }\n       activeReader = null;\n-      stateCache.invalidate(key);\n+      stateCache.invalidate(key, getWork().getShardingKey());", "originalCommit": "73de8133f0a83ee6ff5052cc39480ea6442fa6fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4OTMzMg==", "url": "https://github.com/apache/beam/pull/12578#discussion_r472389332", "bodyText": "Good catch! Fixed.", "author": "nehsyc", "createdAt": "2020-08-18T18:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNTEzMg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f971b077eeea63b57f18501116952494b58e8c51", "url": "https://github.com/apache/beam/commit/f971b077eeea63b57f18501116952494b58e8c51", "message": "Fixed ReaderCache to include sharding key in the cache key. Renamed a few local variables.", "committedDate": "2020-08-18T18:10:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5Njk0Nw==", "url": "https://github.com/apache/beam/pull/12578#discussion_r473396947", "bodyText": "Use @AutoValue", "author": "lukecwik", "createdAt": "2020-08-19T22:40:42Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java", "diffHunk": "@@ -59,7 +59,41 @@\n     }\n   }\n \n-  private final Cache<KV<String, ByteString>, CacheEntry> cache;\n+  private static class CacheKey {", "originalCommit": "f971b077eeea63b57f18501116952494b58e8c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzMzI3NA==", "url": "https://github.com/apache/beam/pull/12578#discussion_r474233274", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-08-20T19:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5Njk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f203e9b48a44135065cce919607347c0b3fe345e", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java\nindex dcbe2c6806..025b62f80a 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java\n\n@@ -59,37 +59,22 @@ class ReaderCache {\n     }\n   }\n \n-  private static class CacheKey {\n+  @AutoValue\n+  abstract static class CacheKey {\n \n-    private final String computationId;\n-    private final ByteString splitId;\n-    private final long shardId;\n-\n-    CacheKey(String computationId, ByteString splitId, long shardId) {\n-      this.computationId = computationId;\n-      this.splitId = splitId;\n-      this.shardId = shardId;\n+    public static CacheKey create(String computationId, ByteString splitId, long shardId) {\n+      return new AutoValue_ReaderCache_CacheKey(computationId, splitId, shardId);\n     }\n \n-    @Override\n-    public boolean equals(Object that) {\n-      if (that instanceof ReaderCache.CacheKey) {\n-        ReaderCache.CacheKey other = (ReaderCache.CacheKey) that;\n-        return computationId.equals(other.computationId)\n-            && splitId.equals(other.splitId)\n-            && shardId == other.shardId;\n-      }\n-      return false;\n-    }\n+    public abstract String computationId();\n \n-    @Override\n-    public int hashCode() {\n-      return Objects.hash(computationId, splitId, shardId);\n-    }\n+    public abstract ByteString splitId();\n+\n+    public abstract long shardId();\n \n     @Override\n     public String toString() {\n-      return String.format(\"%s-%s-%d\", computationId, splitId.toStringUtf8(), shardId);\n+      return String.format(\"%s-%s-%d\", computationId(), splitId().toStringUtf8(), shardId());\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5ODQ2MQ==", "url": "https://github.com/apache/beam/pull/12578#discussion_r473398461", "bodyText": "no need for toString since {} does type conversions for you already\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                LOG.info(\"Closing idle reader for {}\", notification.getKey().toString());\n          \n          \n            \n                                LOG.info(\"Closing idle reader for {}\", notification.getKey());", "author": "lukecwik", "createdAt": "2020-08-19T22:42:50Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java", "diffHunk": "@@ -72,25 +106,21 @@\n         CacheBuilder.newBuilder()\n             .expireAfterWrite(cacheDuration.getMillis(), TimeUnit.MILLISECONDS)\n             .removalListener(\n-                (RemovalNotification<KV<String, ByteString>, CacheEntry> notification) -> {\n+                (RemovalNotification<CacheKey, CacheEntry> notification) -> {\n                   if (notification.getCause() != RemovalCause.EXPLICIT) {\n-                    LOG.info(\"Closing idle reader for {}\", keyToString(notification.getKey()));\n+                    LOG.info(\"Closing idle reader for {}\", notification.getKey().toString());", "originalCommit": "f971b077eeea63b57f18501116952494b58e8c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNDU5NA==", "url": "https://github.com/apache/beam/pull/12578#discussion_r474234594", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-08-20T19:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5ODQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f203e9b48a44135065cce919607347c0b3fe345e", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java\nindex dcbe2c6806..025b62f80a 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java\n\n@@ -108,7 +93,7 @@ class ReaderCache {\n             .removalListener(\n                 (RemovalNotification<CacheKey, CacheEntry> notification) -> {\n                   if (notification.getCause() != RemovalCause.EXPLICIT) {\n-                    LOG.info(\"Closing idle reader for {}\", notification.getKey().toString());\n+                    LOG.info(\"Closing idle reader for {}\", notification.getKey());\n                     closeReader(notification.getKey(), notification.getValue());\n                   }\n                 })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5ODY3Nw==", "url": "https://github.com/apache/beam/pull/12578#discussion_r473398677", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.warn(\"Failed to close UnboundedReader for {}\", key.toString(), e);\n          \n          \n            \n                  LOG.warn(\"Failed to close UnboundedReader for {}\", key, e);", "author": "lukecwik", "createdAt": "2020-08-19T22:43:04Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java", "diffHunk": "@@ -72,25 +106,21 @@\n         CacheBuilder.newBuilder()\n             .expireAfterWrite(cacheDuration.getMillis(), TimeUnit.MILLISECONDS)\n             .removalListener(\n-                (RemovalNotification<KV<String, ByteString>, CacheEntry> notification) -> {\n+                (RemovalNotification<CacheKey, CacheEntry> notification) -> {\n                   if (notification.getCause() != RemovalCause.EXPLICIT) {\n-                    LOG.info(\"Closing idle reader for {}\", keyToString(notification.getKey()));\n+                    LOG.info(\"Closing idle reader for {}\", notification.getKey().toString());\n                     closeReader(notification.getKey(), notification.getValue());\n                   }\n                 })\n             .build();\n   }\n \n-  private static String keyToString(KV<String, ByteString> key) {\n-    return key.getKey() + \"-\" + key.getValue().toStringUtf8();\n-  }\n-\n   /** Close the reader and log a warning if close fails. */\n-  private void closeReader(KV<String, ByteString> key, CacheEntry entry) {\n+  private void closeReader(CacheKey key, CacheEntry entry) {\n     try {\n       entry.reader.close();\n     } catch (IOException e) {\n-      LOG.warn(\"Failed to close UnboundedReader for {}\", keyToString(key), e);\n+      LOG.warn(\"Failed to close UnboundedReader for {}\", key.toString(), e);", "originalCommit": "f971b077eeea63b57f18501116952494b58e8c51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f203e9b48a44135065cce919607347c0b3fe345e", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java\nindex dcbe2c6806..025b62f80a 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java\n\n@@ -108,7 +93,7 @@ class ReaderCache {\n             .removalListener(\n                 (RemovalNotification<CacheKey, CacheEntry> notification) -> {\n                   if (notification.getCause() != RemovalCause.EXPLICIT) {\n-                    LOG.info(\"Closing idle reader for {}\", notification.getKey().toString());\n+                    LOG.info(\"Closing idle reader for {}\", notification.getKey());\n                     closeReader(notification.getKey(), notification.getValue());\n                   }\n                 })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQwMjc2Ng==", "url": "https://github.com/apache/beam/pull/12578#discussion_r473402766", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ShardedKey key1_shard1 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 1);\n          \n          \n            \n                ShardedKey key1Shard1 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 1);", "author": "lukecwik", "createdAt": "2020-08-19T22:48:26Z", "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java", "diffHunk": "@@ -2131,8 +2215,50 @@ public void testActiveWork() throws Exception {\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n   }\n \n+  @Test\n+  public void testActiveWorkForShardedKeys() throws Exception {\n+    BoundedQueueExecutor mockExecutor = Mockito.mock(BoundedQueueExecutor.class);\n+    StreamingDataflowWorker.ComputationState computationState =\n+        new StreamingDataflowWorker.ComputationState(\n+            \"computation\",\n+            defaultMapTask(Arrays.asList(makeSourceInstruction(StringUtf8Coder.of()))),\n+            mockExecutor,\n+            ImmutableMap.of(),\n+            null);\n+\n+    ShardedKey key1_shard1 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 1);", "originalCommit": "f971b077eeea63b57f18501116952494b58e8c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNDY4Mg==", "url": "https://github.com/apache/beam/pull/12578#discussion_r474234682", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-08-20T19:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQwMjc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f203e9b48a44135065cce919607347c0b3fe345e", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java b/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java\nindex b953164394..4031d029c6 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java\n\n@@ -2226,33 +2226,33 @@ public class StreamingDataflowWorkerTest {\n             ImmutableMap.of(),\n             null);\n \n-    ShardedKey key1_shard1 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 1);\n-    ShardedKey key1_shard2 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 2);\n+    ShardedKey key1Shard1 = ShardedKey.create(ByteString.copyFromUtf8(\"key1\"), 1);\n+    ShardedKey key1Shard2 = ShardedKey.create(ByteString.copyFromUtf8(\"key1\"), 2);\n \n     MockWork m1 = new MockWork(1);\n-    assertTrue(computationState.activateWork(key1_shard1, m1));\n+    assertTrue(computationState.activateWork(key1Shard1, m1));\n     Mockito.verify(mockExecutor).execute(m1);\n-    computationState.completeWork(key1_shard1, 1);\n+    computationState.completeWork(key1Shard1, 1);\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n \n     // Verify work queues.\n     MockWork m2 = new MockWork(2);\n-    assertTrue(computationState.activateWork(key1_shard1, m2));\n+    assertTrue(computationState.activateWork(key1Shard1, m2));\n     Mockito.verify(mockExecutor).execute(m2);\n     MockWork m3 = new MockWork(3);\n-    assertTrue(computationState.activateWork(key1_shard1, m3));\n+    assertTrue(computationState.activateWork(key1Shard1, m3));\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n \n     // Verify a different shard of key is a separate queue.\n     MockWork m4 = new MockWork(3);\n-    assertFalse(computationState.activateWork(key1_shard1, m4));\n+    assertFalse(computationState.activateWork(key1Shard1, m4));\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n-    assertTrue(computationState.activateWork(key1_shard2, m4));\n+    assertTrue(computationState.activateWork(key1Shard2, m4));\n     Mockito.verify(mockExecutor).execute(m4);\n \n     // Verify duplicate work dropped\n-    assertFalse(computationState.activateWork(key1_shard2, m4));\n-    computationState.completeWork(key1_shard2, 3);\n+    assertFalse(computationState.activateWork(key1Shard2, m4));\n+    computationState.completeWork(key1Shard2, 3);\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQwMjkwNg==", "url": "https://github.com/apache/beam/pull/12578#discussion_r473402906", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ShardedKey key1_shard2 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 2);\n          \n          \n            \n                ShardedKey key1Shard2 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 2);", "author": "lukecwik", "createdAt": "2020-08-19T22:48:36Z", "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java", "diffHunk": "@@ -2131,8 +2215,50 @@ public void testActiveWork() throws Exception {\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n   }\n \n+  @Test\n+  public void testActiveWorkForShardedKeys() throws Exception {\n+    BoundedQueueExecutor mockExecutor = Mockito.mock(BoundedQueueExecutor.class);\n+    StreamingDataflowWorker.ComputationState computationState =\n+        new StreamingDataflowWorker.ComputationState(\n+            \"computation\",\n+            defaultMapTask(Arrays.asList(makeSourceInstruction(StringUtf8Coder.of()))),\n+            mockExecutor,\n+            ImmutableMap.of(),\n+            null);\n+\n+    ShardedKey key1_shard1 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 1);\n+    ShardedKey key1_shard2 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 2);", "originalCommit": "f971b077eeea63b57f18501116952494b58e8c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNDcyNw==", "url": "https://github.com/apache/beam/pull/12578#discussion_r474234727", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-08-20T19:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQwMjkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "f203e9b48a44135065cce919607347c0b3fe345e", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java b/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java\nindex b953164394..4031d029c6 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java\n\n@@ -2226,33 +2226,33 @@ public class StreamingDataflowWorkerTest {\n             ImmutableMap.of(),\n             null);\n \n-    ShardedKey key1_shard1 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 1);\n-    ShardedKey key1_shard2 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 2);\n+    ShardedKey key1Shard1 = ShardedKey.create(ByteString.copyFromUtf8(\"key1\"), 1);\n+    ShardedKey key1Shard2 = ShardedKey.create(ByteString.copyFromUtf8(\"key1\"), 2);\n \n     MockWork m1 = new MockWork(1);\n-    assertTrue(computationState.activateWork(key1_shard1, m1));\n+    assertTrue(computationState.activateWork(key1Shard1, m1));\n     Mockito.verify(mockExecutor).execute(m1);\n-    computationState.completeWork(key1_shard1, 1);\n+    computationState.completeWork(key1Shard1, 1);\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n \n     // Verify work queues.\n     MockWork m2 = new MockWork(2);\n-    assertTrue(computationState.activateWork(key1_shard1, m2));\n+    assertTrue(computationState.activateWork(key1Shard1, m2));\n     Mockito.verify(mockExecutor).execute(m2);\n     MockWork m3 = new MockWork(3);\n-    assertTrue(computationState.activateWork(key1_shard1, m3));\n+    assertTrue(computationState.activateWork(key1Shard1, m3));\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n \n     // Verify a different shard of key is a separate queue.\n     MockWork m4 = new MockWork(3);\n-    assertFalse(computationState.activateWork(key1_shard1, m4));\n+    assertFalse(computationState.activateWork(key1Shard1, m4));\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n-    assertTrue(computationState.activateWork(key1_shard2, m4));\n+    assertTrue(computationState.activateWork(key1Shard2, m4));\n     Mockito.verify(mockExecutor).execute(m4);\n \n     // Verify duplicate work dropped\n-    assertFalse(computationState.activateWork(key1_shard2, m4));\n-    computationState.completeWork(key1_shard2, 3);\n+    assertFalse(computationState.activateWork(key1Shard2, m4));\n+    computationState.completeWork(key1Shard2, 3);\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQwNDE5Mw==", "url": "https://github.com/apache/beam/pull/12578#discussion_r473404193", "bodyText": "Use @AutoValue", "author": "lukecwik", "createdAt": "2020-08-19T22:50:16Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -1095,14 +1098,46 @@ public void run() {\n             }\n           }\n         };\n-    if (!computationState.activateWork(workItem.getKey(), work)) {\n+    if (!computationState.activateWork(\n+        new ShardedKey(workItem.getKey(), workItem.getShardingKey()), work)) {\n       // Free worker if the work was not activated.\n       // This can happen if it's duplicate work or some other reason.\n       sdkHarnessRegistry.completeWork(worker);\n     }\n   }\n \n+  static class ShardedKey {", "originalCommit": "f971b077eeea63b57f18501116952494b58e8c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNDc3MQ==", "url": "https://github.com/apache/beam/pull/12578#discussion_r474234771", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-08-20T19:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQwNDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f203e9b48a44135065cce919607347c0b3fe345e", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\nindex a3bd4721cd..0ac4ffff8e 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\n\n@@ -1099,40 +1099,27 @@ public class StreamingDataflowWorker {\n           }\n         };\n     if (!computationState.activateWork(\n-        new ShardedKey(workItem.getKey(), workItem.getShardingKey()), work)) {\n+        ShardedKey.create(workItem.getKey(), workItem.getShardingKey()), work)) {\n       // Free worker if the work was not activated.\n       // This can happen if it's duplicate work or some other reason.\n       sdkHarnessRegistry.completeWork(worker);\n     }\n   }\n \n-  static class ShardedKey {\n+  @AutoValue\n+  abstract static class ShardedKey {\n \n-    private final ByteString key;\n-    private final long shardingKey;\n-\n-    ShardedKey(ByteString key, long shardingKey) {\n-      this.key = key;\n-      this.shardingKey = shardingKey;\n+    public static ShardedKey create(ByteString key, long shardingKey) {\n+      return new AutoValue_StreamingDataflowWorker_ShardedKey(key, shardingKey);\n     }\n \n-    @Override\n-    public boolean equals(Object that) {\n-      if (that instanceof ShardedKey) {\n-        ShardedKey other = (ShardedKey) that;\n-        return key.equals(other.key) && shardingKey == other.shardingKey;\n-      }\n-      return false;\n-    }\n+    public abstract ByteString key();\n \n-    @Override\n-    public int hashCode() {\n-      return Objects.hash(key, shardingKey);\n-    }\n+    public abstract long shardingKey();\n \n     @Override\n     public String toString() {\n-      return String.format(\"%s / %d\", TextFormat.escapeBytes(key), shardingKey);\n+      return String.format(\"%s-%d\", TextFormat.escapeBytes(key()), shardingKey());\n     }\n   }\n \n"}}, {"oid": "f203e9b48a44135065cce919607347c0b3fe345e", "url": "https://github.com/apache/beam/commit/f203e9b48a44135065cce919607347c0b3fe345e", "message": "Addressed comments", "committedDate": "2020-08-20T19:46:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NDc1MA==", "url": "https://github.com/apache/beam/pull/12578#discussion_r474844750", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              shardedKey.toString(), completedWork.getWorkItem().getWorkToken(), workToken));\n          \n          \n            \n                              shardedKey, completedWork.getWorkItem().getWorkToken(), workToken));", "author": "lukecwik", "createdAt": "2020-08-21T17:55:59Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -2205,20 +2238,18 @@ public void completeWork(ByteString key, long workToken) {\n           throw new NullPointerException(\n               String.format(\n                   \"No active state for key %s, expected token %s\",\n-                  TextFormat.escapeBytes(key), workToken));\n+                  shardedKey.toString(), workToken));\n         }\n         if (completedWork.getWorkItem().getWorkToken() != workToken) {\n           throw new IllegalStateException(\n               String.format(\n                   \"Token mismatch for key %s: %s and %s\",\n-                  TextFormat.escapeBytes(key),\n-                  completedWork.getWorkItem().getWorkToken(),\n-                  workToken));\n+                  shardedKey.toString(), completedWork.getWorkItem().getWorkToken(), workToken));", "originalCommit": "f203e9b48a44135065cce919607347c0b3fe345e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0a53b777882b872bfafda8d52a8d5574ddcfd68", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\nindex 0ac4ffff8e..89b4f5237d 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java\n\n@@ -2244,7 +2244,7 @@ public class StreamingDataflowWorker {\n           throw new IllegalStateException(\n               String.format(\n                   \"Token mismatch for key %s: %s and %s\",\n-                  shardedKey.toString(), completedWork.getWorkItem().getWorkToken(), workToken));\n+                  shardedKey, completedWork.getWorkItem().getWorkToken(), workToken));\n         }\n         queue.remove(); // We consumed the matching work item.\n         nextWork = queue.peek();\n"}}, {"oid": "b0a53b777882b872bfafda8d52a8d5574ddcfd68", "url": "https://github.com/apache/beam/commit/b0a53b777882b872bfafda8d52a8d5574ddcfd68", "message": "Update runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "committedDate": "2020-08-21T17:56:49Z", "type": "commit"}, {"oid": "43456607cc77b81721a9b398c7d44e199e579d9f", "url": "https://github.com/apache/beam/commit/43456607cc77b81721a9b398c7d44e199e579d9f", "message": "Update StreamingDataflowWorker.java", "committedDate": "2020-08-21T19:41:53Z", "type": "commit"}, {"oid": "20ea6e4e244627d421b9a9be653f2cca72c37995", "url": "https://github.com/apache/beam/commit/20ea6e4e244627d421b9a9be653f2cca72c37995", "message": "Run spotlessApply", "committedDate": "2020-08-21T19:50:19Z", "type": "commit"}]}