{"pr_number": 13533, "pr_title": "[BEAM-11474] Track transform processing thread in Java SDK harness and set log entry field", "pr_createdAt": "2020-12-11T22:29:45Z", "pr_url": "https://github.com/apache/beam/pull/13533", "timeline": [{"oid": "61bb8a86b4abd341167ba1d5a306a13a02974855", "url": "https://github.com/apache/beam/commit/61bb8a86b4abd341167ba1d5a306a13a02974855", "message": "Set ptransform id for log entries", "committedDate": "2020-12-11T22:30:38Z", "type": "forcePushed"}, {"oid": "554d25449e38814af2f281ab68a5b9785a4fb66b", "url": "https://github.com/apache/beam/commit/554d25449e38814af2f281ab68a5b9785a4fb66b", "message": "Track transform processing thread in Java SDK harness and set log entry\ntransform id field.", "committedDate": "2020-12-14T23:33:18Z", "type": "commit"}, {"oid": "554d25449e38814af2f281ab68a5b9785a4fb66b", "url": "https://github.com/apache/beam/commit/554d25449e38814af2f281ab68a5b9785a4fb66b", "message": "Track transform processing thread in Java SDK harness and set log entry\ntransform id field.", "committedDate": "2020-12-14T23:33:18Z", "type": "forcePushed"}, {"oid": "8ed7fcdc21741879c262e48f052d9ceed11e9492", "url": "https://github.com/apache/beam/commit/8ed7fcdc21741879c262e48f052d9ceed11e9492", "message": "Add javadoc", "committedDate": "2020-12-15T00:41:23Z", "type": "forcePushed"}, {"oid": "a6ba301d9fb9c2b0e62ac2d1c95b405fea5d0ae1", "url": "https://github.com/apache/beam/commit/a6ba301d9fb9c2b0e62ac2d1c95b405fea5d0ae1", "message": "Add javadoc", "committedDate": "2020-12-15T00:46:28Z", "type": "commit"}, {"oid": "a6ba301d9fb9c2b0e62ac2d1c95b405fea5d0ae1", "url": "https://github.com/apache/beam/commit/a6ba301d9fb9c2b0e62ac2d1c95b405fea5d0ae1", "message": "Add javadoc", "committedDate": "2020-12-15T00:46:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyMzYxMA==", "url": "https://github.com/apache/beam/pull/13533#discussion_r543623610", "bodyText": "Sorry that I'm not familiar with how logging service works, I'm wondering whether this will have multi-threading concurrency issue.", "author": "boyuanzz", "createdAt": "2020-12-15T19:24:07Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * TransformProcessingThreadTracker tracks the thread ids for the transforms that are being\n+ * processed in the SDK harness.\n+ */\n+public class TransformProcessingThreadTracker {", "originalCommit": "a6ba301d9fb9c2b0e62ac2d1c95b405fea5d0ae1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NzM1NA==", "url": "https://github.com/apache/beam/pull/13533#discussion_r543647354", "bodyText": "I think there might be a very slight chance the processing thread moved onto another transform when the LogHandler haven't done transforming the log entries in previous one. But I think the it should be very rare(log transform should be almost instant) and I would argue that it's probably better to keep the logging just best effort instead of introducing locks to guarantee 100% metadata correctness?", "author": "y1chi", "createdAt": "2020-12-15T20:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyMzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2OTQzNA==", "url": "https://github.com/apache/beam/pull/13533#discussion_r543669434", "bodyText": "The argument for it's probably better to keep the logging just best effort is that it's ok to have step name mismatched with log message itself. Do you think it's acceptable when it happens?", "author": "boyuanzz", "createdAt": "2020-12-15T20:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyMzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4NTA2NA==", "url": "https://github.com/apache/beam/pull/13533#discussion_r543685064", "bodyText": "I'm not sure if it is ever gonna happen, we get to see if the integration test is flaky(in my 30+ IT test runs mismatch never happens). If the occurrence is less than 0.01% I don't think it'll have actual impact on usability. Current empty step in sdk logs have no values to users and can be considered almost 100% mismatch, so I think this PR should be at least an improvement to that.", "author": "y1chi", "createdAt": "2020-12-15T21:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyMzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY5MzYwMw==", "url": "https://github.com/apache/beam/pull/13533#discussion_r543693603", "bodyText": "I agree that test signals can give us more confidence.\n\nCurrent empty step in sdk logs have no values to users and can be considered almost 100% mismatch, so I think this PR should be at least an improvement to that.\n\nI would say, We provide some information but they can be wrong is not better than We don't provide more information.", "author": "boyuanzz", "createdAt": "2020-12-15T21:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyMzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0MTUxOQ==", "url": "https://github.com/apache/beam/pull/13533#discussion_r543741519", "bodyText": "I agree. I don't think the concurrency risk is ever gonna be an issue, we can tell from enabling the test and track the history(I also manually tested another 50 times and tests all passed with matching step). I believe we provide some information and they can be wrong in very rare cases would still be more valuable than don't provide the information and probably won't cause too much trouble for users, the element count in streaming pipeline falls into this best effort category as well.", "author": "y1chi", "createdAt": "2020-12-15T22:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyMzYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "945e7948e7c61a5ba3216e1a8f18784f1b30b87a", "chunk": "diff --git a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java\nindex 67f8152a12..3b6f572dea 100644\n--- a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java\n+++ b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java\n\n@@ -17,7 +17,10 @@\n  */\n package org.apache.beam.fn.harness;\n \n-import java.util.concurrent.ConcurrentHashMap;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import java.time.Duration;\n \n /**\n  * TransformProcessingThreadTracker tracks the thread ids for the transforms that are being\n"}}, {"oid": "23b200727169c140a224ffa35bb43b102bc142be", "url": "https://github.com/apache/beam/commit/23b200727169c140a224ffa35bb43b102bc142be", "message": "Add tracking to other ProcessElement methods", "committedDate": "2020-12-15T22:32:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4MTUxMQ==", "url": "https://github.com/apache/beam/pull/13533#discussion_r543781511", "bodyText": "Another question is that will this map grow unlimitedly? I'm kind of concerning that it consumes too much memory with a long run instance(and the thread is not reused).", "author": "boyuanzz", "createdAt": "2020-12-16T00:15:10Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * TransformProcessingThreadTracker tracks the thread ids for the transforms that are being\n+ * processed in the SDK harness.\n+ */\n+public class TransformProcessingThreadTracker {\n+  private static final TransformProcessingThreadTracker INSTANCE =\n+      new TransformProcessingThreadTracker();\n+  private final ConcurrentHashMap<Long, String> threadIdToTransformIdMappings;", "originalCommit": "23b200727169c140a224ffa35bb43b102bc142be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxODQ1Nw==", "url": "https://github.com/apache/beam/pull/13533#discussion_r543818457", "bodyText": "hmm yeah I think you are right, it's potentially an issue and I've changed to use a LoadingCache with expiration.", "author": "y1chi", "createdAt": "2020-12-16T01:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4MTUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "945e7948e7c61a5ba3216e1a8f18784f1b30b87a", "chunk": "diff --git a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java\nindex 67f8152a12..3b6f572dea 100644\n--- a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java\n+++ b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java\n\n@@ -17,7 +17,10 @@\n  */\n package org.apache.beam.fn.harness;\n \n-import java.util.concurrent.ConcurrentHashMap;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import java.time.Duration;\n \n /**\n  * TransformProcessingThreadTracker tracks the thread ids for the transforms that are being\n"}}, {"oid": "945e7948e7c61a5ba3216e1a8f18784f1b30b87a", "url": "https://github.com/apache/beam/commit/945e7948e7c61a5ba3216e1a8f18784f1b30b87a", "message": "Use LoadingCache instead of ConcurrentHashMap to limit the size for thread tracker", "committedDate": "2020-12-16T01:56:46Z", "type": "commit"}, {"oid": "945e7948e7c61a5ba3216e1a8f18784f1b30b87a", "url": "https://github.com/apache/beam/commit/945e7948e7c61a5ba3216e1a8f18784f1b30b87a", "message": "Use LoadingCache instead of ConcurrentHashMap to limit the size for thread tracker", "committedDate": "2020-12-16T01:56:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgzOTA0OA==", "url": "https://github.com/apache/beam/pull/13533#discussion_r543839048", "bodyText": "Thanks! If you are not going to use the load method, you can just use the Cache and the CacheBuilder", "author": "boyuanzz", "createdAt": "2020-12-16T02:26:51Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import java.time.Duration;\n+\n+/**\n+ * TransformProcessingThreadTracker tracks the thread ids for the transforms that are being\n+ * processed in the SDK harness.\n+ */\n+public class TransformProcessingThreadTracker {\n+  private static final TransformProcessingThreadTracker INSTANCE =\n+      new TransformProcessingThreadTracker();\n+  private final LoadingCache<Long, String> threadIdToTransformIdMappings;\n+\n+  private TransformProcessingThreadTracker() {\n+    this.threadIdToTransformIdMappings =\n+        CacheBuilder.newBuilder()\n+            .maximumSize(10000)\n+            .expireAfterAccess(Duration.ofHours(1))\n+            .build(\n+                new CacheLoader<Long, String>() {\n+                  @Override\n+                  public String load(Long threadId) throws Exception {\n+                    return \"\";", "originalCommit": "945e7948e7c61a5ba3216e1a8f18784f1b30b87a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyNDM3NQ==", "url": "https://github.com/apache/beam/pull/13533#discussion_r544524375", "bodyText": "Done.", "author": "y1chi", "createdAt": "2020-12-16T18:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgzOTA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "857d41fbcba3fe747081be4479695c85200ac7cf", "chunk": "diff --git a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java\nindex 3b6f572dea..a05b971a41 100644\n--- a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java\n+++ b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/TransformProcessingThreadTracker.java\n\n@@ -17,9 +17,8 @@\n  */\n package org.apache.beam.fn.harness;\n \n+import com.google.common.cache.Cache;\n import com.google.common.cache.CacheBuilder;\n-import com.google.common.cache.CacheLoader;\n-import com.google.common.cache.LoadingCache;\n import java.time.Duration;\n \n /**\n"}}, {"oid": "857d41fbcba3fe747081be4479695c85200ac7cf", "url": "https://github.com/apache/beam/commit/857d41fbcba3fe747081be4479695c85200ac7cf", "message": "Address comment", "committedDate": "2020-12-16T18:41:12Z", "type": "commit"}, {"oid": "857d41fbcba3fe747081be4479695c85200ac7cf", "url": "https://github.com/apache/beam/commit/857d41fbcba3fe747081be4479695c85200ac7cf", "message": "Address comment", "committedDate": "2020-12-16T18:41:12Z", "type": "forcePushed"}, {"oid": "c8d9d1dfc3d87ed16d6d15a26a1dd4aab3269e96", "url": "https://github.com/apache/beam/commit/c8d9d1dfc3d87ed16d6d15a26a1dd4aab3269e96", "message": "Fix checkstyle", "committedDate": "2020-12-16T19:41:11Z", "type": "commit"}]}