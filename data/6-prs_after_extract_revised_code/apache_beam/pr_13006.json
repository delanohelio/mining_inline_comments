{"pr_number": 13006, "pr_title": "[BEAM-10670] Make Read use SDF by default. Override in runners.", "pr_createdAt": "2020-10-02T22:33:00Z", "pr_url": "https://github.com/apache/beam/pull/13006", "timeline": [{"oid": "80aefdd209e633d246d808aca9773509f6e8f19b", "url": "https://github.com/apache/beam/commit/80aefdd209e633d246d808aca9773509f6e8f19b", "message": "[BEAM-10670] Make Read use SDF by default. Override in runners.", "committedDate": "2020-10-02T22:29:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4ODA5NA==", "url": "https://github.com/apache/beam/pull/13006#discussion_r499088094", "bodyText": "To clarify: this change makes it so instead of rejecting primitive reads the function is a noop?", "author": "kennknowles", "createdAt": "2020-10-02T23:29:56Z", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaRunner.java", "diffHunk": "@@ -107,7 +107,7 @@ public PortablePipelineResult runPortablePipeline(RunnerApi.Pipeline pipeline) {\n \n   @Override\n   public SamzaPipelineResult run(Pipeline pipeline) {\n-    SplittableParDo.validateNoPrimitiveReads(pipeline);\n+    SplittableParDo.convertReadBasedSplittableDoFnsToPrimitiveReadsIfNecessary(pipeline);", "originalCommit": "80aefdd209e633d246d808aca9773509f6e8f19b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxOTIzNQ==", "url": "https://github.com/apache/beam/pull/13006#discussion_r499719235", "bodyText": "Its a noop if the experiments aren't set. If the experiments are set then Read.Bounded and Read.Unbounded get converted into PrimitiveBoundedRead and PrimitiveUnboundedRead respectively.", "author": "lukecwik", "createdAt": "2020-10-05T16:19:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4ODA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4MDEzNQ==", "url": "https://github.com/apache/beam/pull/13006#discussion_r499780135", "bodyText": "For a runner that previously rejected all primitive reads, isn't it better to leave that runner alone and still reject all primitive reads?\n(here and elsewhere)", "author": "kennknowles", "createdAt": "2020-10-05T18:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4ODA5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4ODE3MA==", "url": "https://github.com/apache/beam/pull/13006#discussion_r499088170", "bodyText": "I was trying to figure out where the failure came from and I would assume here but I don't understand why.", "author": "kennknowles", "createdAt": "2020-10-02T23:30:21Z", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/translation/ReadTranslator.java", "diffHunk": "@@ -54,9 +54,9 @@ public void translate(\n     final PCollection<T> output = ctx.getOutput(transform);\n     final Coder<WindowedValue<T>> coder = SamzaCoders.of(output);\n     final Source<?> source =\n-        transform instanceof Read.Unbounded\n-            ? ((Read.Unbounded) transform).getSource()\n-            : ((Read.Bounded) transform).getSource();\n+        transform instanceof SplittableParDo.PrimitiveBoundedRead", "originalCommit": "80aefdd209e633d246d808aca9773509f6e8f19b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMDI0Nw==", "url": "https://github.com/apache/beam/pull/13006#discussion_r499720247", "bodyText": "This is some pre-existing bug in the Samza runner that I'm exposing since all the other validates runner tests pass that used to pass and now they are using SDF based Read everywhere (which covers Create as well).", "author": "lukecwik", "createdAt": "2020-10-05T16:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4ODE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczOTQ5Mg==", "url": "https://github.com/apache/beam/pull/13006#discussion_r499739492", "bodyText": "When debugging locally I can see that the PAssert executes once and gets the correct input and then it executes another time only containing \"finished\" (coming from the finishBundle on the TestFn) which implies that the PAssert trigger is occurring multiple times causing the verifier to fail on a subsequent bundle.", "author": "lukecwik", "createdAt": "2020-10-05T16:53:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4ODE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NzU0NQ==", "url": "https://github.com/apache/beam/pull/13006#discussion_r499747545", "bodyText": "I narrowed it down to DoFnOp calling start bundle/finish bundle when there are no timers to fire. This caused output to get produced when it should have been. I updated the other Samza Ops that process timers to not process them when there are no timers to fire.", "author": "lukecwik", "createdAt": "2020-10-05T17:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4ODE3MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "098817e10c7ec6d7edc7cef2f9d5a5078fd6d3fe", "url": "https://github.com/apache/beam/commit/098817e10c7ec6d7edc7cef2f9d5a5078fd6d3fe", "message": "fixup! Fix unit test failures that were missed.", "committedDate": "2020-10-05T16:44:53Z", "type": "commit"}, {"oid": "9108d3bf943d8bbe63be704f9b7b0c48af49b401", "url": "https://github.com/apache/beam/commit/9108d3bf943d8bbe63be704f9b7b0c48af49b401", "message": "[BEAM-10670] Don't start/finish bundles when there are no timers that are ready.", "committedDate": "2020-10-05T17:02:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3OTQ3OA==", "url": "https://github.com/apache/beam/pull/13006#discussion_r499779478", "bodyText": "I believe this should be controlled by the runner choosing to invoke the method, not by a global flag. It can have the same status as other runner-internal overrides, like GBK via GBKO.\nIf you really believe it should be a flag, it should be the runner that reads the flag and decides what to do. This utility library should not change its behavior based on pipeline options. Only runners should opt in to particular behaviors.", "author": "kennknowles", "createdAt": "2020-10-05T18:07:15Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java", "diffHunk": "@@ -638,43 +644,161 @@ public void tearDown() {\n   }\n \n   /**\n-   * Throws an {@link IllegalArgumentException} if the pipeline contains any primitive read\n-   * transforms that have not been expanded to be executed as {@link DoFn splittable DoFns} as long\n-   * as the experiment {@code use_deprecated_read} is not specified.\n+   * Converts {@link Read} based Splittable DoFn expansions to primitive reads implemented by {@link\n+   * PrimitiveBoundedRead} and {@link PrimitiveUnboundedRead} if either the experiment {@code\n+   * use_deprecated_read} or {@code beam_fn_api_use_deprecated_read} are specified.\n+   *\n+   * <p>TODO(BEAM-10670): Remove the primitive Read and make the splittable DoFn the only option.\n+   */\n+  public static void convertReadBasedSplittableDoFnsToPrimitiveReadsIfNecessary(Pipeline pipeline) {", "originalCommit": "9108d3bf943d8bbe63be704f9b7b0c48af49b401", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd4190df0cdb39244ee43950ab3f3727b6352954", "chunk": "diff --git a/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java\nindex 97d634a527..a3e8b12182 100644\n--- a/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java\n+++ b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java\n\n@@ -672,14 +672,14 @@ public class SplittableParDo<InputT, OutputT, RestrictionT, WatermarkEstimatorSt\n    * A transform override for {@link Read.Bounded} that converts it to a {@link\n    * PrimitiveBoundedRead}.\n    */\n-  public static PTransformOverride PRIMITIVE_BOUNDED_READ_OVERRIDE =\n+  public static final PTransformOverride PRIMITIVE_BOUNDED_READ_OVERRIDE =\n       PTransformOverride.of(\n           PTransformMatchers.classEqualTo(Read.Bounded.class), new BoundedReadOverrideFactory<>());\n   /**\n    * A transform override for {@link Read.Unbounded} that converts it to a {@link\n    * PrimitiveUnboundedRead}.\n    */\n-  public static PTransformOverride PRIMITIVE_UNBOUNDED_READ_OVERRIDE =\n+  public static final PTransformOverride PRIMITIVE_UNBOUNDED_READ_OVERRIDE =\n       PTransformOverride.of(\n           PTransformMatchers.classEqualTo(Read.Unbounded.class),\n           new UnboundedReadOverrideFactory<>());\n"}}, {"oid": "fd4190df0cdb39244ee43950ab3f3727b6352954", "url": "https://github.com/apache/beam/commit/fd4190df0cdb39244ee43950ab3f3727b6352954", "message": "fixup! Fix spotbugs/checkstyle warning", "committedDate": "2020-10-05T19:56:07Z", "type": "commit"}]}