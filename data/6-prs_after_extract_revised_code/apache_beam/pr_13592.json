{"pr_number": 13592, "pr_title": "[BEAM-11403] Cache UnboundedReader per UnboundedSourceRestriction in SDF Wrapper DoFn.", "pr_createdAt": "2020-12-21T23:18:16Z", "pr_url": "https://github.com/apache/beam/pull/13592", "timeline": [{"oid": "f8d762e9a7b12ac5cebd8ef8a402e53856c6294f", "url": "https://github.com/apache/beam/commit/f8d762e9a7b12ac5cebd8ef8a402e53856c6294f", "message": "Cache UnboundedReader per CheckpointMark in SDF Wrapper DoFn.", "committedDate": "2020-12-22T00:51:06Z", "type": "forcePushed"}, {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d", "url": "https://github.com/apache/beam/commit/3d0a8185a0e4937132c38d3acac7ac8356caf25d", "message": "Cache UnboundedReader per CheckpointMark in SDF Wrapper DoFn.", "committedDate": "2020-12-22T03:56:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1MzY3MQ==", "url": "https://github.com/apache/beam/pull/13592#discussion_r547153671", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new UnboundedSourceAsSDFRestrictionTracker(restriction, pipelineOptions, reader);\n          \n          \n            \n                    return new UnboundedSourceAsSDFRestrictionTracker<>(restriction, pipelineOptions, reader);", "author": "je-ik", "createdAt": "2020-12-22T09:03:23Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -488,7 +519,20 @@ public void splitRestriction(\n         restrictionTracker(\n             @Restriction UnboundedSourceRestriction<OutputT, CheckpointT> restriction,\n             PipelineOptions pipelineOptions) {\n-      return new UnboundedSourceAsSDFRestrictionTracker(restriction, pipelineOptions);\n+      try {\n+        UnboundedReader reader =\n+            cachedReaders.getIfPresent(\n+                createCacheKey(restriction.getSource(), restriction.getCheckpoint()));\n+        if (reader == null) {\n+          reader =\n+              restriction.getSource().createReader(pipelineOptions, restriction.getCheckpoint());\n+          cachedReaders.put(\n+              createCacheKey(restriction.getSource(), restriction.getCheckpoint()), reader);\n+        }\n+        return new UnboundedSourceAsSDFRestrictionTracker(restriction, pipelineOptions, reader);", "originalCommit": "3d0a8185a0e4937132c38d3acac7ac8356caf25d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7e6b9ae68f9e13ae48e47c3b372707c9844d57", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\nindex 7ba2d5094e..34fbdbc4ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n\n@@ -520,16 +526,17 @@ public class Read {\n             @Restriction UnboundedSourceRestriction<OutputT, CheckpointT> restriction,\n             PipelineOptions pipelineOptions) {\n       try {\n-        UnboundedReader reader =\n-            cachedReaders.getIfPresent(\n-                createCacheKey(restriction.getSource(), restriction.getCheckpoint()));\n-        if (reader == null) {\n-          reader =\n+        Object cacheKey = createCacheKey(restriction.getSource(), restriction.getCheckpoint());\n+        currentReader = cachedReaders.getIfPresent(cacheKey);\n+        if (currentReader == null) {\n+          currentReader =\n               restriction.getSource().createReader(pipelineOptions, restriction.getCheckpoint());\n-          cachedReaders.put(\n-              createCacheKey(restriction.getSource(), restriction.getCheckpoint()), reader);\n+        } else {\n+          // Remove the cache entry to prevent eviction to happen.\n+          cachedReaders.invalidate(cacheKey);\n         }\n-        return new UnboundedSourceAsSDFRestrictionTracker(restriction, pipelineOptions, reader);\n+        return new UnboundedSourceAsSDFRestrictionTracker<>(\n+            restriction, pipelineOptions, currentReader);\n       } catch (IOException e) {\n         throw new RuntimeException(e);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1NDcyMg==", "url": "https://github.com/apache/beam/pull/13592#discussion_r547154722", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  UnboundedReader currentReader =\n          \n          \n            \n                  UnboundedReader<OutputT> currentReader =", "author": "je-ik", "createdAt": "2020-12-22T09:05:34Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -501,6 +545,10 @@ public ProcessContinuation processElement(\n         throws IOException {\n       UnboundedSourceRestriction<OutputT, CheckpointT> initialRestriction =\n           tracker.currentRestriction();\n+      UnboundedReader currentReader =", "originalCommit": "3d0a8185a0e4937132c38d3acac7ac8356caf25d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7e6b9ae68f9e13ae48e47c3b372707c9844d57", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\nindex 7ba2d5094e..34fbdbc4ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n\n@@ -543,12 +550,10 @@ public class Read {\n         OutputReceiver<ValueWithRecordId<OutputT>> receiver,\n         BundleFinalizer bundleFinalizer)\n         throws IOException {\n+      checkNotNull(currentReader);\n+\n       UnboundedSourceRestriction<OutputT, CheckpointT> initialRestriction =\n           tracker.currentRestriction();\n-      UnboundedReader currentReader =\n-          cachedReaders.getIfPresent(\n-              createCacheKey(initialRestriction.getSource(), initialRestriction.getCheckpoint()));\n-      checkNotNull(currentReader);\n \n       UnboundedSourceValue<OutputT>[] out = new UnboundedSourceValue[1];\n       while (tracker.tryClaim(out) && out[0] != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1NTI0Mw==", "url": "https://github.com/apache/beam/pull/13592#discussion_r547155243", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n          \n          \n            \n                private Cache<UnboundedSourceRestriction<OutputT, CheckointT>, UnboundedReader> cachedReaders;", "author": "je-ik", "createdAt": "2020-12-22T09:06:35Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -439,11 +444,37 @@ public IsBounded isBounded() {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n+    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;", "originalCommit": "3d0a8185a0e4937132c38d3acac7ac8356caf25d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7e6b9ae68f9e13ae48e47c3b372707c9844d57", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\nindex 7ba2d5094e..34fbdbc4ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n\n@@ -444,32 +444,38 @@ public class Read {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n-    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n+    private Cache<Object, UnboundedReader<OutputT>> cachedReaders;\n+    private UnboundedReader<OutputT> currentReader;\n+    Coder<UnboundedSourceRestriction<OutputT, CheckpointT>> restrictionCoder;\n \n     private UnboundedSourceAsSDFWrapperFn(Coder<CheckpointT> checkpointCoder) {\n       this.checkpointCoder = checkpointCoder;\n     }\n \n-    private UnboundedSourceRestriction createCacheKey(\n+    private Object createCacheKey(\n         UnboundedSource<OutputT, CheckpointT> source, CheckpointT checkpoint) {\n+      checkNotNull(restrictionCoder);\n       // For caching reader, we don't care about the watermark.\n-      return UnboundedSourceRestriction.create(\n-          source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE);\n+      return restrictionCoder.structuralValue(\n+          UnboundedSourceRestriction.create(source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE));\n     }\n \n     @Setup\n     public void setUp() throws Exception {\n+      restrictionCoder = restrictionCoder();\n       cachedReaders =\n           CacheBuilder.newBuilder()\n-              .expireAfterWrite(5, TimeUnit.MINUTES)\n+              .expireAfterWrite(1, TimeUnit.MINUTES)\n               .maximumSize(100)\n               .removalListener(\n-                  (RemovalListener<UnboundedSourceRestriction, UnboundedReader>)\n+                  (RemovalListener<Object, UnboundedReader>)\n                       removalNotification -> {\n-                        try {\n-                          removalNotification.getValue().close();\n-                        } catch (IOException e) {\n-                          LOG.warn(\"Failed to close UnboundedReader.\", e);\n+                        if (removalNotification.wasEvicted()) {\n+                          try {\n+                            removalNotification.getValue().close();\n+                          } catch (IOException e) {\n+                            LOG.warn(\"Failed to close UnboundedReader.\", e);\n+                          }\n                         }\n                       })\n               .build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1NzMzMg==", "url": "https://github.com/apache/beam/pull/13592#discussion_r547157332", "bodyText": "\ud83d\udc4d", "author": "je-ik", "createdAt": "2020-12-22T09:10:51Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -756,23 +810,20 @@ public CheckpointMark getCheckpointMark() {\n       private final PipelineOptions pipelineOptions;\n       private UnboundedSource.UnboundedReader<OutputT> currentReader;\n       private boolean readerHasBeenStarted;\n+      private boolean isDone;", "originalCommit": "3d0a8185a0e4937132c38d3acac7ac8356caf25d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7e6b9ae68f9e13ae48e47c3b372707c9844d57", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\nindex 7ba2d5094e..34fbdbc4ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n\n@@ -815,7 +821,7 @@ public class Read {\n       UnboundedSourceAsSDFRestrictionTracker(\n           UnboundedSourceRestriction<OutputT, CheckpointT> initialRestriction,\n           PipelineOptions pipelineOptions,\n-          UnboundedReader cachedUnboundedReader) {\n+          UnboundedReader<OutputT> cachedUnboundedReader) {\n         this.initialRestriction = initialRestriction;\n         this.pipelineOptions = pipelineOptions;\n         currentReader = cachedUnboundedReader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1NzcxMA==", "url": "https://github.com/apache/beam/pull/13592#discussion_r547157710", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      UnboundedReader cachedUnboundedReader) {\n          \n          \n            \n                      UnboundedReader<OutputT> cachedUnboundedReader) {", "author": "je-ik", "createdAt": "2020-12-22T09:11:35Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -756,23 +810,20 @@ public CheckpointMark getCheckpointMark() {\n       private final PipelineOptions pipelineOptions;\n       private UnboundedSource.UnboundedReader<OutputT> currentReader;\n       private boolean readerHasBeenStarted;\n+      private boolean isDone;\n \n       UnboundedSourceAsSDFRestrictionTracker(\n           UnboundedSourceRestriction<OutputT, CheckpointT> initialRestriction,\n-          PipelineOptions pipelineOptions) {\n+          PipelineOptions pipelineOptions,\n+          UnboundedReader cachedUnboundedReader) {", "originalCommit": "3d0a8185a0e4937132c38d3acac7ac8356caf25d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7e6b9ae68f9e13ae48e47c3b372707c9844d57", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\nindex 7ba2d5094e..34fbdbc4ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n\n@@ -815,7 +821,7 @@ public class Read {\n       UnboundedSourceAsSDFRestrictionTracker(\n           UnboundedSourceRestriction<OutputT, CheckpointT> initialRestriction,\n           PipelineOptions pipelineOptions,\n-          UnboundedReader cachedUnboundedReader) {\n+          UnboundedReader<OutputT> cachedUnboundedReader) {\n         this.initialRestriction = initialRestriction;\n         this.pipelineOptions = pipelineOptions;\n         currentReader = cachedUnboundedReader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1OTQ2MA==", "url": "https://github.com/apache/beam/pull/13592#discussion_r547159460", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          currentReader.getCurrentSource(), (CheckpointT) currentReader.getCheckpointMark()),\n          \n          \n            \n                          (UnboundedSource<OutputT, CheckpointT>) currentReader.getCurrentSource(),\n          \n          \n            \n                          (CheckpointT) currentReader.getCheckpointMark()),", "author": "je-ik", "createdAt": "2020-12-22T09:15:07Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -527,6 +575,12 @@ public ProcessContinuation processElement(\n             currentRestriction.getCheckpoint()::finalizeCheckpoint);\n       }\n \n+      // Update the readers cache with latest CheckpointMark.\n+      cachedReaders.put(\n+          createCacheKey(\n+              currentReader.getCurrentSource(), (CheckpointT) currentReader.getCheckpointMark()),", "originalCommit": "3d0a8185a0e4937132c38d3acac7ac8356caf25d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7e6b9ae68f9e13ae48e47c3b372707c9844d57", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\nindex 7ba2d5094e..34fbdbc4ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n\n@@ -578,7 +583,8 @@ public class Read {\n       // Update the readers cache with latest CheckpointMark.\n       cachedReaders.put(\n           createCacheKey(\n-              currentReader.getCurrentSource(), (CheckpointT) currentReader.getCheckpointMark()),\n+              (UnboundedSource<OutputT, CheckpointT>) currentReader.getCurrentSource(),\n+              (CheckpointT) currentReader.getCheckpointMark()),\n           currentReader);\n \n       // If we have been split/checkpoint by a runner, the tracker will have been updated to the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MjU0MQ==", "url": "https://github.com/apache/beam/pull/13592#discussion_r547162541", "bodyText": "I think this could be way lower. We insert the reader back to the cache after checkpoint, so if it is not reused after few seconds, it is likely not be reused at all. Maybe 10 seconds might be enough?", "author": "je-ik", "createdAt": "2020-12-22T09:21:11Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -439,11 +444,37 @@ public IsBounded isBounded() {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n+    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n \n     private UnboundedSourceAsSDFWrapperFn(Coder<CheckpointT> checkpointCoder) {\n       this.checkpointCoder = checkpointCoder;\n     }\n \n+    private UnboundedSourceRestriction createCacheKey(\n+        UnboundedSource<OutputT, CheckpointT> source, CheckpointT checkpoint) {\n+      // For caching reader, we don't care about the watermark.\n+      return UnboundedSourceRestriction.create(\n+          source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE);\n+    }\n+\n+    @Setup\n+    public void setUp() throws Exception {\n+      cachedReaders =\n+          CacheBuilder.newBuilder()\n+              .expireAfterWrite(5, TimeUnit.MINUTES)", "originalCommit": "3d0a8185a0e4937132c38d3acac7ac8356caf25d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NTM2OQ==", "url": "https://github.com/apache/beam/pull/13592#discussion_r547445369", "bodyText": "5 mins might be high for DirectRunner but I feel like a few seconds might be too small for a distributed system like Dataflow, especially for a long run streaming application. How about we start from 1min?", "author": "boyuanzz", "createdAt": "2020-12-22T18:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MjU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d7e6b9ae68f9e13ae48e47c3b372707c9844d57", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\nindex 7ba2d5094e..34fbdbc4ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n\n@@ -444,32 +444,38 @@ public class Read {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n-    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n+    private Cache<Object, UnboundedReader<OutputT>> cachedReaders;\n+    private UnboundedReader<OutputT> currentReader;\n+    Coder<UnboundedSourceRestriction<OutputT, CheckpointT>> restrictionCoder;\n \n     private UnboundedSourceAsSDFWrapperFn(Coder<CheckpointT> checkpointCoder) {\n       this.checkpointCoder = checkpointCoder;\n     }\n \n-    private UnboundedSourceRestriction createCacheKey(\n+    private Object createCacheKey(\n         UnboundedSource<OutputT, CheckpointT> source, CheckpointT checkpoint) {\n+      checkNotNull(restrictionCoder);\n       // For caching reader, we don't care about the watermark.\n-      return UnboundedSourceRestriction.create(\n-          source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE);\n+      return restrictionCoder.structuralValue(\n+          UnboundedSourceRestriction.create(source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE));\n     }\n \n     @Setup\n     public void setUp() throws Exception {\n+      restrictionCoder = restrictionCoder();\n       cachedReaders =\n           CacheBuilder.newBuilder()\n-              .expireAfterWrite(5, TimeUnit.MINUTES)\n+              .expireAfterWrite(1, TimeUnit.MINUTES)\n               .maximumSize(100)\n               .removalListener(\n-                  (RemovalListener<UnboundedSourceRestriction, UnboundedReader>)\n+                  (RemovalListener<Object, UnboundedReader>)\n                       removalNotification -> {\n-                        try {\n-                          removalNotification.getValue().close();\n-                        } catch (IOException e) {\n-                          LOG.warn(\"Failed to close UnboundedReader.\", e);\n+                        if (removalNotification.wasEvicted()) {\n+                          try {\n+                            removalNotification.getValue().close();\n+                          } catch (IOException e) {\n+                            LOG.warn(\"Failed to close UnboundedReader.\", e);\n+                          }\n                         }\n                       })\n               .build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MzM1Mw==", "url": "https://github.com/apache/beam/pull/13592#discussion_r547163353", "bodyText": "This looks dangerous. What if we are still using the reader inside processElement? This is likely to be called from different thread, so we need a synchronization there and not close the reader if being used.", "author": "je-ik", "createdAt": "2020-12-22T09:22:48Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -439,11 +444,37 @@ public IsBounded isBounded() {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n+    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n \n     private UnboundedSourceAsSDFWrapperFn(Coder<CheckpointT> checkpointCoder) {\n       this.checkpointCoder = checkpointCoder;\n     }\n \n+    private UnboundedSourceRestriction createCacheKey(\n+        UnboundedSource<OutputT, CheckpointT> source, CheckpointT checkpoint) {\n+      // For caching reader, we don't care about the watermark.\n+      return UnboundedSourceRestriction.create(\n+          source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE);\n+    }\n+\n+    @Setup\n+    public void setUp() throws Exception {\n+      cachedReaders =\n+          CacheBuilder.newBuilder()\n+              .expireAfterWrite(5, TimeUnit.MINUTES)\n+              .maximumSize(100)\n+              .removalListener(\n+                  (RemovalListener<UnboundedSourceRestriction, UnboundedReader>)\n+                      removalNotification -> {\n+                        try {\n+                          removalNotification.getValue().close();", "originalCommit": "3d0a8185a0e4937132c38d3acac7ac8356caf25d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0MDM2Nw==", "url": "https://github.com/apache/beam/pull/13592#discussion_r547440367", "bodyText": "That's a very good point. Thanks for catching this! I should remove the entry from cache when I obtain the reader from the cache to avoid eviction during processing and we will cache the reader after we finish.", "author": "boyuanzz", "createdAt": "2020-12-22T18:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MzM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2d7e6b9ae68f9e13ae48e47c3b372707c9844d57", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\nindex 7ba2d5094e..34fbdbc4ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n\n@@ -444,32 +444,38 @@ public class Read {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n-    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n+    private Cache<Object, UnboundedReader<OutputT>> cachedReaders;\n+    private UnboundedReader<OutputT> currentReader;\n+    Coder<UnboundedSourceRestriction<OutputT, CheckpointT>> restrictionCoder;\n \n     private UnboundedSourceAsSDFWrapperFn(Coder<CheckpointT> checkpointCoder) {\n       this.checkpointCoder = checkpointCoder;\n     }\n \n-    private UnboundedSourceRestriction createCacheKey(\n+    private Object createCacheKey(\n         UnboundedSource<OutputT, CheckpointT> source, CheckpointT checkpoint) {\n+      checkNotNull(restrictionCoder);\n       // For caching reader, we don't care about the watermark.\n-      return UnboundedSourceRestriction.create(\n-          source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE);\n+      return restrictionCoder.structuralValue(\n+          UnboundedSourceRestriction.create(source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE));\n     }\n \n     @Setup\n     public void setUp() throws Exception {\n+      restrictionCoder = restrictionCoder();\n       cachedReaders =\n           CacheBuilder.newBuilder()\n-              .expireAfterWrite(5, TimeUnit.MINUTES)\n+              .expireAfterWrite(1, TimeUnit.MINUTES)\n               .maximumSize(100)\n               .removalListener(\n-                  (RemovalListener<UnboundedSourceRestriction, UnboundedReader>)\n+                  (RemovalListener<Object, UnboundedReader>)\n                       removalNotification -> {\n-                        try {\n-                          removalNotification.getValue().close();\n-                        } catch (IOException e) {\n-                          LOG.warn(\"Failed to close UnboundedReader.\", e);\n+                        if (removalNotification.wasEvicted()) {\n+                          try {\n+                            removalNotification.getValue().close();\n+                          } catch (IOException e) {\n+                            LOG.warn(\"Failed to close UnboundedReader.\", e);\n+                          }\n                         }\n                       })\n               .build();\n"}}, {"oid": "2d7e6b9ae68f9e13ae48e47c3b372707c9844d57", "url": "https://github.com/apache/beam/commit/2d7e6b9ae68f9e13ae48e47c3b372707c9844d57", "message": "Address comments", "committedDate": "2020-12-22T20:43:13Z", "type": "forcePushed"}, {"oid": "58da8b3d171f7493fbf9275becf679936e518947", "url": "https://github.com/apache/beam/commit/58da8b3d171f7493fbf9275becf679936e518947", "message": "Cache UnboundedReader per CheckpointMark in SDF Wrapper DoFn.", "committedDate": "2020-12-23T04:34:18Z", "type": "forcePushed"}, {"oid": "e0b4bfc60d4cad8d61693243da1d2e19615a2f7c", "url": "https://github.com/apache/beam/commit/e0b4bfc60d4cad8d61693243da1d2e19615a2f7c", "message": "Cache UnboundedReader per CheckpointMark in SDF Wrapper DoFn.", "committedDate": "2020-12-23T23:39:51Z", "type": "forcePushed"}, {"oid": "98ee1f178a9e80f4694f86775c06a54ecf82abb8", "url": "https://github.com/apache/beam/commit/98ee1f178a9e80f4694f86775c06a54ecf82abb8", "message": "Cache UnboundedReader per CheckpointMark in SDF Wrapper DoFn.", "committedDate": "2020-12-24T01:45:49Z", "type": "commit"}, {"oid": "98ee1f178a9e80f4694f86775c06a54ecf82abb8", "url": "https://github.com/apache/beam/commit/98ee1f178a9e80f4694f86775c06a54ecf82abb8", "message": "Cache UnboundedReader per CheckpointMark in SDF Wrapper DoFn.", "committedDate": "2020-12-24T01:45:49Z", "type": "forcePushed"}]}