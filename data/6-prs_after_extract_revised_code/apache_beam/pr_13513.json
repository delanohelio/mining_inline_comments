{"pr_number": 13513, "pr_title": "[Beam-11002] Fixes BufferOverflowException in XMLReader", "pr_createdAt": "2020-12-09T19:15:03Z", "pr_url": "https://github.com/apache/beam/pull/13513", "timeline": [{"oid": "017b3c5263a6d4dca6d8b5e69b4ec8d01335981d", "url": "https://github.com/apache/beam/commit/017b3c5263a6d4dca6d8b5e69b4ec8d01335981d", "message": "[BEAM-11002] Added a test method reproducing BufferOverflowException", "committedDate": "2020-12-09T17:56:33Z", "type": "commit"}, {"oid": "c5987fdc021a3a778cb0c3f449012e913ea14a3a", "url": "https://github.com/apache/beam/commit/c5987fdc021a3a778cb0c3f449012e913ea14a3a", "message": "[BEAM-11002] Fixed BufferOverflowException in XMLReader", "committedDate": "2020-12-09T19:04:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxODU4MQ==", "url": "https://github.com/apache/beam/pull/13513#discussion_r543818581", "bodyText": "Why is bytesToWrite not equal to charBytes.length?\nI believe we are trying to check that:\nif (charBytes.length <= buf.remaining() instead of if (bytesToWrite > BUF_SIZE) ?", "author": "aaltay", "createdAt": "2020-12-16T01:52:49Z", "path": "sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java", "diffHunk": "@@ -281,7 +283,15 @@ private long getFirstOccurenceOfRecordElement(\n               break outer;\n             } else {\n               // Matching was unsuccessful. Reset the buffer to include bytes read for the char.\n-              ByteBuffer newbuf = ByteBuffer.allocate(BUF_SIZE);\n+              int bytesToWrite = buf.remaining() + charBytes.length;", "originalCommit": "c5987fdc021a3a778cb0c3f449012e913ea14a3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MzY3OQ==", "url": "https://github.com/apache/beam/pull/13513#discussion_r544083679", "bodyText": "charBytes is an array of 4 bytes, we've read from the buffer.\nthis code caused the buffer overflow because that charBytes can be the input from the previous reading from the channel.\n              newbuf.put(charBytes);\n              offsetInFileOfCurrentByte -= charBytes.length;\n              while (buf.hasRemaining()) {\n                newbuf.put(buf.get());\n              }\n\nso when we do the next reading of BUF_SIZE (or BUF_SIZE-n where n <charBytes.length) bytes from the channel to buf and go here, we have more byte to write to the newBuf than it's capacity.", "author": "Romster", "createdAt": "2020-12-16T07:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxODU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxNTY2OA==", "url": "https://github.com/apache/beam/pull/13513#discussion_r544315668", "bodyText": "It seems to be a pretty rare corner case, so people usually don't face it.\nBut our service deals with lots of big XML files with different formats and we see it several times a week.", "author": "Romster", "createdAt": "2020-12-16T13:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxODU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzMTk2NQ==", "url": "https://github.com/apache/beam/pull/13513#discussion_r544531965", "bodyText": "Got it, makes sense. I will resolve this. We can merge it once the other comment is also resolved.", "author": "aaltay", "createdAt": "2020-12-16T18:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxODU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "74eb5eef8a51809626d74226e91436b57b69e1c6", "chunk": "diff --git a/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java b/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java\nindex c6dc85ce1d..04bb74a37c 100644\n--- a/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java\n+++ b/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java\n\n@@ -286,7 +286,8 @@ public class XmlSource<T> extends FileBasedSource<T> {\n               int bytesToWrite = buf.remaining() + charBytes.length;\n               ByteBuffer newbuf;\n               if (bytesToWrite > BUF_SIZE) {\n-                // Avoiding buffer overflow\n+                // Avoiding buffer overflow. The number of bytes to push to the buffer might be\n+                // larger than BUF_SIZE due to additional 'charBytes'.\n                 newbuf = ByteBuffer.allocate(bytesToWrite);\n                 bufSizeChanged = true;\n               } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzkyMTA3OA==", "url": "https://github.com/apache/beam/pull/13513#discussion_r543921078", "bodyText": "I think your input here does not conform to the format required by the Xml source that is defined here: https://github.com/apache/beam/blob/master/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlIO.java#L68\nSpecifically it has to be of the following format.\n<root>\n<record> ... </record>\n<record> ... </record>\n<record> ... </record>\n...\n<record> ... </record>\n</root>\n\nBut you have additional element: <trainTags><trainTag></trainTag> ... <trainTag></trainTag></trainTags>\nWere you able to reproduce the issue when the input conforms to the required format ?", "author": "chamikaramj", "createdAt": "2020-12-16T04:15:08Z", "path": "sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java", "diffHunk": "@@ -873,6 +881,46 @@ public void testSplitAtFractionExhaustiveSingleByte() throws Exception {\n     assertSplitAtFractionExhaustive(source, options);\n   }\n \n+  @Test\n+  public void testNoBufferOverflowThrown() throws IOException {\n+    // The magicNumber was found imperatively and will be different for different xml content.\n+    // Test with the current setup causes BufferOverflow in\n+    // XMLReader#getFirstOccurenceOfRecordElement method,\n+    // if the specific corner case is not handled\n+    final int magicNumber = 183;\n+    StringBuilder sb = new StringBuilder();", "originalCommit": "c5987fdc021a3a778cb0c3f449012e913ea14a3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NzM0OQ==", "url": "https://github.com/apache/beam/pull/13513#discussion_r544087349", "bodyText": "This is an artificial example, but the main condition is that you have some amount of <recordBlahBlah> tags\nThe real case looks like\n<root>\n <record> \n  <recordSomething>\n  </recordSomething>\n </record>\n <record> \n  <recordSomething>\n  </recordSomething>\n </record>\n...\n <record> \n  <recordSomething>\n  </recordSomething>\n </record>\n</root>\n\nThe behaviour seems to be environment-dependent, so I'm not sure if even my example will be reproduced in another environment (it depends also on how many bytes we are reading  from the channel)", "author": "Romster", "createdAt": "2020-12-16T08:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzkyMTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTY3NQ==", "url": "https://github.com/apache/beam/pull/13513#discussion_r544121675", "bodyText": "Here is a piece of XML we deal with in our service:\nfrom the root ONIXMessage we read records Product\n<?xml version='1.0' encoding='ISO-8859-1'?>\n<ONIXMessage xmlns=\"http://ns.editeur.org/onix/3.0/reference\" release=\"3.0\">\n  <Header>\n    <Sender>\n      <SenderIdentifier>\n        <SenderIDType></SenderIDType>\n        <IDValue></IDValue>\n      </SenderIdentifier>\n      <SenderName></SenderName>\n      <EmailAddress></EmailAddress>\n    </Sender>\n    <Addressee>\n      <AddresseeName></AddresseeName>\n    </Addressee>\n    <MessageNumber></MessageNumber>\n    <SentDateTime></SentDateTime>\n  </Header>\n  <Product>\n    <RecordReference></RecordReference>\n    <NotificationType></NotificationType>\n    <RecordSourceType></RecordSourceType>\n    <ProductIdentifier>\n      <ProductIDType></ProductIDType>\n      <IDValue></IDValue>\n    </ProductIdentifier>\n    <ProductIdentifier>\n      <ProductIDType></ProductIDType>\n      <IDValue></IDValue>\n    </ProductIdentifier>\n\nas you can see there are inner tags like ProductIdentifier and ProductIDType.\nBut we also have a structure like\n<root>\n<head>\n</head>\n<record>\n</record>\n...\n</root>\n\nand in most cases, it's not a problem\nWe run it in Google Dataflow, and when it fails with BufferOverflow restarting the job helps - so the issue can't be easily reproduced.", "author": "Romster", "createdAt": "2020-12-16T08:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzkyMTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNzQwMQ==", "url": "https://github.com/apache/beam/pull/13513#discussion_r544307401", "bodyText": "I've updated the test - now it uses input like\n<trains>\n    <train>\n        <trainTags>\n            <trainTag>0</trainTag>\n            <trainTag>1</trainTag>\n            <trainTag>2</trainTag>\n            ...\n\nSo the format issue is not the case.\nTo reproduce the error I had to use TestPipeline - so the input was split into bundles\n\nINFO: Splitting filepattern /var/folders/j5/2qx0r7453tvd56zpjbstv6fw4m_zm3/T/junit946409719265813413/trainXMLWithTags into bundles of size 126 took 1 ms and produced 1 files and 20 bundles", "author": "Romster", "createdAt": "2020-12-16T13:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzkyMTA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "76f78136b537a0f5fec736011fa05a49d576b9fc", "chunk": "diff --git a/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java b/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java\nindex 90fda1f878..0be34cb483 100644\n--- a/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java\n+++ b/sdks/java/io/xml/src/test/java/org/apache/beam/sdk/io/xml/XmlSourceTest.java\n\n@@ -887,38 +885,34 @@ public class XmlSourceTest {\n     // Test with the current setup causes BufferOverflow in\n     // XMLReader#getFirstOccurenceOfRecordElement method,\n     // if the specific corner case is not handled\n-    final int magicNumber = 183;\n-    StringBuilder sb = new StringBuilder();\n+    final int magicNumber = 51;\n+    StringBuilder tagsSb = new StringBuilder();\n     for (int j = 0; j < magicNumber; j++) {\n       // tags which start the same way as the record element, trigger\n       // a special flow, which could end up with BufferOverflow\n       // exception\n-      sb.append(\"<trainTag></trainTag>\");\n+      tagsSb.append(\"<trainTag>\").append(j).append(\"</trainTag>\");\n     }\n     File file = tempFolder.newFile(\"trainXMLWithTags\");\n \n-    String xmlWithNoise = trainXMLWithTrainTagsTemplate.replace(\"%trainTags%\", sb.toString());\n+    String xmlWithNoise = trainXMLWithTrainTagsTemplate.replace(\"%trainTags%\", tagsSb.toString());\n     Files.write(file.toPath(), xmlWithNoise.getBytes(StandardCharsets.UTF_8));\n \n-    BoundedSource<Train> source =\n-        XmlIO.<Train>read()\n-            .from(file.toPath().toString())\n-            .withRootElement(\"trains\")\n-            .withRecordElement(\"train\")\n-            .withRecordClass(Train.class)\n-            .withMinBundleSize(1024)\n-            .createSource();\n+    PCollection<Train> output =\n+        p.apply(\n+            \"ReadFileData\",\n+            XmlIO.<Train>read()\n+                .from(file.toPath().toString())\n+                .withRootElement(\"trains\")\n+                .withRecordElement(\"train\")\n+                .withRecordClass(Train.class)\n+                .withMinBundleSize(1024));\n \n     List<Train> expectedResults =\n         ImmutableList.of(\n-            new Train(\"Thomas\", 1, \"blue\", null),\n-            new Train(\"Henry\", 3, \"green\", null),\n-            new Train(\"Toby\", 7, \"brown\", null));\n-\n-    assertThat(\n-        trainsToStrings(expectedResults),\n-        containsInAnyOrder(\n-            trainsToStrings(readEverythingFromReader(source.createReader(null))).toArray()));\n+            new Train(\"Thomas\", 1, \"blue\", null), new Train(\"Henry\", 3, \"green\", null));\n+    PAssert.that(output).containsInAnyOrder(expectedResults);\n+    p.run();\n   }\n \n   @Test\n"}}, {"oid": "76f78136b537a0f5fec736011fa05a49d576b9fc", "url": "https://github.com/apache/beam/commit/76f78136b537a0f5fec736011fa05a49d576b9fc", "message": "[BEAM-11002] Test testNoBufferOverflowThrown uses TestPipeline + test input is refactored", "committedDate": "2020-12-16T13:38:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5MTI1OQ==", "url": "https://github.com/apache/beam/pull/13513#discussion_r544791259", "bodyText": "Probably expand comment to following.\n\"The number of bytes to push to the buffer might be larger than BUF_SIZE due to additional 'charBytes'.\"", "author": "chamikaramj", "createdAt": "2020-12-17T03:48:33Z", "path": "sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java", "diffHunk": "@@ -281,7 +283,15 @@ private long getFirstOccurenceOfRecordElement(\n               break outer;\n             } else {\n               // Matching was unsuccessful. Reset the buffer to include bytes read for the char.\n-              ByteBuffer newbuf = ByteBuffer.allocate(BUF_SIZE);\n+              int bytesToWrite = buf.remaining() + charBytes.length;\n+              ByteBuffer newbuf;\n+              if (bytesToWrite > BUF_SIZE) {\n+                // Avoiding buffer overflow", "originalCommit": "76f78136b537a0f5fec736011fa05a49d576b9fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4Nzg5OA==", "url": "https://github.com/apache/beam/pull/13513#discussion_r544887898", "bodyText": "done", "author": "Romster", "createdAt": "2020-12-17T08:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5MTI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "74eb5eef8a51809626d74226e91436b57b69e1c6", "chunk": "diff --git a/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java b/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java\nindex c6dc85ce1d..04bb74a37c 100644\n--- a/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java\n+++ b/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java\n\n@@ -286,7 +286,8 @@ public class XmlSource<T> extends FileBasedSource<T> {\n               int bytesToWrite = buf.remaining() + charBytes.length;\n               ByteBuffer newbuf;\n               if (bytesToWrite > BUF_SIZE) {\n-                // Avoiding buffer overflow\n+                // Avoiding buffer overflow. The number of bytes to push to the buffer might be\n+                // larger than BUF_SIZE due to additional 'charBytes'.\n                 newbuf = ByteBuffer.allocate(bytesToWrite);\n                 bufSizeChanged = true;\n               } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5MTYwNw==", "url": "https://github.com/apache/beam/pull/13513#discussion_r544791607", "bodyText": "Add a comment.\n\"We have to reset the size of the buffer to 'BUF_SIZE' to prevent it from infinitely increasing.\"", "author": "chamikaramj", "createdAt": "2020-12-17T03:49:38Z", "path": "sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java", "diffHunk": "@@ -320,7 +330,12 @@ private long getFirstOccurenceOfRecordElement(\n             recordStartBytesMatched = true;\n           }\n         }\n-        buf.clear();\n+        if (bufSizeChanged) {\n+          buf = ByteBuffer.allocate(BUF_SIZE);", "originalCommit": "76f78136b537a0f5fec736011fa05a49d576b9fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4Nzk2NA==", "url": "https://github.com/apache/beam/pull/13513#discussion_r544887964", "bodyText": "done", "author": "Romster", "createdAt": "2020-12-17T08:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5MTYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "74eb5eef8a51809626d74226e91436b57b69e1c6", "chunk": "diff --git a/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java b/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java\nindex c6dc85ce1d..04bb74a37c 100644\n--- a/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java\n+++ b/sdks/java/io/xml/src/main/java/org/apache/beam/sdk/io/xml/XmlSource.java\n\n@@ -331,6 +332,8 @@ public class XmlSource<T> extends FileBasedSource<T> {\n           }\n         }\n         if (bufSizeChanged) {\n+          // We have to reset the size of the buffer to 'BUF_SIZE'\n+          // to prevent it from infinitely increasing.\n           buf = ByteBuffer.allocate(BUF_SIZE);\n           bufSizeChanged = false;\n         } else {\n"}}, {"oid": "74eb5eef8a51809626d74226e91436b57b69e1c6", "url": "https://github.com/apache/beam/commit/74eb5eef8a51809626d74226e91436b57b69e1c6", "message": "[BEAM-11002] Added some more comments", "committedDate": "2020-12-17T08:08:17Z", "type": "commit"}]}