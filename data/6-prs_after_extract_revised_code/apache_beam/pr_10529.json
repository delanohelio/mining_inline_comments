{"pr_number": 10529, "pr_title": "[BEAM-9044] Protobuf options to Schema options", "pr_createdAt": "2020-01-08T08:32:21Z", "pr_url": "https://github.com/apache/beam/pull/10529", "timeline": [{"oid": "7a2dbac139163ec689c97cc337a0fd5ce921bd08", "url": "https://github.com/apache/beam/commit/7a2dbac139163ec689c97cc337a0fd5ce921bd08", "message": "[BEAM-9044] Protobuf options to Schema options\n\nConvert protobuf options to Row schema options. It gets the options\nfrom a proto message descriptor and converts them into beam schema\noptions on the Schema. It does the same from proto field descriptors,\nconverting them into beam field options.\n\nThe converter creates typed options as the proto options are also\nfully typed. For the convertion it uses the ProtoDynamicSchema\nto resolve the types.", "committedDate": "2020-01-10T16:18:12Z", "type": "forcePushed"}, {"oid": "4eb8f25e1f0909b23dc97222605635cc1d412a38", "url": "https://github.com/apache/beam/commit/4eb8f25e1f0909b23dc97222605635cc1d412a38", "message": "[BEAM-9044] Protobuf options to Schema options\n\nConvert protobuf options to Row schema options. It gets the options\nfrom a proto message descriptor and converts them into beam schema\noptions on the Schema. It does the same from proto field descriptors,\nconverting them into beam field options.\n\nThe converter creates typed options as the proto options are also\nfully typed. For the convertion it uses the ProtoDynamicSchema\nto resolve the types.", "committedDate": "2020-01-13T21:21:41Z", "type": "forcePushed"}, {"oid": "c6578d0f3f916db0b277f966666424a66c29232c", "url": "https://github.com/apache/beam/commit/c6578d0f3f916db0b277f966666424a66c29232c", "message": "[BEAM-9044] Protobuf options to Schema options\n\nConvert protobuf options to Row schema options. It gets the options\nfrom a proto message descriptor and converts them into beam schema\noptions on the Schema. It does the same from proto field descriptors,\nconverting them into beam field options.\n\nThe converter creates typed options as the proto options are also\nfully typed. For the convertion it uses the ProtoDynamicSchema\nto resolve the types.", "committedDate": "2020-02-13T10:00:43Z", "type": "forcePushed"}, {"oid": "7aa174e2c0735f202934cfcd71ffc3ffcf6ea478", "url": "https://github.com/apache/beam/commit/7aa174e2c0735f202934cfcd71ffc3ffcf6ea478", "message": "[BEAM-9044] Protobuf options to Schema options\n\nConvert protobuf options to Row schema options. It gets the options\nfrom a proto message descriptor and converts them into beam schema\noptions on the Schema. It does the same from proto field descriptors,\nconverting them into beam field options.\n\nThe converter creates typed options as the proto options are also\nfully typed. For the convertion it uses the ProtoDynamicSchema\nto resolve the types.", "committedDate": "2020-02-26T10:37:48Z", "type": "forcePushed"}, {"oid": "ccc7eb1fb23d41f34c77f6f587df588926d7b95b", "url": "https://github.com/apache/beam/commit/ccc7eb1fb23d41f34c77f6f587df588926d7b95b", "message": "[BEAM-9044] Protobuf options to Schema options\n\nConvert protobuf options to Row schema options. It gets the options\nfrom a proto message descriptor and converts them into beam schema\noptions on the Schema. It does the same from proto field descriptors,\nconverting them into beam field options.\n\nThe converter creates typed options as the proto options are also\nfully typed. For the convertion it uses the ProtoDynamicSchema\nto resolve the types.", "committedDate": "2020-02-29T10:36:07Z", "type": "forcePushed"}, {"oid": "31da15fb17006f353265c86afbfe9b28b51ec3b3", "url": "https://github.com/apache/beam/commit/31da15fb17006f353265c86afbfe9b28b51ec3b3", "message": "[BEAM-9044] Protobuf options to Schema options\n\nConvert protobuf options to Row schema options. It gets the options\nfrom a proto message descriptor and converts them into beam schema\noptions on the Schema. It does the same from proto field descriptors,\nconverting them into beam field options.\n\nThe converter creates typed options as the proto options are also\nfully typed. For the convertion it uses the ProtoDynamicSchema\nto resolve the types.", "committedDate": "2020-03-19T09:04:26Z", "type": "forcePushed"}, {"oid": "d5f3bf34fc4d84ff4d004805214e48d9d171add7", "url": "https://github.com/apache/beam/commit/d5f3bf34fc4d84ff4d004805214e48d9d171add7", "message": "[BEAM-9044] Protobuf options to Schema options\n\nConvert protobuf options to Row schema options. It gets the options\nfrom a proto message descriptor and converts them into beam schema\noptions on the Schema. It does the same from proto field descriptors,\nconverting them into beam field options.\n\nThe converter creates typed options as the proto options are also\nfully typed. For the convertion it uses the ProtoDynamicSchema\nto resolve the types.", "committedDate": "2020-03-19T10:51:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1MzE2OA==", "url": "https://github.com/apache/beam/pull/10529#discussion_r396253168", "bodyText": "We want to switch this metadata to use options. However you are translating proto option names directly to field names, which means there's no guarantee that these other options won't conflict. Maybe prefix all of these options with something to prevent potential conflict?", "author": "reuvenlax", "createdAt": "2020-03-23T07:30:21Z", "path": "sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java", "diffHunk": "@@ -205,10 +205,12 @@ static Schema getSchema(Descriptors.Descriptor descriptor) {\n         // Store proto field number in metadata.\n         FieldType fieldType =\n             withMetaData(beamFieldTypeFromProtoField(fieldDescriptor), fieldDescriptor);", "originalCommit": "d5f3bf34fc4d84ff4d004805214e48d9d171add7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1ODE1MA==", "url": "https://github.com/apache/beam/pull/10529#discussion_r396258150", "bodyText": "We want to switch this metadata to use options. However you are translating proto option names directly to field names, which means there's no guarantee that these other options won't conflict. Maybe prefix all of these options with something to prevent potential conflict?\n\nWhat about beam:option:proto:, that would make an proto option vptech.data.v1.description into beam:option:proto:vptech.data.v1.description. Making it a URI format\nbeam:option : fixed prefix for options, proto : for the extension (will be avro for avro), vptech.data.v1 package of the extension and desciption the proto extension field.", "author": "alexvanboxel", "createdAt": "2020-03-23T07:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1MzE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MTgyMg==", "url": "https://github.com/apache/beam/pull/10529#discussion_r396791822", "bodyText": "I think Reuven was referring to the metadata that's added in withMetaData, since that's the \"special\" proto metadata", "author": "TheNeuralBit", "createdAt": "2020-03-23T22:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1MzE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NzgxMw==", "url": "https://github.com/apache/beam/pull/10529#discussion_r396977813", "bodyText": "Is it, I don't think so... because I told Reuven I would do metadata after this. Still I think it's a good idea... and with your comment I want to revise the URI:\n\nbeam:option:proto:field:vptech.data.v1.description for a proto field option\nbeam:option:proto:message:vptech.data.v1.description for a proto message option\nbeam:option:proto:meta:number for a proto field number\nbeam:option:proto:meta:type_name for a proto type name\n\nWDYT?", "author": "alexvanboxel", "createdAt": "2020-03-24T08:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1MzE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDI1Mg==", "url": "https://github.com/apache/beam/pull/10529#discussion_r397464252", "bodyText": "I don't want to force all Beam option names to have a prefix - I think that's the wrong approach. I'm suggesting that we create well-known prefixes for these proto options (when translated to Beam options), so we can distinguish them from other options. The prefixes you suggested sound fine to me.", "author": "reuvenlax", "createdAt": "2020-03-24T21:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1MzE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0ODk5MQ==", "url": "https://github.com/apache/beam/pull/10529#discussion_r397748991", "bodyText": "Now all the options are prefix. I moved the removal of the metadata to another ticket, because it's more involved:\n[BEAM-9604] BIP-1: Remove schema metadata usage for Protobuf extension", "author": "alexvanboxel", "createdAt": "2020-03-25T10:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1MzE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "e741380c7924d50a48e813ae992d2c3c722a8342", "chunk": "diff --git a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java\nindex a0b01e5740..dd43096943 100644\n--- a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java\n+++ b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java\n\n@@ -203,35 +175,20 @@ class ProtoSchemaTranslator {\n     for (Descriptors.FieldDescriptor fieldDescriptor : descriptor.getFields()) {\n       if (!oneOfFields.contains(fieldDescriptor.getNumber())) {\n         // Store proto field number in metadata.\n-        FieldType fieldType =\n-            withMetaData(beamFieldTypeFromProtoField(fieldDescriptor), fieldDescriptor);\n+        FieldType fieldType = beamFieldTypeFromProtoField(fieldDescriptor);\n         fields.add(\n-            Field.of(fieldDescriptor.getName(), fieldType)\n+            withFieldNumber(\n+                    Field.of(fieldDescriptor.getName(), fieldType), fieldDescriptor.getNumber())\n                 .withOptions(getFieldOptions(fieldDescriptor)));\n       }\n     }\n-    return Schema.builder().addFields(fields).setOptions(getSchemaOptions(descriptor)).build();\n-  }\n-\n-  private static FieldType withMetaData(\n-      FieldType inType, Descriptors.FieldDescriptor fieldDescriptor) {\n-    FieldType fieldType = withFieldNumber(inType, fieldDescriptor.getNumber());\n-    if (fieldDescriptor.isMapField()) {\n-      FieldDescriptor keyFieldDescriptor = fieldDescriptor.getMessageType().findFieldByName(\"key\");\n-      FieldDescriptor valueFieldDescriptor =\n-          fieldDescriptor.getMessageType().findFieldByName(\"value\");\n-      if ((keyFieldDescriptor.getType() == FieldDescriptor.Type.MESSAGE)) {\n-        fieldType =\n-            withMapKeyMessageName(fieldType, keyFieldDescriptor.getMessageType().getFullName());\n-      }\n-      if ((valueFieldDescriptor.getType() == FieldDescriptor.Type.MESSAGE)) {\n-        fieldType =\n-            withMapValueMessageName(fieldType, valueFieldDescriptor.getMessageType().getFullName());\n-      }\n-    } else if (fieldDescriptor.getType() == FieldDescriptor.Type.MESSAGE) {\n-      return withMessageName(fieldType, fieldDescriptor.getMessageType().getFullName());\n-    }\n-    return fieldType;\n+    return Schema.builder()\n+        .addFields(fields)\n+        .setOptions(\n+            getSchemaOptions(descriptor)\n+                .setOption(\n+                    SCHEMA_OPTION_META_TYPE_NAME, FieldType.STRING, descriptor.getFullName()))\n+        .build();\n   }\n \n   private static FieldType beamFieldTypeFromProtoField(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1MzgwNQ==", "url": "https://github.com/apache/beam/pull/10529#discussion_r396253805", "bodyText": "As mentioned above, I think we should add a well-known prefix here.", "author": "reuvenlax", "createdAt": "2020-03-23T07:31:57Z", "path": "sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java", "diffHunk": "@@ -352,4 +354,49 @@ private static FieldType beamFieldTypeFromSingularProtoField(\n     }\n     return fieldType;\n   }\n+\n+  private static Schema.Options getFieldOptions(FieldDescriptor fieldDescriptor) {\n+    return getOptions(fieldDescriptor.getOptions().getAllFields());\n+  }\n+\n+  private static Schema.Options getSchemaOptions(Descriptors.Descriptor descriptor) {\n+    return getOptions(descriptor.getOptions().getAllFields());\n+  }\n+\n+  private static Schema.Options getOptions(Map<FieldDescriptor, Object> allFields) {\n+    Schema.Options.Builder optionsBuilder = Schema.Options.builder();\n+    for (Map.Entry<FieldDescriptor, Object> entry : allFields.entrySet()) {\n+      FieldDescriptor fieldDescriptor = entry.getKey();\n+      FieldType fieldType = beamFieldTypeFromProtoField(fieldDescriptor);\n+\n+      switch (fieldType.getTypeName()) {\n+        case BYTE:\n+        case BYTES:\n+        case INT16:\n+        case INT32:\n+        case INT64:\n+        case DECIMAL:\n+        case FLOAT:\n+        case DOUBLE:\n+        case STRING:\n+        case BOOLEAN:\n+        case LOGICAL_TYPE:\n+        case ROW:\n+        case ARRAY:\n+        case ITERABLE:\n+          Field field = Field.of(\"OPTION\", fieldType);\n+          ProtoDynamicMessageSchema schema = ProtoDynamicMessageSchema.forSchema(Schema.of(field));\n+          optionsBuilder.setOption(\n+              fieldDescriptor.getFullName(),", "originalCommit": "d5f3bf34fc4d84ff4d004805214e48d9d171add7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "496d77a94acc05a4895e6c976a452d1cd6cb93f9", "chunk": "diff --git a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java\nindex a0b01e5740..f6c7036762 100644\n--- a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java\n+++ b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java\n\n@@ -356,14 +362,14 @@ class ProtoSchemaTranslator {\n   }\n \n   private static Schema.Options getFieldOptions(FieldDescriptor fieldDescriptor) {\n-    return getOptions(fieldDescriptor.getOptions().getAllFields());\n+    return getOptions(SCHEMA_OPTION_FIELD_PREFIX, fieldDescriptor.getOptions().getAllFields());\n   }\n \n   private static Schema.Options getSchemaOptions(Descriptors.Descriptor descriptor) {\n-    return getOptions(descriptor.getOptions().getAllFields());\n+    return getOptions(SCHEMA_OPTION_MESSAGE_PREFIX, descriptor.getOptions().getAllFields());\n   }\n \n-  private static Schema.Options getOptions(Map<FieldDescriptor, Object> allFields) {\n+  private static Schema.Options getOptions(String prefix, Map<FieldDescriptor, Object> allFields) {\n     Schema.Options.Builder optionsBuilder = Schema.Options.builder();\n     for (Map.Entry<FieldDescriptor, Object> entry : allFields.entrySet()) {\n       FieldDescriptor fieldDescriptor = entry.getKey();\n"}}, {"oid": "496d77a94acc05a4895e6c976a452d1cd6cb93f9", "url": "https://github.com/apache/beam/commit/496d77a94acc05a4895e6c976a452d1cd6cb93f9", "message": "Fixup: Add URN prefix to options.", "committedDate": "2020-03-26T07:46:57Z", "type": "forcePushed"}, {"oid": "f7185f63b139747719f1c240c1c5326b9637dde8", "url": "https://github.com/apache/beam/commit/f7185f63b139747719f1c240c1c5326b9637dde8", "message": "Fixup: Add URN prefix to options.", "committedDate": "2020-03-27T12:41:08Z", "type": "forcePushed"}, {"oid": "e741380c7924d50a48e813ae992d2c3c722a8342", "url": "https://github.com/apache/beam/commit/e741380c7924d50a48e813ae992d2c3c722a8342", "message": "[BEAM-9044] Protobuf options to Schema options\n\nConvert protobuf options to Row schema options. It gets the options\nfrom a proto message descriptor and converts them into beam schema\noptions on the Schema. It does the same from proto field descriptors,\nconverting them into beam field options.\n\nThe converter creates typed options as the proto options are also\nfully typed. For the convertion it uses the ProtoDynamicSchema\nto resolve the types.", "committedDate": "2020-04-03T11:35:51Z", "type": "commit"}, {"oid": "e741380c7924d50a48e813ae992d2c3c722a8342", "url": "https://github.com/apache/beam/commit/e741380c7924d50a48e813ae992d2c3c722a8342", "message": "[BEAM-9044] Protobuf options to Schema options\n\nConvert protobuf options to Row schema options. It gets the options\nfrom a proto message descriptor and converts them into beam schema\noptions on the Schema. It does the same from proto field descriptors,\nconverting them into beam field options.\n\nThe converter creates typed options as the proto options are also\nfully typed. For the convertion it uses the ProtoDynamicSchema\nto resolve the types.", "committedDate": "2020-04-03T11:35:51Z", "type": "forcePushed"}]}