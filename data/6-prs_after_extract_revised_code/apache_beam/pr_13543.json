{"pr_number": 13543, "pr_title": "[BEAM-11457] Add option to skip key-value clone", "pr_createdAt": "2020-12-14T13:36:25Z", "pr_url": "https://github.com/apache/beam/pull/13543", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ4MDg2MQ==", "url": "https://github.com/apache/beam/pull/13543#discussion_r548480861", "bodyText": "Please, make it configurable separately for keys and values like we do with other configuration options.", "author": "aromanenko-dev", "createdAt": "2020-12-24T10:17:21Z", "path": "sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java", "diffHunk": "@@ -475,6 +479,18 @@\n       return withValueTranslation(function).toBuilder().setValueCoder(coder).build();\n     }\n \n+    /**\n+     * Determines if key-value clone should be skipped or not (default is 'false'). Hadoop formats\n+     * typically work with Writable data structures which are mutable. Therefore, this IO will clone\n+     * read key-values if they are not in the list of well known immutable types. However, in case\n+     * user does use key/value translation functions, resulting key-values might already be\n+     * immutable. In such case, additional copy is unnecessary overhead and can be avoided by\n+     * setting skip to 'true'.\n+     */\n+    public Read<K, V> withSkipKeyValueClone(boolean value) {", "originalCommit": "76af49ec9db17fc63099b7ed8ea6970e6556d04f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b21335cbced08122e618e9a28463a7ae74a0297", "chunk": "diff --git a/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java b/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\nindex d24fe623bc..b41a91e380 100644\n--- a/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\n+++ b/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\n\n@@ -479,16 +501,14 @@ public class HadoopFormatIO {\n       return withValueTranslation(function).toBuilder().setValueCoder(coder).build();\n     }\n \n-    /**\n-     * Determines if key-value clone should be skipped or not (default is 'false'). Hadoop formats\n-     * typically work with Writable data structures which are mutable. Therefore, this IO will clone\n-     * read key-values if they are not in the list of well known immutable types. However, in case\n-     * user does use key/value translation functions, resulting key-values might already be\n-     * immutable. In such case, additional copy is unnecessary overhead and can be avoided by\n-     * setting skip to 'true'.\n-     */\n-    public Read<K, V> withSkipKeyValueClone(boolean value) {\n-      return toBuilder().setSkipKeyValueClone(value).build();\n+    /** Determines if key clone should be skipped or not (default is 'false'). */\n+    public Read<K, V> withSkipKeyClone(boolean value) {\n+      return toBuilder().setSkipKeyClone(value).build();\n+    }\n+\n+    /** Determines if value clone should be skipped or not (default is 'false'). */\n+    public Read<K, V> withSkipValueClone(boolean value) {\n+      return toBuilder().setSkipValueClone(value).build();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ4NzU1NA==", "url": "https://github.com/apache/beam/pull/13543#discussion_r548487554", "bodyText": "Please, set default values in read() with a builder.", "author": "aromanenko-dev", "createdAt": "2020-12-24T10:39:33Z", "path": "sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java", "diffHunk": "@@ -488,13 +504,16 @@\n       if (valueCoder == null) {\n         valueCoder = getDefaultCoder(getValueTypeDescriptor(), coderRegistry);\n       }\n+      boolean skipKeyValueClone = getSkipKeyValueClone() == null ? false : getSkipKeyValueClone();", "originalCommit": "76af49ec9db17fc63099b7ed8ea6970e6556d04f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b21335cbced08122e618e9a28463a7ae74a0297", "chunk": "diff --git a/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java b/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\nindex d24fe623bc..b41a91e380 100644\n--- a/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\n+++ b/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\n\n@@ -504,7 +524,6 @@ public class HadoopFormatIO {\n       if (valueCoder == null) {\n         valueCoder = getDefaultCoder(getValueTypeDescriptor(), coderRegistry);\n       }\n-      boolean skipKeyValueClone = getSkipKeyValueClone() == null ? false : getSkipKeyValueClone();\n \n       HadoopInputFormatBoundedSource<K, V> source =\n           new HadoopInputFormatBoundedSource<>(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUxNjgyNA==", "url": "https://github.com/apache/beam/pull/13543#discussion_r548516824", "bodyText": "Should it be used only with withKeyTranslation() or withValueTranslation(), or it can be used independently?", "author": "aromanenko-dev", "createdAt": "2020-12-24T12:31:24Z", "path": "sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java", "diffHunk": "@@ -475,6 +479,18 @@\n       return withValueTranslation(function).toBuilder().setValueCoder(coder).build();\n     }\n \n+    /**\n+     * Determines if key-value clone should be skipped or not (default is 'false'). Hadoop formats\n+     * typically work with Writable data structures which are mutable. Therefore, this IO will clone\n+     * read key-values if they are not in the list of well known immutable types. However, in case\n+     * user does use key/value translation functions, resulting key-values might already be", "originalCommit": "76af49ec9db17fc63099b7ed8ea6970e6556d04f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMTYyMQ==", "url": "https://github.com/apache/beam/pull/13543#discussion_r550431621", "bodyText": "I would keep it separate. I am not sure if there are some input formats out there which can be not reusing instances of does not use writables for serialization.", "author": "JozoVilcek", "createdAt": "2020-12-31T08:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUxNjgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "2b21335cbced08122e618e9a28463a7ae74a0297", "chunk": "diff --git a/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java b/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\nindex d24fe623bc..b41a91e380 100644\n--- a/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\n+++ b/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\n\n@@ -479,16 +501,14 @@ public class HadoopFormatIO {\n       return withValueTranslation(function).toBuilder().setValueCoder(coder).build();\n     }\n \n-    /**\n-     * Determines if key-value clone should be skipped or not (default is 'false'). Hadoop formats\n-     * typically work with Writable data structures which are mutable. Therefore, this IO will clone\n-     * read key-values if they are not in the list of well known immutable types. However, in case\n-     * user does use key/value translation functions, resulting key-values might already be\n-     * immutable. In such case, additional copy is unnecessary overhead and can be avoided by\n-     * setting skip to 'true'.\n-     */\n-    public Read<K, V> withSkipKeyValueClone(boolean value) {\n-      return toBuilder().setSkipKeyValueClone(value).build();\n+    /** Determines if key clone should be skipped or not (default is 'false'). */\n+    public Read<K, V> withSkipKeyClone(boolean value) {\n+      return toBuilder().setSkipKeyClone(value).build();\n+    }\n+\n+    /** Determines if value clone should be skipped or not (default is 'false'). */\n+    public Read<K, V> withSkipValueClone(boolean value) {\n+      return toBuilder().setSkipValueClone(value).build();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUxNzUwOQ==", "url": "https://github.com/apache/beam/pull/13543#discussion_r548517509", "bodyText": "Please, update HadoopFormatIO's Javadoc as well.", "author": "aromanenko-dev", "createdAt": "2020-12-24T12:33:56Z", "path": "sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java", "diffHunk": "@@ -475,6 +479,18 @@\n       return withValueTranslation(function).toBuilder().setValueCoder(coder).build();\n     }\n \n+    /**\n+     * Determines if key-value clone should be skipped or not (default is 'false'). Hadoop formats", "originalCommit": "76af49ec9db17fc63099b7ed8ea6970e6556d04f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b21335cbced08122e618e9a28463a7ae74a0297", "chunk": "diff --git a/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java b/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\nindex d24fe623bc..b41a91e380 100644\n--- a/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\n+++ b/sdks/java/io/hadoop-format/src/main/java/org/apache/beam/sdk/io/hadoop/format/HadoopFormatIO.java\n\n@@ -479,16 +501,14 @@ public class HadoopFormatIO {\n       return withValueTranslation(function).toBuilder().setValueCoder(coder).build();\n     }\n \n-    /**\n-     * Determines if key-value clone should be skipped or not (default is 'false'). Hadoop formats\n-     * typically work with Writable data structures which are mutable. Therefore, this IO will clone\n-     * read key-values if they are not in the list of well known immutable types. However, in case\n-     * user does use key/value translation functions, resulting key-values might already be\n-     * immutable. In such case, additional copy is unnecessary overhead and can be avoided by\n-     * setting skip to 'true'.\n-     */\n-    public Read<K, V> withSkipKeyValueClone(boolean value) {\n-      return toBuilder().setSkipKeyValueClone(value).build();\n+    /** Determines if key clone should be skipped or not (default is 'false'). */\n+    public Read<K, V> withSkipKeyClone(boolean value) {\n+      return toBuilder().setSkipKeyClone(value).build();\n+    }\n+\n+    /** Determines if value clone should be skipped or not (default is 'false'). */\n+    public Read<K, V> withSkipValueClone(boolean value) {\n+      return toBuilder().setSkipValueClone(value).build();\n     }\n \n     @Override\n"}}, {"oid": "b286414e49355c328c6a48b8dd656e0398fad184", "url": "https://github.com/apache/beam/commit/b286414e49355c328c6a48b8dd656e0398fad184", "message": "[BEAM-11457] Add option to skip key-value clone", "committedDate": "2020-12-31T08:51:11Z", "type": "commit"}, {"oid": "2b21335cbced08122e618e9a28463a7ae74a0297", "url": "https://github.com/apache/beam/commit/2b21335cbced08122e618e9a28463a7ae74a0297", "message": "[BEAM-11457] Split option to skip key/value clone", "committedDate": "2020-12-31T08:51:12Z", "type": "commit"}, {"oid": "3cdccd576f60f0c91220b871c2e99947393673a9", "url": "https://github.com/apache/beam/commit/3cdccd576f60f0c91220b871c2e99947393673a9", "message": "[BEAM-11457] Update CHANGES.md, apply spotless", "committedDate": "2020-12-31T08:57:50Z", "type": "commit"}, {"oid": "3cdccd576f60f0c91220b871c2e99947393673a9", "url": "https://github.com/apache/beam/commit/3cdccd576f60f0c91220b871c2e99947393673a9", "message": "[BEAM-11457] Update CHANGES.md, apply spotless", "committedDate": "2020-12-31T08:57:50Z", "type": "forcePushed"}]}