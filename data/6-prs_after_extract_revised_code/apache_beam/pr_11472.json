{"pr_number": 11472, "pr_title": "[BEAM-2939, BEAM-5602] Migrate from HasSize to HasProgress interface for restriction trackers and use the progress value during sizing, splitting and reporting", "pr_createdAt": "2020-04-20T22:37:36Z", "pr_url": "https://github.com/apache/beam/pull/11472", "timeline": [{"oid": "561c1cae399927ea7b2ea2f23c0bbb356ba591f7", "url": "https://github.com/apache/beam/commit/561c1cae399927ea7b2ea2f23c0bbb356ba591f7", "message": "[BEAM-2939] Fold Sizes sub-interfaces into RestrictionTracker", "committedDate": "2020-04-22T17:46:17Z", "type": "forcePushed"}, {"oid": "1c842638e13a37caa9456f500d68255ea806ebe3", "url": "https://github.com/apache/beam/commit/1c842638e13a37caa9456f500d68255ea806ebe3", "message": "[BEAM-2939] Fold Sizes sub-interfaces into RestrictionTracker", "committedDate": "2020-04-22T17:55:52Z", "type": "forcePushed"}, {"oid": "93b3a0ffdfecd4d2a29c49306a8f0679f008fedc", "url": "https://github.com/apache/beam/commit/93b3a0ffdfecd4d2a29c49306a8f0679f008fedc", "message": "[BEAM-2939] Expose HasProgress interface for restriction trackers and use the progress value during splitting\n\nNote that this change excludes a necessary \"rename\" of the Sizes class to something more appropriate to make the review simpler.", "committedDate": "2020-04-22T22:47:54Z", "type": "commit"}, {"oid": "7568b060c343574d2c9c7eec5c5e37ee9bbf0159", "url": "https://github.com/apache/beam/commit/7568b060c343574d2c9c7eec5c5e37ee9bbf0159", "message": "[BEAM-2939] Add the ability for SDK harness runners to provide additional monitoring infos.\n\nThis is towards reporting splittable dofn work completed and work remaining.", "committedDate": "2020-04-22T22:47:54Z", "type": "commit"}, {"oid": "7ac97ea0e32834506de29103697d42cec9fcdb97", "url": "https://github.com/apache/beam/commit/7ac97ea0e32834506de29103697d42cec9fcdb97", "message": "[BEAM-2939] Integrate progress reporting for splittable dofns.", "committedDate": "2020-04-22T22:47:54Z", "type": "commit"}, {"oid": "a02eb606ae56570ec8a5ae68d3f70578efe9abf9", "url": "https://github.com/apache/beam/commit/a02eb606ae56570ec8a5ae68d3f70578efe9abf9", "message": "[BEAM-2939] Fold Sizes sub-interfaces into RestrictionTracker", "committedDate": "2020-04-22T22:47:55Z", "type": "commit"}, {"oid": "cfa6692bd82b4c7db44c9c9c5083792f94dd8e98", "url": "https://github.com/apache/beam/commit/cfa6692bd82b4c7db44c9c9c5083792f94dd8e98", "message": "[BEAM-2939] Drop HasSize in favor of using HasProgress#getProgress#getWorkRemaining as the default if the DoFn doesn't override GetSize.", "committedDate": "2020-04-22T22:47:55Z", "type": "commit"}, {"oid": "cfa6692bd82b4c7db44c9c9c5083792f94dd8e98", "url": "https://github.com/apache/beam/commit/cfa6692bd82b4c7db44c9c9c5083792f94dd8e98", "message": "[BEAM-2939] Drop HasSize in favor of using HasProgress#getProgress#getWorkRemaining as the default if the DoFn doesn't override GetSize.", "committedDate": "2020-04-22T22:47:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5MzQ1MA==", "url": "https://github.com/apache/beam/pull/11472#discussion_r413493450", "bodyText": "Do we want to highlight that this fallback may impact batch autoscaling if HasProcess is not implemented correctly.", "author": "boyuanzz", "createdAt": "2020-04-23T04:06:53Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvoker.java", "diffHunk": "@@ -94,9 +94,13 @@ void invokeOnTimer(\n   void invokeSplitRestriction(ArgumentProvider<InputT, OutputT> arguments);\n \n   /**\n-   * Invoke the {@link DoFn.GetSize} method on the bound {@link DoFn}. Falls back to get the size\n-   * from the {@link RestrictionTracker} if it supports {@link Sizes.HasSize}, otherwise returns\n-   * 1.0.\n+   * Invoke the {@link DoFn.GetSize} method on the bound {@link DoFn}. Falls back to:\n+   *\n+   * <ol>\n+   *   <li>get the work remaining from the {@link RestrictionTracker} if it supports {@link\n+   *       HasProgress}.\n+   *   <li>returning the constant {@link 1.0}.", "originalCommit": "cfa6692bd82b4c7db44c9c9c5083792f94dd8e98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNzc0Mw==", "url": "https://github.com/apache/beam/pull/11472#discussion_r413517743", "bodyText": "This is an internal comment for the implementation here.\nThe user having comments are in DoFn.java and RestrictionTracker.java", "author": "lukecwik", "createdAt": "2020-04-23T05:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5MzQ1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5NDI5Ng==", "url": "https://github.com/apache/beam/pull/11472#discussion_r413494296", "bodyText": "I'm not very familiar with how this invoker works but I thought we check whether restrictionTracker  has HasSize, if not then fallback to progress.", "author": "boyuanzz", "createdAt": "2020-04-23T04:09:50Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/ByteBuddyDoFnInvokerFactory.java", "diffHunk": "@@ -397,12 +396,14 @@ public WatermarkEstimatorStateT getState() {\n   }\n \n   public static class DefaultGetSize {\n-    /** Uses {@link Sizes.HasSize} to produce the size. */\n+    /** Uses {@link HasProgress} to produce the size. */\n     @SuppressWarnings(\"unused\")\n     public static <InputT, OutputT> double invokeGetSize(\n         DoFnInvoker.ArgumentProvider<InputT, OutputT> argumentProvider) {\n-      if (argumentProvider.restrictionTracker() instanceof HasSize) {\n-        return ((HasSize) argumentProvider.restrictionTracker()).getSize();\n+      if (argumentProvider.restrictionTracker() instanceof HasProgress) {", "originalCommit": "cfa6692bd82b4c7db44c9c9c5083792f94dd8e98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNTI1OA==", "url": "https://github.com/apache/beam/pull/11472#discussion_r413515258", "bodyText": "HasSize was removed.\nDoFn can provide a method annotated with @GetSize and the fallback is the HasProgress on the RestrictionTracker. This is analogous to RestrictionProvider/RProvider being able to provide the size while the RestrictionTracker/RTracker provide progress in Python/Go.", "author": "lukecwik", "createdAt": "2020-04-23T05:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5NDI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3MTc2OA==", "url": "https://github.com/apache/beam/pull/11472#discussion_r413971768", "bodyText": "Thanks for explaining this! If so, do we still need to keep GetSize? It seems like highly overlap with HasProgress.", "author": "boyuanzz", "createdAt": "2020-04-23T17:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5NDI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3MzI2Ng==", "url": "https://github.com/apache/beam/pull/11472#discussion_r413973266", "bodyText": "Yes, because it allows the user to provide an override on how size is computed without needing to implement a restriction tracker. This is similar to how a restriction provider can compute the size.", "author": "lukecwik", "createdAt": "2020-04-23T17:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5NDI5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5ODgxMA==", "url": "https://github.com/apache/beam/pull/11472#discussion_r413498810", "bodyText": "I though we still want to keep this and make HasProgress as a fallback?", "author": "boyuanzz", "createdAt": "2020-04-23T04:25:08Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/Sizes.java", "diffHunk": "@@ -1,54 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.beam.sdk.transforms.splittabledofn;\n-\n-import org.apache.beam.sdk.annotations.Experimental;\n-import org.apache.beam.sdk.annotations.Experimental.Kind;\n-\n-/** Definitions and convenience methods for reporting sizes for SplittableDoFns. */\n-@Experimental(Kind.SPLITTABLE_DO_FN)\n-public final class Sizes {\n-  /**\n-   * {@link RestrictionTracker}s which can provide a size should implement this interface.\n-   * Implementations that do not implement this interface will be assumed to have an equivalent\n-   * size.\n-   */\n-  public interface HasSize {", "originalCommit": "cfa6692bd82b4c7db44c9c9c5083792f94dd8e98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNzM2Mw==", "url": "https://github.com/apache/beam/pull/11472#discussion_r413517363", "bodyText": "The intent was to remove using size as a progress signal. Which means that all restriction trackers need to implement the slightly more complicated HasProgress. Since that is the case, there is no need to keep HasSize around as a fallback since we can use the work remaining as the default size when it is not overridden by a @GetSize override.", "author": "lukecwik", "createdAt": "2020-04-23T05:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5ODgxMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMjg2MQ==", "url": "https://github.com/apache/beam/pull/11472#discussion_r414022861", "bodyText": "When a bundle finished, will the progress.workRemaining always be 0?", "author": "boyuanzz", "createdAt": "2020-04-23T18:22:18Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/control/ProcessBundleHandler.java", "diffHunk": "@@ -311,9 +315,14 @@ private void createRunnerAndConsumersForPTransformRecursively(\n       // Get finish bundle Execution Time Metrics.\n       response.addAllMonitoringInfos(\n           bundleProcessor.getFinishFunctionRegistry().getExecutionTimeMonitoringInfos());\n-      // Extract all other MonitoringInfos other than the execution time monitoring infos.\n+      // Extract MonitoringInfos that come from the metrics container registry.\n       response.addAllMonitoringInfos(\n           bundleProcessor.getMetricsContainerRegistry().getMonitoringInfos());\n+      // Add any additional monitoring infos that the \"runners\" report explicitly.\n+      for (ProgressRequestCallback progressRequestCallback :\n+          bundleProcessor.getProgressRequestCallbacks()) {\n+        response.addAllMonitoringInfos(progressRequestCallback.getMonitoringInfos());", "originalCommit": "cfa6692bd82b4c7db44c9c9c5083792f94dd8e98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMTA2Nw==", "url": "https://github.com/apache/beam/pull/11472#discussion_r414031067", "bodyText": "Progress metrics won't appear in the final monitoring infos since there are no active elements. Any residuals will contain their size if a sized SDF element and processing URN was used.", "author": "lukecwik", "createdAt": "2020-04-23T18:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMjg2MQ=="}], "type": "inlineReview", "revised_code": null}]}