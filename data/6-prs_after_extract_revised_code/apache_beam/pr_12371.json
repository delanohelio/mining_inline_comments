{"pr_number": 12371, "pr_title": "[BEAM-10341] Refactor SplittableParDoExpander.", "pr_createdAt": "2020-07-24T20:25:33Z", "pr_url": "https://github.com/apache/beam/pull/12371", "timeline": [{"oid": "990067489b90f0c128f29fcfdb8b153ba3f0a5cc", "url": "https://github.com/apache/beam/commit/990067489b90f0c128f29fcfdb8b153ba3f0a5cc", "message": "Refactor SplittableParDoExpander.", "committedDate": "2020-07-27T17:29:09Z", "type": "commit"}, {"oid": "990067489b90f0c128f29fcfdb8b153ba3f0a5cc", "url": "https://github.com/apache/beam/commit/990067489b90f0c128f29fcfdb8b153ba3f0a5cc", "message": "Refactor SplittableParDoExpander.", "committedDate": "2020-07-27T17:29:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NTUzMQ==", "url": "https://github.com/apache/beam/pull/12371#discussion_r464575531", "bodyText": "It would be nice if we could make this final by using @AutoBuilder allowing for:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean isDrain = false;\n          \n          \n            \n                private final boolean isDrain;", "author": "lukecwik", "createdAt": "2020-08-03T18:01:34Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "diffHunk": "@@ -91,13 +91,21 @@ public static TransformReplacement createSizedReplacement() {\n    * .\n    */\n   public static TransformReplacement createTruncateReplacement() {\n-    return TruncateReplacement.INSTANCE;\n+    return SizedReplacement.DRAIN_INSTANCE;\n   }\n \n   /** See {@link #createSizedReplacement()} for details. */\n   private static class SizedReplacement implements TransformReplacement {\n \n     private static final SizedReplacement INSTANCE = new SizedReplacement();\n+    private static final SizedReplacement DRAIN_INSTANCE = new SizedReplacement().withDrain();\n+\n+    private boolean isDrain = false;", "originalCommit": "990067489b90f0c128f29fcfdb8b153ba3f0a5cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46729bc27db20708fb5d8d14cf63e47e5d7d3192", "chunk": "diff --git a/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java\nindex 0d15eec955..d405a2dcbb 100644\n--- a/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java\n+++ b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java\n\n@@ -91,20 +92,24 @@ public class SplittableParDoExpander {\n    * .\n    */\n   public static TransformReplacement createTruncateReplacement() {\n-    return SizedReplacement.DRAIN_INSTANCE;\n+    return SizedReplacement.builder().setDrain(true).build();\n   }\n \n   /** See {@link #createSizedReplacement()} for details. */\n-  private static class SizedReplacement implements TransformReplacement {\n+  @AutoValue\n+  abstract static class SizedReplacement implements TransformReplacement {\n \n-    private static final SizedReplacement INSTANCE = new SizedReplacement();\n-    private static final SizedReplacement DRAIN_INSTANCE = new SizedReplacement().withDrain();\n+    static Builder builder() {\n+      return new AutoValue_SplittableParDoExpander_SizedReplacement.Builder();\n+    }\n+\n+    abstract boolean isDrain();\n \n-    private boolean isDrain = false;\n+    @AutoValue.Builder\n+    abstract static class Builder {\n+      abstract Builder setDrain(boolean isDrain);\n \n-    private SizedReplacement withDrain() {\n-      isDrain = true;\n-      return this;\n+      abstract SizedReplacement build();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MDMzNA==", "url": "https://github.com/apache/beam/pull/12371#discussion_r464580334", "bodyText": "Should we able to simplify this more with?\nPTransform.Builder newCompositeRoot = ... add pair w/ restriction and split and size ...\nString processSizedElementsInputPCollectionId = splitAndSizeOutId;\nif (isDrain) {\n  ... add drain transform ...\n  newCompositeRoot.add drain transform\n  String processSizedElementsInputPCollectionId = truncateAndSizeOutId;\n}\n... add process sized elements transform ...\nnewCompositeRoot.add process sized transform\n\nI don't think we should need two copies of adding ProcessSizedElementsAndRestrictions", "author": "lukecwik", "createdAt": "2020-08-03T18:11:11Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "diffHunk": "@@ -214,39 +222,124 @@ public MessageWithComponents getReplacement(\n             generateUniqueId(\n                 transformId + \"/ProcessSizedElementsAndRestrictions\",\n                 existingComponents::containsTransforms);\n-        {\n-          PTransform.Builder processSizedElementsAndRestrictions = PTransform.newBuilder();\n-          processSizedElementsAndRestrictions.putInputs(mainInputName, splitAndSizeOutId);\n-          processSizedElementsAndRestrictions.putAllInputs(sideInputs);\n-          processSizedElementsAndRestrictions.putAllOutputs(splittableParDo.getOutputsMap());\n-          processSizedElementsAndRestrictions.setUniqueName(\n-              generateUniquePCollectonName(\n-                  splittableParDo.getUniqueName() + \"/ProcessSizedElementsAndRestrictions\",\n-                  existingComponents));\n-          processSizedElementsAndRestrictions.setSpec(\n-              FunctionSpec.newBuilder()\n-                  .setUrn(\n-                      PTransformTranslation.SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN)\n-                  .setPayload(splittableParDo.getSpec().getPayload()));\n-          processSizedElementsAndRestrictions.setEnvironmentId(splittableParDo.getEnvironmentId());\n+        if (!isDrain) {", "originalCommit": "990067489b90f0c128f29fcfdb8b153ba3f0a5cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46729bc27db20708fb5d8d14cf63e47e5d7d3192", "chunk": "diff --git a/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java\nindex 0d15eec955..d405a2dcbb 100644\n--- a/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java\n+++ b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java\n\n@@ -217,48 +222,20 @@ public class SplittableParDoExpander {\n           splitAndSize.setEnvironmentId(splittableParDo.getEnvironmentId());\n           rval.getComponentsBuilder().putTransforms(splitAndSizeId, splitAndSize.build());\n         }\n+        PTransform.Builder newCompositeRoot =\n+            splittableParDo\n+                .toBuilder()\n+                // Clear the original splittable ParDo spec and add all the new transforms as\n+                // children.\n+                .clearSpec()\n+                .addAllSubtransforms(Arrays.asList(pairWithRestrictionId, splitAndSizeId));\n \n         String processSizedElementsAndRestrictionsId =\n             generateUniqueId(\n                 transformId + \"/ProcessSizedElementsAndRestrictions\",\n                 existingComponents::containsTransforms);\n-        if (!isDrain) {\n-          {\n-            PTransform.Builder processSizedElementsAndRestrictions = PTransform.newBuilder();\n-            processSizedElementsAndRestrictions.putInputs(mainInputName, splitAndSizeOutId);\n-            processSizedElementsAndRestrictions.putAllInputs(sideInputs);\n-            processSizedElementsAndRestrictions.putAllOutputs(splittableParDo.getOutputsMap());\n-            processSizedElementsAndRestrictions.setUniqueName(\n-                generateUniquePCollectonName(\n-                    splittableParDo.getUniqueName() + \"/ProcessSizedElementsAndRestrictions\",\n-                    existingComponents));\n-            processSizedElementsAndRestrictions.setSpec(\n-                FunctionSpec.newBuilder()\n-                    .setUrn(\n-                        PTransformTranslation\n-                            .SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN)\n-                    .setPayload(splittableParDo.getSpec().getPayload()));\n-            processSizedElementsAndRestrictions.setEnvironmentId(\n-                splittableParDo.getEnvironmentId());\n-            rval.getComponentsBuilder()\n-                .putTransforms(\n-                    processSizedElementsAndRestrictionsId,\n-                    processSizedElementsAndRestrictions.build());\n-          }\n-\n-          PTransform.Builder newCompositeRoot =\n-              splittableParDo\n-                  .toBuilder()\n-                  // Clear the original splittable ParDo spec and add all the new transforms as\n-                  // children.\n-                  .clearSpec()\n-                  .addAllSubtransforms(\n-                      Arrays.asList(\n-                          pairWithRestrictionId,\n-                          splitAndSizeId,\n-                          processSizedElementsAndRestrictionsId));\n-          rval.setPtransform(newCompositeRoot);\n-        } else {\n+        String processSizedElementsInputPCollectionId = splitAndSizeId;\n+        if (isDrain()) {\n           String truncateAndSizeCoderId =\n               generateUniqueId(\n                   mainInputPCollection.getCoderId() + \"/TruncateAndSize\",\n"}}, {"oid": "46729bc27db20708fb5d8d14cf63e47e5d7d3192", "url": "https://github.com/apache/beam/commit/46729bc27db20708fb5d8d14cf63e47e5d7d3192", "message": "Address comments.", "committedDate": "2020-08-03T20:26:32Z", "type": "commit"}, {"oid": "ab05adfac1b199a92a1adf991b5d6a442cba71e6", "url": "https://github.com/apache/beam/commit/ab05adfac1b199a92a1adf991b5d6a442cba71e6", "message": "Fix SDF/Process input id.", "committedDate": "2020-08-03T20:54:29Z", "type": "commit"}]}