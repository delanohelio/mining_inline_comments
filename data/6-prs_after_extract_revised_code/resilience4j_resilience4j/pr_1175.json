{"pr_number": 1175, "pr_title": "Fixed issue where generic fallback methods wouldn't work for methods with many parameters (#1174)", "pr_createdAt": "2020-09-21T12:47:06Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/1175", "timeline": [{"oid": "b2df789ad075c005307525f8a713923dab4dd531", "url": "https://github.com/resilience4j/resilience4j/commit/b2df789ad075c005307525f8a713923dab4dd531", "message": "Fixed issue where generic fallback methods wouldn't work for methods with many parameters", "committedDate": "2020-09-21T12:42:36Z", "type": "commit"}, {"oid": "30bff8f62b649e5172863f3a777fb85cdae90746", "url": "https://github.com/resilience4j/resilience4j/commit/30bff8f62b649e5172863f3a777fb85cdae90746", "message": "Add unit test", "committedDate": "2020-09-22T11:27:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4NDI4OQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1175#discussion_r492984289", "bodyText": "just cosmetic/convention changes (empty lines):\nFallbackMethod fallbackMethod = FallbackMethod\n            .create(\"fallbackMethod\", testMethod, new Object[]{\"test\", \"test\"}, target);\n\nString fallback = fallbackMethod.fallback(new IllegalStateException(\"err\");\n\n assertThat(fallback)).isEqualTo(\"recovered-IllegalStateException\");", "author": "hexmind", "createdAt": "2020-09-22T19:33:13Z", "path": "resilience4j-spring/src/test/java/io/github/resilience4j/fallback/FallbackMethodTest.java", "diffHunk": "@@ -56,6 +56,16 @@ public void fallbackGlobalExceptionWithSameMethodReturnType() throws Throwable {\n             .isEqualTo(\"recovered-IllegalStateException\");\n     }\n \n+    @Test\n+    public void fallbackGlobalExceptionWithSameMethodReturnTypeAndMultipleParameters() throws Throwable {\n+        FallbackMethodTest target = new FallbackMethodTest();\n+        Method testMethod = target.getClass().getMethod(\"multipleParameterTestMethod\", String.class, String.class);\n+        FallbackMethod fallbackMethod = FallbackMethod\n+            .create(\"fallbackMethod\", testMethod, new Object[]{\"test\", \"test\"}, target);\n+        assertThat(fallbackMethod.fallback(new IllegalStateException(\"err\")))", "originalCommit": "30bff8f62b649e5172863f3a777fb85cdae90746", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwNTgxOA==", "url": "https://github.com/resilience4j/resilience4j/pull/1175#discussion_r493405818", "bodyText": "Added the empty lines. Also I had it tested with the previous implementation to see that the test fails \ud83d\ude42", "author": "vanadzins", "createdAt": "2020-09-23T10:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4NDI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "03db9cfa8bc7203adfb32bab4e75eb5652b95619", "chunk": "diff --git a/resilience4j-spring/src/test/java/io/github/resilience4j/fallback/FallbackMethodTest.java b/resilience4j-spring/src/test/java/io/github/resilience4j/fallback/FallbackMethodTest.java\nindex 74acb565..8f4c85b7 100644\n--- a/resilience4j-spring/src/test/java/io/github/resilience4j/fallback/FallbackMethodTest.java\n+++ b/resilience4j-spring/src/test/java/io/github/resilience4j/fallback/FallbackMethodTest.java\n\n@@ -60,8 +60,10 @@ public class FallbackMethodTest {\n     public void fallbackGlobalExceptionWithSameMethodReturnTypeAndMultipleParameters() throws Throwable {\n         FallbackMethodTest target = new FallbackMethodTest();\n         Method testMethod = target.getClass().getMethod(\"multipleParameterTestMethod\", String.class, String.class);\n+\n         FallbackMethod fallbackMethod = FallbackMethod\n             .create(\"fallbackMethod\", testMethod, new Object[]{\"test\", \"test\"}, target);\n+\n         assertThat(fallbackMethod.fallback(new IllegalStateException(\"err\")))\n             .isEqualTo(\"recovered-IllegalStateException\");\n     }\n"}}, {"oid": "03db9cfa8bc7203adfb32bab4e75eb5652b95619", "url": "https://github.com/resilience4j/resilience4j/commit/03db9cfa8bc7203adfb32bab4e75eb5652b95619", "message": "Add empty lines", "committedDate": "2020-09-23T10:07:20Z", "type": "commit"}]}