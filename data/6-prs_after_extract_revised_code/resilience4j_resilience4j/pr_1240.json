{"pr_number": 1240, "pr_title": "added RateLimiter.drainPermissions method", "pr_createdAt": "2020-11-08T22:26:05Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/1240", "timeline": [{"oid": "bcbd9308888200cd142c02c2d1967fed3648fb7a", "url": "https://github.com/resilience4j/resilience4j/commit/bcbd9308888200cd142c02c2d1967fed3648fb7a", "message": "added RateLimiter.drainPermissions method", "committedDate": "2020-11-08T21:37:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNTIyOA==", "url": "https://github.com/resilience4j/resilience4j/pull/1240#discussion_r519615228", "bodyText": "DRAINED", "author": "RobWin", "createdAt": "2020-11-09T08:02:09Z", "path": "resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ *\n+ *  Copyright 2016 Robert Winkler and Bohdan Storozhuk\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *\n+ */\n+package io.github.resilience4j.ratelimiter.event;\n+\n+public class RateLimiterOnDrainEvent extends AbstractRateLimiterEvent {\n+\n+    public RateLimiterOnDrainEvent(String rateLimiterName, int numberOfPermits) {\n+        super(rateLimiterName, numberOfPermits);\n+    }\n+\n+    @Override\n+    public Type getEventType() {\n+        return Type.SUCCESSFUL_ACQUIRE;", "originalCommit": "bcbd9308888200cd142c02c2d1967fed3648fb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ2MDQ4NA==", "url": "https://github.com/resilience4j/resilience4j/pull/1240#discussion_r521460484", "bodyText": "fixed", "author": "walec51", "createdAt": "2020-11-11T16:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNTIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "624b5523186708e640f455c93a47e09b587676ad", "chunk": "diff --git a/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainEvent.java b/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainedEvent.java\nsimilarity index 80%\nrename from resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainEvent.java\nrename to resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainedEvent.java\nindex 10d5607d..b749813a 100644\n--- a/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainEvent.java\n+++ b/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainedEvent.java\n\n@@ -18,14 +18,14 @@\n  */\n package io.github.resilience4j.ratelimiter.event;\n \n-public class RateLimiterOnDrainEvent extends AbstractRateLimiterEvent {\n+public class RateLimiterOnDrainedEvent extends AbstractRateLimiterEvent {\n \n-    public RateLimiterOnDrainEvent(String rateLimiterName, int numberOfPermits) {\n+    public RateLimiterOnDrainedEvent(String rateLimiterName, int numberOfPermits) {\n         super(rateLimiterName, numberOfPermits);\n     }\n \n     @Override\n     public Type getEventType() {\n-        return Type.SUCCESSFUL_ACQUIRE;\n+        return Type.DRAINED;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNTM4NA==", "url": "https://github.com/resilience4j/resilience4j/pull/1240#discussion_r519615384", "bodyText": "RateLimiterOnDrainedEvent\nwdyt?", "author": "RobWin", "createdAt": "2020-11-09T08:02:32Z", "path": "resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ *\n+ *  Copyright 2016 Robert Winkler and Bohdan Storozhuk\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *\n+ */\n+package io.github.resilience4j.ratelimiter.event;\n+\n+public class RateLimiterOnDrainEvent extends AbstractRateLimiterEvent {", "originalCommit": "bcbd9308888200cd142c02c2d1967fed3648fb7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "624b5523186708e640f455c93a47e09b587676ad", "chunk": "diff --git a/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainEvent.java b/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainedEvent.java\nsimilarity index 80%\nrename from resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainEvent.java\nrename to resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainedEvent.java\nindex 10d5607d..b749813a 100644\n--- a/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainEvent.java\n+++ b/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/event/RateLimiterOnDrainedEvent.java\n\n@@ -18,14 +18,14 @@\n  */\n package io.github.resilience4j.ratelimiter.event;\n \n-public class RateLimiterOnDrainEvent extends AbstractRateLimiterEvent {\n+public class RateLimiterOnDrainedEvent extends AbstractRateLimiterEvent {\n \n-    public RateLimiterOnDrainEvent(String rateLimiterName, int numberOfPermits) {\n+    public RateLimiterOnDrainedEvent(String rateLimiterName, int numberOfPermits) {\n         super(rateLimiterName, numberOfPermits);\n     }\n \n     @Override\n     public Type getEventType() {\n-        return Type.SUCCESSFUL_ACQUIRE;\n+        return Type.DRAINED;\n     }\n }\n"}}, {"oid": "624b5523186708e640f455c93a47e09b587676ad", "url": "https://github.com/resilience4j/resilience4j/commit/624b5523186708e640f455c93a47e09b587676ad", "message": "review fixes in RateLimiterOnDrainedEvent", "committedDate": "2020-11-11T15:58:20Z", "type": "commit"}, {"oid": "008426f1326eeb8b83f8297eae75e0ad35c58d98", "url": "https://github.com/resilience4j/resilience4j/commit/008426f1326eeb8b83f8297eae75e0ad35c58d98", "message": "missing changes", "committedDate": "2020-11-14T18:16:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ1NjA1MQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1240#discussion_r523456051", "bodyText": "Please don't change state directly, but use the same approach as in updateStateWithBackOff \n  \n    \n      resilience4j/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/internal/AtomicRateLimiter.java\n    \n    \n         Line 157\n      in\n      a2534c5\n    \n    \n    \n    \n\n        \n          \n           private State updateStateWithBackOff(final int permits, final long timeoutInNanos) {", "author": "storozhukBM", "createdAt": "2020-11-14T19:48:40Z", "path": "resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/internal/AtomicRateLimiter.java", "diffHunk": "@@ -128,20 +129,34 @@ public long reservePermission(final int permits) {\n \n         boolean canAcquireImmediately = modifiedState.nanosToWait <= 0;\n         if (canAcquireImmediately) {\n-            publishRateLimiterEvent(true, permits);\n+            publishRateLimiterAcquisitionEvent(true, permits);\n             return 0;\n         }\n \n         boolean canAcquireInTime = timeoutInNanos >= modifiedState.nanosToWait;\n         if (canAcquireInTime) {\n-            publishRateLimiterEvent(true, permits);\n+            publishRateLimiterAcquisitionEvent(true, permits);\n             return modifiedState.nanosToWait;\n         }\n \n-        publishRateLimiterEvent(false, permits);\n+        publishRateLimiterAcquisitionEvent(false, permits);\n         return -1;\n     }\n \n+    @Override\n+    public void drainPermissions() {", "originalCommit": "008426f1326eeb8b83f8297eae75e0ad35c58d98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2NzA3Mg==", "url": "https://github.com/resilience4j/resilience4j/pull/1240#discussion_r523467072", "bodyText": "I don't think that is a good idea\nto drain the number of permits to zero precisely in a thread safe manner I have to read the number of permits left and subtract that amount in one atomic operation\nupdateStateWithBackOff doesn't do that - explain why using it would be better?", "author": "walec51", "createdAt": "2020-11-14T21:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ1NjA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ2ODgwMg==", "url": "https://github.com/resilience4j/resilience4j/pull/1240#discussion_r523468802", "bodyText": "updateStateWithBackOff uses compareAndSwap operation, so it is atomic, consistent and will do completely fine.\ngetAndUpdate is also fine with one exception that it will reduce throughput of contended operations on state for Java 8 (starting from Java 9 it is fine), for additional details, please read the doc comment on updateStateWithBackOff method.", "author": "storozhukBM", "createdAt": "2020-11-14T22:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ1NjA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzU5MzYxOQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1240#discussion_r523593619", "bodyText": "reimplemented drain using compareAndSet\nplease check if this impl is ok for you\nI also added a unit test for an drain edge case", "author": "walec51", "createdAt": "2020-11-15T01:44:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ1NjA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ffd6de63c27f92f246fa998edd7e0f327abcd01", "chunk": "diff --git a/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/internal/AtomicRateLimiter.java b/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/internal/AtomicRateLimiter.java\nindex 23bc3e48..70261a0b 100644\n--- a/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/internal/AtomicRateLimiter.java\n+++ b/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/internal/AtomicRateLimiter.java\n\n@@ -145,15 +145,14 @@ public class AtomicRateLimiter implements RateLimiter {\n \n     @Override\n     public void drainPermissions() {\n-        State prevState = state.getAndUpdate(activeState -> {\n-                if (activeState.activePermissions > 0) {\n-                    return calculateNextState(activeState.activePermissions, 0, activeState);\n-                } else {\n-                    return activeState;\n-                }\n-            });\n+        AtomicRateLimiter.State prev;\n+        AtomicRateLimiter.State next;\n+        do {\n+            prev = state.get();\n+            next = calculateNextState(prev.activePermissions, 0, prev);\n+        } while (!compareAndSet(prev, next));\n         if (eventProcessor.hasConsumers()) {\n-            eventProcessor.consumeEvent(new RateLimiterOnDrainedEvent(name, Math.min(prevState.activePermissions, 0)));\n+            eventProcessor.consumeEvent(new RateLimiterOnDrainedEvent(name, Math.min(prev.activePermissions, 0)));\n         }\n     }\n \n"}}, {"oid": "6ffd6de63c27f92f246fa998edd7e0f327abcd01", "url": "https://github.com/resilience4j/resilience4j/commit/6ffd6de63c27f92f246fa998edd7e0f327abcd01", "message": "review fix", "committedDate": "2020-11-15T01:28:23Z", "type": "commit"}, {"oid": "f4f57a3ad2006bb4637fe0aed511b1b82ea4d4f5", "url": "https://github.com/resilience4j/resilience4j/commit/f4f57a3ad2006bb4637fe0aed511b1b82ea4d4f5", "message": "added test case", "committedDate": "2020-11-15T01:40:56Z", "type": "commit"}, {"oid": "05a4c30a7c15a4df1572e89e8b758868ee406b9e", "url": "https://github.com/resilience4j/resilience4j/commit/05a4c30a7c15a4df1572e89e8b758868ee406b9e", "message": "Merge branch 'master' into rate-limiter-drain", "committedDate": "2020-11-16T20:14:17Z", "type": "commit"}, {"oid": "7d5d2c529394fa7c210b11becf74042a24841cdf", "url": "https://github.com/resilience4j/resilience4j/commit/7d5d2c529394fa7c210b11becf74042a24841cdf", "message": "Merge remote-tracking branch 'upstream/master' into rate-limiter-drain", "committedDate": "2020-11-20T21:33:33Z", "type": "commit"}]}