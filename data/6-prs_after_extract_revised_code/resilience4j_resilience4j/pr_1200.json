{"pr_number": 1200, "pr_title": "Issue #1043 Added IntervalBiFunction to calculate wait duration based on result/exception", "pr_createdAt": "2020-10-09T14:58:32Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/1200", "timeline": [{"oid": "03ae297337d42471c7836e8176cd53c50c0c1fd1", "url": "https://github.com/resilience4j/resilience4j/commit/03ae297337d42471c7836e8176cd53c50c0c1fd1", "message": "Issue #1043 Added IntervalBiFunction to calculate wait duration from result or exception", "committedDate": "2020-10-09T14:49:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwNzc1OQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r504507759", "bodyText": "By convention, Either's Left represents a failure case and the Right represents a success.\nT and Throwable must be switched.", "author": "RobWin", "createdAt": "2020-10-14T08:47:10Z", "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.github.resilience4j.core;\n+\n+import io.vavr.control.Either;\n+\n+import java.util.function.BiFunction;\n+\n+/**\n+ * An IntervalBiFunction which can be used to calculate the wait interval. The input parameters of the bi\n+ * function is the number of attempts (attempt) and either result or exception, the output parameter is the wait interval in\n+ * milliseconds. The attempt parameter starts at 1 and increases with every further attempt.\n+ */\n+@FunctionalInterface\n+public interface IntervalBiFunction<T> extends BiFunction<Integer, Either<T, Throwable>, Long> {", "originalCommit": "03ae297337d42471c7836e8176cd53c50c0c1fd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2ODkzMw==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r506268933", "bodyText": "didn't know, will change \ud83d\udc4d", "author": "cosminseceleanu", "createdAt": "2020-10-16T10:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwNzc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f9d072ccad348c227de5a45bf85325237672189b", "chunk": "diff --git a/resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java b/resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java\nindex b0cec2cb..8b553d63 100644\n--- a/resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java\n+++ b/resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java\n\n@@ -10,7 +10,7 @@ import java.util.function.BiFunction;\n  * milliseconds. The attempt parameter starts at 1 and increases with every further attempt.\n  */\n @FunctionalInterface\n-public interface IntervalBiFunction<T> extends BiFunction<Integer, Either<T, Throwable>, Long> {\n+public interface IntervalBiFunction<T> extends BiFunction<Integer, Either<Throwable, T>, Long> {\n \n     static <T> IntervalBiFunction<T> ofIntervalFunction(IntervalFunction f) {\n         return (attempt, either) -> f.apply(attempt);\n"}}, {"oid": "f9d072ccad348c227de5a45bf85325237672189b", "url": "https://github.com/resilience4j/resilience4j/commit/f9d072ccad348c227de5a45bf85325237672189b", "message": "Code review updates", "committedDate": "2020-10-16T10:49:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjI1Nw==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508236257", "bodyText": "We are trying to remove vavr dependency in 2.0 branch.\nIs there any substitute forEither?", "author": "dlsrb6342", "createdAt": "2020-10-20T06:21:25Z", "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/IntervalBiFunction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.github.resilience4j.core;\n+\n+import io.vavr.control.Either;", "originalCommit": "f9d072ccad348c227de5a45bf85325237672189b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI0Mzc5Ng==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508243796", "bodyText": "We have to provide our own implementation in 2.0 like we provide our own Function Interfaces", "author": "RobWin", "createdAt": "2020-10-20T06:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NDE2NQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508274165", "bodyText": "just for my personal curiosity, why do you want to get rid of vavr?", "author": "cosminseceleanu", "createdAt": "2020-10-20T07:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NTEwMQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508275101", "bodyText": "Because a lot of users requested it, unfortunately.", "author": "RobWin", "createdAt": "2020-10-20T07:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjI1Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwOTAwOA==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508409008", "bodyText": "is this considered a breaking change?\nI think it was copy pasted from circuit breaker \ud83d\ude04", "author": "cosminseceleanu", "createdAt": "2020-10-20T11:03:32Z", "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -150,7 +171,7 @@ public Builder(RetryConfig baseConfig) {\n                 this.intervalFunction = (x) -> waitDuration.toMillis();\n             } else {\n                 throw new IllegalArgumentException(\n-                    \"waitDurationInOpenState must be a positive value\");", "originalCommit": "55d37aebd8aa80059f8b456a64eb7a3b32955e75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNDU0MQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508414541", "bodyText": "No :) we should fix the message :)", "author": "RobWin", "createdAt": "2020-10-20T11:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwOTAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "b6752338ee9142a9ba90fee6100a0b07f3d8fcb5", "chunk": "diff --git a/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java b/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\nindex bd774b10..1dabf6c7 100644\n--- a/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\n+++ b/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\n\n@@ -168,7 +179,7 @@ public class RetryConfig implements Serializable {\n \n         public Builder<T> waitDuration(Duration waitDuration) {\n             if (waitDuration.toMillis() >= 0) {\n-                this.intervalFunction = (x) -> waitDuration.toMillis();\n+                this.intervalBiFunction = (attempt, either) -> waitDuration.toMillis();\n             } else {\n                 throw new IllegalArgumentException(\n                     \"waitDuration must be a positive value\");\n"}}, {"oid": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f", "url": "https://github.com/resilience4j/resilience4j/commit/3eddbe000694405e82e283dbc0ddaf9fdf71c17f", "message": "Issue #1043: Added validation for intervalFunction and intervalBiFunction when used together", "committedDate": "2020-10-20T12:13:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mzk2NQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508453965", "bodyText": "I think we should deprecate getIntervalFunction, since it shouldn't be used anymore in our  RetryImpl. Makes it more obvious where it is still used.\nComparable to getWaitDurationInOpenState in CircuitBreakerConfig", "author": "RobWin", "createdAt": "2020-10-20T12:21:57Z", "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -90,6 +95,18 @@ public int getMaxAttempts() {\n         return intervalFunction;", "originalCommit": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MzQ2OQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508463469", "bodyText": "This was one of my questions from PR description \ud83d\ude03", "author": "cosminseceleanu", "createdAt": "2020-10-20T12:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mzk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NDU4NQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r508464585", "bodyText": "I misread the PR description. I thought you want to deprecate IntervalFunction itself.\nToo many topics in parallel, sorry.", "author": "RobWin", "createdAt": "2020-10-20T12:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mzk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwOTczOQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509109739", "bodyText": "no worries", "author": "cosminseceleanu", "createdAt": "2020-10-21T08:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mzk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "chunk": "diff --git a/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java b/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\nindex dd0aee34..dccf20ee 100644\n--- a/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\n+++ b/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\n\n@@ -91,6 +93,11 @@ public class RetryConfig implements Serializable {\n         return maxAttempts;\n     }\n \n+    /**\n+     * Use {@link RetryConfig#intervalBiFunction} instead, this method is kept for backwards compatibility\n+     */\n+    @Nullable\n+    @Deprecated\n     public Function<Integer, Long> getIntervalFunction() {\n         return intervalFunction;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3MzMwOA==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509073308", "bodyText": "Could you please add a final test that if neither intervalBiFunction nor intervalFunction is set, that the default setting is used in the RetryConfig?", "author": "RobWin", "createdAt": "2020-10-21T08:07:34Z", "path": "resilience4j-retry/src/test/java/io/github/resilience4j/retry/RetryConfigBuilderTest.java", "diffHunk": "@@ -168,6 +181,13 @@ public void shouldBuilderCreateConfigEveryTime() {\n         assertThat(config1.getMaxAttempts()).isEqualTo(5);\n     }\n \n+    @Test(expected = IllegalStateException.class)\n+    public void intervalFunctionUsedWithIntervalBiFunctionShouldFail() {", "originalCommit": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "chunk": "diff --git a/resilience4j-retry/src/test/java/io/github/resilience4j/retry/RetryConfigBuilderTest.java b/resilience4j-retry/src/test/java/io/github/resilience4j/retry/RetryConfigBuilderTest.java\nindex b9d8b4e5..0377245a 100644\n--- a/resilience4j-retry/src/test/java/io/github/resilience4j/retry/RetryConfigBuilderTest.java\n+++ b/resilience4j-retry/src/test/java/io/github/resilience4j/retry/RetryConfigBuilderTest.java\n\n@@ -188,6 +211,37 @@ public class RetryConfigBuilderTest {\n             .build();\n     }\n \n+    @Test\n+    public void shouldUseDefaultIntervalFunction() {\n+        RetryConfig retryConfig = RetryConfig.ofDefaults();\n+\n+        assertThat(retryConfig.getIntervalFunction()).isNotNull();\n+        assertThat(retryConfig.getIntervalBiFunction()).isNotNull();\n+        assertThat(retryConfig.getIntervalBiFunction().apply(1, null)).isEqualTo(IntervalFunction.ofDefaults().apply(1));\n+    }\n+\n+    @Test\n+    public void shouldUseSetIntervalFunction() {\n+        RetryConfig retryConfig = RetryConfig.custom()\n+            .intervalFunction(IntervalFunction.of(100L))\n+            .build();\n+\n+        assertThat(retryConfig.getIntervalFunction()).isNotNull();\n+        assertThat(retryConfig.getIntervalBiFunction()).isNotNull();\n+        assertThat(retryConfig.getIntervalBiFunction().apply(1, null)).isEqualTo(100L);\n+    }\n+\n+    @Test\n+    public void shouldUseSetIntervalBiFunction() {\n+        RetryConfig retryConfig = RetryConfig.custom()\n+            .intervalBiFunction(IntervalBiFunction.ofIntervalFunction(IntervalFunction.of(105L)))\n+            .build();\n+\n+        assertThat(retryConfig.getIntervalFunction()).isNull();\n+        assertThat(retryConfig.getIntervalBiFunction()).isNotNull();\n+        assertThat(retryConfig.getIntervalBiFunction().apply(1, null)).isEqualTo(105L);\n+    }\n+\n     private static class ExtendsException extends Exception {\n \n         ExtendsException() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4MDQ2MQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509080461", "bodyText": "I think this is unused import.", "author": "dlsrb6342", "createdAt": "2020-10-21T08:18:18Z", "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/internal/RetryImpl.java", "diffHunk": "@@ -24,19 +24,21 @@\n import io.github.resilience4j.retry.MaxRetriesExceeded;\n import io.github.resilience4j.retry.Retry;\n import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.core.IntervalBiFunction;\n import io.github.resilience4j.retry.event.*;\n import io.vavr.CheckedConsumer;\n import io.vavr.collection.HashMap;\n import io.vavr.collection.Map;\n+import io.vavr.control.Either;\n import io.vavr.control.Option;\n import io.vavr.control.Try;\n \n+import java.util.Optional;", "originalCommit": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "chunk": "diff --git a/resilience4j-retry/src/main/java/io/github/resilience4j/retry/internal/RetryImpl.java b/resilience4j-retry/src/main/java/io/github/resilience4j/retry/internal/RetryImpl.java\nindex 16cdc602..a7de9db8 100644\n--- a/resilience4j-retry/src/main/java/io/github/resilience4j/retry/internal/RetryImpl.java\n+++ b/resilience4j-retry/src/main/java/io/github/resilience4j/retry/internal/RetryImpl.java\n\n@@ -33,7 +33,6 @@ import io.vavr.control.Either;\n import io.vavr.control.Option;\n import io.vavr.control.Try;\n \n-import java.util.Optional;\n import java.util.concurrent.CompletionException;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.atomic.AtomicInteger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509083860", "bodyText": "config.intervalFunction isn't used anymore in RetryImpl.\nIf set only IntervalFunction, I think code should be like following\nconfig.intervalBiFunction = Optional.ofNullable(intervalBiFunction)\n                                    .orElse(IntervalBiFunction.ofIntervalFunction(intervalFunction));", "author": "dlsrb6342", "createdAt": "2020-10-21T08:23:04Z", "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -243,14 +280,19 @@ public Builder(RetryConfig baseConfig) {\n         }\n \n         public RetryConfig build() {\n+            if (intervalFunction != null && intervalBiFunction != null) {\n+                throw new IllegalStateException(\"The intervalFunction was configured twice which could result in an\" +\n+                    \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n+            }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = intervalFunction;\n+            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());", "originalCommit": "3eddbe000694405e82e283dbc0ddaf9fdf71c17f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwOTMzMA==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509109330", "bodyText": "this means that config.intervalFunction should be marked as deprecated and nullable", "author": "cosminseceleanu", "createdAt": "2020-10-21T08:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyMzE0Ng==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509123146", "bodyText": "Yes, I think that's fine", "author": "RobWin", "createdAt": "2020-10-21T09:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5Mzc3Mw==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509193773", "bodyText": "Hmm, I tried this and found an interesting use case, the following code will throw IllegalStateException\nRetryConfig baseConfig = RetryConfig.ofDefaults();\nRetryConfig retryConfig = RetryConfig.from(baseConfig)\n            .intervalFunction(IntervalFunction.of(100L))\n            .build();\nBecause baseConfig.intervalBiFunction = bi function of interval defaults and since config.intervalBiFunction is the only used by Retry I thought that only this value should be copied from base config on RetryConfig.from(baseConfig), therefore retryConfig.intervalBiFunction = baseConfig.intervalBiFunction\nI'm kind of stuck with this, any idea?", "author": "cosminseceleanu", "createdAt": "2020-10-21T11:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4NTE3Nw==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r509985177", "bodyText": "Maybe we just use a int counter. If the counter == 2, then the user has used both methods.", "author": "RobWin", "createdAt": "2020-10-22T08:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0NTk4Mw==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510245983", "bodyText": "never mind, I think I was too tired", "author": "cosminseceleanu", "createdAt": "2020-10-22T15:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1ODMwMw==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510658303", "bodyText": "This is how it was implemented in CircuitBreakerConfig now -> https://github.com/resilience4j/resilience4j/pull/1216/files", "author": "RobWin", "createdAt": "2020-10-23T06:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MTY0NA==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510691644", "bodyText": "I was trying to avoid that kind of implementation.\nWhat I've done is this: whenever intervalFunction is set then when creating a new builder with RetryConfig.from only intervalFunction is copied from base config. Because intervalBiFunction is always present and when build is invoked will be created from intervalFunction.\nSee the implementation :)", "author": "cosminseceleanu", "createdAt": "2020-10-23T07:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4Mzg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "chunk": "diff --git a/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java b/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\nindex dd0aee34..dccf20ee 100644\n--- a/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\n+++ b/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\n\n@@ -285,17 +291,26 @@ public class RetryConfig implements Serializable {\n                     \" undesired state. Please use either intervalFunction or intervalBiFunction.\");\n             }\n             RetryConfig config = new RetryConfig();\n-            config.intervalFunction = Optional.ofNullable(intervalFunction).orElse(IntervalFunction.ofDefaults());\n             config.maxAttempts = maxAttempts;\n             config.retryOnExceptionPredicate = retryOnExceptionPredicate;\n             config.retryOnResultPredicate = retryOnResultPredicate;\n             config.retryExceptions = retryExceptions;\n             config.ignoreExceptions = ignoreExceptions;\n             config.exceptionPredicate = createExceptionPredicate();\n-            config.intervalBiFunction = intervalBiFunction;\n+            config.intervalFunction = createIntervalFunction();\n+            config.intervalBiFunction = Optional.ofNullable(intervalBiFunction)\n+                .orElse(IntervalBiFunction.ofIntervalFunction(config.intervalFunction));\n             return config;\n         }\n \n+        @Nullable\n+        private IntervalFunction createIntervalFunction() {\n+            if (intervalFunction == null && intervalBiFunction == null) {\n+                return IntervalFunction.ofDefaults();\n+            }\n+            return intervalFunction;\n+        }\n+\n         private Predicate<Throwable> createExceptionPredicate() {\n             return createRetryOnExceptionPredicate()\n                 .and(PredicateCreator.createNegatedExceptionsPredicate(ignoreExceptions)\n"}}, {"oid": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "url": "https://github.com/resilience4j/resilience4j/commit/1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "message": "Issue #1043: Added validation for intervalFunction and intervalBiFunction when used together", "committedDate": "2020-10-22T15:15:32Z", "type": "commit"}, {"oid": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "url": "https://github.com/resilience4j/resilience4j/commit/1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "message": "Issue #1043: Added validation for intervalFunction and intervalBiFunction when used together", "committedDate": "2020-10-22T15:15:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3MTY3NA==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510571674", "bodyText": "Doesn't need to set IntervalBiFunction?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.intervalFunction = (x) -> waitDuration.toMillis();\n          \n          \n            \n                            this.intervalBiFunction = (attempt, either) -> waitDuration.toMillis();", "author": "dlsrb6342", "createdAt": "2020-10-23T03:20:15Z", "path": "resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java", "diffHunk": "@@ -150,7 +182,7 @@ public Builder(RetryConfig baseConfig) {\n                 this.intervalFunction = (x) -> waitDuration.toMillis();", "originalCommit": "1931fa65fbbe9f0eff5f1310c5615975dd7cde0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MTg0NA==", "url": "https://github.com/resilience4j/resilience4j/pull/1200#discussion_r510691844", "bodyText": "done", "author": "cosminseceleanu", "createdAt": "2020-10-23T07:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3MTY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "b6752338ee9142a9ba90fee6100a0b07f3d8fcb5", "chunk": "diff --git a/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java b/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\nindex dccf20ee..1dabf6c7 100644\n--- a/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\n+++ b/resilience4j-retry/src/main/java/io/github/resilience4j/retry/RetryConfig.java\n\n@@ -179,7 +179,7 @@ public class RetryConfig implements Serializable {\n \n         public Builder<T> waitDuration(Duration waitDuration) {\n             if (waitDuration.toMillis() >= 0) {\n-                this.intervalFunction = (x) -> waitDuration.toMillis();\n+                this.intervalBiFunction = (attempt, either) -> waitDuration.toMillis();\n             } else {\n                 throw new IllegalArgumentException(\n                     \"waitDuration must be a positive value\");\n"}}, {"oid": "b6752338ee9142a9ba90fee6100a0b07f3d8fcb5", "url": "https://github.com/resilience4j/resilience4j/commit/b6752338ee9142a9ba90fee6100a0b07f3d8fcb5", "message": "Issue #1043 create intervalBiFunction from waitDuration", "committedDate": "2020-10-23T07:59:07Z", "type": "commit"}, {"oid": "b6752338ee9142a9ba90fee6100a0b07f3d8fcb5", "url": "https://github.com/resilience4j/resilience4j/commit/b6752338ee9142a9ba90fee6100a0b07f3d8fcb5", "message": "Issue #1043 create intervalBiFunction from waitDuration", "committedDate": "2020-10-23T07:59:07Z", "type": "forcePushed"}]}