{"pr_number": 1121, "pr_title": "Phase-1 Remove vavr dependency for CircuitBreaker and retry module", "pr_createdAt": "2020-08-16T17:48:52Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/1121", "timeline": [{"oid": "1ea24b51f73bb1439ac4b7cbb979d95655617f82", "url": "https://github.com/resilience4j/resilience4j/commit/1ea24b51f73bb1439ac4b7cbb979d95655617f82", "message": "Phase-1 Remove vavr dependency for CircuitBreaker and retry module", "committedDate": "2020-08-16T17:16:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwODY3Mg==", "url": "https://github.com/resilience4j/resilience4j/pull/1121#discussion_r472808672", "bodyText": "I think we should create a defensive copy of the Map", "author": "RobWin", "createdAt": "2020-08-19T07:34:23Z", "path": "resilience4j-spring/src/main/java/io/github/resilience4j/ratelimiter/configure/RateLimiterConfiguration.java", "diffHunk": "@@ -104,7 +104,7 @@ private RateLimiterRegistry createRateLimiterRegistry(\n                         entry.getKey())));\n \n         return RateLimiterRegistry.of(configs, rateLimiterRegistryEventConsumer,\n-            io.vavr.collection.HashMap.ofAll(rateLimiterConfigurationProperties.getTags()));\n+            rateLimiterConfigurationProperties.getTags());", "originalCommit": "1ea24b51f73bb1439ac4b7cbb979d95655617f82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af8bff08eecd0aee0b4c3f66c370094db039916b", "chunk": "diff --git a/resilience4j-spring/src/main/java/io/github/resilience4j/ratelimiter/configure/RateLimiterConfiguration.java b/resilience4j-spring/src/main/java/io/github/resilience4j/ratelimiter/configure/RateLimiterConfiguration.java\nindex ceb4f48b..b0cafa4e 100644\n--- a/resilience4j-spring/src/main/java/io/github/resilience4j/ratelimiter/configure/RateLimiterConfiguration.java\n+++ b/resilience4j-spring/src/main/java/io/github/resilience4j/ratelimiter/configure/RateLimiterConfiguration.java\n\n@@ -104,7 +104,7 @@ public class RateLimiterConfiguration {\n                         entry.getKey())));\n \n         return RateLimiterRegistry.of(configs, rateLimiterRegistryEventConsumer,\n-            rateLimiterConfigurationProperties.getTags());\n+            Map.copyOf(rateLimiterConfigurationProperties.getTags()));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwOTAwNQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1121#discussion_r472809005", "bodyText": "I think we should create a defensive copy of the Map", "author": "RobWin", "createdAt": "2020-08-19T07:34:48Z", "path": "resilience4j-spring/src/main/java/io/github/resilience4j/circuitbreaker/configure/CircuitBreakerConfiguration.java", "diffHunk": "@@ -142,8 +142,7 @@ CircuitBreakerRegistry createCircuitBreakerRegistry(\n                     .createCircuitBreakerConfig(entry.getKey(), entry.getValue(),\n                         customizerMap)));\n \n-        return CircuitBreakerRegistry.of(configs, circuitBreakerRegistryEventConsumer,\n-            io.vavr.collection.HashMap.ofAll(circuitBreakerProperties.getTags()));\n+        return CircuitBreakerRegistry.of(configs, circuitBreakerRegistryEventConsumer, circuitBreakerProperties.getTags());", "originalCommit": "1ea24b51f73bb1439ac4b7cbb979d95655617f82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af8bff08eecd0aee0b4c3f66c370094db039916b", "chunk": "diff --git a/resilience4j-spring/src/main/java/io/github/resilience4j/circuitbreaker/configure/CircuitBreakerConfiguration.java b/resilience4j-spring/src/main/java/io/github/resilience4j/circuitbreaker/configure/CircuitBreakerConfiguration.java\nindex 9839f940..28c0eb3a 100644\n--- a/resilience4j-spring/src/main/java/io/github/resilience4j/circuitbreaker/configure/CircuitBreakerConfiguration.java\n+++ b/resilience4j-spring/src/main/java/io/github/resilience4j/circuitbreaker/configure/CircuitBreakerConfiguration.java\n\n@@ -142,7 +142,7 @@ public class CircuitBreakerConfiguration {\n                     .createCircuitBreakerConfig(entry.getKey(), entry.getValue(),\n                         customizerMap)));\n \n-        return CircuitBreakerRegistry.of(configs, circuitBreakerRegistryEventConsumer, circuitBreakerProperties.getTags());\n+        return CircuitBreakerRegistry.of(configs, circuitBreakerRegistryEventConsumer, Map.copyOf(circuitBreakerProperties.getTags()));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwOTMwMA==", "url": "https://github.com/resilience4j/resilience4j/pull/1121#discussion_r472809300", "bodyText": "I think we should create a defensive copy of the Map", "author": "RobWin", "createdAt": "2020-08-19T07:35:10Z", "path": "resilience4j-spring/src/main/java/io/github/resilience4j/bulkhead/configure/threadpool/ThreadPoolBulkheadConfiguration.java", "diffHunk": "@@ -102,8 +102,7 @@ private ThreadPoolBulkheadRegistry createBulkheadRegistry(\n                 entry -> threadPoolBulkheadConfigurationProperties\n                     .createThreadPoolBulkheadConfig(entry.getValue(),\n                         compositeThreadPoolBulkheadCustomizer, entry.getKey())));\n-        return ThreadPoolBulkheadRegistry.of(configs, threadPoolBulkheadRegistryEventConsumer,\n-            io.vavr.collection.HashMap.ofAll(threadPoolBulkheadConfigurationProperties.getTags()));\n+        return ThreadPoolBulkheadRegistry.of(configs, threadPoolBulkheadRegistryEventConsumer, threadPoolBulkheadConfigurationProperties.getTags());", "originalCommit": "1ea24b51f73bb1439ac4b7cbb979d95655617f82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af8bff08eecd0aee0b4c3f66c370094db039916b", "chunk": "diff --git a/resilience4j-spring/src/main/java/io/github/resilience4j/bulkhead/configure/threadpool/ThreadPoolBulkheadConfiguration.java b/resilience4j-spring/src/main/java/io/github/resilience4j/bulkhead/configure/threadpool/ThreadPoolBulkheadConfiguration.java\nindex e476f1dd..aba64d98 100644\n--- a/resilience4j-spring/src/main/java/io/github/resilience4j/bulkhead/configure/threadpool/ThreadPoolBulkheadConfiguration.java\n+++ b/resilience4j-spring/src/main/java/io/github/resilience4j/bulkhead/configure/threadpool/ThreadPoolBulkheadConfiguration.java\n\n@@ -102,7 +102,7 @@ public class ThreadPoolBulkheadConfiguration {\n                 entry -> threadPoolBulkheadConfigurationProperties\n                     .createThreadPoolBulkheadConfig(entry.getValue(),\n                         compositeThreadPoolBulkheadCustomizer, entry.getKey())));\n-        return ThreadPoolBulkheadRegistry.of(configs, threadPoolBulkheadRegistryEventConsumer, threadPoolBulkheadConfigurationProperties.getTags());\n+        return ThreadPoolBulkheadRegistry.of(configs, threadPoolBulkheadRegistryEventConsumer, Map.copyOf(threadPoolBulkheadConfigurationProperties.getTags()));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwOTc5Nw==", "url": "https://github.com/resilience4j/resilience4j/pull/1121#discussion_r472809797", "bodyText": "I think we should create a defensive copy of the Map", "author": "RobWin", "createdAt": "2020-08-19T07:35:43Z", "path": "resilience4j-spring/src/main/java/io/github/resilience4j/timelimiter/configure/TimeLimiterConfiguration.java", "diffHunk": "@@ -131,8 +131,7 @@ private static TimeLimiterRegistry createTimeLimiterRegistry(\n                         entry -> timeLimiterConfigurationProperties.createTimeLimiterConfig(\n                             entry.getKey(), entry.getValue(), compositeTimeLimiterCustomizer)));\n \n-        return TimeLimiterRegistry.of(configs, timeLimiterRegistryEventConsumer,\n-            HashMap.ofAll(timeLimiterConfigurationProperties.getTags()));\n+        return TimeLimiterRegistry.of(configs, timeLimiterRegistryEventConsumer, timeLimiterConfigurationProperties.getTags());", "originalCommit": "1ea24b51f73bb1439ac4b7cbb979d95655617f82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af8bff08eecd0aee0b4c3f66c370094db039916b", "chunk": "diff --git a/resilience4j-spring/src/main/java/io/github/resilience4j/timelimiter/configure/TimeLimiterConfiguration.java b/resilience4j-spring/src/main/java/io/github/resilience4j/timelimiter/configure/TimeLimiterConfiguration.java\nindex f49ddc96..ae7478a6 100644\n--- a/resilience4j-spring/src/main/java/io/github/resilience4j/timelimiter/configure/TimeLimiterConfiguration.java\n+++ b/resilience4j-spring/src/main/java/io/github/resilience4j/timelimiter/configure/TimeLimiterConfiguration.java\n\n@@ -131,7 +130,7 @@ public class TimeLimiterConfiguration {\n                         entry -> timeLimiterConfigurationProperties.createTimeLimiterConfig(\n                             entry.getKey(), entry.getValue(), compositeTimeLimiterCustomizer)));\n \n-        return TimeLimiterRegistry.of(configs, timeLimiterRegistryEventConsumer, timeLimiterConfigurationProperties.getTags());\n+        return TimeLimiterRegistry.of(configs, timeLimiterRegistryEventConsumer, Map.copyOf(timeLimiterConfigurationProperties.getTags()));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwOTg5OQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1121#discussion_r472809899", "bodyText": "I think we should create a defensive copy of the Map", "author": "RobWin", "createdAt": "2020-08-19T07:35:50Z", "path": "resilience4j-spring/src/main/java/io/github/resilience4j/retry/configure/RetryConfiguration.java", "diffHunk": "@@ -103,8 +103,7 @@ private RetryRegistry createRetryRegistry(\n                     .createRetryConfig(entry.getValue(), compositeRetryCustomizer,\n                         entry.getKey())));\n \n-        return RetryRegistry.of(configs, retryRegistryEventConsumer,\n-            io.vavr.collection.HashMap.ofAll(retryConfigurationProperties.getTags()));\n+        return RetryRegistry.of(configs, retryRegistryEventConsumer, retryConfigurationProperties.getTags());", "originalCommit": "1ea24b51f73bb1439ac4b7cbb979d95655617f82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af8bff08eecd0aee0b4c3f66c370094db039916b", "chunk": "diff --git a/resilience4j-spring/src/main/java/io/github/resilience4j/retry/configure/RetryConfiguration.java b/resilience4j-spring/src/main/java/io/github/resilience4j/retry/configure/RetryConfiguration.java\nindex b8bc0c3d..127d03b7 100644\n--- a/resilience4j-spring/src/main/java/io/github/resilience4j/retry/configure/RetryConfiguration.java\n+++ b/resilience4j-spring/src/main/java/io/github/resilience4j/retry/configure/RetryConfiguration.java\n\n@@ -103,7 +103,7 @@ public class RetryConfiguration {\n                     .createRetryConfig(entry.getValue(), compositeRetryCustomizer,\n                         entry.getKey())));\n \n-        return RetryRegistry.of(configs, retryRegistryEventConsumer, retryConfigurationProperties.getTags());\n+        return RetryRegistry.of(configs, retryRegistryEventConsumer, Map.copyOf(retryConfigurationProperties.getTags()));\n     }\n \n     /**\n"}}, {"oid": "af8bff08eecd0aee0b4c3f66c370094db039916b", "url": "https://github.com/resilience4j/resilience4j/commit/af8bff08eecd0aee0b4c3f66c370094db039916b", "message": "changed the map to return unmodifiable map from configuration classes", "committedDate": "2020-08-20T07:16:53Z", "type": "commit"}]}