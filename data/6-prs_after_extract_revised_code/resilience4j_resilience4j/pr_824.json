{"pr_number": 824, "pr_title": "Fix wait time calculation in AtomicRateLimiter", "pr_createdAt": "2020-01-28T22:21:55Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/824", "timeline": [{"oid": "c938b9581fbccef86b36fa245e57f637084c224d", "url": "https://github.com/resilience4j/resilience4j/commit/c938b9581fbccef86b36fa245e57f637084c224d", "message": "Fix wait time calculation in AtomicRateLimiter", "committedDate": "2020-01-28T22:21:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyNTAxMA==", "url": "https://github.com/resilience4j/resilience4j/pull/824#discussion_r372225010", "bodyText": "Could you please remove the System.out.println from the test?", "author": "RobWin", "createdAt": "2020-01-29T07:29:58Z", "path": "resilience4j-ratelimiter/src/test/java/io/github/resilience4j/ratelimiter/internal/RateLimitersImplementationTest.java", "diffHunk": "@@ -66,8 +74,62 @@ public void tryAquiringBigNumberOfPermitsAtEndOfCycleTest() {\n         then(retryInSecondCyclePermission).isTrue();\n     }\n \n+    @Test\n+    public void reservePermissionsUpfront() throws InterruptedException {\n+        final int limitForPeriod = 3;\n+        final int tasksNum = 9;\n+        Duration limitRefreshPeriod = Duration.ofMillis(1000);\n+        Duration timeoutDuration = Duration.ofMillis(1200);\n+\n+        Duration durationToWait = limitRefreshPeriod.multipliedBy((long) ceil(((double) tasksNum) / limitForPeriod));\n+\n+        RateLimiterConfig config = RateLimiterConfig.custom()\n+            .limitForPeriod(limitForPeriod)\n+            .limitRefreshPeriod(limitRefreshPeriod)\n+            .timeoutDuration(timeoutDuration)\n+            .build();\n+\n+        ExecutorService executorService = Executors.newFixedThreadPool(tasksNum);\n+        List<Duration> times = synchronizedList(new ArrayList<>(9));\n+\n+        RateLimiter limiter = buildRateLimiter(config);\n+        RateLimiter.Metrics metrics = limiter.getMetrics();\n+        waitForRefresh(metrics, config, '$');\n+\n+        LocalDateTime testStart = LocalDateTime.now();\n+        Runnable runnable = RateLimiter.decorateRunnable(limiter, () -> {\n+            times.add(Duration.between(testStart, LocalDateTime.now()));\n+        });\n+        for (int i = 0; i < tasksNum; i++) {\n+            executorService.submit(runnable);\n+        }\n+\n+        executorService.shutdown();\n+        boolean terminated = executorService.awaitTermination(durationToWait.toMillis(), TimeUnit.MILLISECONDS);\n+        then(terminated).isTrue();\n+\n+\n+        ArrayList<Long> runningDeltas = new ArrayList<>();\n+        long previousDuration = times.get(0).toMillis();\n+        for (Duration time : times) {\n+            long current = time.toMillis();\n+            long delta = Math.abs(previousDuration - current);\n+            runningDeltas.add(delta);\n+            System.out.println(\"\" + current + \" [\" + delta + \"]\");", "originalCommit": "c938b9581fbccef86b36fa245e57f637084c224d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c517aba2ffa6642f79c4b01d76d53be360b526ca", "chunk": "diff --git a/resilience4j-ratelimiter/src/test/java/io/github/resilience4j/ratelimiter/internal/RateLimitersImplementationTest.java b/resilience4j-ratelimiter/src/test/java/io/github/resilience4j/ratelimiter/internal/RateLimitersImplementationTest.java\nindex e1f72b6c..05dd00bb 100644\n--- a/resilience4j-ratelimiter/src/test/java/io/github/resilience4j/ratelimiter/internal/RateLimitersImplementationTest.java\n+++ b/resilience4j-ratelimiter/src/test/java/io/github/resilience4j/ratelimiter/internal/RateLimitersImplementationTest.java\n\n@@ -115,14 +115,13 @@ public abstract class RateLimitersImplementationTest {\n             long current = time.toMillis();\n             long delta = Math.abs(previousDuration - current);\n             runningDeltas.add(delta);\n-            System.out.println(\"\" + current + \" [\" + delta + \"]\");\n             previousDuration = current;\n         }\n \n         then(runningDeltas.get(0)).isZero();\n         then(runningDeltas.get(1)).isLessThan(20);\n         then(runningDeltas.get(2)).isLessThan(20);\n-        then(runningDeltas.get(3)).isBetween(200L, 1000L);\n+        then(runningDeltas.get(3)).isBetween(200L, 1050L);\n         then(runningDeltas.get(4)).isLessThan(20);\n         then(runningDeltas.get(5)).isLessThan(20);\n         then(times).hasSize(6);\n"}}, {"oid": "c517aba2ffa6642f79c4b01d76d53be360b526ca", "url": "https://github.com/resilience4j/resilience4j/commit/c517aba2ffa6642f79c4b01d76d53be360b526ca", "message": "Fix review comments", "committedDate": "2020-01-29T09:00:04Z", "type": "commit"}]}