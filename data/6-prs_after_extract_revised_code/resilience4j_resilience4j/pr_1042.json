{"pr_number": 1042, "pr_title": "Added config param WaitDurationInHalfOpenState and unit tests", "pr_createdAt": "2020-06-23T13:59:58Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/1042", "timeline": [{"oid": "b60fd866b21606a9fd20de708f39e86b8adb0270", "url": "https://github.com/resilience4j/resilience4j/commit/b60fd866b21606a9fd20de708f39e86b8adb0270", "message": "Added waitDurationInHalfOpenState config parameter", "committedDate": "2020-06-22T09:18:05Z", "type": "commit"}, {"oid": "cd7596cede94556415dfbda44d5865b020c9ab25", "url": "https://github.com/resilience4j/resilience4j/commit/cd7596cede94556415dfbda44d5865b020c9ab25", "message": "Added unit tests", "committedDate": "2020-06-23T13:27:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwMjIwMQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1042#discussion_r444802201", "bodyText": "circuitBreaker: Please upper case.", "author": "RobWin", "createdAt": "2020-06-24T10:36:09Z", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -363,6 +373,28 @@ public Builder slowCallDurationThreshold(Duration slowCallDurationThreshold) {\n             return this;\n         }\n \n+        /**\n+         * Configures CircuitBreaker with a fixed wait duration which controls how long the\n+         * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n+         * Optional parameter.\n+         *\n+         * By default circuitBreaker will stay in Half Open state until", "originalCommit": "cd7596cede94556415dfbda44d5865b020c9ab25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39c820e2b1ba15111a3c4bb83797144161d27011", "chunk": "diff --git a/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java b/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\nindex 177559e1..d6929771 100644\n--- a/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\n+++ b/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\n\n@@ -376,9 +376,9 @@ public class CircuitBreakerConfig {\n         /**\n          * Configures CircuitBreaker with a fixed wait duration which controls how long the\n          * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n-         * Optional parameter.\n+         * optional parameter.\n          *\n-         * By default circuitBreaker will stay in Half Open state until\n+         * By default CircuitBreaker will stay in Half Open state until\n          * {@code minimumNumberOfCalls} is completed with either success or failure.\n          *\n          * @param waitDurationInHalfOpenState the wait duration which specifies how long the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwMjI3Nw==", "url": "https://github.com/resilience4j/resilience4j/pull/1042#discussion_r444802277", "bodyText": "Optional please lower case", "author": "RobWin", "createdAt": "2020-06-24T10:36:18Z", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -363,6 +373,28 @@ public Builder slowCallDurationThreshold(Duration slowCallDurationThreshold) {\n             return this;\n         }\n \n+        /**\n+         * Configures CircuitBreaker with a fixed wait duration which controls how long the\n+         * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n+         * Optional parameter.", "originalCommit": "cd7596cede94556415dfbda44d5865b020c9ab25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39c820e2b1ba15111a3c4bb83797144161d27011", "chunk": "diff --git a/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java b/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\nindex 177559e1..d6929771 100644\n--- a/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\n+++ b/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\n\n@@ -376,9 +376,9 @@ public class CircuitBreakerConfig {\n         /**\n          * Configures CircuitBreaker with a fixed wait duration which controls how long the\n          * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n-         * Optional parameter.\n+         * optional parameter.\n          *\n-         * By default circuitBreaker will stay in Half Open state until\n+         * By default CircuitBreaker will stay in Half Open state until\n          * {@code minimumNumberOfCalls} is completed with either success or failure.\n          *\n          * @param waitDurationInHalfOpenState the wait duration which specifies how long the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxNzMxMg==", "url": "https://github.com/resilience4j/resilience4j/pull/1042#discussion_r444817312", "bodyText": "I think waitDurationInHalfOpenState can be smaller than 1000ms like waitDurationInOpenState.\n\n  \n    \n      resilience4j/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\n    \n    \n        Lines 322 to 330\n      in\n      13bdd4b\n    \n    \n    \n    \n\n        \n          \n           public Builder waitDurationInOpenState(Duration waitDurationInOpenState) { \n        \n\n        \n          \n               long waitDurationInMillis = waitDurationInOpenState.toMillis(); \n        \n\n        \n          \n               if (waitDurationInMillis < 1) { \n        \n\n        \n          \n                   throw new IllegalArgumentException( \n        \n\n        \n          \n                       \"waitDurationInOpenState must be at least 1[ms]\"); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               this.waitIntervalFunctionInOpenState = IntervalFunction.of(waitDurationInMillis); \n        \n\n        \n          \n               return this; \n        \n\n        \n          \n           }", "author": "dlsrb6342", "createdAt": "2020-06-24T11:07:17Z", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -363,6 +373,28 @@ public Builder slowCallDurationThreshold(Duration slowCallDurationThreshold) {\n             return this;\n         }\n \n+        /**\n+         * Configures CircuitBreaker with a fixed wait duration which controls how long the\n+         * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n+         * Optional parameter.\n+         *\n+         * By default circuitBreaker will stay in Half Open state until\n+         * {@code minimumNumberOfCalls} is completed with either success or failure.\n+         *\n+         * @param waitDurationInHalfOpenState the wait duration which specifies how long the\n+         *                                CircuitBreaker should stay in Half Open\n+         * @return the CircuitBreakerConfig.Builder\n+         * @throws IllegalArgumentException if {@code waitDurationInOpenState.toMillis() < 1000}\n+         */\n+        public Builder waitDurationInHalfOpenState(Duration waitDurationInHalfOpenState) {\n+            if (waitDurationInHalfOpenState.toMillis() < 1000) {", "originalCommit": "cd7596cede94556415dfbda44d5865b020c9ab25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39c820e2b1ba15111a3c4bb83797144161d27011", "chunk": "diff --git a/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java b/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\nindex 177559e1..d6929771 100644\n--- a/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\n+++ b/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\n\n@@ -376,9 +376,9 @@ public class CircuitBreakerConfig {\n         /**\n          * Configures CircuitBreaker with a fixed wait duration which controls how long the\n          * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n-         * Optional parameter.\n+         * optional parameter.\n          *\n-         * By default circuitBreaker will stay in Half Open state until\n+         * By default CircuitBreaker will stay in Half Open state until\n          * {@code minimumNumberOfCalls} is completed with either success or failure.\n          *\n          * @param waitDurationInHalfOpenState the wait duration which specifies how long the\n"}}, {"oid": "39c820e2b1ba15111a3c4bb83797144161d27011", "url": "https://github.com/resilience4j/resilience4j/commit/39c820e2b1ba15111a3c4bb83797144161d27011", "message": "Changed minimum value for waitDurationInHalfOpenState to 1ms", "committedDate": "2020-06-25T08:19:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3OTU1Mg==", "url": "https://github.com/resilience4j/resilience4j/pull/1042#discussion_r445579552", "bodyText": "I think we should rename it to maxWaitDurationInHalfOpenState? Because the wait duration is shorter if minimumNumberOfCalls have been processed.", "author": "RobWin", "createdAt": "2020-06-25T13:58:33Z", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -363,6 +373,28 @@ public Builder slowCallDurationThreshold(Duration slowCallDurationThreshold) {\n             return this;\n         }\n \n+        /**\n+         * Configures CircuitBreaker with a fixed wait duration which controls how long the\n+         * CircuitBreaker should stay in Half Open state, before it switches to open. This is an\n+         * optional parameter.\n+         *\n+         * By default CircuitBreaker will stay in Half Open state until\n+         * {@code minimumNumberOfCalls} is completed with either success or failure.\n+         *\n+         * @param waitDurationInHalfOpenState the wait duration which specifies how long the\n+         *                                CircuitBreaker should stay in Half Open\n+         * @return the CircuitBreakerConfig.Builder\n+         * @throws IllegalArgumentException if {@code waitDurationInOpenState.toMillis() < 1000}\n+         */\n+        public Builder waitDurationInHalfOpenState(Duration waitDurationInHalfOpenState) {", "originalCommit": "39c820e2b1ba15111a3c4bb83797144161d27011", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5ODM1Mg==", "url": "https://github.com/resilience4j/resilience4j/pull/1042#discussion_r445598352", "bodyText": "sure make sense.", "author": "KrnSaurabh", "createdAt": "2020-06-25T14:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3OTU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6c5c31706c9781e319d42aca83f76fe8575018cc", "chunk": "diff --git a/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java b/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\nindex d6929771..0a39e8ce 100644\n--- a/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\n+++ b/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java\n\n@@ -381,17 +381,17 @@ public class CircuitBreakerConfig {\n          * By default CircuitBreaker will stay in Half Open state until\n          * {@code minimumNumberOfCalls} is completed with either success or failure.\n          *\n-         * @param waitDurationInHalfOpenState the wait duration which specifies how long the\n+         * @param maxWaitDurationInHalfOpenState the wait duration which specifies how long the\n          *                                CircuitBreaker should stay in Half Open\n          * @return the CircuitBreakerConfig.Builder\n          * @throws IllegalArgumentException if {@code waitDurationInOpenState.toMillis() < 1000}\n          */\n-        public Builder waitDurationInHalfOpenState(Duration waitDurationInHalfOpenState) {\n-            if (waitDurationInHalfOpenState.toMillis() < 1) {\n+        public Builder maxWaitDurationInHalfOpenState(Duration maxWaitDurationInHalfOpenState) {\n+            if (maxWaitDurationInHalfOpenState.toMillis() < 1) {\n                 throw new IllegalArgumentException(\n-                    \"waitDurationInHalfOpenState must be at least 1[ms]\");\n+                    \"maxWaitDurationInHalfOpenState must be at least 1[ms]\");\n             }\n-            this.waitDurationInHalfOpenState = waitDurationInHalfOpenState;\n+            this.maxWaitDurationInHalfOpenState = maxWaitDurationInHalfOpenState;\n             return this;\n         }\n \n"}}, {"oid": "6c5c31706c9781e319d42aca83f76fe8575018cc", "url": "https://github.com/resilience4j/resilience4j/commit/6c5c31706c9781e319d42aca83f76fe8575018cc", "message": "renamed waitDurationInHalfOpenState to maxWaitDurationInHalfOpenState", "committedDate": "2020-06-25T14:23:57Z", "type": "commit"}]}