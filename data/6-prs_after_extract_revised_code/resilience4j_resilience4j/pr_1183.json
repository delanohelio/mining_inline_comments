{"pr_number": 1183, "pr_title": "feat(micronaut): update intercept and test cases", "pr_createdAt": "2020-09-29T17:07:57Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/1183", "timeline": [{"oid": "676da2d940165295c5e20a81e3076628c3e64961", "url": "https://github.com/resilience4j/resilience4j/commit/676da2d940165295c5e20a81e3076628c3e64961", "message": "move proceed into excuteCompletionStage", "committedDate": "2020-09-29T17:05:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzNDE4Nw==", "url": "https://github.com/resilience4j/resilience4j/pull/1183#discussion_r496934187", "bodyText": "can u please do it as we have in bulkhead aspect  :\nhttps://github.com/resilience4j/resilience4j/blob/master/resilience4j-spring/src/main/java/io/github/resilience4j/bulkhead/configure/BulkheadAspect.java#L221\nSame story for other interceptors  ,  you can quickly compare with its own spring aspects", "author": "Romeh", "createdAt": "2020-09-29T17:59:48Z", "path": "resilience4j-micronaut/src/main/java/io/github/resilience4j/mirconaut/bulkhead/BulkheadInterceptor.java", "diffHunk": "@@ -97,11 +97,7 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {\n         ReturnType<Object> rt = context.getReturnType();\n         Class<Object> returnType = rt.getType();\n         if (CompletionStage.class.isAssignableFrom(returnType)) {\n-            Object result = context.proceed();\n-            if (result == null) {\n-                return result;\n-            }\n-            return this.fallbackCompletable(bulkhead.executeCompletionStage(() -> ((CompletableFuture<?>) result)),context);\n+            return this.fallbackCompletable(bulkhead.executeCompletionStage(() -> ((CompletableFuture<?>) context.proceed())),context);", "originalCommit": "676da2d940165295c5e20a81e3076628c3e64961", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1f27f6b8e855b01a0e425d2265789223972eec0", "chunk": "diff --git a/resilience4j-micronaut/src/main/java/io/github/resilience4j/mirconaut/bulkhead/BulkheadInterceptor.java b/resilience4j-micronaut/src/main/java/io/github/resilience4j/mirconaut/bulkhead/BulkheadInterceptor.java\nindex 76fdf7d3..71557e23 100644\n--- a/resilience4j-micronaut/src/main/java/io/github/resilience4j/mirconaut/bulkhead/BulkheadInterceptor.java\n+++ b/resilience4j-micronaut/src/main/java/io/github/resilience4j/mirconaut/bulkhead/BulkheadInterceptor.java\n\n@@ -97,7 +97,11 @@ public class BulkheadInterceptor extends BaseInterceptor implements MethodInterc\n         ReturnType<Object> rt = context.getReturnType();\n         Class<Object> returnType = rt.getType();\n         if (CompletionStage.class.isAssignableFrom(returnType)) {\n-            return this.fallbackCompletable(bulkhead.executeCompletionStage(() -> ((CompletableFuture<?>) context.proceed())),context);\n+            Object result = context.proceed();\n+            if (result == null) {\n+                return result;\n+            }\n+            return this.fallbackCompletable(bulkhead.executeCompletionStage(() -> ((CompletableFuture<?>) result)),context);\n         } else if (Publishers.isConvertibleToPublisher(returnType)) {\n             Object result = context.proceed();\n             if (result == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzNDUyMQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1183#discussion_r496934521", "bodyText": "Same for reactive types please", "author": "Romeh", "createdAt": "2020-09-29T18:00:20Z", "path": "resilience4j-micronaut/src/main/java/io/github/resilience4j/mirconaut/circuitbreaker/CircuitBreakerInterceptor.java", "diffHunk": "@@ -83,11 +83,7 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {\n         ReturnType<Object> rt = context.getReturnType();\n         Class<Object> returnType = rt.getType();\n         if (CompletionStage.class.isAssignableFrom(returnType)) {\n-            Object result = context.proceed();\n-            if (result == null) {\n-                return result;\n-            }\n-            return this.fallbackCompletable(circuitBreaker.executeCompletionStage(() -> ((CompletableFuture<?>) result)), context);\n+            return this.fallbackCompletable(circuitBreaker.executeCompletionStage(() -> ((CompletableFuture<?>) context.proceed())), context);\n         } else if (Publishers.isConvertibleToPublisher(returnType)) {", "originalCommit": "676da2d940165295c5e20a81e3076628c3e64961", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1f27f6b8e855b01a0e425d2265789223972eec0", "chunk": "diff --git a/resilience4j-micronaut/src/main/java/io/github/resilience4j/mirconaut/circuitbreaker/CircuitBreakerInterceptor.java b/resilience4j-micronaut/src/main/java/io/github/resilience4j/mirconaut/circuitbreaker/CircuitBreakerInterceptor.java\nindex 8750e742..d4e9a48b 100644\n--- a/resilience4j-micronaut/src/main/java/io/github/resilience4j/mirconaut/circuitbreaker/CircuitBreakerInterceptor.java\n+++ b/resilience4j-micronaut/src/main/java/io/github/resilience4j/mirconaut/circuitbreaker/CircuitBreakerInterceptor.java\n\n@@ -83,7 +83,11 @@ public class CircuitBreakerInterceptor extends BaseInterceptor implements Method\n         ReturnType<Object> rt = context.getReturnType();\n         Class<Object> returnType = rt.getType();\n         if (CompletionStage.class.isAssignableFrom(returnType)) {\n-            return this.fallbackCompletable(circuitBreaker.executeCompletionStage(() -> ((CompletableFuture<?>) context.proceed())), context);\n+            Object result = context.proceed();\n+            if (result == null) {\n+                return result;\n+            }\n+            return this.fallbackCompletable(circuitBreaker.executeCompletionStage(() -> ((CompletableFuture<?>) result)), context);\n         } else if (Publishers.isConvertibleToPublisher(returnType)) {\n             Object result = context.proceed();\n             if (result == null) {\n"}}, {"oid": "c1f27f6b8e855b01a0e425d2265789223972eec0", "url": "https://github.com/resilience4j/resilience4j/commit/c1f27f6b8e855b01a0e425d2265789223972eec0", "message": "tweak for flowable test case", "committedDate": "2020-09-29T19:41:19Z", "type": "commit"}, {"oid": "4a774192bfd0b024b2b621237da37b7e936865d7", "url": "https://github.com/resilience4j/resilience4j/commit/4a774192bfd0b024b2b621237da37b7e936865d7", "message": "Merge branch 'feature/flowable-test' into feature/tweak-completion-stage", "committedDate": "2020-09-29T19:42:10Z", "type": "commit"}, {"oid": "9f2d54c8cfc4bc2a3ba5172957eb048325fc319b", "url": "https://github.com/resilience4j/resilience4j/commit/9f2d54c8cfc4bc2a3ba5172957eb048325fc319b", "message": "correct flowable and exception", "committedDate": "2020-09-29T21:30:52Z", "type": "commit"}, {"oid": "bd485881cad4f2d7d27f45ed4568fd2910fab95e", "url": "https://github.com/resilience4j/resilience4j/commit/bd485881cad4f2d7d27f45ed4568fd2910fab95e", "message": "tweak intercept for fallback", "committedDate": "2020-09-29T21:57:36Z", "type": "commit"}, {"oid": "1954c7335d322093e67bf5627178053dcf068edd", "url": "https://github.com/resilience4j/resilience4j/commit/1954c7335d322093e67bf5627178053dcf068edd", "message": "correct recovery for threadpool bulkhead", "committedDate": "2020-09-29T22:04:29Z", "type": "commit"}, {"oid": "e938994915810ec176d1091c682b90a05861082e", "url": "https://github.com/resilience4j/resilience4j/commit/e938994915810ec176d1091c682b90a05861082e", "message": "bump", "committedDate": "2020-10-01T19:12:34Z", "type": "commit"}]}