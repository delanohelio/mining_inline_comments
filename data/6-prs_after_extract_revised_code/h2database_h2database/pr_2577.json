{"pr_number": 2577, "pr_title": "PgServer: `array_to_string()` and `set join_collapse_limit`", "pr_createdAt": "2020-04-22T02:16:51Z", "pr_url": "https://github.com/h2database/h2database/pull/2577", "timeline": [{"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee", "url": "https://github.com/h2database/h2database/commit/0fc92febf585144ab69cb1a2a5bbdd74bf856dee", "message": "array_to_string() and set join_collapse_limit", "committedDate": "2020-04-22T03:42:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1OTQ4MA==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412659480", "bodyText": "I think this function is expected to be deterministic and in the PostgreSQL it has variable number of arguments.", "author": "katzyn", "createdAt": "2020-04-22T04:24:51Z", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -101,6 +105,8 @@\n                 PG_TABLE_IS_VISIBLE, 1, Value.BOOLEAN, true, false, true, false));\n         FUNCTIONS.put(\"SET_CONFIG\", new FunctionInfo(\"SET_CONFIG\", //\n                 SET_CONFIG, 3, Value.VARCHAR, true, false, true, false));\n+        FUNCTIONS.put(\"ARRAY_TO_STRING\", new FunctionInfo(\"ARRAY_TO_STRING\", //\n+                ARRAY_TO_STRING, 2, Value.VARCHAR, true, false, true, false));", "originalCommit": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2NDM4MQ==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412764381", "bodyText": "added 3rd arg optional_null_string, refer to https://www.postgresql.org/docs/9.1/functions-admin.html", "author": "auntyellow", "createdAt": "2020-04-22T08:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1OTQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyOTcxOQ==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413029719", "bodyText": "It should use false, true, true, false because it doesn't return NULL on any NULL parameter and because it is deterministic.", "author": "katzyn", "createdAt": "2020-04-22T14:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1OTQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MjY4OA==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413392688", "bodyText": "fixed", "author": "auntyellow", "createdAt": "2020-04-22T23:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1OTQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "chunk": "diff --git a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\nindex e8f0c9ccb..43397e378 100644\n--- a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n+++ b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n\n@@ -106,7 +106,7 @@\n         FUNCTIONS.put(\"SET_CONFIG\", new FunctionInfo(\"SET_CONFIG\", //\n                 SET_CONFIG, 3, Value.VARCHAR, true, false, true, false));\n         FUNCTIONS.put(\"ARRAY_TO_STRING\", new FunctionInfo(\"ARRAY_TO_STRING\", //\n-                ARRAY_TO_STRING, 2, Value.VARCHAR, true, false, true, false));\n+                ARRAY_TO_STRING, VAR_ARGS, Value.VARCHAR, true, false, true, false));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDQyNg==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412660426", "bodyText": "Such conversion to untyped array will be rejected in the future and PostgreSQL doesn't really accept values of other data types here. You need to check getValueType() and throw DbException.getInvalidValueException(\u2026) if passed value is not an array.", "author": "katzyn", "createdAt": "2020-04-22T04:27:44Z", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +227,16 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);", "originalCommit": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAxNzU4NQ==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413017585", "bodyText": "added type check", "author": "auntyellow", "createdAt": "2020-04-22T14:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyNjA2Ng==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413026066", "bodyText": "Please, remove convertTo() invocation.", "author": "katzyn", "createdAt": "2020-04-22T14:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MjgwOA==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413392808", "bodyText": "removed", "author": "auntyellow", "createdAt": "2020-04-22T23:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "chunk": "diff --git a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\nindex e8f0c9ccb..43397e378 100644\n--- a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n+++ b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n\n@@ -229,10 +233,21 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             break;\n         case ARRAY_TO_STRING:\n             StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type < Value.CHAR || v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }\n+            }\n             ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);\n             for (Value v : va.getList()) {\n-                if (v != null && !(v instanceof ValueNull)) {\n+                if (v != ValueNull.INSTANCE) {\n                     joiner.add(v.getString());\n+                } else if (v2 != null) {\n+                    joiner.add(v2.getString());\n                 }\n             }\n             result = ValueVarchar.get(joiner.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MTUxMQ==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412661511", "bodyText": "Why v != null is needed here?\n\n\nUse v == ValueNull.INSTANCE for a null check.\n\n\nIf an optional third argument is specified, it should be used as replacement for null values.", "author": "katzyn", "createdAt": "2020-04-22T04:31:10Z", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +227,16 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);\n+            for (Value v : va.getList()) {\n+                if (v != null && !(v instanceof ValueNull)) {", "originalCommit": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAxOTc3MQ==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413019771", "bodyText": "fixed null check and added 3rd arg replacement", "author": "auntyellow", "createdAt": "2020-04-22T14:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MTUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "chunk": "diff --git a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\nindex e8f0c9ccb..43397e378 100644\n--- a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n+++ b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n\n@@ -229,10 +233,21 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             break;\n         case ARRAY_TO_STRING:\n             StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type < Value.CHAR || v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }\n+            }\n             ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);\n             for (Value v : va.getList()) {\n-                if (v != null && !(v instanceof ValueNull)) {\n+                if (v != ValueNull.INSTANCE) {\n                     joiner.add(v.getString());\n+                } else if (v2 != null) {\n+                    joiner.add(v2.getString());\n                 }\n             }\n             result = ValueVarchar.get(joiner.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2Mzk1OQ==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412663959", "bodyText": "We prefer pure SQL tests for such functions, see TestScript and .sql files.", "author": "katzyn", "createdAt": "2020-04-22T04:38:45Z", "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -270,6 +270,14 @@ private void testPgClient() throws SQLException {\n         rs.next();\n         assertEquals(1, rs.getInt(1));\n \n+        rs = stat.executeQuery(\"select array_to_string(array[null, 0, 1, null, 2], ',')\");\n+        rs.next();\n+        assertEquals(\"0,1,2\", rs.getString(1));\n+\n+        rs = stat.executeQuery(\"select array_to_string(array['a', null, '', 'b', null], ',')\");\n+        rs.next();\n+        assertEquals(\"a,,b\", rs.getString(1));\n+", "originalCommit": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyMzA3NA==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413023074", "bodyText": "moved to array-to-string.sql", "author": "auntyellow", "createdAt": "2020-04-22T14:17:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2Mzk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "chunk": "diff --git a/h2/src/test/org/h2/test/unit/TestPgServer.java b/h2/src/test/org/h2/test/unit/TestPgServer.java\nindex 43eda8e2f..60b9e9c0d 100644\n--- a/h2/src/test/org/h2/test/unit/TestPgServer.java\n+++ b/h2/src/test/org/h2/test/unit/TestPgServer.java\n\n@@ -270,14 +270,6 @@ private void testPgClient() throws SQLException {\n         rs.next();\n         assertEquals(1, rs.getInt(1));\n \n-        rs = stat.executeQuery(\"select array_to_string(array[null, 0, 1, null, 2], ',')\");\n-        rs.next();\n-        assertEquals(\"0,1,2\", rs.getString(1));\n-\n-        rs = stat.executeQuery(\"select array_to_string(array['a', null, '', 'b', null], ',')\");\n-        rs.next();\n-        assertEquals(\"a,,b\", rs.getString(1));\n-\n         rs = stat.executeQuery(\"select has_table_privilege('TEST', 'READ')\");\n         rs.next();\n         assertTrue(rs.getBoolean(1));\n"}}, {"oid": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "url": "https://github.com/h2database/h2database/commit/d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "message": "array_to_string() and set join_collapse_limit", "committedDate": "2020-04-22T13:59:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyNTM1NQ==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413025355", "bodyText": "Third argument may also be NULL. I think there is no reason to bother with its data type, you can use something like that:\nString nullValue = null;\nif (v2 != null) {\n    nullValue = v2.getString();\n}", "author": "katzyn", "createdAt": "2020-04-22T14:20:37Z", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,27 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type < Value.CHAR || v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }", "originalCommit": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NDkxOA==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413394918", "bodyText": "Fixed.\nIn real PostgreSQL 12, however, 3rd arg can only be NULL or String-like.", "author": "auntyellow", "createdAt": "2020-04-22T23:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyNTM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4bb82ff6aa715d2ef73072cb5532ee253137b326", "chunk": "diff --git a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\nindex 43397e378..55b95b11b 100644\n--- a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n+++ b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n\n@@ -238,12 +238,14 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             }\n             if (v2 != null) {\n                 int v2Type = v2.getValueType();\n-                if (v2Type < Value.CHAR || v2Type > Value.VARCHAR_IGNORECASE) {\n+                if (v2Type > Value.VARCHAR_IGNORECASE) {\n                     throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n                 }\n+                if (v2 == ValueNull.INSTANCE) {\n+                    v2 = null;\n+                }\n             }\n-            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);\n-            for (Value v : va.getList()) {\n+            for (Value v : ((ValueArray) v0).getList()) {\n                 if (v != ValueNull.INSTANCE) {\n                     joiner.add(v.getString());\n                 } else if (v2 != null) {\n"}}, {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326", "url": "https://github.com/h2database/h2database/commit/4bb82ff6aa715d2ef73072cb5532ee253137b326", "message": "array_to_string() and set join_collapse_limit", "committedDate": "2020-04-22T23:06:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413461678", "bodyText": "You need to return ValueNull.INSTANCE if v0 or v1 are equal to ValueNull.INSTANCE before this condition, because this function now processes nulls by itself.", "author": "katzyn", "createdAt": "2020-04-23T02:25:12Z", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {", "originalCommit": "4bb82ff6aa715d2ef73072cb5532ee253137b326", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2NjcyMQ==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413466721", "bodyText": "Please, also add test cases for NULL values in the first and second arguments to ensure correctness of the new condition.", "author": "katzyn", "createdAt": "2020-04-23T02:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4OTc3Mg==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414189772", "bodyText": "I adjusted test cases:\n\narray_to_string(null, ?, ?) -> null\narray_to_string(?, null, ?) -> null\narray_to_string(not-array, ?, ?) -> invalid\n\nAlthough PostgreSQL regards array_to_string(null, <string>) as invalid.", "author": "auntyellow", "createdAt": "2020-04-23T23:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwOTYyNw==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414209627", "bodyText": "You need to add an explicit cast to array data type when you test NULL array in the PostgreSQL, it rejects untyped NULL only.", "author": "katzyn", "createdAt": "2020-04-24T00:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMzg2MA==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414213860", "bodyText": "You mean array_to_string(null::array, ',') should be considered?", "author": "auntyellow", "createdAt": "2020-04-24T00:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyMDMwMQ==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414220301", "bodyText": "int array or some other valid array type. In our tests it isn't needed, I meant only how you can test it in the real PostgreSQL correctly.", "author": "katzyn", "createdAt": "2020-04-24T00:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzNTgwMg==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414235802", "bodyText": "select array_to_string(array[1, null, 3], 0, 2);\nselect array_to_string(null, 0, 2);\nselect array_to_string(array[1, null, 3], null, 2);\nselect array_to_string(0, ',');\n\nThese are rejected as function does not exist by PostgreSQL 12.  Seems PG matches function by name and type.", "author": "auntyellow", "createdAt": "2020-04-24T01:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "a76f7e7fc7ea2f75ac00289d0d7cf246db5c35ea", "chunk": "diff --git a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\nindex 55b95b11b..9f5947a72 100644\n--- a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n+++ b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n\n@@ -232,24 +232,23 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n         case ARRAY_TO_STRING:\n+            if (v0 == ValueNull.INSTANCE || v1 == ValueNull.INSTANCE) {\n+                result = ValueNull.INSTANCE;\n+                break;\n+            }\n             StringJoiner joiner = new StringJoiner(v1.getString());\n             if (v0.getValueType() != Value.ARRAY) {\n                 throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n             }\n+            String nullString = null;\n             if (v2 != null) {\n-                int v2Type = v2.getValueType();\n-                if (v2Type > Value.VARCHAR_IGNORECASE) {\n-                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n-                }\n-                if (v2 == ValueNull.INSTANCE) {\n-                    v2 = null;\n-                }\n+                nullString = v2.getString();\n             }\n             for (Value v : ((ValueArray) v0).getList()) {\n                 if (v != ValueNull.INSTANCE) {\n                     joiner.add(v.getString());\n-                } else if (v2 != null) {\n-                    joiner.add(v2.getString());\n+                } else if (nullString != null) {\n+                    joiner.add(nullString);\n                 }\n             }\n             result = ValueVarchar.get(joiner.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgzMA==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413462830", "bodyText": "What do you want from its value type and why this condition may accept random data types? These constants aren't fixed in H2, they may be modified at any time.\nUse\nString nullString = null;\nif (v2 != null) {\n    nullString = v2.getString();\n}\nas it was suggested earlier. Additional checks not worth here.", "author": "katzyn", "createdAt": "2020-04-23T02:28:35Z", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }", "originalCommit": "4bb82ff6aa715d2ef73072cb5532ee253137b326", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2NDA2Ng==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413464066", "bodyText": "But if you want them for a some reason, use DataType.isCharacterStringType() and preserve special case for NULL.", "author": "katzyn", "createdAt": "2020-04-23T02:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2NjUzNw==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413466537", "bodyText": "PostgreSQL also doesn't accept other data types in the second argument, but you don't check it, so I don't understand why you want to check the optional third argument.\nFirst argument is very special and special check for it simplifies implementation, others are simple string arguments, from my point of view these additional conditions for them aren't required. H2 is not designed to validate SQL for other databases anyway.", "author": "katzyn", "createdAt": "2020-04-23T02:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NDQ0NQ==", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414194445", "bodyText": "I just forgot to add 2nd arg type check before. Now 3rd arg type check removed, which made code simpler : - )", "author": "auntyellow", "createdAt": "2020-04-23T23:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "a76f7e7fc7ea2f75ac00289d0d7cf246db5c35ea", "chunk": "diff --git a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\nindex 55b95b11b..9f5947a72 100644\n--- a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n+++ b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n\n@@ -232,24 +232,23 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n         case ARRAY_TO_STRING:\n+            if (v0 == ValueNull.INSTANCE || v1 == ValueNull.INSTANCE) {\n+                result = ValueNull.INSTANCE;\n+                break;\n+            }\n             StringJoiner joiner = new StringJoiner(v1.getString());\n             if (v0.getValueType() != Value.ARRAY) {\n                 throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n             }\n+            String nullString = null;\n             if (v2 != null) {\n-                int v2Type = v2.getValueType();\n-                if (v2Type > Value.VARCHAR_IGNORECASE) {\n-                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n-                }\n-                if (v2 == ValueNull.INSTANCE) {\n-                    v2 = null;\n-                }\n+                nullString = v2.getString();\n             }\n             for (Value v : ((ValueArray) v0).getList()) {\n                 if (v != ValueNull.INSTANCE) {\n                     joiner.add(v.getString());\n-                } else if (v2 != null) {\n-                    joiner.add(v2.getString());\n+                } else if (nullString != null) {\n+                    joiner.add(nullString);\n                 }\n             }\n             result = ValueVarchar.get(joiner.toString());\n"}}, {"oid": "a76f7e7fc7ea2f75ac00289d0d7cf246db5c35ea", "url": "https://github.com/h2database/h2database/commit/a76f7e7fc7ea2f75ac00289d0d7cf246db5c35ea", "message": "array_to_string() and set join_collapse_limit", "committedDate": "2020-04-23T23:19:16Z", "type": "commit"}, {"oid": "a76f7e7fc7ea2f75ac00289d0d7cf246db5c35ea", "url": "https://github.com/h2database/h2database/commit/a76f7e7fc7ea2f75ac00289d0d7cf246db5c35ea", "message": "array_to_string() and set join_collapse_limit", "committedDate": "2020-04-23T23:19:16Z", "type": "forcePushed"}]}