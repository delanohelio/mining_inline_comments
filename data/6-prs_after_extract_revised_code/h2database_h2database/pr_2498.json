{"pr_number": 2498, "pr_title": "Add some PostgreSQL compatibility features mentioned in issue #2450", "pr_createdAt": "2020-03-09T14:30:48Z", "pr_url": "https://github.com/h2database/h2database/pull/2498", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg3MQ==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389732871", "bodyText": "This code should be used only in PostgreSQL compatibility mode.", "author": "katzyn", "createdAt": "2020-03-09T14:39:54Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7697,6 +7697,9 @@ private void readIfEqualOrTo() {\n     }\n \n     private Prepared parseSet() {\n+        if (readIf(\"SESSION\") || readIf(\"LOCAL\")) {\n+            // for PostgreSQL compatibility\n+        }", "originalCommit": "a89eb8c64c986879699f0b683870e10f6c927c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NTgyOA==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389745828", "bodyText": "And even in the PostgreSQL compatibility mode this code should not break SET SESSION CHARACTERISTICS \u2026, this command is a part of the SQL Standard and it is supported by PostgreSQL too.", "author": "katzyn", "createdAt": "2020-03-09T14:58:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MjExMw==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390282113", "bodyText": "removed from this PR", "author": "auntyellow", "createdAt": "2020-03-10T12:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "chunk": "diff --git a/h2/src/main/org/h2/command/Parser.java b/h2/src/main/org/h2/command/Parser.java\nindex 9aefca7ae..cdaf17137 100644\n--- a/h2/src/main/org/h2/command/Parser.java\n+++ b/h2/src/main/org/h2/command/Parser.java\n\n@@ -7697,9 +7697,6 @@ private void readIfEqualOrTo() {\n     }\n \n     private Prepared parseSet() {\n-        if (readIf(\"SESSION\") || readIf(\"LOCAL\")) {\n-            // for PostgreSQL compatibility\n-        }\n         if (readIf(AT)) {\n             Set command = new Set(session, SetTypes.VARIABLE);\n             command.setString(readAliasIdentifier());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMzM0NQ==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389733345", "bodyText": "This code too, we already have too many non-standard stuff that is incorrectly accepted in all compatibility modes.", "author": "katzyn", "createdAt": "2020-03-09T14:40:32Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7883,6 +7886,11 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             read();\n             return new NoOperation(session);\n+        } else if (readIf(\"JOIN_COLLAPSE_LIMIT\")) {\n+            // for PostgreSQL compatibility\n+            readIfEqualOrTo();\n+            read();\n+            return new NoOperation(session);", "originalCommit": "a89eb8c64c986879699f0b683870e10f6c927c99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "chunk": "diff --git a/h2/src/main/org/h2/command/Parser.java b/h2/src/main/org/h2/command/Parser.java\nindex 9aefca7ae..cdaf17137 100644\n--- a/h2/src/main/org/h2/command/Parser.java\n+++ b/h2/src/main/org/h2/command/Parser.java\n\n@@ -7886,11 +7883,6 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             read();\n             return new NoOperation(session);\n-        } else if (readIf(\"JOIN_COLLAPSE_LIMIT\")) {\n-            // for PostgreSQL compatibility\n-            readIfEqualOrTo();\n-            read();\n-            return new NoOperation(session);\n         } else if (readIf(\"SCOPE_GENERATED_KEYS\")) {\n             readIfEqualOrTo();\n             read();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNjAxMg==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389736012", "bodyText": "Don't use Value.getObject() in functions, objects returned by it aren't required to return something useful from their toString() methods.\nFor this specific function getString() is a more reasonable method.\nThis function also needs some tests.", "author": "katzyn", "createdAt": "2020-03-09T14:44:20Z", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -235,6 +247,13 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n+            for (Value v : ((ValueArray) v0).getList()) {\n+                joiner.add(String.valueOf(v.getObject()));\n+            }", "originalCommit": "a89eb8c64c986879699f0b683870e10f6c927c99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "chunk": "diff --git a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\nindex c93f92661..698c75f42 100644\n--- a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n+++ b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n\n@@ -247,13 +241,6 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n-        case ARRAY_TO_STRING:\n-            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n-            for (Value v : ((ValueArray) v0).getList()) {\n-                joiner.add(String.valueOf(v.getObject()));\n-            }\n-            result = ValueVarchar.get(joiner.toString());\n-            break;\n         default:\n             throw DbException.throwInternalError(\"type=\" + info.type);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczOTI3MA==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389739270", "bodyText": "This expression has declared type INTEGER and may return only ValueNull.INSTANCE and instances of ValueInteger.\nYou can use convertToInt(null), but most likely the 32-bit unsigned values need special handling here to avoid NUMERIC_VALUE_OUT_OF_RANGE_2 error.", "author": "katzyn", "createdAt": "2020-03-09T14:49:04Z", "path": "h2/src/main/org/h2/mode/Regclass.java", "diffHunk": "@@ -39,6 +39,10 @@ public Value getValue(Session session) {\n         if (value == ValueNull.INSTANCE) {\n             return ValueNull.INSTANCE;\n         }\n+        int valueType = value.getValueType();\n+        if (valueType >= Value.TINYINT && valueType <= Value.BIGINT) {\n+            return value;\n+        }", "originalCommit": "a89eb8c64c986879699f0b683870e10f6c927c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MDUxNw==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390190517", "bodyText": "Can we just truncate to lower-32-bit INTEGER for BIGINT?\n        if (valueType >= Value.TINYINT && valueType <= Value.INTEGER) {\n            return value.convertToInt(null);\n        }\n        if (valueType == Value.BIGINT) {\n            return ValueInteger.get((int) value.getLong());\n        }", "author": "auntyellow", "createdAt": "2020-03-10T09:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczOTI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5ODAwNA==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390198004", "bodyText": "I think we can.", "author": "katzyn", "createdAt": "2020-03-10T09:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczOTI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "chunk": "diff --git a/h2/src/main/org/h2/mode/Regclass.java b/h2/src/main/org/h2/mode/Regclass.java\nindex 35d595021..0cb3bb817 100644\n--- a/h2/src/main/org/h2/mode/Regclass.java\n+++ b/h2/src/main/org/h2/mode/Regclass.java\n\n@@ -40,8 +40,11 @@ public Value getValue(Session session) {\n             return ValueNull.INSTANCE;\n         }\n         int valueType = value.getValueType();\n-        if (valueType >= Value.TINYINT && valueType <= Value.BIGINT) {\n-            return value;\n+        if (valueType >= Value.TINYINT && valueType <= Value.INTEGER) {\n+            return value.convertToInt(null);\n+        }\n+        if (valueType == Value.BIGINT) {\n+            return ValueInteger.get((int) value.getLong());\n         }\n         String name = value.getString();\n         ArrayList<Table> tables = session.getDatabase().getAllTablesAndViews(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0Mzk2NQ==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389743965", "bodyText": "You need to convert the type to Value.ARRAY first with v0.convertTo(TypeInfo.TYPE_ARRAY) or something like it.", "author": "katzyn", "createdAt": "2020-03-09T14:55:44Z", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -235,6 +247,13 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n+            for (Value v : ((ValueArray) v0).getList()) {", "originalCommit": "a89eb8c64c986879699f0b683870e10f6c927c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MzQ3Nw==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390283477", "bodyText": "array_to_string is removed from this PR", "author": "auntyellow", "createdAt": "2020-03-10T12:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0Mzk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "chunk": "diff --git a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\nindex c93f92661..698c75f42 100644\n--- a/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n+++ b/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java\n\n@@ -247,13 +241,6 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n-        case ARRAY_TO_STRING:\n-            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n-            for (Value v : ((ValueArray) v0).getList()) {\n-                joiner.add(String.valueOf(v.getObject()));\n-            }\n-            result = ValueVarchar.get(joiner.toString());\n-            break;\n         default:\n             throw DbException.throwInternalError(\"type=\" + info.type);\n         }\n"}}, {"oid": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "url": "https://github.com/h2database/h2database/commit/34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\ncolumn \"pg_roles\".\"rolsuper\"\ntype cast `::oid`\n<integer>::regclass should return integer\nfunction has_schema_privilege()", "committedDate": "2020-03-10T12:29:25Z", "type": "commit"}, {"oid": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "url": "https://github.com/h2database/h2database/commit/34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\ncolumn \"pg_roles\".\"rolsuper\"\ntype cast `::oid`\n<integer>::regclass should return integer\nfunction has_schema_privilege()", "committedDate": "2020-03-10T12:29:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNjE1MQ==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390306151", "bodyText": "::regclass and ::oid are different things in PostgreSQL and this additional condition doesn't look like a proper implementation.\nH2 has an incorrect mapping for OID data type to a BLOB in DataType class. I think this mapping should be removed from it (and from help.csv), and a new mapping to INTEGER should be created in the Mode class.\ndt = DataType.getDataType(Value.INTEGER);\nmode.typeByNameMap.put(\"OID\", dt);\nWith such change ::oid will be processed just like any other type cast. Currently this cast is broken, because it tries to cast a numeric value to a BLOB.", "author": "katzyn", "createdAt": "2020-03-10T13:20:05Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -4721,7 +4721,7 @@ private Expression readTerm() {\n                     read(\"PG_CATALOG\");\n                     read(DOT);\n                 }\n-                if (readIf(\"REGCLASS\")) {\n+                if (readIf(\"REGCLASS\") || readIf(\"OID\")) {", "originalCommit": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MzQwNw==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390373407", "bodyText": "This really works :-)", "author": "auntyellow", "createdAt": "2020-03-10T14:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNjE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "51e03a62506567d68de6e82d924c3431eb75c6e2", "chunk": "diff --git a/h2/src/main/org/h2/command/Parser.java b/h2/src/main/org/h2/command/Parser.java\nindex cdaf17137..2ccdc36f9 100644\n--- a/h2/src/main/org/h2/command/Parser.java\n+++ b/h2/src/main/org/h2/command/Parser.java\n\n@@ -4721,7 +4721,7 @@ private Expression readTerm() {\n                     read(\"PG_CATALOG\");\n                     read(DOT);\n                 }\n-                if (readIf(\"REGCLASS\") || readIf(\"OID\")) {\n+                if (readIf(\"REGCLASS\")) {\n                     r = new Regclass(r);\n                     break colonColon;\n                 }\n"}}, {"oid": "51e03a62506567d68de6e82d924c3431eb75c6e2", "url": "https://github.com/h2database/h2database/commit/51e03a62506567d68de6e82d924c3431eb75c6e2", "message": "map OID to INTEGER", "committedDate": "2020-03-10T14:29:54Z", "type": "commit"}]}