{"pr_number": 2476, "pr_title": "Add some PostgreSQL compatibility features mentioned in issue #2450", "pr_createdAt": "2020-03-02T04:24:20Z", "pr_url": "https://github.com/h2database/h2database/pull/2476", "timeline": [{"oid": "323d4749656b2f6888dba32916c42662fe0f43c4", "url": "https://github.com/h2database/h2database/commit/323d4749656b2f6888dba32916c42662fe0f43c4", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\nSET search_path TO 'public', '$user' (single quote supported)\nfunction pg_table_is_visible()", "committedDate": "2020-03-02T06:37:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNjUwMg==", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386226502", "bodyText": "All PostgreSQL-specific logic here should be restricted to PostgreSQL compatibility mode.", "author": "katzyn", "createdAt": "2020-03-02T07:14:16Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7866,9 +7866,29 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n+            boolean hasPgCatalog = false;\n             do {\n-                list.add(readAliasIdentifier());\n+                // some PG clients will send single-quoted alias\n+                String s = currentTokenType == LITERAL ?\n+                        readString() : readAliasIdentifier();\n+                if (\"$USER\".equalsIgnoreCase(s)) {\n+                    continue;\n+                }\n+                if (\"PG_CATALOG\".equalsIgnoreCase(s)) {\n+                    hasPgCatalog = true;\n+                }\n+                list.add(s);\n             } while (readIf(COMMA));\n+            // for PostgreSQL compatibility\n+            // If \"pg_catalog\" is not in the path then it will be searched before\n+            // searching any of the path items. See\n+            // https://www.postgresql.org/docs/8.2/runtime-config-client.html\n+            if (!hasPgCatalog) {\n+                String pgCatalog = database.sysIdentifier(\"PG_CATALOG\");\n+                if (database.findSchema(pgCatalog) != null) {\n+                    list.add(0, pgCatalog);\n+                }\n+            }", "originalCommit": "323d4749656b2f6888dba32916c42662fe0f43c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzMjM5OA==", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386332398", "bodyText": "fixed", "author": "auntyellow", "createdAt": "2020-03-02T11:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNjUwMg=="}], "type": "inlineReview", "revised_code": {"commit": "3988c6502f4837fe2dd07d95a57950ec7832c63a", "chunk": "diff --git a/h2/src/main/org/h2/command/Parser.java b/h2/src/main/org/h2/command/Parser.java\nindex 302b0055c..33039f879 100644\n--- a/h2/src/main/org/h2/command/Parser.java\n+++ b/h2/src/main/org/h2/command/Parser.java\n\n@@ -7866,28 +7866,33 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n-            boolean hasPgCatalog = false;\n-            do {\n-                // some PG clients will send single-quoted alias\n-                String s = currentTokenType == LITERAL ?\n-                        readString() : readAliasIdentifier();\n-                if (\"$USER\".equalsIgnoreCase(s)) {\n-                    continue;\n-                }\n-                if (\"PG_CATALOG\".equalsIgnoreCase(s)) {\n-                    hasPgCatalog = true;\n-                }\n-                list.add(s);\n-            } while (readIf(COMMA));\n-            // for PostgreSQL compatibility\n-            // If \"pg_catalog\" is not in the path then it will be searched before\n-            // searching any of the path items. See\n-            // https://www.postgresql.org/docs/8.2/runtime-config-client.html\n-            if (!hasPgCatalog) {\n-                String pgCatalog = database.sysIdentifier(\"PG_CATALOG\");\n-                if (database.findSchema(pgCatalog) != null) {\n-                    list.add(0, pgCatalog);\n+            if (database.getMode().getEnum() == Mode.ModeEnum.PostgreSQL) {\n+                boolean hasPgCatalog = false;\n+                do {\n+                    // some PG clients will send single-quoted alias\n+                    String s = currentTokenType == LITERAL ?\n+                            readString() : readAliasIdentifier();\n+                    if (\"$USER\".equalsIgnoreCase(s)) {\n+                        continue;\n+                    }\n+                    if (\"PG_CATALOG\".equalsIgnoreCase(s)) {\n+                        hasPgCatalog = true;\n+                    }\n+                    list.add(s);\n+                } while (readIf(COMMA));\n+                // If \"pg_catalog\" is not in the path then it will be searched before\n+                // searching any of the path items. See\n+                // https://www.postgresql.org/docs/8.2/runtime-config-client.html\n+                if (!hasPgCatalog) {\n+                    String pgCatalog = database.sysIdentifier(\"PG_CATALOG\");\n+                    if (database.findSchema(pgCatalog) != null) {\n+                        list.add(0, pgCatalog);\n+                    }\n                 }\n+            } else {\n+                do {\n+                    list.add(readAliasIdentifier());\n+                } while (readIf(COMMA));\n             }\n             command.setStringArray(list.toArray(new String[0]));\n             return command;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNjgxNw==", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386226817", "bodyText": "Please, remove this commented out code.", "author": "katzyn", "createdAt": "2020-03-02T07:15:34Z", "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -666,6 +666,35 @@ private void testOtherPgClients() throws SQLException {\n                     \"WHERE \\\"n\\\".\\\"nspname\\\"='public';\")) {\n                 assertFalse(rs.next()); // \"pg_proc\" always empty\n             }\n+            try (ResultSet rs = stat.executeQuery(\"SELECT DISTINCT a.attname AS column_name, \" +\n+                    \"a.attnum, a.atttypid, FORMAT_TYPE(a.atttypid, a.atttypmod) AS data_type, \" +\n+                    \"CASE a.attnotnull WHEN false THEN 'YES' ELSE 'NO' END AS IS_NULLABLE, \" +\n+                    \"com.description AS column_comment, pg_get_expr(def.adbin, def.adrelid) AS column_default, \" +\n+                    \"NULL AS character_maximum_length FROM pg_attribute AS a \" +\n+                    \"JOIN pg_class AS pgc ON pgc.oid = a.attrelid \" +\n+                    \"LEFT JOIN pg_description AS com ON (pgc.oid = com.objoid AND a.attnum = com.objsubid) \" +\n+                    \"LEFT JOIN pg_attrdef AS def ON (a.attrelid = def.adrelid AND a.attnum = def.adnum) \" +\n+                    \"WHERE a.attnum > 0 AND pgc.oid = a.attrelid AND pg_table_is_visible(pgc.oid) \" +\n+                    \"AND NOT a.attisdropped AND pgc.relname = 'test' ORDER BY a.attnum\")) {\n+                assertTrue(rs.next());\n+                assertEquals(\"id\", rs.getString(\"column_name\"));\n+                assertTrue(rs.next());\n+                assertEquals(\"x1\", rs.getString(\"column_name\"));\n+                assertFalse(rs.next());\n+            }\n+            /* TODO\n+            try (ResultSet rs = stat.executeQuery(\"SELECT \\\"c\\\".\\\"conname\\\" AS \\\"CONSTRAINT_NAME\\\", \" +", "originalCommit": "323d4749656b2f6888dba32916c42662fe0f43c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzMjI1Mw==", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386332253", "bodyText": "removed", "author": "auntyellow", "createdAt": "2020-03-02T11:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNjgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "3988c6502f4837fe2dd07d95a57950ec7832c63a", "chunk": "diff --git a/h2/src/test/org/h2/test/unit/TestPgServer.java b/h2/src/test/org/h2/test/unit/TestPgServer.java\nindex 85f87db3a..63735e54b 100644\n--- a/h2/src/test/org/h2/test/unit/TestPgServer.java\n+++ b/h2/src/test/org/h2/test/unit/TestPgServer.java\n\n@@ -682,19 +682,6 @@ private void testOtherPgClients() throws SQLException {\n                 assertEquals(\"x1\", rs.getString(\"column_name\"));\n                 assertFalse(rs.next());\n             }\n-            /* TODO\n-            try (ResultSet rs = stat.executeQuery(\"SELECT \\\"c\\\".\\\"conname\\\" AS \\\"CONSTRAINT_NAME\\\", \" +\n-                    \"CASE \\\"c\\\".\\\"contype\\\" WHEN 'c' THEN 'CHECK' WHEN 'f' THEN 'FOREIGN KEY' \" +\n-                    \"WHEN 'p' THEN 'PRIMARY KEY' WHEN 'u' THEN 'UNIQUE' END AS \\\"CONSTRAINT_TYPE\\\", \" +\n-                    \"\\\"a\\\".\\\"attname\\\" AS \\\"COLUMN_NAME\\\" FROM \\\"pg_constraint\\\" AS \\\"c\\\" \" +\n-                    \"LEFT JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"c\\\".\\\"conrelid\\\"=\\\"t\\\".\\\"oid\\\" \" +\n-                    \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"t\\\".\\\"oid\\\"=\\\"a\\\".\\\"attrelid\\\" \" +\n-                    \"LEFT JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"t\\\".\\\"relnamespace\\\"=\\\"n\\\".\\\"oid\\\" \" +\n-                    \"WHERE c.contype IN ('p', 'u') AND \\\"a\\\".\\\"attnum\\\"=ANY(\\\"c\\\".\\\"conkey\\\") \" +\n-                    \"AND \\\"n\\\".\\\"nspname\\\"='public' AND \\\"t\\\".\\\"relname\\\"='test' \" +\n-                    \"ORDER BY \\\"a\\\".\\\"attnum\\\"\")) {\n-            }\n-            */\n         } finally {\n             server.stop();\n             conn0.close();\n"}}, {"oid": "3988c6502f4837fe2dd07d95a57950ec7832c63a", "url": "https://github.com/h2database/h2database/commit/3988c6502f4837fe2dd07d95a57950ec7832c63a", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\nSET search_path TO 'public', '$user' (single quote supported)\nfunction pg_table_is_visible()", "committedDate": "2020-03-02T10:21:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDI5MQ==", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386334291", "bodyText": "PostgreSQL treats only lowercase $user in the special way.", "author": "katzyn", "createdAt": "2020-03-02T11:18:00Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7866,9 +7866,34 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n-            do {\n-                list.add(readAliasIdentifier());\n-            } while (readIf(COMMA));\n+            if (database.getMode().getEnum() == Mode.ModeEnum.PostgreSQL) {\n+                boolean hasPgCatalog = false;\n+                do {\n+                    // some PG clients will send single-quoted alias\n+                    String s = currentTokenType == LITERAL ?\n+                            readString() : readAliasIdentifier();\n+                    if (\"$USER\".equalsIgnoreCase(s)) {", "originalCommit": "3988c6502f4837fe2dd07d95a57950ec7832c63a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2942d319d689846ec4c32897c7ae820140641c94", "chunk": "diff --git a/h2/src/main/org/h2/command/Parser.java b/h2/src/main/org/h2/command/Parser.java\nindex 33039f879..c5a1af50f 100644\n--- a/h2/src/main/org/h2/command/Parser.java\n+++ b/h2/src/main/org/h2/command/Parser.java\n\n@@ -7867,15 +7867,17 @@ private Prepared parseSet() {\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n             if (database.getMode().getEnum() == Mode.ModeEnum.PostgreSQL) {\n+                String dollarUser = database.sysIdentifier(\"$USER\");\n+                String pgCatalog = database.sysIdentifier(\"PG_CATALOG\");\n                 boolean hasPgCatalog = false;\n                 do {\n                     // some PG clients will send single-quoted alias\n                     String s = currentTokenType == LITERAL ?\n                             readString() : readAliasIdentifier();\n-                    if (\"$USER\".equalsIgnoreCase(s)) {\n+                    if (dollarUser.equals(s)) {\n                         continue;\n                     }\n-                    if (\"PG_CATALOG\".equalsIgnoreCase(s)) {\n+                    if (pgCatalog.equals(s)) {\n                         hasPgCatalog = true;\n                     }\n                     list.add(s);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNjU0Nw==", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386336547", "bodyText": "I think you need to check for exact name here too. The real PostgreSQL does not process its own pg_catalog before specified schemas only when pg_catalog is specified in the proper case in the search path.\npgCatalog.equals(s)", "author": "katzyn", "createdAt": "2020-03-02T11:23:15Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7866,9 +7866,34 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n-            do {\n-                list.add(readAliasIdentifier());\n-            } while (readIf(COMMA));\n+            if (database.getMode().getEnum() == Mode.ModeEnum.PostgreSQL) {\n+                boolean hasPgCatalog = false;\n+                do {\n+                    // some PG clients will send single-quoted alias\n+                    String s = currentTokenType == LITERAL ?\n+                            readString() : readAliasIdentifier();\n+                    if (\"$USER\".equalsIgnoreCase(s)) {\n+                        continue;\n+                    }\n+                    if (\"PG_CATALOG\".equalsIgnoreCase(s)) {", "originalCommit": "3988c6502f4837fe2dd07d95a57950ec7832c63a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyNDMzMg==", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386424332", "bodyText": "I tested on real PG and a schema with upper-case PG_CATALOG can be created, which can miss really lower-case pg_catalog if use case-insensitive check.\nI think database.sysIdentifier(\"$USER\") and database.sysIdentifier(\"PG_CATALOG\") might work well in this special senario.", "author": "auntyellow", "createdAt": "2020-03-02T14:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNjU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzMzcxNg==", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386433716", "bodyText": "Of course in can be created in both PostgreSQL and H2. These databases are case-sensitive. (Case sensitivity of H2 is actually configurable, but this feature should not be used in PostgreSQL compatibility mode.) database.sysIdentifier(\"PG_CATALOG\") should be fine.\nBut $user should be simply hardcoded in lower case, it's not a schema name and the real PostgreSQL does not treat it in special way in any other case.", "author": "katzyn", "createdAt": "2020-03-02T14:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNjU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1MDgwNQ==", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386750805", "bodyText": "Fixed. And, database.sysIdentifier(\"$USER\") cannot pass test (with -ea VM option) :-P", "author": "auntyellow", "createdAt": "2020-03-03T01:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNjU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2942d319d689846ec4c32897c7ae820140641c94", "chunk": "diff --git a/h2/src/main/org/h2/command/Parser.java b/h2/src/main/org/h2/command/Parser.java\nindex 33039f879..c5a1af50f 100644\n--- a/h2/src/main/org/h2/command/Parser.java\n+++ b/h2/src/main/org/h2/command/Parser.java\n\n@@ -7867,15 +7867,17 @@ private Prepared parseSet() {\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n             if (database.getMode().getEnum() == Mode.ModeEnum.PostgreSQL) {\n+                String dollarUser = database.sysIdentifier(\"$USER\");\n+                String pgCatalog = database.sysIdentifier(\"PG_CATALOG\");\n                 boolean hasPgCatalog = false;\n                 do {\n                     // some PG clients will send single-quoted alias\n                     String s = currentTokenType == LITERAL ?\n                             readString() : readAliasIdentifier();\n-                    if (\"$USER\".equalsIgnoreCase(s)) {\n+                    if (dollarUser.equals(s)) {\n                         continue;\n                     }\n-                    if (\"PG_CATALOG\".equalsIgnoreCase(s)) {\n+                    if (pgCatalog.equals(s)) {\n                         hasPgCatalog = true;\n                     }\n                     list.add(s);\n"}}, {"oid": "2942d319d689846ec4c32897c7ae820140641c94", "url": "https://github.com/h2database/h2database/commit/2942d319d689846ec4c32897c7ae820140641c94", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\nSET search_path TO 'public', '$user' (single quote supported)\nfunction pg_table_is_visible()", "committedDate": "2020-03-02T14:19:23Z", "type": "forcePushed"}, {"oid": "95b338cdeb2886f78e4ed8ad9adc6afd38acbcc7", "url": "https://github.com/h2database/h2database/commit/95b338cdeb2886f78e4ed8ad9adc6afd38acbcc7", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\nSET search_path TO 'public', '$user' (single quote supported)\nfunction pg_table_is_visible()", "committedDate": "2020-03-03T01:16:48Z", "type": "commit"}, {"oid": "95b338cdeb2886f78e4ed8ad9adc6afd38acbcc7", "url": "https://github.com/h2database/h2database/commit/95b338cdeb2886f78e4ed8ad9adc6afd38acbcc7", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\nSET search_path TO 'public', '$user' (single quote supported)\nfunction pg_table_is_visible()", "committedDate": "2020-03-03T01:16:48Z", "type": "forcePushed"}]}