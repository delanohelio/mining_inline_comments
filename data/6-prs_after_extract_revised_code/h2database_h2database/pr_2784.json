{"pr_number": 2784, "pr_title": "Oracle REGEXP_REPLACE support", "pr_createdAt": "2020-07-30T10:19:26Z", "pr_url": "https://github.com/h2database/h2database/pull/2784", "timeline": [{"oid": "20ce1eed562c4235b7bd9ca560f2037dddda3469", "url": "https://github.com/h2database/h2database/commit/20ce1eed562c4235b7bd9ca560f2037dddda3469", "message": "Added Oracle REGEXP_REPLACE support\nAdded possibility to override functions in mode-specific classes", "committedDate": "2020-07-30T11:27:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyOTAxNg==", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462929016", "bodyText": "You can simply compare result of getString() with null, there is no need to check value type.", "author": "katzyn", "createdAt": "2020-07-30T11:23:44Z", "path": "h2/src/main/org/h2/mode/FunctionsOracle.java", "diffHunk": "@@ -128,10 +142,40 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n         case TO_TIMESTAMP_TZ:\n             result = ToDateParser.toTimestampTz(session, v0.getString(), v1 == null ? null : v1.getString());\n             break;\n+        case REGEXP_REPLACE:\n+            Boolean replaceBackslashRefs = session.getMode().regexpReplaceBackslashReferences;\n+            String regexpResult = regexpReplace(replaceBackslashRefs, v0, v1, v2, v3, v4, v5);\n+            result = ValueVarchar.get(regexpResult, session);\n+            break;\n         default:\n             throw DbException.throwInternalError(\"type=\" + info.type);\n         }\n         return result;\n     }\n \n+    private static String regexpReplace(Boolean replaceBackslashRefs, Value ... args) {\n+        String input = args[0].getString();\n+        String regexp = args[1].getValueType() != Value.NULL ? args[1].getString() : \"\";", "originalCommit": "c45412fc8001d4274cfab99655a59ee64ea58fb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b3f13f4b9e9884cf846b9d953f16c8d13b82109", "chunk": "diff --git a/h2/src/main/org/h2/mode/FunctionsOracle.java b/h2/src/main/org/h2/mode/FunctionsOracle.java\nindex 260e6e5f9..cade3ffff 100644\n--- a/h2/src/main/org/h2/mode/FunctionsOracle.java\n+++ b/h2/src/main/org/h2/mode/FunctionsOracle.java\n\n@@ -142,40 +128,10 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n         case TO_TIMESTAMP_TZ:\n             result = ToDateParser.toTimestampTz(session, v0.getString(), v1 == null ? null : v1.getString());\n             break;\n-        case REGEXP_REPLACE:\n-            Boolean replaceBackslashRefs = session.getMode().regexpReplaceBackslashReferences;\n-            String regexpResult = regexpReplace(replaceBackslashRefs, v0, v1, v2, v3, v4, v5);\n-            result = ValueVarchar.get(regexpResult, session);\n-            break;\n         default:\n             throw DbException.throwInternalError(\"type=\" + info.type);\n         }\n         return result;\n     }\n \n-    private static String regexpReplace(Boolean replaceBackslashRefs, Value ... args) {\n-        String input = args[0].getString();\n-        String regexp = args[1].getValueType() != Value.NULL ? args[1].getString() : \"\";\n-        String replacement = args[2].getValueType() != Value.NULL ? args[2].getString() : \"\";\n-        if (replaceBackslashRefs) {\n-            replacement = StringUtils.replaceBackslashReferences(replacement);\n-        }\n-        int position = 1;\n-        int occurrence = 0;\n-        String regexpMode = \"\";\n-\n-        if (args[3] != null) {\n-            if (args[3].getValueType() == Value.VARCHAR) {\n-                regexpMode = args[3].getString() == null ? args[3].getString() : \"\";\n-            } else if (args[3].getValueType() == Value.INTEGER) {\n-                position = args[3].getInt();\n-                occurrence = args[4] != null ? args[4].getInt() : 0;\n-                regexpMode = args[5] != null && args[5].getValueType() != Value.NULL ? args[5].getString() : \"\";\n-            }\n-        }\n-        int flags = StringUtils.makeRegexpFlags(regexpMode, false);\n-        return StringUtils.regexpReplace(input, regexp, replacement, position, occurrence,\n-                flags);\n-    }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyOTcyOQ==", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462929729", "bodyText": "What are you trying to do here? Fourth argument may only be integer in Oracle, or I'm missing something?", "author": "katzyn", "createdAt": "2020-07-30T11:25:12Z", "path": "h2/src/main/org/h2/mode/FunctionsOracle.java", "diffHunk": "@@ -128,10 +142,40 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n         case TO_TIMESTAMP_TZ:\n             result = ToDateParser.toTimestampTz(session, v0.getString(), v1 == null ? null : v1.getString());\n             break;\n+        case REGEXP_REPLACE:\n+            Boolean replaceBackslashRefs = session.getMode().regexpReplaceBackslashReferences;\n+            String regexpResult = regexpReplace(replaceBackslashRefs, v0, v1, v2, v3, v4, v5);\n+            result = ValueVarchar.get(regexpResult, session);\n+            break;\n         default:\n             throw DbException.throwInternalError(\"type=\" + info.type);\n         }\n         return result;\n     }\n \n+    private static String regexpReplace(Boolean replaceBackslashRefs, Value ... args) {\n+        String input = args[0].getString();\n+        String regexp = args[1].getValueType() != Value.NULL ? args[1].getString() : \"\";\n+        String replacement = args[2].getValueType() != Value.NULL ? args[2].getString() : \"\";\n+        if (replaceBackslashRefs) {\n+            replacement = StringUtils.replaceBackslashReferences(replacement);\n+        }\n+        int position = 1;\n+        int occurrence = 0;\n+        String regexpMode = \"\";\n+\n+        if (args[3] != null) {\n+            if (args[3].getValueType() == Value.VARCHAR) {\n+                regexpMode = args[3].getString() == null ? args[3].getString() : \"\";\n+            } else if (args[3].getValueType() == Value.INTEGER) {", "originalCommit": "c45412fc8001d4274cfab99655a59ee64ea58fb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzNTYwMg==", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462935602", "bodyText": "in oracle - yes. I was trying to not break the logic if someone relies on default h2 regexp_replace logic in oracle mode", "author": "RomanBoyars", "createdAt": "2020-07-30T11:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyOTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MTAxMg==", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462941012", "bodyText": "We don't provide that level of backward compatibility for compatibility modes.", "author": "katzyn", "createdAt": "2020-07-30T11:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyOTcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4b3f13f4b9e9884cf846b9d953f16c8d13b82109", "chunk": "diff --git a/h2/src/main/org/h2/mode/FunctionsOracle.java b/h2/src/main/org/h2/mode/FunctionsOracle.java\nindex 260e6e5f9..cade3ffff 100644\n--- a/h2/src/main/org/h2/mode/FunctionsOracle.java\n+++ b/h2/src/main/org/h2/mode/FunctionsOracle.java\n\n@@ -142,40 +128,10 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n         case TO_TIMESTAMP_TZ:\n             result = ToDateParser.toTimestampTz(session, v0.getString(), v1 == null ? null : v1.getString());\n             break;\n-        case REGEXP_REPLACE:\n-            Boolean replaceBackslashRefs = session.getMode().regexpReplaceBackslashReferences;\n-            String regexpResult = regexpReplace(replaceBackslashRefs, v0, v1, v2, v3, v4, v5);\n-            result = ValueVarchar.get(regexpResult, session);\n-            break;\n         default:\n             throw DbException.throwInternalError(\"type=\" + info.type);\n         }\n         return result;\n     }\n \n-    private static String regexpReplace(Boolean replaceBackslashRefs, Value ... args) {\n-        String input = args[0].getString();\n-        String regexp = args[1].getValueType() != Value.NULL ? args[1].getString() : \"\";\n-        String replacement = args[2].getValueType() != Value.NULL ? args[2].getString() : \"\";\n-        if (replaceBackslashRefs) {\n-            replacement = StringUtils.replaceBackslashReferences(replacement);\n-        }\n-        int position = 1;\n-        int occurrence = 0;\n-        String regexpMode = \"\";\n-\n-        if (args[3] != null) {\n-            if (args[3].getValueType() == Value.VARCHAR) {\n-                regexpMode = args[3].getString() == null ? args[3].getString() : \"\";\n-            } else if (args[3].getValueType() == Value.INTEGER) {\n-                position = args[3].getInt();\n-                occurrence = args[4] != null ? args[4].getInt() : 0;\n-                regexpMode = args[5] != null && args[5].getValueType() != Value.NULL ? args[5].getString() : \"\";\n-            }\n-        }\n-        int flags = StringUtils.makeRegexpFlags(regexpMode, false);\n-        return StringUtils.regexpReplace(input, regexp, replacement, position, occurrence,\n-                flags);\n-    }\n-\n }\n"}}, {"oid": "4b3f13f4b9e9884cf846b9d953f16c8d13b82109", "url": "https://github.com/h2database/h2database/commit/4b3f13f4b9e9884cf846b9d953f16c8d13b82109", "message": "Added Oracle REGEXP_REPLACE support", "committedDate": "2020-07-30T12:06:22Z", "type": "forcePushed"}, {"oid": "37ea132f0b85c245548b26cfda55e3fce4a32b86", "url": "https://github.com/h2database/h2database/commit/37ea132f0b85c245548b26cfda55e3fce4a32b86", "message": "Added Oracle REGEXP_REPLACE support", "committedDate": "2020-07-30T12:11:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1NjgyMA==", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462956820", "bodyText": "Use == instead of equals() for enumerations.", "author": "katzyn", "createdAt": "2020-07-30T12:22:13Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -776,8 +776,20 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n             String input = v0.getString();\n             String regexp = v1.getString();\n             String replacement = v2.getString();\n-            String regexpMode = v3 != null ? v3.getString() : null;\n-            result = regexpReplace(session, input, regexp, replacement, regexpMode);\n+\n+            if (ModeEnum.Oracle.equals(session.getMode().getEnum())) {", "originalCommit": "37ea132f0b85c245548b26cfda55e3fce4a32b86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex 6ce3bc125..b30964b4a 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -774,21 +774,29 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n         }\n         case REGEXP_REPLACE: {\n             String input = v0.getString();\n-            String regexp = v1.getString();\n-            String replacement = v2.getString();\n-\n-            if (ModeEnum.Oracle.equals(session.getMode().getEnum())) {\n-                if (replacement == null) {\n-                    replacement = \"\";\n+            if (ModeEnum.Oracle == session.getMode().getEnum()) {\n+                if (input == null) {\n+                    result = ValueNull.INSTANCE;\n+                } else {\n+                    String regexp = v1.getString() != null ? v1.getString() : \"\";\n+                    String replacement = v2.getString() != null ? v2.getString() : \"\";\n+                    int position = v3 != null ? v3.getInt() : 1;\n+                    int occurrence = v4 != null ? v4.getInt() : 0;\n+                    String regexpMode = v5 != null ? v5.getString() : null;\n+                    result = regexpReplace(session, input, regexp, replacement, position, occurrence, regexpMode);\n                 }\n-                int position = v3 != null ? v3.getInt() : 1;\n-                int occurrence = v4 != null ? v4.getInt() : 0;\n-                String regexpMode = v5 != null ? v5.getString() : null;\n-                result = regexpReplace(session, input, regexp, replacement, position, occurrence,\n-                        regexpMode);\n             } else {\n-                String regexpMode = v3 != null ? v3.getString() : null;\n-                result = regexpReplace(session, input, regexp, replacement, 1, 0, regexpMode);\n+                if (v4 != null) {\n+                    throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2, info.name, \"3..4\");\n+                }\n+                if (v0 == ValueNull.INSTANCE || v1 == ValueNull.INSTANCE || v2 == ValueNull.INSTANCE || v3 == ValueNull.INSTANCE) {\n+                    result = ValueNull.INSTANCE;\n+                } else {\n+                    String regexp = v1.getString();\n+                    String replacement = v2.getString();\n+                    String regexpMode = v3 != null ? v3.getString() : null;\n+                    result = regexpReplace(session, input, regexp, replacement, 1, 0, regexpMode);\n+                }\n             }\n             break;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1OTEzNQ==", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462959135", "bodyText": "if (v4 != null) {\n    throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2, info.name, \"3..4\");\n}\nif (v0 == ValueNull.INSTANCE || v1 == ValueNull.INSTANCE || v2 == ValueNull.INSTANCE || v3 == ValueNull.INSTANCE) {\n    result = ValueNull.INSTANCE;\n} else {\n    \u2026\n}", "author": "katzyn", "createdAt": "2020-07-30T12:26:37Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -776,8 +776,20 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n             String input = v0.getString();\n             String regexp = v1.getString();\n             String replacement = v2.getString();\n-            String regexpMode = v3 != null ? v3.getString() : null;\n-            result = regexpReplace(session, input, regexp, replacement, regexpMode);\n+\n+            if (ModeEnum.Oracle.equals(session.getMode().getEnum())) {\n+                if (replacement == null) {\n+                    replacement = \"\";\n+                }\n+                int position = v3 != null ? v3.getInt() : 1;\n+                int occurrence = v4 != null ? v4.getInt() : 0;\n+                String regexpMode = v5 != null ? v5.getString() : null;\n+                result = regexpReplace(session, input, regexp, replacement, position, occurrence,\n+                        regexpMode);\n+            } else {\n+                String regexpMode = v3 != null ? v3.getString() : null;", "originalCommit": "37ea132f0b85c245548b26cfda55e3fce4a32b86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex 6ce3bc125..b30964b4a 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -774,21 +774,29 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n         }\n         case REGEXP_REPLACE: {\n             String input = v0.getString();\n-            String regexp = v1.getString();\n-            String replacement = v2.getString();\n-\n-            if (ModeEnum.Oracle.equals(session.getMode().getEnum())) {\n-                if (replacement == null) {\n-                    replacement = \"\";\n+            if (ModeEnum.Oracle == session.getMode().getEnum()) {\n+                if (input == null) {\n+                    result = ValueNull.INSTANCE;\n+                } else {\n+                    String regexp = v1.getString() != null ? v1.getString() : \"\";\n+                    String replacement = v2.getString() != null ? v2.getString() : \"\";\n+                    int position = v3 != null ? v3.getInt() : 1;\n+                    int occurrence = v4 != null ? v4.getInt() : 0;\n+                    String regexpMode = v5 != null ? v5.getString() : null;\n+                    result = regexpReplace(session, input, regexp, replacement, position, occurrence, regexpMode);\n                 }\n-                int position = v3 != null ? v3.getInt() : 1;\n-                int occurrence = v4 != null ? v4.getInt() : 0;\n-                String regexpMode = v5 != null ? v5.getString() : null;\n-                result = regexpReplace(session, input, regexp, replacement, position, occurrence,\n-                        regexpMode);\n             } else {\n-                String regexpMode = v3 != null ? v3.getString() : null;\n-                result = regexpReplace(session, input, regexp, replacement, 1, 0, regexpMode);\n+                if (v4 != null) {\n+                    throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2, info.name, \"3..4\");\n+                }\n+                if (v0 == ValueNull.INSTANCE || v1 == ValueNull.INSTANCE || v2 == ValueNull.INSTANCE || v3 == ValueNull.INSTANCE) {\n+                    result = ValueNull.INSTANCE;\n+                } else {\n+                    String regexp = v1.getString();\n+                    String replacement = v2.getString();\n+                    String regexpMode = v3 != null ? v3.getString() : null;\n+                    result = regexpReplace(session, input, regexp, replacement, 1, 0, regexpMode);\n+                }\n             }\n             break;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1OTU1MQ==", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462959551", "bodyText": "Please, indent wrapped lines with 8 additional spaces. Don't align arguments, such alignment breaks code style checks.", "author": "katzyn", "createdAt": "2020-07-30T12:27:24Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1513,8 +1525,9 @@ private static MessageDigest hashImpl(Value value, MessageDigest md) {\n         }\n     }\n \n-    private static Value regexpReplace(SessionLocal session, String input, String regexp, String replacement,\n-            String regexpMode) {\n+    private static Value regexpReplace(SessionLocal session, String input, String regexp,\n+                                       String replacement, int position, int occurrence,\n+                                       String regexpMode) {", "originalCommit": "37ea132f0b85c245548b26cfda55e3fce4a32b86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex 6ce3bc125..b30964b4a 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1526,8 +1534,7 @@ private static MessageDigest hashImpl(Value value, MessageDigest md) {\n     }\n \n     private static Value regexpReplace(SessionLocal session, String input, String regexp,\n-                                       String replacement, int position, int occurrence,\n-                                       String regexpMode) {\n+            String replacement, int position, int occurrence, String regexpMode) {\n         Mode mode = session.getMode();\n         if (mode.regexpReplaceBackslashReferences) {\n             if ((replacement.indexOf('\\\\') >= 0) || (replacement.indexOf('$') >= 0)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2OTc0OA==", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462969748", "bodyText": "I guess you need to check result of find() method.", "author": "katzyn", "createdAt": "2020-07-30T12:46:14Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,11 +1547,21 @@ private static Value regexpReplace(SessionLocal session, String input, String re\n         }\n         boolean isInPostgreSqlMode = Mode.ModeEnum.PostgreSQL.equals(mode.getEnum());\n         int flags = makeRegexpFlags(regexpMode, isInPostgreSqlMode);\n+        if (isInPostgreSqlMode && ( regexpMode == null || regexpMode.isEmpty() || !regexpMode.contains(\"g\"))) {\n+            occurrence = 1;\n+        }\n         try {\n-            Matcher matcher = Pattern.compile(regexp, flags).matcher(input);\n-            return ValueVarchar.get(isInPostgreSqlMode && (regexpMode == null || regexpMode.indexOf('g') < 0) ?\n-                    matcher.replaceFirst(replacement) : matcher.replaceAll(replacement),\n-                    session);\n+            Matcher matcher = Pattern.compile(regexp, flags).matcher(input).region(position - 1, input.length());\n+            if (occurrence == 0) {\n+                return ValueVarchar.get(matcher.replaceAll(replacement), session);\n+            } else {\n+                for(int i = 0; i < occurrence; i++) {\n+                    matcher.find();", "originalCommit": "37ea132f0b85c245548b26cfda55e3fce4a32b86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex 6ce3bc125..b30964b4a 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1555,12 +1562,16 @@ private static Value regexpReplace(SessionLocal session, String input, String re\n             if (occurrence == 0) {\n                 return ValueVarchar.get(matcher.replaceAll(replacement), session);\n             } else {\n-                for(int i = 0; i < occurrence; i++) {\n-                    matcher.find();\n+                StringBuffer sb = new StringBuffer();\n+                int index = 1;\n+                while (matcher.find()) {\n+                    if (index == occurrence) {\n+                        matcher.appendReplacement(sb, replacement);\n+                    }\n+                    index++;\n                 }\n-                int startIndex = matcher.start();\n-                return ValueVarchar.get(input.substring(0, startIndex) + input.substring(startIndex).replaceFirst(regexp,\n-                        replacement), session);\n+                matcher.appendTail(sb);\n+                return ValueVarchar.get(sb.toString(), session);\n             }\n         } catch (PatternSyntaxException e) {\n             throw DbException.get(ErrorCode.LIKE_ESCAPE_ERROR_1, e, regexp);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3MTA0Nw==", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462971047", "bodyText": "Please, don't compile a new Pattern for the same regular expression here. Try to use an existing Matcher directly.", "author": "katzyn", "createdAt": "2020-07-30T12:48:29Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,11 +1547,21 @@ private static Value regexpReplace(SessionLocal session, String input, String re\n         }\n         boolean isInPostgreSqlMode = Mode.ModeEnum.PostgreSQL.equals(mode.getEnum());\n         int flags = makeRegexpFlags(regexpMode, isInPostgreSqlMode);\n+        if (isInPostgreSqlMode && ( regexpMode == null || regexpMode.isEmpty() || !regexpMode.contains(\"g\"))) {\n+            occurrence = 1;\n+        }\n         try {\n-            Matcher matcher = Pattern.compile(regexp, flags).matcher(input);\n-            return ValueVarchar.get(isInPostgreSqlMode && (regexpMode == null || regexpMode.indexOf('g') < 0) ?\n-                    matcher.replaceFirst(replacement) : matcher.replaceAll(replacement),\n-                    session);\n+            Matcher matcher = Pattern.compile(regexp, flags).matcher(input).region(position - 1, input.length());\n+            if (occurrence == 0) {\n+                return ValueVarchar.get(matcher.replaceAll(replacement), session);\n+            } else {\n+                for(int i = 0; i < occurrence; i++) {\n+                    matcher.find();\n+                }\n+                int startIndex = matcher.start();\n+                return ValueVarchar.get(input.substring(0, startIndex) + input.substring(startIndex).replaceFirst(regexp,\n+                        replacement), session);\n+            }", "originalCommit": "37ea132f0b85c245548b26cfda55e3fce4a32b86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex 6ce3bc125..b30964b4a 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1555,12 +1562,16 @@ private static Value regexpReplace(SessionLocal session, String input, String re\n             if (occurrence == 0) {\n                 return ValueVarchar.get(matcher.replaceAll(replacement), session);\n             } else {\n-                for(int i = 0; i < occurrence; i++) {\n-                    matcher.find();\n+                StringBuffer sb = new StringBuffer();\n+                int index = 1;\n+                while (matcher.find()) {\n+                    if (index == occurrence) {\n+                        matcher.appendReplacement(sb, replacement);\n+                    }\n+                    index++;\n                 }\n-                int startIndex = matcher.start();\n-                return ValueVarchar.get(input.substring(0, startIndex) + input.substring(startIndex).replaceFirst(regexp,\n-                        replacement), session);\n+                matcher.appendTail(sb);\n+                return ValueVarchar.get(sb.toString(), session);\n             }\n         } catch (PatternSyntaxException e) {\n             throw DbException.get(ErrorCode.LIKE_ESCAPE_ERROR_1, e, regexp);\n"}}, {"oid": "f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "url": "https://github.com/h2database/h2database/commit/f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "message": "Added Oracle REGEXP_REPLACE support", "committedDate": "2020-07-30T13:23:47Z", "type": "forcePushed"}, {"oid": "52414e75e3bd51d6dee25255043a975210b9d91c", "url": "https://github.com/h2database/h2database/commit/52414e75e3bd51d6dee25255043a975210b9d91c", "message": "Added Oracle REGEXP_REPLACE support", "committedDate": "2020-07-30T13:37:15Z", "type": "commit"}, {"oid": "52414e75e3bd51d6dee25255043a975210b9d91c", "url": "https://github.com/h2database/h2database/commit/52414e75e3bd51d6dee25255043a975210b9d91c", "message": "Added Oracle REGEXP_REPLACE support", "committedDate": "2020-07-30T13:37:15Z", "type": "forcePushed"}]}