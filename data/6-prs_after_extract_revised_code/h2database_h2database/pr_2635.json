{"pr_number": 2635, "pr_title": "Implements the REGEXP_SUBSTR function, modeled on the same function a\u2026", "pr_createdAt": "2020-05-20T13:02:40Z", "pr_url": "https://github.com/h2database/h2database/pull/2635", "timeline": [{"oid": "4dc7b144bacd5fd93329e599bbb817c3026e1f7c", "url": "https://github.com/h2database/h2database/commit/4dc7b144bacd5fd93329e599bbb817c3026e1f7c", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:03:21Z", "type": "forcePushed"}, {"oid": "e23b3b7b0920b0d65d587001338fcf447c96fbeb", "url": "https://github.com/h2database/h2database/commit/e23b3b7b0920b0d65d587001338fcf447c96fbeb", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:03:47Z", "type": "forcePushed"}, {"oid": "37114aa7babbe2e298bb88c0e2e4d5905e0597f3", "url": "https://github.com/h2database/h2database/commit/37114aa7babbe2e298bb88c0e2e4d5905e0597f3", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:21:48Z", "type": "forcePushed"}, {"oid": "dac8b07425523e45dc43869d663dd682ebe25f4c", "url": "https://github.com/h2database/h2database/commit/dac8b07425523e45dc43869d663dd682ebe25f4c", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:22:42Z", "type": "forcePushed"}, {"oid": "8f5d69ccc0b379d4c7642b0adebc81794a4ccdc5", "url": "https://github.com/h2database/h2database/commit/8f5d69ccc0b379d4c7642b0adebc81794a4ccdc5", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:44:11Z", "type": "forcePushed"}, {"oid": "98617920d837f968f16f4df1c2cd5e9c94ab5411", "url": "https://github.com/h2database/h2database/commit/98617920d837f968f16f4df1c2cd5e9c94ab5411", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:45:18Z", "type": "forcePushed"}, {"oid": "2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "url": "https://github.com/h2database/h2database/commit/2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:46:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDcxNA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428020714", "bodyText": "Please, use better names.", "author": "katzyn", "createdAt": "2020-05-20T13:42:27Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,34 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {", "originalCommit": "dac8b07425523e45dc43869d663dd682ebe25f4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTI3NQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428039275", "bodyText": "Whoops, completely overlooked this.", "author": "vetler", "createdAt": "2020-05-20T14:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNTAwMg==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428215002", "bodyText": "84284b7", "author": "vetler", "createdAt": "2020-05-20T18:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "84284b7ef69b4648df83da863d60a750830084e9", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex a7630494e..cae52ca96 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1540,32 +1540,40 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n-    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n-        Value result;\n-        String regexp = v1.getString();\n-        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n-        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n-        String regexpMode = v4 != null ? v4.getString() : null;\n-        int subexpression = v5 != null ? v5.getInt() : 0;\n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n         int flags = makeRegexpFlags(regexpMode, false);\n         try {\n-            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));\n+            Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n \n-            boolean found = false;\n-            for(int occurrence = 0; occurrence < requestedOccurrence; occurrence++) {\n+            boolean found = m.find(position);\n+            for(int occurrence = 1; occurrence < requestedOccurrence && found; occurrence++) {\n                 found = m.find();\n             }\n \n             if (!found) {\n-                result = ValueNull.INSTANCE;\n+                return ValueNull.INSTANCE;\n             }\n             else {\n-                result = ValueVarchar.get(m.group(subexpression));\n+                return ValueVarchar.get(m.group(subexpression));\n             }\n         } catch (PatternSyntaxException e) {\n             throw DbException.get(ErrorCode.LIKE_ESCAPE_ERROR_1, e, regexp);\n         }\n-        return result;\n+        catch (IndexOutOfBoundsException e) {\n+            return ValueNull.INSTANCE;\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTQwNg==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428021406", "bodyText": "Use int data type for both variables.", "author": "katzyn", "createdAt": "2020-05-20T13:43:18Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,34 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n+        Value result;\n+        String regexp = v1.getString();\n+        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n+        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;", "originalCommit": "dac8b07425523e45dc43869d663dd682ebe25f4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNDk2NQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428214965", "bodyText": "84284b7", "author": "vetler", "createdAt": "2020-05-20T18:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "84284b7ef69b4648df83da863d60a750830084e9", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex a7630494e..cae52ca96 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1540,32 +1540,40 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n-    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n-        Value result;\n-        String regexp = v1.getString();\n-        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n-        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n-        String regexpMode = v4 != null ? v4.getString() : null;\n-        int subexpression = v5 != null ? v5.getInt() : 0;\n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n         int flags = makeRegexpFlags(regexpMode, false);\n         try {\n-            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));\n+            Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n \n-            boolean found = false;\n-            for(int occurrence = 0; occurrence < requestedOccurrence; occurrence++) {\n+            boolean found = m.find(position);\n+            for(int occurrence = 1; occurrence < requestedOccurrence && found; occurrence++) {\n                 found = m.find();\n             }\n \n             if (!found) {\n-                result = ValueNull.INSTANCE;\n+                return ValueNull.INSTANCE;\n             }\n             else {\n-                result = ValueVarchar.get(m.group(subexpression));\n+                return ValueVarchar.get(m.group(subexpression));\n             }\n         } catch (PatternSyntaxException e) {\n             throw DbException.get(ErrorCode.LIKE_ESCAPE_ERROR_1, e, regexp);\n         }\n-        return result;\n+        catch (IndexOutOfBoundsException e) {\n+            return ValueNull.INSTANCE;\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMjI3Nw==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428022277", "bodyText": "substring is a slow operation, it looks like m.find(position) (for the first occurrence) can be used instead.", "author": "katzyn", "createdAt": "2020-05-20T13:44:26Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,34 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n+        Value result;\n+        String regexp = v1.getString();\n+        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n+        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n+        String regexpMode = v4 != null ? v4.getString() : null;\n+        int subexpression = v5 != null ? v5.getInt() : 0;\n+        int flags = makeRegexpFlags(regexpMode, false);\n+        try {\n+            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));", "originalCommit": "dac8b07425523e45dc43869d663dd682ebe25f4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NjEyMQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428056121", "bodyText": "bf1cd34", "author": "vetler", "createdAt": "2020-05-20T14:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMjI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "84284b7ef69b4648df83da863d60a750830084e9", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex a7630494e..cae52ca96 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1540,32 +1540,40 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n-    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n-        Value result;\n-        String regexp = v1.getString();\n-        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n-        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n-        String regexpMode = v4 != null ? v4.getString() : null;\n-        int subexpression = v5 != null ? v5.getInt() : 0;\n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n         int flags = makeRegexpFlags(regexpMode, false);\n         try {\n-            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));\n+            Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n \n-            boolean found = false;\n-            for(int occurrence = 0; occurrence < requestedOccurrence; occurrence++) {\n+            boolean found = m.find(position);\n+            for(int occurrence = 1; occurrence < requestedOccurrence && found; occurrence++) {\n                 found = m.find();\n             }\n \n             if (!found) {\n-                result = ValueNull.INSTANCE;\n+                return ValueNull.INSTANCE;\n             }\n             else {\n-                result = ValueVarchar.get(m.group(subexpression));\n+                return ValueVarchar.get(m.group(subexpression));\n             }\n         } catch (PatternSyntaxException e) {\n             throw DbException.get(ErrorCode.LIKE_ESCAPE_ERROR_1, e, regexp);\n         }\n-        return result;\n+        catch (IndexOutOfBoundsException e) {\n+            return ValueNull.INSTANCE;\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNTQ5Mg==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428025492", "bodyText": "This loop can return NULL quickly without iteration over all remaining occurrences.", "author": "katzyn", "createdAt": "2020-05-20T13:48:21Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,34 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n+        Value result;\n+        String regexp = v1.getString();\n+        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n+        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n+        String regexpMode = v4 != null ? v4.getString() : null;\n+        int subexpression = v5 != null ? v5.getInt() : 0;\n+        int flags = makeRegexpFlags(regexpMode, false);\n+        try {\n+            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));\n+\n+            boolean found = false;\n+            for(int occurrence = 0; occurrence < requestedOccurrence; occurrence++) {\n+                found = m.find();\n+            }\n+\n+            if (!found) {\n+                result = ValueNull.INSTANCE;\n+            }", "originalCommit": "2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2Mjg0Nw==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428062847", "bodyText": "eb836c0\nAborts the loop when next occurrance is not found, but keeps the !found test out of the loop. Not possible to move find(position) inside the loop, as this resets the search.", "author": "vetler", "createdAt": "2020-05-20T14:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNTQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "84284b7ef69b4648df83da863d60a750830084e9", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex a7630494e..cae52ca96 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1540,32 +1540,40 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n-    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n-        Value result;\n-        String regexp = v1.getString();\n-        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n-        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n-        String regexpMode = v4 != null ? v4.getString() : null;\n-        int subexpression = v5 != null ? v5.getInt() : 0;\n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n         int flags = makeRegexpFlags(regexpMode, false);\n         try {\n-            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));\n+            Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n \n-            boolean found = false;\n-            for(int occurrence = 0; occurrence < requestedOccurrence; occurrence++) {\n+            boolean found = m.find(position);\n+            for(int occurrence = 1; occurrence < requestedOccurrence && found; occurrence++) {\n                 found = m.find();\n             }\n \n             if (!found) {\n-                result = ValueNull.INSTANCE;\n+                return ValueNull.INSTANCE;\n             }\n             else {\n-                result = ValueVarchar.get(m.group(subexpression));\n+                return ValueVarchar.get(m.group(subexpression));\n             }\n         } catch (PatternSyntaxException e) {\n             throw DbException.get(ErrorCode.LIKE_ESCAPE_ERROR_1, e, regexp);\n         }\n-        return result;\n+        catch (IndexOutOfBoundsException e) {\n+            return ValueNull.INSTANCE;\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDE2Mw==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428030163", "bodyText": "Are you sure about nullIfParameterIsNull = false here? If so, you need to add explicit checks for ValueNull.INSTANCE for all parameters, add some logic for NULL arguments and describe it in documentation.", "author": "katzyn", "createdAt": "2020-05-20T13:53:59Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -313,6 +314,7 @@\n         addFunction(\"TRANSLATE\", TRANSLATE, 3, Value.VARCHAR);\n         addFunction(\"QUOTE_IDENT\", QUOTE_IDENT, 1, Value.VARCHAR);\n         addFunction(\"REGEXP_LIKE\", REGEXP_LIKE, VAR_ARGS, Value.BOOLEAN);\n+        addFunction(\"REGEXP_SUBSTR\", REGEXP_SUBSTR, VAR_ARGS, Value.VARCHAR, false, true, true, false);", "originalCommit": "2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MDYyOQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428040629", "bodyText": "The issue was that one of the parameters should be able to be NULL (flagsString) - see test SQL.\nWill add explicit tests instead, as you suggest, unless there are simpler ways to handle this? This code is still new to me.", "author": "vetler", "createdAt": "2020-05-20T14:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NTQ5OA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428045498", "bodyText": "@katzyn Is it possible to distinguish between the casees where parameters have not been set, or have been explicitly set to NULL?", "author": "vetler", "createdAt": "2020-05-20T14:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNTE1MA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428115150", "bodyText": "null means not set, ValueNull.INSTANCE means passed SQL NULL value.", "author": "katzyn", "createdAt": "2020-05-20T15:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNDkxNQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428214915", "bodyText": "84284b7", "author": "vetler", "createdAt": "2020-05-20T18:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDE2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMTYzNQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428031635", "bodyText": "It may throw IndexOutOfBoundsException and this exception needs to be caught.", "author": "katzyn", "createdAt": "2020-05-20T13:55:45Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,34 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n+        Value result;\n+        String regexp = v1.getString();\n+        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n+        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n+        String regexpMode = v4 != null ? v4.getString() : null;\n+        int subexpression = v5 != null ? v5.getInt() : 0;\n+        int flags = makeRegexpFlags(regexpMode, false);\n+        try {\n+            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));\n+\n+            boolean found = false;\n+            for(int occurrence = 0; occurrence < requestedOccurrence; occurrence++) {\n+                found = m.find();\n+            }\n+\n+            if (!found) {\n+                result = ValueNull.INSTANCE;\n+            }\n+            else {\n+                result = ValueVarchar.get(m.group(subexpression));", "originalCommit": "2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1OTk3NA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428059974", "bodyText": "6530ab6", "author": "vetler", "createdAt": "2020-05-20T14:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "84284b7ef69b4648df83da863d60a750830084e9", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex a7630494e..cae52ca96 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1540,32 +1540,40 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n-    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n-        Value result;\n-        String regexp = v1.getString();\n-        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n-        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n-        String regexpMode = v4 != null ? v4.getString() : null;\n-        int subexpression = v5 != null ? v5.getInt() : 0;\n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n         int flags = makeRegexpFlags(regexpMode, false);\n         try {\n-            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));\n+            Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n \n-            boolean found = false;\n-            for(int occurrence = 0; occurrence < requestedOccurrence; occurrence++) {\n+            boolean found = m.find(position);\n+            for(int occurrence = 1; occurrence < requestedOccurrence && found; occurrence++) {\n                 found = m.find();\n             }\n \n             if (!found) {\n-                result = ValueNull.INSTANCE;\n+                return ValueNull.INSTANCE;\n             }\n             else {\n-                result = ValueVarchar.get(m.group(subexpression));\n+                return ValueVarchar.get(m.group(subexpression));\n             }\n         } catch (PatternSyntaxException e) {\n             throw DbException.get(ErrorCode.LIKE_ESCAPE_ERROR_1, e, regexp);\n         }\n-        return result;\n+        catch (IndexOutOfBoundsException e) {\n+            return ValueNull.INSTANCE;\n+        }\n     }\n \n     /**\n"}}, {"oid": "f49e77bda115e7ffe05968548d26c9a7035b83e0", "url": "https://github.com/h2database/h2database/commit/f49e77bda115e7ffe05968548d26c9a7035b83e0", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T14:01:41Z", "type": "forcePushed"}, {"oid": "84284b7ef69b4648df83da863d60a750830084e9", "url": "https://github.com/h2database/h2database/commit/84284b7ef69b4648df83da863d60a750830084e9", "message": "fixup! fixup! Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T18:14:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwOTQxNQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428409415", "bodyText": "Please, add test cases for both exceptions.", "author": "katzyn", "createdAt": "2020-05-21T02:20:44Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,42 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n+        int flags = makeRegexpFlags(regexpMode, false);\n+        try {\n+            Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n+\n+            boolean found = m.find(position);\n+            for(int occurrence = 1; occurrence < requestedOccurrence && found; occurrence++) {\n+                found = m.find();\n+            }\n+\n+            if (!found) {\n+                return ValueNull.INSTANCE;\n+            }\n+            else {\n+                return ValueVarchar.get(m.group(subexpression));\n+            }\n+        } catch (PatternSyntaxException e) {\n+            throw DbException.get(ErrorCode.LIKE_ESCAPE_ERROR_1, e, regexp);\n+        }\n+        catch (IndexOutOfBoundsException e) {\n+            return ValueNull.INSTANCE;\n+        }", "originalCommit": "84284b7ef69b4648df83da863d60a750830084e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3MzA3Nw==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428473077", "bodyText": "33b1736", "author": "vetler", "createdAt": "2020-05-21T06:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwOTQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "bea8a665fe965c82063a4549bfc99d57567e01d1", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex cae52ca96..a0d7450e2 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1541,18 +1541,18 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n     }\n \n     private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n-            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+            Value occurrenceArg, Value regexpModeArg, Value subexpressionArg, Session session) {\n         String regexp = regexpArg.getString();\n \n-        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n-            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+        if (inputString == ValueNull.INSTANCE || regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressionArg == ValueNull.INSTANCE) {\n             return ValueNull.INSTANCE;\n         }\n \n         int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n         int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n         String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n-        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n+        int subexpression = subexpressionArg != null ? subexpressionArg.getInt() : 0;\n         int flags = makeRegexpFlags(regexpMode, false);\n         try {\n             Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTM1Mw==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428411353", "bodyText": "inputString == ValueNull.INSTANCE?", "author": "katzyn", "createdAt": "2020-05-21T02:28:56Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,42 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }", "originalCommit": "84284b7ef69b4648df83da863d60a750830084e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3MzAyMQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428473021", "bodyText": "33b1736", "author": "vetler", "createdAt": "2020-05-21T06:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bea8a665fe965c82063a4549bfc99d57567e01d1", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex cae52ca96..a0d7450e2 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1541,18 +1541,18 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n     }\n \n     private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n-            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+            Value occurrenceArg, Value regexpModeArg, Value subexpressionArg, Session session) {\n         String regexp = regexpArg.getString();\n \n-        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n-            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+        if (inputString == ValueNull.INSTANCE || regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressionArg == ValueNull.INSTANCE) {\n             return ValueNull.INSTANCE;\n         }\n \n         int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n         int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n         String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n-        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n+        int subexpression = subexpressionArg != null ? subexpressionArg.getInt() : 0;\n         int flags = makeRegexpFlags(regexpMode, false);\n         try {\n             Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjAxMQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428412011", "bodyText": "subexpressoinArg can't be ValueNull.INSTANCE here, and this parameter has a typo in its name, should be subexpressionArg.\n(regexpModeArg can, but ValueNull.INSTANCE.getString() simply returns null.)", "author": "katzyn", "createdAt": "2020-05-21T02:31:58Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,42 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;", "originalCommit": "84284b7ef69b4648df83da863d60a750830084e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3Mjk3NQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428472975", "bodyText": "33b1736", "author": "vetler", "createdAt": "2020-05-21T06:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "bea8a665fe965c82063a4549bfc99d57567e01d1", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex cae52ca96..a0d7450e2 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1541,18 +1541,18 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n     }\n \n     private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n-            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+            Value occurrenceArg, Value regexpModeArg, Value subexpressionArg, Session session) {\n         String regexp = regexpArg.getString();\n \n-        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n-            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+        if (inputString == ValueNull.INSTANCE || regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressionArg == ValueNull.INSTANCE) {\n             return ValueNull.INSTANCE;\n         }\n \n         int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n         int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n         String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n-        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n+        int subexpression = subexpressionArg != null ? subexpressionArg.getInt() : 0;\n         int flags = makeRegexpFlags(regexpMode, false);\n         try {\n             Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjYzOA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428412638", "bodyText": "String values are treated in special way in Oracle compatibility mode, so ValueVarchar.get() needs to know the mode.\n            else {\n                return ValueVarchar.get(m.group(subexpression), session);\n            }\nSession should be passed to this method.", "author": "katzyn", "createdAt": "2020-05-21T02:34:44Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,42 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n+        int flags = makeRegexpFlags(regexpMode, false);\n+        try {\n+            Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n+\n+            boolean found = m.find(position);\n+            for(int occurrence = 1; occurrence < requestedOccurrence && found; occurrence++) {\n+                found = m.find();\n+            }\n+\n+            if (!found) {\n+                return ValueNull.INSTANCE;\n+            }\n+            else {\n+                return ValueVarchar.get(m.group(subexpression));\n+            }", "originalCommit": "84284b7ef69b4648df83da863d60a750830084e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3MjkyNg==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428472926", "bodyText": "33b1736", "author": "vetler", "createdAt": "2020-05-21T06:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "bea8a665fe965c82063a4549bfc99d57567e01d1", "chunk": "diff --git a/h2/src/main/org/h2/expression/function/Function.java b/h2/src/main/org/h2/expression/function/Function.java\nindex cae52ca96..a0d7450e2 100644\n--- a/h2/src/main/org/h2/expression/function/Function.java\n+++ b/h2/src/main/org/h2/expression/function/Function.java\n\n@@ -1541,18 +1541,18 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n     }\n \n     private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n-            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+            Value occurrenceArg, Value regexpModeArg, Value subexpressionArg, Session session) {\n         String regexp = regexpArg.getString();\n \n-        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n-            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+        if (inputString == ValueNull.INSTANCE || regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressionArg == ValueNull.INSTANCE) {\n             return ValueNull.INSTANCE;\n         }\n \n         int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n         int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n         String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n-        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n+        int subexpression = subexpressionArg != null ? subexpressionArg.getInt() : 0;\n         int flags = makeRegexpFlags(regexpMode, false);\n         try {\n             Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n"}}, {"oid": "bea8a665fe965c82063a4549bfc99d57567e01d1", "url": "https://github.com/h2database/h2database/commit/bea8a665fe965c82063a4549bfc99d57567e01d1", "message": "fixup! Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-21T06:37:14Z", "type": "forcePushed"}, {"oid": "33b1736ae681ba2a6d67f15a856755666477694d", "url": "https://github.com/h2database/h2database/commit/33b1736ae681ba2a6d67f15a856755666477694d", "message": "fixup! Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-21T06:38:08Z", "type": "forcePushed"}, {"oid": "f589a191290e62e4b1d8dcde0c4d10d78a8fdc69", "url": "https://github.com/h2database/h2database/commit/f589a191290e62e4b1d8dcde0c4d10d78a8fdc69", "message": "Fix wording and typos in documentation for regexp-functions", "committedDate": "2020-05-21T06:57:03Z", "type": "forcePushed"}, {"oid": "cd77e0a9e5f961de5eeda4a05858f2de8bd0533c", "url": "https://github.com/h2database/h2database/commit/cd77e0a9e5f961de5eeda4a05858f2de8bd0533c", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-21T07:00:10Z", "type": "commit"}, {"oid": "caccceb0082cfd511c0f257b35b078343f3cdb45", "url": "https://github.com/h2database/h2database/commit/caccceb0082cfd511c0f257b35b078343f3cdb45", "message": "Fix wording and typos in documentation for regexp-functions", "committedDate": "2020-05-21T07:00:15Z", "type": "commit"}, {"oid": "caccceb0082cfd511c0f257b35b078343f3cdb45", "url": "https://github.com/h2database/h2database/commit/caccceb0082cfd511c0f257b35b078343f3cdb45", "message": "Fix wording and typos in documentation for regexp-functions", "committedDate": "2020-05-21T07:00:15Z", "type": "forcePushed"}]}