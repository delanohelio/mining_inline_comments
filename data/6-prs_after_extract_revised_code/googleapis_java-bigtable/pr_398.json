{"pr_number": 398, "pr_title": "feat: extend channel priming logic to also send fake requests", "pr_createdAt": "2020-08-28T20:11:23Z", "pr_url": "https://github.com/googleapis/java-bigtable/pull/398", "timeline": [{"oid": "2ce48f1032199494b35ce3997ec7ea0f425fa4f1", "url": "https://github.com/googleapis/java-bigtable/commit/2ce48f1032199494b35ce3997ec7ea0f425fa4f1", "message": "feat: extend channel priming logic to also send fake requests", "committedDate": "2020-08-28T15:54:15Z", "type": "commit"}, {"oid": "411445385668e6f79a3e19652ff05efb5b41fa9b", "url": "https://github.com/googleapis/java-bigtable/commit/411445385668e6f79a3e19652ff05efb5b41fa9b", "message": "finish", "committedDate": "2020-08-28T21:41:31Z", "type": "commit"}, {"oid": "c8ead38bd3c3ff93d1deb37a5458d2517bec1824", "url": "https://github.com/googleapis/java-bigtable/commit/c8ead38bd3c3ff93d1deb37a5458d2517bec1824", "message": "remove debug", "committedDate": "2020-08-28T21:42:47Z", "type": "commit"}, {"oid": "fba802609f17d254433d17966cbd9ff407ea7657", "url": "https://github.com/googleapis/java-bigtable/commit/fba802609f17d254433d17966cbd9ff407ea7657", "message": "copyright", "committedDate": "2020-08-28T21:55:09Z", "type": "commit"}, {"oid": "3ff458e0a7abff09a3a6f69b9a96db43a5b60f12", "url": "https://github.com/googleapis/java-bigtable/commit/3ff458e0a7abff09a3a6f69b9a96db43a5b60f12", "message": "remove debug code from test", "committedDate": "2020-08-31T16:41:53Z", "type": "commit"}, {"oid": "555b9ab71595361eee6df24a669317de6cb79fe9", "url": "https://github.com/googleapis/java-bigtable/commit/555b9ab71595361eee6df24a669317de6cb79fe9", "message": "fix deps", "committedDate": "2020-08-31T17:20:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MDkzMA==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480450930", "bodyText": "Can we add some tests around this to ensure the proper values are set in the settings?", "author": "kolea2", "createdAt": "2020-08-31T22:52:38Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -120,65 +123,89 @@\n \n   public static EnhancedBigtableStub create(EnhancedBigtableStubSettings settings)\n       throws IOException {\n-    ClientContext clientContext = ClientContext.create(settings);\n+    settings = finalizeSettings(settings, Tags.getTagger(), Stats.getStatsRecorder());\n \n-    return new EnhancedBigtableStub(\n-        settings, clientContext, Tags.getTagger(), Stats.getStatsRecorder());\n+    return new EnhancedBigtableStub(settings, ClientContext.create(settings));\n   }\n \n-  @InternalApi(\"Visible for testing\")\n-  public EnhancedBigtableStub(\n-      EnhancedBigtableStubSettings settings,\n-      ClientContext clientContext,\n-      Tagger tagger,\n-      StatsRecorder statsRecorder) {\n-    this.settings = settings;\n+  public static EnhancedBigtableStubSettings finalizeSettings(\n+      EnhancedBigtableStubSettings settings, Tagger tagger, StatsRecorder stats)\n+      throws IOException {\n+    EnhancedBigtableStubSettings.Builder builder = settings.toBuilder();\n+\n+    if (settings.isRefreshingChannel()) {", "originalCommit": "555b9ab71595361eee6df24a669317de6cb79fe9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTc5NA==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481369794", "bodyText": "I added a test for testChannelPrimerConfigured, which should cover the behavior of it", "author": "igorbernstein2", "createdAt": "2020-09-01T19:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MDkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "5e1a94dad7818040879247a98de7928f35ed60e4", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\nindex 7e177442..d729d624 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\n\n@@ -133,6 +133,10 @@ public class EnhancedBigtableStub implements AutoCloseable {\n       throws IOException {\n     EnhancedBigtableStubSettings.Builder builder = settings.toBuilder();\n \n+    // TODO: this implementation is on the cusp of unwieldy, if we end up adding more features\n+    // consider splitting it up by feature.\n+\n+    // Inject channel priming\n     if (settings.isRefreshingChannel()) {\n       // Fix the credentials so that they can be shared\n       Credentials credentials = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MjU2MQ==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480452561", "bodyText": "should this check be moved to where we are setting the transport provider, https://github.com/googleapis/java-bigtable/pull/398/files#diff-dad9668e639c962562540f7f70a24138R144?", "author": "kolea2", "createdAt": "2020-08-31T22:54:57Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "diffHunk": "@@ -760,17 +787,10 @@ public EnhancedBigtableStubSettings build() {\n       Preconditions.checkState(projectId != null, \"Project id must be set\");\n       Preconditions.checkState(instanceId != null, \"Instance id must be set\");\n \n-      // Set ChannelPrimer on TransportChannelProvider so channels will gracefully refresh\n-      // connections to Cloud Bigtable service\n       if (isRefreshingChannel) {\n         Preconditions.checkArgument(\n             getTransportChannelProvider() instanceof InstantiatingGrpcChannelProvider,", "originalCommit": "555b9ab71595361eee6df24a669317de6cb79fe9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NTc2Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481245762", "bodyText": "No, I want the validation logic to be as close to usage as possible.", "author": "igorbernstein2", "createdAt": "2020-09-01T15:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MjU2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MzQxOQ==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480453419", "bodyText": "can we abstract any of this out into test helpers?", "author": "kolea2", "createdAt": "2020-08-31T22:56:17Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimerTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.core.ApiFunction;\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.OAuth2Credentials;\n+import com.google.bigtable.v2.BigtableGrpc.BigtableImplBase;\n+import com.google.bigtable.v2.ReadRowsRequest;\n+import com.google.bigtable.v2.ReadRowsResponse;\n+import com.google.bigtable.v2.RowFilter;\n+import com.google.bigtable.v2.RowSet;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.Metadata;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCall.Listener;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Handler;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class BigtableChannelPrimerTest {\n+  private static final String TOKEN_VALUE = \"fake-token\";\n+\n+  int port;\n+  Server server;\n+  FakeService fakeService;\n+  MetadataInterceptor metadataInterceptor;\n+  BigtableChannelPrimer primer;\n+  ManagedChannel channel;\n+  private LogHandler logHandler;\n+\n+  @Before\n+  public void setup() throws IOException {\n+    try (ServerSocket ss = new ServerSocket(0)) {", "originalCommit": "555b9ab71595361eee6df24a669317de6cb79fe9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NTgzNQ==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481245835", "bodyText": "Lets track this separately, it will need a bit of refactoring in the other tests", "author": "igorbernstein2", "createdAt": "2020-09-01T15:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MzQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxMDkzNA==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481310934", "bodyText": "sgtm, can you please file an issue?", "author": "kolea2", "createdAt": "2020-09-01T17:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MzQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxOTQ3OA==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481319478", "bodyText": "Done #403", "author": "igorbernstein2", "createdAt": "2020-09-01T17:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MzQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5e1a94dad7818040879247a98de7928f35ed60e4", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimerTest.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimerTest.java\nindex 9009bbc0..42d13a7a 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimerTest.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimerTest.java\n\n@@ -50,6 +50,8 @@ import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n+import org.mockito.Mockito;\n+import org.mockito.internal.stubbing.answers.ThrowsException;\n \n @RunWith(JUnit4.class)\n public class BigtableChannelPrimerTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NDQxNA==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480454414", "bodyText": "this is a little confusing to me. Why did we separate these pieces out?", "author": "kolea2", "createdAt": "2020-08-31T22:57:50Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -120,65 +123,89 @@\n \n   public static EnhancedBigtableStub create(EnhancedBigtableStubSettings settings)\n       throws IOException {\n-    ClientContext clientContext = ClientContext.create(settings);\n+    settings = finalizeSettings(settings, Tags.getTagger(), Stats.getStatsRecorder());\n \n-    return new EnhancedBigtableStub(\n-        settings, clientContext, Tags.getTagger(), Stats.getStatsRecorder());\n+    return new EnhancedBigtableStub(settings, ClientContext.create(settings));\n   }\n \n-  @InternalApi(\"Visible for testing\")\n-  public EnhancedBigtableStub(\n-      EnhancedBigtableStubSettings settings,\n-      ClientContext clientContext,\n-      Tagger tagger,\n-      StatsRecorder statsRecorder) {\n-    this.settings = settings;\n+  public static EnhancedBigtableStubSettings finalizeSettings(", "originalCommit": "555b9ab71595361eee6df24a669317de6cb79fe9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NTkzNg==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481245936", "bodyText": "Not sure which specific pieces you are referring to, but I'll try to give the background to the current structure.\nThere a couple of phases of client construction:\n\nuser uses the builder to configure their settings. At this point the user owns the object so modifying it in place during build() is very surprising\nstub creation: at this point the user passed us the settings object. This is the correct place to augment the settings as the changes won't be visible in the user object\n\nPreviously step 2 was handled when we created ClientContext, which is a manifestation of the user settings.  Which is the correct place to do this. Unfortunately for this new feature, the primer needs to be injected before the ClientContext is created (because ClientContext instantiates the grpc connections). So the settings need to be augmented before the ClientContext is created. So ClientContext.create(settings).toBuilder().augment() was changed to ClientContext.create(settings.toBuilder().augment()).\nAt this point the logic of patching settings got pretty hefty and fairly distinct from callable chain creation, so it was extracted to a helper method.", "author": "igorbernstein2", "createdAt": "2020-09-01T15:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxMzMyNQ==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481313325", "bodyText": "Thanks! By 'pieces' I was mostly referring to the channel priming and the tracing - wasn't quite sure how they went together. Do you think it would be clearer if we had a finalizeSettings which delegates to each sub instantiation (injectChannelPriming, injectTracing or something similar)?", "author": "kolea2", "createdAt": "2020-09-01T17:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxOTkyMQ==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481319921", "bodyText": "I'd like to leave it as is, we can factor those out when we get a 3rd feature", "author": "igorbernstein2", "createdAt": "2020-09-01T17:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0OTc2Nw==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481349767", "bodyText": "ok, then for now I think a comment would be helpful", "author": "kolea2", "createdAt": "2020-09-01T18:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTA3Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481369072", "bodyText": "done", "author": "igorbernstein2", "createdAt": "2020-09-01T19:05:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NDQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "5e1a94dad7818040879247a98de7928f35ed60e4", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\nindex 7e177442..d729d624 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\n\n@@ -133,6 +133,10 @@ public class EnhancedBigtableStub implements AutoCloseable {\n       throws IOException {\n     EnhancedBigtableStubSettings.Builder builder = settings.toBuilder();\n \n+    // TODO: this implementation is on the cusp of unwieldy, if we end up adding more features\n+    // consider splitting it up by feature.\n+\n+    // Inject channel priming\n     if (settings.isRefreshingChannel()) {\n       // Fix the credentials so that they can be shared\n       Credentials credentials = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NTYzMg==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480265632", "bodyText": "Should we extend this to 30? So it's consistent with the 30s timeout?", "author": "tonytanger", "createdAt": "2020-08-31T17:04:44Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub;\n+\n+import static com.google.cloud.bigtable.data.v2.models.Filters.FILTERS;\n+\n+import com.google.api.client.util.Preconditions;\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.BetaApi;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.core.InstantiatingExecutorProvider;\n+import com.google.api.gax.grpc.ChannelPrimer;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.models.Row;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ManagedChannel;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import org.threeten.bp.Duration;\n+\n+/**\n+ * A channel warmer that ensures that a Bigtable channel is ready to be used before being added to\n+ * the active {@link com.google.api.gax.grpc.ChannelPool}.\n+ *\n+ * <p>This implementation is subject to change in the future, but currently it will prime the\n+ * channel by sending a ReadRow request for a hardcoded, non-existent row key.\n+ */\n+@BetaApi(\"Channel priming is not currently stable and might change in the future\")\n+class BigtableChannelPrimer implements ChannelPrimer {\n+  private static Logger LOG = Logger.getLogger(BigtableChannelPrimer.class.toString());\n+\n+  static ByteString PRIMING_ROW_KEY = ByteString.copyFromUtf8(\"nonexistent-priming-row\");\n+  private static Duration PRIME_REQUEST_TIMEOUT = Duration.ofSeconds(30);\n+\n+  private final EnhancedBigtableStubSettings settingsTemplate;\n+  private final List<String> tableIds;\n+\n+  static BigtableChannelPrimer create(\n+      Credentials credentials,\n+      String projectId,\n+      String instanceId,\n+      String appProfileId,\n+      List<String> tableIds) {\n+    EnhancedBigtableStubSettings.Builder builder =\n+        EnhancedBigtableStubSettings.newBuilder()\n+            .setProjectId(projectId)\n+            .setInstanceId(instanceId)\n+            .setAppProfileId(appProfileId)\n+            .setCredentialsProvider(FixedCredentialsProvider.create(credentials))\n+            .setExecutorProvider(\n+                InstantiatingExecutorProvider.newBuilder().setExecutorThreadCount(1).build());\n+\n+    // Disable retries for priming request\n+    builder\n+        .readRowSettings()\n+        .setRetrySettings(\n+            builder\n+                .readRowSettings()\n+                .getRetrySettings()\n+                .toBuilder()\n+                .setMaxAttempts(1)\n+                .setJittered(false)\n+                .setInitialRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setMaxRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setTotalTimeout(PRIME_REQUEST_TIMEOUT)\n+                .build());\n+    return new BigtableChannelPrimer(builder.build(), tableIds);\n+  }\n+\n+  private BigtableChannelPrimer(\n+      EnhancedBigtableStubSettings settingsTemplate, List<String> tableIds) {\n+    Preconditions.checkNotNull(settingsTemplate, \"settingsTemplate can't be null\");\n+    this.settingsTemplate = settingsTemplate;\n+    this.tableIds = ImmutableList.copyOf(tableIds);\n+  }\n+\n+  @Override\n+  public void primeChannel(ManagedChannel managedChannel) {\n+    try {\n+      primeChannelUnsafe(managedChannel);\n+    } catch (IOException | RuntimeException e) {\n+      LOG.warning(\n+          String.format(\"Unexpected error while trying to prime a channel: %s\", e.getMessage()));\n+    }\n+  }\n+\n+  private void primeChannelUnsafe(ManagedChannel managedChannel) throws IOException {\n+    if (tableIds.isEmpty()) {\n+      waitForChannelReady(managedChannel);\n+    } else {\n+      sendPrimeRequests(managedChannel);\n+    }\n+  }\n+\n+  private void waitForChannelReady(ManagedChannel managedChannel) {\n+    for (int i = 0; i < 10; i++) {", "originalCommit": "3ff458e0a7abff09a3a6f69b9a96db43a5b60f12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NTk4Ng==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481245986", "bodyText": "done", "author": "igorbernstein2", "createdAt": "2020-09-01T15:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NTYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "555b9ab71595361eee6df24a669317de6cb79fe9", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java\nindex 6dd242ad..1a2274c1 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java\n\n@@ -17,7 +17,6 @@ package com.google.cloud.bigtable.data.v2.stub;\n \n import static com.google.cloud.bigtable.data.v2.models.Filters.FILTERS;\n \n-import com.google.api.client.util.Preconditions;\n import com.google.api.core.ApiFuture;\n import com.google.api.core.BetaApi;\n import com.google.api.gax.core.FixedCredentialsProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDc1MA==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480274750", "bodyText": "I'm not sure I understand why this is called unsafe?", "author": "tonytanger", "createdAt": "2020-08-31T17:22:30Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub;\n+\n+import static com.google.cloud.bigtable.data.v2.models.Filters.FILTERS;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.BetaApi;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.core.InstantiatingExecutorProvider;\n+import com.google.api.gax.grpc.ChannelPrimer;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.models.Row;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ManagedChannel;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import org.threeten.bp.Duration;\n+\n+/**\n+ * A channel warmer that ensures that a Bigtable channel is ready to be used before being added to\n+ * the active {@link com.google.api.gax.grpc.ChannelPool}.\n+ *\n+ * <p>This implementation is subject to change in the future, but currently it will prime the\n+ * channel by sending a ReadRow request for a hardcoded, non-existent row key.\n+ */\n+@BetaApi(\"Channel priming is not currently stable and might change in the future\")\n+class BigtableChannelPrimer implements ChannelPrimer {\n+  private static Logger LOG = Logger.getLogger(BigtableChannelPrimer.class.toString());\n+\n+  static ByteString PRIMING_ROW_KEY = ByteString.copyFromUtf8(\"nonexistent-priming-row\");\n+  private static Duration PRIME_REQUEST_TIMEOUT = Duration.ofSeconds(30);\n+\n+  private final EnhancedBigtableStubSettings settingsTemplate;\n+  private final List<String> tableIds;\n+\n+  static BigtableChannelPrimer create(\n+      Credentials credentials,\n+      String projectId,\n+      String instanceId,\n+      String appProfileId,\n+      List<String> tableIds) {\n+    EnhancedBigtableStubSettings.Builder builder =\n+        EnhancedBigtableStubSettings.newBuilder()\n+            .setProjectId(projectId)\n+            .setInstanceId(instanceId)\n+            .setAppProfileId(appProfileId)\n+            .setCredentialsProvider(FixedCredentialsProvider.create(credentials))\n+            .setExecutorProvider(\n+                InstantiatingExecutorProvider.newBuilder().setExecutorThreadCount(1).build());\n+\n+    // Disable retries for priming request\n+    builder\n+        .readRowSettings()\n+        .setRetrySettings(\n+            builder\n+                .readRowSettings()\n+                .getRetrySettings()\n+                .toBuilder()\n+                .setMaxAttempts(1)\n+                .setJittered(false)\n+                .setInitialRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setMaxRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setTotalTimeout(PRIME_REQUEST_TIMEOUT)\n+                .build());\n+    return new BigtableChannelPrimer(builder.build(), tableIds);\n+  }\n+\n+  private BigtableChannelPrimer(\n+      EnhancedBigtableStubSettings settingsTemplate, List<String> tableIds) {\n+    Preconditions.checkNotNull(settingsTemplate, \"settingsTemplate can't be null\");\n+    this.settingsTemplate = settingsTemplate;\n+    this.tableIds = ImmutableList.copyOf(tableIds);\n+  }\n+\n+  @Override\n+  public void primeChannel(ManagedChannel managedChannel) {\n+    try {\n+      primeChannelUnsafe(managedChannel);\n+    } catch (IOException | RuntimeException e) {\n+      LOG.warning(\n+          String.format(\"Unexpected error while trying to prime a channel: %s\", e.getMessage()));\n+    }\n+  }\n+\n+  private void primeChannelUnsafe(ManagedChannel managedChannel) throws IOException {", "originalCommit": "555b9ab71595361eee6df24a669317de6cb79fe9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjAzMg==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481246032", "bodyText": "Because it could throw an exception, does the priming api expect to handle the exceptions?", "author": "igorbernstein2", "createdAt": "2020-09-01T15:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "91cb7a5eca4316173513d34dd44dc9fa028ae2c4", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java\nindex 1a2274c1..15be8f73 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java\n\n@@ -116,7 +116,7 @@ class BigtableChannelPrimer implements ChannelPrimer {\n   }\n \n   private void waitForChannelReady(ManagedChannel managedChannel) {\n-    for (int i = 0; i < 10; i++) {\n+    for (int i = 0; i < 30; i++) {\n       ConnectivityState connectivityState = managedChannel.getState(true);\n       if (connectivityState == ConnectivityState.READY) {\n         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NDcxMQ==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r480384711", "bodyText": "I'm not familiar with this. Before it was set on clientContext now it's set on stubsettings builder. Why was this changed?", "author": "tonytanger", "createdAt": "2020-08-31T20:36:32Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -120,65 +123,89 @@\n \n   public static EnhancedBigtableStub create(EnhancedBigtableStubSettings settings)\n       throws IOException {\n-    ClientContext clientContext = ClientContext.create(settings);\n+    settings = finalizeSettings(settings, Tags.getTagger(), Stats.getStatsRecorder());\n \n-    return new EnhancedBigtableStub(\n-        settings, clientContext, Tags.getTagger(), Stats.getStatsRecorder());\n+    return new EnhancedBigtableStub(settings, ClientContext.create(settings));\n   }\n \n-  @InternalApi(\"Visible for testing\")\n-  public EnhancedBigtableStub(\n-      EnhancedBigtableStubSettings settings,\n-      ClientContext clientContext,\n-      Tagger tagger,\n-      StatsRecorder statsRecorder) {\n-    this.settings = settings;\n+  public static EnhancedBigtableStubSettings finalizeSettings(\n+      EnhancedBigtableStubSettings settings, Tagger tagger, StatsRecorder stats)\n+      throws IOException {\n+    EnhancedBigtableStubSettings.Builder builder = settings.toBuilder();\n+\n+    if (settings.isRefreshingChannel()) {\n+      // Fix the credentials so that they can be shared\n+      Credentials credentials = null;\n+      if (settings.getCredentialsProvider() != null) {\n+        credentials = settings.getCredentialsProvider().getCredentials();\n+      }\n+      builder.setCredentialsProvider(FixedCredentialsProvider.create(credentials));\n+\n+      // Inject the primer\n+      InstantiatingGrpcChannelProvider transportProvider =\n+          (InstantiatingGrpcChannelProvider) settings.getTransportChannelProvider();\n+\n+      builder.setTransportChannelProvider(\n+          transportProvider\n+              .toBuilder()\n+              .setChannelPrimer(\n+                  BigtableChannelPrimer.create(\n+                      credentials,\n+                      settings.getProjectId(),\n+                      settings.getInstanceId(),\n+                      settings.getAppProfileId(),\n+                      settings.getPrimedTableIds()))\n+              .build());\n+    }\n \n-    this.clientContext =\n-        clientContext\n-            .toBuilder()\n-            .setTracerFactory(\n-                new CompositeTracerFactory(\n-                    ImmutableList.of(\n-                        // Add OpenCensus Tracing\n-                        new OpencensusTracerFactory(\n-                            ImmutableMap.<String, String>builder()\n-                                // Annotate traces with the same tags as metrics\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_PROJECT_ID.getName(),\n-                                    settings.getProjectId())\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_INSTANCE_ID.getName(),\n-                                    settings.getInstanceId())\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_APP_PROFILE_ID.getName(),\n-                                    settings.getAppProfileId())\n-                                // Also annotate traces with library versions\n-                                .put(\"gax\", GaxGrpcProperties.getGaxGrpcVersion())\n-                                .put(\"grpc\", GaxGrpcProperties.getGrpcVersion())\n-                                .put(\n-                                    \"gapic\",\n-                                    GaxProperties.getLibraryVersion(\n-                                        EnhancedBigtableStubSettings.class))\n-                                .build()),\n-                        // Add OpenCensus Metrics\n-                        MetricsTracerFactory.create(\n-                            tagger,\n-                            statsRecorder,\n-                            ImmutableMap.<TagKey, TagValue>builder()\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_PROJECT_ID,\n-                                    TagValue.create(settings.getProjectId()))\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_INSTANCE_ID,\n-                                    TagValue.create(settings.getInstanceId()))\n-                                .put(\n-                                    RpcMeasureConstants.BIGTABLE_APP_PROFILE_ID,\n-                                    TagValue.create(settings.getAppProfileId()))\n-                                .build()),\n-                        // Add user configured tracer\n-                        clientContext.getTracerFactory())))\n-            .build();\n+    // Inject Opencensus instrumentation\n+    builder.setTracerFactory(", "originalCommit": "555b9ab71595361eee6df24a669317de6cb79fe9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjA1Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481246052", "bodyText": "Lets merge this with the discussion above \"this is a little confusing to me. Why did we separate these pieces out?\"", "author": "igorbernstein2", "createdAt": "2020-09-01T15:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NDcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5e1a94dad7818040879247a98de7928f35ed60e4", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\nindex 7e177442..d729d624 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\n\n@@ -133,6 +133,10 @@ public class EnhancedBigtableStub implements AutoCloseable {\n       throws IOException {\n     EnhancedBigtableStubSettings.Builder builder = settings.toBuilder();\n \n+    // TODO: this implementation is on the cusp of unwieldy, if we end up adding more features\n+    // consider splitting it up by feature.\n+\n+    // Inject channel priming\n     if (settings.isRefreshingChannel()) {\n       // Fix the credentials so that they can be shared\n       Credentials credentials = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE2NTE1Ng==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481165156", "bodyText": "It would be nice to have a comment here explaining the consequence of \"setChannelPrimer\" that the channel is created once, but periodically creates a new channel, runs BigtableChannelPrimer on the newly created channel and replaces the existing one with the new one.", "author": "tonytanger", "createdAt": "2020-09-01T14:08:27Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -120,65 +123,89 @@\n \n   public static EnhancedBigtableStub create(EnhancedBigtableStubSettings settings)\n       throws IOException {\n-    ClientContext clientContext = ClientContext.create(settings);\n+    settings = finalizeSettings(settings, Tags.getTagger(), Stats.getStatsRecorder());\n \n-    return new EnhancedBigtableStub(\n-        settings, clientContext, Tags.getTagger(), Stats.getStatsRecorder());\n+    return new EnhancedBigtableStub(settings, ClientContext.create(settings));\n   }\n \n-  @InternalApi(\"Visible for testing\")\n-  public EnhancedBigtableStub(\n-      EnhancedBigtableStubSettings settings,\n-      ClientContext clientContext,\n-      Tagger tagger,\n-      StatsRecorder statsRecorder) {\n-    this.settings = settings;\n+  public static EnhancedBigtableStubSettings finalizeSettings(\n+      EnhancedBigtableStubSettings settings, Tagger tagger, StatsRecorder stats)\n+      throws IOException {\n+    EnhancedBigtableStubSettings.Builder builder = settings.toBuilder();\n+\n+    if (settings.isRefreshingChannel()) {\n+      // Fix the credentials so that they can be shared\n+      Credentials credentials = null;\n+      if (settings.getCredentialsProvider() != null) {\n+        credentials = settings.getCredentialsProvider().getCredentials();\n+      }\n+      builder.setCredentialsProvider(FixedCredentialsProvider.create(credentials));\n+\n+      // Inject the primer\n+      InstantiatingGrpcChannelProvider transportProvider =\n+          (InstantiatingGrpcChannelProvider) settings.getTransportChannelProvider();\n+\n+      builder.setTransportChannelProvider(\n+          transportProvider\n+              .toBuilder()\n+              .setChannelPrimer(", "originalCommit": "555b9ab71595361eee6df24a669317de6cb79fe9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjA4OA==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481246088", "bodyText": "I dont quite follow, can you rephrase?", "author": "igorbernstein2", "createdAt": "2020-09-01T15:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE2NTE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5e1a94dad7818040879247a98de7928f35ed60e4", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\nindex 7e177442..d729d624 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java\n\n@@ -133,6 +133,10 @@ public class EnhancedBigtableStub implements AutoCloseable {\n       throws IOException {\n     EnhancedBigtableStubSettings.Builder builder = settings.toBuilder();\n \n+    // TODO: this implementation is on the cusp of unwieldy, if we end up adding more features\n+    // consider splitting it up by feature.\n+\n+    // Inject channel priming\n     if (settings.isRefreshingChannel()) {\n       // Fix the credentials so that they can be shared\n       Credentials credentials = null;\n"}}, {"oid": "91cb7a5eca4316173513d34dd44dc9fa028ae2c4", "url": "https://github.com/googleapis/java-bigtable/commit/91cb7a5eca4316173513d34dd44dc9fa028ae2c4", "message": "address some feedback", "committedDate": "2020-09-01T15:49:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNTE5OQ==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481315199", "bodyText": "(see codecov warning) is this really not covered? I'd expect it would be in BigtableChannelPrimerTest?", "author": "kolea2", "createdAt": "2020-09-01T17:32:19Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/BigtableChannelPrimer.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub;\n+\n+import static com.google.cloud.bigtable.data.v2.models.Filters.FILTERS;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.BetaApi;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.core.InstantiatingExecutorProvider;\n+import com.google.api.gax.grpc.ChannelPrimer;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.models.Row;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ManagedChannel;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import org.threeten.bp.Duration;\n+\n+/**\n+ * A channel warmer that ensures that a Bigtable channel is ready to be used before being added to\n+ * the active {@link com.google.api.gax.grpc.ChannelPool}.\n+ *\n+ * <p>This implementation is subject to change in the future, but currently it will prime the\n+ * channel by sending a ReadRow request for a hardcoded, non-existent row key.\n+ */\n+@BetaApi(\"Channel priming is not currently stable and might change in the future\")\n+class BigtableChannelPrimer implements ChannelPrimer {\n+  private static Logger LOG = Logger.getLogger(BigtableChannelPrimer.class.toString());\n+\n+  static ByteString PRIMING_ROW_KEY = ByteString.copyFromUtf8(\"nonexistent-priming-row\");\n+  private static Duration PRIME_REQUEST_TIMEOUT = Duration.ofSeconds(30);\n+\n+  private final EnhancedBigtableStubSettings settingsTemplate;\n+  private final List<String> tableIds;\n+\n+  static BigtableChannelPrimer create(\n+      Credentials credentials,\n+      String projectId,\n+      String instanceId,\n+      String appProfileId,\n+      List<String> tableIds) {\n+    EnhancedBigtableStubSettings.Builder builder =\n+        EnhancedBigtableStubSettings.newBuilder()\n+            .setProjectId(projectId)\n+            .setInstanceId(instanceId)\n+            .setAppProfileId(appProfileId)\n+            .setCredentialsProvider(FixedCredentialsProvider.create(credentials))\n+            .setExecutorProvider(\n+                InstantiatingExecutorProvider.newBuilder().setExecutorThreadCount(1).build());\n+\n+    // Disable retries for priming request\n+    builder\n+        .readRowSettings()\n+        .setRetrySettings(\n+            builder\n+                .readRowSettings()\n+                .getRetrySettings()\n+                .toBuilder()\n+                .setMaxAttempts(1)\n+                .setJittered(false)\n+                .setInitialRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setMaxRpcTimeout(PRIME_REQUEST_TIMEOUT)\n+                .setTotalTimeout(PRIME_REQUEST_TIMEOUT)\n+                .build());\n+    return new BigtableChannelPrimer(builder.build(), tableIds);\n+  }\n+\n+  private BigtableChannelPrimer(\n+      EnhancedBigtableStubSettings settingsTemplate, List<String> tableIds) {\n+    Preconditions.checkNotNull(settingsTemplate, \"settingsTemplate can't be null\");\n+    this.settingsTemplate = settingsTemplate;\n+    this.tableIds = ImmutableList.copyOf(tableIds);\n+  }\n+\n+  @Override\n+  public void primeChannel(ManagedChannel managedChannel) {\n+    try {\n+      primeChannelUnsafe(managedChannel);\n+    } catch (IOException | RuntimeException e) {\n+      LOG.warning(\n+          String.format(\"Unexpected error while trying to prime a channel: %s\", e.getMessage()));\n+    }", "originalCommit": "91cb7a5eca4316173513d34dd44dc9fa028ae2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTExOA==", "url": "https://github.com/googleapis/java-bigtable/pull/398#discussion_r481369118", "bodyText": "That branch is for unexpected errors, I added a test to handle that as well", "author": "igorbernstein2", "createdAt": "2020-09-01T19:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNTE5OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5e1a94dad7818040879247a98de7928f35ed60e4", "url": "https://github.com/googleapis/java-bigtable/commit/5e1a94dad7818040879247a98de7928f35ed60e4", "message": "add additional error handling test + some comments", "committedDate": "2020-09-01T19:04:48Z", "type": "commit"}]}