{"pr_number": 371, "pr_title": "chore: Introspect peer IP address for directpath tests", "pr_createdAt": "2020-07-21T00:34:50Z", "pr_url": "https://github.com/googleapis/java-bigtable/pull/371", "timeline": [{"oid": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab", "url": "https://github.com/googleapis/java-bigtable/commit/3f2f322ef7c2b63bf83ef0824a987b269b14c7ab", "message": "Add peer IP check for directpath tests", "committedDate": "2020-07-21T00:17:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzMjU2MA==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458132560", "bodyText": "I think it would be slightly cleaner to use setInterceptorProvider instead of the configurator", "author": "igorbernstein2", "createdAt": "2020-07-21T14:17:52Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -81,6 +103,24 @@ private CloudEnv(\n       dataSettings.stubSettings().setEndpoint(dataEndpoint);\n     }\n \n+    if (isDirectPathEnabled()) {\n+      TransportChannelProvider channelProvider = dataSettings.stubSettings().getTransportChannelProvider();\n+      InstantiatingGrpcChannelProvider defaultTransportProvider = (InstantiatingGrpcChannelProvider) channelProvider;\n+      InstantiatingGrpcChannelProvider instrumentedTransportChannelProvider =\n+          defaultTransportProvider\n+              .toBuilder()\n+              .setChannelConfigurator(", "originalCommit": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNDUyMg==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458314522", "bodyText": "Thanks for the pointer. One concern I had of using setInterceptorProvider is, if the existing channel provider already has its interceptor provider, then we would be replacing the existing one with the one we created. It would be good if we could retrieve the existing interceptor provider and add our own interceptor on top of that, but I couldn't find a good way of doing this. WDYT?", "author": "WeiranFang", "createdAt": "2020-07-21T18:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzMjU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMzMyOA==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458323328", "bodyText": "Thats a fair point. It would be nice if gax had the ability to add an interceptor. I guess leave it as is for now", "author": "igorbernstein2", "createdAt": "2020-07-21T19:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzMjU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "8ec1eb7e1539a53913daf224ae6b0b3b5eec0824", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\nindex f6565fb5..7afeeae8 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n\n@@ -113,7 +111,7 @@ class CloudEnv extends AbstractTestEnv {\n                   new ApiFunction<ManagedChannelBuilder, ManagedChannelBuilder>() {\n                     @Override\n                     public ManagedChannelBuilder apply(ManagedChannelBuilder builder) {\n-                      builder.intercept(recordClientCallInterceptor(clientCallCapture));\n+                      builder.intercept(directPathAddressCheckInterceptor());\n                       return builder;\n                     }\n                   })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzODExNw==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458138117", "bodyText": "why is this needed? I think it can safely be a local nonatomic variable in the interceptor", "author": "igorbernstein2", "createdAt": "2020-07-21T14:25:01Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -51,6 +72,7 @@\n   private final BigtableDataSettings.Builder dataSettings;\n   private final BigtableTableAdminSettings.Builder tableAdminSettings;\n   private final BigtableInstanceAdminSettings.Builder instanceAdminSettings;\n+  private final AtomicReference<ClientCall<?, ?>> clientCallCapture = new AtomicReference<>();", "originalCommit": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNzY4MQ==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458327681", "bodyText": "Right, since it's a per-call interceptor, it should be safe to just use a local variable. Thanks for pointing that out", "author": "WeiranFang", "createdAt": "2020-07-21T19:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzODExNw=="}], "type": "inlineReview", "revised_code": {"commit": "8ec1eb7e1539a53913daf224ae6b0b3b5eec0824", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\nindex f6565fb5..7afeeae8 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n\n@@ -72,7 +71,6 @@ class CloudEnv extends AbstractTestEnv {\n   private final BigtableDataSettings.Builder dataSettings;\n   private final BigtableTableAdminSettings.Builder tableAdminSettings;\n   private final BigtableInstanceAdminSettings.Builder instanceAdminSettings;\n-  private final AtomicReference<ClientCall<?, ?>> clientCallCapture = new AtomicReference<>();\n \n   private BigtableDataClient dataClient;\n   private BigtableTableAdminClient tableAdminClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzOTA0OQ==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458139049", "bodyText": "The name & javadoc are a bit misleading: this enforces that the ip is a direct path ip, the recording aspect seems to be a leftover from a previous approach", "author": "igorbernstein2", "createdAt": "2020-07-21T14:26:13Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +193,53 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is established.\n+   * This is useful for DirectPath testing and debugging.\n+   * {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor recordClientCallInterceptor(", "originalCommit": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNzg5Nw==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458327897", "bodyText": "Updated.", "author": "WeiranFang", "createdAt": "2020-07-21T19:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzOTA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ec1eb7e1539a53913daf224ae6b0b3b5eec0824", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\nindex f6565fb5..7afeeae8 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n\n@@ -195,18 +193,19 @@ class CloudEnv extends AbstractTestEnv {\n   }\n \n   /**\n-   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is established.\n-   * This is useful for DirectPath testing and debugging.\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is\n+   * established and verifies if the remote address is a DirectPath address.\n+   * This is only used for DirectPath testing.\n    * {@link ClientCall#getAttributes()}\n    */\n-  private ClientInterceptor recordClientCallInterceptor(\n-      final AtomicReference<ClientCall<?, ?>> clientCallCapture) {\n+  private ClientInterceptor directPathAddressCheckInterceptor() {\n     return new ClientInterceptor() {\n+      private ClientCall<?, ?> capturedCall;\n       @Override\n       public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n           MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n         ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n-        clientCallCapture.set(clientCall);\n+        capturedCall = clientCall;\n         return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n           @Override\n           public void start(Listener<RespT> responseListener, Metadata headers) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MTE3Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458141172", "bodyText": "Is it safe to throw exceptions here? will grpc cancel the underlying call? will the supplied listener to be notified of the failure?", "author": "igorbernstein2", "createdAt": "2020-07-21T14:28:54Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +193,53 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is established.\n+   * This is useful for DirectPath testing and debugging.\n+   * {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor recordClientCallInterceptor(\n+      final AtomicReference<ClientCall<?, ?>> clientCallCapture) {\n+    return new ClientInterceptor() {\n+      @Override\n+      public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+          MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n+        ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n+        clientCallCapture.set(clientCall);\n+        return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n+          @Override\n+          public void start(Listener<RespT> responseListener, Metadata headers) {\n+            super.start(new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+              @Override\n+              public void onHeaders(Metadata headers) {\n+                // Check peer IP after connection is established.\n+                SocketAddress remoteAddr = clientCallCapture.get().getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR);\n+                if (!verifyRemoteAddress(remoteAddr)) {\n+                  throw new RuntimeException(String.format(", "originalCommit": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNzkzNQ==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458327935", "bodyText": "Yes, it will throw java.util.concurrent.ExecutionException: com.google.api.gax.rpc.CancelledException: io.grpc.StatusRuntimeException: CANCELLED: Failed to read headers", "author": "WeiranFang", "createdAt": "2020-07-21T19:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MTE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MjkzMA==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458342930", "bodyText": "Good to know that its safe, but the test failure will be hard for someone to track down.\nCan you make the message more explicit, something along the lines of:\n\"Synthetically aborting the current request because it did not adhere to the test environment's requirement for DirectPath. Expected test to access DirectPath via %s, but RPC was destined for %s\"", "author": "igorbernstein2", "createdAt": "2020-07-21T19:41:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MTE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8ec1eb7e1539a53913daf224ae6b0b3b5eec0824", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\nindex f6565fb5..7afeeae8 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n\n@@ -195,18 +193,19 @@ class CloudEnv extends AbstractTestEnv {\n   }\n \n   /**\n-   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is established.\n-   * This is useful for DirectPath testing and debugging.\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is\n+   * established and verifies if the remote address is a DirectPath address.\n+   * This is only used for DirectPath testing.\n    * {@link ClientCall#getAttributes()}\n    */\n-  private ClientInterceptor recordClientCallInterceptor(\n-      final AtomicReference<ClientCall<?, ?>> clientCallCapture) {\n+  private ClientInterceptor directPathAddressCheckInterceptor() {\n     return new ClientInterceptor() {\n+      private ClientCall<?, ?> capturedCall;\n       @Override\n       public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n           MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n         ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n-        clientCallCapture.set(clientCall);\n+        capturedCall = clientCall;\n         return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n           @Override\n           public void start(Listener<RespT> responseListener, Metadata headers) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MTc4Ng==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458141786", "bodyText": "why does this have to be atomic?", "author": "igorbernstein2", "createdAt": "2020-07-21T14:29:33Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +193,53 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is established.\n+   * This is useful for DirectPath testing and debugging.\n+   * {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor recordClientCallInterceptor(\n+      final AtomicReference<ClientCall<?, ?>> clientCallCapture) {\n+    return new ClientInterceptor() {\n+      @Override\n+      public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+          MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n+        ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n+        clientCallCapture.set(clientCall);", "originalCommit": "3f2f322ef7c2b63bf83ef0824a987b269b14c7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyODA3NA==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458328074", "bodyText": "Done.", "author": "WeiranFang", "createdAt": "2020-07-21T19:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MTc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8ec1eb7e1539a53913daf224ae6b0b3b5eec0824", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\nindex f6565fb5..7afeeae8 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n\n@@ -195,18 +193,19 @@ class CloudEnv extends AbstractTestEnv {\n   }\n \n   /**\n-   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is established.\n-   * This is useful for DirectPath testing and debugging.\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is\n+   * established and verifies if the remote address is a DirectPath address.\n+   * This is only used for DirectPath testing.\n    * {@link ClientCall#getAttributes()}\n    */\n-  private ClientInterceptor recordClientCallInterceptor(\n-      final AtomicReference<ClientCall<?, ?>> clientCallCapture) {\n+  private ClientInterceptor directPathAddressCheckInterceptor() {\n     return new ClientInterceptor() {\n+      private ClientCall<?, ?> capturedCall;\n       @Override\n       public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n           MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n         ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n-        clientCallCapture.set(clientCall);\n+        capturedCall = clientCall;\n         return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n           @Override\n           public void start(Listener<RespT> responseListener, Metadata headers) {\n"}}, {"oid": "8ec1eb7e1539a53913daf224ae6b0b3b5eec0824", "url": "https://github.com/googleapis/java-bigtable/commit/8ec1eb7e1539a53913daf224ae6b0b3b5eec0824", "message": "remove atomic reference", "committedDate": "2020-07-21T19:11:14Z", "type": "commit"}, {"oid": "acad273c0aa06b0c9a670c7c2cfd0744fa65a126", "url": "https://github.com/googleapis/java-bigtable/commit/acad273c0aa06b0c9a670c7c2cfd0744fa65a126", "message": "fix lint", "committedDate": "2020-07-21T19:35:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MDIwNw==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458340207", "bodyText": "I dont think you need capturedCall here, the inner class should be able to access clientCall directly", "author": "igorbernstein2", "createdAt": "2020-07-21T19:35:36Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +191,54 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is\n+   * established and verifies if the remote address is a DirectPath address.\n+   * This is only used for DirectPath testing.\n+   * {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor directPathAddressCheckInterceptor() {\n+    return new ClientInterceptor() {\n+      private ClientCall<?, ?> capturedCall;\n+      @Override\n+      public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+          MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n+        ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n+        capturedCall = clientCall;", "originalCommit": "8ec1eb7e1539a53913daf224ae6b0b3b5eec0824", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NDk2NQ==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458374965", "bodyText": "Done.", "author": "WeiranFang", "createdAt": "2020-07-21T20:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MDIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "cbe32b8b0180e1203219238ae09886cbcc612609", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\nindex 7afeeae8..7d45d9a7 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n\n@@ -194,35 +196,38 @@ class CloudEnv extends AbstractTestEnv {\n \n   /**\n    * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is\n-   * established and verifies if the remote address is a DirectPath address.\n-   * This is only used for DirectPath testing.\n-   * {@link ClientCall#getAttributes()}\n+   * established and verifies if the remote address is a DirectPath address. This is only used for\n+   * DirectPath testing. {@link ClientCall#getAttributes()}\n    */\n   private ClientInterceptor directPathAddressCheckInterceptor() {\n     return new ClientInterceptor() {\n-      private ClientCall<?, ?> capturedCall;\n       @Override\n       public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n           MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n-        ClientCall<ReqT, RespT> clientCall = next.newCall(method,callOptions);\n-        capturedCall = clientCall;\n+        final ClientCall<ReqT, RespT> clientCall = next.newCall(method, callOptions);\n         return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n           @Override\n           public void start(Listener<RespT> responseListener, Metadata headers) {\n-            super.start(new SimpleForwardingClientCallListener<RespT>(responseListener) {\n-              @Override\n-              public void onHeaders(Metadata headers) {\n-                // Check peer IP after connection is established.\n-                SocketAddress remoteAddr = capturedCall.getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR);\n-                if (!verifyRemoteAddress(remoteAddr)) {\n-                  throw new RuntimeException(String.format(\n-                      \"Unexpected remote address: %s on DirectPath %s\",\n-                      remoteAddr.toString(),\n-                      isDirectPathIpv4() ? \"ipv4\" : \"ipv6\"));\n-                }\n-                super.onHeaders(headers);\n-              }\n-            }, headers);\n+            super.start(\n+                new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+                  @Override\n+                  public void onHeaders(Metadata headers) {\n+                    // Check peer IP after connection is established.\n+                    SocketAddress remoteAddr =\n+                        clientCall.getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR);\n+                    if (!verifyRemoteAddress(remoteAddr)) {\n+                      throw new RuntimeException(\n+                          String.format(\n+                              \"Synthetically aborting the current request because it did not adhere\"\n+                                  + \" to the test environment's requirement for DirectPath.\"\n+                                  + \" Expected test to access DirectPath via %s,\"\n+                                  + \" but RPC was destined for %s\",\n+                              remoteAddr.toString(), isDirectPathIpv4() ? \"ipv4\" : \"ipv6\"));\n+                    }\n+                    super.onHeaders(headers);\n+                  }\n+                },\n+                headers);\n           }\n         };\n       }\n"}}, {"oid": "cbe32b8b0180e1203219238ae09886cbcc612609", "url": "https://github.com/googleapis/java-bigtable/commit/cbe32b8b0180e1203219238ae09886cbcc612609", "message": "make failure message more explicit", "committedDate": "2020-07-21T20:39:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MDUxOQ==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458380519", "bodyText": "I think your parameters are backwards:\nExpected test to access DirectPath via %s, but RPC was destined for %s\"\nso the values should be flipped:\nisDirectPathIpv4() ? \"ipv4\" : \"ipv6\", remoteAddr.toString()", "author": "igorbernstein2", "createdAt": "2020-07-21T20:52:25Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java", "diffHunk": "@@ -153,4 +193,57 @@ private static String getRequiredProperty(String prop) {\n     }\n     return value;\n   }\n+\n+  /**\n+   * Captures the request attributes \"Grpc.TRANSPORT_ATTR_REMOTE_ADDR\" when connection is\n+   * established and verifies if the remote address is a DirectPath address. This is only used for\n+   * DirectPath testing. {@link ClientCall#getAttributes()}\n+   */\n+  private ClientInterceptor directPathAddressCheckInterceptor() {\n+    return new ClientInterceptor() {\n+      @Override\n+      public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+          MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n+        final ClientCall<ReqT, RespT> clientCall = next.newCall(method, callOptions);\n+        return new SimpleForwardingClientCall<ReqT, RespT>(clientCall) {\n+          @Override\n+          public void start(Listener<RespT> responseListener, Metadata headers) {\n+            super.start(\n+                new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+                  @Override\n+                  public void onHeaders(Metadata headers) {\n+                    // Check peer IP after connection is established.\n+                    SocketAddress remoteAddr =\n+                        clientCall.getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR);\n+                    if (!verifyRemoteAddress(remoteAddr)) {\n+                      throw new RuntimeException(\n+                          String.format(\n+                              \"Synthetically aborting the current request because it did not adhere\"\n+                                  + \" to the test environment's requirement for DirectPath.\"\n+                                  + \" Expected test to access DirectPath via %s,\"\n+                                  + \" but RPC was destined for %s\",\n+                              remoteAddr.toString(), isDirectPathIpv4() ? \"ipv4\" : \"ipv6\"));", "originalCommit": "cbe32b8b0180e1203219238ae09886cbcc612609", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MjcwOQ==", "url": "https://github.com/googleapis/java-bigtable/pull/371#discussion_r458382709", "bodyText": "oops :) Done.", "author": "WeiranFang", "createdAt": "2020-07-21T20:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MDUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b2969cbfc2cfa7648b96b43f4d668a043d7dacfd", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\nindex 7d45d9a7..87aab527 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env/CloudEnv.java\n\n@@ -222,7 +222,7 @@ class CloudEnv extends AbstractTestEnv {\n                                   + \" to the test environment's requirement for DirectPath.\"\n                                   + \" Expected test to access DirectPath via %s,\"\n                                   + \" but RPC was destined for %s\",\n-                              remoteAddr.toString(), isDirectPathIpv4() ? \"ipv4\" : \"ipv6\"));\n+                              isDirectPathIpv4() ? \"ipv4\" : \"ipv6\", remoteAddr.toString()));\n                     }\n                     super.onHeaders(headers);\n                   }\n"}}, {"oid": "b2969cbfc2cfa7648b96b43f4d668a043d7dacfd", "url": "https://github.com/googleapis/java-bigtable/commit/b2969cbfc2cfa7648b96b43f4d668a043d7dacfd", "message": "string format fix", "committedDate": "2020-07-21T20:55:58Z", "type": "commit"}, {"oid": "409fbeb4f9e843ab1d0037dab1ab63f4ef8ab9f6", "url": "https://github.com/googleapis/java-bigtable/commit/409fbeb4f9e843ab1d0037dab1ab63f4ef8ab9f6", "message": "fix grpc-log-dir and summaryFile", "committedDate": "2020-07-23T20:36:01Z", "type": "commit"}, {"oid": "c31aa52a0abc4707351cd766db2800a689828ae3", "url": "https://github.com/googleapis/java-bigtable/commit/c31aa52a0abc4707351cd766db2800a689828ae3", "message": "Merge remote-tracking branch 'origin/master' into dp-ip-check", "committedDate": "2020-07-31T05:53:03Z", "type": "commit"}]}