{"pr_number": 515, "pr_title": "feat: allow restore backup to different instance", "pr_createdAt": "2020-11-05T18:58:27Z", "pr_url": "https://github.com/googleapis/java-bigtable/pull/515", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NjU0Ng==", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r518896546", "bodyText": "what are your thoughts on renaming sourceInstanceId to destinationInstanceId, or targetInstanceId? 'source' is a little confusing to me", "author": "kolea2", "createdAt": "2020-11-06T17:26:01Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "diffHunk": "@@ -20,24 +20,47 @@\n import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /** Fluent wrapper for {@link com.google.bigtable.admin.v2.RestoreTableRequest} */\n public final class RestoreTableRequest {\n   private final com.google.bigtable.admin.v2.RestoreTableRequest.Builder requestBuilder =\n       com.google.bigtable.admin.v2.RestoreTableRequest.newBuilder();\n-  private final String backupId;\n-  private final String clusterId;\n+  private final String sourceBackupId;\n+  private final String sourceClusterId;\n+  private final String sourceInstanceId;\n \n-  public static RestoreTableRequest of(String clusterId, String backupId) {\n-    RestoreTableRequest request = new RestoreTableRequest(clusterId, backupId);\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(String sourceClusterId, String sourceBackupId) {\n+    RestoreTableRequest request = new RestoreTableRequest(null, sourceClusterId, sourceBackupId);\n     return request;\n   }\n \n-  private RestoreTableRequest(String clusterId, String backupId) {\n-    Preconditions.checkNotNull(clusterId);\n-    Preconditions.checkNotNull(backupId);\n-    this.backupId = backupId;\n-    this.clusterId = clusterId;\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(\n+      String sourceInstanceId, String sourceClusterId, String sourceBackupId) {", "originalCommit": "8146fb3cde20ac206d939050820db73b1238c6e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTMxMw==", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r520205313", "bodyText": "ignore - I misunderstood the usage here", "author": "kolea2", "createdAt": "2020-11-10T00:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NjU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ef66710cb2416dfd68cd9a854b02998a87daa193", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java\nindex 53b0dae7..0547ebae 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java\n\n@@ -41,9 +41,8 @@ public final class RestoreTableRequest {\n   }\n \n   /**\n-   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n-   * instance as the destination table. To restore a table from a backup in another instance, use\n-   * {@link #of(String, String, String) of} method.\n+   * Create a {@link RestoreTableRequest} object. The source backup could locate in a the same or a\n+   * different instance.\n    */\n   public static RestoreTableRequest of(\n       String sourceInstanceId, String sourceClusterId, String sourceBackupId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5Njk2Ng==", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r518896966", "bodyText": "FYI, this will need to be rebased when #498 is merged", "author": "kolea2", "createdAt": "2020-11-06T17:26:44Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java", "diffHunk": "@@ -360,6 +362,55 @@ public void backupIamTest() throws InterruptedException {\n     assertThat(permissions).hasSize(4);\n   }\n \n+  @Test", "originalCommit": "8146fb3cde20ac206d939050820db73b1238c6e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYzMDQ2NA==", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r558630464", "bodyText": "Rebase the test code.", "author": "liubonan", "createdAt": "2021-01-15T22:44:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5Njk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "effb896ed4e2fdb49f646549ba0c800e189e2a8f", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java\nindex 3a165d66..b6b77c4e 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java\n\n@@ -308,92 +266,68 @@ public class BigtableBackupIT {\n   @Test\n   public void restoreTableTest() throws InterruptedException, ExecutionException {\n     String backupId = generateId(\"restore-\" + TEST_BACKUP_SUFFIX);\n-    String tableId = generateId(\"restored-table\");\n-    createBackupAndWait(backupId);\n+    String restoredTableId = generateId(\"restored-table\");\n+    tableAdmin.createBackup(createBackupRequest(backupId));\n \n     // Wait 2 minutes so that the RestoreTable API will trigger an optimize restored\n     // table operation.\n     Thread.sleep(120 * 1000);\n \n     try {\n-      RestoreTableRequest req = RestoreTableRequest.of(targetCluster, backupId).setTableId(tableId);\n+      RestoreTableRequest req =\n+          RestoreTableRequest.of(targetCluster, backupId).setTableId(restoredTableId);\n       RestoredTableResult result = tableAdmin.restoreTable(req);\n       assertWithMessage(\"Incorrect restored table id\")\n           .that(result.getTable().getId())\n-          .isEqualTo(tableId);\n-\n-      // The assertion might be missing if the test is running against a HDD cluster or an\n-      // optimization is not necessary.\n-      assertWithMessage(\"Empty OptimizeRestoredTable token\")\n-          .that(result.getOptimizeRestoredTableOperationToken())\n-          .isNotNull();\n-      tableAdmin.awaitOptimizeRestoredTable(result.getOptimizeRestoredTableOperationToken());\n-      tableAdmin.getTable(tableId);\n+          .isEqualTo(restoredTableId);\n+\n+      if (result.getOptimizeRestoredTableOperationToken() != null) {\n+        // The assertion might be missing if the test is running against a HDD cluster or an\n+        // optimization is not necessary.\n+        tableAdmin.awaitOptimizeRestoredTable(result.getOptimizeRestoredTableOperationToken());\n+        Table restoredTable = tableAdmin.getTable(restoredTableId);\n+        assertWithMessage(\"Incorrect restored table id\")\n+            .that(restoredTable.getId())\n+            .isEqualTo(restoredTableId);\n+      }\n     } finally {\n       tableAdmin.deleteBackup(targetCluster, backupId);\n-      tableAdmin.deleteTable(tableId);\n+      tableAdmin.deleteTable(restoredTableId);\n     }\n   }\n \n-  @Test\n-  public void backupIamTest() throws InterruptedException {\n-    String backupId = generateId(\"iam-\" + TEST_BACKUP_SUFFIX);\n-    createBackupAndWait(backupId);\n-\n-    Policy policy = tableAdmin.getBackupIamPolicy(targetCluster, backupId);\n-    assertThat(policy).isNotNull();\n-\n-    Exception actualEx = null;\n-    try {\n-      assertThat(tableAdmin.setBackupIamPolicy(targetCluster, backupId, policy)).isNotNull();\n-    } catch (Exception iamException) {\n-      actualEx = iamException;\n-    }\n-    assertThat(actualEx).isNull();\n-\n-    List<String> permissions =\n-        tableAdmin.testBackupIamPermission(\n-            targetCluster,\n-            backupId,\n-            \"bigtable.backups.get\",\n-            \"bigtable.backups.delete\",\n-            \"bigtable.backups.update\",\n-            \"bigtable.backups.restore\");\n-    assertThat(permissions).hasSize(4);\n-  }\n-\n   @Test\n   public void crossInstanceRestoreTest()\n       throws InterruptedException, IOException, ExecutionException {\n-    String destInstance = System.getProperty(DEST_INSTANCE_PROPERTY_NAME);\n-    if (destInstance == null) {\n-      throw new AssumptionViolatedException(\n-          DEST_INSTANCE_PROPERTY_NAME\n-              + \" property need to be set for test case crossInstanceRestoreTest.\");\n-    }\n-\n-    String backupId = generateId(\"cross-instance\" + TEST_BACKUP_SUFFIX);\n-    String tableId = generateId(\"cross-instance-restored-table\");\n-    createBackupAndWait(backupId);\n+    String backupId = generateId(\"cross-\" + TEST_BACKUP_SUFFIX);\n+    String restoredTableId = generateId(\"restored-table\");\n+    tableAdmin.createBackup(createBackupRequest(backupId));\n \n     // Wait 2 minutes so that the RestoreTable API will trigger an optimize restored\n     // table operation.\n     Thread.sleep(120 * 1000);\n \n-    BigtableTableAdminSettings.Builder settings =\n-        BigtableTableAdminSettings.newBuilder()\n-            .setInstanceId(destInstance)\n-            .setProjectId(targetProject);\n-    settings.stubSettings().setEndpoint(adminApiEndpoint);\n-    BigtableTableAdminClient destTableAdmin = BigtableTableAdminClient.create(settings.build());\n+    // Set up a new instance to test cross-instance restore.\n+    String destInstance =\n+        AbstractTestEnv.TEST_INSTANCE_PREFIX + \"backup-\" + Instant.now().getEpochSecond();\n+    String destCluster = AbstractTestEnv.TEST_CLUSTER_PREFIX + Instant.now().getEpochSecond();\n+    instanceAdmin.createInstance(\n+        CreateInstanceRequest.of(destInstance)\n+            .addCluster(destCluster, testEnvRule.env().getSecondaryZone(), 3, StorageType.SSD)\n+            .setDisplayName(\"backups-dest-test-instance\")\n+            .addLabel(\"state\", \"readytodelete\")\n+            .setType(Type.PRODUCTION));\n+    BigtableTableAdminClient destTableAdmin =\n+        testEnvRule.env().getTableAdminClientForInstance(destInstance);\n \n     try {\n       RestoreTableRequest req =\n-          RestoreTableRequest.of(targetInstance, targetCluster, backupId).setTableId(tableId);\n+          RestoreTableRequest.of(targetInstance, targetCluster, backupId)\n+              .setTableId(restoredTableId);\n       RestoredTableResult result = destTableAdmin.restoreTable(req);\n       assertWithMessage(\"Incorrect restored table id\")\n           .that(result.getTable().getId())\n-          .isEqualTo(tableId);\n+          .isEqualTo(restoredTableId);\n       assertWithMessage(\"Incorrect instance id\")\n           .that(result.getTable().getInstanceId())\n           .isEqualTo(destInstance);\n"}}, {"oid": "d23bb2074ae308f20861317020a26173e7b7a0a9", "url": "https://github.com/googleapis/java-bigtable/commit/d23bb2074ae308f20861317020a26173e7b7a0a9", "message": "feat: allow restore backup to different instance", "committedDate": "2021-01-20T20:02:40Z", "type": "forcePushed"}, {"oid": "effb896ed4e2fdb49f646549ba0c800e189e2a8f", "url": "https://github.com/googleapis/java-bigtable/commit/effb896ed4e2fdb49f646549ba0c800e189e2a8f", "message": "feat: allow restore backup to different instance", "committedDate": "2021-01-20T20:08:11Z", "type": "forcePushed"}, {"oid": "042ed7619bbdb061e36e0f91a3019b813f366827", "url": "https://github.com/googleapis/java-bigtable/commit/042ed7619bbdb061e36e0f91a3019b813f366827", "message": "feat: allow restore backup to different instance", "committedDate": "2021-01-20T20:09:27Z", "type": "commit"}, {"oid": "042ed7619bbdb061e36e0f91a3019b813f366827", "url": "https://github.com/googleapis/java-bigtable/commit/042ed7619bbdb061e36e0f91a3019b813f366827", "message": "feat: allow restore backup to different instance", "committedDate": "2021-01-20T20:09:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTU4MjA2Nw==", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r621582067", "bodyText": "nit: this javadoc needs updating", "author": "kolea2", "createdAt": "2021-04-27T20:36:52Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "diffHunk": "@@ -20,24 +20,47 @@\n import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /** Fluent wrapper for {@link com.google.bigtable.admin.v2.RestoreTableRequest} */\n public final class RestoreTableRequest {\n   private final com.google.bigtable.admin.v2.RestoreTableRequest.Builder requestBuilder =\n       com.google.bigtable.admin.v2.RestoreTableRequest.newBuilder();\n-  private final String backupId;\n-  private final String clusterId;\n+  private final String sourceBackupId;\n+  private final String sourceClusterId;\n+  private final String sourceInstanceId;\n \n-  public static RestoreTableRequest of(String clusterId, String backupId) {\n-    RestoreTableRequest request = new RestoreTableRequest(clusterId, backupId);\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(String sourceClusterId, String sourceBackupId) {\n+    RestoreTableRequest request = new RestoreTableRequest(null, sourceClusterId, sourceBackupId);\n     return request;\n   }\n \n-  private RestoreTableRequest(String clusterId, String backupId) {\n-    Preconditions.checkNotNull(clusterId);\n-    Preconditions.checkNotNull(backupId);\n-    this.backupId = backupId;\n-    this.clusterId = clusterId;\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same", "originalCommit": "042ed7619bbdb061e36e0f91a3019b813f366827", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef66710cb2416dfd68cd9a854b02998a87daa193", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java\nindex 53b0dae7..0547ebae 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java\n\n@@ -41,9 +41,8 @@ public final class RestoreTableRequest {\n   }\n \n   /**\n-   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n-   * instance as the destination table. To restore a table from a backup in another instance, use\n-   * {@link #of(String, String, String) of} method.\n+   * Create a {@link RestoreTableRequest} object. The source backup could locate in a the same or a\n+   * different instance.\n    */\n   public static RestoreTableRequest of(\n       String sourceInstanceId, String sourceClusterId, String sourceBackupId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTU4MjQwOQ==", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r621582409", "bodyText": "the variables in the test are target.... Should these be renamed?", "author": "kolea2", "createdAt": "2021-04-27T20:37:25Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java", "diffHunk": "@@ -20,24 +20,47 @@\n import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /** Fluent wrapper for {@link com.google.bigtable.admin.v2.RestoreTableRequest} */\n public final class RestoreTableRequest {\n   private final com.google.bigtable.admin.v2.RestoreTableRequest.Builder requestBuilder =\n       com.google.bigtable.admin.v2.RestoreTableRequest.newBuilder();\n-  private final String backupId;\n-  private final String clusterId;\n+  private final String sourceBackupId;\n+  private final String sourceClusterId;\n+  private final String sourceInstanceId;\n \n-  public static RestoreTableRequest of(String clusterId, String backupId) {\n-    RestoreTableRequest request = new RestoreTableRequest(clusterId, backupId);\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(String sourceClusterId, String sourceBackupId) {\n+    RestoreTableRequest request = new RestoreTableRequest(null, sourceClusterId, sourceBackupId);\n     return request;\n   }\n \n-  private RestoreTableRequest(String clusterId, String backupId) {\n-    Preconditions.checkNotNull(clusterId);\n-    Preconditions.checkNotNull(backupId);\n-    this.backupId = backupId;\n-    this.clusterId = clusterId;\n+  /**\n+   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n+   * instance as the destination table. To restore a table from a backup in another instance, use\n+   * {@link #of(String, String, String) of} method.\n+   */\n+  public static RestoreTableRequest of(\n+      String sourceInstanceId, String sourceClusterId, String sourceBackupId) {", "originalCommit": "042ed7619bbdb061e36e0f91a3019b813f366827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY0MjI5MA==", "url": "https://github.com/googleapis/java-bigtable/pull/515#discussion_r621642290", "bodyText": "Update the test case to make it clear that RestoreTable is destination-centric.", "author": "liubonan", "createdAt": "2021-04-27T22:16:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTU4MjQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ef66710cb2416dfd68cd9a854b02998a87daa193", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java\nindex 53b0dae7..0547ebae 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequest.java\n\n@@ -41,9 +41,8 @@ public final class RestoreTableRequest {\n   }\n \n   /**\n-   * Create a {@link RestoreTableRequest} object. It assumes the source backup locates in the same\n-   * instance as the destination table. To restore a table from a backup in another instance, use\n-   * {@link #of(String, String, String) of} method.\n+   * Create a {@link RestoreTableRequest} object. The source backup could locate in a the same or a\n+   * different instance.\n    */\n   public static RestoreTableRequest of(\n       String sourceInstanceId, String sourceClusterId, String sourceBackupId) {\n"}}, {"oid": "ef66710cb2416dfd68cd9a854b02998a87daa193", "url": "https://github.com/googleapis/java-bigtable/commit/ef66710cb2416dfd68cd9a854b02998a87daa193", "message": "Address comments in the PR.\n\nChange-Id: I3a2bb866d660cc5b6abb5a57b344dfc019c8cdf0", "committedDate": "2021-04-27T22:14:49Z", "type": "commit"}, {"oid": "8495075fb0de85c2c4652b2a41d1bf9c0f6a6500", "url": "https://github.com/googleapis/java-bigtable/commit/8495075fb0de85c2c4652b2a41d1bf9c0f6a6500", "message": "Merge branch 'master' of https://github.com/googleapis/java-bigtable\n\nChange-Id: I9d75b3c7135223e0f56266e797201a96efcc86a7", "committedDate": "2021-04-29T17:41:45Z", "type": "commit"}, {"oid": "b168074b6731e61c1dc12c83e24ed491b5342ee2", "url": "https://github.com/googleapis/java-bigtable/commit/b168074b6731e61c1dc12c83e24ed491b5342ee2", "message": "Improve unit test coverage for RestoreTableRequest.\n\nChange-Id: I65a08bcfcdef49478925037066d865e0963b4374", "committedDate": "2021-04-29T18:25:45Z", "type": "commit"}]}