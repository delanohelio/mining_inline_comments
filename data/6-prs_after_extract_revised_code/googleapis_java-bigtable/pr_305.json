{"pr_number": 305, "pr_title": "feat: Cloud Bigtable Managed Backup Implementation", "pr_createdAt": "2020-05-12T21:30:03Z", "pr_url": "https://github.com/googleapis/java-bigtable/pull/305", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzUxMw==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r424103513", "bodyText": "2020 (for this and other files)", "author": "kolea2", "createdAt": "2020-05-13T00:13:28Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/UpdateBackupRequestTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019 Google LLC", "originalCommit": "33ffd938c06352108ccf7c1e5c970cce27771c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4MzU3Ng==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r453983576", "bodyText": "Done for all new files. Existing headers are not touched.", "author": "liubonan", "createdAt": "2020-07-13T22:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/UpdateBackupRequestTest.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/UpdateBackupRequestTest.java\nindex 4d8f316e..c8d34833 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/UpdateBackupRequestTest.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/UpdateBackupRequestTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Google LLC\n+ * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjM2Ng==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r432686366", "bodyText": "I think we can clean these up.", "author": "kolea2", "createdAt": "2020-05-29T19:18:48Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java", "diffHunk": "@@ -775,6 +790,189 @@ public void awaitReplication(String tableId) {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")", "originalCommit": "33ffd938c06352108ccf7c1e5c970cce27771c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4MzUwNg==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r453983506", "bodyText": "Done for all files.", "author": "liubonan", "createdAt": "2020-07-13T22:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\nindex 46facb07..0fffcc54 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\n\n@@ -790,12 +789,50 @@ public final class BigtableTableAdminClient implements AutoCloseable {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n-  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  /**\n+   * Creates a backup with the specified configuration.\n+   *\n+   * <p>Sample code\n+   *\n+   * <pre>{@code\n+   * CreateBackupRequest request =\n+   *         CreateBackupRequest.of(clusterId, backupId)\n+   *             .setSourceTableId(tableId)\n+   *             .setExpireTime(expireTime);\n+   * Backup response = client.createBackup(request);\n+   * }</pre>\n+   */\n   public Backup createBackup(CreateBackupRequest request) {\n     return ApiExceptions.callAndTranslateApiException(createBackupAsync(request));\n   }\n \n-  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  /**\n+   * Creates a backup with the specified configuration asynchronously.\n+   *\n+   * <p>Sample code\n+   *\n+   * <pre>{@code\n+   * CreateBackupRequest request =\n+   *         CreateBackupRequest.of(clusterId, backupId)\n+   *             .setSourceTableId(tableId)\n+   *             .setExpireTime(expireTime);\n+   * ApiFuture<Backup> future = client.createBackupAsync(request);\n+   *\n+   * ApiFutures.addCallback(\n+   *   future,\n+   *   new ApiFutureCallback<Backup>() {\n+   *     public void onSuccess(Backup backup) {\n+   *       System.out.println(\"Successfully create the backup \" + backup.getId());\n+   *     }\n+   *\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *   },\n+   *   MoreExecutors.directExecutor()\n+   * );\n+   * }</pre>\n+   */\n   public ApiFuture<Backup> createBackupAsync(CreateBackupRequest request) {\n     return ApiFutures.transform(\n         stub.createBackupOperationCallable().futureCall(request.toProto(projectId, instanceId)),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjU0OA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r432686548", "bodyText": "@igorbernstein2 still relevant?", "author": "kolea2", "createdAt": "2020-05-29T19:19:14Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java", "diffHunk": "@@ -775,6 +790,189 @@ public void awaitReplication(String tableId) {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public Backup createBackup(CreateBackupRequest request) {\n+    return ApiExceptions.callAndTranslateApiException(createBackupAsync(request));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<Backup> createBackupAsync(CreateBackupRequest request) {\n+    return ApiFutures.transform(\n+        stub.createBackupOperationCallable().futureCall(request.toProto(projectId, instanceId)),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backupProto) {\n+            return Backup.fromProto(backupProto);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public Backup getBackup(String clusterId, String backupId) {\n+    return ApiExceptions.callAndTranslateApiException(getBackupAsync(clusterId, backupId));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<Backup> getBackupAsync(String clusterId, String backupId) {\n+    GetBackupRequest request =\n+        GetBackupRequest.newBuilder()\n+            .setName(NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId))\n+            .build();\n+    return ApiFutures.transform(\n+        this.stub.getBackupCallable().futureCall(request),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backup) {\n+            return Backup.fromProto(backup);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public List<String> listBackups(String clusterId) {\n+    return ApiExceptions.callAndTranslateApiException(listBackupsAsync(clusterId));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<List<String>> listBackupsAsync(String clusterId) {\n+    ListBackupsRequest request =\n+        ListBackupsRequest.newBuilder()\n+            .setParent(NameUtil.formatClusterName(projectId, instanceId, clusterId))\n+            .build();\n+\n+    // TODO(igorbernstein2): try to upstream pagination spooling or figure out a way to expose the", "originalCommit": "33ffd938c06352108ccf7c1e5c970cce27771c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4MjM2Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r443782362", "bodyText": "I'd like to extract this to a helper at the very least", "author": "igorbernstein2", "createdAt": "2020-06-22T19:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\nindex 46facb07..0fffcc54 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\n\n@@ -790,12 +789,50 @@ public final class BigtableTableAdminClient implements AutoCloseable {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n-  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  /**\n+   * Creates a backup with the specified configuration.\n+   *\n+   * <p>Sample code\n+   *\n+   * <pre>{@code\n+   * CreateBackupRequest request =\n+   *         CreateBackupRequest.of(clusterId, backupId)\n+   *             .setSourceTableId(tableId)\n+   *             .setExpireTime(expireTime);\n+   * Backup response = client.createBackup(request);\n+   * }</pre>\n+   */\n   public Backup createBackup(CreateBackupRequest request) {\n     return ApiExceptions.callAndTranslateApiException(createBackupAsync(request));\n   }\n \n-  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  /**\n+   * Creates a backup with the specified configuration asynchronously.\n+   *\n+   * <p>Sample code\n+   *\n+   * <pre>{@code\n+   * CreateBackupRequest request =\n+   *         CreateBackupRequest.of(clusterId, backupId)\n+   *             .setSourceTableId(tableId)\n+   *             .setExpireTime(expireTime);\n+   * ApiFuture<Backup> future = client.createBackupAsync(request);\n+   *\n+   * ApiFutures.addCallback(\n+   *   future,\n+   *   new ApiFutureCallback<Backup>() {\n+   *     public void onSuccess(Backup backup) {\n+   *       System.out.println(\"Successfully create the backup \" + backup.getId());\n+   *     }\n+   *\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *   },\n+   *   MoreExecutors.directExecutor()\n+   * );\n+   * }</pre>\n+   */\n   public ApiFuture<Backup> createBackupAsync(CreateBackupRequest request) {\n     return ApiFutures.transform(\n         stub.createBackupOperationCallable().futureCall(request.toProto(projectId, instanceId)),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4ODIyNw==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r432688227", "bodyText": "can we add tests for incorrectly formatted names?", "author": "kolea2", "createdAt": "2020-05-29T19:23:09Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/internal/NameUtilTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.internal;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class NameUtilTest {\n+  @Test\n+  public void extractBackupIdFromBackupNameTest() {", "originalCommit": "33ffd938c06352108ccf7c1e5c970cce27771c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4MzQxMQ==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r453983411", "bodyText": "Added test.", "author": "liubonan", "createdAt": "2020-07-13T22:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4ODIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/internal/NameUtilTest.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/internal/NameUtilTest.java\nindex 9c79c00e..a452a2bc 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/internal/NameUtilTest.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/internal/NameUtilTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Google LLC\n+ * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4ODkwNg==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r432688906", "bodyText": "will this work without the TABLE_ID? Why not add it as a parameter in the of method?", "author": "kolea2", "createdAt": "2020-05-29T19:24:46Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequestTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.bigtable.admin.v2.internal.NameUtil;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class RestoreTableRequestTest {\n+\n+  private static final String TABLE_ID = \"my-table\";\n+  private static final String BACKUP_ID = \"my-backup\";\n+  private static final String PROJECT_ID = \"my-project\";\n+  private static final String INSTANCE_ID = \"my-instance\";\n+  private static final String CLUSTER_ID = \"my-cluster\";\n+\n+  @Test\n+  public void testToProto() {\n+    RestoreTableRequest request =\n+        RestoreTableRequest.of(CLUSTER_ID, BACKUP_ID).setTableId(TABLE_ID);", "originalCommit": "33ffd938c06352108ccf7c1e5c970cce27771c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4MzQ2Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r453983462", "bodyText": "@igorbernstein2 discussed this with me in the past. We want to follow the existing interfaces and make sure all API interfaces are consistent.", "author": "liubonan", "createdAt": "2020-07-13T22:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4ODkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequestTest.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequestTest.java\nindex 287aae44..3ed16504 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequestTest.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/models/RestoreTableRequestTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Google LLC\n+ * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNjc5NQ==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r443736795", "bodyText": "The python library adds additional parameters to allow for an order by in the request: https://github.com/googleapis/python-bigtable/pull/57/files#diff-2b7fa7c0cc3c25cbb236202352ee3ecdR731. Is this something we can add in here as well?", "author": "kolea2", "createdAt": "2020-06-22T18:05:30Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java", "diffHunk": "@@ -775,6 +790,189 @@ public void awaitReplication(String tableId) {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public Backup createBackup(CreateBackupRequest request) {\n+    return ApiExceptions.callAndTranslateApiException(createBackupAsync(request));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<Backup> createBackupAsync(CreateBackupRequest request) {\n+    return ApiFutures.transform(\n+        stub.createBackupOperationCallable().futureCall(request.toProto(projectId, instanceId)),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backupProto) {\n+            return Backup.fromProto(backupProto);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public Backup getBackup(String clusterId, String backupId) {\n+    return ApiExceptions.callAndTranslateApiException(getBackupAsync(clusterId, backupId));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<Backup> getBackupAsync(String clusterId, String backupId) {\n+    GetBackupRequest request =\n+        GetBackupRequest.newBuilder()\n+            .setName(NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId))\n+            .build();\n+    return ApiFutures.transform(\n+        this.stub.getBackupCallable().futureCall(request),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backup) {\n+            return Backup.fromProto(backup);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public List<String> listBackups(String clusterId) {\n+    return ApiExceptions.callAndTranslateApiException(listBackupsAsync(clusterId));\n+  }\n+\n+  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  public ApiFuture<List<String>> listBackupsAsync(String clusterId) {", "originalCommit": "33ffd938c06352108ccf7c1e5c970cce27771c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4MzY3OA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r453983678", "bodyText": "That could be a nice enhancement. And order_by, filter and pagination could all be added to the list API. However, given the current Java client does not support them for other APIs, I feel it would be better to add them in a separate PR.", "author": "liubonan", "createdAt": "2020-07-13T22:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNjc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NDEzNw==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r454474137", "bodyText": "SGTM", "author": "kolea2", "createdAt": "2020-07-14T16:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNjc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\nindex 46facb07..0fffcc54 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\n\n@@ -790,12 +789,50 @@ public final class BigtableTableAdminClient implements AutoCloseable {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n-  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  /**\n+   * Creates a backup with the specified configuration.\n+   *\n+   * <p>Sample code\n+   *\n+   * <pre>{@code\n+   * CreateBackupRequest request =\n+   *         CreateBackupRequest.of(clusterId, backupId)\n+   *             .setSourceTableId(tableId)\n+   *             .setExpireTime(expireTime);\n+   * Backup response = client.createBackup(request);\n+   * }</pre>\n+   */\n   public Backup createBackup(CreateBackupRequest request) {\n     return ApiExceptions.callAndTranslateApiException(createBackupAsync(request));\n   }\n \n-  @BetaApi(\"Managed Backup feature is in alpha and may change in the future.\")\n+  /**\n+   * Creates a backup with the specified configuration asynchronously.\n+   *\n+   * <p>Sample code\n+   *\n+   * <pre>{@code\n+   * CreateBackupRequest request =\n+   *         CreateBackupRequest.of(clusterId, backupId)\n+   *             .setSourceTableId(tableId)\n+   *             .setExpireTime(expireTime);\n+   * ApiFuture<Backup> future = client.createBackupAsync(request);\n+   *\n+   * ApiFutures.addCallback(\n+   *   future,\n+   *   new ApiFutureCallback<Backup>() {\n+   *     public void onSuccess(Backup backup) {\n+   *       System.out.println(\"Successfully create the backup \" + backup.getId());\n+   *     }\n+   *\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *   },\n+   *   MoreExecutors.directExecutor()\n+   * );\n+   * }</pre>\n+   */\n   public ApiFuture<Backup> createBackupAsync(CreateBackupRequest request) {\n     return ApiFutures.transform(\n         stub.createBackupOperationCallable().futureCall(request.toProto(projectId, instanceId)),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4ODg5Nw==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r454488897", "bodyText": "can this be the primitive void?", "author": "igorbernstein2", "createdAt": "2020-07-14T16:35:08Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java", "diffHunk": "@@ -775,6 +789,175 @@ public void awaitReplication(String tableId) {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n+  public Backup createBackup(CreateBackupRequest request) {\n+    return ApiExceptions.callAndTranslateApiException(createBackupAsync(request));\n+  }\n+\n+  public ApiFuture<Backup> createBackupAsync(CreateBackupRequest request) {\n+    return ApiFutures.transform(\n+        stub.createBackupOperationCallable().futureCall(request.toProto(projectId, instanceId)),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backupProto) {\n+            return Backup.fromProto(backupProto);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  public Backup getBackup(String clusterId, String backupId) {\n+    return ApiExceptions.callAndTranslateApiException(getBackupAsync(clusterId, backupId));\n+  }\n+\n+  public ApiFuture<Backup> getBackupAsync(String clusterId, String backupId) {\n+    GetBackupRequest request =\n+        GetBackupRequest.newBuilder()\n+            .setName(NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId))\n+            .build();\n+    return ApiFutures.transform(\n+        this.stub.getBackupCallable().futureCall(request),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup backup) {\n+            return Backup.fromProto(backup);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  public List<String> listBackups(String clusterId) {\n+    return ApiExceptions.callAndTranslateApiException(listBackupsAsync(clusterId));\n+  }\n+\n+  public ApiFuture<List<String>> listBackupsAsync(String clusterId) {\n+    ListBackupsRequest request =\n+        ListBackupsRequest.newBuilder()\n+            .setParent(NameUtil.formatClusterName(projectId, instanceId, clusterId))\n+            .build();\n+\n+    // TODO(igorbernstein2): try to upstream pagination spooling or figure out a way to expose the\n+    // paginated responses while maintaining the wrapper facade.\n+\n+    // Fetches the first page.\n+    ApiFuture<ListBackupsPage> firstPageFuture =\n+        ApiFutures.transform(\n+            stub.listBackupsPagedCallable().futureCall(request),\n+            new ApiFunction<ListBackupsPagedResponse, ListBackupsPage>() {\n+              @Override\n+              public ListBackupsPage apply(ListBackupsPagedResponse response) {\n+                return response.getPage();\n+              }\n+            },\n+            MoreExecutors.directExecutor());\n+\n+    // Fetches the rest of the pages by chaining the futures.\n+    ApiFuture<List<com.google.bigtable.admin.v2.Backup>> allProtos =\n+        ApiFutures.transformAsync(\n+            firstPageFuture,\n+            new ApiAsyncFunction<ListBackupsPage, List<com.google.bigtable.admin.v2.Backup>>() {\n+              List<com.google.bigtable.admin.v2.Backup> responseAccumulator = Lists.newArrayList();\n+\n+              @Override\n+              public ApiFuture<List<com.google.bigtable.admin.v2.Backup>> apply(\n+                  ListBackupsPage page) {\n+                // Add all entries from the page\n+                responseAccumulator.addAll(Lists.newArrayList(page.getValues()));\n+\n+                // If this is the last page, just return the accumulated responses.\n+                if (!page.hasNextPage()) {\n+                  return ApiFutures.immediateFuture(responseAccumulator);\n+                }\n+\n+                // Otherwise fetch the next page.\n+                return ApiFutures.transformAsync(\n+                    page.getNextPageAsync(), this, MoreExecutors.directExecutor());\n+              }\n+            },\n+            MoreExecutors.directExecutor());\n+\n+    // Wraps all of the accumulated protos.\n+    return ApiFutures.transform(\n+        allProtos,\n+        new ApiFunction<List<com.google.bigtable.admin.v2.Backup>, List<String>>() {\n+          @Override\n+          public List<String> apply(List<com.google.bigtable.admin.v2.Backup> protos) {\n+            List<String> results = Lists.newArrayListWithCapacity(protos.size());\n+            for (com.google.bigtable.admin.v2.Backup proto : protos) {\n+              results.add(NameUtil.extractBackupIdFromBackupName(proto.getName()));\n+            }\n+            return results;\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  public void deleteBackup(String clusterId, String backupId) {\n+    ApiExceptions.callAndTranslateApiException(deleteBackupAsync(clusterId, backupId));\n+  }\n+\n+  public ApiFuture<Void> deleteBackupAsync(String clusterId, String backupId) {\n+    DeleteBackupRequest request =\n+        DeleteBackupRequest.newBuilder()\n+            .setName(NameUtil.formatBackupName(projectId, instanceId, clusterId, backupId))\n+            .build();\n+\n+    return transformToVoid(this.stub.deleteBackupCallable().futureCall(request));\n+  }\n+\n+  public Backup updateBackup(UpdateBackupRequest request) {\n+    return ApiExceptions.callAndTranslateApiException(updateBackupAsync(request));\n+  }\n+\n+  public ApiFuture<Backup> updateBackupAsync(UpdateBackupRequest request) {\n+    return ApiFutures.transform(\n+        stub.updateBackupCallable().futureCall(request.toProto(projectId, instanceId)),\n+        new ApiFunction<com.google.bigtable.admin.v2.Backup, Backup>() {\n+          @Override\n+          public Backup apply(com.google.bigtable.admin.v2.Backup proto) {\n+            return Backup.fromProto(proto);\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  public RestoredTableResult restoreTable(RestoreTableRequest request)\n+      throws ExecutionException, InterruptedException {\n+    return ApiExceptions.callAndTranslateApiException(restoreTableAsync(request));\n+  }\n+\n+  public ApiFuture<RestoredTableResult> restoreTableAsync(RestoreTableRequest request) {\n+    final OperationFuture<com.google.bigtable.admin.v2.Table, RestoreTableMetadata> future =\n+        this.stub\n+            .restoreTableOperationCallable()\n+            .futureCall(request.toProto(projectId, instanceId));\n+    return ApiFutures.transformAsync(\n+        future,\n+        new ApiAsyncFunction<com.google.bigtable.admin.v2.Table, RestoredTableResult>() {\n+          @Override\n+          public ApiFuture<RestoredTableResult> apply(com.google.bigtable.admin.v2.Table table)\n+              throws Exception {\n+            return ApiFutures.immediateFuture(\n+                // When apply is called, the future should have been resolved and it's safe to\n+                // pull the metadata.\n+                new RestoredTableResult(\n+                    Table.fromProto(table),\n+                    future.getMetadata().get().getOptimizeTableOperationName()));\n+          }\n+        },\n+        MoreExecutors.directExecutor());\n+  }\n+\n+  public Void awaitOptimizeRestoredTable(OptimizeRestoredTableOperationToken token)", "originalCommit": "2f6f2c912c219a6358fff019d4ec720e83b65d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMzMwOA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r455313308", "bodyText": "Unfortunately it has to be Void class.", "author": "liubonan", "createdAt": "2020-07-15T20:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4ODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMzMTUzMA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r455331530", "bodyText": "why?", "author": "igorbernstein2", "createdAt": "2020-07-15T20:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4ODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMzNDExOA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r455334118", "bodyText": "If I change it to void, the complier will complain. I think Void is used for AwaitReplication as well.", "author": "liubonan", "createdAt": "2020-07-15T20:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4ODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM4OTM3MA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r455389370", "bodyText": "updated the method signature to void", "author": "liubonan", "createdAt": "2020-07-15T21:58:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4ODg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\nindex acc74637..0fffcc54 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/BigtableTableAdminClient.java\n\n@@ -789,10 +789,50 @@ public final class BigtableTableAdminClient implements AutoCloseable {\n         stub.awaitReplicationCallable().futureCall(tableName));\n   }\n \n+  /**\n+   * Creates a backup with the specified configuration.\n+   *\n+   * <p>Sample code\n+   *\n+   * <pre>{@code\n+   * CreateBackupRequest request =\n+   *         CreateBackupRequest.of(clusterId, backupId)\n+   *             .setSourceTableId(tableId)\n+   *             .setExpireTime(expireTime);\n+   * Backup response = client.createBackup(request);\n+   * }</pre>\n+   */\n   public Backup createBackup(CreateBackupRequest request) {\n     return ApiExceptions.callAndTranslateApiException(createBackupAsync(request));\n   }\n \n+  /**\n+   * Creates a backup with the specified configuration asynchronously.\n+   *\n+   * <p>Sample code\n+   *\n+   * <pre>{@code\n+   * CreateBackupRequest request =\n+   *         CreateBackupRequest.of(clusterId, backupId)\n+   *             .setSourceTableId(tableId)\n+   *             .setExpireTime(expireTime);\n+   * ApiFuture<Backup> future = client.createBackupAsync(request);\n+   *\n+   * ApiFutures.addCallback(\n+   *   future,\n+   *   new ApiFutureCallback<Backup>() {\n+   *     public void onSuccess(Backup backup) {\n+   *       System.out.println(\"Successfully create the backup \" + backup.getId());\n+   *     }\n+   *\n+   *     public void onFailure(Throwable t) {\n+   *       t.printStackTrace();\n+   *     }\n+   *   },\n+   *   MoreExecutors.directExecutor()\n+   * );\n+   * }</pre>\n+   */\n   public ApiFuture<Backup> createBackupAsync(CreateBackupRequest request) {\n     return ApiFutures.transform(\n         stub.createBackupOperationCallable().futureCall(request.toProto(projectId, instanceId)),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MTE0MA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r454491140", "bodyText": "Please add Nullable annotations", "author": "igorbernstein2", "createdAt": "2020-07-14T16:38:35Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.bigtable.admin.v2.BackupName;\n+import com.google.cloud.bigtable.admin.v2.internal.NameUtil;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import com.google.protobuf.util.Timestamps;\n+import javax.annotation.Nonnull;\n+import org.threeten.bp.Instant;\n+\n+public class Backup {\n+  public enum State {\n+    /** Not specified. */\n+    STATE_UNSPECIFIED(com.google.bigtable.admin.v2.Backup.State.STATE_UNSPECIFIED),\n+\n+    /**\n+     * The pending backup is still being created. Operations on the backup may fail with\n+     * `FAILED_PRECONDITION` in this state.\n+     */\n+    CREATING(com.google.bigtable.admin.v2.Backup.State.CREATING),\n+    /** The backup is complete and ready for use. */\n+    READY(com.google.bigtable.admin.v2.Backup.State.READY),\n+\n+    /** The state of the backup is not known by this client. Please upgrade your client. */\n+    UNRECOGNIZED(com.google.bigtable.admin.v2.Backup.State.UNRECOGNIZED);\n+\n+    private final com.google.bigtable.admin.v2.Backup.State proto;\n+\n+    State(com.google.bigtable.admin.v2.Backup.State proto) {\n+      this.proto = proto;\n+    }\n+\n+    /**\n+     * Wraps the protobuf. This method is considered an internal implementation detail and not meant\n+     * to be used by applications.\n+     */\n+    @InternalApi\n+    public static Backup.State fromProto(com.google.bigtable.admin.v2.Backup.State proto) {\n+      for (Backup.State state : values()) {\n+        if (state.proto.equals(proto)) {\n+          return state;\n+        }\n+      }\n+      return STATE_UNSPECIFIED;\n+    }\n+\n+    /**\n+     * Creates the request protobuf. This method is considered an internal implementation detail and\n+     * not meant to be used by applications.\n+     */\n+    @InternalApi\n+    public com.google.bigtable.admin.v2.Backup.State toProto() {\n+      return proto;\n+    }\n+  }\n+\n+  @Nonnull private final com.google.bigtable.admin.v2.Backup proto;\n+  @Nonnull private final String id;\n+  @Nonnull private final String instanceId;\n+\n+  @InternalApi\n+  public static Backup fromProto(@Nonnull com.google.bigtable.admin.v2.Backup proto) {\n+    return new Backup(proto);\n+  }\n+\n+  private Backup(@Nonnull com.google.bigtable.admin.v2.Backup proto) {\n+    Preconditions.checkNotNull(proto);\n+    Preconditions.checkArgument(!proto.getName().isEmpty(), \"Name must be set\");\n+    Preconditions.checkArgument(!proto.getSourceTable().isEmpty(), \"Source table must be set\");\n+\n+    BackupName name = BackupName.parse(proto.getName());\n+    this.id = name.getBackup();\n+    this.instanceId = name.getInstance();\n+    this.proto = proto;\n+  }\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public String getSourceTableId() {\n+    return NameUtil.extractTableIdFromTableName(proto.getSourceTable());\n+  }\n+\n+  public String getInstanceId() {\n+    return instanceId;\n+  }\n+\n+  public Instant getExpireTime() {\n+    return Instant.ofEpochMilli(Timestamps.toMillis(proto.getExpireTime()));\n+  }\n+\n+  public Instant getStartTime() {", "originalCommit": "2f6f2c912c219a6358fff019d4ec720e83b65d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMzMzMA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r455313330", "bodyText": "Done", "author": "liubonan", "createdAt": "2020-07-15T20:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MTE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java\nindex ce191e21..54002da6 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java\n\n@@ -23,8 +23,13 @@ import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import com.google.protobuf.util.Timestamps;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n import org.threeten.bp.Instant;\n \n+/**\n+ * A backup lets you save a copy of a table's schema and data and restore the backup to a new table\n+ * at a later time.\n+ */\n public class Backup {\n   public enum State {\n     /** Not specified. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MTIxNA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r454491214", "bodyText": "Please add Nullable annotations", "author": "igorbernstein2", "createdAt": "2020-07-14T16:38:44Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.bigtable.admin.v2.BackupName;\n+import com.google.cloud.bigtable.admin.v2.internal.NameUtil;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import com.google.protobuf.util.Timestamps;\n+import javax.annotation.Nonnull;\n+import org.threeten.bp.Instant;\n+\n+public class Backup {\n+  public enum State {\n+    /** Not specified. */\n+    STATE_UNSPECIFIED(com.google.bigtable.admin.v2.Backup.State.STATE_UNSPECIFIED),\n+\n+    /**\n+     * The pending backup is still being created. Operations on the backup may fail with\n+     * `FAILED_PRECONDITION` in this state.\n+     */\n+    CREATING(com.google.bigtable.admin.v2.Backup.State.CREATING),\n+    /** The backup is complete and ready for use. */\n+    READY(com.google.bigtable.admin.v2.Backup.State.READY),\n+\n+    /** The state of the backup is not known by this client. Please upgrade your client. */\n+    UNRECOGNIZED(com.google.bigtable.admin.v2.Backup.State.UNRECOGNIZED);\n+\n+    private final com.google.bigtable.admin.v2.Backup.State proto;\n+\n+    State(com.google.bigtable.admin.v2.Backup.State proto) {\n+      this.proto = proto;\n+    }\n+\n+    /**\n+     * Wraps the protobuf. This method is considered an internal implementation detail and not meant\n+     * to be used by applications.\n+     */\n+    @InternalApi\n+    public static Backup.State fromProto(com.google.bigtable.admin.v2.Backup.State proto) {\n+      for (Backup.State state : values()) {\n+        if (state.proto.equals(proto)) {\n+          return state;\n+        }\n+      }\n+      return STATE_UNSPECIFIED;\n+    }\n+\n+    /**\n+     * Creates the request protobuf. This method is considered an internal implementation detail and\n+     * not meant to be used by applications.\n+     */\n+    @InternalApi\n+    public com.google.bigtable.admin.v2.Backup.State toProto() {\n+      return proto;\n+    }\n+  }\n+\n+  @Nonnull private final com.google.bigtable.admin.v2.Backup proto;\n+  @Nonnull private final String id;\n+  @Nonnull private final String instanceId;\n+\n+  @InternalApi\n+  public static Backup fromProto(@Nonnull com.google.bigtable.admin.v2.Backup proto) {\n+    return new Backup(proto);\n+  }\n+\n+  private Backup(@Nonnull com.google.bigtable.admin.v2.Backup proto) {\n+    Preconditions.checkNotNull(proto);\n+    Preconditions.checkArgument(!proto.getName().isEmpty(), \"Name must be set\");\n+    Preconditions.checkArgument(!proto.getSourceTable().isEmpty(), \"Source table must be set\");\n+\n+    BackupName name = BackupName.parse(proto.getName());\n+    this.id = name.getBackup();\n+    this.instanceId = name.getInstance();\n+    this.proto = proto;\n+  }\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public String getSourceTableId() {\n+    return NameUtil.extractTableIdFromTableName(proto.getSourceTable());\n+  }\n+\n+  public String getInstanceId() {\n+    return instanceId;\n+  }\n+\n+  public Instant getExpireTime() {\n+    return Instant.ofEpochMilli(Timestamps.toMillis(proto.getExpireTime()));\n+  }\n+\n+  public Instant getStartTime() {\n+    if (proto.hasStartTime()) {\n+      return Instant.ofEpochMilli(Timestamps.toMillis(proto.getStartTime()));\n+    }\n+    return null;\n+  }\n+\n+  public Instant getEndTime() {", "originalCommit": "2f6f2c912c219a6358fff019d4ec720e83b65d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMzM1Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r455313352", "bodyText": "Done.", "author": "liubonan", "createdAt": "2020-07-15T20:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MTIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java\nindex ce191e21..54002da6 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/Backup.java\n\n@@ -23,8 +23,13 @@ import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import com.google.protobuf.util.Timestamps;\n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n import org.threeten.bp.Instant;\n \n+/**\n+ * A backup lets you save a copy of a table's schema and data and restore the backup to a new table\n+ * at a later time.\n+ */\n public class Backup {\n   public enum State {\n     /** Not specified. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5Mjg1Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r454492852", "bodyText": "That looks fishy", "author": "igorbernstein2", "createdAt": "2020-07-14T16:41:24Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/OptimizeRestoredTableOperationToken.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import autovalue.shaded.com.google$.common.base.$Preconditions;", "originalCommit": "2f6f2c912c219a6358fff019d4ec720e83b65d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMzM3Nw==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r455313377", "bodyText": "Yeah, it was caught by the presubmit check as well. Updated the PR.", "author": "liubonan", "createdAt": "2020-07-15T20:11:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5Mjg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/OptimizeRestoredTableOperationToken.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/OptimizeRestoredTableOperationToken.java\nindex 12a5eeb8..d38f82e4 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/OptimizeRestoredTableOperationToken.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/OptimizeRestoredTableOperationToken.java\n\n@@ -15,10 +15,12 @@\n  */\n package com.google.cloud.bigtable.admin.v2.models;\n \n-import autovalue.shaded.com.google$.common.base.$Preconditions;\n import com.google.api.core.InternalApi;\n import com.google.common.base.Preconditions;\n \n+/**\n+ * OptimizeRestoredTableOperationToken is a wrapper for the name of OptimizeRestoredTable operation.\n+ */\n public class OptimizeRestoredTableOperationToken {\n   private final String operationName;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMDkxMg==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r456110912", "bodyText": "javadoc please", "author": "igorbernstein2", "createdAt": "2020-07-16T22:20:54Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.common.base.Strings;\n+import javax.annotation.Nullable;\n+\n+public class RestoredTableResult {", "originalCommit": "f835e0994a4df76dd4b4834acf0e71e0cce389a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1MjMxMg==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r457652312", "bodyText": "Done.", "author": "liubonan", "createdAt": "2020-07-20T19:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMDkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java\nindex 0251709b..e31d8c4b 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java\n\n@@ -19,6 +19,10 @@ import com.google.api.core.InternalApi;\n import com.google.common.base.Strings;\n import javax.annotation.Nullable;\n \n+/**\n+ * A RestoredTableResult holds the restored table object and the {@link\n+ * OptimizeRestoredTableOperationToken} object (if any).\n+ */\n public class RestoredTableResult {\n \n   private final Table table;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMTAzOA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r456111038", "bodyText": "javadoc and in particular note why the token would be null here", "author": "igorbernstein2", "createdAt": "2020-07-16T22:21:17Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.models;\n+\n+import com.google.api.core.InternalApi;\n+import com.google.common.base.Strings;\n+import javax.annotation.Nullable;\n+\n+public class RestoredTableResult {\n+\n+  private final Table table;\n+  private final OptimizeRestoredTableOperationToken optimizeRestoredTableOperationToken;\n+\n+  @InternalApi\n+  public RestoredTableResult(\n+      Table restoredTable, @Nullable String optimizeRestoredTableOperationName) {\n+    this.table = restoredTable;\n+    this.optimizeRestoredTableOperationToken =\n+        Strings.isNullOrEmpty(optimizeRestoredTableOperationName)\n+            ? null\n+            : OptimizeRestoredTableOperationToken.of(optimizeRestoredTableOperationName);\n+  }\n+\n+  public Table getTable() {\n+    return table;\n+  }\n+\n+  @Nullable\n+  public OptimizeRestoredTableOperationToken getOptimizeRestoredTableOperationToken() {", "originalCommit": "f835e0994a4df76dd4b4834acf0e71e0cce389a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1MjI5OQ==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r457652299", "bodyText": "Done.", "author": "liubonan", "createdAt": "2020-07-20T19:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMTAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "e7a909b03dd241707b38778c0bc61880c7f41e53", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java\nindex 0251709b..e31d8c4b 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/admin/v2/models/RestoredTableResult.java\n\n@@ -19,6 +19,10 @@ import com.google.api.core.InternalApi;\n import com.google.common.base.Strings;\n import javax.annotation.Nullable;\n \n+/**\n+ * A RestoredTableResult holds the restored table object and the {@link\n+ * OptimizeRestoredTableOperationToken} object (if any).\n+ */\n public class RestoredTableResult {\n \n   private final Table table;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMjAzOA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r456112038", "bodyText": "The integration tests should use the existing testing infrastructure:\nhttps://github.com/googleapis/java-bigtable/tree/master/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/test_helpers/env", "author": "igorbernstein2", "createdAt": "2020-07-16T22:24:06Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.it;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static io.grpc.Status.Code.NOT_FOUND;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.rpc.ApiException;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminClient;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminSettings;\n+import com.google.cloud.bigtable.admin.v2.models.Backup;\n+import com.google.cloud.bigtable.admin.v2.models.CreateBackupRequest;\n+import com.google.cloud.bigtable.admin.v2.models.CreateTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoreTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoredTableResult;\n+import com.google.cloud.bigtable.admin.v2.models.Table;\n+import com.google.cloud.bigtable.admin.v2.models.UpdateBackupRequest;\n+import com.google.cloud.bigtable.data.v2.BigtableDataClient;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.models.RowMutation;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+import com.google.protobuf.Timestamp;\n+import io.grpc.StatusRuntimeException;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+import org.junit.*;\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.Instant;\n+\n+public class BigtableBackupIT {\n+  private static final Logger LOGGER = Logger.getLogger(BigtableBackupIT.class.getName());\n+\n+  private static final String PROJECT_PROPERTY_NAME = \"bigtable.project\";\n+  private static final String INSTANCE_PROPERTY_NAME = \"bigtable.instance\";\n+  private static final String CLUSTER_PROPERTY_NAME = \"bigtable.cluster\";\n+  private static final String ADMIN_ENDPOINT_PROPERTY_NAME = \"bigtable.adminendpoint\";\n+  private static final String DATA_ENDPOINT_PROPERTY_NAME = \"bigtable.dataendpoint\";\n+  private static final String TABLE_SIZE_PROPERTY_NAME = \"bigtable.tablesizekb\";\n+  private static final int[] BACKOFF_DURATION = {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};\n+\n+  private static final String TEST_TABLE_SUFFIX = \"test-table-for-backup-it\";\n+  private static final String TEST_BACKUP_SUFFIX = \"test-backup-for-backup-it\";\n+\n+  private static final int DAYS_IN_SECONDS = 24 * 60 * 60;\n+\n+  private static BigtableTableAdminClient tableAdmin;\n+  private static BigtableDataClient dataClient;\n+\n+  private static String targetProject;\n+  private static String targetInstance;\n+  private static String targetCluster;\n+  private static Table testTable;\n+  private static String prefix;\n+\n+  @BeforeClass\n+  public static void createClient()", "originalCommit": "f835e0994a4df76dd4b4834acf0e71e0cce389a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1MjI4Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r457652282", "bodyText": "Discussed with @kolea2 offline and this will left in future PRs.", "author": "liubonan", "createdAt": "2020-07-20T19:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMjAzOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMjczNA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r456112734", "bodyText": "Does this need to be specified? Can it just be the first cluster in the instance?", "author": "igorbernstein2", "createdAt": "2020-07-16T22:25:56Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.it;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static io.grpc.Status.Code.NOT_FOUND;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.rpc.ApiException;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminClient;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminSettings;\n+import com.google.cloud.bigtable.admin.v2.models.Backup;\n+import com.google.cloud.bigtable.admin.v2.models.CreateBackupRequest;\n+import com.google.cloud.bigtable.admin.v2.models.CreateTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoreTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoredTableResult;\n+import com.google.cloud.bigtable.admin.v2.models.Table;\n+import com.google.cloud.bigtable.admin.v2.models.UpdateBackupRequest;\n+import com.google.cloud.bigtable.data.v2.BigtableDataClient;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.models.RowMutation;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+import com.google.protobuf.Timestamp;\n+import io.grpc.StatusRuntimeException;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+import org.junit.*;\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.Instant;\n+\n+public class BigtableBackupIT {\n+  private static final Logger LOGGER = Logger.getLogger(BigtableBackupIT.class.getName());\n+\n+  private static final String PROJECT_PROPERTY_NAME = \"bigtable.project\";\n+  private static final String INSTANCE_PROPERTY_NAME = \"bigtable.instance\";\n+  private static final String CLUSTER_PROPERTY_NAME = \"bigtable.cluster\";\n+  private static final String ADMIN_ENDPOINT_PROPERTY_NAME = \"bigtable.adminendpoint\";\n+  private static final String DATA_ENDPOINT_PROPERTY_NAME = \"bigtable.dataendpoint\";\n+  private static final String TABLE_SIZE_PROPERTY_NAME = \"bigtable.tablesizekb\";\n+  private static final int[] BACKOFF_DURATION = {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};\n+\n+  private static final String TEST_TABLE_SUFFIX = \"test-table-for-backup-it\";\n+  private static final String TEST_BACKUP_SUFFIX = \"test-backup-for-backup-it\";\n+\n+  private static final int DAYS_IN_SECONDS = 24 * 60 * 60;\n+\n+  private static BigtableTableAdminClient tableAdmin;\n+  private static BigtableDataClient dataClient;\n+\n+  private static String targetProject;\n+  private static String targetInstance;\n+  private static String targetCluster;\n+  private static Table testTable;\n+  private static String prefix;\n+\n+  @BeforeClass\n+  public static void createClient()\n+      throws IOException, InterruptedException, ExecutionException, TimeoutException {\n+    List<String> missingProperties = Lists.newArrayList();\n+\n+    targetProject = System.getProperty(PROJECT_PROPERTY_NAME);\n+    if (targetProject == null) {\n+      missingProperties.add(PROJECT_PROPERTY_NAME);\n+    }\n+\n+    targetInstance = System.getProperty(INSTANCE_PROPERTY_NAME);\n+    if (targetInstance == null) {\n+      missingProperties.add(INSTANCE_PROPERTY_NAME);\n+    }\n+\n+    targetCluster = System.getProperty(CLUSTER_PROPERTY_NAME);", "originalCommit": "f835e0994a4df76dd4b4834acf0e71e0cce389a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1MjI2OQ==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r457652269", "bodyText": "I discussed this with @kolea2 and integration test improvements will be in separate PRs.", "author": "liubonan", "createdAt": "2020-07-20T19:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMjczNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMzA0OA==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r456113048", "bodyText": "When would we want to change this?", "author": "igorbernstein2", "createdAt": "2020-07-16T22:26:42Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/admin/v2/it/BigtableBackupIT.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.admin.v2.it;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static io.grpc.Status.Code.NOT_FOUND;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.rpc.ApiException;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminClient;\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminSettings;\n+import com.google.cloud.bigtable.admin.v2.models.Backup;\n+import com.google.cloud.bigtable.admin.v2.models.CreateBackupRequest;\n+import com.google.cloud.bigtable.admin.v2.models.CreateTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoreTableRequest;\n+import com.google.cloud.bigtable.admin.v2.models.RestoredTableResult;\n+import com.google.cloud.bigtable.admin.v2.models.Table;\n+import com.google.cloud.bigtable.admin.v2.models.UpdateBackupRequest;\n+import com.google.cloud.bigtable.data.v2.BigtableDataClient;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.models.RowMutation;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+import com.google.protobuf.Timestamp;\n+import io.grpc.StatusRuntimeException;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+import org.junit.*;\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.Instant;\n+\n+public class BigtableBackupIT {\n+  private static final Logger LOGGER = Logger.getLogger(BigtableBackupIT.class.getName());\n+\n+  private static final String PROJECT_PROPERTY_NAME = \"bigtable.project\";\n+  private static final String INSTANCE_PROPERTY_NAME = \"bigtable.instance\";\n+  private static final String CLUSTER_PROPERTY_NAME = \"bigtable.cluster\";\n+  private static final String ADMIN_ENDPOINT_PROPERTY_NAME = \"bigtable.adminendpoint\";\n+  private static final String DATA_ENDPOINT_PROPERTY_NAME = \"bigtable.dataendpoint\";\n+  private static final String TABLE_SIZE_PROPERTY_NAME = \"bigtable.tablesizekb\";\n+  private static final int[] BACKOFF_DURATION = {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};\n+\n+  private static final String TEST_TABLE_SUFFIX = \"test-table-for-backup-it\";\n+  private static final String TEST_BACKUP_SUFFIX = \"test-backup-for-backup-it\";\n+\n+  private static final int DAYS_IN_SECONDS = 24 * 60 * 60;\n+\n+  private static BigtableTableAdminClient tableAdmin;\n+  private static BigtableDataClient dataClient;\n+\n+  private static String targetProject;\n+  private static String targetInstance;\n+  private static String targetCluster;\n+  private static Table testTable;\n+  private static String prefix;\n+\n+  @BeforeClass\n+  public static void createClient()\n+      throws IOException, InterruptedException, ExecutionException, TimeoutException {\n+    List<String> missingProperties = Lists.newArrayList();\n+\n+    targetProject = System.getProperty(PROJECT_PROPERTY_NAME);\n+    if (targetProject == null) {\n+      missingProperties.add(PROJECT_PROPERTY_NAME);\n+    }\n+\n+    targetInstance = System.getProperty(INSTANCE_PROPERTY_NAME);\n+    if (targetInstance == null) {\n+      missingProperties.add(INSTANCE_PROPERTY_NAME);\n+    }\n+\n+    targetCluster = System.getProperty(CLUSTER_PROPERTY_NAME);\n+    if (targetCluster == null) {\n+      missingProperties.add(CLUSTER_PROPERTY_NAME);\n+    }\n+\n+    String adminApiEndpoint = System.getProperty(ADMIN_ENDPOINT_PROPERTY_NAME);\n+    if (adminApiEndpoint == null) {\n+      adminApiEndpoint = \"bigtableadmin.googleapis.com:443\";\n+    }\n+\n+    int tableSize = MoreObjects.firstNonNull(Integer.getInteger(TABLE_SIZE_PROPERTY_NAME), 1);", "originalCommit": "f835e0994a4df76dd4b4834acf0e71e0cce389a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1MjI1Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/305#discussion_r457652252", "bodyText": "Please see my other comment. I discussed this with @kolea2 and integration test improvements will be in separate PRs.", "author": "liubonan", "createdAt": "2020-07-20T19:49:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExMzA0OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e7a909b03dd241707b38778c0bc61880c7f41e53", "url": "https://github.com/googleapis/java-bigtable/commit/e7a909b03dd241707b38778c0bc61880c7f41e53", "message": "feat: Cloud Bigtable Managed Backup Implementation", "committedDate": "2020-07-20T19:48:31Z", "type": "commit"}]}