{"pr_number": 474, "pr_title": "fix: Make refreshing channel compatible with BigtableDataClientFactory", "pr_createdAt": "2020-10-16T23:16:17Z", "pr_url": "https://github.com/googleapis/java-bigtable/pull/474", "timeline": [{"oid": "61d5e632e6c64e273ac064150af91e0a814979dd", "url": "https://github.com/googleapis/java-bigtable/commit/61d5e632e6c64e273ac064150af91e0a814979dd", "message": "Make refreshing channel compatible with BigtableDataClientFactory", "committedDate": "2020-10-16T23:14:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1OTM5Ng==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r506759396", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Preconditions.checkArgument(appProfileId != null,\n          \n          \n            \n                        \"refreshingChannel only works when appProfileId is set\");\n          \n          \n            \n                    InstantiatingGrpcChannelProvider.Builder channelProviderBuilder =\n          \n          \n            \n                        ((InstantiatingGrpcChannelProvider) getTransportChannelProvider()).toBuilder();\n          \n          \n            \n                    Preconditions.checkArgument(\n          \n          \n            \n                        appProfileId != null, \"refreshingChannel only works when appProfileId is set\");\n          \n          \n            \n                          BigtableChannelPrimer.create(\n          \n          \n            \n                              getCredentialsProvider().getCredentials(),\n          \n          \n            \n                              projectId,\n          \n          \n            \n                              instanceId,\n          \n          \n            \n                              appProfileId,\n          \n          \n            \n                              primedTableIds));", "author": "yoshi-code-bot", "createdAt": "2020-10-16T23:18:06Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "diffHunk": "@@ -806,6 +807,18 @@ public EnhancedBigtableStubSettings build() {\n         Preconditions.checkArgument(\n             getTransportChannelProvider() instanceof InstantiatingGrpcChannelProvider,\n             \"refreshingChannel only works with InstantiatingGrpcChannelProviders\");\n+        Preconditions.checkArgument(appProfileId != null,\n+            \"refreshingChannel only works when appProfileId is set\");\n+        InstantiatingGrpcChannelProvider.Builder channelProviderBuilder =\n+            ((InstantiatingGrpcChannelProvider) getTransportChannelProvider()).toBuilder();", "originalCommit": "61d5e632e6c64e273ac064150af91e0a814979dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45673db1fec87c67863ad0b1d243c7091d3bd27d", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java\nindex 6a284276..9ad52f91 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java\n\n@@ -807,14 +807,18 @@ public class EnhancedBigtableStubSettings extends StubSettings<EnhancedBigtableS\n         Preconditions.checkArgument(\n             getTransportChannelProvider() instanceof InstantiatingGrpcChannelProvider,\n             \"refreshingChannel only works with InstantiatingGrpcChannelProviders\");\n-        Preconditions.checkArgument(appProfileId != null,\n-            \"refreshingChannel only works when appProfileId is set\");\n+        Preconditions.checkArgument(\n+            appProfileId != null, \"refreshingChannel only works when appProfileId is set\");\n         InstantiatingGrpcChannelProvider.Builder channelProviderBuilder =\n             ((InstantiatingGrpcChannelProvider) getTransportChannelProvider()).toBuilder();\n         try {\n           channelProviderBuilder.setChannelPrimer(\n-              BigtableChannelPrimer.create(getCredentialsProvider().getCredentials(),\n-                  projectId, instanceId, appProfileId, primedTableIds));\n+              BigtableChannelPrimer.create(\n+                  getCredentialsProvider().getCredentials(),\n+                  projectId,\n+                  instanceId,\n+                  appProfileId,\n+                  primedTableIds));\n         } catch (IOException e) {\n           throw new RuntimeException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1OTM5Nw==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r506759397", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                BigtableDataSettings.Builder builder = BigtableDataSettings.newBuilderForEmulator(port)\n          \n          \n            \n                    .setProjectId(DEFAULT_PROJECT_ID)\n          \n          \n            \n                    .setInstanceId(DEFAULT_INSTANCE_ID)\n          \n          \n            \n                    .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n          \n          \n            \n                    .setPrimingTableIds(tableIds)\n          \n          \n            \n                    .setRefreshingChannel(true);\n          \n          \n            \n                BigtableDataSettings.Builder builder =\n          \n          \n            \n                    BigtableDataSettings.newBuilderForEmulator(port)\n          \n          \n            \n                        .setProjectId(DEFAULT_PROJECT_ID)\n          \n          \n            \n                        .setInstanceId(DEFAULT_INSTANCE_ID)\n          \n          \n            \n                        .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n          \n          \n            \n                        .setPrimingTableIds(tableIds)\n          \n          \n            \n                        .setRefreshingChannel(true);", "author": "yoshi-code-bot", "createdAt": "2020-10-16T23:18:07Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -191,8 +230,73 @@ public void testCreateForInstanceWithAppProfileHasCorrectSettings() throws Excep\n     assertThat(service.lastRequest.getAppProfileId()).isEqualTo(\"other-app-profile\");\n   }\n \n+  @Test\n+  public void testCreateWithRefreshingChannel() throws Exception {\n+    String[] tableIds = {\"fake-table1\", \"fake-table2\"};\n+    int poolSize = 3;\n+    BigtableDataSettings.Builder builder = BigtableDataSettings.newBuilderForEmulator(port)\n+        .setProjectId(DEFAULT_PROJECT_ID)\n+        .setInstanceId(DEFAULT_INSTANCE_ID)\n+        .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n+        .setPrimingTableIds(tableIds)\n+        .setRefreshingChannel(true);", "originalCommit": "61d5e632e6c64e273ac064150af91e0a814979dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45673db1fec87c67863ad0b1d243c7091d3bd27d", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\nindex f900fb82..579f0d9f 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\n\n@@ -234,12 +238,13 @@ public class BigtableDataClientFactoryTest {\n   public void testCreateWithRefreshingChannel() throws Exception {\n     String[] tableIds = {\"fake-table1\", \"fake-table2\"};\n     int poolSize = 3;\n-    BigtableDataSettings.Builder builder = BigtableDataSettings.newBuilderForEmulator(port)\n-        .setProjectId(DEFAULT_PROJECT_ID)\n-        .setInstanceId(DEFAULT_INSTANCE_ID)\n-        .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n-        .setPrimingTableIds(tableIds)\n-        .setRefreshingChannel(true);\n+    BigtableDataSettings.Builder builder =\n+        BigtableDataSettings.newBuilderForEmulator(port)\n+            .setProjectId(DEFAULT_PROJECT_ID)\n+            .setInstanceId(DEFAULT_INSTANCE_ID)\n+            .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n+            .setPrimingTableIds(tableIds)\n+            .setRefreshingChannel(true);\n     InstantiatingGrpcChannelProvider channelProvider =\n         (InstantiatingGrpcChannelProvider) builder.stubSettings().getTransportChannelProvider();\n     InstantiatingGrpcChannelProvider.Builder channelProviderBuilder = channelProvider.toBuilder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1OTQwMA==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r506759400", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .setTableName(String.format(\"projects/%s/instances/%s/tables/%s\",\n          \n          \n            \n                            DEFAULT_PROJECT_ID, DEFAULT_INSTANCE_ID, tableId))\n          \n          \n            \n                        .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n          \n          \n            \n                        .setRows(RowSet.newBuilder().addRowKeys(ByteString.copyFromUtf8(\"nonexistent-priming-row\")))\n          \n          \n            \n                        .setFilter(RowFilter.newBuilder().setBlockAllFilter(true).build())\n          \n          \n            \n                        .setRowsLimit(1)\n          \n          \n            \n                        .build()\n          \n          \n            \n                    );\n          \n          \n            \n                            .setTableName(\n          \n          \n            \n                                String.format(\n          \n          \n            \n                                    \"projects/%s/instances/%s/tables/%s\",\n          \n          \n            \n                                    DEFAULT_PROJECT_ID, DEFAULT_INSTANCE_ID, tableId))\n          \n          \n            \n                            .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n          \n          \n            \n                            .setRows(\n          \n          \n            \n                                RowSet.newBuilder()\n          \n          \n            \n                                    .addRowKeys(ByteString.copyFromUtf8(\"nonexistent-priming-row\")))\n          \n          \n            \n                            .setFilter(RowFilter.newBuilder().setBlockAllFilter(true).build())\n          \n          \n            \n                            .setRowsLimit(1)\n          \n          \n            \n                            .build());", "author": "yoshi-code-bot", "createdAt": "2020-10-16T23:18:07Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -191,8 +230,73 @@ public void testCreateForInstanceWithAppProfileHasCorrectSettings() throws Excep\n     assertThat(service.lastRequest.getAppProfileId()).isEqualTo(\"other-app-profile\");\n   }\n \n+  @Test\n+  public void testCreateWithRefreshingChannel() throws Exception {\n+    String[] tableIds = {\"fake-table1\", \"fake-table2\"};\n+    int poolSize = 3;\n+    BigtableDataSettings.Builder builder = BigtableDataSettings.newBuilderForEmulator(port)\n+        .setProjectId(DEFAULT_PROJECT_ID)\n+        .setInstanceId(DEFAULT_INSTANCE_ID)\n+        .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n+        .setPrimingTableIds(tableIds)\n+        .setRefreshingChannel(true);\n+    InstantiatingGrpcChannelProvider channelProvider =\n+        (InstantiatingGrpcChannelProvider) builder.stubSettings().getTransportChannelProvider();\n+    InstantiatingGrpcChannelProvider.Builder channelProviderBuilder = channelProvider.toBuilder();\n+    channelProviderBuilder.setPoolSize(poolSize);\n+    builder.stubSettings().setTransportChannelProvider(channelProviderBuilder.build());\n+\n+    BigtableDataClientFactory factory = BigtableDataClientFactory.create(builder.build());\n+    factory.createDefault();\n+    factory.createForAppProfile(\"other-appprofile\");\n+    factory.createForInstance(\"other-project\", \"other-instance\");\n+\n+    // Make sure that the clients are sharing the same ChannelPool\n+    assertThat(attributes).hasSize(poolSize);\n+    // Make sure that prime requests were sent only once per table per connection\n+    assertThat(service.readRowsRequests).hasSize(poolSize * tableIds.length);\n+    List<ReadRowsRequest> expectedRequests = new LinkedList<>();\n+    for (String tableId : tableIds) {\n+      for (int i = 0; i < poolSize; i++) {\n+        expectedRequests.add(\n+            ReadRowsRequest.newBuilder()\n+            .setTableName(String.format(\"projects/%s/instances/%s/tables/%s\",\n+                DEFAULT_PROJECT_ID, DEFAULT_INSTANCE_ID, tableId))\n+            .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n+            .setRows(RowSet.newBuilder().addRowKeys(ByteString.copyFromUtf8(\"nonexistent-priming-row\")))\n+            .setFilter(RowFilter.newBuilder().setBlockAllFilter(true).build())\n+            .setRowsLimit(1)\n+            .build()\n+        );", "originalCommit": "61d5e632e6c64e273ac064150af91e0a814979dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45673db1fec87c67863ad0b1d243c7091d3bd27d", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\nindex f900fb82..579f0d9f 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\n\n@@ -234,12 +238,13 @@ public class BigtableDataClientFactoryTest {\n   public void testCreateWithRefreshingChannel() throws Exception {\n     String[] tableIds = {\"fake-table1\", \"fake-table2\"};\n     int poolSize = 3;\n-    BigtableDataSettings.Builder builder = BigtableDataSettings.newBuilderForEmulator(port)\n-        .setProjectId(DEFAULT_PROJECT_ID)\n-        .setInstanceId(DEFAULT_INSTANCE_ID)\n-        .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n-        .setPrimingTableIds(tableIds)\n-        .setRefreshingChannel(true);\n+    BigtableDataSettings.Builder builder =\n+        BigtableDataSettings.newBuilderForEmulator(port)\n+            .setProjectId(DEFAULT_PROJECT_ID)\n+            .setInstanceId(DEFAULT_INSTANCE_ID)\n+            .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n+            .setPrimingTableIds(tableIds)\n+            .setRefreshingChannel(true);\n     InstantiatingGrpcChannelProvider channelProvider =\n         (InstantiatingGrpcChannelProvider) builder.stubSettings().getTransportChannelProvider();\n     InstantiatingGrpcChannelProvider.Builder channelProviderBuilder = channelProvider.toBuilder();\n"}}, {"oid": "45673db1fec87c67863ad0b1d243c7091d3bd27d", "url": "https://github.com/googleapis/java-bigtable/commit/45673db1fec87c67863ad0b1d243c7091d3bd27d", "message": "Fix formatting", "committedDate": "2020-10-16T23:30:12Z", "type": "commit"}, {"oid": "c89aa60cd6da1f381229f75aae0d853e7557cf7a", "url": "https://github.com/googleapis/java-bigtable/commit/c89aa60cd6da1f381229f75aae0d853e7557cf7a", "message": "Fix test case", "committedDate": "2020-10-18T01:57:57Z", "type": "forcePushed"}, {"oid": "139254dd248d95fbdea3de99f61920aa5ccd6c6a", "url": "https://github.com/googleapis/java-bigtable/commit/139254dd248d95fbdea3de99f61920aa5ccd6c6a", "message": "Fix test case", "committedDate": "2020-10-18T02:03:43Z", "type": "commit"}, {"oid": "139254dd248d95fbdea3de99f61920aa5ccd6c6a", "url": "https://github.com/googleapis/java-bigtable/commit/139254dd248d95fbdea3de99f61920aa5ccd6c6a", "message": "Fix test case", "committedDate": "2020-10-18T02:03:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjA3NQ==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r507822075", "bodyText": "can we instead move this logic to FakeServiceHelper?", "author": "kolea2", "createdAt": "2020-10-19T14:57:41Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -60,16 +76,35 @@\n   private WatchdogProvider watchdogProvider;\n   private ApiClock apiClock;\n   private BigtableDataSettings defaultSettings;\n+  private int port;\n+\n+  private final BlockingQueue<Attributes> attributes = new LinkedBlockingDeque<>();\n \n   @Before\n   public void setUp() throws IOException {\n     service = new FakeBigtableService();\n \n-    serviceHelper = new FakeServiceHelper(service);\n-    serviceHelper.start();\n+    try (ServerSocket ss = new ServerSocket(0)) {\n+      port = ss.getLocalPort();\n+    }\n+\n+    fakeServer =\n+        ServerBuilder.forPort(port)\n+            .addService(service)\n+            .addTransportFilter(", "originalCommit": "139254dd248d95fbdea3de99f61920aa5ccd6c6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMDU1OA==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r507930558", "bodyText": "\ud83d\udc4d Moved to FakeServiceHelper.", "author": "mutianf", "createdAt": "2020-10-19T17:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "213112311e3d47587f79255d75fb13784dd53213", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\nindex b9d8d733..f4bb847d 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\n\n@@ -83,25 +80,17 @@ public class BigtableDataClientFactoryTest {\n   @Before\n   public void setUp() throws IOException {\n     service = new FakeBigtableService();\n-\n-    try (ServerSocket ss = new ServerSocket(0)) {\n-      port = ss.getLocalPort();\n-    }\n-\n-    fakeServer =\n-        ServerBuilder.forPort(port)\n-            .addService(service)\n-            .addTransportFilter(\n-                new ServerTransportFilter() {\n-                  @Override\n-                  public Attributes transportReady(Attributes transportAttrs) {\n-                    attributes.add(transportAttrs);\n-                    return super.transportReady(transportAttrs);\n-                  }\n-                })\n-            .build();\n-\n-    fakeServer.start();\n+    ServerTransportFilter transportFilter =\n+        new ServerTransportFilter() {\n+          @Override\n+          public Attributes transportReady(Attributes transportAttrs) {\n+            attributes.add(transportAttrs);\n+            return super.transportReady(transportAttrs);\n+          }\n+        };\n+    serviceHelper = new FakeServiceHelper(null, transportFilter, service);\n+    port = serviceHelper.getPort();\n+    serviceHelper.start();\n \n     BigtableDataSettings.Builder builder =\n         BigtableDataSettings.newBuilderForEmulator(port)\n"}}, {"oid": "213112311e3d47587f79255d75fb13784dd53213", "url": "https://github.com/googleapis/java-bigtable/commit/213112311e3d47587f79255d75fb13784dd53213", "message": "Add ServerTransportFilter in FakeServiceHelper", "committedDate": "2020-10-19T17:32:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMzY3OA==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r508613678", "bodyText": "Please add comment, something along the lines of:\nChannel refreshing only needs to be configured on the shared ClientContext, derivative clients don't have the ability to reconfigure the refresh logic", "author": "igorbernstein2", "createdAt": "2020-10-20T15:31:15Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactory.java", "diffHunk": "@@ -189,8 +189,9 @@ public BigtableDataClient createForInstance(\n   }\n \n   // Update stub settings to use shared resources in this factory\n-  private void patchStubSettings(StubSettings.Builder stubSettings) {\n+  private void patchStubSettings(EnhancedBigtableStubSettings.Builder stubSettings) {\n     stubSettings\n+        .setRefreshingChannel(false)", "originalCommit": "213112311e3d47587f79255d75fb13784dd53213", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ1NTg4Ng==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r509455886", "bodyText": "Added comments.", "author": "mutianf", "createdAt": "2020-10-21T17:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMzY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "2ff40075d061197b3fa3fead5dc8d3c48ddb5f8e", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactory.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactory.java\nindex e5dbb54b..d4561ab4 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactory.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactory.java\n\n@@ -191,6 +191,8 @@ public final class BigtableDataClientFactory implements AutoCloseable {\n   // Update stub settings to use shared resources in this factory\n   private void patchStubSettings(EnhancedBigtableStubSettings.Builder stubSettings) {\n     stubSettings\n+        // Channel refreshing will be configured in the shared ClientContext. Derivative clients\n+        // won't be able to reconfigure the refreshing logic\n         .setRefreshingChannel(false)\n         .setTransportChannelProvider(\n             FixedTransportChannelProvider.create(sharedClientContext.getTransportChannel()))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDA4NA==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r508624084", "bodyText": "I think there is a subtle bug here:\nIf the original CredentialsProvider was a GoogleCredentialsProvider then each time getCredentials is called, it will be a new instance, which means the credentials used for refreshing will diverge from the normal request credentials.\nI think you need to wrap reset the credentials to be FixedCredentials here.\nAlso please move the getCredentials line into its own try/catch its kinda hard to see which line can throw the IOException", "author": "igorbernstein2", "createdAt": "2020-10-20T15:40:02Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "diffHunk": "@@ -806,6 +807,20 @@ public EnhancedBigtableStubSettings build() {\n         Preconditions.checkArgument(\n             getTransportChannelProvider() instanceof InstantiatingGrpcChannelProvider,\n             \"refreshingChannel only works with InstantiatingGrpcChannelProviders\");\n+        InstantiatingGrpcChannelProvider.Builder channelProviderBuilder =\n+            ((InstantiatingGrpcChannelProvider) getTransportChannelProvider()).toBuilder();\n+        try {\n+          channelProviderBuilder.setChannelPrimer(\n+              BigtableChannelPrimer.create(\n+                  getCredentialsProvider().getCredentials(),", "originalCommit": "213112311e3d47587f79255d75fb13784dd53213", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0NDk5Mw==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r508644993", "bodyText": "To add here, can we add a test to ensure the credentials are consistent?", "author": "kolea2", "createdAt": "2020-10-20T15:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ1OTQ3NA==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r509459474", "bodyText": "Updated BigtableDataClientFactoryTest.testCreateWithRefreshingChannel test to verify that getCredentials is only called once by the credentialProvider we set (similar to test testNewClientsShareTransportChannel.testNewClientsShareTransportChannel). Also added a test in EnhancedBigtableStubSettingsTest to make sure it's returning the same credentials.", "author": "mutianf", "createdAt": "2020-10-21T17:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "2ff40075d061197b3fa3fead5dc8d3c48ddb5f8e", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java\nindex 600e4b33..2806420b 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java\n\n@@ -809,17 +811,19 @@ public class EnhancedBigtableStubSettings extends StubSettings<EnhancedBigtableS\n             \"refreshingChannel only works with InstantiatingGrpcChannelProviders\");\n         InstantiatingGrpcChannelProvider.Builder channelProviderBuilder =\n             ((InstantiatingGrpcChannelProvider) getTransportChannelProvider()).toBuilder();\n-        try {\n-          channelProviderBuilder.setChannelPrimer(\n-              BigtableChannelPrimer.create(\n-                  getCredentialsProvider().getCredentials(),\n-                  projectId,\n-                  instanceId,\n-                  appProfileId,\n-                  primedTableIds));\n-        } catch (IOException e) {\n-          throw new RuntimeException(e);\n+        Credentials credentials = null;\n+        if (getCredentialsProvider() != null) {\n+          try {\n+            credentials = getCredentialsProvider().getCredentials();\n+          } catch (IOException e) {\n+            throw new RuntimeException(e);\n+          }\n         }\n+        // Use shared credentials\n+        this.setCredentialsProvider(FixedCredentialsProvider.create(credentials));\n+        channelProviderBuilder.setChannelPrimer(\n+            BigtableChannelPrimer.create(\n+                credentials, projectId, instanceId, appProfileId, primedTableIds));\n         this.setTransportChannelProvider(channelProviderBuilder.build());\n       }\n       return new EnhancedBigtableStubSettings(this);\n"}}, {"oid": "2ff40075d061197b3fa3fead5dc8d3c48ddb5f8e", "url": "https://github.com/googleapis/java-bigtable/commit/2ff40075d061197b3fa3fead5dc8d3c48ddb5f8e", "message": "Fix credentials provider settings add added test to verify it", "committedDate": "2020-10-21T17:01:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1NjQ1NQ==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r510256455", "bodyText": "Might be good to split termination attrs from setup attrs", "author": "igorbernstein2", "createdAt": "2020-10-22T15:30:17Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -60,16 +73,32 @@\n   private WatchdogProvider watchdogProvider;\n   private ApiClock apiClock;\n   private BigtableDataSettings defaultSettings;\n+  private int port;\n+\n+  private final BlockingQueue<Attributes> attributes = new LinkedBlockingDeque<>();\n \n   @Before\n   public void setUp() throws IOException {\n     service = new FakeBigtableService();\n-\n-    serviceHelper = new FakeServiceHelper(service);\n+    ServerTransportFilter transportFilter =\n+        new ServerTransportFilter() {\n+          @Override\n+          public Attributes transportReady(Attributes transportAttrs) {\n+            attributes.add(transportAttrs);\n+            return super.transportReady(transportAttrs);\n+          }\n+\n+          @Override\n+          public void transportTerminated(Attributes transportAttrs) {\n+            attributes.add(transportAttrs);", "originalCommit": "2ff40075d061197b3fa3fead5dc8d3c48ddb5f8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d26e17a64445146c6fe81463e003324196a04ede", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\nindex 792ecdba..25c341d6 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\n\n@@ -75,7 +75,8 @@ public class BigtableDataClientFactoryTest {\n   private BigtableDataSettings defaultSettings;\n   private int port;\n \n-  private final BlockingQueue<Attributes> attributes = new LinkedBlockingDeque<>();\n+  private final BlockingQueue<Attributes> setUpAttributes = new LinkedBlockingDeque<>();\n+  private final BlockingQueue<Attributes> terminateAttributes = new LinkedBlockingDeque<>();\n \n   @Before\n   public void setUp() throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1ODAzMA==", "url": "https://github.com/googleapis/java-bigtable/pull/474#discussion_r510258030", "bodyText": "Make sure that only 1 instance is created for all clients", "author": "igorbernstein2", "createdAt": "2020-10-22T15:32:22Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java", "diffHunk": "@@ -191,8 +220,95 @@ public void testCreateForInstanceWithAppProfileHasCorrectSettings() throws Excep\n     assertThat(service.lastRequest.getAppProfileId()).isEqualTo(\"other-app-profile\");\n   }\n \n+  @Test\n+  public void testCreateWithRefreshingChannel() throws Exception {\n+    String[] tableIds = {\"fake-table1\", \"fake-table2\"};\n+    int poolSize = 3;\n+    BigtableDataSettings.Builder builder =\n+        BigtableDataSettings.newBuilderForEmulator(port)\n+            .setProjectId(DEFAULT_PROJECT_ID)\n+            .setInstanceId(DEFAULT_INSTANCE_ID)\n+            .setAppProfileId(DEFAULT_APP_PROFILE_ID)\n+            .setPrimingTableIds(tableIds)\n+            .setRefreshingChannel(true);\n+    builder\n+        .stubSettings()\n+        .setCredentialsProvider(credentialsProvider)\n+        .setStreamWatchdogProvider(watchdogProvider)\n+        .setExecutorProvider(executorProvider);\n+    InstantiatingGrpcChannelProvider channelProvider =\n+        (InstantiatingGrpcChannelProvider) builder.stubSettings().getTransportChannelProvider();\n+    InstantiatingGrpcChannelProvider.Builder channelProviderBuilder = channelProvider.toBuilder();\n+    channelProviderBuilder.setPoolSize(poolSize);\n+    builder.stubSettings().setTransportChannelProvider(channelProviderBuilder.build());\n+\n+    BigtableDataClientFactory factory = BigtableDataClientFactory.create(builder.build());\n+    factory.createDefault();\n+    factory.createForAppProfile(\"other-appprofile\");\n+    factory.createForInstance(\"other-project\", \"other-instance\");\n+\n+    // Make sure that only 1 instance is created by each provider", "originalCommit": "2ff40075d061197b3fa3fead5dc8d3c48ddb5f8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d26e17a64445146c6fe81463e003324196a04ede", "chunk": "diff --git a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\nindex 792ecdba..25c341d6 100644\n--- a/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\n+++ b/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/BigtableDataClientFactoryTest.java\n\n@@ -247,13 +248,13 @@ public class BigtableDataClientFactoryTest {\n     factory.createForAppProfile(\"other-appprofile\");\n     factory.createForInstance(\"other-project\", \"other-instance\");\n \n-    // Make sure that only 1 instance is created by each provider\n+    // Make sure that only 1 instance is created for all clients\n     Mockito.verify(credentialsProvider, Mockito.times(1)).getCredentials();\n     Mockito.verify(executorProvider, Mockito.times(1)).getExecutor();\n     Mockito.verify(watchdogProvider, Mockito.times(1)).getWatchdog();\n \n     // Make sure that the clients are sharing the same ChannelPool\n-    assertThat(attributes).hasSize(poolSize);\n+    assertThat(setUpAttributes).hasSize(poolSize);\n \n     // Make sure that prime requests were sent only once per table per connection\n     assertThat(service.readRowsRequests).hasSize(poolSize * tableIds.length);\n"}}, {"oid": "d26e17a64445146c6fe81463e003324196a04ede", "url": "https://github.com/googleapis/java-bigtable/commit/d26e17a64445146c6fe81463e003324196a04ede", "message": "Clean up test cases and comments", "committedDate": "2020-10-22T16:59:04Z", "type": "commit"}]}