{"pr_number": 299, "pr_title": "feat: adding utility to transform protobuf into model object", "pr_createdAt": "2020-05-11T17:12:40Z", "pr_url": "https://github.com/googleapis/java-bigtable/pull/299", "timeline": [{"oid": "ea099c43aa7316caeab63d96ddbc658e817c36ed", "url": "https://github.com/googleapis/java-bigtable/commit/ea099c43aa7316caeab63d96ddbc658e817c36ed", "message": "feat: adding utility to transform protobuf into model object\n\nWith this commit, User shall be able to transform protobuf object to bigtable client's specific model objects.", "committedDate": "2020-05-11T17:11:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwMzk1NA==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423203954", "bodyText": "just the table name", "author": "igorbernstein2", "createdAt": "2020-05-11T17:32:33Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/BulkMutation.java", "diffHunk": "@@ -114,6 +114,20 @@ public MutateRowsRequest toProto(RequestContext requestContext) {\n         .build();\n   }\n \n+  /**\n+   * Wraps the protobuf {@link MutateRowsRequest}.\n+   *\n+   * <p>WARNING: Please note that the project id & instance id in the table name will be overwritten", "originalCommit": "ea099c43aa7316caeab63d96ddbc658e817c36ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNDQ1MA==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423204450", "bodyText": "Also please add a warning that the mutations should be idempotent (ie should not use server timestamps) because the mutations will be retried", "author": "igorbernstein2", "createdAt": "2020-05-11T17:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwMzk1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNDc2Mw==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423204763", "bodyText": "Also, lets mark this as BetaApi, in case this doesn't prove useful", "author": "igorbernstein2", "createdAt": "2020-05-11T17:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwMzk1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2MDgyNw==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423560827", "bodyText": "Thanks for the review, I have updated the JavaDoc with the same information. PTAL", "author": "rahulKQL", "createdAt": "2020-05-12T08:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwMzk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "154130de8ee8e5812e4bb3f33e44a3b721d14f50", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/BulkMutation.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/BulkMutation.java\nindex 5be85dbc..0073567f 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/BulkMutation.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/BulkMutation.java\n\n@@ -117,9 +118,10 @@ public final class BulkMutation implements Serializable, Cloneable {\n   /**\n    * Wraps the protobuf {@link MutateRowsRequest}.\n    *\n-   * <p>WARNING: Please note that the project id & instance id in the table name will be overwritten\n-   * by the configuration in the BigtableDataClient.\n+   * <p>WARNING: Please note that the table name will be overwritten by the configuration in the\n+   * BigtableDataClient. The mutation must always be idempotent because it would be retried.\n    */\n+  @BetaApi\n   public static BulkMutation fromProtobuf(@Nonnull MutateRowsRequest request) {\n     BulkMutation bulkMutation =\n         BulkMutation.create(NameUtil.extractTableIdFromTableName(request.getTableName()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTE2OA==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423205168", "bodyText": "Same notes as BulkMutation, but you dont need to comment about idempotency this rpc is not retried", "author": "igorbernstein2", "createdAt": "2020-05-11T17:34:39Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ConditionalRowMutation.java", "diffHunk": "@@ -136,4 +136,19 @@ public CheckAndMutateRowRequest toProto(RequestContext requestContext) {\n         .setAppProfileId(requestContext.getAppProfileId())\n         .build();\n   }\n+\n+  /**\n+   * Wraps the protobuf {@link CheckAndMutateRowRequest}.\n+   *\n+   * <p>WARNING: Please note that the project id & instance id in the table name will be overwritten\n+   * by the configuration in the BigtableDataClient.\n+   */", "originalCommit": "ea099c43aa7316caeab63d96ddbc658e817c36ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "154130de8ee8e5812e4bb3f33e44a3b721d14f50", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ConditionalRowMutation.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ConditionalRowMutation.java\nindex 233b03e3..782a7c14 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ConditionalRowMutation.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ConditionalRowMutation.java\n\n@@ -140,9 +141,10 @@ public final class ConditionalRowMutation implements Serializable {\n   /**\n    * Wraps the protobuf {@link CheckAndMutateRowRequest}.\n    *\n-   * <p>WARNING: Please note that the project id & instance id in the table name will be overwritten\n-   * by the configuration in the BigtableDataClient.\n+   * <p>WARNING: Please note that the table name will be overwritten by the configuration in the\n+   * BigtableDataClient. The mutation must always be idempotent because it would be retried.\n    */\n+  @BetaApi\n   public static ConditionalRowMutation fromProtobuf(@Nonnull CheckAndMutateRowRequest request) {\n     String tableId = NameUtil.extractTableIdFromTableName(request.getTableName());\n     ConditionalRowMutation rowMutation =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTI5NQ==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423205295", "bodyText": "same as ConditionalRowMutation", "author": "igorbernstein2", "createdAt": "2020-05-11T17:34:51Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ReadModifyWriteRow.java", "diffHunk": "@@ -137,4 +137,19 @@ public ReadModifyWriteRowRequest toProto(RequestContext requestContext) {\n         .setAppProfileId(requestContext.getAppProfileId())\n         .build();\n   }\n+\n+  /**\n+   * Wraps the protobuf {@link ReadModifyWriteRowRequest}.\n+   *\n+   * <p>WARNING: Please note that the project id & instance id in the table name will be overwritten\n+   * by the configuration in the BigtableDataClient.\n+   */", "originalCommit": "ea099c43aa7316caeab63d96ddbc658e817c36ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "154130de8ee8e5812e4bb3f33e44a3b721d14f50", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ReadModifyWriteRow.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ReadModifyWriteRow.java\nindex dd3590a6..c2d74cc4 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ReadModifyWriteRow.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ReadModifyWriteRow.java\n\n@@ -141,9 +142,10 @@ public final class ReadModifyWriteRow implements Serializable {\n   /**\n    * Wraps the protobuf {@link ReadModifyWriteRowRequest}.\n    *\n-   * <p>WARNING: Please note that the project id & instance id in the table name will be overwritten\n-   * by the configuration in the BigtableDataClient.\n+   * <p>WARNING: Please note that the table name will be overwritten by the configuration in the\n+   * BigtableDataClient.\n    */\n+  @BetaApi\n   public static ReadModifyWriteRow fromProtobuf(ReadModifyWriteRowRequest request) {\n     String tableId = NameUtil.extractTableIdFromTableName(request.getTableName());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTQwMw==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423205403", "bodyText": "Same as bulk mutation", "author": "igorbernstein2", "createdAt": "2020-05-11T17:35:03Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutation.java", "diffHunk": "@@ -214,4 +214,18 @@ public MutateRowsRequest toBulkProto(RequestContext requestContext) {\n             Entry.newBuilder().setRowKey(key).addAllMutations(mutation.getMutations()).build())\n         .build();\n   }\n+\n+  /**\n+   * Wraps the protobuf {@link MutateRowRequest}.\n+   *\n+   * <p>WARNING: Please note that the project id & instance id in the table name will be overwritten\n+   * by the configuration in the BigtableDataClient.", "originalCommit": "ea099c43aa7316caeab63d96ddbc658e817c36ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "154130de8ee8e5812e4bb3f33e44a3b721d14f50", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutation.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutation.java\nindex dc9d55db..5e9020c4 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutation.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutation.java\n\n@@ -218,14 +219,14 @@ public final class RowMutation implements MutationApi<RowMutation>, Serializable\n   /**\n    * Wraps the protobuf {@link MutateRowRequest}.\n    *\n-   * <p>WARNING: Please note that the project id & instance id in the table name will be overwritten\n-   * by the configuration in the BigtableDataClient.\n+   * <p>WARNING: Please note that the table name will be overwritten by the configuration in the\n+   * BigtableDataClient. The mutation must always be idempotent because it would be retried.\n    */\n+  @BetaApi\n   public static RowMutation fromProtobuf(@Nonnull MutateRowRequest request) {\n     String tableId = NameUtil.extractTableIdFromTableName(request.getTableName());\n \n-    // TODO: Should we give an option for Mutation.fromProto(List<com.google.bigtable.v2.Mutation>)?\n     return RowMutation.create(\n-        tableId, request.getRowKey(), Mutation.fromProtoUnsafe(request.getMutationsList()));\n+        tableId, request.getRowKey(), Mutation.fromProtobuf(request.getMutationsList()));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTg1MA==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423205850", "bodyText": "I dont think we need this...its only used by BulkMutation and if someone is using BulkMutation, they are already using the models", "author": "igorbernstein2", "createdAt": "2020-05-11T17:35:48Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutationEntry.java", "diffHunk": "@@ -177,4 +178,11 @@ public RowMutationEntry deleteRow() {\n         .addAllMutations(mutation.getMutations())\n         .build();\n   }\n+\n+  /** Wraps the protobuf {@link MutateRowRequest}. */\n+  public static RowMutationEntry fromProtobuf(MutateRowsRequest.Entry request) {\n+    // TODO: Should we have an option for Mutation.fromProto(List<com.google.bigtable.v2.Mutation>)?\n+    return new RowMutationEntry(\n+        request.getRowKey(), Mutation.fromProtoUnsafe(request.getMutationsList()));\n+  }", "originalCommit": "ea099c43aa7316caeab63d96ddbc658e817c36ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "154130de8ee8e5812e4bb3f33e44a3b721d14f50", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutationEntry.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutationEntry.java\nindex 208d6376..9239b304 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutationEntry.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutationEntry.java\n\n@@ -178,11 +177,4 @@ public class RowMutationEntry implements MutationApi<RowMutationEntry>, Serializ\n         .addAllMutations(mutation.getMutations())\n         .build();\n   }\n-\n-  /** Wraps the protobuf {@link MutateRowRequest}. */\n-  public static RowMutationEntry fromProtobuf(MutateRowsRequest.Entry request) {\n-    // TODO: Should we have an option for Mutation.fromProto(List<com.google.bigtable.v2.Mutation>)?\n-    return new RowMutationEntry(\n-        request.getRowKey(), Mutation.fromProtoUnsafe(request.getMutationsList()));\n-  }\n }\n"}}, {"oid": "154130de8ee8e5812e4bb3f33e44a3b721d14f50", "url": "https://github.com/googleapis/java-bigtable/commit/154130de8ee8e5812e4bb3f33e44a3b721d14f50", "message": "chore: addressed feedback comments\n\n - updated the JavaDoc\n - marked the utility as `@BetaApi`", "committedDate": "2020-05-12T08:36:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3MTE1NQ==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423771155", "bodyText": "Here and everywhere else, please stay consistent with existing fromProto methods", "author": "igorbernstein2", "createdAt": "2020-05-12T14:18:22Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ConditionalRowMutation.java", "diffHunk": "@@ -136,4 +137,20 @@ public CheckAndMutateRowRequest toProto(RequestContext requestContext) {\n         .setAppProfileId(requestContext.getAppProfileId())\n         .build();\n   }\n+\n+  /**\n+   * Wraps the protobuf {@link CheckAndMutateRowRequest}.\n+   *\n+   * <p>WARNING: Please note that the table name will be overwritten by the configuration in the\n+   * BigtableDataClient. The mutation must always be idempotent because it would be retried.\n+   */\n+  @BetaApi\n+  public static ConditionalRowMutation fromProtobuf(@Nonnull CheckAndMutateRowRequest request) {", "originalCommit": "154130de8ee8e5812e4bb3f33e44a3b721d14f50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "511f924d76638758489850a1d3b6ab32c155a58a", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ConditionalRowMutation.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ConditionalRowMutation.java\nindex 782a7c14..ac4c5489 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ConditionalRowMutation.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/ConditionalRowMutation.java\n\n@@ -141,11 +141,11 @@ public final class ConditionalRowMutation implements Serializable {\n   /**\n    * Wraps the protobuf {@link CheckAndMutateRowRequest}.\n    *\n-   * <p>WARNING: Please note that the table name will be overwritten by the configuration in the\n-   * BigtableDataClient. The mutation must always be idempotent because it would be retried.\n+   * <p>WARNING: Please note that the table_name will be overwritten by the configuration in the\n+   * BigtableDataClient.\n    */\n   @BetaApi\n-  public static ConditionalRowMutation fromProtobuf(@Nonnull CheckAndMutateRowRequest request) {\n+  public static ConditionalRowMutation fromProto(@Nonnull CheckAndMutateRowRequest request) {\n     String tableId = NameUtil.extractTableIdFromTableName(request.getTableName());\n     ConditionalRowMutation rowMutation =\n         ConditionalRowMutation.create(tableId, request.getRowKey());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3ODQ4OQ==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423778489", "bodyText": "This javadoc is not quite right. Please rephrase to:\nConstructs a row mutation from an existing protobuf object.\n\n<p>Callers must ensure that the protobuf argument is not using serverside timestamps. The client assumes that all mutations are idempotent and will retry in case of transient errors. This can lead to row duplication.\n\n<p>When applied, the resulting Mutation object will ignore the project id and instance id in the table_name and instead apply the configuration in the client", "author": "igorbernstein2", "createdAt": "2020-05-12T14:27:12Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Mutation.java", "diffHunk": "@@ -87,6 +87,17 @@ public static Mutation fromProtoUnsafe(List<com.google.bigtable.v2.Mutation> pro\n     return mutation;\n   }\n \n+  /**\n+   * Wraps the List of protobuf {@link com.google.bigtable.v2.Mutation}. This method creates a\n+   * mutation instance that is idempotent in nature, which could safely be retried.", "originalCommit": "154130de8ee8e5812e4bb3f33e44a3b721d14f50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MDUzOA==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423780538", "bodyText": "Actually nevermind, please remove this fromProto method altogether. This object is not a top level model so from proto is not needed here", "author": "igorbernstein2", "createdAt": "2020-05-12T14:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3ODQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MzgwOQ==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423943809", "bodyText": "It seems we need this utility for RowMutation#fromProto. At present, there is no other option to create model.Mutation from List of proto com.google.bigtable.v2.Mutation.", "author": "rahulKQL", "createdAt": "2020-05-12T18:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3ODQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3MjcyMg==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423972722", "bodyText": "ok, can it be package private? or internalapi?", "author": "igorbernstein2", "createdAt": "2020-05-12T19:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3ODQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "511f924d76638758489850a1d3b6ab32c155a58a", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Mutation.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Mutation.java\nindex 99dae764..b8e04cf2 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Mutation.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Mutation.java\n\n@@ -88,11 +89,17 @@ public final class Mutation implements MutationApi<Mutation>, Serializable {\n   }\n \n   /**\n-   * Wraps the List of protobuf {@link com.google.bigtable.v2.Mutation}. This method creates a\n-   * mutation instance that is idempotent in nature, which could safely be retried.\n+   * Constructs a row mutation from an existing protobuf object.\n+   *\n+   * <p>Callers must ensure that the protobuf argument is not using serverside timestamps. The\n+   * client assumes that all mutations are idempotent and will retry in case of transient errors.\n+   * This can lead to row duplication.\n+   *\n+   * <p>When applied, the resulting Mutation object will ignore the project id and instance id in\n+   * the table_name and instead apply the configuration in the client\n    */\n-  @BetaApi\n-  public static Mutation fromProtobuf(List<com.google.bigtable.v2.Mutation> protos) {\n+  @VisibleForTesting\n+  static Mutation fromProto(List<com.google.bigtable.v2.Mutation> protos) {\n     Mutation mutation = new Mutation(false);\n     mutation.mutations.addAll(protos);\n     return mutation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MzAzNA==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423783034", "bodyText": "Please replace with:\nWraps the protobuf {@link MutateRowRequest}.\n<p>This is meant for advanced usage only. Please ensure that the MutateRowRequest does not use server side timestamps. The BigtableDataClient assumes that RowMutations are idempotent and is configured to enable retries by default. If serverside timestamps are enabled, this can lead to duplicate mutations\n\n<p>WARNING: Please note that the table name will be overwritten by the configuration in the\n   * BigtableDataClient.", "author": "igorbernstein2", "createdAt": "2020-05-12T14:32:58Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutation.java", "diffHunk": "@@ -214,4 +215,18 @@ public MutateRowsRequest toBulkProto(RequestContext requestContext) {\n             Entry.newBuilder().setRowKey(key).addAllMutations(mutation.getMutations()).build())\n         .build();\n   }\n+\n+  /**\n+   * Wraps the protobuf {@link MutateRowRequest}.\n+   *\n+   * <p>WARNING: Please note that the table name will be overwritten by the configuration in the\n+   * BigtableDataClient. The mutation must always be idempotent because it would be retried.", "originalCommit": "154130de8ee8e5812e4bb3f33e44a3b721d14f50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "511f924d76638758489850a1d3b6ab32c155a58a", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutation.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutation.java\nindex 5e9020c4..6c5456aa 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutation.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/RowMutation.java\n\n@@ -219,14 +219,19 @@ public final class RowMutation implements MutationApi<RowMutation>, Serializable\n   /**\n    * Wraps the protobuf {@link MutateRowRequest}.\n    *\n-   * <p>WARNING: Please note that the table name will be overwritten by the configuration in the\n-   * BigtableDataClient. The mutation must always be idempotent because it would be retried.\n+   * <p>This is meant for advanced usage only. Please ensure that the MutateRowRequest does not use\n+   * server side timestamps. The BigtableDataClient assumes that RowMutations are idempotent and is\n+   * configured to enable retries by default. If serverside timestamps are enabled, this can lead to\n+   * duplicate mutations.\n+   *\n+   * <p>WARNING: when applied, the resulting mutation object will ignore the project id and instance\n+   * id in the table_name and instead apply the configuration in the client.\n    */\n   @BetaApi\n-  public static RowMutation fromProtobuf(@Nonnull MutateRowRequest request) {\n+  public static RowMutation fromProto(@Nonnull MutateRowRequest request) {\n     String tableId = NameUtil.extractTableIdFromTableName(request.getTableName());\n \n     return RowMutation.create(\n-        tableId, request.getRowKey(), Mutation.fromProtobuf(request.getMutationsList()));\n+        tableId, request.getRowKey(), Mutation.fromProto(request.getMutationsList()));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4NDkwOA==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423784908", "bodyText": "The mutation must always be idempotent because it would be retried. needs to be explained more, please add a similar warning as described below for RowMutation.", "author": "igorbernstein2", "createdAt": "2020-05-12T14:35:25Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/BulkMutation.java", "diffHunk": "@@ -114,6 +115,21 @@ public MutateRowsRequest toProto(RequestContext requestContext) {\n         .build();\n   }\n \n+  /**\n+   * Wraps the protobuf {@link MutateRowsRequest}.\n+   *\n+   * <p>WARNING: Please note that the table name will be overwritten by the configuration in the\n+   * BigtableDataClient. The mutation must always be idempotent because it would be retried.", "originalCommit": "154130de8ee8e5812e4bb3f33e44a3b721d14f50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "511f924d76638758489850a1d3b6ab32c155a58a", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/BulkMutation.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/BulkMutation.java\nindex 0073567f..95d10872 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/BulkMutation.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/BulkMutation.java\n\n@@ -118,11 +118,16 @@ public final class BulkMutation implements Serializable, Cloneable {\n   /**\n    * Wraps the protobuf {@link MutateRowsRequest}.\n    *\n-   * <p>WARNING: Please note that the table name will be overwritten by the configuration in the\n-   * BigtableDataClient. The mutation must always be idempotent because it would be retried.\n+   * <p>This is meant for advanced usage only. Please ensure that the MutateRowsRequest does not use\n+   * server side timestamps. The BigtableDataClient assumes that mutation present in BulkMutation\n+   * are idempotent and is configured to enable retries by default. If serverside timestamps are\n+   * enabled then that can lead to duplicate mutations.\n+   *\n+   * <p>WARNING: when applied, the resulting mutation object will ignore the project id and instance\n+   * id in the table_name and instead apply the configuration in the client.\n    */\n   @BetaApi\n-  public static BulkMutation fromProtobuf(@Nonnull MutateRowsRequest request) {\n+  public static BulkMutation fromProto(@Nonnull MutateRowsRequest request) {\n     BulkMutation bulkMutation =\n         BulkMutation.create(NameUtil.extractTableIdFromTableName(request.getTableName()));\n     bulkMutation.builder = request.toBuilder();\n"}}, {"oid": "511f924d76638758489850a1d3b6ab32c155a58a", "url": "https://github.com/googleapis/java-bigtable/commit/511f924d76638758489850a1d3b6ab32c155a58a", "message": "chore: addressed feedback comments\n\n - Rephrased Javadoc to include more explanation\n - change `Mutation#fromProto` visibility to package only", "committedDate": "2020-05-12T18:18:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NDI3NQ==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r423984275", "bodyText": "Why is this visible for testing? I thought it was needed by RowMutation?", "author": "igorbernstein2", "createdAt": "2020-05-12T19:34:49Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Mutation.java", "diffHunk": "@@ -87,6 +88,23 @@ public static Mutation fromProtoUnsafe(List<com.google.bigtable.v2.Mutation> pro\n     return mutation;\n   }\n \n+  /**\n+   * Constructs a row mutation from an existing protobuf object.\n+   *\n+   * <p>Callers must ensure that the protobuf argument is not using serverside timestamps. The\n+   * client assumes that all mutations are idempotent and will retry in case of transient errors.\n+   * This can lead to row duplication.\n+   *\n+   * <p>When applied, the resulting Mutation object will ignore the project id and instance id in\n+   * the table_name and instead apply the configuration in the client\n+   */\n+  @VisibleForTesting", "originalCommit": "511f924d76638758489850a1d3b6ab32c155a58a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNjczNw==", "url": "https://github.com/googleapis/java-bigtable/pull/299#discussion_r424526737", "bodyText": "This was my overlook, I have removed the unneeded annotation. PTAL", "author": "rahulKQL", "createdAt": "2020-05-13T15:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NDI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e079eff1b3c90cc785a71a77b3884a0001e8e206", "chunk": "diff --git a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Mutation.java b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Mutation.java\nindex b8e04cf2..326d78cf 100644\n--- a/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Mutation.java\n+++ b/google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/models/Mutation.java\n\n@@ -98,7 +97,6 @@ public final class Mutation implements MutationApi<Mutation>, Serializable {\n    * <p>When applied, the resulting Mutation object will ignore the project id and instance id in\n    * the table_name and instead apply the configuration in the client\n    */\n-  @VisibleForTesting\n   static Mutation fromProto(List<com.google.bigtable.v2.Mutation> protos) {\n     Mutation mutation = new Mutation(false);\n     mutation.mutations.addAll(protos);\n"}}, {"oid": "e079eff1b3c90cc785a71a77b3884a0001e8e206", "url": "https://github.com/googleapis/java-bigtable/commit/e079eff1b3c90cc785a71a77b3884a0001e8e206", "message": "chore: removed VisibleForTesting annotation\n\nAs Mutation#fromProto is being used by RowMutation#fromProto, So removed `@VisibleForTesting` annotation", "committedDate": "2020-05-13T15:21:57Z", "type": "commit"}, {"oid": "1e680e8a76680af4a45170ab7261a17eee55f0e8", "url": "https://github.com/googleapis/java-bigtable/commit/1e680e8a76680af4a45170ab7261a17eee55f0e8", "message": "chore: extended unit tests to verify project and instance override", "committedDate": "2020-05-13T16:36:58Z", "type": "commit"}]}