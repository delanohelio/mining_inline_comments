{"pr_number": 421, "pr_title": "Add the set enabled function for the radio button options", "pr_createdAt": "2020-05-08T09:57:27Z", "pr_url": "https://github.com/opensrp/opensrp-client-native-form/pull/421", "timeline": [{"oid": "7703c8e6ccd06bad3da5f4a0876d163eebb7b0cf", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/7703c8e6ccd06bad3da5f4a0876d163eebb7b0cf", "message": ":zap: Add the set enabled function for the radio button options", "committedDate": "2020-05-08T09:55:51Z", "type": "commit"}, {"oid": "8d4b3ebb8686383765f8d62d5062cb08d4c20a0a", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/8d4b3ebb8686383765f8d62d5062cb08d4c20a0a", "message": ":zap: remove unwanted code", "committedDate": "2020-05-08T10:00:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2NjExNA==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/421#discussion_r422066114", "bodyText": "null check condition could be useless like if the relativeLayout will be null the system already through a ClassCastException because null cannot be cast so null check must be added before the casting.", "author": "owais-vd", "createdAt": "2020-05-08T10:22:40Z", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "diffHunk": "@@ -1033,6 +1038,30 @@ private void setReadOnlyAndFocus(View view, boolean visible, boolean popup) {\n         }\n     }\n \n+    /**\n+     * Gets the {@link AppCompatRadioButton} views on the whole {@link com.vijay.jsonwizard.widgets.NativeRadioButtonFactory} and updates the enabled status\n+     *\n+     * @param view    {@link View}\n+     * @param enabled {@link Boolean}\n+     */\n+    private void setReadOnlyRadioButtonOptions(View view, boolean enabled) {\n+        if (view != null) {\n+            for (int i = 0; i < ((RadioGroup) view).getChildCount(); i++) {\n+                RelativeLayout relativeLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n+                if (relativeLayout != null) {", "originalCommit": "8d4b3ebb8686383765f8d62d5062cb08d4c20a0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cacc36927562c8df4d22ee480804a3b415757233", "chunk": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\nindex 5a5fc1ea..a1448eca 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\n\n@@ -1046,1145 +1046,1157 @@ public class JsonFormActivity extends JsonFormBaseActivity implements JsonApi {\n      */\n     private void setReadOnlyRadioButtonOptions(View view, boolean enabled) {\n         if (view != null) {\n-            for (int i = 0; i < ((RadioGroup) view).getChildCount(); i++) {\n-                RelativeLayout relativeLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n-                if (relativeLayout != null) {\n-                    LinearLayout linearLayout = (LinearLayout) (relativeLayout).getChildAt(0);\n-                    if (linearLayout != null) {\n-                        LinearLayout linearLayout1 = (LinearLayout) (linearLayout).getChildAt(0);\n-                        if (linearLayout1 != null) {\n-                            AppCompatRadioButton appCompatRadioButton = (AppCompatRadioButton) (linearLayout1).getChildAt(0);\n-                            appCompatRadioButton.setEnabled(enabled);\n-                        }\n-                    }\n+            try {\n+                int viewChildrenCount = ((RadioGroup) view).getChildCount();\n+                for (int i = 0; i < viewChildrenCount; i++) {\n+                    RelativeLayout radioGroupChildLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n+                    LinearLayout linearLayout = (LinearLayout) (radioGroupChildLayout).getChildAt(0);\n+                    LinearLayout radioButtonMainLayout = (LinearLayout) (linearLayout).getChildAt(0);\n+                    AppCompatRadioButton appCompatRadioButton = (AppCompatRadioButton) (radioButtonMainLayout).getChildAt(0);\n+                    appCompatRadioButton.setEnabled(enabled);\n                 }\n+            } catch (ClassCastException e) {\n+                Timber.e(e, \" --> setReadOnlyRadioButtonOptions\");\n             }\n         }\n-    }\n \n-    private void checkViewConstraints(View curView, boolean popup) {\n-        String constraintTag = (String) curView.getTag(R.id.constraints);\n-        String widgetKey = (String) curView.getTag(R.id.key);\n-        String stepName = ((String) curView.getTag(R.id.address)).split(\":\")[0];\n-        if (constraintTag != null && constraintTag.length() > 0) {\n-            try {\n+        private void checkViewConstraints (View curView,boolean popup){\n+            String constraintTag = (String) curView.getTag(R.id.constraints);\n+            String widgetKey = (String) curView.getTag(R.id.key);\n+            String stepName = ((String) curView.getTag(R.id.address)).split(\":\")[0];\n+            if (constraintTag != null && constraintTag.length() > 0) {\n+                try {\n \n-                String errorMessage = null;\n-                String[] address = null;\n+                    String errorMessage = null;\n+                    String[] address = null;\n \n-                if (constraintTag.charAt(0) == '[') {\n-                    String addressString = (String) curView.getTag(R.id.address);\n-                    address = addressString.split(\":\");\n+                    if (constraintTag.charAt(0) == '[') {\n+                        String addressString = (String) curView.getTag(R.id.address);\n+                        address = addressString.split(\":\");\n \n-                    JSONArray constraint = new JSONArray(constraintTag);\n-                    for (int i = 0; i < constraint.length(); i++) {\n-                        JSONObject curConstraint = constraint.getJSONObject(i);\n-                        if (address.length == 2) {\n-                            String value = String.valueOf(getValueFromAddress(address, popup).get(JsonFormConstants.VALUE));\n-                            errorMessage = enforceConstraint(value, curView, curConstraint);\n-                            if (errorMessage != null) break;\n+                        JSONArray constraint = new JSONArray(constraintTag);\n+                        for (int i = 0; i < constraint.length(); i++) {\n+                            JSONObject curConstraint = constraint.getJSONObject(i);\n+                            if (address.length == 2) {\n+                                String value = String.valueOf(getValueFromAddress(address, popup).get(JsonFormConstants.VALUE));\n+                                errorMessage = enforceConstraint(value, curView, curConstraint);\n+                                if (errorMessage != null) break;\n+                            }\n                         }\n-                    }\n \n-                } else {\n-                    //Rules Engine\n-                    JSONObject constraint = new JSONObject(constraintTag);\n-                    Iterator<String> keys = constraint.keys();\n-                    while (keys.hasNext()) {\n-                        String curKey = keys.next();\n-                        JSONObject curConstraint = constraint.getJSONObject(curKey);\n+                    } else {\n+                        //Rules Engine\n+                        JSONObject constraint = new JSONObject(constraintTag);\n+                        Iterator<String> keys = constraint.keys();\n+                        while (keys.hasNext()) {\n+                            String curKey = keys.next();\n+                            JSONObject curConstraint = constraint.getJSONObject(curKey);\n \n \n-                        address = getAddressFromMap(widgetKey, stepName, JsonFormConstants.CONSTRAINTS);\n-                        if (address == null) {\n-                            address = getAddress(curView, curKey, curConstraint, JsonFormConstants.CONSTRAINTS);\n+                            address = getAddressFromMap(widgetKey, stepName, JsonFormConstants.CONSTRAINTS);\n+                            if (address == null) {\n+                                address = getAddress(curView, curKey, curConstraint, JsonFormConstants.CONSTRAINTS);\n+                            }\n+                            Facts curValueMap = getValueFromAddress(address, popup);\n+                            errorMessage = enforceConstraint(curValueMap, curConstraint);\n+                            if (errorMessage != null) break;\n                         }\n-                        Facts curValueMap = getValueFromAddress(address, popup);\n-                        errorMessage = enforceConstraint(curValueMap, curConstraint);\n-                        if (errorMessage != null) break;\n                     }\n-                }\n \n-                if (errorMessage != null) {\n-                    if (curView instanceof MaterialEditText) {\n-                        ((MaterialEditText) curView).setText(null);\n-                        ((MaterialEditText) curView).setError(errorMessage);\n-                    } else if (curView instanceof CheckBox) {\n-                        ((CheckBox) curView).setChecked(false);\n-                        Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();\n-                        String checkBoxKey = (String) curView.getTag(R.id.childKey);\n-\n-                        JSONObject questionObject = getObjectUsingAddress(address, popup);\n-                        for (int i = 0;\n-                             i < questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).length(); i++) {\n-                            JSONObject curOption =\n-                                    questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).getJSONObject(i);\n-                            if (curOption.getString(JsonFormConstants.KEY).equals(checkBoxKey)) {\n-                                curOption.put(JsonFormConstants.VALUE, \"false\");\n-                                break;\n+                    if (errorMessage != null) {\n+                        if (curView instanceof MaterialEditText) {\n+                            ((MaterialEditText) curView).setText(null);\n+                            ((MaterialEditText) curView).setError(errorMessage);\n+                        } else if (curView instanceof CheckBox) {\n+                            ((CheckBox) curView).setChecked(false);\n+                            Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();\n+                            String checkBoxKey = (String) curView.getTag(R.id.childKey);\n+\n+                            JSONObject questionObject = getObjectUsingAddress(address, popup);\n+                            for (int i = 0;\n+                                 i < questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).length(); i++) {\n+                                JSONObject curOption =\n+                                        questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).getJSONObject(i);\n+                                if (curOption.getString(JsonFormConstants.KEY).equals(checkBoxKey)) {\n+                                    curOption.put(JsonFormConstants.VALUE, \"false\");\n+                                    break;\n+                                }\n+                            }\n+                        } else if (curView.getTag(R.id.type).toString().equals(JsonFormConstants.NUMBER_SELECTOR) &&\n+                                !TextUtils.isEmpty(errorMessage) &&\n+                                (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n+\n+                            if (!\"false\".equals(errorMessage)) {\n+                                Intent localIntent = new Intent(JsonFormConstants.INTENT_ACTION.NUMBER_SELECTOR_FACTORY);\n+                                localIntent.putExtra(JsonFormConstants.MAX_SELECTION_VALUE, Integer.valueOf(errorMessage));\n+                                localIntent.putExtra(JsonFormConstants.JSON_OBJECT_KEY, curView.getTag(R.id.key).toString());\n+                                localIntent.putExtra(JsonFormConstants.STEPNAME, address[0]);\n+                                localIntent.putExtra(JsonFormConstants.IS_POPUP, popup);\n+                                localBroadcastManager.sendBroadcast(localIntent);\n+                                curView.setTag(R.id.previous, errorMessage); //Store value to avoid re-fires\n                             }\n-                        }\n-                    } else if (curView.getTag(R.id.type).toString().equals(JsonFormConstants.NUMBER_SELECTOR) &&\n-                            !TextUtils.isEmpty(errorMessage) &&\n-                            (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n-\n-                        if (!\"false\".equals(errorMessage)) {\n-                            Intent localIntent = new Intent(JsonFormConstants.INTENT_ACTION.NUMBER_SELECTOR_FACTORY);\n-                            localIntent.putExtra(JsonFormConstants.MAX_SELECTION_VALUE, Integer.valueOf(errorMessage));\n-                            localIntent.putExtra(JsonFormConstants.JSON_OBJECT_KEY, curView.getTag(R.id.key).toString());\n-                            localIntent.putExtra(JsonFormConstants.STEPNAME, address[0]);\n-                            localIntent.putExtra(JsonFormConstants.IS_POPUP, popup);\n-                            localBroadcastManager.sendBroadcast(localIntent);\n-                            curView.setTag(R.id.previous, errorMessage); //Store value to avoid re-fires\n-                        }\n \n \n-                    } else if (curView instanceof RadioGroup &&\n-                            curView.getTag(R.id.type).toString().equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n-                            !TextUtils.isEmpty(errorMessage) &&\n-                            (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n+                        } else if (curView instanceof RadioGroup &&\n+                                curView.getTag(R.id.type).toString().equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n+                                !TextUtils.isEmpty(errorMessage) &&\n+                                (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n \n-                        JSONObject jsonObject = (JSONObject) curView.getTag(R.id.json_object);\n-                        JSONObject jsonObjectNew = new JSONObject(errorMessage);\n-                        Iterator<String> keys = jsonObjectNew.keys();\n+                            JSONObject jsonObject = (JSONObject) curView.getTag(R.id.json_object);\n+                            JSONObject jsonObjectNew = new JSONObject(errorMessage);\n+                            Iterator<String> keys = jsonObjectNew.keys();\n \n-                        while (keys.hasNext()) {\n-                            String key = keys.next();\n-                            jsonObject.put(key, jsonObjectNew.getString(key));\n-                        }\n+                            while (keys.hasNext()) {\n+                                String key = keys.next();\n+                                jsonObject.put(key, jsonObjectNew.getString(key));\n+                            }\n \n+                        }\n                     }\n+                } catch (Exception e) {\n+                    Timber.e(e, \"JsonFormActivity --> checkViewConstraints\");\n                 }\n-            } catch (Exception e) {\n-                Timber.e(e, \"JsonFormActivity --> checkViewConstraints\");\n             }\n         }\n-    }\n \n-    private Facts getValueFromAddress(String[] address, boolean popup, JSONObject valueSource) throws Exception {\n-        JSONObject object = getObjectUsingAddress(address, popup, valueSource);\n-        return getEntries(address, object);\n-    }\n+        private Facts getValueFromAddress (String[]address,boolean popup, JSONObject valueSource) throws\n+        Exception {\n+            JSONObject object = getObjectUsingAddress(address, popup, valueSource);\n+            return getEntries(address, object);\n+        }\n \n-    private Facts getValueFromAddress(String[] address, boolean popup) throws Exception {\n-        JSONObject object = getObjectUsingAddress(address, popup);\n-        return getEntries(address, object);\n-    }\n+        private Facts getValueFromAddress (String[]address,boolean popup) throws Exception {\n+            JSONObject object = getObjectUsingAddress(address, popup);\n+            return getEntries(address, object);\n+        }\n \n-    private Facts getEntries(String[] address, JSONObject object) throws JSONException {\n-        Facts result = new Facts();\n-        if (object != null) {\n-            //reset the rules check value\n-            object.put(RuleConstant.IS_RULE_CHECK, false);\n-            if (object.has(RuleConstant.RESULT)) {\n-                JSONArray jsonArray = object.getJSONArray(RuleConstant.RESULT);\n+        private Facts getEntries (String[]address, JSONObject object) throws JSONException {\n+            Facts result = new Facts();\n+            if (object != null) {\n+                //reset the rules check value\n+                object.put(RuleConstant.IS_RULE_CHECK, false);\n+                if (object.has(RuleConstant.RESULT)) {\n+                    JSONArray jsonArray = object.getJSONArray(RuleConstant.RESULT);\n \n-                for (int i = 0; i < jsonArray.length(); i++) {\n-                    JSONObject formObject = jsonArray.getJSONObject(i);\n+                    for (int i = 0; i < jsonArray.length(); i++) {\n+                        JSONObject formObject = jsonArray.getJSONObject(i);\n \n-                    formObject.put(RuleConstant.IS_RULE_CHECK, true);\n-                    formObject.put(RuleConstant.STEP, formObject.getString(RuleConstant.STEP));\n+                        formObject.put(RuleConstant.IS_RULE_CHECK, true);\n+                        formObject.put(RuleConstant.STEP, formObject.getString(RuleConstant.STEP));\n \n-                    result.asMap().putAll(getValueFromAddressCore(formObject).asMap());\n-                }\n+                        result.asMap().putAll(getValueFromAddressCore(formObject).asMap());\n+                    }\n \n-                result.put(RuleConstant.SELECTED_RULE, address[2]);\n-            } else {\n-                result = getValueFromAddressCore(object);\n+                    result.put(RuleConstant.SELECTED_RULE, address[2]);\n+                } else {\n+                    result = getValueFromAddressCore(object);\n+                }\n             }\n+            return result;\n         }\n-        return result;\n-    }\n \n-    protected Facts getValueFromAddressCore(JSONObject object) throws JSONException {\n-        Facts result = new Facts();\n+        protected Facts getValueFromAddressCore (JSONObject object) throws JSONException {\n+            Facts result = new Facts();\n \n-        if (object != null && object.has(JsonFormConstants.TYPE)) {\n-            switch (object.getString(JsonFormConstants.TYPE)) {\n-                case JsonFormConstants.CHECK_BOX:\n-                    result = formUtils.getCheckBoxResults(object);\n-                    break;\n-                case JsonFormConstants.NATIVE_RADIO_BUTTON:\n-                case JsonFormConstants.EXTENDED_RADIO_BUTTON:\n-                    boolean multiRelevance = object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false);\n-                    result = formUtils.getRadioButtonResults(multiRelevance, object);\n-                    break;\n-                default:\n-                    result.put(getKey(object), getValue(object));\n-                    break;\n-            }\n+            if (object != null && object.has(JsonFormConstants.TYPE)) {\n+                switch (object.getString(JsonFormConstants.TYPE)) {\n+                    case JsonFormConstants.CHECK_BOX:\n+                        result = formUtils.getCheckBoxResults(object);\n+                        break;\n+                    case JsonFormConstants.NATIVE_RADIO_BUTTON:\n+                    case JsonFormConstants.EXTENDED_RADIO_BUTTON:\n+                        boolean multiRelevance = object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false);\n+                        result = formUtils.getRadioButtonResults(multiRelevance, object);\n+                        break;\n+                    default:\n+                        result.put(getKey(object), getValue(object));\n+                        break;\n+                }\n \n-            if (object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) &&\n-                    (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.CHECK_BOX) ||\n-                            (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n-                                    object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false)))) {\n-                List<String> selectedValues = new ArrayList<>(result.asMap().keySet());\n-                result = new Facts();\n-                result.put(getKey(object), selectedValues);\n+                if (object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) &&\n+                        (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.CHECK_BOX) ||\n+                                (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n+                                        object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false)))) {\n+                    List<String> selectedValues = new ArrayList<>(result.asMap().keySet());\n+                    result = new Facts();\n+                    result.put(getKey(object), selectedValues);\n+                }\n             }\n+            return result;\n         }\n-        return result;\n-    }\n \n-    private void initComparisons() {\n-        if (comparisons == null) {\n-            functionRegex = \"\";\n-            comparisons = new HashMap<>();\n+        private void initComparisons () {\n+            if (comparisons == null) {\n+                functionRegex = \"\";\n+                comparisons = new HashMap<>();\n \n-            LessThanComparison lessThanComparison = new LessThanComparison();\n-            functionRegex += lessThanComparison.getFunctionName();\n-            comparisons.put(lessThanComparison.getFunctionName(), lessThanComparison);\n+                LessThanComparison lessThanComparison = new LessThanComparison();\n+                functionRegex += lessThanComparison.getFunctionName();\n+                comparisons.put(lessThanComparison.getFunctionName(), lessThanComparison);\n \n-            LessThanEqualToComparison lessThanEqualToComparison = new LessThanEqualToComparison();\n-            functionRegex += \"|\" + lessThanEqualToComparison.getFunctionName();\n-            comparisons.put(lessThanEqualToComparison.getFunctionName(), lessThanEqualToComparison);\n+                LessThanEqualToComparison lessThanEqualToComparison = new LessThanEqualToComparison();\n+                functionRegex += \"|\" + lessThanEqualToComparison.getFunctionName();\n+                comparisons.put(lessThanEqualToComparison.getFunctionName(), lessThanEqualToComparison);\n \n-            EqualToComparison equalToComparison = new EqualToComparison();\n-            functionRegex += \"|\" + equalToComparison.getFunctionName();\n-            comparisons.put(equalToComparison.getFunctionName(), equalToComparison);\n+                EqualToComparison equalToComparison = new EqualToComparison();\n+                functionRegex += \"|\" + equalToComparison.getFunctionName();\n+                comparisons.put(equalToComparison.getFunctionName(), equalToComparison);\n \n-            NotEqualToComparison notEqualToComparer = new NotEqualToComparison();\n-            functionRegex += \"|\" + notEqualToComparer.getFunctionName();\n-            comparisons.put(notEqualToComparer.getFunctionName(), notEqualToComparer);\n+                NotEqualToComparison notEqualToComparer = new NotEqualToComparison();\n+                functionRegex += \"|\" + notEqualToComparer.getFunctionName();\n+                comparisons.put(notEqualToComparer.getFunctionName(), notEqualToComparer);\n \n-            GreaterThanComparison greaterThanComparison = new GreaterThanComparison();\n-            functionRegex += \"|\" + greaterThanComparison.getFunctionName();\n-            comparisons.put(greaterThanComparison.getFunctionName(), greaterThanComparison);\n+                GreaterThanComparison greaterThanComparison = new GreaterThanComparison();\n+                functionRegex += \"|\" + greaterThanComparison.getFunctionName();\n+                comparisons.put(greaterThanComparison.getFunctionName(), greaterThanComparison);\n \n-            GreaterThanEqualToComparison greaterThanEqualToComparison = new GreaterThanEqualToComparison();\n-            functionRegex += \"|\" + greaterThanEqualToComparison.getFunctionName();\n-            comparisons.put(greaterThanEqualToComparison.getFunctionName(), greaterThanEqualToComparison);\n+                GreaterThanEqualToComparison greaterThanEqualToComparison = new GreaterThanEqualToComparison();\n+                functionRegex += \"|\" + greaterThanEqualToComparison.getFunctionName();\n+                comparisons.put(greaterThanEqualToComparison.getFunctionName(), greaterThanEqualToComparison);\n \n-            RegexComparison regexComparison = new RegexComparison();\n-            functionRegex += \"|\" + regexComparison.getFunctionName();\n-            comparisons.put(regexComparison.getFunctionName(), regexComparison);\n+                RegexComparison regexComparison = new RegexComparison();\n+                functionRegex += \"|\" + regexComparison.getFunctionName();\n+                comparisons.put(regexComparison.getFunctionName(), regexComparison);\n+            }\n         }\n-    }\n \n-    private boolean doComparison(String value, JSONObject comparison) throws Exception {\n-        String type = comparison.getString(JsonFormConstants.TYPE).toLowerCase();\n-        String ex = comparison.getString(JsonFormConstants.EX);\n+        private boolean doComparison (String value, JSONObject comparison) throws Exception {\n+            String type = comparison.getString(JsonFormConstants.TYPE).toLowerCase();\n+            String ex = comparison.getString(JsonFormConstants.EX);\n \n-        Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n-        Matcher matcher = pattern.matcher(ex);\n-        if (matcher.find()) {\n-            String functionName = matcher.group(1);\n-            String b = matcher.group(\n-                    2);//functions arguments should be two, and should either be addresses or values (enclosed using \"\")\n-            String[] args = getFunctionArgs(b, value);\n-            return comparisons.get(functionName).compare(args[0], type, args[1]);\n-        }\n+            Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n+            Matcher matcher = pattern.matcher(ex);\n+            if (matcher.find()) {\n+                String functionName = matcher.group(1);\n+                String b = matcher.group(\n+                        2);//functions arguments should be two, and should either be addresses or values (enclosed using \"\")\n+                String[] args = getFunctionArgs(b, value);\n+                return comparisons.get(functionName).compare(args[0], type, args[1]);\n+            }\n \n-        return false;\n-    }\n+            return false;\n+        }\n \n-    private String[] getFunctionArgs(String functionArgs, String value) {\n-        String[] args = new String[2];\n-        String[] splitArgs = functionArgs.split(\",\");\n-        if (splitArgs.length == 2) {\n-            Pattern valueRegex = Pattern.compile(\"\\\"(.*)\\\"\");\n-            for (int i = 0; i < splitArgs.length; i++) {\n-                String curArg = splitArgs[i].trim();\n+        private String[] getFunctionArgs (String functionArgs, String value){\n+            String[] args = new String[2];\n+            String[] splitArgs = functionArgs.split(\",\");\n+            if (splitArgs.length == 2) {\n+                Pattern valueRegex = Pattern.compile(\"\\\"(.*)\\\"\");\n+                for (int i = 0; i < splitArgs.length; i++) {\n+                    String curArg = splitArgs[i].trim();\n \n-                if (\".\".equals(curArg)) {\n-                    args[i] = value;\n-                } else {\n-                    Matcher valueMatcher = valueRegex.matcher(curArg);\n-                    if (valueMatcher.find()) {\n-                        args[i] = valueMatcher.group(1);\n+                    if (\".\".equals(curArg)) {\n+                        args[i] = value;\n                     } else {\n-                        try {\n-                            args[i] = String.valueOf(\n-                                    getValueFromAddress(curArg.split(\":\"), false).get(JsonFormConstants.VALUE));\n-                        } catch (Exception e) {\n-                            Timber.e(e, \"JsonFormActivity --> getFunctionArgs\");\n+                        Matcher valueMatcher = valueRegex.matcher(curArg);\n+                        if (valueMatcher.find()) {\n+                            args[i] = valueMatcher.group(1);\n+                        } else {\n+                            try {\n+                                args[i] = String.valueOf(\n+                                        getValueFromAddress(curArg.split(\":\"), false).get(JsonFormConstants.VALUE));\n+                            } catch (Exception e) {\n+                                Timber.e(e, \"JsonFormActivity --> getFunctionArgs\");\n+                            }\n                         }\n                     }\n                 }\n             }\n-        }\n \n-        return args;\n-    }\n+            return args;\n+        }\n \n-    protected void refreshMediaLogic(String key, String value) {\n-        try {\n-            JSONObject object = getStep(JsonFormConstants.STEP1);\n-            JSONArray fields = object.getJSONArray(\"fields\");\n-            for (int i = 0; i < fields.length(); i++) {\n-                JSONObject questionGroup = fields.getJSONObject(i);\n-                if ((questionGroup.has(\"key\") && questionGroup.has(\"has_media_content\")) &&\n-                        (questionGroup.getString(\"key\").equalsIgnoreCase(key)) &&\n-                        (questionGroup.getBoolean(\"has_media_content\"))) {\n-                    JSONArray medias = questionGroup.getJSONArray(\"media\");\n-                    for (int j = 0; j < medias.length(); j++) {\n-                        JSONObject media = medias.getJSONObject(j);\n-                        mediaDialog(media, value);\n+        protected void refreshMediaLogic (String key, String value){\n+            try {\n+                JSONObject object = getStep(JsonFormConstants.STEP1);\n+                JSONArray fields = object.getJSONArray(\"fields\");\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject questionGroup = fields.getJSONObject(i);\n+                    if ((questionGroup.has(\"key\") && questionGroup.has(\"has_media_content\")) &&\n+                            (questionGroup.getString(\"key\").equalsIgnoreCase(key)) &&\n+                            (questionGroup.getBoolean(\"has_media_content\"))) {\n+                        JSONArray medias = questionGroup.getJSONArray(\"media\");\n+                        for (int j = 0; j < medias.length(); j++) {\n+                            JSONObject media = medias.getJSONObject(j);\n+                            mediaDialog(media, value);\n+                        }\n                     }\n                 }\n+            } catch (Exception e) {\n+                Timber.e(e, \"JsonFormActivity --> refreshMediaLogic\");\n             }\n-        } catch (Exception e) {\n-            Timber.e(e, \"JsonFormActivity --> refreshMediaLogic\");\n-        }\n-    }\n-\n-    public void mediaDialog(JSONObject media, String value) {\n-        try {\n-            if (media.getString(\"media_trigger_value\").equalsIgnoreCase(value)) {\n-                String mediatype = media.getString(\"media_type\");\n-                String medialink = media.getString(\"media_link\");\n-                String mediatext = media.getString(\"media_text\");\n-\n-                infoDialog(mediatype, medialink, mediatext);\n-            }\n-        } catch (Exception e) {\n-            Timber.e(e, \"JsonFormActivity --> mediaDialog\");\n         }\n-    }\n \n-    private void infoDialog(String mediatype, String medialink, String mediatext) {\n-        final FancyAlertDialog.Builder builder = new FancyAlertDialog.Builder(this);\n-        builder.setTitle(\"Info\");\n-        builder.setBackgroundColor(Color.parseColor(\"#208CC5\"))\n-                .setPositiveBtnBackground(Color.parseColor(\"#208CC5\"))  //Don't pass R\n-                // .color.colorvalue\n-                .setPositiveBtnText(\"OK\").setAnimation(Animation.SLIDE).isCancellable(true)\n-                .setIcon(com.shashank.sony.fancydialoglib.R.drawable.ic_person_black_24dp, Icon.Visible);\n-        builder.setMessage(mediatext);\n-        if (mediatype.equalsIgnoreCase(\"image\")) {\n-            builder.setImagetoshow(medialink);\n-        } else if (mediatype.equalsIgnoreCase(\"video\")) {\n-            builder.setVideopath(medialink);\n-        }\n-        builder.build();\n-    }\n-\n-    /**\n-     * This method checks whether a constraint has been enforced and returns an error message if not The error message should\n-     * be displayable to the user\n-     *\n-     * @param value      {@link String} The value to be checked\n-     * @param view       {@link View} The value to be checked\n-     * @param constraint {@link JSONObject} The constraint expression to use\n-     * @return An error message if constraint has not been enforced or NULL if constraint enforced\n-     * @throws Exception\n-     */\n-    private String enforceConstraint(String value, View view, JSONObject constraint) throws Exception {\n+        public void mediaDialog (JSONObject media, String value){\n+            try {\n+                if (media.getString(\"media_trigger_value\").equalsIgnoreCase(value)) {\n+                    String mediatype = media.getString(\"media_type\");\n+                    String medialink = media.getString(\"media_link\");\n+                    String mediatext = media.getString(\"media_text\");\n \n-        String type = constraint.getString(\"type\").toLowerCase();\n-        String ex = constraint.getString(JsonFormConstants.EX);\n-        String errorMessage = type.equals(JsonFormConstants.NUMBER_SELECTOR) ? constraint.optString(JsonFormConstants.ERR) :\n-                constraint.getString(JsonFormConstants.ERR);\n-        Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n-        Matcher matcher = pattern.matcher(ex);\n-        if (matcher.find()) {\n-            String functionName = matcher.group(1);\n-            String b = matcher.group(2);\n-            String[] args = getFunctionArgs(b, value);\n+                    infoDialog(mediatype, medialink, mediatext);\n+                }\n+            } catch (Exception e) {\n+                Timber.e(e, \"JsonFormActivity --> mediaDialog\");\n+            }\n+        }\n+\n+        private void infoDialog (String mediatype, String medialink, String mediatext){\n+            final FancyAlertDialog.Builder builder = new FancyAlertDialog.Builder(this);\n+            builder.setTitle(\"Info\");\n+            builder.setBackgroundColor(Color.parseColor(\"#208CC5\"))\n+                    .setPositiveBtnBackground(Color.parseColor(\"#208CC5\"))  //Don't pass R\n+                    // .color.colorvalue\n+                    .setPositiveBtnText(\"OK\").setAnimation(Animation.SLIDE).isCancellable(true)\n+                    .setIcon(com.shashank.sony.fancydialoglib.R.drawable.ic_person_black_24dp, Icon.Visible);\n+            builder.setMessage(mediatext);\n+            if (mediatype.equalsIgnoreCase(\"image\")) {\n+                builder.setImagetoshow(medialink);\n+            } else if (mediatype.equalsIgnoreCase(\"video\")) {\n+                builder.setVideopath(medialink);\n+            }\n+            builder.build();\n+        }\n+\n+        /**\n+         * This method checks whether a constraint has been enforced and returns an error message if not The error message should\n+         * be displayable to the user\n+         *\n+         * @param value      {@link String} The value to be checked\n+         * @param view       {@link View} The value to be checked\n+         * @param constraint {@link JSONObject} The constraint expression to use\n+         * @return An error message if constraint has not been enforced or NULL if constraint enforced\n+         * @throws Exception\n+         */\n+        private String enforceConstraint (String value, View view, JSONObject constraint) throws\n+        Exception {\n+\n+            String type = constraint.getString(\"type\").toLowerCase();\n+            String ex = constraint.getString(JsonFormConstants.EX);\n+            String errorMessage = type.equals(JsonFormConstants.NUMBER_SELECTOR) ? constraint.optString(JsonFormConstants.ERR) :\n+                    constraint.getString(JsonFormConstants.ERR);\n+            Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n+            Matcher matcher = pattern.matcher(ex);\n+            if (matcher.find()) {\n+                String functionName = matcher.group(1);\n+                String b = matcher.group(2);\n+                String[] args = getFunctionArgs(b, value);\n+\n+                boolean viewDoesNotHaveValue = TextUtils.isEmpty(value);\n+                if (view instanceof CheckBox) {\n+                    viewDoesNotHaveValue = !((CheckBox) view).isChecked();\n+                } else if (isNumberSelectorConstraint(view) || isDatePickerNativeRadio(view)) {\n+                    return args.length > 1 ? args[1] : \"\";//clever fix to pass back the max value for number selectors\n \n-            boolean viewDoesNotHaveValue = TextUtils.isEmpty(value);\n-            if (view instanceof CheckBox) {\n-                viewDoesNotHaveValue = !((CheckBox) view).isChecked();\n-            } else if (isNumberSelectorConstraint(view) || isDatePickerNativeRadio(view)) {\n-                return args.length > 1 ? args[1] : \"\";//clever fix to pass back the max value for number selectors\n+                }\n \n+                if (checkViewValues(type, functionName, args, viewDoesNotHaveValue)) return null;\n+            } else {\n+                Timber.d(\"Matcher didn't work with function\");\n             }\n \n-            if (checkViewValues(type, functionName, args, viewDoesNotHaveValue)) return null;\n-        } else {\n-            Timber.d(\"Matcher didn't work with function\");\n+            return errorMessage;\n         }\n \n-        return errorMessage;\n-    }\n-\n-    private boolean checkViewValues(String type, String functionName, String[] args, boolean viewDoesNotHaveValue) {\n-        return viewDoesNotHaveValue || TextUtils.isEmpty(args[0]) || TextUtils.isEmpty(args[1]) ||\n-                comparisons.get(functionName).compare(args[0], type, args[1]);\n-    }\n+        private boolean checkViewValues (String type, String functionName, String[]args,\n+        boolean viewDoesNotHaveValue){\n+            return viewDoesNotHaveValue || TextUtils.isEmpty(args[0]) || TextUtils.isEmpty(args[1]) ||\n+                    comparisons.get(functionName).compare(args[0], type, args[1]);\n+        }\n \n-    private String enforceConstraint(Facts curValueMap, JSONObject constraint) throws Exception {\n-        return curValueMap.asMap().size() == 0 ? \"0\" : getRulesEngineFactory().getConstraint(curValueMap,\n-                constraint.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).getString(RuleConstant.RULES_FILE));\n-    }\n+        private String enforceConstraint (Facts curValueMap, JSONObject constraint) throws Exception\n+        {\n+            return curValueMap.asMap().size() == 0 ? \"0\" : getRulesEngineFactory().getConstraint(curValueMap,\n+                    constraint.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).getString(RuleConstant.RULES_FILE));\n+        }\n \n-    private boolean isNumberSelectorConstraint(View view) {\n-        return JsonFormConstants.NUMBER_SELECTOR.equals(view.getTag(R.id.type));\n-    }\n+        private boolean isNumberSelectorConstraint (View view){\n+            return JsonFormConstants.NUMBER_SELECTOR.equals(view.getTag(R.id.type));\n+        }\n \n-    private boolean isDatePickerNativeRadio(View view) {\n-        return JsonFormConstants.NATIVE_RADIO_BUTTON.equals(view.getTag(R.id.type));\n-    }\n+        private boolean isDatePickerNativeRadio (View view){\n+            return JsonFormConstants.NATIVE_RADIO_BUTTON.equals(view.getTag(R.id.type));\n+        }\n \n-    protected JSONArray fetchFields(JSONObject parentJson, boolean popup) {\n-        JSONArray fields = new JSONArray();\n-        try {\n-            if (parentJson.has(JsonFormConstants.SECTIONS) &&\n-                    parentJson.get(JsonFormConstants.SECTIONS) instanceof JSONArray) {\n-                JSONArray sections = parentJson.getJSONArray(JsonFormConstants.SECTIONS);\n-                for (int i = 0; i < sections.length(); i++) {\n-                    JSONObject sectionJson = sections.getJSONObject(i);\n-                    fields = returnFormWithSectionFields(sectionJson, popup);\n+        protected JSONArray fetchFields (JSONObject parentJson,boolean popup){\n+            JSONArray fields = new JSONArray();\n+            try {\n+                if (parentJson.has(JsonFormConstants.SECTIONS) &&\n+                        parentJson.get(JsonFormConstants.SECTIONS) instanceof JSONArray) {\n+                    JSONArray sections = parentJson.getJSONArray(JsonFormConstants.SECTIONS);\n+                    for (int i = 0; i < sections.length(); i++) {\n+                        JSONObject sectionJson = sections.getJSONObject(i);\n+                        fields = returnFormWithSectionFields(sectionJson, popup);\n+                    }\n+                } else if (parentJson.has(JsonFormConstants.FIELDS) &&\n+                        parentJson.get(JsonFormConstants.FIELDS) instanceof JSONArray) {\n+                    fields = returnWithFormFields(parentJson, popup);\n+                }\n+            } catch (JSONException e) {\n+                Timber.e(e, \"JsonFormActivity --> fetchFields\");\n+            }\n+\n+            return fields;\n+        }\n+\n+        /**\n+         * Get form fields from JSON forms that have sections in the form steps. The JSONObject {@link JSONObject} argument is\n+         * the object after getting the section in the specified step name The popup {@link Boolean} argument is a boolean value\n+         * to let the function know that the form is being executed on a popup and not the main android view.\n+         * <p>\n+         * This function returns a JSONArray {@link JSONArray} of the fields contained in the section for the given step\n+         *\n+         * @param sectionJson\n+         * @param popup\n+         * @return\n+         * @throws JSONException\n+         * @author dubdabasoduba\n+         */\n+        protected JSONArray returnFormWithSectionFields (JSONObject sectionJson,boolean popup) throws\n+        JSONException {\n+            JSONArray fields = new JSONArray();\n+            if (sectionJson.has(JsonFormConstants.FIELDS)) {\n+                if (popup) {\n+                    JSONArray jsonArray = sectionJson.getJSONArray(JsonFormConstants.FIELDS);\n+                    for (int k = 0; k < jsonArray.length(); k++) {\n+                        JSONObject item = jsonArray.getJSONObject(k);\n+                        if (genericDialogInterface != null &&\n+                                item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n+                            fields = formUtils.concatArray(fields, specifyFields(item));\n+                        }\n+                    }\n+                } else {\n+                    fields = formUtils.concatArray(fields, sectionJson.getJSONArray(JsonFormConstants.FIELDS));\n                 }\n-            } else if (parentJson.has(JsonFormConstants.FIELDS) &&\n-                    parentJson.get(JsonFormConstants.FIELDS) instanceof JSONArray) {\n-                fields = returnWithFormFields(parentJson, popup);\n             }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"JsonFormActivity --> fetchFields\");\n-        }\n-\n-        return fields;\n-    }\n-\n-    /**\n-     * Get form fields from JSON forms that have sections in the form steps. The JSONObject {@link JSONObject} argument is\n-     * the object after getting the section in the specified step name The popup {@link Boolean} argument is a boolean value\n-     * to let the function know that the form is being executed on a popup and not the main android view.\n-     * <p>\n-     * This function returns a JSONArray {@link JSONArray} of the fields contained in the section for the given step\n-     *\n-     * @param sectionJson\n-     * @param popup\n-     * @return\n-     * @throws JSONException\n-     * @author dubdabasoduba\n-     */\n-    protected JSONArray returnFormWithSectionFields(JSONObject sectionJson, boolean popup) throws JSONException {\n-        JSONArray fields = new JSONArray();\n-        if (sectionJson.has(JsonFormConstants.FIELDS)) {\n+            return fields;\n+        }\n+\n+        /**\n+         * Get the form fields for the JSON forms that do not use the sections in the steps The JSONObject {@link JSONObject}\n+         * argument is the object after getting the step name The popup {@link boolean} argument is a boolean value to let the\n+         * function know that the form is being executed on a popup and not the main android view.\n+         * <p>\n+         * This function returns a JSONArray {@link JSONArray} of the fields contained in the step\n+         *\n+         * @param parentJson\n+         * @param popup\n+         * @return fields\n+         * @throws JSONException\n+         * @author dubdabasoduba\n+         */\n+        protected JSONArray returnWithFormFields (JSONObject parentJson,boolean popup) throws\n+        JSONException {\n+            JSONArray fields = new JSONArray();\n             if (popup) {\n-                JSONArray jsonArray = sectionJson.getJSONArray(JsonFormConstants.FIELDS);\n+                JSONArray jsonArray = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n                 for (int k = 0; k < jsonArray.length(); k++) {\n                     JSONObject item = jsonArray.getJSONObject(k);\n                     if (genericDialogInterface != null &&\n                             item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n-                        fields = formUtils.concatArray(fields, specifyFields(item));\n+                        fields = specifyFields(item);\n                     }\n                 }\n             } else {\n-                fields = formUtils.concatArray(fields, sectionJson.getJSONArray(JsonFormConstants.FIELDS));\n+                fields = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n             }\n-        }\n-        return fields;\n-    }\n \n-    /**\n-     * Get the form fields for the JSON forms that do not use the sections in the steps The JSONObject {@link JSONObject}\n-     * argument is the object after getting the step name The popup {@link boolean} argument is a boolean value to let the\n-     * function know that the form is being executed on a popup and not the main android view.\n-     * <p>\n-     * This function returns a JSONArray {@link JSONArray} of the fields contained in the step\n-     *\n-     * @param parentJson\n-     * @param popup\n-     * @return fields\n-     * @throws JSONException\n-     * @author dubdabasoduba\n-     */\n-    protected JSONArray returnWithFormFields(JSONObject parentJson, boolean popup) throws JSONException {\n-        JSONArray fields = new JSONArray();\n-        if (popup) {\n-            JSONArray jsonArray = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n-            for (int k = 0; k < jsonArray.length(); k++) {\n-                JSONObject item = jsonArray.getJSONObject(k);\n-                if (genericDialogInterface != null &&\n-                        item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n-                    fields = specifyFields(item);\n-                }\n-            }\n-        } else {\n-            fields = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n+            return fields;\n         }\n \n-        return fields;\n-    }\n-\n-    protected JSONArray specifyFields(JSONObject parentJson) {\n-        JSONArray fields = new JSONArray();\n-        if (genericDialogInterface != null && genericDialogInterface.getWidgetType() != null &&\n-                genericDialogInterface.getWidgetType().equals(JsonFormConstants.EXPANSION_PANEL)) {\n-            if (parentJson.has(JsonFormConstants.CONTENT_FORM)) {\n-                fields = returnFields(parentJson);\n-            }\n-        } else {\n-            if (parentJson.has(JsonFormConstants.HAS_EXTRA_REL)) {\n-                String optionKey;\n-                try {\n-                    optionKey = (String) parentJson.get(JsonFormConstants.HAS_EXTRA_REL);\n-                    JSONArray options = parentJson.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n-                    if (options.length() > 0) {\n-                        for (int j = 0; j < options.length(); j++) {\n-                            JSONObject jsonObject = options.getJSONObject(j);\n-                            String objectKey = (String) jsonObject.get(JsonFormConstants.KEY);\n-                            if (objectKey.equals(optionKey) && jsonObject.has(JsonFormConstants.CONTENT_FORM)) {\n-                                fields = returnFields(jsonObject);\n+        protected JSONArray specifyFields (JSONObject parentJson){\n+            JSONArray fields = new JSONArray();\n+            if (genericDialogInterface != null && genericDialogInterface.getWidgetType() != null &&\n+                    genericDialogInterface.getWidgetType().equals(JsonFormConstants.EXPANSION_PANEL)) {\n+                if (parentJson.has(JsonFormConstants.CONTENT_FORM)) {\n+                    fields = returnFields(parentJson);\n+                }\n+            } else {\n+                if (parentJson.has(JsonFormConstants.HAS_EXTRA_REL)) {\n+                    String optionKey;\n+                    try {\n+                        optionKey = (String) parentJson.get(JsonFormConstants.HAS_EXTRA_REL);\n+                        JSONArray options = parentJson.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n+                        if (options.length() > 0) {\n+                            for (int j = 0; j < options.length(); j++) {\n+                                JSONObject jsonObject = options.getJSONObject(j);\n+                                String objectKey = (String) jsonObject.get(JsonFormConstants.KEY);\n+                                if (objectKey.equals(optionKey) && jsonObject.has(JsonFormConstants.CONTENT_FORM)) {\n+                                    fields = returnFields(jsonObject);\n+                                }\n                             }\n                         }\n+                    } catch (JSONException e) {\n+                        Timber.e(e, \"JsonFormActivity --> specifyFields\");\n                     }\n-                } catch (JSONException e) {\n-                    Timber.e(e, \"JsonFormActivity --> specifyFields\");\n                 }\n             }\n+            return fields;\n         }\n-        return fields;\n-    }\n \n-    private JSONArray returnFields(JSONObject jsonObject) {\n-        JSONArray fields = new JSONArray();\n-        try {\n-            if (getExtraFieldsWithValues() != null) {\n-                fields = getExtraFieldsWithValues();\n-            } else {\n-                String formLocation = jsonObject.has(JsonFormConstants.CONTENT_FORM_LOCATION) ? jsonObject.getString(JsonFormConstants.CONTENT_FORM_LOCATION) : \"\";\n-                fields = getSubFormFields(jsonObject.get(JsonFormConstants.CONTENT_FORM).toString(), formLocation, fields);\n+        private JSONArray returnFields (JSONObject jsonObject){\n+            JSONArray fields = new JSONArray();\n+            try {\n+                if (getExtraFieldsWithValues() != null) {\n+                    fields = getExtraFieldsWithValues();\n+                } else {\n+                    String formLocation = jsonObject.has(JsonFormConstants.CONTENT_FORM_LOCATION) ? jsonObject.getString(JsonFormConstants.CONTENT_FORM_LOCATION) : \"\";\n+                    fields = getSubFormFields(jsonObject.get(JsonFormConstants.CONTENT_FORM).toString(), formLocation, fields);\n+                }\n+            } catch (JSONException e) {\n+                Timber.e(e, \"JsonFormActivity --> returnFields\");\n             }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"JsonFormActivity --> returnFields\");\n+            return fields;\n         }\n-        return fields;\n-    }\n \n-    protected JSONArray getSubFormFields(String subFormName, String subFormLocation, JSONArray fields) {\n-        JSONArray fieldArray = new JSONArray();\n-        JSONObject jsonObject = null;\n-        try {\n-            jsonObject = FormUtils.getSubFormJson(subFormName, subFormLocation, getApplicationContext(), translateForm);\n-        } catch (Exception e) {\n-            Timber.e(e);\n-        }\n-        if (jsonObject != null) {\n+        protected JSONArray getSubFormFields (String subFormName, String subFormLocation, JSONArray\n+        fields){\n+            JSONArray fieldArray = new JSONArray();\n+            JSONObject jsonObject = null;\n             try {\n-                JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.CONTENT_FORM);\n-                if (jsonArray != null && jsonArray.length() > 0) {\n-                    fieldArray = formUtils.concatArray(fields, jsonArray);\n+                jsonObject = FormUtils.getSubFormJson(subFormName, subFormLocation, getApplicationContext(), translateForm);\n+            } catch (Exception e) {\n+                Timber.e(e);\n+            }\n+            if (jsonObject != null) {\n+                try {\n+                    JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.CONTENT_FORM);\n+                    if (jsonArray != null && jsonArray.length() > 0) {\n+                        fieldArray = formUtils.concatArray(fields, jsonArray);\n+                    }\n+                } catch (JSONException e) {\n+                    Timber.e(e, \"JsonFormActivity --> getSubFormFields\");\n                 }\n-            } catch (JSONException e) {\n-                Timber.e(e, \"JsonFormActivity --> getSubFormFields\");\n             }\n+\n+            return fieldArray;\n         }\n \n-        return fieldArray;\n-    }\n+        public Form getForm () {\n+            return form;\n+        }\n \n-    public Form getForm() {\n-        return form;\n-    }\n+        private boolean isRelevant (Facts curValueMap, JSONObject curRelevance) throws Exception {\n+            if (curRelevance != null) {\n+                if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_RULES)) {\n \n-    private boolean isRelevant(Facts curValueMap, JSONObject curRelevance) throws Exception {\n-        if (curRelevance != null) {\n-            if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_RULES)) {\n+                    JSONObject exRulesObject = curRelevance.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n \n-                JSONObject exRulesObject = curRelevance.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n+                    if (exRulesObject.has(RuleConstant.RULES_FILE)) {\n \n-                if (exRulesObject.has(RuleConstant.RULES_FILE)) {\n+                        return curValueMap.asMap().size() != 0 && getRulesEngineFactory().getRelevance(curValueMap,\n+                                exRulesObject.getString(RuleConstant.RULES_FILE));\n \n-                    return curValueMap.asMap().size() != 0 && getRulesEngineFactory().getRelevance(curValueMap,\n-                            exRulesObject.getString(RuleConstant.RULES_FILE));\n+                    } else if (exRulesObject.has(RuleConstant.RULES_DYNAMIC)) {\n \n-                } else if (exRulesObject.has(RuleConstant.RULES_DYNAMIC)) {\n+                        return curValueMap.asMap().size() != 0 && getRulesEngineFactory()\n+                                .getDynamicRelevance(curValueMap, exRulesObject.optJSONArray(RuleConstant.RULES_DYNAMIC));\n \n-                    return curValueMap.asMap().size() != 0 && getRulesEngineFactory()\n-                            .getDynamicRelevance(curValueMap, exRulesObject.optJSONArray(RuleConstant.RULES_DYNAMIC));\n+                    }\n \n-                }\n+                } else if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX)) {\n+                    JSONArray exArray = curRelevance.getJSONArray(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX);\n \n-            } else if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX)) {\n-                JSONArray exArray = curRelevance.getJSONArray(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX);\n+                    for (int i = 0; i < exArray.length(); i++) {\n+                        ExObjectResult exObjectResult = isExObjectRelevant(curValueMap, exArray.getJSONObject(i));\n+                        if (exObjectResult.isRelevant()) {\n+                            return true;\n+                        } else if (!exObjectResult.isRelevant() && exObjectResult.isFinal()) {\n+                            return false;\n+                        }\n \n-                for (int i = 0; i < exArray.length(); i++) {\n-                    ExObjectResult exObjectResult = isExObjectRelevant(curValueMap, exArray.getJSONObject(i));\n-                    if (exObjectResult.isRelevant()) {\n-                        return true;\n-                    } else if (!exObjectResult.isRelevant() && exObjectResult.isFinal()) {\n-                        return false;\n                     }\n-\n+                    return false;\n+                } else {\n+                    String curValue = String.valueOf(curValueMap.get(JsonFormConstants.VALUE));\n+                    return doComparison(curValue != null ? curValue : \"\", curRelevance);\n                 }\n-                return false;\n-            } else {\n-                String curValue = String.valueOf(curValueMap.get(JsonFormConstants.VALUE));\n-                return doComparison(curValue != null ? curValue : \"\", curRelevance);\n             }\n+            return false;\n         }\n-        return false;\n-    }\n \n-    private ExObjectResult isExObjectRelevant(Facts curValueMap, JSONObject object) throws Exception {\n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.NOT)) {\n-            JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.NOT);\n+        private ExObjectResult isExObjectRelevant (Facts curValueMap, JSONObject object) throws\n+        Exception {\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.NOT)) {\n+                JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.NOT);\n \n-            for (int i = 0; i < orArray.length(); i++) {\n-                String curValue = curValueMap.get(orArray.getString(i));\n+                for (int i = 0; i < orArray.length(); i++) {\n+                    String curValue = curValueMap.get(orArray.getString(i));\n \n-                if (curValue != null && !Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(true, false);\n-                } else {\n-                    return new ExObjectResult(false, true);\n+                    if (curValue != null && !Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(true, false);\n+                    } else {\n+                        return new ExObjectResult(false, true);\n+                    }\n                 }\n             }\n-        }\n \n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.OR)) {\n-            JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.OR);\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.OR)) {\n+                JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.OR);\n+\n+                for (int i = 0; i < orArray.length(); i++) {\n+                    String curValue = curValueMap.get(orArray.getString(i));\n+                    if (curValue != null && Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(true, true);\n+                    }\n \n-            for (int i = 0; i < orArray.length(); i++) {\n-                String curValue = curValueMap.get(orArray.getString(i));\n-                if (curValue != null && Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(true, true);\n                 }\n \n             }\n \n-        }\n-\n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.AND)) {\n-            JSONArray andArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.AND);\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.AND)) {\n+                JSONArray andArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.AND);\n \n-            for (int i = 0; i < andArray.length(); i++) {\n-                String curValue = curValueMap.get(andArray.getString(i));\n-                if (curValue != null && !Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(false, false);\n+                for (int i = 0; i < andArray.length(); i++) {\n+                    String curValue = curValueMap.get(andArray.getString(i));\n+                    if (curValue != null && !Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(false, false);\n+                    }\n                 }\n+                return new ExObjectResult(true, false);\n+\n             }\n-            return new ExObjectResult(true, false);\n \n+            return new ExObjectResult(false, false);\n         }\n \n-        return new ExObjectResult(false, false);\n-    }\n-\n-    private List<String> getRules(String filename, String fieldKey) {\n-        List<String> rules = ruleKeys.get(filename + \":\" + fieldKey);\n+        private List<String> getRules (String filename, String fieldKey){\n+            List<String> rules = ruleKeys.get(filename + \":\" + fieldKey);\n \n-        if (rules == null) {\n-            try {\n-                Yaml yaml = new Yaml();\n-                InputStreamReader inputStreamReader = new InputStreamReader(\n-                        this.getAssets().open((getRulesEngineFactory().getRulesFolderPath() + filename)));\n-                Iterable<Object> ruleObjects = yaml.loadAll(inputStreamReader);\n+            if (rules == null) {\n+                try {\n+                    Yaml yaml = new Yaml();\n+                    InputStreamReader inputStreamReader = new InputStreamReader(\n+                            this.getAssets().open((getRulesEngineFactory().getRulesFolderPath() + filename)));\n+                    Iterable<Object> ruleObjects = yaml.loadAll(inputStreamReader);\n \n-                for (Object object : ruleObjects) {\n+                    for (Object object : ruleObjects) {\n \n-                    Map<String, Object> map = ((Map<String, Object>) object);\n+                        Map<String, Object> map = ((Map<String, Object>) object);\n \n-                    String name = map.get(RuleConstant.NAME).toString();\n-                    if (ruleKeys.containsKey(filename + \":\" + name)) {\n-                        continue;\n-                    }\n+                        String name = map.get(RuleConstant.NAME).toString();\n+                        if (ruleKeys.containsKey(filename + \":\" + name)) {\n+                            continue;\n+                        }\n \n-                    List<String> actions = new ArrayList<>();\n+                        List<String> actions = new ArrayList<>();\n \n-                    StringBuilder conditionString = new StringBuilder();\n-                    conditionString.append(map.get(RuleConstant.CONDITION).toString());\n+                        StringBuilder conditionString = new StringBuilder();\n+                        conditionString.append(map.get(RuleConstant.CONDITION).toString());\n \n-                    List<String> fields = (List<String>) map.get(RuleConstant.ACTIONS);\n-                    if (fields != null) {\n-                        for (String field : fields) {\n-                            if (field.trim().startsWith(RuleConstant.CALCULATION) ||\n-                                    field.trim().startsWith(RuleConstant.CONSTRAINT)) {\n-                                conditionString.append(\" \" + field);\n+                        List<String> fields = (List<String>) map.get(RuleConstant.ACTIONS);\n+                        if (fields != null) {\n+                            for (String field : fields) {\n+                                if (field.trim().startsWith(RuleConstant.CALCULATION) ||\n+                                        field.trim().startsWith(RuleConstant.CONSTRAINT)) {\n+                                    conditionString.append(\" \" + field);\n+                                }\n                             }\n+\n                         }\n \n-                    }\n+                        actions.addAll(getConditionKeys(conditionString.toString()));\n+                        ruleKeys.put(filename + \":\" + name, actions);\n \n-                    actions.addAll(getConditionKeys(conditionString.toString()));\n-                    ruleKeys.put(filename + \":\" + name, actions);\n+                        if (name.equals(fieldKey)) {\n+                            break;\n+                        }\n \n-                    if (name.equals(fieldKey)) {\n-                        break;\n                     }\n \n+                } catch (Exception e) {\n+                    Timber.e(e, \"JsonFormActivity --> getRules\");\n                 }\n \n-            } catch (Exception e) {\n-                Timber.e(e, \"JsonFormActivity --> getRules\");\n+                return ruleKeys.get(filename + \":\" + fieldKey);\n+            } else {\n+                return rules;\n             }\n+        }\n \n-            return ruleKeys.get(filename + \":\" + fieldKey);\n-        } else {\n-            return rules;\n+        private List<String> getConditionKeys (String condition){\n+            return Utils.getConditionKeys(condition);\n         }\n-    }\n \n-    private List<String> getConditionKeys(String condition) {\n-        return Utils.getConditionKeys(condition);\n-    }\n+        private void updateCalculation (Facts valueMap, View view, String[]address){\n+            String calculation;\n+            try {\n+                if (address[0].equals(RuleConstant.RULES_DYNAMIC)) {\n+                    calculation = getRulesEngineFactory().getDynamicCalculation(valueMap, new JSONArray(address[1]));\n+                } else {\n+                    calculation = getRulesEngineFactory().getCalculation(valueMap, address[1]);\n+                }\n \n-    private void updateCalculation(Facts valueMap, View view, String[] address) {\n-        String calculation;\n-        try {\n-            if (address[0].equals(RuleConstant.RULES_DYNAMIC)) {\n-                calculation = getRulesEngineFactory().getDynamicCalculation(valueMap, new JSONArray(address[1]));\n-            } else {\n-                calculation = getRulesEngineFactory().getCalculation(valueMap, address[1]);\n-            }\n+                if (calculation != null) {\n+                    if (view instanceof CheckBox) {\n+                        //For now were only handling checkbox titles only\n+                        TextView checkboxLabel = ((View) view.getParent().getParent()).findViewById(R.id.label_text);\n+                        if (checkboxLabel != null) {\n+                            checkboxLabel.setText(getRenderText(calculation, checkboxLabel.getTag(R.id.original_text).toString(), false));\n+                        }\n \n-            if (calculation != null) {\n-                if (view instanceof CheckBox) {\n-                    //For now were only handling checkbox titles only\n-                    TextView checkboxLabel = ((View) view.getParent().getParent()).findViewById(R.id.label_text);\n-                    if (checkboxLabel != null) {\n-                        checkboxLabel.setText(getRenderText(calculation, checkboxLabel.getTag(R.id.original_text).toString(), false));\n-                    }\n+                    } else if (view instanceof TextableView) {\n+                        TextableView textView = ((TextableView) view);\n+                        if (!TextUtils.isEmpty(calculation)) {\n+                            CharSequence spanned = calculation.charAt(0) == '{' ? getRenderText(calculation, textView.getTag(R.id.original_text).toString(), true) :\n+                                    (textView.getTag(R.id.original_text) != null && \"0\".equals(calculation)) ? textView.getTag(R.id.original_text).toString() : calculation;\n+                            textView.setText(spanned);\n+                        }\n+                    } else if (view instanceof EditText) {\n+                        String type = (String) view.getTag(R.id.type);\n+                        if (JsonFormConstants.HIDDEN.equals(type) && TextUtils.isEmpty(calculation)) {\n+                            calculation = \"0\";\n+                        }\n \n-                } else if (view instanceof TextableView) {\n-                    TextableView textView = ((TextableView) view);\n-                    if (!TextUtils.isEmpty(calculation)) {\n-                        CharSequence spanned = calculation.charAt(0) == '{' ? getRenderText(calculation, textView.getTag(R.id.original_text).toString(), true) :\n-                                (textView.getTag(R.id.original_text) != null && \"0\".equals(calculation)) ? textView.getTag(R.id.original_text).toString() : calculation;\n-                        textView.setText(spanned);\n-                    }\n-                } else if (view instanceof EditText) {\n-                    String type = (String) view.getTag(R.id.type);\n-                    if (JsonFormConstants.HIDDEN.equals(type) && TextUtils.isEmpty(calculation)) {\n-                        calculation = \"0\";\n-                    }\n+                        if (!TextUtils.isEmpty(calculation)) {\n+                            ((EditText) view).setText(calculation);\n+                        }\n \n-                    if (!TextUtils.isEmpty(calculation)) {\n-                        ((EditText) view).setText(calculation);\n+                    } else if (view instanceof RadioGroup) {\n+                        setRadioButtonCalculation((RadioGroup) view, calculation);\n+\n+                    } else if (view instanceof LinearLayout) {\n+                        LinearLayout linearLayout = (LinearLayout) view;\n+                        String type = (String) linearLayout.getTag(R.id.type);\n+                        if (JsonFormConstants.NUMBER_SELECTOR.equals(type)) {\n+                            setNumberSelectorCalculation(calculation, linearLayout);\n+                        }\n+                    } else {\n+                        ((TextView) view).setText(calculation);\n                     }\n+                }\n+            } catch (Exception e) {\n+                Timber.e(e, \"calling updateCalculation on Non TextView or Text View decendant\");\n+            }\n \n-                } else if (view instanceof RadioGroup) {\n-                    setRadioButtonCalculation((RadioGroup) view, calculation);\n+        }\n \n-                } else if (view instanceof LinearLayout) {\n-                    LinearLayout linearLayout = (LinearLayout) view;\n-                    String type = (String) linearLayout.getTag(R.id.type);\n-                    if (JsonFormConstants.NUMBER_SELECTOR.equals(type)) {\n-                        setNumberSelectorCalculation(calculation, linearLayout);\n+        private void setRadioButtonCalculation ( final RadioGroup view, final String calculation){\n+            int count = view.getChildCount();\n+            for (int i = 0; i < count; i++) {\n+                final int childPosition = i;\n+                runOnUiThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        addRadioButtonCalculation(calculation, view, childPosition);\n                     }\n-                } else {\n-                    ((TextView) view).setText(calculation);\n-                }\n+                });\n             }\n-        } catch (Exception e) {\n-            Timber.e(e, \"calling updateCalculation on Non TextView or Text View decendant\");\n         }\n \n-    }\n+        private void addRadioButtonCalculation (String calculation, RadioGroup view,\n+        int childPosition){\n+            if (!TextUtils.isEmpty(calculation)) {\n+                RelativeLayout radioButtonLayout = (RelativeLayout) view.getChildAt(childPosition);\n+                int radioButtonViewId = (int) radioButtonLayout.getTag(R.id.native_radio_button_view_id);\n+                RadioButton radioButton = radioButtonLayout.findViewById(radioButtonViewId);\n+                boolean showExtraInfo = (boolean) radioButton.getTag(R.id.native_radio_button_extra_info);\n+                String radioButtonKey = (String) radioButton.getTag(R.id.childKey);\n \n-    private void setRadioButtonCalculation(final RadioGroup view, final String calculation) {\n-        int count = view.getChildCount();\n-        for (int i = 0; i < count; i++) {\n-            final int childPosition = i;\n-            runOnUiThread(new Runnable() {\n-                @Override\n-                public void run() {\n-                    addRadioButtonCalculation(calculation, view, childPosition);\n+                if (!TextUtils.isEmpty(radioButtonKey) && calculation.equals(radioButtonKey)) {\n+                    radioButton.setChecked(true);\n+                    radioButton.performClick();\n                 }\n-            });\n-        }\n-    }\n-\n-    private void addRadioButtonCalculation(String calculation, RadioGroup view, int childPosition) {\n-        if (!TextUtils.isEmpty(calculation)) {\n-            RelativeLayout radioButtonLayout = (RelativeLayout) view.getChildAt(childPosition);\n-            int radioButtonViewId = (int) radioButtonLayout.getTag(R.id.native_radio_button_view_id);\n-            RadioButton radioButton = radioButtonLayout.findViewById(radioButtonViewId);\n-            boolean showExtraInfo = (boolean) radioButton.getTag(R.id.native_radio_button_extra_info);\n-            String radioButtonKey = (String) radioButton.getTag(R.id.childKey);\n \n-            if (!TextUtils.isEmpty(radioButtonKey) && calculation.equals(radioButtonKey)) {\n-                radioButton.setChecked(true);\n-                radioButton.performClick();\n-            }\n+                if (showExtraInfo) {\n+                    CustomTextView renderView = view.getChildAt(childPosition).findViewById(R.id.extraInfoTextView);\n \n-            if (showExtraInfo) {\n-                CustomTextView renderView = view.getChildAt(childPosition).findViewById(R.id.extraInfoTextView);\n+                    if (renderView.getTag(R.id.original_text) == null) {\n+                        renderView.setTag(R.id.original_text, renderView.getText());\n+                    }\n \n-                if (renderView.getTag(R.id.original_text) == null) {\n-                    renderView.setTag(R.id.original_text, renderView.getText());\n-                }\n \n+                    if (!TextUtils.isEmpty(calculation)) {\n+                        renderView.setText(calculation.charAt(0) == '{' ? getRenderText(calculation, renderView.getTag(R.id.original_text).toString(), false) : calculation);\n+                    }\n \n-                if (!TextUtils.isEmpty(calculation)) {\n-                    renderView.setText(calculation.charAt(0) == '{' ? getRenderText(calculation, renderView.getTag(R.id.original_text).toString(), false) : calculation);\n+                    renderView.setVisibility(renderView.getText().toString().contains(\"{\") ||\n+                            renderView.getText().toString().equals(\"0\") ? View.GONE : View.VISIBLE);\n                 }\n-\n-                renderView.setVisibility(renderView.getText().toString().contains(\"{\") ||\n-                        renderView.getText().toString().equals(\"0\") ? View.GONE : View.VISIBLE);\n             }\n         }\n-    }\n \n-    private void setNumberSelectorCalculation(String calculation, LinearLayout linearLayout) {\n-        if (!TextUtils.isEmpty(calculation)) {\n-            int childCount = linearLayout.getChildCount();\n-            for (int i = 0; i < childCount; i++) {\n-                if (linearLayout.getChildAt(i) instanceof TextView) {\n-                    TextView textView = (TextView) linearLayout.getChildAt(i);\n-                    String text = textView.getText().toString();\n-                    CommonListener commonListener =\n-                            (CommonListener) textView.getTag(R.id.number_selector_listener);\n+        private void setNumberSelectorCalculation (String calculation, LinearLayout linearLayout){\n+            if (!TextUtils.isEmpty(calculation)) {\n+                int childCount = linearLayout.getChildCount();\n+                for (int i = 0; i < childCount; i++) {\n+                    if (linearLayout.getChildAt(i) instanceof TextView) {\n+                        TextView textView = (TextView) linearLayout.getChildAt(i);\n+                        String text = textView.getText().toString();\n+                        CommonListener commonListener =\n+                                (CommonListener) textView.getTag(R.id.number_selector_listener);\n \n-                    String selectedNumber = \"\";\n-                    if (selectedTextView != null) {\n-                        selectedNumber = selectedTextView.getText().toString();\n-                    }\n+                        String selectedNumber = \"\";\n+                        if (selectedTextView != null) {\n+                            selectedNumber = selectedTextView.getText().toString();\n+                        }\n \n-                    if (i + 1 == childCount) {\n-                        String[] splitValue = text.split(\"\");\n-                        if (splitValue.length > 2) {\n-                            String value = splitValue[1];\n+                        if (i + 1 == childCount) {\n+                            String[] splitValue = text.split(\"\");\n+                            if (splitValue.length > 2) {\n+                                String value = splitValue[1];\n \n-                            if (Integer.valueOf(calculation) > Integer.valueOf(value)) {\n-                                if (!calculation.equals(selectedNumber)) {\n-                                    textView.setText(calculation);\n-                                    textView.setOnClickListener(commonListener);\n-                                    textView.performClick();\n+                                if (Integer.valueOf(calculation) > Integer.valueOf(value)) {\n+                                    if (!calculation.equals(selectedNumber)) {\n+                                        textView.setText(calculation);\n+                                        textView.setOnClickListener(commonListener);\n+                                        textView.performClick();\n+                                    }\n+                                } else {\n+                                    selectNumber(calculation, textView, value, commonListener);\n                                 }\n-                            } else {\n-                                selectNumber(calculation, textView, value, commonListener);\n                             }\n+                        } else {\n+                            selectNumber(calculation, textView, text, commonListener);\n                         }\n-                    } else {\n-                        selectNumber(calculation, textView, text, commonListener);\n                     }\n                 }\n             }\n         }\n-    }\n \n-    private void selectNumber(String calculation, TextView textView, String text, CommonListener commonListener) {\n-        if (calculation.equals(text) && !textView.equals(selectedTextView)) {\n-            selectedTextView = textView;\n-            textView.setOnClickListener(commonListener);\n-            textView.performClick();\n+        private void selectNumber (String calculation, TextView textView, String\n+        text, CommonListener commonListener){\n+            if (calculation.equals(text) && !textView.equals(selectedTextView)) {\n+                selectedTextView = textView;\n+                textView.setOnClickListener(commonListener);\n+                textView.performClick();\n+            }\n         }\n-    }\n \n-    private CharSequence getRenderText(String calculation, String textTemplate, boolean makeBold) {\n-        Map<String, Object> valueMap = new Gson().fromJson(calculation, new TypeToken<HashMap<String, Object>>() {\n-        }.getType());\n-        return stringFormat(textTemplate, valueMap, makeBold);\n-    }\n+        private CharSequence getRenderText (String calculation, String textTemplate,boolean makeBold)\n+        {\n+            Map<String, Object> valueMap = new Gson().fromJson(calculation, new TypeToken<HashMap<String, Object>>() {\n+            }.getType());\n+            return stringFormat(textTemplate, valueMap, makeBold);\n+        }\n \n-    public Spanned stringFormat(String string, Map<String, Object> valueMap, boolean makeBold) {\n-        String resString = string;\n-        for (Map.Entry<String, Object> entry : valueMap.entrySet()) {\n-            String templateValue = getTemplateValue(entry.getValue());\n-            if (makeBold) {\n-                templateValue = \"<b>\" + getTemplateValue(entry.getValue()) + \"</b>\";\n+        public Spanned stringFormat (String string, Map < String, Object > valueMap,boolean makeBold)\n+        {\n+            String resString = string;\n+            for (Map.Entry<String, Object> entry : valueMap.entrySet()) {\n+                String templateValue = getTemplateValue(entry.getValue());\n+                if (makeBold) {\n+                    templateValue = \"<b>\" + getTemplateValue(entry.getValue()) + \"</b>\";\n+                }\n+                resString = resString.replace(\"{\" + entry.getKey() + \"}\", templateValue);\n             }\n-            resString = resString.replace(\"{\" + entry.getKey() + \"}\", templateValue);\n+\n+            return Html.fromHtml(resString);\n         }\n \n-        return Html.fromHtml(resString);\n-    }\n+        protected Object getValue (JSONObject object) throws JSONException {\n+            Object value;\n \n-    protected Object getValue(JSONObject object) throws JSONException {\n-        Object value;\n+            if (object.has(JsonFormConstants.VALUE)) {\n+                value = object.opt(JsonFormConstants.VALUE);\n \n-        if (object.has(JsonFormConstants.VALUE)) {\n-            value = object.opt(JsonFormConstants.VALUE);\n+                if (isNumberWidget(object)) {\n+                    value = TextUtils.isEmpty(object.optString(JsonFormConstants.VALUE)) ? 0 : processNumberValues(object.optString(JsonFormConstants.VALUE));\n+                } else if (value != null && !TextUtils.isEmpty(object.getString(JsonFormConstants.VALUE)) && canHaveNumber(object)) {\n+                    value = processNumberValues(value);\n+                }\n \n-            if (isNumberWidget(object)) {\n-                value = TextUtils.isEmpty(object.optString(JsonFormConstants.VALUE)) ? 0 : processNumberValues(object.optString(JsonFormConstants.VALUE));\n-            } else if (value != null && !TextUtils.isEmpty(object.getString(JsonFormConstants.VALUE)) && canHaveNumber(object)) {\n-                value = processNumberValues(value);\n+            } else {\n+                value = isNumberWidget(object) ? 0 : \"\";\n             }\n \n-        } else {\n-            value = isNumberWidget(object) ? 0 : \"\";\n+            return value;\n         }\n \n-        return value;\n-    }\n-\n-    protected Object processNumberValues(Object object) {\n-        Object jsonObject = object;\n-        try {\n-            if (jsonObject.toString().contains(\".\")) {\n-                jsonObject = String.valueOf((float) Math.round(Float.valueOf(jsonObject.toString()) * 100) / 100);\n-            } else {\n-                jsonObject = Integer.valueOf(jsonObject.toString());\n+        protected Object processNumberValues (Object object){\n+            Object jsonObject = object;\n+            try {\n+                if (jsonObject.toString().contains(\".\")) {\n+                    jsonObject = String.valueOf((float) Math.round(Float.valueOf(jsonObject.toString()) * 100) / 100);\n+                } else {\n+                    jsonObject = Integer.valueOf(jsonObject.toString());\n+                }\n+            } catch (NumberFormatException e) {\n+                //Log.e(TAG, \"Error trying to convert \" + object + \" to a number \", e);\n             }\n-        } catch (NumberFormatException e) {\n-            //Log.e(TAG, \"Error trying to convert \" + object + \" to a number \", e);\n+            return jsonObject;\n         }\n-        return jsonObject;\n-    }\n \n-    protected String getKey(JSONObject object) throws JSONException {\n-        return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n-                object.get(RuleConstant.STEP) + \"_\" + object.get(JsonFormConstants.KEY) : JsonFormConstants.VALUE;\n-    }\n+        protected String getKey (JSONObject object) throws JSONException {\n+            return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n+                    object.get(RuleConstant.STEP) + \"_\" + object.get(JsonFormConstants.KEY) : JsonFormConstants.VALUE;\n+        }\n \n-    private void clearHiddenViewsValues(JSONObject object, String addressString) {\n-        if (object != null) {\n-            String objectKey = addressString.replace(\":\", \"_\");\n-            formValuesCacheMap.remove(objectKey);\n-            formValuesCacheMap.put(objectKey, \"\");\n-            if (object.has(JsonFormConstants.VALUE)) {\n-                object.remove(JsonFormConstants.VALUE);\n+        private void clearHiddenViewsValues (JSONObject object, String addressString){\n+            if (object != null) {\n+                String objectKey = addressString.replace(\":\", \"_\");\n+                formValuesCacheMap.remove(objectKey);\n+                formValuesCacheMap.put(objectKey, \"\");\n+                if (object.has(JsonFormConstants.VALUE)) {\n+                    object.remove(JsonFormConstants.VALUE);\n+                }\n             }\n         }\n-    }\n \n-    private void updateCanvas(View view, boolean visible, JSONArray canvasViewIds, String addressString, JSONObject object)\n+        private void updateCanvas (View view,boolean visible, JSONArray canvasViewIds, String\n+        addressString, JSONObject object)\n             throws JSONException {\n-        for (int i = 0; i < canvasViewIds.length(); i++) {\n-            int curId = canvasViewIds.getInt(i);\n-            View curCanvasView = view.getRootView().findViewById(curId);\n+            for (int i = 0; i < canvasViewIds.length(); i++) {\n+                int curId = canvasViewIds.getInt(i);\n+                View curCanvasView = view.getRootView().findViewById(curId);\n \n-            if (curCanvasView == null) {\n-                continue;\n-            }\n+                if (curCanvasView == null) {\n+                    continue;\n+                }\n \n-            if (visible) {\n-                curCanvasView.setEnabled(true);\n-                curCanvasView.setVisibility(View.VISIBLE);\n+                if (visible) {\n+                    curCanvasView.setEnabled(true);\n+                    curCanvasView.setVisibility(View.VISIBLE);\n \n-                if (curCanvasView instanceof RelativeLayout || view instanceof LinearLayout) {\n-                    curCanvasView.setFocusable(true);\n-                }\n-                if (view instanceof EditText) {\n-                    view.setFocusable(true);\n+                    if (curCanvasView instanceof RelativeLayout || view instanceof LinearLayout) {\n+                        curCanvasView.setFocusable(true);\n+                    }\n+                    if (view instanceof EditText) {\n+                        view.setFocusable(true);\n+                    }\n+                } else {\n+                    clearHiddenViewsValues(object, addressString);\n+                    curCanvasView.setEnabled(false);\n+                    curCanvasView.setVisibility(View.GONE);\n+                    refreshViews(curCanvasView);\n                 }\n-            } else {\n-                clearHiddenViewsValues(object, addressString);\n-                curCanvasView.setEnabled(false);\n-                curCanvasView.setVisibility(View.GONE);\n-                refreshViews(curCanvasView);\n-            }\n \n-            curCanvasView.setTag(R.id.relevance_decided, visible);\n+                curCanvasView.setTag(R.id.relevance_decided, visible);\n \n-            if (object != null) {\n-                object.put(JsonFormConstants.IS_VISIBLE, visible);\n-                //Only keep track of required fields that are invisible\n-                if (object.has(JsonFormConstants.V_REQUIRED) && object.getJSONObject(JsonFormConstants.V_REQUIRED)\n-                        .getBoolean(JsonFormConstants.VALUE)) {\n-                    trackInvisibleFields(object, visible);\n+                if (object != null) {\n+                    object.put(JsonFormConstants.IS_VISIBLE, visible);\n+                    //Only keep track of required fields that are invisible\n+                    if (object.has(JsonFormConstants.V_REQUIRED) && object.getJSONObject(JsonFormConstants.V_REQUIRED)\n+                            .getBoolean(JsonFormConstants.VALUE)) {\n+                        trackInvisibleFields(object, visible);\n+                    }\n                 }\n             }\n         }\n-    }\n \n-    @SuppressLint(\"StaticFieldLeak\")\n-    private void trackInvisibleFields(final JSONObject object, final boolean visible) {\n-        new AsyncTask<Void, Void, Void>() {\n-            @Override\n-            protected Void doInBackground(Void... voids) {\n-                try {\n-                    synchronized (invisibleRequiredFields) {\n-                        if (visible) {\n-                            invisibleRequiredFields.remove(object.getString(JsonFormConstants.KEY));\n-                        } else {\n-                            invisibleRequiredFields.add(object.getString(JsonFormConstants.KEY));\n+        @SuppressLint(\"StaticFieldLeak\")\n+        private void trackInvisibleFields ( final JSONObject object, final boolean visible){\n+            new AsyncTask<Void, Void, Void>() {\n+                @Override\n+                protected Void doInBackground(Void... voids) {\n+                    try {\n+                        synchronized (invisibleRequiredFields) {\n+                            if (visible) {\n+                                invisibleRequiredFields.remove(object.getString(JsonFormConstants.KEY));\n+                            } else {\n+                                invisibleRequiredFields.add(object.getString(JsonFormConstants.KEY));\n+                            }\n+                            getmJSONObject().put(JsonFormConstants.INVISIBLE_REQUIRED_FIELDS, invisibleRequiredFields);\n                         }\n-                        getmJSONObject().put(JsonFormConstants.INVISIBLE_REQUIRED_FIELDS, invisibleRequiredFields);\n+                    } catch (JSONException e) {\n+                        Timber.e(e);\n                     }\n-                } catch (JSONException e) {\n-                    Timber.e(e);\n+                    return null;\n                 }\n-                return null;\n-            }\n-        }.execute();\n-    }\n-\n-    private void refreshViews(View childElement) {\n-        if (childElement instanceof ViewGroup) {\n-            childElement.setFocusable(true);\n-            ViewGroup group = (ViewGroup) childElement;\n-            refreshNumberSelector(group);\n-            for (int id = 0; id < group.getChildCount(); id++) {\n-                View child = group.getChildAt(id);\n-                if (child instanceof CheckBox) {\n-                    ((CheckBox) child).setChecked(false);\n-                } else if (child instanceof RadioButton) {\n-                    ((RadioButton) child).setChecked(false);\n-                } else if (child instanceof EditText) {\n-                    EditText editText = (EditText) child;\n-                    if (!TextUtils.isEmpty(editText.getText().toString())) {\n-                        editText.setText(\"\");\n+            }.execute();\n+        }\n+\n+        private void refreshViews (View childElement){\n+            if (childElement instanceof ViewGroup) {\n+                childElement.setFocusable(true);\n+                ViewGroup group = (ViewGroup) childElement;\n+                refreshNumberSelector(group);\n+                for (int id = 0; id < group.getChildCount(); id++) {\n+                    View child = group.getChildAt(id);\n+                    if (child instanceof CheckBox) {\n+                        ((CheckBox) child).setChecked(false);\n+                    } else if (child instanceof RadioButton) {\n+                        ((RadioButton) child).setChecked(false);\n+                    } else if (child instanceof EditText) {\n+                        EditText editText = (EditText) child;\n+                        if (!TextUtils.isEmpty(editText.getText().toString())) {\n+                            editText.setText(\"\");\n+                        }\n+                    } else if (child instanceof MaterialSpinner) {\n+                        MaterialSpinner spinner = (MaterialSpinner) child;\n+                        spinner.setSelected(false);\n+                    } else if (child instanceof CustomTextView) {\n+                        resetSelectedNumberBackground(child);\n+\n+                    } else if (child instanceof TextView && child.getId() == R.id.duration) {\n+                        // clear duration for custom date picker\n+                        ((TextView) child).setText(\"\");\n                     }\n-                } else if (child instanceof MaterialSpinner) {\n-                    MaterialSpinner spinner = (MaterialSpinner) child;\n-                    spinner.setSelected(false);\n-                } else if (child instanceof CustomTextView) {\n-                    resetSelectedNumberBackground(child);\n-\n-                } else if (child instanceof TextView && child.getId() == R.id.duration) {\n-                    // clear duration for custom date picker\n-                    ((TextView) child).setText(\"\");\n+                    refreshViews(group.getChildAt(id));\n                 }\n-                refreshViews(group.getChildAt(id));\n             }\n         }\n-    }\n \n-    private void refreshNumberSelector(View group) {\n-        //reset value for number selector linear layout\n-        if (group instanceof LinearLayout) {\n-            LinearLayout numSelectorLayout = (LinearLayout) group;\n-            if (numSelectorLayout.getTag(R.id.is_number_selector_linear_layout) != null &&\n-                    Boolean.TRUE.equals(numSelectorLayout.getTag(R.id.is_number_selector_linear_layout))) {\n-                numSelectorLayout.setTag(R.id.selected_number_value, null);\n+        private void refreshNumberSelector (View group){\n+            //reset value for number selector linear layout\n+            if (group instanceof LinearLayout) {\n+                LinearLayout numSelectorLayout = (LinearLayout) group;\n+                if (numSelectorLayout.getTag(R.id.is_number_selector_linear_layout) != null &&\n+                        Boolean.TRUE.equals(numSelectorLayout.getTag(R.id.is_number_selector_linear_layout))) {\n+                    numSelectorLayout.setTag(R.id.selected_number_value, null);\n+                }\n             }\n         }\n-    }\n \n-    /**\n-     * Resets the background of the selected text in number selector\n-     *\n-     * @param child Selected textview\n-     */\n-    private void resetSelectedNumberBackground(View child) {\n-        Drawable background = child.getBackground();\n-        if (background instanceof ColorDrawable) {\n-            int color = ((ColorDrawable) background).getColor();\n-            if (color == child.getContext().getResources().getColor(R.color.native_number_selector_selected)) {\n-                child.setBackgroundColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+        /**\n+         * Resets the background of the selected text in number selector\n+         *\n+         * @param child Selected textview\n+         */\n+        private void resetSelectedNumberBackground (View child){\n+            Drawable background = child.getBackground();\n+            if (background instanceof ColorDrawable) {\n+                int color = ((ColorDrawable) background).getColor();\n+                if (color == child.getContext().getResources().getColor(R.color.native_number_selector_selected)) {\n+                    child.setBackgroundColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+                }\n+            } else if (background instanceof GradientDrawable) {\n+                ((GradientDrawable) background)\n+                        .setColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+                child.setBackground(background);\n             }\n-        } else if (background instanceof GradientDrawable) {\n-            ((GradientDrawable) background)\n-                    .setColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n-            child.setBackground(background);\n+            ((CustomTextView) child).setTextColor(child.getContext().getResources().getColor(R.color.primary_text));\n         }\n-        ((CustomTextView) child).setTextColor(child.getContext().getResources().getColor(R.color.primary_text));\n-    }\n-\n-    public JSONArray getExtraFieldsWithValues() {\n-        return extraFieldsWithValues;\n-    }\n \n-    public void setExtraFieldsWithValues(JSONArray extraFieldsWithValues) {\n-        this.extraFieldsWithValues = extraFieldsWithValues;\n-    }\n+        public JSONArray getExtraFieldsWithValues () {\n+            return extraFieldsWithValues;\n+        }\n \n-    @Override\n-    protected void onStart() {\n-        super.onStart();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onStart();\n+        public void setExtraFieldsWithValues (JSONArray extraFieldsWithValues){\n+            this.extraFieldsWithValues = extraFieldsWithValues;\n         }\n-    }\n \n-    @Override\n-    protected void onStop() {\n-        super.onStop();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onStop();\n+        @Override\n+        protected void onStart () {\n+            super.onStart();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onStart();\n+            }\n         }\n-    }\n \n-    @Override\n-    protected void onDestroy() {\n-        super.onDestroy();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onDestroy();\n+        @Override\n+        protected void onStop () {\n+            super.onStop();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onStop();\n+            }\n         }\n-    }\n \n-    @Override\n-    public void onSaveInstanceState(Bundle outState) {\n-        super.onSaveInstanceState(outState);\n-        outState.putString(JSON_STATE, mJSONObject.toString());\n-        outState.putSerializable(FORM_STATE, form);\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onSaveInstanceState(outState);\n+        @Override\n+        protected void onDestroy () {\n+            super.onDestroy();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onDestroy();\n+            }\n         }\n-    }\n \n-    private String getTemplateValue(Object object) {\n-        StringBuilder result = new StringBuilder();\n-        if (object instanceof List) {\n-            List<String> valueList = (List<String>) object;\n-            for (int i = 0; i < valueList.size(); i++) {\n-                result.append(valueList.get(i));\n-                if (i != (valueList.size() - 1)) {\n-                    result.append(\", \");\n+        @Override\n+        public void onSaveInstanceState (Bundle outState){\n+            super.onSaveInstanceState(outState);\n+            outState.putString(JSON_STATE, mJSONObject.toString());\n+            outState.putSerializable(FORM_STATE, form);\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onSaveInstanceState(outState);\n+            }\n+        }\n+\n+        private String getTemplateValue (Object object){\n+            StringBuilder result = new StringBuilder();\n+            if (object instanceof List) {\n+                List<String> valueList = (List<String>) object;\n+                for (int i = 0; i < valueList.size(); i++) {\n+                    result.append(valueList.get(i));\n+                    if (i != (valueList.size() - 1)) {\n+                        result.append(\", \");\n+                    }\n                 }\n+            } else {\n+                result.append(\n+                        object.toString().contains(\".0\") ? object.toString().substring(0, object.toString().indexOf(\".0\")) :\n+                                object.toString()); //Fix automatic conversion float bug\n             }\n-        } else {\n-            result.append(\n-                    object.toString().contains(\".0\") ? object.toString().substring(0, object.toString().indexOf(\".0\")) :\n-                            object.toString()); //Fix automatic conversion float bug\n+\n+            return result.toString();\n         }\n \n-        return result.toString();\n-    }\n+        public LocalBroadcastManager getLocalBroadcastManager () {\n+            return localBroadcastManager;\n+        }\n \n-    public LocalBroadcastManager getLocalBroadcastManager() {\n-        return localBroadcastManager;\n-    }\n+        private void cacheFormMapValues (String stepName, String parentKey, String childKey, String\n+        value){\n+            formValuesCacheMap.put(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey, value);\n+        }\n \n-    private void cacheFormMapValues(String stepName, String parentKey, String childKey, String\n-            value) {\n-        formValuesCacheMap.put(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey, value);\n-    }\n+        private boolean invokeRefreshLogic (String stepName, String parentKey, String\n+        childKey, String value){\n+            String oldValue = formValuesCacheMap.get(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey);\n \n-    private boolean invokeRefreshLogic(String stepName, String parentKey, String\n-            childKey, String value) {\n-        String oldValue = formValuesCacheMap.get(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey);\n+            return !value.equals(oldValue);\n \n-        return !value.equals(oldValue);\n+        }\n \n-    }\n+        protected boolean canHaveNumber (JSONObject object) throws JSONException {\n+            return isNumberWidget(object) || object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) ||\n+                    object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.SPINNER);\n+        }\n \n-    protected boolean canHaveNumber(JSONObject object) throws JSONException {\n-        return isNumberWidget(object) || object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) ||\n-                object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.SPINNER);\n-    }\n+        protected boolean isNumberWidget (JSONObject object) throws JSONException {\n+            return object.has(JsonFormConstants.EDIT_TYPE) &&\n+                    object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n+                    object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n+        }\n \n-    protected boolean isNumberWidget(JSONObject object) throws JSONException {\n-        return object.has(JsonFormConstants.EDIT_TYPE) &&\n-                object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n-                object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n-    }\n+        @Subscribe(threadMode = ThreadMode.MAIN)\n+        public void refreshExpansionPanel (RefreshExpansionPanelEvent refreshExpansionPanelEvent){\n+            if (refreshExpansionPanelEvent != null) {\n+                try {\n+                    List<String> values = getExpansionPanelValues(refreshExpansionPanelEvent);\n+                    LinearLayout linearLayout = refreshExpansionPanelEvent.getLinearLayout();\n+                    utils.enableExpansionPanelViews(linearLayout);\n+\n+                    RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n+                    ImageView status = layoutHeader.findViewById(R.id.statusImageView);\n+                    formUtils.updateExpansionPanelRecyclerView(values, status, getApplicationContext());\n+\n+                    LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n+                    LinearLayout mainContentView = contentLayout.findViewById(R.id.contentView);\n+                    formUtils.addValuesDisplay(values, mainContentView, getApplicationContext());\n+\n+                    LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n+                    Button undoButton = buttonLayout.findViewById(R.id.undo_button);\n+                    if (values.size() > 0) {\n+                        undoButton.setVisibility(View.VISIBLE);\n+                        contentLayout.setVisibility(View.VISIBLE);\n+                        buttonLayout.setVisibility(View.VISIBLE);\n+                    } else {\n+                        undoButton.setVisibility(View.GONE);\n+                        contentLayout.setVisibility(View.GONE);\n+                        buttonLayout.setVisibility(View.GONE);\n+                        status.setImageDrawable(this.getResources().getDrawable(R.drawable.icon_task_256));\n+                    }\n \n-    @Subscribe(threadMode = ThreadMode.MAIN)\n-    public void refreshExpansionPanel(RefreshExpansionPanelEvent refreshExpansionPanelEvent) {\n-        if (refreshExpansionPanelEvent != null) {\n-            try {\n-                List<String> values = getExpansionPanelValues(refreshExpansionPanelEvent);\n-                LinearLayout linearLayout = refreshExpansionPanelEvent.getLinearLayout();\n-                utils.enableExpansionPanelViews(linearLayout);\n-\n-                RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n-                ImageView status = layoutHeader.findViewById(R.id.statusImageView);\n-                formUtils.updateExpansionPanelRecyclerView(values, status, getApplicationContext());\n-\n-                LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n-                LinearLayout mainContentView = contentLayout.findViewById(R.id.contentView);\n-                formUtils.addValuesDisplay(values, mainContentView, getApplicationContext());\n-\n-                LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n-                Button undoButton = buttonLayout.findViewById(R.id.undo_button);\n-                if (values.size() > 0) {\n-                    undoButton.setVisibility(View.VISIBLE);\n-                    contentLayout.setVisibility(View.VISIBLE);\n-                    buttonLayout.setVisibility(View.VISIBLE);\n-                } else {\n-                    undoButton.setVisibility(View.GONE);\n-                    contentLayout.setVisibility(View.GONE);\n-                    buttonLayout.setVisibility(View.GONE);\n-                    status.setImageDrawable(this.getResources().getDrawable(R.drawable.icon_task_256));\n+                } catch (JSONException e) {\n+                    Timber.e(e, \"JsonFormActivity --> refreshExpansionPanel\");\n                 }\n-\n-            } catch (JSONException e) {\n-                Timber.e(e, \"JsonFormActivity --> refreshExpansionPanel\");\n             }\n         }\n-    }\n \n-    /**\n-     * Get the expansion panel values from the Refresh Expansion panel event {@link RefreshExpansionPanelEvent}\n-     *\n-     * @param refreshExpansionPanelEvent {@link RefreshExpansionPanelEvent}\n-     * @return values {@link List<String>}\n-     * @throws JSONException\n-     */\n-    private List<String> getExpansionPanelValues(RefreshExpansionPanelEvent refreshExpansionPanelEvent) throws JSONException {\n-        List<String> values;\n-        if (refreshExpansionPanelEvent.getValues() != null) {\n-            values = utils.createExpansionPanelChildren(refreshExpansionPanelEvent.getValues());\n-        } else {\n-            values = new ArrayList<>();\n+        /**\n+         * Get the expansion panel values from the Refresh Expansion panel event {@link RefreshExpansionPanelEvent}\n+         *\n+         * @param refreshExpansionPanelEvent {@link RefreshExpansionPanelEvent}\n+         * @return values {@link List<String>}\n+         * @throws JSONException\n+         */\n+        private List<String> getExpansionPanelValues (RefreshExpansionPanelEvent\n+        refreshExpansionPanelEvent) throws JSONException {\n+            List<String> values;\n+            if (refreshExpansionPanelEvent.getValues() != null) {\n+                values = utils.createExpansionPanelChildren(refreshExpansionPanelEvent.getValues());\n+            } else {\n+                values = new ArrayList<>();\n+            }\n+            return values;\n         }\n-        return values;\n-    }\n-}\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2NjM1MQ==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/421#discussion_r422066351", "bodyText": "It will good if we hold the child count in a local variable before the loop begins because until the loop gets completed it calls every time to getChildCount() method.", "author": "owais-vd", "createdAt": "2020-05-08T10:23:18Z", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "diffHunk": "@@ -1033,6 +1038,30 @@ private void setReadOnlyAndFocus(View view, boolean visible, boolean popup) {\n         }\n     }\n \n+    /**\n+     * Gets the {@link AppCompatRadioButton} views on the whole {@link com.vijay.jsonwizard.widgets.NativeRadioButtonFactory} and updates the enabled status\n+     *\n+     * @param view    {@link View}\n+     * @param enabled {@link Boolean}\n+     */\n+    private void setReadOnlyRadioButtonOptions(View view, boolean enabled) {\n+        if (view != null) {\n+            for (int i = 0; i < ((RadioGroup) view).getChildCount(); i++) {", "originalCommit": "8d4b3ebb8686383765f8d62d5062cb08d4c20a0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cacc36927562c8df4d22ee480804a3b415757233", "chunk": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\nindex 5a5fc1ea..a1448eca 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\n\n@@ -1046,1145 +1046,1157 @@ public class JsonFormActivity extends JsonFormBaseActivity implements JsonApi {\n      */\n     private void setReadOnlyRadioButtonOptions(View view, boolean enabled) {\n         if (view != null) {\n-            for (int i = 0; i < ((RadioGroup) view).getChildCount(); i++) {\n-                RelativeLayout relativeLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n-                if (relativeLayout != null) {\n-                    LinearLayout linearLayout = (LinearLayout) (relativeLayout).getChildAt(0);\n-                    if (linearLayout != null) {\n-                        LinearLayout linearLayout1 = (LinearLayout) (linearLayout).getChildAt(0);\n-                        if (linearLayout1 != null) {\n-                            AppCompatRadioButton appCompatRadioButton = (AppCompatRadioButton) (linearLayout1).getChildAt(0);\n-                            appCompatRadioButton.setEnabled(enabled);\n-                        }\n-                    }\n+            try {\n+                int viewChildrenCount = ((RadioGroup) view).getChildCount();\n+                for (int i = 0; i < viewChildrenCount; i++) {\n+                    RelativeLayout radioGroupChildLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n+                    LinearLayout linearLayout = (LinearLayout) (radioGroupChildLayout).getChildAt(0);\n+                    LinearLayout radioButtonMainLayout = (LinearLayout) (linearLayout).getChildAt(0);\n+                    AppCompatRadioButton appCompatRadioButton = (AppCompatRadioButton) (radioButtonMainLayout).getChildAt(0);\n+                    appCompatRadioButton.setEnabled(enabled);\n                 }\n+            } catch (ClassCastException e) {\n+                Timber.e(e, \" --> setReadOnlyRadioButtonOptions\");\n             }\n         }\n-    }\n \n-    private void checkViewConstraints(View curView, boolean popup) {\n-        String constraintTag = (String) curView.getTag(R.id.constraints);\n-        String widgetKey = (String) curView.getTag(R.id.key);\n-        String stepName = ((String) curView.getTag(R.id.address)).split(\":\")[0];\n-        if (constraintTag != null && constraintTag.length() > 0) {\n-            try {\n+        private void checkViewConstraints (View curView,boolean popup){\n+            String constraintTag = (String) curView.getTag(R.id.constraints);\n+            String widgetKey = (String) curView.getTag(R.id.key);\n+            String stepName = ((String) curView.getTag(R.id.address)).split(\":\")[0];\n+            if (constraintTag != null && constraintTag.length() > 0) {\n+                try {\n \n-                String errorMessage = null;\n-                String[] address = null;\n+                    String errorMessage = null;\n+                    String[] address = null;\n \n-                if (constraintTag.charAt(0) == '[') {\n-                    String addressString = (String) curView.getTag(R.id.address);\n-                    address = addressString.split(\":\");\n+                    if (constraintTag.charAt(0) == '[') {\n+                        String addressString = (String) curView.getTag(R.id.address);\n+                        address = addressString.split(\":\");\n \n-                    JSONArray constraint = new JSONArray(constraintTag);\n-                    for (int i = 0; i < constraint.length(); i++) {\n-                        JSONObject curConstraint = constraint.getJSONObject(i);\n-                        if (address.length == 2) {\n-                            String value = String.valueOf(getValueFromAddress(address, popup).get(JsonFormConstants.VALUE));\n-                            errorMessage = enforceConstraint(value, curView, curConstraint);\n-                            if (errorMessage != null) break;\n+                        JSONArray constraint = new JSONArray(constraintTag);\n+                        for (int i = 0; i < constraint.length(); i++) {\n+                            JSONObject curConstraint = constraint.getJSONObject(i);\n+                            if (address.length == 2) {\n+                                String value = String.valueOf(getValueFromAddress(address, popup).get(JsonFormConstants.VALUE));\n+                                errorMessage = enforceConstraint(value, curView, curConstraint);\n+                                if (errorMessage != null) break;\n+                            }\n                         }\n-                    }\n \n-                } else {\n-                    //Rules Engine\n-                    JSONObject constraint = new JSONObject(constraintTag);\n-                    Iterator<String> keys = constraint.keys();\n-                    while (keys.hasNext()) {\n-                        String curKey = keys.next();\n-                        JSONObject curConstraint = constraint.getJSONObject(curKey);\n+                    } else {\n+                        //Rules Engine\n+                        JSONObject constraint = new JSONObject(constraintTag);\n+                        Iterator<String> keys = constraint.keys();\n+                        while (keys.hasNext()) {\n+                            String curKey = keys.next();\n+                            JSONObject curConstraint = constraint.getJSONObject(curKey);\n \n \n-                        address = getAddressFromMap(widgetKey, stepName, JsonFormConstants.CONSTRAINTS);\n-                        if (address == null) {\n-                            address = getAddress(curView, curKey, curConstraint, JsonFormConstants.CONSTRAINTS);\n+                            address = getAddressFromMap(widgetKey, stepName, JsonFormConstants.CONSTRAINTS);\n+                            if (address == null) {\n+                                address = getAddress(curView, curKey, curConstraint, JsonFormConstants.CONSTRAINTS);\n+                            }\n+                            Facts curValueMap = getValueFromAddress(address, popup);\n+                            errorMessage = enforceConstraint(curValueMap, curConstraint);\n+                            if (errorMessage != null) break;\n                         }\n-                        Facts curValueMap = getValueFromAddress(address, popup);\n-                        errorMessage = enforceConstraint(curValueMap, curConstraint);\n-                        if (errorMessage != null) break;\n                     }\n-                }\n \n-                if (errorMessage != null) {\n-                    if (curView instanceof MaterialEditText) {\n-                        ((MaterialEditText) curView).setText(null);\n-                        ((MaterialEditText) curView).setError(errorMessage);\n-                    } else if (curView instanceof CheckBox) {\n-                        ((CheckBox) curView).setChecked(false);\n-                        Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();\n-                        String checkBoxKey = (String) curView.getTag(R.id.childKey);\n-\n-                        JSONObject questionObject = getObjectUsingAddress(address, popup);\n-                        for (int i = 0;\n-                             i < questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).length(); i++) {\n-                            JSONObject curOption =\n-                                    questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).getJSONObject(i);\n-                            if (curOption.getString(JsonFormConstants.KEY).equals(checkBoxKey)) {\n-                                curOption.put(JsonFormConstants.VALUE, \"false\");\n-                                break;\n+                    if (errorMessage != null) {\n+                        if (curView instanceof MaterialEditText) {\n+                            ((MaterialEditText) curView).setText(null);\n+                            ((MaterialEditText) curView).setError(errorMessage);\n+                        } else if (curView instanceof CheckBox) {\n+                            ((CheckBox) curView).setChecked(false);\n+                            Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();\n+                            String checkBoxKey = (String) curView.getTag(R.id.childKey);\n+\n+                            JSONObject questionObject = getObjectUsingAddress(address, popup);\n+                            for (int i = 0;\n+                                 i < questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).length(); i++) {\n+                                JSONObject curOption =\n+                                        questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).getJSONObject(i);\n+                                if (curOption.getString(JsonFormConstants.KEY).equals(checkBoxKey)) {\n+                                    curOption.put(JsonFormConstants.VALUE, \"false\");\n+                                    break;\n+                                }\n+                            }\n+                        } else if (curView.getTag(R.id.type).toString().equals(JsonFormConstants.NUMBER_SELECTOR) &&\n+                                !TextUtils.isEmpty(errorMessage) &&\n+                                (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n+\n+                            if (!\"false\".equals(errorMessage)) {\n+                                Intent localIntent = new Intent(JsonFormConstants.INTENT_ACTION.NUMBER_SELECTOR_FACTORY);\n+                                localIntent.putExtra(JsonFormConstants.MAX_SELECTION_VALUE, Integer.valueOf(errorMessage));\n+                                localIntent.putExtra(JsonFormConstants.JSON_OBJECT_KEY, curView.getTag(R.id.key).toString());\n+                                localIntent.putExtra(JsonFormConstants.STEPNAME, address[0]);\n+                                localIntent.putExtra(JsonFormConstants.IS_POPUP, popup);\n+                                localBroadcastManager.sendBroadcast(localIntent);\n+                                curView.setTag(R.id.previous, errorMessage); //Store value to avoid re-fires\n                             }\n-                        }\n-                    } else if (curView.getTag(R.id.type).toString().equals(JsonFormConstants.NUMBER_SELECTOR) &&\n-                            !TextUtils.isEmpty(errorMessage) &&\n-                            (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n-\n-                        if (!\"false\".equals(errorMessage)) {\n-                            Intent localIntent = new Intent(JsonFormConstants.INTENT_ACTION.NUMBER_SELECTOR_FACTORY);\n-                            localIntent.putExtra(JsonFormConstants.MAX_SELECTION_VALUE, Integer.valueOf(errorMessage));\n-                            localIntent.putExtra(JsonFormConstants.JSON_OBJECT_KEY, curView.getTag(R.id.key).toString());\n-                            localIntent.putExtra(JsonFormConstants.STEPNAME, address[0]);\n-                            localIntent.putExtra(JsonFormConstants.IS_POPUP, popup);\n-                            localBroadcastManager.sendBroadcast(localIntent);\n-                            curView.setTag(R.id.previous, errorMessage); //Store value to avoid re-fires\n-                        }\n \n \n-                    } else if (curView instanceof RadioGroup &&\n-                            curView.getTag(R.id.type).toString().equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n-                            !TextUtils.isEmpty(errorMessage) &&\n-                            (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n+                        } else if (curView instanceof RadioGroup &&\n+                                curView.getTag(R.id.type).toString().equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n+                                !TextUtils.isEmpty(errorMessage) &&\n+                                (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n \n-                        JSONObject jsonObject = (JSONObject) curView.getTag(R.id.json_object);\n-                        JSONObject jsonObjectNew = new JSONObject(errorMessage);\n-                        Iterator<String> keys = jsonObjectNew.keys();\n+                            JSONObject jsonObject = (JSONObject) curView.getTag(R.id.json_object);\n+                            JSONObject jsonObjectNew = new JSONObject(errorMessage);\n+                            Iterator<String> keys = jsonObjectNew.keys();\n \n-                        while (keys.hasNext()) {\n-                            String key = keys.next();\n-                            jsonObject.put(key, jsonObjectNew.getString(key));\n-                        }\n+                            while (keys.hasNext()) {\n+                                String key = keys.next();\n+                                jsonObject.put(key, jsonObjectNew.getString(key));\n+                            }\n \n+                        }\n                     }\n+                } catch (Exception e) {\n+                    Timber.e(e, \"JsonFormActivity --> checkViewConstraints\");\n                 }\n-            } catch (Exception e) {\n-                Timber.e(e, \"JsonFormActivity --> checkViewConstraints\");\n             }\n         }\n-    }\n \n-    private Facts getValueFromAddress(String[] address, boolean popup, JSONObject valueSource) throws Exception {\n-        JSONObject object = getObjectUsingAddress(address, popup, valueSource);\n-        return getEntries(address, object);\n-    }\n+        private Facts getValueFromAddress (String[]address,boolean popup, JSONObject valueSource) throws\n+        Exception {\n+            JSONObject object = getObjectUsingAddress(address, popup, valueSource);\n+            return getEntries(address, object);\n+        }\n \n-    private Facts getValueFromAddress(String[] address, boolean popup) throws Exception {\n-        JSONObject object = getObjectUsingAddress(address, popup);\n-        return getEntries(address, object);\n-    }\n+        private Facts getValueFromAddress (String[]address,boolean popup) throws Exception {\n+            JSONObject object = getObjectUsingAddress(address, popup);\n+            return getEntries(address, object);\n+        }\n \n-    private Facts getEntries(String[] address, JSONObject object) throws JSONException {\n-        Facts result = new Facts();\n-        if (object != null) {\n-            //reset the rules check value\n-            object.put(RuleConstant.IS_RULE_CHECK, false);\n-            if (object.has(RuleConstant.RESULT)) {\n-                JSONArray jsonArray = object.getJSONArray(RuleConstant.RESULT);\n+        private Facts getEntries (String[]address, JSONObject object) throws JSONException {\n+            Facts result = new Facts();\n+            if (object != null) {\n+                //reset the rules check value\n+                object.put(RuleConstant.IS_RULE_CHECK, false);\n+                if (object.has(RuleConstant.RESULT)) {\n+                    JSONArray jsonArray = object.getJSONArray(RuleConstant.RESULT);\n \n-                for (int i = 0; i < jsonArray.length(); i++) {\n-                    JSONObject formObject = jsonArray.getJSONObject(i);\n+                    for (int i = 0; i < jsonArray.length(); i++) {\n+                        JSONObject formObject = jsonArray.getJSONObject(i);\n \n-                    formObject.put(RuleConstant.IS_RULE_CHECK, true);\n-                    formObject.put(RuleConstant.STEP, formObject.getString(RuleConstant.STEP));\n+                        formObject.put(RuleConstant.IS_RULE_CHECK, true);\n+                        formObject.put(RuleConstant.STEP, formObject.getString(RuleConstant.STEP));\n \n-                    result.asMap().putAll(getValueFromAddressCore(formObject).asMap());\n-                }\n+                        result.asMap().putAll(getValueFromAddressCore(formObject).asMap());\n+                    }\n \n-                result.put(RuleConstant.SELECTED_RULE, address[2]);\n-            } else {\n-                result = getValueFromAddressCore(object);\n+                    result.put(RuleConstant.SELECTED_RULE, address[2]);\n+                } else {\n+                    result = getValueFromAddressCore(object);\n+                }\n             }\n+            return result;\n         }\n-        return result;\n-    }\n \n-    protected Facts getValueFromAddressCore(JSONObject object) throws JSONException {\n-        Facts result = new Facts();\n+        protected Facts getValueFromAddressCore (JSONObject object) throws JSONException {\n+            Facts result = new Facts();\n \n-        if (object != null && object.has(JsonFormConstants.TYPE)) {\n-            switch (object.getString(JsonFormConstants.TYPE)) {\n-                case JsonFormConstants.CHECK_BOX:\n-                    result = formUtils.getCheckBoxResults(object);\n-                    break;\n-                case JsonFormConstants.NATIVE_RADIO_BUTTON:\n-                case JsonFormConstants.EXTENDED_RADIO_BUTTON:\n-                    boolean multiRelevance = object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false);\n-                    result = formUtils.getRadioButtonResults(multiRelevance, object);\n-                    break;\n-                default:\n-                    result.put(getKey(object), getValue(object));\n-                    break;\n-            }\n+            if (object != null && object.has(JsonFormConstants.TYPE)) {\n+                switch (object.getString(JsonFormConstants.TYPE)) {\n+                    case JsonFormConstants.CHECK_BOX:\n+                        result = formUtils.getCheckBoxResults(object);\n+                        break;\n+                    case JsonFormConstants.NATIVE_RADIO_BUTTON:\n+                    case JsonFormConstants.EXTENDED_RADIO_BUTTON:\n+                        boolean multiRelevance = object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false);\n+                        result = formUtils.getRadioButtonResults(multiRelevance, object);\n+                        break;\n+                    default:\n+                        result.put(getKey(object), getValue(object));\n+                        break;\n+                }\n \n-            if (object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) &&\n-                    (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.CHECK_BOX) ||\n-                            (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n-                                    object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false)))) {\n-                List<String> selectedValues = new ArrayList<>(result.asMap().keySet());\n-                result = new Facts();\n-                result.put(getKey(object), selectedValues);\n+                if (object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) &&\n+                        (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.CHECK_BOX) ||\n+                                (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n+                                        object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false)))) {\n+                    List<String> selectedValues = new ArrayList<>(result.asMap().keySet());\n+                    result = new Facts();\n+                    result.put(getKey(object), selectedValues);\n+                }\n             }\n+            return result;\n         }\n-        return result;\n-    }\n \n-    private void initComparisons() {\n-        if (comparisons == null) {\n-            functionRegex = \"\";\n-            comparisons = new HashMap<>();\n+        private void initComparisons () {\n+            if (comparisons == null) {\n+                functionRegex = \"\";\n+                comparisons = new HashMap<>();\n \n-            LessThanComparison lessThanComparison = new LessThanComparison();\n-            functionRegex += lessThanComparison.getFunctionName();\n-            comparisons.put(lessThanComparison.getFunctionName(), lessThanComparison);\n+                LessThanComparison lessThanComparison = new LessThanComparison();\n+                functionRegex += lessThanComparison.getFunctionName();\n+                comparisons.put(lessThanComparison.getFunctionName(), lessThanComparison);\n \n-            LessThanEqualToComparison lessThanEqualToComparison = new LessThanEqualToComparison();\n-            functionRegex += \"|\" + lessThanEqualToComparison.getFunctionName();\n-            comparisons.put(lessThanEqualToComparison.getFunctionName(), lessThanEqualToComparison);\n+                LessThanEqualToComparison lessThanEqualToComparison = new LessThanEqualToComparison();\n+                functionRegex += \"|\" + lessThanEqualToComparison.getFunctionName();\n+                comparisons.put(lessThanEqualToComparison.getFunctionName(), lessThanEqualToComparison);\n \n-            EqualToComparison equalToComparison = new EqualToComparison();\n-            functionRegex += \"|\" + equalToComparison.getFunctionName();\n-            comparisons.put(equalToComparison.getFunctionName(), equalToComparison);\n+                EqualToComparison equalToComparison = new EqualToComparison();\n+                functionRegex += \"|\" + equalToComparison.getFunctionName();\n+                comparisons.put(equalToComparison.getFunctionName(), equalToComparison);\n \n-            NotEqualToComparison notEqualToComparer = new NotEqualToComparison();\n-            functionRegex += \"|\" + notEqualToComparer.getFunctionName();\n-            comparisons.put(notEqualToComparer.getFunctionName(), notEqualToComparer);\n+                NotEqualToComparison notEqualToComparer = new NotEqualToComparison();\n+                functionRegex += \"|\" + notEqualToComparer.getFunctionName();\n+                comparisons.put(notEqualToComparer.getFunctionName(), notEqualToComparer);\n \n-            GreaterThanComparison greaterThanComparison = new GreaterThanComparison();\n-            functionRegex += \"|\" + greaterThanComparison.getFunctionName();\n-            comparisons.put(greaterThanComparison.getFunctionName(), greaterThanComparison);\n+                GreaterThanComparison greaterThanComparison = new GreaterThanComparison();\n+                functionRegex += \"|\" + greaterThanComparison.getFunctionName();\n+                comparisons.put(greaterThanComparison.getFunctionName(), greaterThanComparison);\n \n-            GreaterThanEqualToComparison greaterThanEqualToComparison = new GreaterThanEqualToComparison();\n-            functionRegex += \"|\" + greaterThanEqualToComparison.getFunctionName();\n-            comparisons.put(greaterThanEqualToComparison.getFunctionName(), greaterThanEqualToComparison);\n+                GreaterThanEqualToComparison greaterThanEqualToComparison = new GreaterThanEqualToComparison();\n+                functionRegex += \"|\" + greaterThanEqualToComparison.getFunctionName();\n+                comparisons.put(greaterThanEqualToComparison.getFunctionName(), greaterThanEqualToComparison);\n \n-            RegexComparison regexComparison = new RegexComparison();\n-            functionRegex += \"|\" + regexComparison.getFunctionName();\n-            comparisons.put(regexComparison.getFunctionName(), regexComparison);\n+                RegexComparison regexComparison = new RegexComparison();\n+                functionRegex += \"|\" + regexComparison.getFunctionName();\n+                comparisons.put(regexComparison.getFunctionName(), regexComparison);\n+            }\n         }\n-    }\n \n-    private boolean doComparison(String value, JSONObject comparison) throws Exception {\n-        String type = comparison.getString(JsonFormConstants.TYPE).toLowerCase();\n-        String ex = comparison.getString(JsonFormConstants.EX);\n+        private boolean doComparison (String value, JSONObject comparison) throws Exception {\n+            String type = comparison.getString(JsonFormConstants.TYPE).toLowerCase();\n+            String ex = comparison.getString(JsonFormConstants.EX);\n \n-        Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n-        Matcher matcher = pattern.matcher(ex);\n-        if (matcher.find()) {\n-            String functionName = matcher.group(1);\n-            String b = matcher.group(\n-                    2);//functions arguments should be two, and should either be addresses or values (enclosed using \"\")\n-            String[] args = getFunctionArgs(b, value);\n-            return comparisons.get(functionName).compare(args[0], type, args[1]);\n-        }\n+            Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n+            Matcher matcher = pattern.matcher(ex);\n+            if (matcher.find()) {\n+                String functionName = matcher.group(1);\n+                String b = matcher.group(\n+                        2);//functions arguments should be two, and should either be addresses or values (enclosed using \"\")\n+                String[] args = getFunctionArgs(b, value);\n+                return comparisons.get(functionName).compare(args[0], type, args[1]);\n+            }\n \n-        return false;\n-    }\n+            return false;\n+        }\n \n-    private String[] getFunctionArgs(String functionArgs, String value) {\n-        String[] args = new String[2];\n-        String[] splitArgs = functionArgs.split(\",\");\n-        if (splitArgs.length == 2) {\n-            Pattern valueRegex = Pattern.compile(\"\\\"(.*)\\\"\");\n-            for (int i = 0; i < splitArgs.length; i++) {\n-                String curArg = splitArgs[i].trim();\n+        private String[] getFunctionArgs (String functionArgs, String value){\n+            String[] args = new String[2];\n+            String[] splitArgs = functionArgs.split(\",\");\n+            if (splitArgs.length == 2) {\n+                Pattern valueRegex = Pattern.compile(\"\\\"(.*)\\\"\");\n+                for (int i = 0; i < splitArgs.length; i++) {\n+                    String curArg = splitArgs[i].trim();\n \n-                if (\".\".equals(curArg)) {\n-                    args[i] = value;\n-                } else {\n-                    Matcher valueMatcher = valueRegex.matcher(curArg);\n-                    if (valueMatcher.find()) {\n-                        args[i] = valueMatcher.group(1);\n+                    if (\".\".equals(curArg)) {\n+                        args[i] = value;\n                     } else {\n-                        try {\n-                            args[i] = String.valueOf(\n-                                    getValueFromAddress(curArg.split(\":\"), false).get(JsonFormConstants.VALUE));\n-                        } catch (Exception e) {\n-                            Timber.e(e, \"JsonFormActivity --> getFunctionArgs\");\n+                        Matcher valueMatcher = valueRegex.matcher(curArg);\n+                        if (valueMatcher.find()) {\n+                            args[i] = valueMatcher.group(1);\n+                        } else {\n+                            try {\n+                                args[i] = String.valueOf(\n+                                        getValueFromAddress(curArg.split(\":\"), false).get(JsonFormConstants.VALUE));\n+                            } catch (Exception e) {\n+                                Timber.e(e, \"JsonFormActivity --> getFunctionArgs\");\n+                            }\n                         }\n                     }\n                 }\n             }\n-        }\n \n-        return args;\n-    }\n+            return args;\n+        }\n \n-    protected void refreshMediaLogic(String key, String value) {\n-        try {\n-            JSONObject object = getStep(JsonFormConstants.STEP1);\n-            JSONArray fields = object.getJSONArray(\"fields\");\n-            for (int i = 0; i < fields.length(); i++) {\n-                JSONObject questionGroup = fields.getJSONObject(i);\n-                if ((questionGroup.has(\"key\") && questionGroup.has(\"has_media_content\")) &&\n-                        (questionGroup.getString(\"key\").equalsIgnoreCase(key)) &&\n-                        (questionGroup.getBoolean(\"has_media_content\"))) {\n-                    JSONArray medias = questionGroup.getJSONArray(\"media\");\n-                    for (int j = 0; j < medias.length(); j++) {\n-                        JSONObject media = medias.getJSONObject(j);\n-                        mediaDialog(media, value);\n+        protected void refreshMediaLogic (String key, String value){\n+            try {\n+                JSONObject object = getStep(JsonFormConstants.STEP1);\n+                JSONArray fields = object.getJSONArray(\"fields\");\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject questionGroup = fields.getJSONObject(i);\n+                    if ((questionGroup.has(\"key\") && questionGroup.has(\"has_media_content\")) &&\n+                            (questionGroup.getString(\"key\").equalsIgnoreCase(key)) &&\n+                            (questionGroup.getBoolean(\"has_media_content\"))) {\n+                        JSONArray medias = questionGroup.getJSONArray(\"media\");\n+                        for (int j = 0; j < medias.length(); j++) {\n+                            JSONObject media = medias.getJSONObject(j);\n+                            mediaDialog(media, value);\n+                        }\n                     }\n                 }\n+            } catch (Exception e) {\n+                Timber.e(e, \"JsonFormActivity --> refreshMediaLogic\");\n             }\n-        } catch (Exception e) {\n-            Timber.e(e, \"JsonFormActivity --> refreshMediaLogic\");\n-        }\n-    }\n-\n-    public void mediaDialog(JSONObject media, String value) {\n-        try {\n-            if (media.getString(\"media_trigger_value\").equalsIgnoreCase(value)) {\n-                String mediatype = media.getString(\"media_type\");\n-                String medialink = media.getString(\"media_link\");\n-                String mediatext = media.getString(\"media_text\");\n-\n-                infoDialog(mediatype, medialink, mediatext);\n-            }\n-        } catch (Exception e) {\n-            Timber.e(e, \"JsonFormActivity --> mediaDialog\");\n         }\n-    }\n \n-    private void infoDialog(String mediatype, String medialink, String mediatext) {\n-        final FancyAlertDialog.Builder builder = new FancyAlertDialog.Builder(this);\n-        builder.setTitle(\"Info\");\n-        builder.setBackgroundColor(Color.parseColor(\"#208CC5\"))\n-                .setPositiveBtnBackground(Color.parseColor(\"#208CC5\"))  //Don't pass R\n-                // .color.colorvalue\n-                .setPositiveBtnText(\"OK\").setAnimation(Animation.SLIDE).isCancellable(true)\n-                .setIcon(com.shashank.sony.fancydialoglib.R.drawable.ic_person_black_24dp, Icon.Visible);\n-        builder.setMessage(mediatext);\n-        if (mediatype.equalsIgnoreCase(\"image\")) {\n-            builder.setImagetoshow(medialink);\n-        } else if (mediatype.equalsIgnoreCase(\"video\")) {\n-            builder.setVideopath(medialink);\n-        }\n-        builder.build();\n-    }\n-\n-    /**\n-     * This method checks whether a constraint has been enforced and returns an error message if not The error message should\n-     * be displayable to the user\n-     *\n-     * @param value      {@link String} The value to be checked\n-     * @param view       {@link View} The value to be checked\n-     * @param constraint {@link JSONObject} The constraint expression to use\n-     * @return An error message if constraint has not been enforced or NULL if constraint enforced\n-     * @throws Exception\n-     */\n-    private String enforceConstraint(String value, View view, JSONObject constraint) throws Exception {\n+        public void mediaDialog (JSONObject media, String value){\n+            try {\n+                if (media.getString(\"media_trigger_value\").equalsIgnoreCase(value)) {\n+                    String mediatype = media.getString(\"media_type\");\n+                    String medialink = media.getString(\"media_link\");\n+                    String mediatext = media.getString(\"media_text\");\n \n-        String type = constraint.getString(\"type\").toLowerCase();\n-        String ex = constraint.getString(JsonFormConstants.EX);\n-        String errorMessage = type.equals(JsonFormConstants.NUMBER_SELECTOR) ? constraint.optString(JsonFormConstants.ERR) :\n-                constraint.getString(JsonFormConstants.ERR);\n-        Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n-        Matcher matcher = pattern.matcher(ex);\n-        if (matcher.find()) {\n-            String functionName = matcher.group(1);\n-            String b = matcher.group(2);\n-            String[] args = getFunctionArgs(b, value);\n+                    infoDialog(mediatype, medialink, mediatext);\n+                }\n+            } catch (Exception e) {\n+                Timber.e(e, \"JsonFormActivity --> mediaDialog\");\n+            }\n+        }\n+\n+        private void infoDialog (String mediatype, String medialink, String mediatext){\n+            final FancyAlertDialog.Builder builder = new FancyAlertDialog.Builder(this);\n+            builder.setTitle(\"Info\");\n+            builder.setBackgroundColor(Color.parseColor(\"#208CC5\"))\n+                    .setPositiveBtnBackground(Color.parseColor(\"#208CC5\"))  //Don't pass R\n+                    // .color.colorvalue\n+                    .setPositiveBtnText(\"OK\").setAnimation(Animation.SLIDE).isCancellable(true)\n+                    .setIcon(com.shashank.sony.fancydialoglib.R.drawable.ic_person_black_24dp, Icon.Visible);\n+            builder.setMessage(mediatext);\n+            if (mediatype.equalsIgnoreCase(\"image\")) {\n+                builder.setImagetoshow(medialink);\n+            } else if (mediatype.equalsIgnoreCase(\"video\")) {\n+                builder.setVideopath(medialink);\n+            }\n+            builder.build();\n+        }\n+\n+        /**\n+         * This method checks whether a constraint has been enforced and returns an error message if not The error message should\n+         * be displayable to the user\n+         *\n+         * @param value      {@link String} The value to be checked\n+         * @param view       {@link View} The value to be checked\n+         * @param constraint {@link JSONObject} The constraint expression to use\n+         * @return An error message if constraint has not been enforced or NULL if constraint enforced\n+         * @throws Exception\n+         */\n+        private String enforceConstraint (String value, View view, JSONObject constraint) throws\n+        Exception {\n+\n+            String type = constraint.getString(\"type\").toLowerCase();\n+            String ex = constraint.getString(JsonFormConstants.EX);\n+            String errorMessage = type.equals(JsonFormConstants.NUMBER_SELECTOR) ? constraint.optString(JsonFormConstants.ERR) :\n+                    constraint.getString(JsonFormConstants.ERR);\n+            Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n+            Matcher matcher = pattern.matcher(ex);\n+            if (matcher.find()) {\n+                String functionName = matcher.group(1);\n+                String b = matcher.group(2);\n+                String[] args = getFunctionArgs(b, value);\n+\n+                boolean viewDoesNotHaveValue = TextUtils.isEmpty(value);\n+                if (view instanceof CheckBox) {\n+                    viewDoesNotHaveValue = !((CheckBox) view).isChecked();\n+                } else if (isNumberSelectorConstraint(view) || isDatePickerNativeRadio(view)) {\n+                    return args.length > 1 ? args[1] : \"\";//clever fix to pass back the max value for number selectors\n \n-            boolean viewDoesNotHaveValue = TextUtils.isEmpty(value);\n-            if (view instanceof CheckBox) {\n-                viewDoesNotHaveValue = !((CheckBox) view).isChecked();\n-            } else if (isNumberSelectorConstraint(view) || isDatePickerNativeRadio(view)) {\n-                return args.length > 1 ? args[1] : \"\";//clever fix to pass back the max value for number selectors\n+                }\n \n+                if (checkViewValues(type, functionName, args, viewDoesNotHaveValue)) return null;\n+            } else {\n+                Timber.d(\"Matcher didn't work with function\");\n             }\n \n-            if (checkViewValues(type, functionName, args, viewDoesNotHaveValue)) return null;\n-        } else {\n-            Timber.d(\"Matcher didn't work with function\");\n+            return errorMessage;\n         }\n \n-        return errorMessage;\n-    }\n-\n-    private boolean checkViewValues(String type, String functionName, String[] args, boolean viewDoesNotHaveValue) {\n-        return viewDoesNotHaveValue || TextUtils.isEmpty(args[0]) || TextUtils.isEmpty(args[1]) ||\n-                comparisons.get(functionName).compare(args[0], type, args[1]);\n-    }\n+        private boolean checkViewValues (String type, String functionName, String[]args,\n+        boolean viewDoesNotHaveValue){\n+            return viewDoesNotHaveValue || TextUtils.isEmpty(args[0]) || TextUtils.isEmpty(args[1]) ||\n+                    comparisons.get(functionName).compare(args[0], type, args[1]);\n+        }\n \n-    private String enforceConstraint(Facts curValueMap, JSONObject constraint) throws Exception {\n-        return curValueMap.asMap().size() == 0 ? \"0\" : getRulesEngineFactory().getConstraint(curValueMap,\n-                constraint.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).getString(RuleConstant.RULES_FILE));\n-    }\n+        private String enforceConstraint (Facts curValueMap, JSONObject constraint) throws Exception\n+        {\n+            return curValueMap.asMap().size() == 0 ? \"0\" : getRulesEngineFactory().getConstraint(curValueMap,\n+                    constraint.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).getString(RuleConstant.RULES_FILE));\n+        }\n \n-    private boolean isNumberSelectorConstraint(View view) {\n-        return JsonFormConstants.NUMBER_SELECTOR.equals(view.getTag(R.id.type));\n-    }\n+        private boolean isNumberSelectorConstraint (View view){\n+            return JsonFormConstants.NUMBER_SELECTOR.equals(view.getTag(R.id.type));\n+        }\n \n-    private boolean isDatePickerNativeRadio(View view) {\n-        return JsonFormConstants.NATIVE_RADIO_BUTTON.equals(view.getTag(R.id.type));\n-    }\n+        private boolean isDatePickerNativeRadio (View view){\n+            return JsonFormConstants.NATIVE_RADIO_BUTTON.equals(view.getTag(R.id.type));\n+        }\n \n-    protected JSONArray fetchFields(JSONObject parentJson, boolean popup) {\n-        JSONArray fields = new JSONArray();\n-        try {\n-            if (parentJson.has(JsonFormConstants.SECTIONS) &&\n-                    parentJson.get(JsonFormConstants.SECTIONS) instanceof JSONArray) {\n-                JSONArray sections = parentJson.getJSONArray(JsonFormConstants.SECTIONS);\n-                for (int i = 0; i < sections.length(); i++) {\n-                    JSONObject sectionJson = sections.getJSONObject(i);\n-                    fields = returnFormWithSectionFields(sectionJson, popup);\n+        protected JSONArray fetchFields (JSONObject parentJson,boolean popup){\n+            JSONArray fields = new JSONArray();\n+            try {\n+                if (parentJson.has(JsonFormConstants.SECTIONS) &&\n+                        parentJson.get(JsonFormConstants.SECTIONS) instanceof JSONArray) {\n+                    JSONArray sections = parentJson.getJSONArray(JsonFormConstants.SECTIONS);\n+                    for (int i = 0; i < sections.length(); i++) {\n+                        JSONObject sectionJson = sections.getJSONObject(i);\n+                        fields = returnFormWithSectionFields(sectionJson, popup);\n+                    }\n+                } else if (parentJson.has(JsonFormConstants.FIELDS) &&\n+                        parentJson.get(JsonFormConstants.FIELDS) instanceof JSONArray) {\n+                    fields = returnWithFormFields(parentJson, popup);\n+                }\n+            } catch (JSONException e) {\n+                Timber.e(e, \"JsonFormActivity --> fetchFields\");\n+            }\n+\n+            return fields;\n+        }\n+\n+        /**\n+         * Get form fields from JSON forms that have sections in the form steps. The JSONObject {@link JSONObject} argument is\n+         * the object after getting the section in the specified step name The popup {@link Boolean} argument is a boolean value\n+         * to let the function know that the form is being executed on a popup and not the main android view.\n+         * <p>\n+         * This function returns a JSONArray {@link JSONArray} of the fields contained in the section for the given step\n+         *\n+         * @param sectionJson\n+         * @param popup\n+         * @return\n+         * @throws JSONException\n+         * @author dubdabasoduba\n+         */\n+        protected JSONArray returnFormWithSectionFields (JSONObject sectionJson,boolean popup) throws\n+        JSONException {\n+            JSONArray fields = new JSONArray();\n+            if (sectionJson.has(JsonFormConstants.FIELDS)) {\n+                if (popup) {\n+                    JSONArray jsonArray = sectionJson.getJSONArray(JsonFormConstants.FIELDS);\n+                    for (int k = 0; k < jsonArray.length(); k++) {\n+                        JSONObject item = jsonArray.getJSONObject(k);\n+                        if (genericDialogInterface != null &&\n+                                item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n+                            fields = formUtils.concatArray(fields, specifyFields(item));\n+                        }\n+                    }\n+                } else {\n+                    fields = formUtils.concatArray(fields, sectionJson.getJSONArray(JsonFormConstants.FIELDS));\n                 }\n-            } else if (parentJson.has(JsonFormConstants.FIELDS) &&\n-                    parentJson.get(JsonFormConstants.FIELDS) instanceof JSONArray) {\n-                fields = returnWithFormFields(parentJson, popup);\n             }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"JsonFormActivity --> fetchFields\");\n-        }\n-\n-        return fields;\n-    }\n-\n-    /**\n-     * Get form fields from JSON forms that have sections in the form steps. The JSONObject {@link JSONObject} argument is\n-     * the object after getting the section in the specified step name The popup {@link Boolean} argument is a boolean value\n-     * to let the function know that the form is being executed on a popup and not the main android view.\n-     * <p>\n-     * This function returns a JSONArray {@link JSONArray} of the fields contained in the section for the given step\n-     *\n-     * @param sectionJson\n-     * @param popup\n-     * @return\n-     * @throws JSONException\n-     * @author dubdabasoduba\n-     */\n-    protected JSONArray returnFormWithSectionFields(JSONObject sectionJson, boolean popup) throws JSONException {\n-        JSONArray fields = new JSONArray();\n-        if (sectionJson.has(JsonFormConstants.FIELDS)) {\n+            return fields;\n+        }\n+\n+        /**\n+         * Get the form fields for the JSON forms that do not use the sections in the steps The JSONObject {@link JSONObject}\n+         * argument is the object after getting the step name The popup {@link boolean} argument is a boolean value to let the\n+         * function know that the form is being executed on a popup and not the main android view.\n+         * <p>\n+         * This function returns a JSONArray {@link JSONArray} of the fields contained in the step\n+         *\n+         * @param parentJson\n+         * @param popup\n+         * @return fields\n+         * @throws JSONException\n+         * @author dubdabasoduba\n+         */\n+        protected JSONArray returnWithFormFields (JSONObject parentJson,boolean popup) throws\n+        JSONException {\n+            JSONArray fields = new JSONArray();\n             if (popup) {\n-                JSONArray jsonArray = sectionJson.getJSONArray(JsonFormConstants.FIELDS);\n+                JSONArray jsonArray = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n                 for (int k = 0; k < jsonArray.length(); k++) {\n                     JSONObject item = jsonArray.getJSONObject(k);\n                     if (genericDialogInterface != null &&\n                             item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n-                        fields = formUtils.concatArray(fields, specifyFields(item));\n+                        fields = specifyFields(item);\n                     }\n                 }\n             } else {\n-                fields = formUtils.concatArray(fields, sectionJson.getJSONArray(JsonFormConstants.FIELDS));\n+                fields = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n             }\n-        }\n-        return fields;\n-    }\n \n-    /**\n-     * Get the form fields for the JSON forms that do not use the sections in the steps The JSONObject {@link JSONObject}\n-     * argument is the object after getting the step name The popup {@link boolean} argument is a boolean value to let the\n-     * function know that the form is being executed on a popup and not the main android view.\n-     * <p>\n-     * This function returns a JSONArray {@link JSONArray} of the fields contained in the step\n-     *\n-     * @param parentJson\n-     * @param popup\n-     * @return fields\n-     * @throws JSONException\n-     * @author dubdabasoduba\n-     */\n-    protected JSONArray returnWithFormFields(JSONObject parentJson, boolean popup) throws JSONException {\n-        JSONArray fields = new JSONArray();\n-        if (popup) {\n-            JSONArray jsonArray = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n-            for (int k = 0; k < jsonArray.length(); k++) {\n-                JSONObject item = jsonArray.getJSONObject(k);\n-                if (genericDialogInterface != null &&\n-                        item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n-                    fields = specifyFields(item);\n-                }\n-            }\n-        } else {\n-            fields = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n+            return fields;\n         }\n \n-        return fields;\n-    }\n-\n-    protected JSONArray specifyFields(JSONObject parentJson) {\n-        JSONArray fields = new JSONArray();\n-        if (genericDialogInterface != null && genericDialogInterface.getWidgetType() != null &&\n-                genericDialogInterface.getWidgetType().equals(JsonFormConstants.EXPANSION_PANEL)) {\n-            if (parentJson.has(JsonFormConstants.CONTENT_FORM)) {\n-                fields = returnFields(parentJson);\n-            }\n-        } else {\n-            if (parentJson.has(JsonFormConstants.HAS_EXTRA_REL)) {\n-                String optionKey;\n-                try {\n-                    optionKey = (String) parentJson.get(JsonFormConstants.HAS_EXTRA_REL);\n-                    JSONArray options = parentJson.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n-                    if (options.length() > 0) {\n-                        for (int j = 0; j < options.length(); j++) {\n-                            JSONObject jsonObject = options.getJSONObject(j);\n-                            String objectKey = (String) jsonObject.get(JsonFormConstants.KEY);\n-                            if (objectKey.equals(optionKey) && jsonObject.has(JsonFormConstants.CONTENT_FORM)) {\n-                                fields = returnFields(jsonObject);\n+        protected JSONArray specifyFields (JSONObject parentJson){\n+            JSONArray fields = new JSONArray();\n+            if (genericDialogInterface != null && genericDialogInterface.getWidgetType() != null &&\n+                    genericDialogInterface.getWidgetType().equals(JsonFormConstants.EXPANSION_PANEL)) {\n+                if (parentJson.has(JsonFormConstants.CONTENT_FORM)) {\n+                    fields = returnFields(parentJson);\n+                }\n+            } else {\n+                if (parentJson.has(JsonFormConstants.HAS_EXTRA_REL)) {\n+                    String optionKey;\n+                    try {\n+                        optionKey = (String) parentJson.get(JsonFormConstants.HAS_EXTRA_REL);\n+                        JSONArray options = parentJson.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n+                        if (options.length() > 0) {\n+                            for (int j = 0; j < options.length(); j++) {\n+                                JSONObject jsonObject = options.getJSONObject(j);\n+                                String objectKey = (String) jsonObject.get(JsonFormConstants.KEY);\n+                                if (objectKey.equals(optionKey) && jsonObject.has(JsonFormConstants.CONTENT_FORM)) {\n+                                    fields = returnFields(jsonObject);\n+                                }\n                             }\n                         }\n+                    } catch (JSONException e) {\n+                        Timber.e(e, \"JsonFormActivity --> specifyFields\");\n                     }\n-                } catch (JSONException e) {\n-                    Timber.e(e, \"JsonFormActivity --> specifyFields\");\n                 }\n             }\n+            return fields;\n         }\n-        return fields;\n-    }\n \n-    private JSONArray returnFields(JSONObject jsonObject) {\n-        JSONArray fields = new JSONArray();\n-        try {\n-            if (getExtraFieldsWithValues() != null) {\n-                fields = getExtraFieldsWithValues();\n-            } else {\n-                String formLocation = jsonObject.has(JsonFormConstants.CONTENT_FORM_LOCATION) ? jsonObject.getString(JsonFormConstants.CONTENT_FORM_LOCATION) : \"\";\n-                fields = getSubFormFields(jsonObject.get(JsonFormConstants.CONTENT_FORM).toString(), formLocation, fields);\n+        private JSONArray returnFields (JSONObject jsonObject){\n+            JSONArray fields = new JSONArray();\n+            try {\n+                if (getExtraFieldsWithValues() != null) {\n+                    fields = getExtraFieldsWithValues();\n+                } else {\n+                    String formLocation = jsonObject.has(JsonFormConstants.CONTENT_FORM_LOCATION) ? jsonObject.getString(JsonFormConstants.CONTENT_FORM_LOCATION) : \"\";\n+                    fields = getSubFormFields(jsonObject.get(JsonFormConstants.CONTENT_FORM).toString(), formLocation, fields);\n+                }\n+            } catch (JSONException e) {\n+                Timber.e(e, \"JsonFormActivity --> returnFields\");\n             }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"JsonFormActivity --> returnFields\");\n+            return fields;\n         }\n-        return fields;\n-    }\n \n-    protected JSONArray getSubFormFields(String subFormName, String subFormLocation, JSONArray fields) {\n-        JSONArray fieldArray = new JSONArray();\n-        JSONObject jsonObject = null;\n-        try {\n-            jsonObject = FormUtils.getSubFormJson(subFormName, subFormLocation, getApplicationContext(), translateForm);\n-        } catch (Exception e) {\n-            Timber.e(e);\n-        }\n-        if (jsonObject != null) {\n+        protected JSONArray getSubFormFields (String subFormName, String subFormLocation, JSONArray\n+        fields){\n+            JSONArray fieldArray = new JSONArray();\n+            JSONObject jsonObject = null;\n             try {\n-                JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.CONTENT_FORM);\n-                if (jsonArray != null && jsonArray.length() > 0) {\n-                    fieldArray = formUtils.concatArray(fields, jsonArray);\n+                jsonObject = FormUtils.getSubFormJson(subFormName, subFormLocation, getApplicationContext(), translateForm);\n+            } catch (Exception e) {\n+                Timber.e(e);\n+            }\n+            if (jsonObject != null) {\n+                try {\n+                    JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.CONTENT_FORM);\n+                    if (jsonArray != null && jsonArray.length() > 0) {\n+                        fieldArray = formUtils.concatArray(fields, jsonArray);\n+                    }\n+                } catch (JSONException e) {\n+                    Timber.e(e, \"JsonFormActivity --> getSubFormFields\");\n                 }\n-            } catch (JSONException e) {\n-                Timber.e(e, \"JsonFormActivity --> getSubFormFields\");\n             }\n+\n+            return fieldArray;\n         }\n \n-        return fieldArray;\n-    }\n+        public Form getForm () {\n+            return form;\n+        }\n \n-    public Form getForm() {\n-        return form;\n-    }\n+        private boolean isRelevant (Facts curValueMap, JSONObject curRelevance) throws Exception {\n+            if (curRelevance != null) {\n+                if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_RULES)) {\n \n-    private boolean isRelevant(Facts curValueMap, JSONObject curRelevance) throws Exception {\n-        if (curRelevance != null) {\n-            if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_RULES)) {\n+                    JSONObject exRulesObject = curRelevance.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n \n-                JSONObject exRulesObject = curRelevance.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n+                    if (exRulesObject.has(RuleConstant.RULES_FILE)) {\n \n-                if (exRulesObject.has(RuleConstant.RULES_FILE)) {\n+                        return curValueMap.asMap().size() != 0 && getRulesEngineFactory().getRelevance(curValueMap,\n+                                exRulesObject.getString(RuleConstant.RULES_FILE));\n \n-                    return curValueMap.asMap().size() != 0 && getRulesEngineFactory().getRelevance(curValueMap,\n-                            exRulesObject.getString(RuleConstant.RULES_FILE));\n+                    } else if (exRulesObject.has(RuleConstant.RULES_DYNAMIC)) {\n \n-                } else if (exRulesObject.has(RuleConstant.RULES_DYNAMIC)) {\n+                        return curValueMap.asMap().size() != 0 && getRulesEngineFactory()\n+                                .getDynamicRelevance(curValueMap, exRulesObject.optJSONArray(RuleConstant.RULES_DYNAMIC));\n \n-                    return curValueMap.asMap().size() != 0 && getRulesEngineFactory()\n-                            .getDynamicRelevance(curValueMap, exRulesObject.optJSONArray(RuleConstant.RULES_DYNAMIC));\n+                    }\n \n-                }\n+                } else if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX)) {\n+                    JSONArray exArray = curRelevance.getJSONArray(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX);\n \n-            } else if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX)) {\n-                JSONArray exArray = curRelevance.getJSONArray(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX);\n+                    for (int i = 0; i < exArray.length(); i++) {\n+                        ExObjectResult exObjectResult = isExObjectRelevant(curValueMap, exArray.getJSONObject(i));\n+                        if (exObjectResult.isRelevant()) {\n+                            return true;\n+                        } else if (!exObjectResult.isRelevant() && exObjectResult.isFinal()) {\n+                            return false;\n+                        }\n \n-                for (int i = 0; i < exArray.length(); i++) {\n-                    ExObjectResult exObjectResult = isExObjectRelevant(curValueMap, exArray.getJSONObject(i));\n-                    if (exObjectResult.isRelevant()) {\n-                        return true;\n-                    } else if (!exObjectResult.isRelevant() && exObjectResult.isFinal()) {\n-                        return false;\n                     }\n-\n+                    return false;\n+                } else {\n+                    String curValue = String.valueOf(curValueMap.get(JsonFormConstants.VALUE));\n+                    return doComparison(curValue != null ? curValue : \"\", curRelevance);\n                 }\n-                return false;\n-            } else {\n-                String curValue = String.valueOf(curValueMap.get(JsonFormConstants.VALUE));\n-                return doComparison(curValue != null ? curValue : \"\", curRelevance);\n             }\n+            return false;\n         }\n-        return false;\n-    }\n \n-    private ExObjectResult isExObjectRelevant(Facts curValueMap, JSONObject object) throws Exception {\n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.NOT)) {\n-            JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.NOT);\n+        private ExObjectResult isExObjectRelevant (Facts curValueMap, JSONObject object) throws\n+        Exception {\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.NOT)) {\n+                JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.NOT);\n \n-            for (int i = 0; i < orArray.length(); i++) {\n-                String curValue = curValueMap.get(orArray.getString(i));\n+                for (int i = 0; i < orArray.length(); i++) {\n+                    String curValue = curValueMap.get(orArray.getString(i));\n \n-                if (curValue != null && !Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(true, false);\n-                } else {\n-                    return new ExObjectResult(false, true);\n+                    if (curValue != null && !Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(true, false);\n+                    } else {\n+                        return new ExObjectResult(false, true);\n+                    }\n                 }\n             }\n-        }\n \n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.OR)) {\n-            JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.OR);\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.OR)) {\n+                JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.OR);\n+\n+                for (int i = 0; i < orArray.length(); i++) {\n+                    String curValue = curValueMap.get(orArray.getString(i));\n+                    if (curValue != null && Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(true, true);\n+                    }\n \n-            for (int i = 0; i < orArray.length(); i++) {\n-                String curValue = curValueMap.get(orArray.getString(i));\n-                if (curValue != null && Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(true, true);\n                 }\n \n             }\n \n-        }\n-\n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.AND)) {\n-            JSONArray andArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.AND);\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.AND)) {\n+                JSONArray andArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.AND);\n \n-            for (int i = 0; i < andArray.length(); i++) {\n-                String curValue = curValueMap.get(andArray.getString(i));\n-                if (curValue != null && !Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(false, false);\n+                for (int i = 0; i < andArray.length(); i++) {\n+                    String curValue = curValueMap.get(andArray.getString(i));\n+                    if (curValue != null && !Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(false, false);\n+                    }\n                 }\n+                return new ExObjectResult(true, false);\n+\n             }\n-            return new ExObjectResult(true, false);\n \n+            return new ExObjectResult(false, false);\n         }\n \n-        return new ExObjectResult(false, false);\n-    }\n-\n-    private List<String> getRules(String filename, String fieldKey) {\n-        List<String> rules = ruleKeys.get(filename + \":\" + fieldKey);\n+        private List<String> getRules (String filename, String fieldKey){\n+            List<String> rules = ruleKeys.get(filename + \":\" + fieldKey);\n \n-        if (rules == null) {\n-            try {\n-                Yaml yaml = new Yaml();\n-                InputStreamReader inputStreamReader = new InputStreamReader(\n-                        this.getAssets().open((getRulesEngineFactory().getRulesFolderPath() + filename)));\n-                Iterable<Object> ruleObjects = yaml.loadAll(inputStreamReader);\n+            if (rules == null) {\n+                try {\n+                    Yaml yaml = new Yaml();\n+                    InputStreamReader inputStreamReader = new InputStreamReader(\n+                            this.getAssets().open((getRulesEngineFactory().getRulesFolderPath() + filename)));\n+                    Iterable<Object> ruleObjects = yaml.loadAll(inputStreamReader);\n \n-                for (Object object : ruleObjects) {\n+                    for (Object object : ruleObjects) {\n \n-                    Map<String, Object> map = ((Map<String, Object>) object);\n+                        Map<String, Object> map = ((Map<String, Object>) object);\n \n-                    String name = map.get(RuleConstant.NAME).toString();\n-                    if (ruleKeys.containsKey(filename + \":\" + name)) {\n-                        continue;\n-                    }\n+                        String name = map.get(RuleConstant.NAME).toString();\n+                        if (ruleKeys.containsKey(filename + \":\" + name)) {\n+                            continue;\n+                        }\n \n-                    List<String> actions = new ArrayList<>();\n+                        List<String> actions = new ArrayList<>();\n \n-                    StringBuilder conditionString = new StringBuilder();\n-                    conditionString.append(map.get(RuleConstant.CONDITION).toString());\n+                        StringBuilder conditionString = new StringBuilder();\n+                        conditionString.append(map.get(RuleConstant.CONDITION).toString());\n \n-                    List<String> fields = (List<String>) map.get(RuleConstant.ACTIONS);\n-                    if (fields != null) {\n-                        for (String field : fields) {\n-                            if (field.trim().startsWith(RuleConstant.CALCULATION) ||\n-                                    field.trim().startsWith(RuleConstant.CONSTRAINT)) {\n-                                conditionString.append(\" \" + field);\n+                        List<String> fields = (List<String>) map.get(RuleConstant.ACTIONS);\n+                        if (fields != null) {\n+                            for (String field : fields) {\n+                                if (field.trim().startsWith(RuleConstant.CALCULATION) ||\n+                                        field.trim().startsWith(RuleConstant.CONSTRAINT)) {\n+                                    conditionString.append(\" \" + field);\n+                                }\n                             }\n+\n                         }\n \n-                    }\n+                        actions.addAll(getConditionKeys(conditionString.toString()));\n+                        ruleKeys.put(filename + \":\" + name, actions);\n \n-                    actions.addAll(getConditionKeys(conditionString.toString()));\n-                    ruleKeys.put(filename + \":\" + name, actions);\n+                        if (name.equals(fieldKey)) {\n+                            break;\n+                        }\n \n-                    if (name.equals(fieldKey)) {\n-                        break;\n                     }\n \n+                } catch (Exception e) {\n+                    Timber.e(e, \"JsonFormActivity --> getRules\");\n                 }\n \n-            } catch (Exception e) {\n-                Timber.e(e, \"JsonFormActivity --> getRules\");\n+                return ruleKeys.get(filename + \":\" + fieldKey);\n+            } else {\n+                return rules;\n             }\n+        }\n \n-            return ruleKeys.get(filename + \":\" + fieldKey);\n-        } else {\n-            return rules;\n+        private List<String> getConditionKeys (String condition){\n+            return Utils.getConditionKeys(condition);\n         }\n-    }\n \n-    private List<String> getConditionKeys(String condition) {\n-        return Utils.getConditionKeys(condition);\n-    }\n+        private void updateCalculation (Facts valueMap, View view, String[]address){\n+            String calculation;\n+            try {\n+                if (address[0].equals(RuleConstant.RULES_DYNAMIC)) {\n+                    calculation = getRulesEngineFactory().getDynamicCalculation(valueMap, new JSONArray(address[1]));\n+                } else {\n+                    calculation = getRulesEngineFactory().getCalculation(valueMap, address[1]);\n+                }\n \n-    private void updateCalculation(Facts valueMap, View view, String[] address) {\n-        String calculation;\n-        try {\n-            if (address[0].equals(RuleConstant.RULES_DYNAMIC)) {\n-                calculation = getRulesEngineFactory().getDynamicCalculation(valueMap, new JSONArray(address[1]));\n-            } else {\n-                calculation = getRulesEngineFactory().getCalculation(valueMap, address[1]);\n-            }\n+                if (calculation != null) {\n+                    if (view instanceof CheckBox) {\n+                        //For now were only handling checkbox titles only\n+                        TextView checkboxLabel = ((View) view.getParent().getParent()).findViewById(R.id.label_text);\n+                        if (checkboxLabel != null) {\n+                            checkboxLabel.setText(getRenderText(calculation, checkboxLabel.getTag(R.id.original_text).toString(), false));\n+                        }\n \n-            if (calculation != null) {\n-                if (view instanceof CheckBox) {\n-                    //For now were only handling checkbox titles only\n-                    TextView checkboxLabel = ((View) view.getParent().getParent()).findViewById(R.id.label_text);\n-                    if (checkboxLabel != null) {\n-                        checkboxLabel.setText(getRenderText(calculation, checkboxLabel.getTag(R.id.original_text).toString(), false));\n-                    }\n+                    } else if (view instanceof TextableView) {\n+                        TextableView textView = ((TextableView) view);\n+                        if (!TextUtils.isEmpty(calculation)) {\n+                            CharSequence spanned = calculation.charAt(0) == '{' ? getRenderText(calculation, textView.getTag(R.id.original_text).toString(), true) :\n+                                    (textView.getTag(R.id.original_text) != null && \"0\".equals(calculation)) ? textView.getTag(R.id.original_text).toString() : calculation;\n+                            textView.setText(spanned);\n+                        }\n+                    } else if (view instanceof EditText) {\n+                        String type = (String) view.getTag(R.id.type);\n+                        if (JsonFormConstants.HIDDEN.equals(type) && TextUtils.isEmpty(calculation)) {\n+                            calculation = \"0\";\n+                        }\n \n-                } else if (view instanceof TextableView) {\n-                    TextableView textView = ((TextableView) view);\n-                    if (!TextUtils.isEmpty(calculation)) {\n-                        CharSequence spanned = calculation.charAt(0) == '{' ? getRenderText(calculation, textView.getTag(R.id.original_text).toString(), true) :\n-                                (textView.getTag(R.id.original_text) != null && \"0\".equals(calculation)) ? textView.getTag(R.id.original_text).toString() : calculation;\n-                        textView.setText(spanned);\n-                    }\n-                } else if (view instanceof EditText) {\n-                    String type = (String) view.getTag(R.id.type);\n-                    if (JsonFormConstants.HIDDEN.equals(type) && TextUtils.isEmpty(calculation)) {\n-                        calculation = \"0\";\n-                    }\n+                        if (!TextUtils.isEmpty(calculation)) {\n+                            ((EditText) view).setText(calculation);\n+                        }\n \n-                    if (!TextUtils.isEmpty(calculation)) {\n-                        ((EditText) view).setText(calculation);\n+                    } else if (view instanceof RadioGroup) {\n+                        setRadioButtonCalculation((RadioGroup) view, calculation);\n+\n+                    } else if (view instanceof LinearLayout) {\n+                        LinearLayout linearLayout = (LinearLayout) view;\n+                        String type = (String) linearLayout.getTag(R.id.type);\n+                        if (JsonFormConstants.NUMBER_SELECTOR.equals(type)) {\n+                            setNumberSelectorCalculation(calculation, linearLayout);\n+                        }\n+                    } else {\n+                        ((TextView) view).setText(calculation);\n                     }\n+                }\n+            } catch (Exception e) {\n+                Timber.e(e, \"calling updateCalculation on Non TextView or Text View decendant\");\n+            }\n \n-                } else if (view instanceof RadioGroup) {\n-                    setRadioButtonCalculation((RadioGroup) view, calculation);\n+        }\n \n-                } else if (view instanceof LinearLayout) {\n-                    LinearLayout linearLayout = (LinearLayout) view;\n-                    String type = (String) linearLayout.getTag(R.id.type);\n-                    if (JsonFormConstants.NUMBER_SELECTOR.equals(type)) {\n-                        setNumberSelectorCalculation(calculation, linearLayout);\n+        private void setRadioButtonCalculation ( final RadioGroup view, final String calculation){\n+            int count = view.getChildCount();\n+            for (int i = 0; i < count; i++) {\n+                final int childPosition = i;\n+                runOnUiThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        addRadioButtonCalculation(calculation, view, childPosition);\n                     }\n-                } else {\n-                    ((TextView) view).setText(calculation);\n-                }\n+                });\n             }\n-        } catch (Exception e) {\n-            Timber.e(e, \"calling updateCalculation on Non TextView or Text View decendant\");\n         }\n \n-    }\n+        private void addRadioButtonCalculation (String calculation, RadioGroup view,\n+        int childPosition){\n+            if (!TextUtils.isEmpty(calculation)) {\n+                RelativeLayout radioButtonLayout = (RelativeLayout) view.getChildAt(childPosition);\n+                int radioButtonViewId = (int) radioButtonLayout.getTag(R.id.native_radio_button_view_id);\n+                RadioButton radioButton = radioButtonLayout.findViewById(radioButtonViewId);\n+                boolean showExtraInfo = (boolean) radioButton.getTag(R.id.native_radio_button_extra_info);\n+                String radioButtonKey = (String) radioButton.getTag(R.id.childKey);\n \n-    private void setRadioButtonCalculation(final RadioGroup view, final String calculation) {\n-        int count = view.getChildCount();\n-        for (int i = 0; i < count; i++) {\n-            final int childPosition = i;\n-            runOnUiThread(new Runnable() {\n-                @Override\n-                public void run() {\n-                    addRadioButtonCalculation(calculation, view, childPosition);\n+                if (!TextUtils.isEmpty(radioButtonKey) && calculation.equals(radioButtonKey)) {\n+                    radioButton.setChecked(true);\n+                    radioButton.performClick();\n                 }\n-            });\n-        }\n-    }\n-\n-    private void addRadioButtonCalculation(String calculation, RadioGroup view, int childPosition) {\n-        if (!TextUtils.isEmpty(calculation)) {\n-            RelativeLayout radioButtonLayout = (RelativeLayout) view.getChildAt(childPosition);\n-            int radioButtonViewId = (int) radioButtonLayout.getTag(R.id.native_radio_button_view_id);\n-            RadioButton radioButton = radioButtonLayout.findViewById(radioButtonViewId);\n-            boolean showExtraInfo = (boolean) radioButton.getTag(R.id.native_radio_button_extra_info);\n-            String radioButtonKey = (String) radioButton.getTag(R.id.childKey);\n \n-            if (!TextUtils.isEmpty(radioButtonKey) && calculation.equals(radioButtonKey)) {\n-                radioButton.setChecked(true);\n-                radioButton.performClick();\n-            }\n+                if (showExtraInfo) {\n+                    CustomTextView renderView = view.getChildAt(childPosition).findViewById(R.id.extraInfoTextView);\n \n-            if (showExtraInfo) {\n-                CustomTextView renderView = view.getChildAt(childPosition).findViewById(R.id.extraInfoTextView);\n+                    if (renderView.getTag(R.id.original_text) == null) {\n+                        renderView.setTag(R.id.original_text, renderView.getText());\n+                    }\n \n-                if (renderView.getTag(R.id.original_text) == null) {\n-                    renderView.setTag(R.id.original_text, renderView.getText());\n-                }\n \n+                    if (!TextUtils.isEmpty(calculation)) {\n+                        renderView.setText(calculation.charAt(0) == '{' ? getRenderText(calculation, renderView.getTag(R.id.original_text).toString(), false) : calculation);\n+                    }\n \n-                if (!TextUtils.isEmpty(calculation)) {\n-                    renderView.setText(calculation.charAt(0) == '{' ? getRenderText(calculation, renderView.getTag(R.id.original_text).toString(), false) : calculation);\n+                    renderView.setVisibility(renderView.getText().toString().contains(\"{\") ||\n+                            renderView.getText().toString().equals(\"0\") ? View.GONE : View.VISIBLE);\n                 }\n-\n-                renderView.setVisibility(renderView.getText().toString().contains(\"{\") ||\n-                        renderView.getText().toString().equals(\"0\") ? View.GONE : View.VISIBLE);\n             }\n         }\n-    }\n \n-    private void setNumberSelectorCalculation(String calculation, LinearLayout linearLayout) {\n-        if (!TextUtils.isEmpty(calculation)) {\n-            int childCount = linearLayout.getChildCount();\n-            for (int i = 0; i < childCount; i++) {\n-                if (linearLayout.getChildAt(i) instanceof TextView) {\n-                    TextView textView = (TextView) linearLayout.getChildAt(i);\n-                    String text = textView.getText().toString();\n-                    CommonListener commonListener =\n-                            (CommonListener) textView.getTag(R.id.number_selector_listener);\n+        private void setNumberSelectorCalculation (String calculation, LinearLayout linearLayout){\n+            if (!TextUtils.isEmpty(calculation)) {\n+                int childCount = linearLayout.getChildCount();\n+                for (int i = 0; i < childCount; i++) {\n+                    if (linearLayout.getChildAt(i) instanceof TextView) {\n+                        TextView textView = (TextView) linearLayout.getChildAt(i);\n+                        String text = textView.getText().toString();\n+                        CommonListener commonListener =\n+                                (CommonListener) textView.getTag(R.id.number_selector_listener);\n \n-                    String selectedNumber = \"\";\n-                    if (selectedTextView != null) {\n-                        selectedNumber = selectedTextView.getText().toString();\n-                    }\n+                        String selectedNumber = \"\";\n+                        if (selectedTextView != null) {\n+                            selectedNumber = selectedTextView.getText().toString();\n+                        }\n \n-                    if (i + 1 == childCount) {\n-                        String[] splitValue = text.split(\"\");\n-                        if (splitValue.length > 2) {\n-                            String value = splitValue[1];\n+                        if (i + 1 == childCount) {\n+                            String[] splitValue = text.split(\"\");\n+                            if (splitValue.length > 2) {\n+                                String value = splitValue[1];\n \n-                            if (Integer.valueOf(calculation) > Integer.valueOf(value)) {\n-                                if (!calculation.equals(selectedNumber)) {\n-                                    textView.setText(calculation);\n-                                    textView.setOnClickListener(commonListener);\n-                                    textView.performClick();\n+                                if (Integer.valueOf(calculation) > Integer.valueOf(value)) {\n+                                    if (!calculation.equals(selectedNumber)) {\n+                                        textView.setText(calculation);\n+                                        textView.setOnClickListener(commonListener);\n+                                        textView.performClick();\n+                                    }\n+                                } else {\n+                                    selectNumber(calculation, textView, value, commonListener);\n                                 }\n-                            } else {\n-                                selectNumber(calculation, textView, value, commonListener);\n                             }\n+                        } else {\n+                            selectNumber(calculation, textView, text, commonListener);\n                         }\n-                    } else {\n-                        selectNumber(calculation, textView, text, commonListener);\n                     }\n                 }\n             }\n         }\n-    }\n \n-    private void selectNumber(String calculation, TextView textView, String text, CommonListener commonListener) {\n-        if (calculation.equals(text) && !textView.equals(selectedTextView)) {\n-            selectedTextView = textView;\n-            textView.setOnClickListener(commonListener);\n-            textView.performClick();\n+        private void selectNumber (String calculation, TextView textView, String\n+        text, CommonListener commonListener){\n+            if (calculation.equals(text) && !textView.equals(selectedTextView)) {\n+                selectedTextView = textView;\n+                textView.setOnClickListener(commonListener);\n+                textView.performClick();\n+            }\n         }\n-    }\n \n-    private CharSequence getRenderText(String calculation, String textTemplate, boolean makeBold) {\n-        Map<String, Object> valueMap = new Gson().fromJson(calculation, new TypeToken<HashMap<String, Object>>() {\n-        }.getType());\n-        return stringFormat(textTemplate, valueMap, makeBold);\n-    }\n+        private CharSequence getRenderText (String calculation, String textTemplate,boolean makeBold)\n+        {\n+            Map<String, Object> valueMap = new Gson().fromJson(calculation, new TypeToken<HashMap<String, Object>>() {\n+            }.getType());\n+            return stringFormat(textTemplate, valueMap, makeBold);\n+        }\n \n-    public Spanned stringFormat(String string, Map<String, Object> valueMap, boolean makeBold) {\n-        String resString = string;\n-        for (Map.Entry<String, Object> entry : valueMap.entrySet()) {\n-            String templateValue = getTemplateValue(entry.getValue());\n-            if (makeBold) {\n-                templateValue = \"<b>\" + getTemplateValue(entry.getValue()) + \"</b>\";\n+        public Spanned stringFormat (String string, Map < String, Object > valueMap,boolean makeBold)\n+        {\n+            String resString = string;\n+            for (Map.Entry<String, Object> entry : valueMap.entrySet()) {\n+                String templateValue = getTemplateValue(entry.getValue());\n+                if (makeBold) {\n+                    templateValue = \"<b>\" + getTemplateValue(entry.getValue()) + \"</b>\";\n+                }\n+                resString = resString.replace(\"{\" + entry.getKey() + \"}\", templateValue);\n             }\n-            resString = resString.replace(\"{\" + entry.getKey() + \"}\", templateValue);\n+\n+            return Html.fromHtml(resString);\n         }\n \n-        return Html.fromHtml(resString);\n-    }\n+        protected Object getValue (JSONObject object) throws JSONException {\n+            Object value;\n \n-    protected Object getValue(JSONObject object) throws JSONException {\n-        Object value;\n+            if (object.has(JsonFormConstants.VALUE)) {\n+                value = object.opt(JsonFormConstants.VALUE);\n \n-        if (object.has(JsonFormConstants.VALUE)) {\n-            value = object.opt(JsonFormConstants.VALUE);\n+                if (isNumberWidget(object)) {\n+                    value = TextUtils.isEmpty(object.optString(JsonFormConstants.VALUE)) ? 0 : processNumberValues(object.optString(JsonFormConstants.VALUE));\n+                } else if (value != null && !TextUtils.isEmpty(object.getString(JsonFormConstants.VALUE)) && canHaveNumber(object)) {\n+                    value = processNumberValues(value);\n+                }\n \n-            if (isNumberWidget(object)) {\n-                value = TextUtils.isEmpty(object.optString(JsonFormConstants.VALUE)) ? 0 : processNumberValues(object.optString(JsonFormConstants.VALUE));\n-            } else if (value != null && !TextUtils.isEmpty(object.getString(JsonFormConstants.VALUE)) && canHaveNumber(object)) {\n-                value = processNumberValues(value);\n+            } else {\n+                value = isNumberWidget(object) ? 0 : \"\";\n             }\n \n-        } else {\n-            value = isNumberWidget(object) ? 0 : \"\";\n+            return value;\n         }\n \n-        return value;\n-    }\n-\n-    protected Object processNumberValues(Object object) {\n-        Object jsonObject = object;\n-        try {\n-            if (jsonObject.toString().contains(\".\")) {\n-                jsonObject = String.valueOf((float) Math.round(Float.valueOf(jsonObject.toString()) * 100) / 100);\n-            } else {\n-                jsonObject = Integer.valueOf(jsonObject.toString());\n+        protected Object processNumberValues (Object object){\n+            Object jsonObject = object;\n+            try {\n+                if (jsonObject.toString().contains(\".\")) {\n+                    jsonObject = String.valueOf((float) Math.round(Float.valueOf(jsonObject.toString()) * 100) / 100);\n+                } else {\n+                    jsonObject = Integer.valueOf(jsonObject.toString());\n+                }\n+            } catch (NumberFormatException e) {\n+                //Log.e(TAG, \"Error trying to convert \" + object + \" to a number \", e);\n             }\n-        } catch (NumberFormatException e) {\n-            //Log.e(TAG, \"Error trying to convert \" + object + \" to a number \", e);\n+            return jsonObject;\n         }\n-        return jsonObject;\n-    }\n \n-    protected String getKey(JSONObject object) throws JSONException {\n-        return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n-                object.get(RuleConstant.STEP) + \"_\" + object.get(JsonFormConstants.KEY) : JsonFormConstants.VALUE;\n-    }\n+        protected String getKey (JSONObject object) throws JSONException {\n+            return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n+                    object.get(RuleConstant.STEP) + \"_\" + object.get(JsonFormConstants.KEY) : JsonFormConstants.VALUE;\n+        }\n \n-    private void clearHiddenViewsValues(JSONObject object, String addressString) {\n-        if (object != null) {\n-            String objectKey = addressString.replace(\":\", \"_\");\n-            formValuesCacheMap.remove(objectKey);\n-            formValuesCacheMap.put(objectKey, \"\");\n-            if (object.has(JsonFormConstants.VALUE)) {\n-                object.remove(JsonFormConstants.VALUE);\n+        private void clearHiddenViewsValues (JSONObject object, String addressString){\n+            if (object != null) {\n+                String objectKey = addressString.replace(\":\", \"_\");\n+                formValuesCacheMap.remove(objectKey);\n+                formValuesCacheMap.put(objectKey, \"\");\n+                if (object.has(JsonFormConstants.VALUE)) {\n+                    object.remove(JsonFormConstants.VALUE);\n+                }\n             }\n         }\n-    }\n \n-    private void updateCanvas(View view, boolean visible, JSONArray canvasViewIds, String addressString, JSONObject object)\n+        private void updateCanvas (View view,boolean visible, JSONArray canvasViewIds, String\n+        addressString, JSONObject object)\n             throws JSONException {\n-        for (int i = 0; i < canvasViewIds.length(); i++) {\n-            int curId = canvasViewIds.getInt(i);\n-            View curCanvasView = view.getRootView().findViewById(curId);\n+            for (int i = 0; i < canvasViewIds.length(); i++) {\n+                int curId = canvasViewIds.getInt(i);\n+                View curCanvasView = view.getRootView().findViewById(curId);\n \n-            if (curCanvasView == null) {\n-                continue;\n-            }\n+                if (curCanvasView == null) {\n+                    continue;\n+                }\n \n-            if (visible) {\n-                curCanvasView.setEnabled(true);\n-                curCanvasView.setVisibility(View.VISIBLE);\n+                if (visible) {\n+                    curCanvasView.setEnabled(true);\n+                    curCanvasView.setVisibility(View.VISIBLE);\n \n-                if (curCanvasView instanceof RelativeLayout || view instanceof LinearLayout) {\n-                    curCanvasView.setFocusable(true);\n-                }\n-                if (view instanceof EditText) {\n-                    view.setFocusable(true);\n+                    if (curCanvasView instanceof RelativeLayout || view instanceof LinearLayout) {\n+                        curCanvasView.setFocusable(true);\n+                    }\n+                    if (view instanceof EditText) {\n+                        view.setFocusable(true);\n+                    }\n+                } else {\n+                    clearHiddenViewsValues(object, addressString);\n+                    curCanvasView.setEnabled(false);\n+                    curCanvasView.setVisibility(View.GONE);\n+                    refreshViews(curCanvasView);\n                 }\n-            } else {\n-                clearHiddenViewsValues(object, addressString);\n-                curCanvasView.setEnabled(false);\n-                curCanvasView.setVisibility(View.GONE);\n-                refreshViews(curCanvasView);\n-            }\n \n-            curCanvasView.setTag(R.id.relevance_decided, visible);\n+                curCanvasView.setTag(R.id.relevance_decided, visible);\n \n-            if (object != null) {\n-                object.put(JsonFormConstants.IS_VISIBLE, visible);\n-                //Only keep track of required fields that are invisible\n-                if (object.has(JsonFormConstants.V_REQUIRED) && object.getJSONObject(JsonFormConstants.V_REQUIRED)\n-                        .getBoolean(JsonFormConstants.VALUE)) {\n-                    trackInvisibleFields(object, visible);\n+                if (object != null) {\n+                    object.put(JsonFormConstants.IS_VISIBLE, visible);\n+                    //Only keep track of required fields that are invisible\n+                    if (object.has(JsonFormConstants.V_REQUIRED) && object.getJSONObject(JsonFormConstants.V_REQUIRED)\n+                            .getBoolean(JsonFormConstants.VALUE)) {\n+                        trackInvisibleFields(object, visible);\n+                    }\n                 }\n             }\n         }\n-    }\n \n-    @SuppressLint(\"StaticFieldLeak\")\n-    private void trackInvisibleFields(final JSONObject object, final boolean visible) {\n-        new AsyncTask<Void, Void, Void>() {\n-            @Override\n-            protected Void doInBackground(Void... voids) {\n-                try {\n-                    synchronized (invisibleRequiredFields) {\n-                        if (visible) {\n-                            invisibleRequiredFields.remove(object.getString(JsonFormConstants.KEY));\n-                        } else {\n-                            invisibleRequiredFields.add(object.getString(JsonFormConstants.KEY));\n+        @SuppressLint(\"StaticFieldLeak\")\n+        private void trackInvisibleFields ( final JSONObject object, final boolean visible){\n+            new AsyncTask<Void, Void, Void>() {\n+                @Override\n+                protected Void doInBackground(Void... voids) {\n+                    try {\n+                        synchronized (invisibleRequiredFields) {\n+                            if (visible) {\n+                                invisibleRequiredFields.remove(object.getString(JsonFormConstants.KEY));\n+                            } else {\n+                                invisibleRequiredFields.add(object.getString(JsonFormConstants.KEY));\n+                            }\n+                            getmJSONObject().put(JsonFormConstants.INVISIBLE_REQUIRED_FIELDS, invisibleRequiredFields);\n                         }\n-                        getmJSONObject().put(JsonFormConstants.INVISIBLE_REQUIRED_FIELDS, invisibleRequiredFields);\n+                    } catch (JSONException e) {\n+                        Timber.e(e);\n                     }\n-                } catch (JSONException e) {\n-                    Timber.e(e);\n+                    return null;\n                 }\n-                return null;\n-            }\n-        }.execute();\n-    }\n-\n-    private void refreshViews(View childElement) {\n-        if (childElement instanceof ViewGroup) {\n-            childElement.setFocusable(true);\n-            ViewGroup group = (ViewGroup) childElement;\n-            refreshNumberSelector(group);\n-            for (int id = 0; id < group.getChildCount(); id++) {\n-                View child = group.getChildAt(id);\n-                if (child instanceof CheckBox) {\n-                    ((CheckBox) child).setChecked(false);\n-                } else if (child instanceof RadioButton) {\n-                    ((RadioButton) child).setChecked(false);\n-                } else if (child instanceof EditText) {\n-                    EditText editText = (EditText) child;\n-                    if (!TextUtils.isEmpty(editText.getText().toString())) {\n-                        editText.setText(\"\");\n+            }.execute();\n+        }\n+\n+        private void refreshViews (View childElement){\n+            if (childElement instanceof ViewGroup) {\n+                childElement.setFocusable(true);\n+                ViewGroup group = (ViewGroup) childElement;\n+                refreshNumberSelector(group);\n+                for (int id = 0; id < group.getChildCount(); id++) {\n+                    View child = group.getChildAt(id);\n+                    if (child instanceof CheckBox) {\n+                        ((CheckBox) child).setChecked(false);\n+                    } else if (child instanceof RadioButton) {\n+                        ((RadioButton) child).setChecked(false);\n+                    } else if (child instanceof EditText) {\n+                        EditText editText = (EditText) child;\n+                        if (!TextUtils.isEmpty(editText.getText().toString())) {\n+                            editText.setText(\"\");\n+                        }\n+                    } else if (child instanceof MaterialSpinner) {\n+                        MaterialSpinner spinner = (MaterialSpinner) child;\n+                        spinner.setSelected(false);\n+                    } else if (child instanceof CustomTextView) {\n+                        resetSelectedNumberBackground(child);\n+\n+                    } else if (child instanceof TextView && child.getId() == R.id.duration) {\n+                        // clear duration for custom date picker\n+                        ((TextView) child).setText(\"\");\n                     }\n-                } else if (child instanceof MaterialSpinner) {\n-                    MaterialSpinner spinner = (MaterialSpinner) child;\n-                    spinner.setSelected(false);\n-                } else if (child instanceof CustomTextView) {\n-                    resetSelectedNumberBackground(child);\n-\n-                } else if (child instanceof TextView && child.getId() == R.id.duration) {\n-                    // clear duration for custom date picker\n-                    ((TextView) child).setText(\"\");\n+                    refreshViews(group.getChildAt(id));\n                 }\n-                refreshViews(group.getChildAt(id));\n             }\n         }\n-    }\n \n-    private void refreshNumberSelector(View group) {\n-        //reset value for number selector linear layout\n-        if (group instanceof LinearLayout) {\n-            LinearLayout numSelectorLayout = (LinearLayout) group;\n-            if (numSelectorLayout.getTag(R.id.is_number_selector_linear_layout) != null &&\n-                    Boolean.TRUE.equals(numSelectorLayout.getTag(R.id.is_number_selector_linear_layout))) {\n-                numSelectorLayout.setTag(R.id.selected_number_value, null);\n+        private void refreshNumberSelector (View group){\n+            //reset value for number selector linear layout\n+            if (group instanceof LinearLayout) {\n+                LinearLayout numSelectorLayout = (LinearLayout) group;\n+                if (numSelectorLayout.getTag(R.id.is_number_selector_linear_layout) != null &&\n+                        Boolean.TRUE.equals(numSelectorLayout.getTag(R.id.is_number_selector_linear_layout))) {\n+                    numSelectorLayout.setTag(R.id.selected_number_value, null);\n+                }\n             }\n         }\n-    }\n \n-    /**\n-     * Resets the background of the selected text in number selector\n-     *\n-     * @param child Selected textview\n-     */\n-    private void resetSelectedNumberBackground(View child) {\n-        Drawable background = child.getBackground();\n-        if (background instanceof ColorDrawable) {\n-            int color = ((ColorDrawable) background).getColor();\n-            if (color == child.getContext().getResources().getColor(R.color.native_number_selector_selected)) {\n-                child.setBackgroundColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+        /**\n+         * Resets the background of the selected text in number selector\n+         *\n+         * @param child Selected textview\n+         */\n+        private void resetSelectedNumberBackground (View child){\n+            Drawable background = child.getBackground();\n+            if (background instanceof ColorDrawable) {\n+                int color = ((ColorDrawable) background).getColor();\n+                if (color == child.getContext().getResources().getColor(R.color.native_number_selector_selected)) {\n+                    child.setBackgroundColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+                }\n+            } else if (background instanceof GradientDrawable) {\n+                ((GradientDrawable) background)\n+                        .setColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+                child.setBackground(background);\n             }\n-        } else if (background instanceof GradientDrawable) {\n-            ((GradientDrawable) background)\n-                    .setColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n-            child.setBackground(background);\n+            ((CustomTextView) child).setTextColor(child.getContext().getResources().getColor(R.color.primary_text));\n         }\n-        ((CustomTextView) child).setTextColor(child.getContext().getResources().getColor(R.color.primary_text));\n-    }\n-\n-    public JSONArray getExtraFieldsWithValues() {\n-        return extraFieldsWithValues;\n-    }\n \n-    public void setExtraFieldsWithValues(JSONArray extraFieldsWithValues) {\n-        this.extraFieldsWithValues = extraFieldsWithValues;\n-    }\n+        public JSONArray getExtraFieldsWithValues () {\n+            return extraFieldsWithValues;\n+        }\n \n-    @Override\n-    protected void onStart() {\n-        super.onStart();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onStart();\n+        public void setExtraFieldsWithValues (JSONArray extraFieldsWithValues){\n+            this.extraFieldsWithValues = extraFieldsWithValues;\n         }\n-    }\n \n-    @Override\n-    protected void onStop() {\n-        super.onStop();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onStop();\n+        @Override\n+        protected void onStart () {\n+            super.onStart();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onStart();\n+            }\n         }\n-    }\n \n-    @Override\n-    protected void onDestroy() {\n-        super.onDestroy();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onDestroy();\n+        @Override\n+        protected void onStop () {\n+            super.onStop();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onStop();\n+            }\n         }\n-    }\n \n-    @Override\n-    public void onSaveInstanceState(Bundle outState) {\n-        super.onSaveInstanceState(outState);\n-        outState.putString(JSON_STATE, mJSONObject.toString());\n-        outState.putSerializable(FORM_STATE, form);\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onSaveInstanceState(outState);\n+        @Override\n+        protected void onDestroy () {\n+            super.onDestroy();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onDestroy();\n+            }\n         }\n-    }\n \n-    private String getTemplateValue(Object object) {\n-        StringBuilder result = new StringBuilder();\n-        if (object instanceof List) {\n-            List<String> valueList = (List<String>) object;\n-            for (int i = 0; i < valueList.size(); i++) {\n-                result.append(valueList.get(i));\n-                if (i != (valueList.size() - 1)) {\n-                    result.append(\", \");\n+        @Override\n+        public void onSaveInstanceState (Bundle outState){\n+            super.onSaveInstanceState(outState);\n+            outState.putString(JSON_STATE, mJSONObject.toString());\n+            outState.putSerializable(FORM_STATE, form);\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onSaveInstanceState(outState);\n+            }\n+        }\n+\n+        private String getTemplateValue (Object object){\n+            StringBuilder result = new StringBuilder();\n+            if (object instanceof List) {\n+                List<String> valueList = (List<String>) object;\n+                for (int i = 0; i < valueList.size(); i++) {\n+                    result.append(valueList.get(i));\n+                    if (i != (valueList.size() - 1)) {\n+                        result.append(\", \");\n+                    }\n                 }\n+            } else {\n+                result.append(\n+                        object.toString().contains(\".0\") ? object.toString().substring(0, object.toString().indexOf(\".0\")) :\n+                                object.toString()); //Fix automatic conversion float bug\n             }\n-        } else {\n-            result.append(\n-                    object.toString().contains(\".0\") ? object.toString().substring(0, object.toString().indexOf(\".0\")) :\n-                            object.toString()); //Fix automatic conversion float bug\n+\n+            return result.toString();\n         }\n \n-        return result.toString();\n-    }\n+        public LocalBroadcastManager getLocalBroadcastManager () {\n+            return localBroadcastManager;\n+        }\n \n-    public LocalBroadcastManager getLocalBroadcastManager() {\n-        return localBroadcastManager;\n-    }\n+        private void cacheFormMapValues (String stepName, String parentKey, String childKey, String\n+        value){\n+            formValuesCacheMap.put(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey, value);\n+        }\n \n-    private void cacheFormMapValues(String stepName, String parentKey, String childKey, String\n-            value) {\n-        formValuesCacheMap.put(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey, value);\n-    }\n+        private boolean invokeRefreshLogic (String stepName, String parentKey, String\n+        childKey, String value){\n+            String oldValue = formValuesCacheMap.get(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey);\n \n-    private boolean invokeRefreshLogic(String stepName, String parentKey, String\n-            childKey, String value) {\n-        String oldValue = formValuesCacheMap.get(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey);\n+            return !value.equals(oldValue);\n \n-        return !value.equals(oldValue);\n+        }\n \n-    }\n+        protected boolean canHaveNumber (JSONObject object) throws JSONException {\n+            return isNumberWidget(object) || object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) ||\n+                    object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.SPINNER);\n+        }\n \n-    protected boolean canHaveNumber(JSONObject object) throws JSONException {\n-        return isNumberWidget(object) || object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) ||\n-                object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.SPINNER);\n-    }\n+        protected boolean isNumberWidget (JSONObject object) throws JSONException {\n+            return object.has(JsonFormConstants.EDIT_TYPE) &&\n+                    object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n+                    object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n+        }\n \n-    protected boolean isNumberWidget(JSONObject object) throws JSONException {\n-        return object.has(JsonFormConstants.EDIT_TYPE) &&\n-                object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n-                object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n-    }\n+        @Subscribe(threadMode = ThreadMode.MAIN)\n+        public void refreshExpansionPanel (RefreshExpansionPanelEvent refreshExpansionPanelEvent){\n+            if (refreshExpansionPanelEvent != null) {\n+                try {\n+                    List<String> values = getExpansionPanelValues(refreshExpansionPanelEvent);\n+                    LinearLayout linearLayout = refreshExpansionPanelEvent.getLinearLayout();\n+                    utils.enableExpansionPanelViews(linearLayout);\n+\n+                    RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n+                    ImageView status = layoutHeader.findViewById(R.id.statusImageView);\n+                    formUtils.updateExpansionPanelRecyclerView(values, status, getApplicationContext());\n+\n+                    LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n+                    LinearLayout mainContentView = contentLayout.findViewById(R.id.contentView);\n+                    formUtils.addValuesDisplay(values, mainContentView, getApplicationContext());\n+\n+                    LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n+                    Button undoButton = buttonLayout.findViewById(R.id.undo_button);\n+                    if (values.size() > 0) {\n+                        undoButton.setVisibility(View.VISIBLE);\n+                        contentLayout.setVisibility(View.VISIBLE);\n+                        buttonLayout.setVisibility(View.VISIBLE);\n+                    } else {\n+                        undoButton.setVisibility(View.GONE);\n+                        contentLayout.setVisibility(View.GONE);\n+                        buttonLayout.setVisibility(View.GONE);\n+                        status.setImageDrawable(this.getResources().getDrawable(R.drawable.icon_task_256));\n+                    }\n \n-    @Subscribe(threadMode = ThreadMode.MAIN)\n-    public void refreshExpansionPanel(RefreshExpansionPanelEvent refreshExpansionPanelEvent) {\n-        if (refreshExpansionPanelEvent != null) {\n-            try {\n-                List<String> values = getExpansionPanelValues(refreshExpansionPanelEvent);\n-                LinearLayout linearLayout = refreshExpansionPanelEvent.getLinearLayout();\n-                utils.enableExpansionPanelViews(linearLayout);\n-\n-                RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n-                ImageView status = layoutHeader.findViewById(R.id.statusImageView);\n-                formUtils.updateExpansionPanelRecyclerView(values, status, getApplicationContext());\n-\n-                LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n-                LinearLayout mainContentView = contentLayout.findViewById(R.id.contentView);\n-                formUtils.addValuesDisplay(values, mainContentView, getApplicationContext());\n-\n-                LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n-                Button undoButton = buttonLayout.findViewById(R.id.undo_button);\n-                if (values.size() > 0) {\n-                    undoButton.setVisibility(View.VISIBLE);\n-                    contentLayout.setVisibility(View.VISIBLE);\n-                    buttonLayout.setVisibility(View.VISIBLE);\n-                } else {\n-                    undoButton.setVisibility(View.GONE);\n-                    contentLayout.setVisibility(View.GONE);\n-                    buttonLayout.setVisibility(View.GONE);\n-                    status.setImageDrawable(this.getResources().getDrawable(R.drawable.icon_task_256));\n+                } catch (JSONException e) {\n+                    Timber.e(e, \"JsonFormActivity --> refreshExpansionPanel\");\n                 }\n-\n-            } catch (JSONException e) {\n-                Timber.e(e, \"JsonFormActivity --> refreshExpansionPanel\");\n             }\n         }\n-    }\n \n-    /**\n-     * Get the expansion panel values from the Refresh Expansion panel event {@link RefreshExpansionPanelEvent}\n-     *\n-     * @param refreshExpansionPanelEvent {@link RefreshExpansionPanelEvent}\n-     * @return values {@link List<String>}\n-     * @throws JSONException\n-     */\n-    private List<String> getExpansionPanelValues(RefreshExpansionPanelEvent refreshExpansionPanelEvent) throws JSONException {\n-        List<String> values;\n-        if (refreshExpansionPanelEvent.getValues() != null) {\n-            values = utils.createExpansionPanelChildren(refreshExpansionPanelEvent.getValues());\n-        } else {\n-            values = new ArrayList<>();\n+        /**\n+         * Get the expansion panel values from the Refresh Expansion panel event {@link RefreshExpansionPanelEvent}\n+         *\n+         * @param refreshExpansionPanelEvent {@link RefreshExpansionPanelEvent}\n+         * @return values {@link List<String>}\n+         * @throws JSONException\n+         */\n+        private List<String> getExpansionPanelValues (RefreshExpansionPanelEvent\n+        refreshExpansionPanelEvent) throws JSONException {\n+            List<String> values;\n+            if (refreshExpansionPanelEvent.getValues() != null) {\n+                values = utils.createExpansionPanelChildren(refreshExpansionPanelEvent.getValues());\n+            } else {\n+                values = new ArrayList<>();\n+            }\n+            return values;\n         }\n-        return values;\n-    }\n-}\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2NjYyOQ==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/421#discussion_r422066629", "bodyText": "Same as the above case", "author": "owais-vd", "createdAt": "2020-05-08T10:23:59Z", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "diffHunk": "@@ -1033,6 +1038,30 @@ private void setReadOnlyAndFocus(View view, boolean visible, boolean popup) {\n         }\n     }\n \n+    /**\n+     * Gets the {@link AppCompatRadioButton} views on the whole {@link com.vijay.jsonwizard.widgets.NativeRadioButtonFactory} and updates the enabled status\n+     *\n+     * @param view    {@link View}\n+     * @param enabled {@link Boolean}\n+     */\n+    private void setReadOnlyRadioButtonOptions(View view, boolean enabled) {\n+        if (view != null) {\n+            for (int i = 0; i < ((RadioGroup) view).getChildCount(); i++) {\n+                RelativeLayout relativeLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n+                if (relativeLayout != null) {\n+                    LinearLayout linearLayout = (LinearLayout) (relativeLayout).getChildAt(0);\n+                    if (linearLayout != null) {", "originalCommit": "8d4b3ebb8686383765f8d62d5062cb08d4c20a0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cacc36927562c8df4d22ee480804a3b415757233", "chunk": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\nindex 5a5fc1ea..a1448eca 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\n\n@@ -1046,1145 +1046,1157 @@ public class JsonFormActivity extends JsonFormBaseActivity implements JsonApi {\n      */\n     private void setReadOnlyRadioButtonOptions(View view, boolean enabled) {\n         if (view != null) {\n-            for (int i = 0; i < ((RadioGroup) view).getChildCount(); i++) {\n-                RelativeLayout relativeLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n-                if (relativeLayout != null) {\n-                    LinearLayout linearLayout = (LinearLayout) (relativeLayout).getChildAt(0);\n-                    if (linearLayout != null) {\n-                        LinearLayout linearLayout1 = (LinearLayout) (linearLayout).getChildAt(0);\n-                        if (linearLayout1 != null) {\n-                            AppCompatRadioButton appCompatRadioButton = (AppCompatRadioButton) (linearLayout1).getChildAt(0);\n-                            appCompatRadioButton.setEnabled(enabled);\n-                        }\n-                    }\n+            try {\n+                int viewChildrenCount = ((RadioGroup) view).getChildCount();\n+                for (int i = 0; i < viewChildrenCount; i++) {\n+                    RelativeLayout radioGroupChildLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n+                    LinearLayout linearLayout = (LinearLayout) (radioGroupChildLayout).getChildAt(0);\n+                    LinearLayout radioButtonMainLayout = (LinearLayout) (linearLayout).getChildAt(0);\n+                    AppCompatRadioButton appCompatRadioButton = (AppCompatRadioButton) (radioButtonMainLayout).getChildAt(0);\n+                    appCompatRadioButton.setEnabled(enabled);\n                 }\n+            } catch (ClassCastException e) {\n+                Timber.e(e, \" --> setReadOnlyRadioButtonOptions\");\n             }\n         }\n-    }\n \n-    private void checkViewConstraints(View curView, boolean popup) {\n-        String constraintTag = (String) curView.getTag(R.id.constraints);\n-        String widgetKey = (String) curView.getTag(R.id.key);\n-        String stepName = ((String) curView.getTag(R.id.address)).split(\":\")[0];\n-        if (constraintTag != null && constraintTag.length() > 0) {\n-            try {\n+        private void checkViewConstraints (View curView,boolean popup){\n+            String constraintTag = (String) curView.getTag(R.id.constraints);\n+            String widgetKey = (String) curView.getTag(R.id.key);\n+            String stepName = ((String) curView.getTag(R.id.address)).split(\":\")[0];\n+            if (constraintTag != null && constraintTag.length() > 0) {\n+                try {\n \n-                String errorMessage = null;\n-                String[] address = null;\n+                    String errorMessage = null;\n+                    String[] address = null;\n \n-                if (constraintTag.charAt(0) == '[') {\n-                    String addressString = (String) curView.getTag(R.id.address);\n-                    address = addressString.split(\":\");\n+                    if (constraintTag.charAt(0) == '[') {\n+                        String addressString = (String) curView.getTag(R.id.address);\n+                        address = addressString.split(\":\");\n \n-                    JSONArray constraint = new JSONArray(constraintTag);\n-                    for (int i = 0; i < constraint.length(); i++) {\n-                        JSONObject curConstraint = constraint.getJSONObject(i);\n-                        if (address.length == 2) {\n-                            String value = String.valueOf(getValueFromAddress(address, popup).get(JsonFormConstants.VALUE));\n-                            errorMessage = enforceConstraint(value, curView, curConstraint);\n-                            if (errorMessage != null) break;\n+                        JSONArray constraint = new JSONArray(constraintTag);\n+                        for (int i = 0; i < constraint.length(); i++) {\n+                            JSONObject curConstraint = constraint.getJSONObject(i);\n+                            if (address.length == 2) {\n+                                String value = String.valueOf(getValueFromAddress(address, popup).get(JsonFormConstants.VALUE));\n+                                errorMessage = enforceConstraint(value, curView, curConstraint);\n+                                if (errorMessage != null) break;\n+                            }\n                         }\n-                    }\n \n-                } else {\n-                    //Rules Engine\n-                    JSONObject constraint = new JSONObject(constraintTag);\n-                    Iterator<String> keys = constraint.keys();\n-                    while (keys.hasNext()) {\n-                        String curKey = keys.next();\n-                        JSONObject curConstraint = constraint.getJSONObject(curKey);\n+                    } else {\n+                        //Rules Engine\n+                        JSONObject constraint = new JSONObject(constraintTag);\n+                        Iterator<String> keys = constraint.keys();\n+                        while (keys.hasNext()) {\n+                            String curKey = keys.next();\n+                            JSONObject curConstraint = constraint.getJSONObject(curKey);\n \n \n-                        address = getAddressFromMap(widgetKey, stepName, JsonFormConstants.CONSTRAINTS);\n-                        if (address == null) {\n-                            address = getAddress(curView, curKey, curConstraint, JsonFormConstants.CONSTRAINTS);\n+                            address = getAddressFromMap(widgetKey, stepName, JsonFormConstants.CONSTRAINTS);\n+                            if (address == null) {\n+                                address = getAddress(curView, curKey, curConstraint, JsonFormConstants.CONSTRAINTS);\n+                            }\n+                            Facts curValueMap = getValueFromAddress(address, popup);\n+                            errorMessage = enforceConstraint(curValueMap, curConstraint);\n+                            if (errorMessage != null) break;\n                         }\n-                        Facts curValueMap = getValueFromAddress(address, popup);\n-                        errorMessage = enforceConstraint(curValueMap, curConstraint);\n-                        if (errorMessage != null) break;\n                     }\n-                }\n \n-                if (errorMessage != null) {\n-                    if (curView instanceof MaterialEditText) {\n-                        ((MaterialEditText) curView).setText(null);\n-                        ((MaterialEditText) curView).setError(errorMessage);\n-                    } else if (curView instanceof CheckBox) {\n-                        ((CheckBox) curView).setChecked(false);\n-                        Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();\n-                        String checkBoxKey = (String) curView.getTag(R.id.childKey);\n-\n-                        JSONObject questionObject = getObjectUsingAddress(address, popup);\n-                        for (int i = 0;\n-                             i < questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).length(); i++) {\n-                            JSONObject curOption =\n-                                    questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).getJSONObject(i);\n-                            if (curOption.getString(JsonFormConstants.KEY).equals(checkBoxKey)) {\n-                                curOption.put(JsonFormConstants.VALUE, \"false\");\n-                                break;\n+                    if (errorMessage != null) {\n+                        if (curView instanceof MaterialEditText) {\n+                            ((MaterialEditText) curView).setText(null);\n+                            ((MaterialEditText) curView).setError(errorMessage);\n+                        } else if (curView instanceof CheckBox) {\n+                            ((CheckBox) curView).setChecked(false);\n+                            Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();\n+                            String checkBoxKey = (String) curView.getTag(R.id.childKey);\n+\n+                            JSONObject questionObject = getObjectUsingAddress(address, popup);\n+                            for (int i = 0;\n+                                 i < questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).length(); i++) {\n+                                JSONObject curOption =\n+                                        questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).getJSONObject(i);\n+                                if (curOption.getString(JsonFormConstants.KEY).equals(checkBoxKey)) {\n+                                    curOption.put(JsonFormConstants.VALUE, \"false\");\n+                                    break;\n+                                }\n+                            }\n+                        } else if (curView.getTag(R.id.type).toString().equals(JsonFormConstants.NUMBER_SELECTOR) &&\n+                                !TextUtils.isEmpty(errorMessage) &&\n+                                (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n+\n+                            if (!\"false\".equals(errorMessage)) {\n+                                Intent localIntent = new Intent(JsonFormConstants.INTENT_ACTION.NUMBER_SELECTOR_FACTORY);\n+                                localIntent.putExtra(JsonFormConstants.MAX_SELECTION_VALUE, Integer.valueOf(errorMessage));\n+                                localIntent.putExtra(JsonFormConstants.JSON_OBJECT_KEY, curView.getTag(R.id.key).toString());\n+                                localIntent.putExtra(JsonFormConstants.STEPNAME, address[0]);\n+                                localIntent.putExtra(JsonFormConstants.IS_POPUP, popup);\n+                                localBroadcastManager.sendBroadcast(localIntent);\n+                                curView.setTag(R.id.previous, errorMessage); //Store value to avoid re-fires\n                             }\n-                        }\n-                    } else if (curView.getTag(R.id.type).toString().equals(JsonFormConstants.NUMBER_SELECTOR) &&\n-                            !TextUtils.isEmpty(errorMessage) &&\n-                            (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n-\n-                        if (!\"false\".equals(errorMessage)) {\n-                            Intent localIntent = new Intent(JsonFormConstants.INTENT_ACTION.NUMBER_SELECTOR_FACTORY);\n-                            localIntent.putExtra(JsonFormConstants.MAX_SELECTION_VALUE, Integer.valueOf(errorMessage));\n-                            localIntent.putExtra(JsonFormConstants.JSON_OBJECT_KEY, curView.getTag(R.id.key).toString());\n-                            localIntent.putExtra(JsonFormConstants.STEPNAME, address[0]);\n-                            localIntent.putExtra(JsonFormConstants.IS_POPUP, popup);\n-                            localBroadcastManager.sendBroadcast(localIntent);\n-                            curView.setTag(R.id.previous, errorMessage); //Store value to avoid re-fires\n-                        }\n \n \n-                    } else if (curView instanceof RadioGroup &&\n-                            curView.getTag(R.id.type).toString().equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n-                            !TextUtils.isEmpty(errorMessage) &&\n-                            (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n+                        } else if (curView instanceof RadioGroup &&\n+                                curView.getTag(R.id.type).toString().equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n+                                !TextUtils.isEmpty(errorMessage) &&\n+                                (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n \n-                        JSONObject jsonObject = (JSONObject) curView.getTag(R.id.json_object);\n-                        JSONObject jsonObjectNew = new JSONObject(errorMessage);\n-                        Iterator<String> keys = jsonObjectNew.keys();\n+                            JSONObject jsonObject = (JSONObject) curView.getTag(R.id.json_object);\n+                            JSONObject jsonObjectNew = new JSONObject(errorMessage);\n+                            Iterator<String> keys = jsonObjectNew.keys();\n \n-                        while (keys.hasNext()) {\n-                            String key = keys.next();\n-                            jsonObject.put(key, jsonObjectNew.getString(key));\n-                        }\n+                            while (keys.hasNext()) {\n+                                String key = keys.next();\n+                                jsonObject.put(key, jsonObjectNew.getString(key));\n+                            }\n \n+                        }\n                     }\n+                } catch (Exception e) {\n+                    Timber.e(e, \"JsonFormActivity --> checkViewConstraints\");\n                 }\n-            } catch (Exception e) {\n-                Timber.e(e, \"JsonFormActivity --> checkViewConstraints\");\n             }\n         }\n-    }\n \n-    private Facts getValueFromAddress(String[] address, boolean popup, JSONObject valueSource) throws Exception {\n-        JSONObject object = getObjectUsingAddress(address, popup, valueSource);\n-        return getEntries(address, object);\n-    }\n+        private Facts getValueFromAddress (String[]address,boolean popup, JSONObject valueSource) throws\n+        Exception {\n+            JSONObject object = getObjectUsingAddress(address, popup, valueSource);\n+            return getEntries(address, object);\n+        }\n \n-    private Facts getValueFromAddress(String[] address, boolean popup) throws Exception {\n-        JSONObject object = getObjectUsingAddress(address, popup);\n-        return getEntries(address, object);\n-    }\n+        private Facts getValueFromAddress (String[]address,boolean popup) throws Exception {\n+            JSONObject object = getObjectUsingAddress(address, popup);\n+            return getEntries(address, object);\n+        }\n \n-    private Facts getEntries(String[] address, JSONObject object) throws JSONException {\n-        Facts result = new Facts();\n-        if (object != null) {\n-            //reset the rules check value\n-            object.put(RuleConstant.IS_RULE_CHECK, false);\n-            if (object.has(RuleConstant.RESULT)) {\n-                JSONArray jsonArray = object.getJSONArray(RuleConstant.RESULT);\n+        private Facts getEntries (String[]address, JSONObject object) throws JSONException {\n+            Facts result = new Facts();\n+            if (object != null) {\n+                //reset the rules check value\n+                object.put(RuleConstant.IS_RULE_CHECK, false);\n+                if (object.has(RuleConstant.RESULT)) {\n+                    JSONArray jsonArray = object.getJSONArray(RuleConstant.RESULT);\n \n-                for (int i = 0; i < jsonArray.length(); i++) {\n-                    JSONObject formObject = jsonArray.getJSONObject(i);\n+                    for (int i = 0; i < jsonArray.length(); i++) {\n+                        JSONObject formObject = jsonArray.getJSONObject(i);\n \n-                    formObject.put(RuleConstant.IS_RULE_CHECK, true);\n-                    formObject.put(RuleConstant.STEP, formObject.getString(RuleConstant.STEP));\n+                        formObject.put(RuleConstant.IS_RULE_CHECK, true);\n+                        formObject.put(RuleConstant.STEP, formObject.getString(RuleConstant.STEP));\n \n-                    result.asMap().putAll(getValueFromAddressCore(formObject).asMap());\n-                }\n+                        result.asMap().putAll(getValueFromAddressCore(formObject).asMap());\n+                    }\n \n-                result.put(RuleConstant.SELECTED_RULE, address[2]);\n-            } else {\n-                result = getValueFromAddressCore(object);\n+                    result.put(RuleConstant.SELECTED_RULE, address[2]);\n+                } else {\n+                    result = getValueFromAddressCore(object);\n+                }\n             }\n+            return result;\n         }\n-        return result;\n-    }\n \n-    protected Facts getValueFromAddressCore(JSONObject object) throws JSONException {\n-        Facts result = new Facts();\n+        protected Facts getValueFromAddressCore (JSONObject object) throws JSONException {\n+            Facts result = new Facts();\n \n-        if (object != null && object.has(JsonFormConstants.TYPE)) {\n-            switch (object.getString(JsonFormConstants.TYPE)) {\n-                case JsonFormConstants.CHECK_BOX:\n-                    result = formUtils.getCheckBoxResults(object);\n-                    break;\n-                case JsonFormConstants.NATIVE_RADIO_BUTTON:\n-                case JsonFormConstants.EXTENDED_RADIO_BUTTON:\n-                    boolean multiRelevance = object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false);\n-                    result = formUtils.getRadioButtonResults(multiRelevance, object);\n-                    break;\n-                default:\n-                    result.put(getKey(object), getValue(object));\n-                    break;\n-            }\n+            if (object != null && object.has(JsonFormConstants.TYPE)) {\n+                switch (object.getString(JsonFormConstants.TYPE)) {\n+                    case JsonFormConstants.CHECK_BOX:\n+                        result = formUtils.getCheckBoxResults(object);\n+                        break;\n+                    case JsonFormConstants.NATIVE_RADIO_BUTTON:\n+                    case JsonFormConstants.EXTENDED_RADIO_BUTTON:\n+                        boolean multiRelevance = object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false);\n+                        result = formUtils.getRadioButtonResults(multiRelevance, object);\n+                        break;\n+                    default:\n+                        result.put(getKey(object), getValue(object));\n+                        break;\n+                }\n \n-            if (object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) &&\n-                    (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.CHECK_BOX) ||\n-                            (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n-                                    object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false)))) {\n-                List<String> selectedValues = new ArrayList<>(result.asMap().keySet());\n-                result = new Facts();\n-                result.put(getKey(object), selectedValues);\n+                if (object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) &&\n+                        (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.CHECK_BOX) ||\n+                                (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n+                                        object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false)))) {\n+                    List<String> selectedValues = new ArrayList<>(result.asMap().keySet());\n+                    result = new Facts();\n+                    result.put(getKey(object), selectedValues);\n+                }\n             }\n+            return result;\n         }\n-        return result;\n-    }\n \n-    private void initComparisons() {\n-        if (comparisons == null) {\n-            functionRegex = \"\";\n-            comparisons = new HashMap<>();\n+        private void initComparisons () {\n+            if (comparisons == null) {\n+                functionRegex = \"\";\n+                comparisons = new HashMap<>();\n \n-            LessThanComparison lessThanComparison = new LessThanComparison();\n-            functionRegex += lessThanComparison.getFunctionName();\n-            comparisons.put(lessThanComparison.getFunctionName(), lessThanComparison);\n+                LessThanComparison lessThanComparison = new LessThanComparison();\n+                functionRegex += lessThanComparison.getFunctionName();\n+                comparisons.put(lessThanComparison.getFunctionName(), lessThanComparison);\n \n-            LessThanEqualToComparison lessThanEqualToComparison = new LessThanEqualToComparison();\n-            functionRegex += \"|\" + lessThanEqualToComparison.getFunctionName();\n-            comparisons.put(lessThanEqualToComparison.getFunctionName(), lessThanEqualToComparison);\n+                LessThanEqualToComparison lessThanEqualToComparison = new LessThanEqualToComparison();\n+                functionRegex += \"|\" + lessThanEqualToComparison.getFunctionName();\n+                comparisons.put(lessThanEqualToComparison.getFunctionName(), lessThanEqualToComparison);\n \n-            EqualToComparison equalToComparison = new EqualToComparison();\n-            functionRegex += \"|\" + equalToComparison.getFunctionName();\n-            comparisons.put(equalToComparison.getFunctionName(), equalToComparison);\n+                EqualToComparison equalToComparison = new EqualToComparison();\n+                functionRegex += \"|\" + equalToComparison.getFunctionName();\n+                comparisons.put(equalToComparison.getFunctionName(), equalToComparison);\n \n-            NotEqualToComparison notEqualToComparer = new NotEqualToComparison();\n-            functionRegex += \"|\" + notEqualToComparer.getFunctionName();\n-            comparisons.put(notEqualToComparer.getFunctionName(), notEqualToComparer);\n+                NotEqualToComparison notEqualToComparer = new NotEqualToComparison();\n+                functionRegex += \"|\" + notEqualToComparer.getFunctionName();\n+                comparisons.put(notEqualToComparer.getFunctionName(), notEqualToComparer);\n \n-            GreaterThanComparison greaterThanComparison = new GreaterThanComparison();\n-            functionRegex += \"|\" + greaterThanComparison.getFunctionName();\n-            comparisons.put(greaterThanComparison.getFunctionName(), greaterThanComparison);\n+                GreaterThanComparison greaterThanComparison = new GreaterThanComparison();\n+                functionRegex += \"|\" + greaterThanComparison.getFunctionName();\n+                comparisons.put(greaterThanComparison.getFunctionName(), greaterThanComparison);\n \n-            GreaterThanEqualToComparison greaterThanEqualToComparison = new GreaterThanEqualToComparison();\n-            functionRegex += \"|\" + greaterThanEqualToComparison.getFunctionName();\n-            comparisons.put(greaterThanEqualToComparison.getFunctionName(), greaterThanEqualToComparison);\n+                GreaterThanEqualToComparison greaterThanEqualToComparison = new GreaterThanEqualToComparison();\n+                functionRegex += \"|\" + greaterThanEqualToComparison.getFunctionName();\n+                comparisons.put(greaterThanEqualToComparison.getFunctionName(), greaterThanEqualToComparison);\n \n-            RegexComparison regexComparison = new RegexComparison();\n-            functionRegex += \"|\" + regexComparison.getFunctionName();\n-            comparisons.put(regexComparison.getFunctionName(), regexComparison);\n+                RegexComparison regexComparison = new RegexComparison();\n+                functionRegex += \"|\" + regexComparison.getFunctionName();\n+                comparisons.put(regexComparison.getFunctionName(), regexComparison);\n+            }\n         }\n-    }\n \n-    private boolean doComparison(String value, JSONObject comparison) throws Exception {\n-        String type = comparison.getString(JsonFormConstants.TYPE).toLowerCase();\n-        String ex = comparison.getString(JsonFormConstants.EX);\n+        private boolean doComparison (String value, JSONObject comparison) throws Exception {\n+            String type = comparison.getString(JsonFormConstants.TYPE).toLowerCase();\n+            String ex = comparison.getString(JsonFormConstants.EX);\n \n-        Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n-        Matcher matcher = pattern.matcher(ex);\n-        if (matcher.find()) {\n-            String functionName = matcher.group(1);\n-            String b = matcher.group(\n-                    2);//functions arguments should be two, and should either be addresses or values (enclosed using \"\")\n-            String[] args = getFunctionArgs(b, value);\n-            return comparisons.get(functionName).compare(args[0], type, args[1]);\n-        }\n+            Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n+            Matcher matcher = pattern.matcher(ex);\n+            if (matcher.find()) {\n+                String functionName = matcher.group(1);\n+                String b = matcher.group(\n+                        2);//functions arguments should be two, and should either be addresses or values (enclosed using \"\")\n+                String[] args = getFunctionArgs(b, value);\n+                return comparisons.get(functionName).compare(args[0], type, args[1]);\n+            }\n \n-        return false;\n-    }\n+            return false;\n+        }\n \n-    private String[] getFunctionArgs(String functionArgs, String value) {\n-        String[] args = new String[2];\n-        String[] splitArgs = functionArgs.split(\",\");\n-        if (splitArgs.length == 2) {\n-            Pattern valueRegex = Pattern.compile(\"\\\"(.*)\\\"\");\n-            for (int i = 0; i < splitArgs.length; i++) {\n-                String curArg = splitArgs[i].trim();\n+        private String[] getFunctionArgs (String functionArgs, String value){\n+            String[] args = new String[2];\n+            String[] splitArgs = functionArgs.split(\",\");\n+            if (splitArgs.length == 2) {\n+                Pattern valueRegex = Pattern.compile(\"\\\"(.*)\\\"\");\n+                for (int i = 0; i < splitArgs.length; i++) {\n+                    String curArg = splitArgs[i].trim();\n \n-                if (\".\".equals(curArg)) {\n-                    args[i] = value;\n-                } else {\n-                    Matcher valueMatcher = valueRegex.matcher(curArg);\n-                    if (valueMatcher.find()) {\n-                        args[i] = valueMatcher.group(1);\n+                    if (\".\".equals(curArg)) {\n+                        args[i] = value;\n                     } else {\n-                        try {\n-                            args[i] = String.valueOf(\n-                                    getValueFromAddress(curArg.split(\":\"), false).get(JsonFormConstants.VALUE));\n-                        } catch (Exception e) {\n-                            Timber.e(e, \"JsonFormActivity --> getFunctionArgs\");\n+                        Matcher valueMatcher = valueRegex.matcher(curArg);\n+                        if (valueMatcher.find()) {\n+                            args[i] = valueMatcher.group(1);\n+                        } else {\n+                            try {\n+                                args[i] = String.valueOf(\n+                                        getValueFromAddress(curArg.split(\":\"), false).get(JsonFormConstants.VALUE));\n+                            } catch (Exception e) {\n+                                Timber.e(e, \"JsonFormActivity --> getFunctionArgs\");\n+                            }\n                         }\n                     }\n                 }\n             }\n-        }\n \n-        return args;\n-    }\n+            return args;\n+        }\n \n-    protected void refreshMediaLogic(String key, String value) {\n-        try {\n-            JSONObject object = getStep(JsonFormConstants.STEP1);\n-            JSONArray fields = object.getJSONArray(\"fields\");\n-            for (int i = 0; i < fields.length(); i++) {\n-                JSONObject questionGroup = fields.getJSONObject(i);\n-                if ((questionGroup.has(\"key\") && questionGroup.has(\"has_media_content\")) &&\n-                        (questionGroup.getString(\"key\").equalsIgnoreCase(key)) &&\n-                        (questionGroup.getBoolean(\"has_media_content\"))) {\n-                    JSONArray medias = questionGroup.getJSONArray(\"media\");\n-                    for (int j = 0; j < medias.length(); j++) {\n-                        JSONObject media = medias.getJSONObject(j);\n-                        mediaDialog(media, value);\n+        protected void refreshMediaLogic (String key, String value){\n+            try {\n+                JSONObject object = getStep(JsonFormConstants.STEP1);\n+                JSONArray fields = object.getJSONArray(\"fields\");\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject questionGroup = fields.getJSONObject(i);\n+                    if ((questionGroup.has(\"key\") && questionGroup.has(\"has_media_content\")) &&\n+                            (questionGroup.getString(\"key\").equalsIgnoreCase(key)) &&\n+                            (questionGroup.getBoolean(\"has_media_content\"))) {\n+                        JSONArray medias = questionGroup.getJSONArray(\"media\");\n+                        for (int j = 0; j < medias.length(); j++) {\n+                            JSONObject media = medias.getJSONObject(j);\n+                            mediaDialog(media, value);\n+                        }\n                     }\n                 }\n+            } catch (Exception e) {\n+                Timber.e(e, \"JsonFormActivity --> refreshMediaLogic\");\n             }\n-        } catch (Exception e) {\n-            Timber.e(e, \"JsonFormActivity --> refreshMediaLogic\");\n-        }\n-    }\n-\n-    public void mediaDialog(JSONObject media, String value) {\n-        try {\n-            if (media.getString(\"media_trigger_value\").equalsIgnoreCase(value)) {\n-                String mediatype = media.getString(\"media_type\");\n-                String medialink = media.getString(\"media_link\");\n-                String mediatext = media.getString(\"media_text\");\n-\n-                infoDialog(mediatype, medialink, mediatext);\n-            }\n-        } catch (Exception e) {\n-            Timber.e(e, \"JsonFormActivity --> mediaDialog\");\n         }\n-    }\n \n-    private void infoDialog(String mediatype, String medialink, String mediatext) {\n-        final FancyAlertDialog.Builder builder = new FancyAlertDialog.Builder(this);\n-        builder.setTitle(\"Info\");\n-        builder.setBackgroundColor(Color.parseColor(\"#208CC5\"))\n-                .setPositiveBtnBackground(Color.parseColor(\"#208CC5\"))  //Don't pass R\n-                // .color.colorvalue\n-                .setPositiveBtnText(\"OK\").setAnimation(Animation.SLIDE).isCancellable(true)\n-                .setIcon(com.shashank.sony.fancydialoglib.R.drawable.ic_person_black_24dp, Icon.Visible);\n-        builder.setMessage(mediatext);\n-        if (mediatype.equalsIgnoreCase(\"image\")) {\n-            builder.setImagetoshow(medialink);\n-        } else if (mediatype.equalsIgnoreCase(\"video\")) {\n-            builder.setVideopath(medialink);\n-        }\n-        builder.build();\n-    }\n-\n-    /**\n-     * This method checks whether a constraint has been enforced and returns an error message if not The error message should\n-     * be displayable to the user\n-     *\n-     * @param value      {@link String} The value to be checked\n-     * @param view       {@link View} The value to be checked\n-     * @param constraint {@link JSONObject} The constraint expression to use\n-     * @return An error message if constraint has not been enforced or NULL if constraint enforced\n-     * @throws Exception\n-     */\n-    private String enforceConstraint(String value, View view, JSONObject constraint) throws Exception {\n+        public void mediaDialog (JSONObject media, String value){\n+            try {\n+                if (media.getString(\"media_trigger_value\").equalsIgnoreCase(value)) {\n+                    String mediatype = media.getString(\"media_type\");\n+                    String medialink = media.getString(\"media_link\");\n+                    String mediatext = media.getString(\"media_text\");\n \n-        String type = constraint.getString(\"type\").toLowerCase();\n-        String ex = constraint.getString(JsonFormConstants.EX);\n-        String errorMessage = type.equals(JsonFormConstants.NUMBER_SELECTOR) ? constraint.optString(JsonFormConstants.ERR) :\n-                constraint.getString(JsonFormConstants.ERR);\n-        Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n-        Matcher matcher = pattern.matcher(ex);\n-        if (matcher.find()) {\n-            String functionName = matcher.group(1);\n-            String b = matcher.group(2);\n-            String[] args = getFunctionArgs(b, value);\n+                    infoDialog(mediatype, medialink, mediatext);\n+                }\n+            } catch (Exception e) {\n+                Timber.e(e, \"JsonFormActivity --> mediaDialog\");\n+            }\n+        }\n+\n+        private void infoDialog (String mediatype, String medialink, String mediatext){\n+            final FancyAlertDialog.Builder builder = new FancyAlertDialog.Builder(this);\n+            builder.setTitle(\"Info\");\n+            builder.setBackgroundColor(Color.parseColor(\"#208CC5\"))\n+                    .setPositiveBtnBackground(Color.parseColor(\"#208CC5\"))  //Don't pass R\n+                    // .color.colorvalue\n+                    .setPositiveBtnText(\"OK\").setAnimation(Animation.SLIDE).isCancellable(true)\n+                    .setIcon(com.shashank.sony.fancydialoglib.R.drawable.ic_person_black_24dp, Icon.Visible);\n+            builder.setMessage(mediatext);\n+            if (mediatype.equalsIgnoreCase(\"image\")) {\n+                builder.setImagetoshow(medialink);\n+            } else if (mediatype.equalsIgnoreCase(\"video\")) {\n+                builder.setVideopath(medialink);\n+            }\n+            builder.build();\n+        }\n+\n+        /**\n+         * This method checks whether a constraint has been enforced and returns an error message if not The error message should\n+         * be displayable to the user\n+         *\n+         * @param value      {@link String} The value to be checked\n+         * @param view       {@link View} The value to be checked\n+         * @param constraint {@link JSONObject} The constraint expression to use\n+         * @return An error message if constraint has not been enforced or NULL if constraint enforced\n+         * @throws Exception\n+         */\n+        private String enforceConstraint (String value, View view, JSONObject constraint) throws\n+        Exception {\n+\n+            String type = constraint.getString(\"type\").toLowerCase();\n+            String ex = constraint.getString(JsonFormConstants.EX);\n+            String errorMessage = type.equals(JsonFormConstants.NUMBER_SELECTOR) ? constraint.optString(JsonFormConstants.ERR) :\n+                    constraint.getString(JsonFormConstants.ERR);\n+            Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n+            Matcher matcher = pattern.matcher(ex);\n+            if (matcher.find()) {\n+                String functionName = matcher.group(1);\n+                String b = matcher.group(2);\n+                String[] args = getFunctionArgs(b, value);\n+\n+                boolean viewDoesNotHaveValue = TextUtils.isEmpty(value);\n+                if (view instanceof CheckBox) {\n+                    viewDoesNotHaveValue = !((CheckBox) view).isChecked();\n+                } else if (isNumberSelectorConstraint(view) || isDatePickerNativeRadio(view)) {\n+                    return args.length > 1 ? args[1] : \"\";//clever fix to pass back the max value for number selectors\n \n-            boolean viewDoesNotHaveValue = TextUtils.isEmpty(value);\n-            if (view instanceof CheckBox) {\n-                viewDoesNotHaveValue = !((CheckBox) view).isChecked();\n-            } else if (isNumberSelectorConstraint(view) || isDatePickerNativeRadio(view)) {\n-                return args.length > 1 ? args[1] : \"\";//clever fix to pass back the max value for number selectors\n+                }\n \n+                if (checkViewValues(type, functionName, args, viewDoesNotHaveValue)) return null;\n+            } else {\n+                Timber.d(\"Matcher didn't work with function\");\n             }\n \n-            if (checkViewValues(type, functionName, args, viewDoesNotHaveValue)) return null;\n-        } else {\n-            Timber.d(\"Matcher didn't work with function\");\n+            return errorMessage;\n         }\n \n-        return errorMessage;\n-    }\n-\n-    private boolean checkViewValues(String type, String functionName, String[] args, boolean viewDoesNotHaveValue) {\n-        return viewDoesNotHaveValue || TextUtils.isEmpty(args[0]) || TextUtils.isEmpty(args[1]) ||\n-                comparisons.get(functionName).compare(args[0], type, args[1]);\n-    }\n+        private boolean checkViewValues (String type, String functionName, String[]args,\n+        boolean viewDoesNotHaveValue){\n+            return viewDoesNotHaveValue || TextUtils.isEmpty(args[0]) || TextUtils.isEmpty(args[1]) ||\n+                    comparisons.get(functionName).compare(args[0], type, args[1]);\n+        }\n \n-    private String enforceConstraint(Facts curValueMap, JSONObject constraint) throws Exception {\n-        return curValueMap.asMap().size() == 0 ? \"0\" : getRulesEngineFactory().getConstraint(curValueMap,\n-                constraint.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).getString(RuleConstant.RULES_FILE));\n-    }\n+        private String enforceConstraint (Facts curValueMap, JSONObject constraint) throws Exception\n+        {\n+            return curValueMap.asMap().size() == 0 ? \"0\" : getRulesEngineFactory().getConstraint(curValueMap,\n+                    constraint.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).getString(RuleConstant.RULES_FILE));\n+        }\n \n-    private boolean isNumberSelectorConstraint(View view) {\n-        return JsonFormConstants.NUMBER_SELECTOR.equals(view.getTag(R.id.type));\n-    }\n+        private boolean isNumberSelectorConstraint (View view){\n+            return JsonFormConstants.NUMBER_SELECTOR.equals(view.getTag(R.id.type));\n+        }\n \n-    private boolean isDatePickerNativeRadio(View view) {\n-        return JsonFormConstants.NATIVE_RADIO_BUTTON.equals(view.getTag(R.id.type));\n-    }\n+        private boolean isDatePickerNativeRadio (View view){\n+            return JsonFormConstants.NATIVE_RADIO_BUTTON.equals(view.getTag(R.id.type));\n+        }\n \n-    protected JSONArray fetchFields(JSONObject parentJson, boolean popup) {\n-        JSONArray fields = new JSONArray();\n-        try {\n-            if (parentJson.has(JsonFormConstants.SECTIONS) &&\n-                    parentJson.get(JsonFormConstants.SECTIONS) instanceof JSONArray) {\n-                JSONArray sections = parentJson.getJSONArray(JsonFormConstants.SECTIONS);\n-                for (int i = 0; i < sections.length(); i++) {\n-                    JSONObject sectionJson = sections.getJSONObject(i);\n-                    fields = returnFormWithSectionFields(sectionJson, popup);\n+        protected JSONArray fetchFields (JSONObject parentJson,boolean popup){\n+            JSONArray fields = new JSONArray();\n+            try {\n+                if (parentJson.has(JsonFormConstants.SECTIONS) &&\n+                        parentJson.get(JsonFormConstants.SECTIONS) instanceof JSONArray) {\n+                    JSONArray sections = parentJson.getJSONArray(JsonFormConstants.SECTIONS);\n+                    for (int i = 0; i < sections.length(); i++) {\n+                        JSONObject sectionJson = sections.getJSONObject(i);\n+                        fields = returnFormWithSectionFields(sectionJson, popup);\n+                    }\n+                } else if (parentJson.has(JsonFormConstants.FIELDS) &&\n+                        parentJson.get(JsonFormConstants.FIELDS) instanceof JSONArray) {\n+                    fields = returnWithFormFields(parentJson, popup);\n+                }\n+            } catch (JSONException e) {\n+                Timber.e(e, \"JsonFormActivity --> fetchFields\");\n+            }\n+\n+            return fields;\n+        }\n+\n+        /**\n+         * Get form fields from JSON forms that have sections in the form steps. The JSONObject {@link JSONObject} argument is\n+         * the object after getting the section in the specified step name The popup {@link Boolean} argument is a boolean value\n+         * to let the function know that the form is being executed on a popup and not the main android view.\n+         * <p>\n+         * This function returns a JSONArray {@link JSONArray} of the fields contained in the section for the given step\n+         *\n+         * @param sectionJson\n+         * @param popup\n+         * @return\n+         * @throws JSONException\n+         * @author dubdabasoduba\n+         */\n+        protected JSONArray returnFormWithSectionFields (JSONObject sectionJson,boolean popup) throws\n+        JSONException {\n+            JSONArray fields = new JSONArray();\n+            if (sectionJson.has(JsonFormConstants.FIELDS)) {\n+                if (popup) {\n+                    JSONArray jsonArray = sectionJson.getJSONArray(JsonFormConstants.FIELDS);\n+                    for (int k = 0; k < jsonArray.length(); k++) {\n+                        JSONObject item = jsonArray.getJSONObject(k);\n+                        if (genericDialogInterface != null &&\n+                                item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n+                            fields = formUtils.concatArray(fields, specifyFields(item));\n+                        }\n+                    }\n+                } else {\n+                    fields = formUtils.concatArray(fields, sectionJson.getJSONArray(JsonFormConstants.FIELDS));\n                 }\n-            } else if (parentJson.has(JsonFormConstants.FIELDS) &&\n-                    parentJson.get(JsonFormConstants.FIELDS) instanceof JSONArray) {\n-                fields = returnWithFormFields(parentJson, popup);\n             }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"JsonFormActivity --> fetchFields\");\n-        }\n-\n-        return fields;\n-    }\n-\n-    /**\n-     * Get form fields from JSON forms that have sections in the form steps. The JSONObject {@link JSONObject} argument is\n-     * the object after getting the section in the specified step name The popup {@link Boolean} argument is a boolean value\n-     * to let the function know that the form is being executed on a popup and not the main android view.\n-     * <p>\n-     * This function returns a JSONArray {@link JSONArray} of the fields contained in the section for the given step\n-     *\n-     * @param sectionJson\n-     * @param popup\n-     * @return\n-     * @throws JSONException\n-     * @author dubdabasoduba\n-     */\n-    protected JSONArray returnFormWithSectionFields(JSONObject sectionJson, boolean popup) throws JSONException {\n-        JSONArray fields = new JSONArray();\n-        if (sectionJson.has(JsonFormConstants.FIELDS)) {\n+            return fields;\n+        }\n+\n+        /**\n+         * Get the form fields for the JSON forms that do not use the sections in the steps The JSONObject {@link JSONObject}\n+         * argument is the object after getting the step name The popup {@link boolean} argument is a boolean value to let the\n+         * function know that the form is being executed on a popup and not the main android view.\n+         * <p>\n+         * This function returns a JSONArray {@link JSONArray} of the fields contained in the step\n+         *\n+         * @param parentJson\n+         * @param popup\n+         * @return fields\n+         * @throws JSONException\n+         * @author dubdabasoduba\n+         */\n+        protected JSONArray returnWithFormFields (JSONObject parentJson,boolean popup) throws\n+        JSONException {\n+            JSONArray fields = new JSONArray();\n             if (popup) {\n-                JSONArray jsonArray = sectionJson.getJSONArray(JsonFormConstants.FIELDS);\n+                JSONArray jsonArray = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n                 for (int k = 0; k < jsonArray.length(); k++) {\n                     JSONObject item = jsonArray.getJSONObject(k);\n                     if (genericDialogInterface != null &&\n                             item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n-                        fields = formUtils.concatArray(fields, specifyFields(item));\n+                        fields = specifyFields(item);\n                     }\n                 }\n             } else {\n-                fields = formUtils.concatArray(fields, sectionJson.getJSONArray(JsonFormConstants.FIELDS));\n+                fields = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n             }\n-        }\n-        return fields;\n-    }\n \n-    /**\n-     * Get the form fields for the JSON forms that do not use the sections in the steps The JSONObject {@link JSONObject}\n-     * argument is the object after getting the step name The popup {@link boolean} argument is a boolean value to let the\n-     * function know that the form is being executed on a popup and not the main android view.\n-     * <p>\n-     * This function returns a JSONArray {@link JSONArray} of the fields contained in the step\n-     *\n-     * @param parentJson\n-     * @param popup\n-     * @return fields\n-     * @throws JSONException\n-     * @author dubdabasoduba\n-     */\n-    protected JSONArray returnWithFormFields(JSONObject parentJson, boolean popup) throws JSONException {\n-        JSONArray fields = new JSONArray();\n-        if (popup) {\n-            JSONArray jsonArray = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n-            for (int k = 0; k < jsonArray.length(); k++) {\n-                JSONObject item = jsonArray.getJSONObject(k);\n-                if (genericDialogInterface != null &&\n-                        item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n-                    fields = specifyFields(item);\n-                }\n-            }\n-        } else {\n-            fields = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n+            return fields;\n         }\n \n-        return fields;\n-    }\n-\n-    protected JSONArray specifyFields(JSONObject parentJson) {\n-        JSONArray fields = new JSONArray();\n-        if (genericDialogInterface != null && genericDialogInterface.getWidgetType() != null &&\n-                genericDialogInterface.getWidgetType().equals(JsonFormConstants.EXPANSION_PANEL)) {\n-            if (parentJson.has(JsonFormConstants.CONTENT_FORM)) {\n-                fields = returnFields(parentJson);\n-            }\n-        } else {\n-            if (parentJson.has(JsonFormConstants.HAS_EXTRA_REL)) {\n-                String optionKey;\n-                try {\n-                    optionKey = (String) parentJson.get(JsonFormConstants.HAS_EXTRA_REL);\n-                    JSONArray options = parentJson.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n-                    if (options.length() > 0) {\n-                        for (int j = 0; j < options.length(); j++) {\n-                            JSONObject jsonObject = options.getJSONObject(j);\n-                            String objectKey = (String) jsonObject.get(JsonFormConstants.KEY);\n-                            if (objectKey.equals(optionKey) && jsonObject.has(JsonFormConstants.CONTENT_FORM)) {\n-                                fields = returnFields(jsonObject);\n+        protected JSONArray specifyFields (JSONObject parentJson){\n+            JSONArray fields = new JSONArray();\n+            if (genericDialogInterface != null && genericDialogInterface.getWidgetType() != null &&\n+                    genericDialogInterface.getWidgetType().equals(JsonFormConstants.EXPANSION_PANEL)) {\n+                if (parentJson.has(JsonFormConstants.CONTENT_FORM)) {\n+                    fields = returnFields(parentJson);\n+                }\n+            } else {\n+                if (parentJson.has(JsonFormConstants.HAS_EXTRA_REL)) {\n+                    String optionKey;\n+                    try {\n+                        optionKey = (String) parentJson.get(JsonFormConstants.HAS_EXTRA_REL);\n+                        JSONArray options = parentJson.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n+                        if (options.length() > 0) {\n+                            for (int j = 0; j < options.length(); j++) {\n+                                JSONObject jsonObject = options.getJSONObject(j);\n+                                String objectKey = (String) jsonObject.get(JsonFormConstants.KEY);\n+                                if (objectKey.equals(optionKey) && jsonObject.has(JsonFormConstants.CONTENT_FORM)) {\n+                                    fields = returnFields(jsonObject);\n+                                }\n                             }\n                         }\n+                    } catch (JSONException e) {\n+                        Timber.e(e, \"JsonFormActivity --> specifyFields\");\n                     }\n-                } catch (JSONException e) {\n-                    Timber.e(e, \"JsonFormActivity --> specifyFields\");\n                 }\n             }\n+            return fields;\n         }\n-        return fields;\n-    }\n \n-    private JSONArray returnFields(JSONObject jsonObject) {\n-        JSONArray fields = new JSONArray();\n-        try {\n-            if (getExtraFieldsWithValues() != null) {\n-                fields = getExtraFieldsWithValues();\n-            } else {\n-                String formLocation = jsonObject.has(JsonFormConstants.CONTENT_FORM_LOCATION) ? jsonObject.getString(JsonFormConstants.CONTENT_FORM_LOCATION) : \"\";\n-                fields = getSubFormFields(jsonObject.get(JsonFormConstants.CONTENT_FORM).toString(), formLocation, fields);\n+        private JSONArray returnFields (JSONObject jsonObject){\n+            JSONArray fields = new JSONArray();\n+            try {\n+                if (getExtraFieldsWithValues() != null) {\n+                    fields = getExtraFieldsWithValues();\n+                } else {\n+                    String formLocation = jsonObject.has(JsonFormConstants.CONTENT_FORM_LOCATION) ? jsonObject.getString(JsonFormConstants.CONTENT_FORM_LOCATION) : \"\";\n+                    fields = getSubFormFields(jsonObject.get(JsonFormConstants.CONTENT_FORM).toString(), formLocation, fields);\n+                }\n+            } catch (JSONException e) {\n+                Timber.e(e, \"JsonFormActivity --> returnFields\");\n             }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"JsonFormActivity --> returnFields\");\n+            return fields;\n         }\n-        return fields;\n-    }\n \n-    protected JSONArray getSubFormFields(String subFormName, String subFormLocation, JSONArray fields) {\n-        JSONArray fieldArray = new JSONArray();\n-        JSONObject jsonObject = null;\n-        try {\n-            jsonObject = FormUtils.getSubFormJson(subFormName, subFormLocation, getApplicationContext(), translateForm);\n-        } catch (Exception e) {\n-            Timber.e(e);\n-        }\n-        if (jsonObject != null) {\n+        protected JSONArray getSubFormFields (String subFormName, String subFormLocation, JSONArray\n+        fields){\n+            JSONArray fieldArray = new JSONArray();\n+            JSONObject jsonObject = null;\n             try {\n-                JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.CONTENT_FORM);\n-                if (jsonArray != null && jsonArray.length() > 0) {\n-                    fieldArray = formUtils.concatArray(fields, jsonArray);\n+                jsonObject = FormUtils.getSubFormJson(subFormName, subFormLocation, getApplicationContext(), translateForm);\n+            } catch (Exception e) {\n+                Timber.e(e);\n+            }\n+            if (jsonObject != null) {\n+                try {\n+                    JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.CONTENT_FORM);\n+                    if (jsonArray != null && jsonArray.length() > 0) {\n+                        fieldArray = formUtils.concatArray(fields, jsonArray);\n+                    }\n+                } catch (JSONException e) {\n+                    Timber.e(e, \"JsonFormActivity --> getSubFormFields\");\n                 }\n-            } catch (JSONException e) {\n-                Timber.e(e, \"JsonFormActivity --> getSubFormFields\");\n             }\n+\n+            return fieldArray;\n         }\n \n-        return fieldArray;\n-    }\n+        public Form getForm () {\n+            return form;\n+        }\n \n-    public Form getForm() {\n-        return form;\n-    }\n+        private boolean isRelevant (Facts curValueMap, JSONObject curRelevance) throws Exception {\n+            if (curRelevance != null) {\n+                if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_RULES)) {\n \n-    private boolean isRelevant(Facts curValueMap, JSONObject curRelevance) throws Exception {\n-        if (curRelevance != null) {\n-            if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_RULES)) {\n+                    JSONObject exRulesObject = curRelevance.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n \n-                JSONObject exRulesObject = curRelevance.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n+                    if (exRulesObject.has(RuleConstant.RULES_FILE)) {\n \n-                if (exRulesObject.has(RuleConstant.RULES_FILE)) {\n+                        return curValueMap.asMap().size() != 0 && getRulesEngineFactory().getRelevance(curValueMap,\n+                                exRulesObject.getString(RuleConstant.RULES_FILE));\n \n-                    return curValueMap.asMap().size() != 0 && getRulesEngineFactory().getRelevance(curValueMap,\n-                            exRulesObject.getString(RuleConstant.RULES_FILE));\n+                    } else if (exRulesObject.has(RuleConstant.RULES_DYNAMIC)) {\n \n-                } else if (exRulesObject.has(RuleConstant.RULES_DYNAMIC)) {\n+                        return curValueMap.asMap().size() != 0 && getRulesEngineFactory()\n+                                .getDynamicRelevance(curValueMap, exRulesObject.optJSONArray(RuleConstant.RULES_DYNAMIC));\n \n-                    return curValueMap.asMap().size() != 0 && getRulesEngineFactory()\n-                            .getDynamicRelevance(curValueMap, exRulesObject.optJSONArray(RuleConstant.RULES_DYNAMIC));\n+                    }\n \n-                }\n+                } else if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX)) {\n+                    JSONArray exArray = curRelevance.getJSONArray(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX);\n \n-            } else if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX)) {\n-                JSONArray exArray = curRelevance.getJSONArray(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX);\n+                    for (int i = 0; i < exArray.length(); i++) {\n+                        ExObjectResult exObjectResult = isExObjectRelevant(curValueMap, exArray.getJSONObject(i));\n+                        if (exObjectResult.isRelevant()) {\n+                            return true;\n+                        } else if (!exObjectResult.isRelevant() && exObjectResult.isFinal()) {\n+                            return false;\n+                        }\n \n-                for (int i = 0; i < exArray.length(); i++) {\n-                    ExObjectResult exObjectResult = isExObjectRelevant(curValueMap, exArray.getJSONObject(i));\n-                    if (exObjectResult.isRelevant()) {\n-                        return true;\n-                    } else if (!exObjectResult.isRelevant() && exObjectResult.isFinal()) {\n-                        return false;\n                     }\n-\n+                    return false;\n+                } else {\n+                    String curValue = String.valueOf(curValueMap.get(JsonFormConstants.VALUE));\n+                    return doComparison(curValue != null ? curValue : \"\", curRelevance);\n                 }\n-                return false;\n-            } else {\n-                String curValue = String.valueOf(curValueMap.get(JsonFormConstants.VALUE));\n-                return doComparison(curValue != null ? curValue : \"\", curRelevance);\n             }\n+            return false;\n         }\n-        return false;\n-    }\n \n-    private ExObjectResult isExObjectRelevant(Facts curValueMap, JSONObject object) throws Exception {\n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.NOT)) {\n-            JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.NOT);\n+        private ExObjectResult isExObjectRelevant (Facts curValueMap, JSONObject object) throws\n+        Exception {\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.NOT)) {\n+                JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.NOT);\n \n-            for (int i = 0; i < orArray.length(); i++) {\n-                String curValue = curValueMap.get(orArray.getString(i));\n+                for (int i = 0; i < orArray.length(); i++) {\n+                    String curValue = curValueMap.get(orArray.getString(i));\n \n-                if (curValue != null && !Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(true, false);\n-                } else {\n-                    return new ExObjectResult(false, true);\n+                    if (curValue != null && !Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(true, false);\n+                    } else {\n+                        return new ExObjectResult(false, true);\n+                    }\n                 }\n             }\n-        }\n \n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.OR)) {\n-            JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.OR);\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.OR)) {\n+                JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.OR);\n+\n+                for (int i = 0; i < orArray.length(); i++) {\n+                    String curValue = curValueMap.get(orArray.getString(i));\n+                    if (curValue != null && Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(true, true);\n+                    }\n \n-            for (int i = 0; i < orArray.length(); i++) {\n-                String curValue = curValueMap.get(orArray.getString(i));\n-                if (curValue != null && Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(true, true);\n                 }\n \n             }\n \n-        }\n-\n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.AND)) {\n-            JSONArray andArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.AND);\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.AND)) {\n+                JSONArray andArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.AND);\n \n-            for (int i = 0; i < andArray.length(); i++) {\n-                String curValue = curValueMap.get(andArray.getString(i));\n-                if (curValue != null && !Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(false, false);\n+                for (int i = 0; i < andArray.length(); i++) {\n+                    String curValue = curValueMap.get(andArray.getString(i));\n+                    if (curValue != null && !Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(false, false);\n+                    }\n                 }\n+                return new ExObjectResult(true, false);\n+\n             }\n-            return new ExObjectResult(true, false);\n \n+            return new ExObjectResult(false, false);\n         }\n \n-        return new ExObjectResult(false, false);\n-    }\n-\n-    private List<String> getRules(String filename, String fieldKey) {\n-        List<String> rules = ruleKeys.get(filename + \":\" + fieldKey);\n+        private List<String> getRules (String filename, String fieldKey){\n+            List<String> rules = ruleKeys.get(filename + \":\" + fieldKey);\n \n-        if (rules == null) {\n-            try {\n-                Yaml yaml = new Yaml();\n-                InputStreamReader inputStreamReader = new InputStreamReader(\n-                        this.getAssets().open((getRulesEngineFactory().getRulesFolderPath() + filename)));\n-                Iterable<Object> ruleObjects = yaml.loadAll(inputStreamReader);\n+            if (rules == null) {\n+                try {\n+                    Yaml yaml = new Yaml();\n+                    InputStreamReader inputStreamReader = new InputStreamReader(\n+                            this.getAssets().open((getRulesEngineFactory().getRulesFolderPath() + filename)));\n+                    Iterable<Object> ruleObjects = yaml.loadAll(inputStreamReader);\n \n-                for (Object object : ruleObjects) {\n+                    for (Object object : ruleObjects) {\n \n-                    Map<String, Object> map = ((Map<String, Object>) object);\n+                        Map<String, Object> map = ((Map<String, Object>) object);\n \n-                    String name = map.get(RuleConstant.NAME).toString();\n-                    if (ruleKeys.containsKey(filename + \":\" + name)) {\n-                        continue;\n-                    }\n+                        String name = map.get(RuleConstant.NAME).toString();\n+                        if (ruleKeys.containsKey(filename + \":\" + name)) {\n+                            continue;\n+                        }\n \n-                    List<String> actions = new ArrayList<>();\n+                        List<String> actions = new ArrayList<>();\n \n-                    StringBuilder conditionString = new StringBuilder();\n-                    conditionString.append(map.get(RuleConstant.CONDITION).toString());\n+                        StringBuilder conditionString = new StringBuilder();\n+                        conditionString.append(map.get(RuleConstant.CONDITION).toString());\n \n-                    List<String> fields = (List<String>) map.get(RuleConstant.ACTIONS);\n-                    if (fields != null) {\n-                        for (String field : fields) {\n-                            if (field.trim().startsWith(RuleConstant.CALCULATION) ||\n-                                    field.trim().startsWith(RuleConstant.CONSTRAINT)) {\n-                                conditionString.append(\" \" + field);\n+                        List<String> fields = (List<String>) map.get(RuleConstant.ACTIONS);\n+                        if (fields != null) {\n+                            for (String field : fields) {\n+                                if (field.trim().startsWith(RuleConstant.CALCULATION) ||\n+                                        field.trim().startsWith(RuleConstant.CONSTRAINT)) {\n+                                    conditionString.append(\" \" + field);\n+                                }\n                             }\n+\n                         }\n \n-                    }\n+                        actions.addAll(getConditionKeys(conditionString.toString()));\n+                        ruleKeys.put(filename + \":\" + name, actions);\n \n-                    actions.addAll(getConditionKeys(conditionString.toString()));\n-                    ruleKeys.put(filename + \":\" + name, actions);\n+                        if (name.equals(fieldKey)) {\n+                            break;\n+                        }\n \n-                    if (name.equals(fieldKey)) {\n-                        break;\n                     }\n \n+                } catch (Exception e) {\n+                    Timber.e(e, \"JsonFormActivity --> getRules\");\n                 }\n \n-            } catch (Exception e) {\n-                Timber.e(e, \"JsonFormActivity --> getRules\");\n+                return ruleKeys.get(filename + \":\" + fieldKey);\n+            } else {\n+                return rules;\n             }\n+        }\n \n-            return ruleKeys.get(filename + \":\" + fieldKey);\n-        } else {\n-            return rules;\n+        private List<String> getConditionKeys (String condition){\n+            return Utils.getConditionKeys(condition);\n         }\n-    }\n \n-    private List<String> getConditionKeys(String condition) {\n-        return Utils.getConditionKeys(condition);\n-    }\n+        private void updateCalculation (Facts valueMap, View view, String[]address){\n+            String calculation;\n+            try {\n+                if (address[0].equals(RuleConstant.RULES_DYNAMIC)) {\n+                    calculation = getRulesEngineFactory().getDynamicCalculation(valueMap, new JSONArray(address[1]));\n+                } else {\n+                    calculation = getRulesEngineFactory().getCalculation(valueMap, address[1]);\n+                }\n \n-    private void updateCalculation(Facts valueMap, View view, String[] address) {\n-        String calculation;\n-        try {\n-            if (address[0].equals(RuleConstant.RULES_DYNAMIC)) {\n-                calculation = getRulesEngineFactory().getDynamicCalculation(valueMap, new JSONArray(address[1]));\n-            } else {\n-                calculation = getRulesEngineFactory().getCalculation(valueMap, address[1]);\n-            }\n+                if (calculation != null) {\n+                    if (view instanceof CheckBox) {\n+                        //For now were only handling checkbox titles only\n+                        TextView checkboxLabel = ((View) view.getParent().getParent()).findViewById(R.id.label_text);\n+                        if (checkboxLabel != null) {\n+                            checkboxLabel.setText(getRenderText(calculation, checkboxLabel.getTag(R.id.original_text).toString(), false));\n+                        }\n \n-            if (calculation != null) {\n-                if (view instanceof CheckBox) {\n-                    //For now were only handling checkbox titles only\n-                    TextView checkboxLabel = ((View) view.getParent().getParent()).findViewById(R.id.label_text);\n-                    if (checkboxLabel != null) {\n-                        checkboxLabel.setText(getRenderText(calculation, checkboxLabel.getTag(R.id.original_text).toString(), false));\n-                    }\n+                    } else if (view instanceof TextableView) {\n+                        TextableView textView = ((TextableView) view);\n+                        if (!TextUtils.isEmpty(calculation)) {\n+                            CharSequence spanned = calculation.charAt(0) == '{' ? getRenderText(calculation, textView.getTag(R.id.original_text).toString(), true) :\n+                                    (textView.getTag(R.id.original_text) != null && \"0\".equals(calculation)) ? textView.getTag(R.id.original_text).toString() : calculation;\n+                            textView.setText(spanned);\n+                        }\n+                    } else if (view instanceof EditText) {\n+                        String type = (String) view.getTag(R.id.type);\n+                        if (JsonFormConstants.HIDDEN.equals(type) && TextUtils.isEmpty(calculation)) {\n+                            calculation = \"0\";\n+                        }\n \n-                } else if (view instanceof TextableView) {\n-                    TextableView textView = ((TextableView) view);\n-                    if (!TextUtils.isEmpty(calculation)) {\n-                        CharSequence spanned = calculation.charAt(0) == '{' ? getRenderText(calculation, textView.getTag(R.id.original_text).toString(), true) :\n-                                (textView.getTag(R.id.original_text) != null && \"0\".equals(calculation)) ? textView.getTag(R.id.original_text).toString() : calculation;\n-                        textView.setText(spanned);\n-                    }\n-                } else if (view instanceof EditText) {\n-                    String type = (String) view.getTag(R.id.type);\n-                    if (JsonFormConstants.HIDDEN.equals(type) && TextUtils.isEmpty(calculation)) {\n-                        calculation = \"0\";\n-                    }\n+                        if (!TextUtils.isEmpty(calculation)) {\n+                            ((EditText) view).setText(calculation);\n+                        }\n \n-                    if (!TextUtils.isEmpty(calculation)) {\n-                        ((EditText) view).setText(calculation);\n+                    } else if (view instanceof RadioGroup) {\n+                        setRadioButtonCalculation((RadioGroup) view, calculation);\n+\n+                    } else if (view instanceof LinearLayout) {\n+                        LinearLayout linearLayout = (LinearLayout) view;\n+                        String type = (String) linearLayout.getTag(R.id.type);\n+                        if (JsonFormConstants.NUMBER_SELECTOR.equals(type)) {\n+                            setNumberSelectorCalculation(calculation, linearLayout);\n+                        }\n+                    } else {\n+                        ((TextView) view).setText(calculation);\n                     }\n+                }\n+            } catch (Exception e) {\n+                Timber.e(e, \"calling updateCalculation on Non TextView or Text View decendant\");\n+            }\n \n-                } else if (view instanceof RadioGroup) {\n-                    setRadioButtonCalculation((RadioGroup) view, calculation);\n+        }\n \n-                } else if (view instanceof LinearLayout) {\n-                    LinearLayout linearLayout = (LinearLayout) view;\n-                    String type = (String) linearLayout.getTag(R.id.type);\n-                    if (JsonFormConstants.NUMBER_SELECTOR.equals(type)) {\n-                        setNumberSelectorCalculation(calculation, linearLayout);\n+        private void setRadioButtonCalculation ( final RadioGroup view, final String calculation){\n+            int count = view.getChildCount();\n+            for (int i = 0; i < count; i++) {\n+                final int childPosition = i;\n+                runOnUiThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        addRadioButtonCalculation(calculation, view, childPosition);\n                     }\n-                } else {\n-                    ((TextView) view).setText(calculation);\n-                }\n+                });\n             }\n-        } catch (Exception e) {\n-            Timber.e(e, \"calling updateCalculation on Non TextView or Text View decendant\");\n         }\n \n-    }\n+        private void addRadioButtonCalculation (String calculation, RadioGroup view,\n+        int childPosition){\n+            if (!TextUtils.isEmpty(calculation)) {\n+                RelativeLayout radioButtonLayout = (RelativeLayout) view.getChildAt(childPosition);\n+                int radioButtonViewId = (int) radioButtonLayout.getTag(R.id.native_radio_button_view_id);\n+                RadioButton radioButton = radioButtonLayout.findViewById(radioButtonViewId);\n+                boolean showExtraInfo = (boolean) radioButton.getTag(R.id.native_radio_button_extra_info);\n+                String radioButtonKey = (String) radioButton.getTag(R.id.childKey);\n \n-    private void setRadioButtonCalculation(final RadioGroup view, final String calculation) {\n-        int count = view.getChildCount();\n-        for (int i = 0; i < count; i++) {\n-            final int childPosition = i;\n-            runOnUiThread(new Runnable() {\n-                @Override\n-                public void run() {\n-                    addRadioButtonCalculation(calculation, view, childPosition);\n+                if (!TextUtils.isEmpty(radioButtonKey) && calculation.equals(radioButtonKey)) {\n+                    radioButton.setChecked(true);\n+                    radioButton.performClick();\n                 }\n-            });\n-        }\n-    }\n-\n-    private void addRadioButtonCalculation(String calculation, RadioGroup view, int childPosition) {\n-        if (!TextUtils.isEmpty(calculation)) {\n-            RelativeLayout radioButtonLayout = (RelativeLayout) view.getChildAt(childPosition);\n-            int radioButtonViewId = (int) radioButtonLayout.getTag(R.id.native_radio_button_view_id);\n-            RadioButton radioButton = radioButtonLayout.findViewById(radioButtonViewId);\n-            boolean showExtraInfo = (boolean) radioButton.getTag(R.id.native_radio_button_extra_info);\n-            String radioButtonKey = (String) radioButton.getTag(R.id.childKey);\n \n-            if (!TextUtils.isEmpty(radioButtonKey) && calculation.equals(radioButtonKey)) {\n-                radioButton.setChecked(true);\n-                radioButton.performClick();\n-            }\n+                if (showExtraInfo) {\n+                    CustomTextView renderView = view.getChildAt(childPosition).findViewById(R.id.extraInfoTextView);\n \n-            if (showExtraInfo) {\n-                CustomTextView renderView = view.getChildAt(childPosition).findViewById(R.id.extraInfoTextView);\n+                    if (renderView.getTag(R.id.original_text) == null) {\n+                        renderView.setTag(R.id.original_text, renderView.getText());\n+                    }\n \n-                if (renderView.getTag(R.id.original_text) == null) {\n-                    renderView.setTag(R.id.original_text, renderView.getText());\n-                }\n \n+                    if (!TextUtils.isEmpty(calculation)) {\n+                        renderView.setText(calculation.charAt(0) == '{' ? getRenderText(calculation, renderView.getTag(R.id.original_text).toString(), false) : calculation);\n+                    }\n \n-                if (!TextUtils.isEmpty(calculation)) {\n-                    renderView.setText(calculation.charAt(0) == '{' ? getRenderText(calculation, renderView.getTag(R.id.original_text).toString(), false) : calculation);\n+                    renderView.setVisibility(renderView.getText().toString().contains(\"{\") ||\n+                            renderView.getText().toString().equals(\"0\") ? View.GONE : View.VISIBLE);\n                 }\n-\n-                renderView.setVisibility(renderView.getText().toString().contains(\"{\") ||\n-                        renderView.getText().toString().equals(\"0\") ? View.GONE : View.VISIBLE);\n             }\n         }\n-    }\n \n-    private void setNumberSelectorCalculation(String calculation, LinearLayout linearLayout) {\n-        if (!TextUtils.isEmpty(calculation)) {\n-            int childCount = linearLayout.getChildCount();\n-            for (int i = 0; i < childCount; i++) {\n-                if (linearLayout.getChildAt(i) instanceof TextView) {\n-                    TextView textView = (TextView) linearLayout.getChildAt(i);\n-                    String text = textView.getText().toString();\n-                    CommonListener commonListener =\n-                            (CommonListener) textView.getTag(R.id.number_selector_listener);\n+        private void setNumberSelectorCalculation (String calculation, LinearLayout linearLayout){\n+            if (!TextUtils.isEmpty(calculation)) {\n+                int childCount = linearLayout.getChildCount();\n+                for (int i = 0; i < childCount; i++) {\n+                    if (linearLayout.getChildAt(i) instanceof TextView) {\n+                        TextView textView = (TextView) linearLayout.getChildAt(i);\n+                        String text = textView.getText().toString();\n+                        CommonListener commonListener =\n+                                (CommonListener) textView.getTag(R.id.number_selector_listener);\n \n-                    String selectedNumber = \"\";\n-                    if (selectedTextView != null) {\n-                        selectedNumber = selectedTextView.getText().toString();\n-                    }\n+                        String selectedNumber = \"\";\n+                        if (selectedTextView != null) {\n+                            selectedNumber = selectedTextView.getText().toString();\n+                        }\n \n-                    if (i + 1 == childCount) {\n-                        String[] splitValue = text.split(\"\");\n-                        if (splitValue.length > 2) {\n-                            String value = splitValue[1];\n+                        if (i + 1 == childCount) {\n+                            String[] splitValue = text.split(\"\");\n+                            if (splitValue.length > 2) {\n+                                String value = splitValue[1];\n \n-                            if (Integer.valueOf(calculation) > Integer.valueOf(value)) {\n-                                if (!calculation.equals(selectedNumber)) {\n-                                    textView.setText(calculation);\n-                                    textView.setOnClickListener(commonListener);\n-                                    textView.performClick();\n+                                if (Integer.valueOf(calculation) > Integer.valueOf(value)) {\n+                                    if (!calculation.equals(selectedNumber)) {\n+                                        textView.setText(calculation);\n+                                        textView.setOnClickListener(commonListener);\n+                                        textView.performClick();\n+                                    }\n+                                } else {\n+                                    selectNumber(calculation, textView, value, commonListener);\n                                 }\n-                            } else {\n-                                selectNumber(calculation, textView, value, commonListener);\n                             }\n+                        } else {\n+                            selectNumber(calculation, textView, text, commonListener);\n                         }\n-                    } else {\n-                        selectNumber(calculation, textView, text, commonListener);\n                     }\n                 }\n             }\n         }\n-    }\n \n-    private void selectNumber(String calculation, TextView textView, String text, CommonListener commonListener) {\n-        if (calculation.equals(text) && !textView.equals(selectedTextView)) {\n-            selectedTextView = textView;\n-            textView.setOnClickListener(commonListener);\n-            textView.performClick();\n+        private void selectNumber (String calculation, TextView textView, String\n+        text, CommonListener commonListener){\n+            if (calculation.equals(text) && !textView.equals(selectedTextView)) {\n+                selectedTextView = textView;\n+                textView.setOnClickListener(commonListener);\n+                textView.performClick();\n+            }\n         }\n-    }\n \n-    private CharSequence getRenderText(String calculation, String textTemplate, boolean makeBold) {\n-        Map<String, Object> valueMap = new Gson().fromJson(calculation, new TypeToken<HashMap<String, Object>>() {\n-        }.getType());\n-        return stringFormat(textTemplate, valueMap, makeBold);\n-    }\n+        private CharSequence getRenderText (String calculation, String textTemplate,boolean makeBold)\n+        {\n+            Map<String, Object> valueMap = new Gson().fromJson(calculation, new TypeToken<HashMap<String, Object>>() {\n+            }.getType());\n+            return stringFormat(textTemplate, valueMap, makeBold);\n+        }\n \n-    public Spanned stringFormat(String string, Map<String, Object> valueMap, boolean makeBold) {\n-        String resString = string;\n-        for (Map.Entry<String, Object> entry : valueMap.entrySet()) {\n-            String templateValue = getTemplateValue(entry.getValue());\n-            if (makeBold) {\n-                templateValue = \"<b>\" + getTemplateValue(entry.getValue()) + \"</b>\";\n+        public Spanned stringFormat (String string, Map < String, Object > valueMap,boolean makeBold)\n+        {\n+            String resString = string;\n+            for (Map.Entry<String, Object> entry : valueMap.entrySet()) {\n+                String templateValue = getTemplateValue(entry.getValue());\n+                if (makeBold) {\n+                    templateValue = \"<b>\" + getTemplateValue(entry.getValue()) + \"</b>\";\n+                }\n+                resString = resString.replace(\"{\" + entry.getKey() + \"}\", templateValue);\n             }\n-            resString = resString.replace(\"{\" + entry.getKey() + \"}\", templateValue);\n+\n+            return Html.fromHtml(resString);\n         }\n \n-        return Html.fromHtml(resString);\n-    }\n+        protected Object getValue (JSONObject object) throws JSONException {\n+            Object value;\n \n-    protected Object getValue(JSONObject object) throws JSONException {\n-        Object value;\n+            if (object.has(JsonFormConstants.VALUE)) {\n+                value = object.opt(JsonFormConstants.VALUE);\n \n-        if (object.has(JsonFormConstants.VALUE)) {\n-            value = object.opt(JsonFormConstants.VALUE);\n+                if (isNumberWidget(object)) {\n+                    value = TextUtils.isEmpty(object.optString(JsonFormConstants.VALUE)) ? 0 : processNumberValues(object.optString(JsonFormConstants.VALUE));\n+                } else if (value != null && !TextUtils.isEmpty(object.getString(JsonFormConstants.VALUE)) && canHaveNumber(object)) {\n+                    value = processNumberValues(value);\n+                }\n \n-            if (isNumberWidget(object)) {\n-                value = TextUtils.isEmpty(object.optString(JsonFormConstants.VALUE)) ? 0 : processNumberValues(object.optString(JsonFormConstants.VALUE));\n-            } else if (value != null && !TextUtils.isEmpty(object.getString(JsonFormConstants.VALUE)) && canHaveNumber(object)) {\n-                value = processNumberValues(value);\n+            } else {\n+                value = isNumberWidget(object) ? 0 : \"\";\n             }\n \n-        } else {\n-            value = isNumberWidget(object) ? 0 : \"\";\n+            return value;\n         }\n \n-        return value;\n-    }\n-\n-    protected Object processNumberValues(Object object) {\n-        Object jsonObject = object;\n-        try {\n-            if (jsonObject.toString().contains(\".\")) {\n-                jsonObject = String.valueOf((float) Math.round(Float.valueOf(jsonObject.toString()) * 100) / 100);\n-            } else {\n-                jsonObject = Integer.valueOf(jsonObject.toString());\n+        protected Object processNumberValues (Object object){\n+            Object jsonObject = object;\n+            try {\n+                if (jsonObject.toString().contains(\".\")) {\n+                    jsonObject = String.valueOf((float) Math.round(Float.valueOf(jsonObject.toString()) * 100) / 100);\n+                } else {\n+                    jsonObject = Integer.valueOf(jsonObject.toString());\n+                }\n+            } catch (NumberFormatException e) {\n+                //Log.e(TAG, \"Error trying to convert \" + object + \" to a number \", e);\n             }\n-        } catch (NumberFormatException e) {\n-            //Log.e(TAG, \"Error trying to convert \" + object + \" to a number \", e);\n+            return jsonObject;\n         }\n-        return jsonObject;\n-    }\n \n-    protected String getKey(JSONObject object) throws JSONException {\n-        return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n-                object.get(RuleConstant.STEP) + \"_\" + object.get(JsonFormConstants.KEY) : JsonFormConstants.VALUE;\n-    }\n+        protected String getKey (JSONObject object) throws JSONException {\n+            return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n+                    object.get(RuleConstant.STEP) + \"_\" + object.get(JsonFormConstants.KEY) : JsonFormConstants.VALUE;\n+        }\n \n-    private void clearHiddenViewsValues(JSONObject object, String addressString) {\n-        if (object != null) {\n-            String objectKey = addressString.replace(\":\", \"_\");\n-            formValuesCacheMap.remove(objectKey);\n-            formValuesCacheMap.put(objectKey, \"\");\n-            if (object.has(JsonFormConstants.VALUE)) {\n-                object.remove(JsonFormConstants.VALUE);\n+        private void clearHiddenViewsValues (JSONObject object, String addressString){\n+            if (object != null) {\n+                String objectKey = addressString.replace(\":\", \"_\");\n+                formValuesCacheMap.remove(objectKey);\n+                formValuesCacheMap.put(objectKey, \"\");\n+                if (object.has(JsonFormConstants.VALUE)) {\n+                    object.remove(JsonFormConstants.VALUE);\n+                }\n             }\n         }\n-    }\n \n-    private void updateCanvas(View view, boolean visible, JSONArray canvasViewIds, String addressString, JSONObject object)\n+        private void updateCanvas (View view,boolean visible, JSONArray canvasViewIds, String\n+        addressString, JSONObject object)\n             throws JSONException {\n-        for (int i = 0; i < canvasViewIds.length(); i++) {\n-            int curId = canvasViewIds.getInt(i);\n-            View curCanvasView = view.getRootView().findViewById(curId);\n+            for (int i = 0; i < canvasViewIds.length(); i++) {\n+                int curId = canvasViewIds.getInt(i);\n+                View curCanvasView = view.getRootView().findViewById(curId);\n \n-            if (curCanvasView == null) {\n-                continue;\n-            }\n+                if (curCanvasView == null) {\n+                    continue;\n+                }\n \n-            if (visible) {\n-                curCanvasView.setEnabled(true);\n-                curCanvasView.setVisibility(View.VISIBLE);\n+                if (visible) {\n+                    curCanvasView.setEnabled(true);\n+                    curCanvasView.setVisibility(View.VISIBLE);\n \n-                if (curCanvasView instanceof RelativeLayout || view instanceof LinearLayout) {\n-                    curCanvasView.setFocusable(true);\n-                }\n-                if (view instanceof EditText) {\n-                    view.setFocusable(true);\n+                    if (curCanvasView instanceof RelativeLayout || view instanceof LinearLayout) {\n+                        curCanvasView.setFocusable(true);\n+                    }\n+                    if (view instanceof EditText) {\n+                        view.setFocusable(true);\n+                    }\n+                } else {\n+                    clearHiddenViewsValues(object, addressString);\n+                    curCanvasView.setEnabled(false);\n+                    curCanvasView.setVisibility(View.GONE);\n+                    refreshViews(curCanvasView);\n                 }\n-            } else {\n-                clearHiddenViewsValues(object, addressString);\n-                curCanvasView.setEnabled(false);\n-                curCanvasView.setVisibility(View.GONE);\n-                refreshViews(curCanvasView);\n-            }\n \n-            curCanvasView.setTag(R.id.relevance_decided, visible);\n+                curCanvasView.setTag(R.id.relevance_decided, visible);\n \n-            if (object != null) {\n-                object.put(JsonFormConstants.IS_VISIBLE, visible);\n-                //Only keep track of required fields that are invisible\n-                if (object.has(JsonFormConstants.V_REQUIRED) && object.getJSONObject(JsonFormConstants.V_REQUIRED)\n-                        .getBoolean(JsonFormConstants.VALUE)) {\n-                    trackInvisibleFields(object, visible);\n+                if (object != null) {\n+                    object.put(JsonFormConstants.IS_VISIBLE, visible);\n+                    //Only keep track of required fields that are invisible\n+                    if (object.has(JsonFormConstants.V_REQUIRED) && object.getJSONObject(JsonFormConstants.V_REQUIRED)\n+                            .getBoolean(JsonFormConstants.VALUE)) {\n+                        trackInvisibleFields(object, visible);\n+                    }\n                 }\n             }\n         }\n-    }\n \n-    @SuppressLint(\"StaticFieldLeak\")\n-    private void trackInvisibleFields(final JSONObject object, final boolean visible) {\n-        new AsyncTask<Void, Void, Void>() {\n-            @Override\n-            protected Void doInBackground(Void... voids) {\n-                try {\n-                    synchronized (invisibleRequiredFields) {\n-                        if (visible) {\n-                            invisibleRequiredFields.remove(object.getString(JsonFormConstants.KEY));\n-                        } else {\n-                            invisibleRequiredFields.add(object.getString(JsonFormConstants.KEY));\n+        @SuppressLint(\"StaticFieldLeak\")\n+        private void trackInvisibleFields ( final JSONObject object, final boolean visible){\n+            new AsyncTask<Void, Void, Void>() {\n+                @Override\n+                protected Void doInBackground(Void... voids) {\n+                    try {\n+                        synchronized (invisibleRequiredFields) {\n+                            if (visible) {\n+                                invisibleRequiredFields.remove(object.getString(JsonFormConstants.KEY));\n+                            } else {\n+                                invisibleRequiredFields.add(object.getString(JsonFormConstants.KEY));\n+                            }\n+                            getmJSONObject().put(JsonFormConstants.INVISIBLE_REQUIRED_FIELDS, invisibleRequiredFields);\n                         }\n-                        getmJSONObject().put(JsonFormConstants.INVISIBLE_REQUIRED_FIELDS, invisibleRequiredFields);\n+                    } catch (JSONException e) {\n+                        Timber.e(e);\n                     }\n-                } catch (JSONException e) {\n-                    Timber.e(e);\n+                    return null;\n                 }\n-                return null;\n-            }\n-        }.execute();\n-    }\n-\n-    private void refreshViews(View childElement) {\n-        if (childElement instanceof ViewGroup) {\n-            childElement.setFocusable(true);\n-            ViewGroup group = (ViewGroup) childElement;\n-            refreshNumberSelector(group);\n-            for (int id = 0; id < group.getChildCount(); id++) {\n-                View child = group.getChildAt(id);\n-                if (child instanceof CheckBox) {\n-                    ((CheckBox) child).setChecked(false);\n-                } else if (child instanceof RadioButton) {\n-                    ((RadioButton) child).setChecked(false);\n-                } else if (child instanceof EditText) {\n-                    EditText editText = (EditText) child;\n-                    if (!TextUtils.isEmpty(editText.getText().toString())) {\n-                        editText.setText(\"\");\n+            }.execute();\n+        }\n+\n+        private void refreshViews (View childElement){\n+            if (childElement instanceof ViewGroup) {\n+                childElement.setFocusable(true);\n+                ViewGroup group = (ViewGroup) childElement;\n+                refreshNumberSelector(group);\n+                for (int id = 0; id < group.getChildCount(); id++) {\n+                    View child = group.getChildAt(id);\n+                    if (child instanceof CheckBox) {\n+                        ((CheckBox) child).setChecked(false);\n+                    } else if (child instanceof RadioButton) {\n+                        ((RadioButton) child).setChecked(false);\n+                    } else if (child instanceof EditText) {\n+                        EditText editText = (EditText) child;\n+                        if (!TextUtils.isEmpty(editText.getText().toString())) {\n+                            editText.setText(\"\");\n+                        }\n+                    } else if (child instanceof MaterialSpinner) {\n+                        MaterialSpinner spinner = (MaterialSpinner) child;\n+                        spinner.setSelected(false);\n+                    } else if (child instanceof CustomTextView) {\n+                        resetSelectedNumberBackground(child);\n+\n+                    } else if (child instanceof TextView && child.getId() == R.id.duration) {\n+                        // clear duration for custom date picker\n+                        ((TextView) child).setText(\"\");\n                     }\n-                } else if (child instanceof MaterialSpinner) {\n-                    MaterialSpinner spinner = (MaterialSpinner) child;\n-                    spinner.setSelected(false);\n-                } else if (child instanceof CustomTextView) {\n-                    resetSelectedNumberBackground(child);\n-\n-                } else if (child instanceof TextView && child.getId() == R.id.duration) {\n-                    // clear duration for custom date picker\n-                    ((TextView) child).setText(\"\");\n+                    refreshViews(group.getChildAt(id));\n                 }\n-                refreshViews(group.getChildAt(id));\n             }\n         }\n-    }\n \n-    private void refreshNumberSelector(View group) {\n-        //reset value for number selector linear layout\n-        if (group instanceof LinearLayout) {\n-            LinearLayout numSelectorLayout = (LinearLayout) group;\n-            if (numSelectorLayout.getTag(R.id.is_number_selector_linear_layout) != null &&\n-                    Boolean.TRUE.equals(numSelectorLayout.getTag(R.id.is_number_selector_linear_layout))) {\n-                numSelectorLayout.setTag(R.id.selected_number_value, null);\n+        private void refreshNumberSelector (View group){\n+            //reset value for number selector linear layout\n+            if (group instanceof LinearLayout) {\n+                LinearLayout numSelectorLayout = (LinearLayout) group;\n+                if (numSelectorLayout.getTag(R.id.is_number_selector_linear_layout) != null &&\n+                        Boolean.TRUE.equals(numSelectorLayout.getTag(R.id.is_number_selector_linear_layout))) {\n+                    numSelectorLayout.setTag(R.id.selected_number_value, null);\n+                }\n             }\n         }\n-    }\n \n-    /**\n-     * Resets the background of the selected text in number selector\n-     *\n-     * @param child Selected textview\n-     */\n-    private void resetSelectedNumberBackground(View child) {\n-        Drawable background = child.getBackground();\n-        if (background instanceof ColorDrawable) {\n-            int color = ((ColorDrawable) background).getColor();\n-            if (color == child.getContext().getResources().getColor(R.color.native_number_selector_selected)) {\n-                child.setBackgroundColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+        /**\n+         * Resets the background of the selected text in number selector\n+         *\n+         * @param child Selected textview\n+         */\n+        private void resetSelectedNumberBackground (View child){\n+            Drawable background = child.getBackground();\n+            if (background instanceof ColorDrawable) {\n+                int color = ((ColorDrawable) background).getColor();\n+                if (color == child.getContext().getResources().getColor(R.color.native_number_selector_selected)) {\n+                    child.setBackgroundColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+                }\n+            } else if (background instanceof GradientDrawable) {\n+                ((GradientDrawable) background)\n+                        .setColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+                child.setBackground(background);\n             }\n-        } else if (background instanceof GradientDrawable) {\n-            ((GradientDrawable) background)\n-                    .setColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n-            child.setBackground(background);\n+            ((CustomTextView) child).setTextColor(child.getContext().getResources().getColor(R.color.primary_text));\n         }\n-        ((CustomTextView) child).setTextColor(child.getContext().getResources().getColor(R.color.primary_text));\n-    }\n-\n-    public JSONArray getExtraFieldsWithValues() {\n-        return extraFieldsWithValues;\n-    }\n \n-    public void setExtraFieldsWithValues(JSONArray extraFieldsWithValues) {\n-        this.extraFieldsWithValues = extraFieldsWithValues;\n-    }\n+        public JSONArray getExtraFieldsWithValues () {\n+            return extraFieldsWithValues;\n+        }\n \n-    @Override\n-    protected void onStart() {\n-        super.onStart();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onStart();\n+        public void setExtraFieldsWithValues (JSONArray extraFieldsWithValues){\n+            this.extraFieldsWithValues = extraFieldsWithValues;\n         }\n-    }\n \n-    @Override\n-    protected void onStop() {\n-        super.onStop();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onStop();\n+        @Override\n+        protected void onStart () {\n+            super.onStart();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onStart();\n+            }\n         }\n-    }\n \n-    @Override\n-    protected void onDestroy() {\n-        super.onDestroy();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onDestroy();\n+        @Override\n+        protected void onStop () {\n+            super.onStop();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onStop();\n+            }\n         }\n-    }\n \n-    @Override\n-    public void onSaveInstanceState(Bundle outState) {\n-        super.onSaveInstanceState(outState);\n-        outState.putString(JSON_STATE, mJSONObject.toString());\n-        outState.putSerializable(FORM_STATE, form);\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onSaveInstanceState(outState);\n+        @Override\n+        protected void onDestroy () {\n+            super.onDestroy();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onDestroy();\n+            }\n         }\n-    }\n \n-    private String getTemplateValue(Object object) {\n-        StringBuilder result = new StringBuilder();\n-        if (object instanceof List) {\n-            List<String> valueList = (List<String>) object;\n-            for (int i = 0; i < valueList.size(); i++) {\n-                result.append(valueList.get(i));\n-                if (i != (valueList.size() - 1)) {\n-                    result.append(\", \");\n+        @Override\n+        public void onSaveInstanceState (Bundle outState){\n+            super.onSaveInstanceState(outState);\n+            outState.putString(JSON_STATE, mJSONObject.toString());\n+            outState.putSerializable(FORM_STATE, form);\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onSaveInstanceState(outState);\n+            }\n+        }\n+\n+        private String getTemplateValue (Object object){\n+            StringBuilder result = new StringBuilder();\n+            if (object instanceof List) {\n+                List<String> valueList = (List<String>) object;\n+                for (int i = 0; i < valueList.size(); i++) {\n+                    result.append(valueList.get(i));\n+                    if (i != (valueList.size() - 1)) {\n+                        result.append(\", \");\n+                    }\n                 }\n+            } else {\n+                result.append(\n+                        object.toString().contains(\".0\") ? object.toString().substring(0, object.toString().indexOf(\".0\")) :\n+                                object.toString()); //Fix automatic conversion float bug\n             }\n-        } else {\n-            result.append(\n-                    object.toString().contains(\".0\") ? object.toString().substring(0, object.toString().indexOf(\".0\")) :\n-                            object.toString()); //Fix automatic conversion float bug\n+\n+            return result.toString();\n         }\n \n-        return result.toString();\n-    }\n+        public LocalBroadcastManager getLocalBroadcastManager () {\n+            return localBroadcastManager;\n+        }\n \n-    public LocalBroadcastManager getLocalBroadcastManager() {\n-        return localBroadcastManager;\n-    }\n+        private void cacheFormMapValues (String stepName, String parentKey, String childKey, String\n+        value){\n+            formValuesCacheMap.put(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey, value);\n+        }\n \n-    private void cacheFormMapValues(String stepName, String parentKey, String childKey, String\n-            value) {\n-        formValuesCacheMap.put(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey, value);\n-    }\n+        private boolean invokeRefreshLogic (String stepName, String parentKey, String\n+        childKey, String value){\n+            String oldValue = formValuesCacheMap.get(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey);\n \n-    private boolean invokeRefreshLogic(String stepName, String parentKey, String\n-            childKey, String value) {\n-        String oldValue = formValuesCacheMap.get(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey);\n+            return !value.equals(oldValue);\n \n-        return !value.equals(oldValue);\n+        }\n \n-    }\n+        protected boolean canHaveNumber (JSONObject object) throws JSONException {\n+            return isNumberWidget(object) || object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) ||\n+                    object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.SPINNER);\n+        }\n \n-    protected boolean canHaveNumber(JSONObject object) throws JSONException {\n-        return isNumberWidget(object) || object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) ||\n-                object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.SPINNER);\n-    }\n+        protected boolean isNumberWidget (JSONObject object) throws JSONException {\n+            return object.has(JsonFormConstants.EDIT_TYPE) &&\n+                    object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n+                    object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n+        }\n \n-    protected boolean isNumberWidget(JSONObject object) throws JSONException {\n-        return object.has(JsonFormConstants.EDIT_TYPE) &&\n-                object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n-                object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n-    }\n+        @Subscribe(threadMode = ThreadMode.MAIN)\n+        public void refreshExpansionPanel (RefreshExpansionPanelEvent refreshExpansionPanelEvent){\n+            if (refreshExpansionPanelEvent != null) {\n+                try {\n+                    List<String> values = getExpansionPanelValues(refreshExpansionPanelEvent);\n+                    LinearLayout linearLayout = refreshExpansionPanelEvent.getLinearLayout();\n+                    utils.enableExpansionPanelViews(linearLayout);\n+\n+                    RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n+                    ImageView status = layoutHeader.findViewById(R.id.statusImageView);\n+                    formUtils.updateExpansionPanelRecyclerView(values, status, getApplicationContext());\n+\n+                    LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n+                    LinearLayout mainContentView = contentLayout.findViewById(R.id.contentView);\n+                    formUtils.addValuesDisplay(values, mainContentView, getApplicationContext());\n+\n+                    LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n+                    Button undoButton = buttonLayout.findViewById(R.id.undo_button);\n+                    if (values.size() > 0) {\n+                        undoButton.setVisibility(View.VISIBLE);\n+                        contentLayout.setVisibility(View.VISIBLE);\n+                        buttonLayout.setVisibility(View.VISIBLE);\n+                    } else {\n+                        undoButton.setVisibility(View.GONE);\n+                        contentLayout.setVisibility(View.GONE);\n+                        buttonLayout.setVisibility(View.GONE);\n+                        status.setImageDrawable(this.getResources().getDrawable(R.drawable.icon_task_256));\n+                    }\n \n-    @Subscribe(threadMode = ThreadMode.MAIN)\n-    public void refreshExpansionPanel(RefreshExpansionPanelEvent refreshExpansionPanelEvent) {\n-        if (refreshExpansionPanelEvent != null) {\n-            try {\n-                List<String> values = getExpansionPanelValues(refreshExpansionPanelEvent);\n-                LinearLayout linearLayout = refreshExpansionPanelEvent.getLinearLayout();\n-                utils.enableExpansionPanelViews(linearLayout);\n-\n-                RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n-                ImageView status = layoutHeader.findViewById(R.id.statusImageView);\n-                formUtils.updateExpansionPanelRecyclerView(values, status, getApplicationContext());\n-\n-                LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n-                LinearLayout mainContentView = contentLayout.findViewById(R.id.contentView);\n-                formUtils.addValuesDisplay(values, mainContentView, getApplicationContext());\n-\n-                LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n-                Button undoButton = buttonLayout.findViewById(R.id.undo_button);\n-                if (values.size() > 0) {\n-                    undoButton.setVisibility(View.VISIBLE);\n-                    contentLayout.setVisibility(View.VISIBLE);\n-                    buttonLayout.setVisibility(View.VISIBLE);\n-                } else {\n-                    undoButton.setVisibility(View.GONE);\n-                    contentLayout.setVisibility(View.GONE);\n-                    buttonLayout.setVisibility(View.GONE);\n-                    status.setImageDrawable(this.getResources().getDrawable(R.drawable.icon_task_256));\n+                } catch (JSONException e) {\n+                    Timber.e(e, \"JsonFormActivity --> refreshExpansionPanel\");\n                 }\n-\n-            } catch (JSONException e) {\n-                Timber.e(e, \"JsonFormActivity --> refreshExpansionPanel\");\n             }\n         }\n-    }\n \n-    /**\n-     * Get the expansion panel values from the Refresh Expansion panel event {@link RefreshExpansionPanelEvent}\n-     *\n-     * @param refreshExpansionPanelEvent {@link RefreshExpansionPanelEvent}\n-     * @return values {@link List<String>}\n-     * @throws JSONException\n-     */\n-    private List<String> getExpansionPanelValues(RefreshExpansionPanelEvent refreshExpansionPanelEvent) throws JSONException {\n-        List<String> values;\n-        if (refreshExpansionPanelEvent.getValues() != null) {\n-            values = utils.createExpansionPanelChildren(refreshExpansionPanelEvent.getValues());\n-        } else {\n-            values = new ArrayList<>();\n+        /**\n+         * Get the expansion panel values from the Refresh Expansion panel event {@link RefreshExpansionPanelEvent}\n+         *\n+         * @param refreshExpansionPanelEvent {@link RefreshExpansionPanelEvent}\n+         * @return values {@link List<String>}\n+         * @throws JSONException\n+         */\n+        private List<String> getExpansionPanelValues (RefreshExpansionPanelEvent\n+        refreshExpansionPanelEvent) throws JSONException {\n+            List<String> values;\n+            if (refreshExpansionPanelEvent.getValues() != null) {\n+                values = utils.createExpansionPanelChildren(refreshExpansionPanelEvent.getValues());\n+            } else {\n+                values = new ArrayList<>();\n+            }\n+            return values;\n         }\n-        return values;\n-    }\n-}\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2Njk5MQ==", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/421#discussion_r422066991", "bodyText": "Same as the above case", "author": "owais-vd", "createdAt": "2020-05-08T10:24:49Z", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "diffHunk": "@@ -1033,6 +1038,30 @@ private void setReadOnlyAndFocus(View view, boolean visible, boolean popup) {\n         }\n     }\n \n+    /**\n+     * Gets the {@link AppCompatRadioButton} views on the whole {@link com.vijay.jsonwizard.widgets.NativeRadioButtonFactory} and updates the enabled status\n+     *\n+     * @param view    {@link View}\n+     * @param enabled {@link Boolean}\n+     */\n+    private void setReadOnlyRadioButtonOptions(View view, boolean enabled) {\n+        if (view != null) {\n+            for (int i = 0; i < ((RadioGroup) view).getChildCount(); i++) {\n+                RelativeLayout relativeLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n+                if (relativeLayout != null) {\n+                    LinearLayout linearLayout = (LinearLayout) (relativeLayout).getChildAt(0);\n+                    if (linearLayout != null) {\n+                        LinearLayout linearLayout1 = (LinearLayout) (linearLayout).getChildAt(0);\n+                        if (linearLayout1 != null) {", "originalCommit": "8d4b3ebb8686383765f8d62d5062cb08d4c20a0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cacc36927562c8df4d22ee480804a3b415757233", "chunk": "diff --git a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\nindex 5a5fc1ea..a1448eca 100644\n--- a/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\n+++ b/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java\n\n@@ -1046,1145 +1046,1157 @@ public class JsonFormActivity extends JsonFormBaseActivity implements JsonApi {\n      */\n     private void setReadOnlyRadioButtonOptions(View view, boolean enabled) {\n         if (view != null) {\n-            for (int i = 0; i < ((RadioGroup) view).getChildCount(); i++) {\n-                RelativeLayout relativeLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n-                if (relativeLayout != null) {\n-                    LinearLayout linearLayout = (LinearLayout) (relativeLayout).getChildAt(0);\n-                    if (linearLayout != null) {\n-                        LinearLayout linearLayout1 = (LinearLayout) (linearLayout).getChildAt(0);\n-                        if (linearLayout1 != null) {\n-                            AppCompatRadioButton appCompatRadioButton = (AppCompatRadioButton) (linearLayout1).getChildAt(0);\n-                            appCompatRadioButton.setEnabled(enabled);\n-                        }\n-                    }\n+            try {\n+                int viewChildrenCount = ((RadioGroup) view).getChildCount();\n+                for (int i = 0; i < viewChildrenCount; i++) {\n+                    RelativeLayout radioGroupChildLayout = (RelativeLayout) ((RadioGroup) view).getChildAt(i);\n+                    LinearLayout linearLayout = (LinearLayout) (radioGroupChildLayout).getChildAt(0);\n+                    LinearLayout radioButtonMainLayout = (LinearLayout) (linearLayout).getChildAt(0);\n+                    AppCompatRadioButton appCompatRadioButton = (AppCompatRadioButton) (radioButtonMainLayout).getChildAt(0);\n+                    appCompatRadioButton.setEnabled(enabled);\n                 }\n+            } catch (ClassCastException e) {\n+                Timber.e(e, \" --> setReadOnlyRadioButtonOptions\");\n             }\n         }\n-    }\n \n-    private void checkViewConstraints(View curView, boolean popup) {\n-        String constraintTag = (String) curView.getTag(R.id.constraints);\n-        String widgetKey = (String) curView.getTag(R.id.key);\n-        String stepName = ((String) curView.getTag(R.id.address)).split(\":\")[0];\n-        if (constraintTag != null && constraintTag.length() > 0) {\n-            try {\n+        private void checkViewConstraints (View curView,boolean popup){\n+            String constraintTag = (String) curView.getTag(R.id.constraints);\n+            String widgetKey = (String) curView.getTag(R.id.key);\n+            String stepName = ((String) curView.getTag(R.id.address)).split(\":\")[0];\n+            if (constraintTag != null && constraintTag.length() > 0) {\n+                try {\n \n-                String errorMessage = null;\n-                String[] address = null;\n+                    String errorMessage = null;\n+                    String[] address = null;\n \n-                if (constraintTag.charAt(0) == '[') {\n-                    String addressString = (String) curView.getTag(R.id.address);\n-                    address = addressString.split(\":\");\n+                    if (constraintTag.charAt(0) == '[') {\n+                        String addressString = (String) curView.getTag(R.id.address);\n+                        address = addressString.split(\":\");\n \n-                    JSONArray constraint = new JSONArray(constraintTag);\n-                    for (int i = 0; i < constraint.length(); i++) {\n-                        JSONObject curConstraint = constraint.getJSONObject(i);\n-                        if (address.length == 2) {\n-                            String value = String.valueOf(getValueFromAddress(address, popup).get(JsonFormConstants.VALUE));\n-                            errorMessage = enforceConstraint(value, curView, curConstraint);\n-                            if (errorMessage != null) break;\n+                        JSONArray constraint = new JSONArray(constraintTag);\n+                        for (int i = 0; i < constraint.length(); i++) {\n+                            JSONObject curConstraint = constraint.getJSONObject(i);\n+                            if (address.length == 2) {\n+                                String value = String.valueOf(getValueFromAddress(address, popup).get(JsonFormConstants.VALUE));\n+                                errorMessage = enforceConstraint(value, curView, curConstraint);\n+                                if (errorMessage != null) break;\n+                            }\n                         }\n-                    }\n \n-                } else {\n-                    //Rules Engine\n-                    JSONObject constraint = new JSONObject(constraintTag);\n-                    Iterator<String> keys = constraint.keys();\n-                    while (keys.hasNext()) {\n-                        String curKey = keys.next();\n-                        JSONObject curConstraint = constraint.getJSONObject(curKey);\n+                    } else {\n+                        //Rules Engine\n+                        JSONObject constraint = new JSONObject(constraintTag);\n+                        Iterator<String> keys = constraint.keys();\n+                        while (keys.hasNext()) {\n+                            String curKey = keys.next();\n+                            JSONObject curConstraint = constraint.getJSONObject(curKey);\n \n \n-                        address = getAddressFromMap(widgetKey, stepName, JsonFormConstants.CONSTRAINTS);\n-                        if (address == null) {\n-                            address = getAddress(curView, curKey, curConstraint, JsonFormConstants.CONSTRAINTS);\n+                            address = getAddressFromMap(widgetKey, stepName, JsonFormConstants.CONSTRAINTS);\n+                            if (address == null) {\n+                                address = getAddress(curView, curKey, curConstraint, JsonFormConstants.CONSTRAINTS);\n+                            }\n+                            Facts curValueMap = getValueFromAddress(address, popup);\n+                            errorMessage = enforceConstraint(curValueMap, curConstraint);\n+                            if (errorMessage != null) break;\n                         }\n-                        Facts curValueMap = getValueFromAddress(address, popup);\n-                        errorMessage = enforceConstraint(curValueMap, curConstraint);\n-                        if (errorMessage != null) break;\n                     }\n-                }\n \n-                if (errorMessage != null) {\n-                    if (curView instanceof MaterialEditText) {\n-                        ((MaterialEditText) curView).setText(null);\n-                        ((MaterialEditText) curView).setError(errorMessage);\n-                    } else if (curView instanceof CheckBox) {\n-                        ((CheckBox) curView).setChecked(false);\n-                        Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();\n-                        String checkBoxKey = (String) curView.getTag(R.id.childKey);\n-\n-                        JSONObject questionObject = getObjectUsingAddress(address, popup);\n-                        for (int i = 0;\n-                             i < questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).length(); i++) {\n-                            JSONObject curOption =\n-                                    questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).getJSONObject(i);\n-                            if (curOption.getString(JsonFormConstants.KEY).equals(checkBoxKey)) {\n-                                curOption.put(JsonFormConstants.VALUE, \"false\");\n-                                break;\n+                    if (errorMessage != null) {\n+                        if (curView instanceof MaterialEditText) {\n+                            ((MaterialEditText) curView).setText(null);\n+                            ((MaterialEditText) curView).setError(errorMessage);\n+                        } else if (curView instanceof CheckBox) {\n+                            ((CheckBox) curView).setChecked(false);\n+                            Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();\n+                            String checkBoxKey = (String) curView.getTag(R.id.childKey);\n+\n+                            JSONObject questionObject = getObjectUsingAddress(address, popup);\n+                            for (int i = 0;\n+                                 i < questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).length(); i++) {\n+                                JSONObject curOption =\n+                                        questionObject.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME).getJSONObject(i);\n+                                if (curOption.getString(JsonFormConstants.KEY).equals(checkBoxKey)) {\n+                                    curOption.put(JsonFormConstants.VALUE, \"false\");\n+                                    break;\n+                                }\n+                            }\n+                        } else if (curView.getTag(R.id.type).toString().equals(JsonFormConstants.NUMBER_SELECTOR) &&\n+                                !TextUtils.isEmpty(errorMessage) &&\n+                                (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n+\n+                            if (!\"false\".equals(errorMessage)) {\n+                                Intent localIntent = new Intent(JsonFormConstants.INTENT_ACTION.NUMBER_SELECTOR_FACTORY);\n+                                localIntent.putExtra(JsonFormConstants.MAX_SELECTION_VALUE, Integer.valueOf(errorMessage));\n+                                localIntent.putExtra(JsonFormConstants.JSON_OBJECT_KEY, curView.getTag(R.id.key).toString());\n+                                localIntent.putExtra(JsonFormConstants.STEPNAME, address[0]);\n+                                localIntent.putExtra(JsonFormConstants.IS_POPUP, popup);\n+                                localBroadcastManager.sendBroadcast(localIntent);\n+                                curView.setTag(R.id.previous, errorMessage); //Store value to avoid re-fires\n                             }\n-                        }\n-                    } else if (curView.getTag(R.id.type).toString().equals(JsonFormConstants.NUMBER_SELECTOR) &&\n-                            !TextUtils.isEmpty(errorMessage) &&\n-                            (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n-\n-                        if (!\"false\".equals(errorMessage)) {\n-                            Intent localIntent = new Intent(JsonFormConstants.INTENT_ACTION.NUMBER_SELECTOR_FACTORY);\n-                            localIntent.putExtra(JsonFormConstants.MAX_SELECTION_VALUE, Integer.valueOf(errorMessage));\n-                            localIntent.putExtra(JsonFormConstants.JSON_OBJECT_KEY, curView.getTag(R.id.key).toString());\n-                            localIntent.putExtra(JsonFormConstants.STEPNAME, address[0]);\n-                            localIntent.putExtra(JsonFormConstants.IS_POPUP, popup);\n-                            localBroadcastManager.sendBroadcast(localIntent);\n-                            curView.setTag(R.id.previous, errorMessage); //Store value to avoid re-fires\n-                        }\n \n \n-                    } else if (curView instanceof RadioGroup &&\n-                            curView.getTag(R.id.type).toString().equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n-                            !TextUtils.isEmpty(errorMessage) &&\n-                            (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n+                        } else if (curView instanceof RadioGroup &&\n+                                curView.getTag(R.id.type).toString().equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n+                                !TextUtils.isEmpty(errorMessage) &&\n+                                (curView.getTag(R.id.previous) == null || !curView.getTag(R.id.previous).equals(errorMessage))) {\n \n-                        JSONObject jsonObject = (JSONObject) curView.getTag(R.id.json_object);\n-                        JSONObject jsonObjectNew = new JSONObject(errorMessage);\n-                        Iterator<String> keys = jsonObjectNew.keys();\n+                            JSONObject jsonObject = (JSONObject) curView.getTag(R.id.json_object);\n+                            JSONObject jsonObjectNew = new JSONObject(errorMessage);\n+                            Iterator<String> keys = jsonObjectNew.keys();\n \n-                        while (keys.hasNext()) {\n-                            String key = keys.next();\n-                            jsonObject.put(key, jsonObjectNew.getString(key));\n-                        }\n+                            while (keys.hasNext()) {\n+                                String key = keys.next();\n+                                jsonObject.put(key, jsonObjectNew.getString(key));\n+                            }\n \n+                        }\n                     }\n+                } catch (Exception e) {\n+                    Timber.e(e, \"JsonFormActivity --> checkViewConstraints\");\n                 }\n-            } catch (Exception e) {\n-                Timber.e(e, \"JsonFormActivity --> checkViewConstraints\");\n             }\n         }\n-    }\n \n-    private Facts getValueFromAddress(String[] address, boolean popup, JSONObject valueSource) throws Exception {\n-        JSONObject object = getObjectUsingAddress(address, popup, valueSource);\n-        return getEntries(address, object);\n-    }\n+        private Facts getValueFromAddress (String[]address,boolean popup, JSONObject valueSource) throws\n+        Exception {\n+            JSONObject object = getObjectUsingAddress(address, popup, valueSource);\n+            return getEntries(address, object);\n+        }\n \n-    private Facts getValueFromAddress(String[] address, boolean popup) throws Exception {\n-        JSONObject object = getObjectUsingAddress(address, popup);\n-        return getEntries(address, object);\n-    }\n+        private Facts getValueFromAddress (String[]address,boolean popup) throws Exception {\n+            JSONObject object = getObjectUsingAddress(address, popup);\n+            return getEntries(address, object);\n+        }\n \n-    private Facts getEntries(String[] address, JSONObject object) throws JSONException {\n-        Facts result = new Facts();\n-        if (object != null) {\n-            //reset the rules check value\n-            object.put(RuleConstant.IS_RULE_CHECK, false);\n-            if (object.has(RuleConstant.RESULT)) {\n-                JSONArray jsonArray = object.getJSONArray(RuleConstant.RESULT);\n+        private Facts getEntries (String[]address, JSONObject object) throws JSONException {\n+            Facts result = new Facts();\n+            if (object != null) {\n+                //reset the rules check value\n+                object.put(RuleConstant.IS_RULE_CHECK, false);\n+                if (object.has(RuleConstant.RESULT)) {\n+                    JSONArray jsonArray = object.getJSONArray(RuleConstant.RESULT);\n \n-                for (int i = 0; i < jsonArray.length(); i++) {\n-                    JSONObject formObject = jsonArray.getJSONObject(i);\n+                    for (int i = 0; i < jsonArray.length(); i++) {\n+                        JSONObject formObject = jsonArray.getJSONObject(i);\n \n-                    formObject.put(RuleConstant.IS_RULE_CHECK, true);\n-                    formObject.put(RuleConstant.STEP, formObject.getString(RuleConstant.STEP));\n+                        formObject.put(RuleConstant.IS_RULE_CHECK, true);\n+                        formObject.put(RuleConstant.STEP, formObject.getString(RuleConstant.STEP));\n \n-                    result.asMap().putAll(getValueFromAddressCore(formObject).asMap());\n-                }\n+                        result.asMap().putAll(getValueFromAddressCore(formObject).asMap());\n+                    }\n \n-                result.put(RuleConstant.SELECTED_RULE, address[2]);\n-            } else {\n-                result = getValueFromAddressCore(object);\n+                    result.put(RuleConstant.SELECTED_RULE, address[2]);\n+                } else {\n+                    result = getValueFromAddressCore(object);\n+                }\n             }\n+            return result;\n         }\n-        return result;\n-    }\n \n-    protected Facts getValueFromAddressCore(JSONObject object) throws JSONException {\n-        Facts result = new Facts();\n+        protected Facts getValueFromAddressCore (JSONObject object) throws JSONException {\n+            Facts result = new Facts();\n \n-        if (object != null && object.has(JsonFormConstants.TYPE)) {\n-            switch (object.getString(JsonFormConstants.TYPE)) {\n-                case JsonFormConstants.CHECK_BOX:\n-                    result = formUtils.getCheckBoxResults(object);\n-                    break;\n-                case JsonFormConstants.NATIVE_RADIO_BUTTON:\n-                case JsonFormConstants.EXTENDED_RADIO_BUTTON:\n-                    boolean multiRelevance = object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false);\n-                    result = formUtils.getRadioButtonResults(multiRelevance, object);\n-                    break;\n-                default:\n-                    result.put(getKey(object), getValue(object));\n-                    break;\n-            }\n+            if (object != null && object.has(JsonFormConstants.TYPE)) {\n+                switch (object.getString(JsonFormConstants.TYPE)) {\n+                    case JsonFormConstants.CHECK_BOX:\n+                        result = formUtils.getCheckBoxResults(object);\n+                        break;\n+                    case JsonFormConstants.NATIVE_RADIO_BUTTON:\n+                    case JsonFormConstants.EXTENDED_RADIO_BUTTON:\n+                        boolean multiRelevance = object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false);\n+                        result = formUtils.getRadioButtonResults(multiRelevance, object);\n+                        break;\n+                    default:\n+                        result.put(getKey(object), getValue(object));\n+                        break;\n+                }\n \n-            if (object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) &&\n-                    (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.CHECK_BOX) ||\n-                            (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n-                                    object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false)))) {\n-                List<String> selectedValues = new ArrayList<>(result.asMap().keySet());\n-                result = new Facts();\n-                result.put(getKey(object), selectedValues);\n+                if (object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) &&\n+                        (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.CHECK_BOX) ||\n+                                (object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NATIVE_RADIO_BUTTON) &&\n+                                        object.optBoolean(JsonFormConstants.NATIVE_RADIO_BUTTON_MULTI_RELEVANCE, false)))) {\n+                    List<String> selectedValues = new ArrayList<>(result.asMap().keySet());\n+                    result = new Facts();\n+                    result.put(getKey(object), selectedValues);\n+                }\n             }\n+            return result;\n         }\n-        return result;\n-    }\n \n-    private void initComparisons() {\n-        if (comparisons == null) {\n-            functionRegex = \"\";\n-            comparisons = new HashMap<>();\n+        private void initComparisons () {\n+            if (comparisons == null) {\n+                functionRegex = \"\";\n+                comparisons = new HashMap<>();\n \n-            LessThanComparison lessThanComparison = new LessThanComparison();\n-            functionRegex += lessThanComparison.getFunctionName();\n-            comparisons.put(lessThanComparison.getFunctionName(), lessThanComparison);\n+                LessThanComparison lessThanComparison = new LessThanComparison();\n+                functionRegex += lessThanComparison.getFunctionName();\n+                comparisons.put(lessThanComparison.getFunctionName(), lessThanComparison);\n \n-            LessThanEqualToComparison lessThanEqualToComparison = new LessThanEqualToComparison();\n-            functionRegex += \"|\" + lessThanEqualToComparison.getFunctionName();\n-            comparisons.put(lessThanEqualToComparison.getFunctionName(), lessThanEqualToComparison);\n+                LessThanEqualToComparison lessThanEqualToComparison = new LessThanEqualToComparison();\n+                functionRegex += \"|\" + lessThanEqualToComparison.getFunctionName();\n+                comparisons.put(lessThanEqualToComparison.getFunctionName(), lessThanEqualToComparison);\n \n-            EqualToComparison equalToComparison = new EqualToComparison();\n-            functionRegex += \"|\" + equalToComparison.getFunctionName();\n-            comparisons.put(equalToComparison.getFunctionName(), equalToComparison);\n+                EqualToComparison equalToComparison = new EqualToComparison();\n+                functionRegex += \"|\" + equalToComparison.getFunctionName();\n+                comparisons.put(equalToComparison.getFunctionName(), equalToComparison);\n \n-            NotEqualToComparison notEqualToComparer = new NotEqualToComparison();\n-            functionRegex += \"|\" + notEqualToComparer.getFunctionName();\n-            comparisons.put(notEqualToComparer.getFunctionName(), notEqualToComparer);\n+                NotEqualToComparison notEqualToComparer = new NotEqualToComparison();\n+                functionRegex += \"|\" + notEqualToComparer.getFunctionName();\n+                comparisons.put(notEqualToComparer.getFunctionName(), notEqualToComparer);\n \n-            GreaterThanComparison greaterThanComparison = new GreaterThanComparison();\n-            functionRegex += \"|\" + greaterThanComparison.getFunctionName();\n-            comparisons.put(greaterThanComparison.getFunctionName(), greaterThanComparison);\n+                GreaterThanComparison greaterThanComparison = new GreaterThanComparison();\n+                functionRegex += \"|\" + greaterThanComparison.getFunctionName();\n+                comparisons.put(greaterThanComparison.getFunctionName(), greaterThanComparison);\n \n-            GreaterThanEqualToComparison greaterThanEqualToComparison = new GreaterThanEqualToComparison();\n-            functionRegex += \"|\" + greaterThanEqualToComparison.getFunctionName();\n-            comparisons.put(greaterThanEqualToComparison.getFunctionName(), greaterThanEqualToComparison);\n+                GreaterThanEqualToComparison greaterThanEqualToComparison = new GreaterThanEqualToComparison();\n+                functionRegex += \"|\" + greaterThanEqualToComparison.getFunctionName();\n+                comparisons.put(greaterThanEqualToComparison.getFunctionName(), greaterThanEqualToComparison);\n \n-            RegexComparison regexComparison = new RegexComparison();\n-            functionRegex += \"|\" + regexComparison.getFunctionName();\n-            comparisons.put(regexComparison.getFunctionName(), regexComparison);\n+                RegexComparison regexComparison = new RegexComparison();\n+                functionRegex += \"|\" + regexComparison.getFunctionName();\n+                comparisons.put(regexComparison.getFunctionName(), regexComparison);\n+            }\n         }\n-    }\n \n-    private boolean doComparison(String value, JSONObject comparison) throws Exception {\n-        String type = comparison.getString(JsonFormConstants.TYPE).toLowerCase();\n-        String ex = comparison.getString(JsonFormConstants.EX);\n+        private boolean doComparison (String value, JSONObject comparison) throws Exception {\n+            String type = comparison.getString(JsonFormConstants.TYPE).toLowerCase();\n+            String ex = comparison.getString(JsonFormConstants.EX);\n \n-        Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n-        Matcher matcher = pattern.matcher(ex);\n-        if (matcher.find()) {\n-            String functionName = matcher.group(1);\n-            String b = matcher.group(\n-                    2);//functions arguments should be two, and should either be addresses or values (enclosed using \"\")\n-            String[] args = getFunctionArgs(b, value);\n-            return comparisons.get(functionName).compare(args[0], type, args[1]);\n-        }\n+            Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n+            Matcher matcher = pattern.matcher(ex);\n+            if (matcher.find()) {\n+                String functionName = matcher.group(1);\n+                String b = matcher.group(\n+                        2);//functions arguments should be two, and should either be addresses or values (enclosed using \"\")\n+                String[] args = getFunctionArgs(b, value);\n+                return comparisons.get(functionName).compare(args[0], type, args[1]);\n+            }\n \n-        return false;\n-    }\n+            return false;\n+        }\n \n-    private String[] getFunctionArgs(String functionArgs, String value) {\n-        String[] args = new String[2];\n-        String[] splitArgs = functionArgs.split(\",\");\n-        if (splitArgs.length == 2) {\n-            Pattern valueRegex = Pattern.compile(\"\\\"(.*)\\\"\");\n-            for (int i = 0; i < splitArgs.length; i++) {\n-                String curArg = splitArgs[i].trim();\n+        private String[] getFunctionArgs (String functionArgs, String value){\n+            String[] args = new String[2];\n+            String[] splitArgs = functionArgs.split(\",\");\n+            if (splitArgs.length == 2) {\n+                Pattern valueRegex = Pattern.compile(\"\\\"(.*)\\\"\");\n+                for (int i = 0; i < splitArgs.length; i++) {\n+                    String curArg = splitArgs[i].trim();\n \n-                if (\".\".equals(curArg)) {\n-                    args[i] = value;\n-                } else {\n-                    Matcher valueMatcher = valueRegex.matcher(curArg);\n-                    if (valueMatcher.find()) {\n-                        args[i] = valueMatcher.group(1);\n+                    if (\".\".equals(curArg)) {\n+                        args[i] = value;\n                     } else {\n-                        try {\n-                            args[i] = String.valueOf(\n-                                    getValueFromAddress(curArg.split(\":\"), false).get(JsonFormConstants.VALUE));\n-                        } catch (Exception e) {\n-                            Timber.e(e, \"JsonFormActivity --> getFunctionArgs\");\n+                        Matcher valueMatcher = valueRegex.matcher(curArg);\n+                        if (valueMatcher.find()) {\n+                            args[i] = valueMatcher.group(1);\n+                        } else {\n+                            try {\n+                                args[i] = String.valueOf(\n+                                        getValueFromAddress(curArg.split(\":\"), false).get(JsonFormConstants.VALUE));\n+                            } catch (Exception e) {\n+                                Timber.e(e, \"JsonFormActivity --> getFunctionArgs\");\n+                            }\n                         }\n                     }\n                 }\n             }\n-        }\n \n-        return args;\n-    }\n+            return args;\n+        }\n \n-    protected void refreshMediaLogic(String key, String value) {\n-        try {\n-            JSONObject object = getStep(JsonFormConstants.STEP1);\n-            JSONArray fields = object.getJSONArray(\"fields\");\n-            for (int i = 0; i < fields.length(); i++) {\n-                JSONObject questionGroup = fields.getJSONObject(i);\n-                if ((questionGroup.has(\"key\") && questionGroup.has(\"has_media_content\")) &&\n-                        (questionGroup.getString(\"key\").equalsIgnoreCase(key)) &&\n-                        (questionGroup.getBoolean(\"has_media_content\"))) {\n-                    JSONArray medias = questionGroup.getJSONArray(\"media\");\n-                    for (int j = 0; j < medias.length(); j++) {\n-                        JSONObject media = medias.getJSONObject(j);\n-                        mediaDialog(media, value);\n+        protected void refreshMediaLogic (String key, String value){\n+            try {\n+                JSONObject object = getStep(JsonFormConstants.STEP1);\n+                JSONArray fields = object.getJSONArray(\"fields\");\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject questionGroup = fields.getJSONObject(i);\n+                    if ((questionGroup.has(\"key\") && questionGroup.has(\"has_media_content\")) &&\n+                            (questionGroup.getString(\"key\").equalsIgnoreCase(key)) &&\n+                            (questionGroup.getBoolean(\"has_media_content\"))) {\n+                        JSONArray medias = questionGroup.getJSONArray(\"media\");\n+                        for (int j = 0; j < medias.length(); j++) {\n+                            JSONObject media = medias.getJSONObject(j);\n+                            mediaDialog(media, value);\n+                        }\n                     }\n                 }\n+            } catch (Exception e) {\n+                Timber.e(e, \"JsonFormActivity --> refreshMediaLogic\");\n             }\n-        } catch (Exception e) {\n-            Timber.e(e, \"JsonFormActivity --> refreshMediaLogic\");\n-        }\n-    }\n-\n-    public void mediaDialog(JSONObject media, String value) {\n-        try {\n-            if (media.getString(\"media_trigger_value\").equalsIgnoreCase(value)) {\n-                String mediatype = media.getString(\"media_type\");\n-                String medialink = media.getString(\"media_link\");\n-                String mediatext = media.getString(\"media_text\");\n-\n-                infoDialog(mediatype, medialink, mediatext);\n-            }\n-        } catch (Exception e) {\n-            Timber.e(e, \"JsonFormActivity --> mediaDialog\");\n         }\n-    }\n \n-    private void infoDialog(String mediatype, String medialink, String mediatext) {\n-        final FancyAlertDialog.Builder builder = new FancyAlertDialog.Builder(this);\n-        builder.setTitle(\"Info\");\n-        builder.setBackgroundColor(Color.parseColor(\"#208CC5\"))\n-                .setPositiveBtnBackground(Color.parseColor(\"#208CC5\"))  //Don't pass R\n-                // .color.colorvalue\n-                .setPositiveBtnText(\"OK\").setAnimation(Animation.SLIDE).isCancellable(true)\n-                .setIcon(com.shashank.sony.fancydialoglib.R.drawable.ic_person_black_24dp, Icon.Visible);\n-        builder.setMessage(mediatext);\n-        if (mediatype.equalsIgnoreCase(\"image\")) {\n-            builder.setImagetoshow(medialink);\n-        } else if (mediatype.equalsIgnoreCase(\"video\")) {\n-            builder.setVideopath(medialink);\n-        }\n-        builder.build();\n-    }\n-\n-    /**\n-     * This method checks whether a constraint has been enforced and returns an error message if not The error message should\n-     * be displayable to the user\n-     *\n-     * @param value      {@link String} The value to be checked\n-     * @param view       {@link View} The value to be checked\n-     * @param constraint {@link JSONObject} The constraint expression to use\n-     * @return An error message if constraint has not been enforced or NULL if constraint enforced\n-     * @throws Exception\n-     */\n-    private String enforceConstraint(String value, View view, JSONObject constraint) throws Exception {\n+        public void mediaDialog (JSONObject media, String value){\n+            try {\n+                if (media.getString(\"media_trigger_value\").equalsIgnoreCase(value)) {\n+                    String mediatype = media.getString(\"media_type\");\n+                    String medialink = media.getString(\"media_link\");\n+                    String mediatext = media.getString(\"media_text\");\n \n-        String type = constraint.getString(\"type\").toLowerCase();\n-        String ex = constraint.getString(JsonFormConstants.EX);\n-        String errorMessage = type.equals(JsonFormConstants.NUMBER_SELECTOR) ? constraint.optString(JsonFormConstants.ERR) :\n-                constraint.getString(JsonFormConstants.ERR);\n-        Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n-        Matcher matcher = pattern.matcher(ex);\n-        if (matcher.find()) {\n-            String functionName = matcher.group(1);\n-            String b = matcher.group(2);\n-            String[] args = getFunctionArgs(b, value);\n+                    infoDialog(mediatype, medialink, mediatext);\n+                }\n+            } catch (Exception e) {\n+                Timber.e(e, \"JsonFormActivity --> mediaDialog\");\n+            }\n+        }\n+\n+        private void infoDialog (String mediatype, String medialink, String mediatext){\n+            final FancyAlertDialog.Builder builder = new FancyAlertDialog.Builder(this);\n+            builder.setTitle(\"Info\");\n+            builder.setBackgroundColor(Color.parseColor(\"#208CC5\"))\n+                    .setPositiveBtnBackground(Color.parseColor(\"#208CC5\"))  //Don't pass R\n+                    // .color.colorvalue\n+                    .setPositiveBtnText(\"OK\").setAnimation(Animation.SLIDE).isCancellable(true)\n+                    .setIcon(com.shashank.sony.fancydialoglib.R.drawable.ic_person_black_24dp, Icon.Visible);\n+            builder.setMessage(mediatext);\n+            if (mediatype.equalsIgnoreCase(\"image\")) {\n+                builder.setImagetoshow(medialink);\n+            } else if (mediatype.equalsIgnoreCase(\"video\")) {\n+                builder.setVideopath(medialink);\n+            }\n+            builder.build();\n+        }\n+\n+        /**\n+         * This method checks whether a constraint has been enforced and returns an error message if not The error message should\n+         * be displayable to the user\n+         *\n+         * @param value      {@link String} The value to be checked\n+         * @param view       {@link View} The value to be checked\n+         * @param constraint {@link JSONObject} The constraint expression to use\n+         * @return An error message if constraint has not been enforced or NULL if constraint enforced\n+         * @throws Exception\n+         */\n+        private String enforceConstraint (String value, View view, JSONObject constraint) throws\n+        Exception {\n+\n+            String type = constraint.getString(\"type\").toLowerCase();\n+            String ex = constraint.getString(JsonFormConstants.EX);\n+            String errorMessage = type.equals(JsonFormConstants.NUMBER_SELECTOR) ? constraint.optString(JsonFormConstants.ERR) :\n+                    constraint.getString(JsonFormConstants.ERR);\n+            Pattern pattern = Pattern.compile(\"(\" + functionRegex + \")\\\\((.*)\\\\)\");\n+            Matcher matcher = pattern.matcher(ex);\n+            if (matcher.find()) {\n+                String functionName = matcher.group(1);\n+                String b = matcher.group(2);\n+                String[] args = getFunctionArgs(b, value);\n+\n+                boolean viewDoesNotHaveValue = TextUtils.isEmpty(value);\n+                if (view instanceof CheckBox) {\n+                    viewDoesNotHaveValue = !((CheckBox) view).isChecked();\n+                } else if (isNumberSelectorConstraint(view) || isDatePickerNativeRadio(view)) {\n+                    return args.length > 1 ? args[1] : \"\";//clever fix to pass back the max value for number selectors\n \n-            boolean viewDoesNotHaveValue = TextUtils.isEmpty(value);\n-            if (view instanceof CheckBox) {\n-                viewDoesNotHaveValue = !((CheckBox) view).isChecked();\n-            } else if (isNumberSelectorConstraint(view) || isDatePickerNativeRadio(view)) {\n-                return args.length > 1 ? args[1] : \"\";//clever fix to pass back the max value for number selectors\n+                }\n \n+                if (checkViewValues(type, functionName, args, viewDoesNotHaveValue)) return null;\n+            } else {\n+                Timber.d(\"Matcher didn't work with function\");\n             }\n \n-            if (checkViewValues(type, functionName, args, viewDoesNotHaveValue)) return null;\n-        } else {\n-            Timber.d(\"Matcher didn't work with function\");\n+            return errorMessage;\n         }\n \n-        return errorMessage;\n-    }\n-\n-    private boolean checkViewValues(String type, String functionName, String[] args, boolean viewDoesNotHaveValue) {\n-        return viewDoesNotHaveValue || TextUtils.isEmpty(args[0]) || TextUtils.isEmpty(args[1]) ||\n-                comparisons.get(functionName).compare(args[0], type, args[1]);\n-    }\n+        private boolean checkViewValues (String type, String functionName, String[]args,\n+        boolean viewDoesNotHaveValue){\n+            return viewDoesNotHaveValue || TextUtils.isEmpty(args[0]) || TextUtils.isEmpty(args[1]) ||\n+                    comparisons.get(functionName).compare(args[0], type, args[1]);\n+        }\n \n-    private String enforceConstraint(Facts curValueMap, JSONObject constraint) throws Exception {\n-        return curValueMap.asMap().size() == 0 ? \"0\" : getRulesEngineFactory().getConstraint(curValueMap,\n-                constraint.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).getString(RuleConstant.RULES_FILE));\n-    }\n+        private String enforceConstraint (Facts curValueMap, JSONObject constraint) throws Exception\n+        {\n+            return curValueMap.asMap().size() == 0 ? \"0\" : getRulesEngineFactory().getConstraint(curValueMap,\n+                    constraint.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES).getString(RuleConstant.RULES_FILE));\n+        }\n \n-    private boolean isNumberSelectorConstraint(View view) {\n-        return JsonFormConstants.NUMBER_SELECTOR.equals(view.getTag(R.id.type));\n-    }\n+        private boolean isNumberSelectorConstraint (View view){\n+            return JsonFormConstants.NUMBER_SELECTOR.equals(view.getTag(R.id.type));\n+        }\n \n-    private boolean isDatePickerNativeRadio(View view) {\n-        return JsonFormConstants.NATIVE_RADIO_BUTTON.equals(view.getTag(R.id.type));\n-    }\n+        private boolean isDatePickerNativeRadio (View view){\n+            return JsonFormConstants.NATIVE_RADIO_BUTTON.equals(view.getTag(R.id.type));\n+        }\n \n-    protected JSONArray fetchFields(JSONObject parentJson, boolean popup) {\n-        JSONArray fields = new JSONArray();\n-        try {\n-            if (parentJson.has(JsonFormConstants.SECTIONS) &&\n-                    parentJson.get(JsonFormConstants.SECTIONS) instanceof JSONArray) {\n-                JSONArray sections = parentJson.getJSONArray(JsonFormConstants.SECTIONS);\n-                for (int i = 0; i < sections.length(); i++) {\n-                    JSONObject sectionJson = sections.getJSONObject(i);\n-                    fields = returnFormWithSectionFields(sectionJson, popup);\n+        protected JSONArray fetchFields (JSONObject parentJson,boolean popup){\n+            JSONArray fields = new JSONArray();\n+            try {\n+                if (parentJson.has(JsonFormConstants.SECTIONS) &&\n+                        parentJson.get(JsonFormConstants.SECTIONS) instanceof JSONArray) {\n+                    JSONArray sections = parentJson.getJSONArray(JsonFormConstants.SECTIONS);\n+                    for (int i = 0; i < sections.length(); i++) {\n+                        JSONObject sectionJson = sections.getJSONObject(i);\n+                        fields = returnFormWithSectionFields(sectionJson, popup);\n+                    }\n+                } else if (parentJson.has(JsonFormConstants.FIELDS) &&\n+                        parentJson.get(JsonFormConstants.FIELDS) instanceof JSONArray) {\n+                    fields = returnWithFormFields(parentJson, popup);\n+                }\n+            } catch (JSONException e) {\n+                Timber.e(e, \"JsonFormActivity --> fetchFields\");\n+            }\n+\n+            return fields;\n+        }\n+\n+        /**\n+         * Get form fields from JSON forms that have sections in the form steps. The JSONObject {@link JSONObject} argument is\n+         * the object after getting the section in the specified step name The popup {@link Boolean} argument is a boolean value\n+         * to let the function know that the form is being executed on a popup and not the main android view.\n+         * <p>\n+         * This function returns a JSONArray {@link JSONArray} of the fields contained in the section for the given step\n+         *\n+         * @param sectionJson\n+         * @param popup\n+         * @return\n+         * @throws JSONException\n+         * @author dubdabasoduba\n+         */\n+        protected JSONArray returnFormWithSectionFields (JSONObject sectionJson,boolean popup) throws\n+        JSONException {\n+            JSONArray fields = new JSONArray();\n+            if (sectionJson.has(JsonFormConstants.FIELDS)) {\n+                if (popup) {\n+                    JSONArray jsonArray = sectionJson.getJSONArray(JsonFormConstants.FIELDS);\n+                    for (int k = 0; k < jsonArray.length(); k++) {\n+                        JSONObject item = jsonArray.getJSONObject(k);\n+                        if (genericDialogInterface != null &&\n+                                item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n+                            fields = formUtils.concatArray(fields, specifyFields(item));\n+                        }\n+                    }\n+                } else {\n+                    fields = formUtils.concatArray(fields, sectionJson.getJSONArray(JsonFormConstants.FIELDS));\n                 }\n-            } else if (parentJson.has(JsonFormConstants.FIELDS) &&\n-                    parentJson.get(JsonFormConstants.FIELDS) instanceof JSONArray) {\n-                fields = returnWithFormFields(parentJson, popup);\n             }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"JsonFormActivity --> fetchFields\");\n-        }\n-\n-        return fields;\n-    }\n-\n-    /**\n-     * Get form fields from JSON forms that have sections in the form steps. The JSONObject {@link JSONObject} argument is\n-     * the object after getting the section in the specified step name The popup {@link Boolean} argument is a boolean value\n-     * to let the function know that the form is being executed on a popup and not the main android view.\n-     * <p>\n-     * This function returns a JSONArray {@link JSONArray} of the fields contained in the section for the given step\n-     *\n-     * @param sectionJson\n-     * @param popup\n-     * @return\n-     * @throws JSONException\n-     * @author dubdabasoduba\n-     */\n-    protected JSONArray returnFormWithSectionFields(JSONObject sectionJson, boolean popup) throws JSONException {\n-        JSONArray fields = new JSONArray();\n-        if (sectionJson.has(JsonFormConstants.FIELDS)) {\n+            return fields;\n+        }\n+\n+        /**\n+         * Get the form fields for the JSON forms that do not use the sections in the steps The JSONObject {@link JSONObject}\n+         * argument is the object after getting the step name The popup {@link boolean} argument is a boolean value to let the\n+         * function know that the form is being executed on a popup and not the main android view.\n+         * <p>\n+         * This function returns a JSONArray {@link JSONArray} of the fields contained in the step\n+         *\n+         * @param parentJson\n+         * @param popup\n+         * @return fields\n+         * @throws JSONException\n+         * @author dubdabasoduba\n+         */\n+        protected JSONArray returnWithFormFields (JSONObject parentJson,boolean popup) throws\n+        JSONException {\n+            JSONArray fields = new JSONArray();\n             if (popup) {\n-                JSONArray jsonArray = sectionJson.getJSONArray(JsonFormConstants.FIELDS);\n+                JSONArray jsonArray = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n                 for (int k = 0; k < jsonArray.length(); k++) {\n                     JSONObject item = jsonArray.getJSONObject(k);\n                     if (genericDialogInterface != null &&\n                             item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n-                        fields = formUtils.concatArray(fields, specifyFields(item));\n+                        fields = specifyFields(item);\n                     }\n                 }\n             } else {\n-                fields = formUtils.concatArray(fields, sectionJson.getJSONArray(JsonFormConstants.FIELDS));\n+                fields = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n             }\n-        }\n-        return fields;\n-    }\n \n-    /**\n-     * Get the form fields for the JSON forms that do not use the sections in the steps The JSONObject {@link JSONObject}\n-     * argument is the object after getting the step name The popup {@link boolean} argument is a boolean value to let the\n-     * function know that the form is being executed on a popup and not the main android view.\n-     * <p>\n-     * This function returns a JSONArray {@link JSONArray} of the fields contained in the step\n-     *\n-     * @param parentJson\n-     * @param popup\n-     * @return fields\n-     * @throws JSONException\n-     * @author dubdabasoduba\n-     */\n-    protected JSONArray returnWithFormFields(JSONObject parentJson, boolean popup) throws JSONException {\n-        JSONArray fields = new JSONArray();\n-        if (popup) {\n-            JSONArray jsonArray = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n-            for (int k = 0; k < jsonArray.length(); k++) {\n-                JSONObject item = jsonArray.getJSONObject(k);\n-                if (genericDialogInterface != null &&\n-                        item.getString(JsonFormConstants.KEY).equals(genericDialogInterface.getParentKey())) {\n-                    fields = specifyFields(item);\n-                }\n-            }\n-        } else {\n-            fields = parentJson.getJSONArray(JsonFormConstants.FIELDS);\n+            return fields;\n         }\n \n-        return fields;\n-    }\n-\n-    protected JSONArray specifyFields(JSONObject parentJson) {\n-        JSONArray fields = new JSONArray();\n-        if (genericDialogInterface != null && genericDialogInterface.getWidgetType() != null &&\n-                genericDialogInterface.getWidgetType().equals(JsonFormConstants.EXPANSION_PANEL)) {\n-            if (parentJson.has(JsonFormConstants.CONTENT_FORM)) {\n-                fields = returnFields(parentJson);\n-            }\n-        } else {\n-            if (parentJson.has(JsonFormConstants.HAS_EXTRA_REL)) {\n-                String optionKey;\n-                try {\n-                    optionKey = (String) parentJson.get(JsonFormConstants.HAS_EXTRA_REL);\n-                    JSONArray options = parentJson.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n-                    if (options.length() > 0) {\n-                        for (int j = 0; j < options.length(); j++) {\n-                            JSONObject jsonObject = options.getJSONObject(j);\n-                            String objectKey = (String) jsonObject.get(JsonFormConstants.KEY);\n-                            if (objectKey.equals(optionKey) && jsonObject.has(JsonFormConstants.CONTENT_FORM)) {\n-                                fields = returnFields(jsonObject);\n+        protected JSONArray specifyFields (JSONObject parentJson){\n+            JSONArray fields = new JSONArray();\n+            if (genericDialogInterface != null && genericDialogInterface.getWidgetType() != null &&\n+                    genericDialogInterface.getWidgetType().equals(JsonFormConstants.EXPANSION_PANEL)) {\n+                if (parentJson.has(JsonFormConstants.CONTENT_FORM)) {\n+                    fields = returnFields(parentJson);\n+                }\n+            } else {\n+                if (parentJson.has(JsonFormConstants.HAS_EXTRA_REL)) {\n+                    String optionKey;\n+                    try {\n+                        optionKey = (String) parentJson.get(JsonFormConstants.HAS_EXTRA_REL);\n+                        JSONArray options = parentJson.getJSONArray(JsonFormConstants.OPTIONS_FIELD_NAME);\n+                        if (options.length() > 0) {\n+                            for (int j = 0; j < options.length(); j++) {\n+                                JSONObject jsonObject = options.getJSONObject(j);\n+                                String objectKey = (String) jsonObject.get(JsonFormConstants.KEY);\n+                                if (objectKey.equals(optionKey) && jsonObject.has(JsonFormConstants.CONTENT_FORM)) {\n+                                    fields = returnFields(jsonObject);\n+                                }\n                             }\n                         }\n+                    } catch (JSONException e) {\n+                        Timber.e(e, \"JsonFormActivity --> specifyFields\");\n                     }\n-                } catch (JSONException e) {\n-                    Timber.e(e, \"JsonFormActivity --> specifyFields\");\n                 }\n             }\n+            return fields;\n         }\n-        return fields;\n-    }\n \n-    private JSONArray returnFields(JSONObject jsonObject) {\n-        JSONArray fields = new JSONArray();\n-        try {\n-            if (getExtraFieldsWithValues() != null) {\n-                fields = getExtraFieldsWithValues();\n-            } else {\n-                String formLocation = jsonObject.has(JsonFormConstants.CONTENT_FORM_LOCATION) ? jsonObject.getString(JsonFormConstants.CONTENT_FORM_LOCATION) : \"\";\n-                fields = getSubFormFields(jsonObject.get(JsonFormConstants.CONTENT_FORM).toString(), formLocation, fields);\n+        private JSONArray returnFields (JSONObject jsonObject){\n+            JSONArray fields = new JSONArray();\n+            try {\n+                if (getExtraFieldsWithValues() != null) {\n+                    fields = getExtraFieldsWithValues();\n+                } else {\n+                    String formLocation = jsonObject.has(JsonFormConstants.CONTENT_FORM_LOCATION) ? jsonObject.getString(JsonFormConstants.CONTENT_FORM_LOCATION) : \"\";\n+                    fields = getSubFormFields(jsonObject.get(JsonFormConstants.CONTENT_FORM).toString(), formLocation, fields);\n+                }\n+            } catch (JSONException e) {\n+                Timber.e(e, \"JsonFormActivity --> returnFields\");\n             }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"JsonFormActivity --> returnFields\");\n+            return fields;\n         }\n-        return fields;\n-    }\n \n-    protected JSONArray getSubFormFields(String subFormName, String subFormLocation, JSONArray fields) {\n-        JSONArray fieldArray = new JSONArray();\n-        JSONObject jsonObject = null;\n-        try {\n-            jsonObject = FormUtils.getSubFormJson(subFormName, subFormLocation, getApplicationContext(), translateForm);\n-        } catch (Exception e) {\n-            Timber.e(e);\n-        }\n-        if (jsonObject != null) {\n+        protected JSONArray getSubFormFields (String subFormName, String subFormLocation, JSONArray\n+        fields){\n+            JSONArray fieldArray = new JSONArray();\n+            JSONObject jsonObject = null;\n             try {\n-                JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.CONTENT_FORM);\n-                if (jsonArray != null && jsonArray.length() > 0) {\n-                    fieldArray = formUtils.concatArray(fields, jsonArray);\n+                jsonObject = FormUtils.getSubFormJson(subFormName, subFormLocation, getApplicationContext(), translateForm);\n+            } catch (Exception e) {\n+                Timber.e(e);\n+            }\n+            if (jsonObject != null) {\n+                try {\n+                    JSONArray jsonArray = jsonObject.getJSONArray(JsonFormConstants.CONTENT_FORM);\n+                    if (jsonArray != null && jsonArray.length() > 0) {\n+                        fieldArray = formUtils.concatArray(fields, jsonArray);\n+                    }\n+                } catch (JSONException e) {\n+                    Timber.e(e, \"JsonFormActivity --> getSubFormFields\");\n                 }\n-            } catch (JSONException e) {\n-                Timber.e(e, \"JsonFormActivity --> getSubFormFields\");\n             }\n+\n+            return fieldArray;\n         }\n \n-        return fieldArray;\n-    }\n+        public Form getForm () {\n+            return form;\n+        }\n \n-    public Form getForm() {\n-        return form;\n-    }\n+        private boolean isRelevant (Facts curValueMap, JSONObject curRelevance) throws Exception {\n+            if (curRelevance != null) {\n+                if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_RULES)) {\n \n-    private boolean isRelevant(Facts curValueMap, JSONObject curRelevance) throws Exception {\n-        if (curRelevance != null) {\n-            if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_RULES)) {\n+                    JSONObject exRulesObject = curRelevance.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n \n-                JSONObject exRulesObject = curRelevance.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n+                    if (exRulesObject.has(RuleConstant.RULES_FILE)) {\n \n-                if (exRulesObject.has(RuleConstant.RULES_FILE)) {\n+                        return curValueMap.asMap().size() != 0 && getRulesEngineFactory().getRelevance(curValueMap,\n+                                exRulesObject.getString(RuleConstant.RULES_FILE));\n \n-                    return curValueMap.asMap().size() != 0 && getRulesEngineFactory().getRelevance(curValueMap,\n-                            exRulesObject.getString(RuleConstant.RULES_FILE));\n+                    } else if (exRulesObject.has(RuleConstant.RULES_DYNAMIC)) {\n \n-                } else if (exRulesObject.has(RuleConstant.RULES_DYNAMIC)) {\n+                        return curValueMap.asMap().size() != 0 && getRulesEngineFactory()\n+                                .getDynamicRelevance(curValueMap, exRulesObject.optJSONArray(RuleConstant.RULES_DYNAMIC));\n \n-                    return curValueMap.asMap().size() != 0 && getRulesEngineFactory()\n-                            .getDynamicRelevance(curValueMap, exRulesObject.optJSONArray(RuleConstant.RULES_DYNAMIC));\n+                    }\n \n-                }\n+                } else if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX)) {\n+                    JSONArray exArray = curRelevance.getJSONArray(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX);\n \n-            } else if (curRelevance.has(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX)) {\n-                JSONArray exArray = curRelevance.getJSONArray(JsonFormConstants.JSON_FORM_KEY.EX_CHECKBOX);\n+                    for (int i = 0; i < exArray.length(); i++) {\n+                        ExObjectResult exObjectResult = isExObjectRelevant(curValueMap, exArray.getJSONObject(i));\n+                        if (exObjectResult.isRelevant()) {\n+                            return true;\n+                        } else if (!exObjectResult.isRelevant() && exObjectResult.isFinal()) {\n+                            return false;\n+                        }\n \n-                for (int i = 0; i < exArray.length(); i++) {\n-                    ExObjectResult exObjectResult = isExObjectRelevant(curValueMap, exArray.getJSONObject(i));\n-                    if (exObjectResult.isRelevant()) {\n-                        return true;\n-                    } else if (!exObjectResult.isRelevant() && exObjectResult.isFinal()) {\n-                        return false;\n                     }\n-\n+                    return false;\n+                } else {\n+                    String curValue = String.valueOf(curValueMap.get(JsonFormConstants.VALUE));\n+                    return doComparison(curValue != null ? curValue : \"\", curRelevance);\n                 }\n-                return false;\n-            } else {\n-                String curValue = String.valueOf(curValueMap.get(JsonFormConstants.VALUE));\n-                return doComparison(curValue != null ? curValue : \"\", curRelevance);\n             }\n+            return false;\n         }\n-        return false;\n-    }\n \n-    private ExObjectResult isExObjectRelevant(Facts curValueMap, JSONObject object) throws Exception {\n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.NOT)) {\n-            JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.NOT);\n+        private ExObjectResult isExObjectRelevant (Facts curValueMap, JSONObject object) throws\n+        Exception {\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.NOT)) {\n+                JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.NOT);\n \n-            for (int i = 0; i < orArray.length(); i++) {\n-                String curValue = curValueMap.get(orArray.getString(i));\n+                for (int i = 0; i < orArray.length(); i++) {\n+                    String curValue = curValueMap.get(orArray.getString(i));\n \n-                if (curValue != null && !Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(true, false);\n-                } else {\n-                    return new ExObjectResult(false, true);\n+                    if (curValue != null && !Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(true, false);\n+                    } else {\n+                        return new ExObjectResult(false, true);\n+                    }\n                 }\n             }\n-        }\n \n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.OR)) {\n-            JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.OR);\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.OR)) {\n+                JSONArray orArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.OR);\n+\n+                for (int i = 0; i < orArray.length(); i++) {\n+                    String curValue = curValueMap.get(orArray.getString(i));\n+                    if (curValue != null && Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(true, true);\n+                    }\n \n-            for (int i = 0; i < orArray.length(); i++) {\n-                String curValue = curValueMap.get(orArray.getString(i));\n-                if (curValue != null && Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(true, true);\n                 }\n \n             }\n \n-        }\n-\n-        if (object.has(JsonFormConstants.JSON_FORM_KEY.AND)) {\n-            JSONArray andArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.AND);\n+            if (object.has(JsonFormConstants.JSON_FORM_KEY.AND)) {\n+                JSONArray andArray = object.getJSONArray(JsonFormConstants.JSON_FORM_KEY.AND);\n \n-            for (int i = 0; i < andArray.length(); i++) {\n-                String curValue = curValueMap.get(andArray.getString(i));\n-                if (curValue != null && !Boolean.valueOf(curValue)) {\n-                    return new ExObjectResult(false, false);\n+                for (int i = 0; i < andArray.length(); i++) {\n+                    String curValue = curValueMap.get(andArray.getString(i));\n+                    if (curValue != null && !Boolean.valueOf(curValue)) {\n+                        return new ExObjectResult(false, false);\n+                    }\n                 }\n+                return new ExObjectResult(true, false);\n+\n             }\n-            return new ExObjectResult(true, false);\n \n+            return new ExObjectResult(false, false);\n         }\n \n-        return new ExObjectResult(false, false);\n-    }\n-\n-    private List<String> getRules(String filename, String fieldKey) {\n-        List<String> rules = ruleKeys.get(filename + \":\" + fieldKey);\n+        private List<String> getRules (String filename, String fieldKey){\n+            List<String> rules = ruleKeys.get(filename + \":\" + fieldKey);\n \n-        if (rules == null) {\n-            try {\n-                Yaml yaml = new Yaml();\n-                InputStreamReader inputStreamReader = new InputStreamReader(\n-                        this.getAssets().open((getRulesEngineFactory().getRulesFolderPath() + filename)));\n-                Iterable<Object> ruleObjects = yaml.loadAll(inputStreamReader);\n+            if (rules == null) {\n+                try {\n+                    Yaml yaml = new Yaml();\n+                    InputStreamReader inputStreamReader = new InputStreamReader(\n+                            this.getAssets().open((getRulesEngineFactory().getRulesFolderPath() + filename)));\n+                    Iterable<Object> ruleObjects = yaml.loadAll(inputStreamReader);\n \n-                for (Object object : ruleObjects) {\n+                    for (Object object : ruleObjects) {\n \n-                    Map<String, Object> map = ((Map<String, Object>) object);\n+                        Map<String, Object> map = ((Map<String, Object>) object);\n \n-                    String name = map.get(RuleConstant.NAME).toString();\n-                    if (ruleKeys.containsKey(filename + \":\" + name)) {\n-                        continue;\n-                    }\n+                        String name = map.get(RuleConstant.NAME).toString();\n+                        if (ruleKeys.containsKey(filename + \":\" + name)) {\n+                            continue;\n+                        }\n \n-                    List<String> actions = new ArrayList<>();\n+                        List<String> actions = new ArrayList<>();\n \n-                    StringBuilder conditionString = new StringBuilder();\n-                    conditionString.append(map.get(RuleConstant.CONDITION).toString());\n+                        StringBuilder conditionString = new StringBuilder();\n+                        conditionString.append(map.get(RuleConstant.CONDITION).toString());\n \n-                    List<String> fields = (List<String>) map.get(RuleConstant.ACTIONS);\n-                    if (fields != null) {\n-                        for (String field : fields) {\n-                            if (field.trim().startsWith(RuleConstant.CALCULATION) ||\n-                                    field.trim().startsWith(RuleConstant.CONSTRAINT)) {\n-                                conditionString.append(\" \" + field);\n+                        List<String> fields = (List<String>) map.get(RuleConstant.ACTIONS);\n+                        if (fields != null) {\n+                            for (String field : fields) {\n+                                if (field.trim().startsWith(RuleConstant.CALCULATION) ||\n+                                        field.trim().startsWith(RuleConstant.CONSTRAINT)) {\n+                                    conditionString.append(\" \" + field);\n+                                }\n                             }\n+\n                         }\n \n-                    }\n+                        actions.addAll(getConditionKeys(conditionString.toString()));\n+                        ruleKeys.put(filename + \":\" + name, actions);\n \n-                    actions.addAll(getConditionKeys(conditionString.toString()));\n-                    ruleKeys.put(filename + \":\" + name, actions);\n+                        if (name.equals(fieldKey)) {\n+                            break;\n+                        }\n \n-                    if (name.equals(fieldKey)) {\n-                        break;\n                     }\n \n+                } catch (Exception e) {\n+                    Timber.e(e, \"JsonFormActivity --> getRules\");\n                 }\n \n-            } catch (Exception e) {\n-                Timber.e(e, \"JsonFormActivity --> getRules\");\n+                return ruleKeys.get(filename + \":\" + fieldKey);\n+            } else {\n+                return rules;\n             }\n+        }\n \n-            return ruleKeys.get(filename + \":\" + fieldKey);\n-        } else {\n-            return rules;\n+        private List<String> getConditionKeys (String condition){\n+            return Utils.getConditionKeys(condition);\n         }\n-    }\n \n-    private List<String> getConditionKeys(String condition) {\n-        return Utils.getConditionKeys(condition);\n-    }\n+        private void updateCalculation (Facts valueMap, View view, String[]address){\n+            String calculation;\n+            try {\n+                if (address[0].equals(RuleConstant.RULES_DYNAMIC)) {\n+                    calculation = getRulesEngineFactory().getDynamicCalculation(valueMap, new JSONArray(address[1]));\n+                } else {\n+                    calculation = getRulesEngineFactory().getCalculation(valueMap, address[1]);\n+                }\n \n-    private void updateCalculation(Facts valueMap, View view, String[] address) {\n-        String calculation;\n-        try {\n-            if (address[0].equals(RuleConstant.RULES_DYNAMIC)) {\n-                calculation = getRulesEngineFactory().getDynamicCalculation(valueMap, new JSONArray(address[1]));\n-            } else {\n-                calculation = getRulesEngineFactory().getCalculation(valueMap, address[1]);\n-            }\n+                if (calculation != null) {\n+                    if (view instanceof CheckBox) {\n+                        //For now were only handling checkbox titles only\n+                        TextView checkboxLabel = ((View) view.getParent().getParent()).findViewById(R.id.label_text);\n+                        if (checkboxLabel != null) {\n+                            checkboxLabel.setText(getRenderText(calculation, checkboxLabel.getTag(R.id.original_text).toString(), false));\n+                        }\n \n-            if (calculation != null) {\n-                if (view instanceof CheckBox) {\n-                    //For now were only handling checkbox titles only\n-                    TextView checkboxLabel = ((View) view.getParent().getParent()).findViewById(R.id.label_text);\n-                    if (checkboxLabel != null) {\n-                        checkboxLabel.setText(getRenderText(calculation, checkboxLabel.getTag(R.id.original_text).toString(), false));\n-                    }\n+                    } else if (view instanceof TextableView) {\n+                        TextableView textView = ((TextableView) view);\n+                        if (!TextUtils.isEmpty(calculation)) {\n+                            CharSequence spanned = calculation.charAt(0) == '{' ? getRenderText(calculation, textView.getTag(R.id.original_text).toString(), true) :\n+                                    (textView.getTag(R.id.original_text) != null && \"0\".equals(calculation)) ? textView.getTag(R.id.original_text).toString() : calculation;\n+                            textView.setText(spanned);\n+                        }\n+                    } else if (view instanceof EditText) {\n+                        String type = (String) view.getTag(R.id.type);\n+                        if (JsonFormConstants.HIDDEN.equals(type) && TextUtils.isEmpty(calculation)) {\n+                            calculation = \"0\";\n+                        }\n \n-                } else if (view instanceof TextableView) {\n-                    TextableView textView = ((TextableView) view);\n-                    if (!TextUtils.isEmpty(calculation)) {\n-                        CharSequence spanned = calculation.charAt(0) == '{' ? getRenderText(calculation, textView.getTag(R.id.original_text).toString(), true) :\n-                                (textView.getTag(R.id.original_text) != null && \"0\".equals(calculation)) ? textView.getTag(R.id.original_text).toString() : calculation;\n-                        textView.setText(spanned);\n-                    }\n-                } else if (view instanceof EditText) {\n-                    String type = (String) view.getTag(R.id.type);\n-                    if (JsonFormConstants.HIDDEN.equals(type) && TextUtils.isEmpty(calculation)) {\n-                        calculation = \"0\";\n-                    }\n+                        if (!TextUtils.isEmpty(calculation)) {\n+                            ((EditText) view).setText(calculation);\n+                        }\n \n-                    if (!TextUtils.isEmpty(calculation)) {\n-                        ((EditText) view).setText(calculation);\n+                    } else if (view instanceof RadioGroup) {\n+                        setRadioButtonCalculation((RadioGroup) view, calculation);\n+\n+                    } else if (view instanceof LinearLayout) {\n+                        LinearLayout linearLayout = (LinearLayout) view;\n+                        String type = (String) linearLayout.getTag(R.id.type);\n+                        if (JsonFormConstants.NUMBER_SELECTOR.equals(type)) {\n+                            setNumberSelectorCalculation(calculation, linearLayout);\n+                        }\n+                    } else {\n+                        ((TextView) view).setText(calculation);\n                     }\n+                }\n+            } catch (Exception e) {\n+                Timber.e(e, \"calling updateCalculation on Non TextView or Text View decendant\");\n+            }\n \n-                } else if (view instanceof RadioGroup) {\n-                    setRadioButtonCalculation((RadioGroup) view, calculation);\n+        }\n \n-                } else if (view instanceof LinearLayout) {\n-                    LinearLayout linearLayout = (LinearLayout) view;\n-                    String type = (String) linearLayout.getTag(R.id.type);\n-                    if (JsonFormConstants.NUMBER_SELECTOR.equals(type)) {\n-                        setNumberSelectorCalculation(calculation, linearLayout);\n+        private void setRadioButtonCalculation ( final RadioGroup view, final String calculation){\n+            int count = view.getChildCount();\n+            for (int i = 0; i < count; i++) {\n+                final int childPosition = i;\n+                runOnUiThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        addRadioButtonCalculation(calculation, view, childPosition);\n                     }\n-                } else {\n-                    ((TextView) view).setText(calculation);\n-                }\n+                });\n             }\n-        } catch (Exception e) {\n-            Timber.e(e, \"calling updateCalculation on Non TextView or Text View decendant\");\n         }\n \n-    }\n+        private void addRadioButtonCalculation (String calculation, RadioGroup view,\n+        int childPosition){\n+            if (!TextUtils.isEmpty(calculation)) {\n+                RelativeLayout radioButtonLayout = (RelativeLayout) view.getChildAt(childPosition);\n+                int radioButtonViewId = (int) radioButtonLayout.getTag(R.id.native_radio_button_view_id);\n+                RadioButton radioButton = radioButtonLayout.findViewById(radioButtonViewId);\n+                boolean showExtraInfo = (boolean) radioButton.getTag(R.id.native_radio_button_extra_info);\n+                String radioButtonKey = (String) radioButton.getTag(R.id.childKey);\n \n-    private void setRadioButtonCalculation(final RadioGroup view, final String calculation) {\n-        int count = view.getChildCount();\n-        for (int i = 0; i < count; i++) {\n-            final int childPosition = i;\n-            runOnUiThread(new Runnable() {\n-                @Override\n-                public void run() {\n-                    addRadioButtonCalculation(calculation, view, childPosition);\n+                if (!TextUtils.isEmpty(radioButtonKey) && calculation.equals(radioButtonKey)) {\n+                    radioButton.setChecked(true);\n+                    radioButton.performClick();\n                 }\n-            });\n-        }\n-    }\n-\n-    private void addRadioButtonCalculation(String calculation, RadioGroup view, int childPosition) {\n-        if (!TextUtils.isEmpty(calculation)) {\n-            RelativeLayout radioButtonLayout = (RelativeLayout) view.getChildAt(childPosition);\n-            int radioButtonViewId = (int) radioButtonLayout.getTag(R.id.native_radio_button_view_id);\n-            RadioButton radioButton = radioButtonLayout.findViewById(radioButtonViewId);\n-            boolean showExtraInfo = (boolean) radioButton.getTag(R.id.native_radio_button_extra_info);\n-            String radioButtonKey = (String) radioButton.getTag(R.id.childKey);\n \n-            if (!TextUtils.isEmpty(radioButtonKey) && calculation.equals(radioButtonKey)) {\n-                radioButton.setChecked(true);\n-                radioButton.performClick();\n-            }\n+                if (showExtraInfo) {\n+                    CustomTextView renderView = view.getChildAt(childPosition).findViewById(R.id.extraInfoTextView);\n \n-            if (showExtraInfo) {\n-                CustomTextView renderView = view.getChildAt(childPosition).findViewById(R.id.extraInfoTextView);\n+                    if (renderView.getTag(R.id.original_text) == null) {\n+                        renderView.setTag(R.id.original_text, renderView.getText());\n+                    }\n \n-                if (renderView.getTag(R.id.original_text) == null) {\n-                    renderView.setTag(R.id.original_text, renderView.getText());\n-                }\n \n+                    if (!TextUtils.isEmpty(calculation)) {\n+                        renderView.setText(calculation.charAt(0) == '{' ? getRenderText(calculation, renderView.getTag(R.id.original_text).toString(), false) : calculation);\n+                    }\n \n-                if (!TextUtils.isEmpty(calculation)) {\n-                    renderView.setText(calculation.charAt(0) == '{' ? getRenderText(calculation, renderView.getTag(R.id.original_text).toString(), false) : calculation);\n+                    renderView.setVisibility(renderView.getText().toString().contains(\"{\") ||\n+                            renderView.getText().toString().equals(\"0\") ? View.GONE : View.VISIBLE);\n                 }\n-\n-                renderView.setVisibility(renderView.getText().toString().contains(\"{\") ||\n-                        renderView.getText().toString().equals(\"0\") ? View.GONE : View.VISIBLE);\n             }\n         }\n-    }\n \n-    private void setNumberSelectorCalculation(String calculation, LinearLayout linearLayout) {\n-        if (!TextUtils.isEmpty(calculation)) {\n-            int childCount = linearLayout.getChildCount();\n-            for (int i = 0; i < childCount; i++) {\n-                if (linearLayout.getChildAt(i) instanceof TextView) {\n-                    TextView textView = (TextView) linearLayout.getChildAt(i);\n-                    String text = textView.getText().toString();\n-                    CommonListener commonListener =\n-                            (CommonListener) textView.getTag(R.id.number_selector_listener);\n+        private void setNumberSelectorCalculation (String calculation, LinearLayout linearLayout){\n+            if (!TextUtils.isEmpty(calculation)) {\n+                int childCount = linearLayout.getChildCount();\n+                for (int i = 0; i < childCount; i++) {\n+                    if (linearLayout.getChildAt(i) instanceof TextView) {\n+                        TextView textView = (TextView) linearLayout.getChildAt(i);\n+                        String text = textView.getText().toString();\n+                        CommonListener commonListener =\n+                                (CommonListener) textView.getTag(R.id.number_selector_listener);\n \n-                    String selectedNumber = \"\";\n-                    if (selectedTextView != null) {\n-                        selectedNumber = selectedTextView.getText().toString();\n-                    }\n+                        String selectedNumber = \"\";\n+                        if (selectedTextView != null) {\n+                            selectedNumber = selectedTextView.getText().toString();\n+                        }\n \n-                    if (i + 1 == childCount) {\n-                        String[] splitValue = text.split(\"\");\n-                        if (splitValue.length > 2) {\n-                            String value = splitValue[1];\n+                        if (i + 1 == childCount) {\n+                            String[] splitValue = text.split(\"\");\n+                            if (splitValue.length > 2) {\n+                                String value = splitValue[1];\n \n-                            if (Integer.valueOf(calculation) > Integer.valueOf(value)) {\n-                                if (!calculation.equals(selectedNumber)) {\n-                                    textView.setText(calculation);\n-                                    textView.setOnClickListener(commonListener);\n-                                    textView.performClick();\n+                                if (Integer.valueOf(calculation) > Integer.valueOf(value)) {\n+                                    if (!calculation.equals(selectedNumber)) {\n+                                        textView.setText(calculation);\n+                                        textView.setOnClickListener(commonListener);\n+                                        textView.performClick();\n+                                    }\n+                                } else {\n+                                    selectNumber(calculation, textView, value, commonListener);\n                                 }\n-                            } else {\n-                                selectNumber(calculation, textView, value, commonListener);\n                             }\n+                        } else {\n+                            selectNumber(calculation, textView, text, commonListener);\n                         }\n-                    } else {\n-                        selectNumber(calculation, textView, text, commonListener);\n                     }\n                 }\n             }\n         }\n-    }\n \n-    private void selectNumber(String calculation, TextView textView, String text, CommonListener commonListener) {\n-        if (calculation.equals(text) && !textView.equals(selectedTextView)) {\n-            selectedTextView = textView;\n-            textView.setOnClickListener(commonListener);\n-            textView.performClick();\n+        private void selectNumber (String calculation, TextView textView, String\n+        text, CommonListener commonListener){\n+            if (calculation.equals(text) && !textView.equals(selectedTextView)) {\n+                selectedTextView = textView;\n+                textView.setOnClickListener(commonListener);\n+                textView.performClick();\n+            }\n         }\n-    }\n \n-    private CharSequence getRenderText(String calculation, String textTemplate, boolean makeBold) {\n-        Map<String, Object> valueMap = new Gson().fromJson(calculation, new TypeToken<HashMap<String, Object>>() {\n-        }.getType());\n-        return stringFormat(textTemplate, valueMap, makeBold);\n-    }\n+        private CharSequence getRenderText (String calculation, String textTemplate,boolean makeBold)\n+        {\n+            Map<String, Object> valueMap = new Gson().fromJson(calculation, new TypeToken<HashMap<String, Object>>() {\n+            }.getType());\n+            return stringFormat(textTemplate, valueMap, makeBold);\n+        }\n \n-    public Spanned stringFormat(String string, Map<String, Object> valueMap, boolean makeBold) {\n-        String resString = string;\n-        for (Map.Entry<String, Object> entry : valueMap.entrySet()) {\n-            String templateValue = getTemplateValue(entry.getValue());\n-            if (makeBold) {\n-                templateValue = \"<b>\" + getTemplateValue(entry.getValue()) + \"</b>\";\n+        public Spanned stringFormat (String string, Map < String, Object > valueMap,boolean makeBold)\n+        {\n+            String resString = string;\n+            for (Map.Entry<String, Object> entry : valueMap.entrySet()) {\n+                String templateValue = getTemplateValue(entry.getValue());\n+                if (makeBold) {\n+                    templateValue = \"<b>\" + getTemplateValue(entry.getValue()) + \"</b>\";\n+                }\n+                resString = resString.replace(\"{\" + entry.getKey() + \"}\", templateValue);\n             }\n-            resString = resString.replace(\"{\" + entry.getKey() + \"}\", templateValue);\n+\n+            return Html.fromHtml(resString);\n         }\n \n-        return Html.fromHtml(resString);\n-    }\n+        protected Object getValue (JSONObject object) throws JSONException {\n+            Object value;\n \n-    protected Object getValue(JSONObject object) throws JSONException {\n-        Object value;\n+            if (object.has(JsonFormConstants.VALUE)) {\n+                value = object.opt(JsonFormConstants.VALUE);\n \n-        if (object.has(JsonFormConstants.VALUE)) {\n-            value = object.opt(JsonFormConstants.VALUE);\n+                if (isNumberWidget(object)) {\n+                    value = TextUtils.isEmpty(object.optString(JsonFormConstants.VALUE)) ? 0 : processNumberValues(object.optString(JsonFormConstants.VALUE));\n+                } else if (value != null && !TextUtils.isEmpty(object.getString(JsonFormConstants.VALUE)) && canHaveNumber(object)) {\n+                    value = processNumberValues(value);\n+                }\n \n-            if (isNumberWidget(object)) {\n-                value = TextUtils.isEmpty(object.optString(JsonFormConstants.VALUE)) ? 0 : processNumberValues(object.optString(JsonFormConstants.VALUE));\n-            } else if (value != null && !TextUtils.isEmpty(object.getString(JsonFormConstants.VALUE)) && canHaveNumber(object)) {\n-                value = processNumberValues(value);\n+            } else {\n+                value = isNumberWidget(object) ? 0 : \"\";\n             }\n \n-        } else {\n-            value = isNumberWidget(object) ? 0 : \"\";\n+            return value;\n         }\n \n-        return value;\n-    }\n-\n-    protected Object processNumberValues(Object object) {\n-        Object jsonObject = object;\n-        try {\n-            if (jsonObject.toString().contains(\".\")) {\n-                jsonObject = String.valueOf((float) Math.round(Float.valueOf(jsonObject.toString()) * 100) / 100);\n-            } else {\n-                jsonObject = Integer.valueOf(jsonObject.toString());\n+        protected Object processNumberValues (Object object){\n+            Object jsonObject = object;\n+            try {\n+                if (jsonObject.toString().contains(\".\")) {\n+                    jsonObject = String.valueOf((float) Math.round(Float.valueOf(jsonObject.toString()) * 100) / 100);\n+                } else {\n+                    jsonObject = Integer.valueOf(jsonObject.toString());\n+                }\n+            } catch (NumberFormatException e) {\n+                //Log.e(TAG, \"Error trying to convert \" + object + \" to a number \", e);\n             }\n-        } catch (NumberFormatException e) {\n-            //Log.e(TAG, \"Error trying to convert \" + object + \" to a number \", e);\n+            return jsonObject;\n         }\n-        return jsonObject;\n-    }\n \n-    protected String getKey(JSONObject object) throws JSONException {\n-        return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n-                object.get(RuleConstant.STEP) + \"_\" + object.get(JsonFormConstants.KEY) : JsonFormConstants.VALUE;\n-    }\n+        protected String getKey (JSONObject object) throws JSONException {\n+            return object.has(RuleConstant.IS_RULE_CHECK) && object.getBoolean(RuleConstant.IS_RULE_CHECK) ?\n+                    object.get(RuleConstant.STEP) + \"_\" + object.get(JsonFormConstants.KEY) : JsonFormConstants.VALUE;\n+        }\n \n-    private void clearHiddenViewsValues(JSONObject object, String addressString) {\n-        if (object != null) {\n-            String objectKey = addressString.replace(\":\", \"_\");\n-            formValuesCacheMap.remove(objectKey);\n-            formValuesCacheMap.put(objectKey, \"\");\n-            if (object.has(JsonFormConstants.VALUE)) {\n-                object.remove(JsonFormConstants.VALUE);\n+        private void clearHiddenViewsValues (JSONObject object, String addressString){\n+            if (object != null) {\n+                String objectKey = addressString.replace(\":\", \"_\");\n+                formValuesCacheMap.remove(objectKey);\n+                formValuesCacheMap.put(objectKey, \"\");\n+                if (object.has(JsonFormConstants.VALUE)) {\n+                    object.remove(JsonFormConstants.VALUE);\n+                }\n             }\n         }\n-    }\n \n-    private void updateCanvas(View view, boolean visible, JSONArray canvasViewIds, String addressString, JSONObject object)\n+        private void updateCanvas (View view,boolean visible, JSONArray canvasViewIds, String\n+        addressString, JSONObject object)\n             throws JSONException {\n-        for (int i = 0; i < canvasViewIds.length(); i++) {\n-            int curId = canvasViewIds.getInt(i);\n-            View curCanvasView = view.getRootView().findViewById(curId);\n+            for (int i = 0; i < canvasViewIds.length(); i++) {\n+                int curId = canvasViewIds.getInt(i);\n+                View curCanvasView = view.getRootView().findViewById(curId);\n \n-            if (curCanvasView == null) {\n-                continue;\n-            }\n+                if (curCanvasView == null) {\n+                    continue;\n+                }\n \n-            if (visible) {\n-                curCanvasView.setEnabled(true);\n-                curCanvasView.setVisibility(View.VISIBLE);\n+                if (visible) {\n+                    curCanvasView.setEnabled(true);\n+                    curCanvasView.setVisibility(View.VISIBLE);\n \n-                if (curCanvasView instanceof RelativeLayout || view instanceof LinearLayout) {\n-                    curCanvasView.setFocusable(true);\n-                }\n-                if (view instanceof EditText) {\n-                    view.setFocusable(true);\n+                    if (curCanvasView instanceof RelativeLayout || view instanceof LinearLayout) {\n+                        curCanvasView.setFocusable(true);\n+                    }\n+                    if (view instanceof EditText) {\n+                        view.setFocusable(true);\n+                    }\n+                } else {\n+                    clearHiddenViewsValues(object, addressString);\n+                    curCanvasView.setEnabled(false);\n+                    curCanvasView.setVisibility(View.GONE);\n+                    refreshViews(curCanvasView);\n                 }\n-            } else {\n-                clearHiddenViewsValues(object, addressString);\n-                curCanvasView.setEnabled(false);\n-                curCanvasView.setVisibility(View.GONE);\n-                refreshViews(curCanvasView);\n-            }\n \n-            curCanvasView.setTag(R.id.relevance_decided, visible);\n+                curCanvasView.setTag(R.id.relevance_decided, visible);\n \n-            if (object != null) {\n-                object.put(JsonFormConstants.IS_VISIBLE, visible);\n-                //Only keep track of required fields that are invisible\n-                if (object.has(JsonFormConstants.V_REQUIRED) && object.getJSONObject(JsonFormConstants.V_REQUIRED)\n-                        .getBoolean(JsonFormConstants.VALUE)) {\n-                    trackInvisibleFields(object, visible);\n+                if (object != null) {\n+                    object.put(JsonFormConstants.IS_VISIBLE, visible);\n+                    //Only keep track of required fields that are invisible\n+                    if (object.has(JsonFormConstants.V_REQUIRED) && object.getJSONObject(JsonFormConstants.V_REQUIRED)\n+                            .getBoolean(JsonFormConstants.VALUE)) {\n+                        trackInvisibleFields(object, visible);\n+                    }\n                 }\n             }\n         }\n-    }\n \n-    @SuppressLint(\"StaticFieldLeak\")\n-    private void trackInvisibleFields(final JSONObject object, final boolean visible) {\n-        new AsyncTask<Void, Void, Void>() {\n-            @Override\n-            protected Void doInBackground(Void... voids) {\n-                try {\n-                    synchronized (invisibleRequiredFields) {\n-                        if (visible) {\n-                            invisibleRequiredFields.remove(object.getString(JsonFormConstants.KEY));\n-                        } else {\n-                            invisibleRequiredFields.add(object.getString(JsonFormConstants.KEY));\n+        @SuppressLint(\"StaticFieldLeak\")\n+        private void trackInvisibleFields ( final JSONObject object, final boolean visible){\n+            new AsyncTask<Void, Void, Void>() {\n+                @Override\n+                protected Void doInBackground(Void... voids) {\n+                    try {\n+                        synchronized (invisibleRequiredFields) {\n+                            if (visible) {\n+                                invisibleRequiredFields.remove(object.getString(JsonFormConstants.KEY));\n+                            } else {\n+                                invisibleRequiredFields.add(object.getString(JsonFormConstants.KEY));\n+                            }\n+                            getmJSONObject().put(JsonFormConstants.INVISIBLE_REQUIRED_FIELDS, invisibleRequiredFields);\n                         }\n-                        getmJSONObject().put(JsonFormConstants.INVISIBLE_REQUIRED_FIELDS, invisibleRequiredFields);\n+                    } catch (JSONException e) {\n+                        Timber.e(e);\n                     }\n-                } catch (JSONException e) {\n-                    Timber.e(e);\n+                    return null;\n                 }\n-                return null;\n-            }\n-        }.execute();\n-    }\n-\n-    private void refreshViews(View childElement) {\n-        if (childElement instanceof ViewGroup) {\n-            childElement.setFocusable(true);\n-            ViewGroup group = (ViewGroup) childElement;\n-            refreshNumberSelector(group);\n-            for (int id = 0; id < group.getChildCount(); id++) {\n-                View child = group.getChildAt(id);\n-                if (child instanceof CheckBox) {\n-                    ((CheckBox) child).setChecked(false);\n-                } else if (child instanceof RadioButton) {\n-                    ((RadioButton) child).setChecked(false);\n-                } else if (child instanceof EditText) {\n-                    EditText editText = (EditText) child;\n-                    if (!TextUtils.isEmpty(editText.getText().toString())) {\n-                        editText.setText(\"\");\n+            }.execute();\n+        }\n+\n+        private void refreshViews (View childElement){\n+            if (childElement instanceof ViewGroup) {\n+                childElement.setFocusable(true);\n+                ViewGroup group = (ViewGroup) childElement;\n+                refreshNumberSelector(group);\n+                for (int id = 0; id < group.getChildCount(); id++) {\n+                    View child = group.getChildAt(id);\n+                    if (child instanceof CheckBox) {\n+                        ((CheckBox) child).setChecked(false);\n+                    } else if (child instanceof RadioButton) {\n+                        ((RadioButton) child).setChecked(false);\n+                    } else if (child instanceof EditText) {\n+                        EditText editText = (EditText) child;\n+                        if (!TextUtils.isEmpty(editText.getText().toString())) {\n+                            editText.setText(\"\");\n+                        }\n+                    } else if (child instanceof MaterialSpinner) {\n+                        MaterialSpinner spinner = (MaterialSpinner) child;\n+                        spinner.setSelected(false);\n+                    } else if (child instanceof CustomTextView) {\n+                        resetSelectedNumberBackground(child);\n+\n+                    } else if (child instanceof TextView && child.getId() == R.id.duration) {\n+                        // clear duration for custom date picker\n+                        ((TextView) child).setText(\"\");\n                     }\n-                } else if (child instanceof MaterialSpinner) {\n-                    MaterialSpinner spinner = (MaterialSpinner) child;\n-                    spinner.setSelected(false);\n-                } else if (child instanceof CustomTextView) {\n-                    resetSelectedNumberBackground(child);\n-\n-                } else if (child instanceof TextView && child.getId() == R.id.duration) {\n-                    // clear duration for custom date picker\n-                    ((TextView) child).setText(\"\");\n+                    refreshViews(group.getChildAt(id));\n                 }\n-                refreshViews(group.getChildAt(id));\n             }\n         }\n-    }\n \n-    private void refreshNumberSelector(View group) {\n-        //reset value for number selector linear layout\n-        if (group instanceof LinearLayout) {\n-            LinearLayout numSelectorLayout = (LinearLayout) group;\n-            if (numSelectorLayout.getTag(R.id.is_number_selector_linear_layout) != null &&\n-                    Boolean.TRUE.equals(numSelectorLayout.getTag(R.id.is_number_selector_linear_layout))) {\n-                numSelectorLayout.setTag(R.id.selected_number_value, null);\n+        private void refreshNumberSelector (View group){\n+            //reset value for number selector linear layout\n+            if (group instanceof LinearLayout) {\n+                LinearLayout numSelectorLayout = (LinearLayout) group;\n+                if (numSelectorLayout.getTag(R.id.is_number_selector_linear_layout) != null &&\n+                        Boolean.TRUE.equals(numSelectorLayout.getTag(R.id.is_number_selector_linear_layout))) {\n+                    numSelectorLayout.setTag(R.id.selected_number_value, null);\n+                }\n             }\n         }\n-    }\n \n-    /**\n-     * Resets the background of the selected text in number selector\n-     *\n-     * @param child Selected textview\n-     */\n-    private void resetSelectedNumberBackground(View child) {\n-        Drawable background = child.getBackground();\n-        if (background instanceof ColorDrawable) {\n-            int color = ((ColorDrawable) background).getColor();\n-            if (color == child.getContext().getResources().getColor(R.color.native_number_selector_selected)) {\n-                child.setBackgroundColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+        /**\n+         * Resets the background of the selected text in number selector\n+         *\n+         * @param child Selected textview\n+         */\n+        private void resetSelectedNumberBackground (View child){\n+            Drawable background = child.getBackground();\n+            if (background instanceof ColorDrawable) {\n+                int color = ((ColorDrawable) background).getColor();\n+                if (color == child.getContext().getResources().getColor(R.color.native_number_selector_selected)) {\n+                    child.setBackgroundColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+                }\n+            } else if (background instanceof GradientDrawable) {\n+                ((GradientDrawable) background)\n+                        .setColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n+                child.setBackground(background);\n             }\n-        } else if (background instanceof GradientDrawable) {\n-            ((GradientDrawable) background)\n-                    .setColor(child.getContext().getResources().getColor(R.color.native_number_selector));\n-            child.setBackground(background);\n+            ((CustomTextView) child).setTextColor(child.getContext().getResources().getColor(R.color.primary_text));\n         }\n-        ((CustomTextView) child).setTextColor(child.getContext().getResources().getColor(R.color.primary_text));\n-    }\n-\n-    public JSONArray getExtraFieldsWithValues() {\n-        return extraFieldsWithValues;\n-    }\n \n-    public void setExtraFieldsWithValues(JSONArray extraFieldsWithValues) {\n-        this.extraFieldsWithValues = extraFieldsWithValues;\n-    }\n+        public JSONArray getExtraFieldsWithValues () {\n+            return extraFieldsWithValues;\n+        }\n \n-    @Override\n-    protected void onStart() {\n-        super.onStart();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onStart();\n+        public void setExtraFieldsWithValues (JSONArray extraFieldsWithValues){\n+            this.extraFieldsWithValues = extraFieldsWithValues;\n         }\n-    }\n \n-    @Override\n-    protected void onStop() {\n-        super.onStop();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onStop();\n+        @Override\n+        protected void onStart () {\n+            super.onStart();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onStart();\n+            }\n         }\n-    }\n \n-    @Override\n-    protected void onDestroy() {\n-        super.onDestroy();\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onDestroy();\n+        @Override\n+        protected void onStop () {\n+            super.onStop();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onStop();\n+            }\n         }\n-    }\n \n-    @Override\n-    public void onSaveInstanceState(Bundle outState) {\n-        super.onSaveInstanceState(outState);\n-        outState.putString(JSON_STATE, mJSONObject.toString());\n-        outState.putSerializable(FORM_STATE, form);\n-        for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n-            lifeCycleListener.onSaveInstanceState(outState);\n+        @Override\n+        protected void onDestroy () {\n+            super.onDestroy();\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onDestroy();\n+            }\n         }\n-    }\n \n-    private String getTemplateValue(Object object) {\n-        StringBuilder result = new StringBuilder();\n-        if (object instanceof List) {\n-            List<String> valueList = (List<String>) object;\n-            for (int i = 0; i < valueList.size(); i++) {\n-                result.append(valueList.get(i));\n-                if (i != (valueList.size() - 1)) {\n-                    result.append(\", \");\n+        @Override\n+        public void onSaveInstanceState (Bundle outState){\n+            super.onSaveInstanceState(outState);\n+            outState.putString(JSON_STATE, mJSONObject.toString());\n+            outState.putSerializable(FORM_STATE, form);\n+            for (LifeCycleListener lifeCycleListener : lifeCycleListeners) {\n+                lifeCycleListener.onSaveInstanceState(outState);\n+            }\n+        }\n+\n+        private String getTemplateValue (Object object){\n+            StringBuilder result = new StringBuilder();\n+            if (object instanceof List) {\n+                List<String> valueList = (List<String>) object;\n+                for (int i = 0; i < valueList.size(); i++) {\n+                    result.append(valueList.get(i));\n+                    if (i != (valueList.size() - 1)) {\n+                        result.append(\", \");\n+                    }\n                 }\n+            } else {\n+                result.append(\n+                        object.toString().contains(\".0\") ? object.toString().substring(0, object.toString().indexOf(\".0\")) :\n+                                object.toString()); //Fix automatic conversion float bug\n             }\n-        } else {\n-            result.append(\n-                    object.toString().contains(\".0\") ? object.toString().substring(0, object.toString().indexOf(\".0\")) :\n-                            object.toString()); //Fix automatic conversion float bug\n+\n+            return result.toString();\n         }\n \n-        return result.toString();\n-    }\n+        public LocalBroadcastManager getLocalBroadcastManager () {\n+            return localBroadcastManager;\n+        }\n \n-    public LocalBroadcastManager getLocalBroadcastManager() {\n-        return localBroadcastManager;\n-    }\n+        private void cacheFormMapValues (String stepName, String parentKey, String childKey, String\n+        value){\n+            formValuesCacheMap.put(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey, value);\n+        }\n \n-    private void cacheFormMapValues(String stepName, String parentKey, String childKey, String\n-            value) {\n-        formValuesCacheMap.put(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey, value);\n-    }\n+        private boolean invokeRefreshLogic (String stepName, String parentKey, String\n+        childKey, String value){\n+            String oldValue = formValuesCacheMap.get(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey);\n \n-    private boolean invokeRefreshLogic(String stepName, String parentKey, String\n-            childKey, String value) {\n-        String oldValue = formValuesCacheMap.get(stepName + \"_\" + (parentKey != null ? parentKey + \"_\" : \"\") + childKey);\n+            return !value.equals(oldValue);\n \n-        return !value.equals(oldValue);\n+        }\n \n-    }\n+        protected boolean canHaveNumber (JSONObject object) throws JSONException {\n+            return isNumberWidget(object) || object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) ||\n+                    object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.SPINNER);\n+        }\n \n-    protected boolean canHaveNumber(JSONObject object) throws JSONException {\n-        return isNumberWidget(object) || object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.HIDDEN) ||\n-                object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.SPINNER);\n-    }\n+        protected boolean isNumberWidget (JSONObject object) throws JSONException {\n+            return object.has(JsonFormConstants.EDIT_TYPE) &&\n+                    object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n+                    object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n+        }\n \n-    protected boolean isNumberWidget(JSONObject object) throws JSONException {\n-        return object.has(JsonFormConstants.EDIT_TYPE) &&\n-                object.getString(JsonFormConstants.EDIT_TYPE).equals(JsonFormConstants.EDIT_TEXT_TYPE.NUMBER) ||\n-                object.getString(JsonFormConstants.TYPE).equals(JsonFormConstants.NUMBER_SELECTOR);\n-    }\n+        @Subscribe(threadMode = ThreadMode.MAIN)\n+        public void refreshExpansionPanel (RefreshExpansionPanelEvent refreshExpansionPanelEvent){\n+            if (refreshExpansionPanelEvent != null) {\n+                try {\n+                    List<String> values = getExpansionPanelValues(refreshExpansionPanelEvent);\n+                    LinearLayout linearLayout = refreshExpansionPanelEvent.getLinearLayout();\n+                    utils.enableExpansionPanelViews(linearLayout);\n+\n+                    RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n+                    ImageView status = layoutHeader.findViewById(R.id.statusImageView);\n+                    formUtils.updateExpansionPanelRecyclerView(values, status, getApplicationContext());\n+\n+                    LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n+                    LinearLayout mainContentView = contentLayout.findViewById(R.id.contentView);\n+                    formUtils.addValuesDisplay(values, mainContentView, getApplicationContext());\n+\n+                    LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n+                    Button undoButton = buttonLayout.findViewById(R.id.undo_button);\n+                    if (values.size() > 0) {\n+                        undoButton.setVisibility(View.VISIBLE);\n+                        contentLayout.setVisibility(View.VISIBLE);\n+                        buttonLayout.setVisibility(View.VISIBLE);\n+                    } else {\n+                        undoButton.setVisibility(View.GONE);\n+                        contentLayout.setVisibility(View.GONE);\n+                        buttonLayout.setVisibility(View.GONE);\n+                        status.setImageDrawable(this.getResources().getDrawable(R.drawable.icon_task_256));\n+                    }\n \n-    @Subscribe(threadMode = ThreadMode.MAIN)\n-    public void refreshExpansionPanel(RefreshExpansionPanelEvent refreshExpansionPanelEvent) {\n-        if (refreshExpansionPanelEvent != null) {\n-            try {\n-                List<String> values = getExpansionPanelValues(refreshExpansionPanelEvent);\n-                LinearLayout linearLayout = refreshExpansionPanelEvent.getLinearLayout();\n-                utils.enableExpansionPanelViews(linearLayout);\n-\n-                RelativeLayout layoutHeader = (RelativeLayout) linearLayout.getChildAt(0);\n-                ImageView status = layoutHeader.findViewById(R.id.statusImageView);\n-                formUtils.updateExpansionPanelRecyclerView(values, status, getApplicationContext());\n-\n-                LinearLayout contentLayout = (LinearLayout) linearLayout.getChildAt(1);\n-                LinearLayout mainContentView = contentLayout.findViewById(R.id.contentView);\n-                formUtils.addValuesDisplay(values, mainContentView, getApplicationContext());\n-\n-                LinearLayout buttonLayout = contentLayout.findViewById(R.id.accordion_bottom_navigation);\n-                Button undoButton = buttonLayout.findViewById(R.id.undo_button);\n-                if (values.size() > 0) {\n-                    undoButton.setVisibility(View.VISIBLE);\n-                    contentLayout.setVisibility(View.VISIBLE);\n-                    buttonLayout.setVisibility(View.VISIBLE);\n-                } else {\n-                    undoButton.setVisibility(View.GONE);\n-                    contentLayout.setVisibility(View.GONE);\n-                    buttonLayout.setVisibility(View.GONE);\n-                    status.setImageDrawable(this.getResources().getDrawable(R.drawable.icon_task_256));\n+                } catch (JSONException e) {\n+                    Timber.e(e, \"JsonFormActivity --> refreshExpansionPanel\");\n                 }\n-\n-            } catch (JSONException e) {\n-                Timber.e(e, \"JsonFormActivity --> refreshExpansionPanel\");\n             }\n         }\n-    }\n \n-    /**\n-     * Get the expansion panel values from the Refresh Expansion panel event {@link RefreshExpansionPanelEvent}\n-     *\n-     * @param refreshExpansionPanelEvent {@link RefreshExpansionPanelEvent}\n-     * @return values {@link List<String>}\n-     * @throws JSONException\n-     */\n-    private List<String> getExpansionPanelValues(RefreshExpansionPanelEvent refreshExpansionPanelEvent) throws JSONException {\n-        List<String> values;\n-        if (refreshExpansionPanelEvent.getValues() != null) {\n-            values = utils.createExpansionPanelChildren(refreshExpansionPanelEvent.getValues());\n-        } else {\n-            values = new ArrayList<>();\n+        /**\n+         * Get the expansion panel values from the Refresh Expansion panel event {@link RefreshExpansionPanelEvent}\n+         *\n+         * @param refreshExpansionPanelEvent {@link RefreshExpansionPanelEvent}\n+         * @return values {@link List<String>}\n+         * @throws JSONException\n+         */\n+        private List<String> getExpansionPanelValues (RefreshExpansionPanelEvent\n+        refreshExpansionPanelEvent) throws JSONException {\n+            List<String> values;\n+            if (refreshExpansionPanelEvent.getValues() != null) {\n+                values = utils.createExpansionPanelChildren(refreshExpansionPanelEvent.getValues());\n+            } else {\n+                values = new ArrayList<>();\n+            }\n+            return values;\n         }\n-        return values;\n-    }\n-}\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n"}}, {"oid": "cacc36927562c8df4d22ee480804a3b415757233", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/cacc36927562c8df4d22ee480804a3b415757233", "message": ":ok_hand: Fix review requests", "committedDate": "2020-05-08T11:53:10Z", "type": "commit"}, {"oid": "6fab247e480f47616c2747f8c49c8ae4e62ee783", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/6fab247e480f47616c2747f8c49c8ae4e62ee783", "message": ":zap: fix missing bracket", "committedDate": "2020-05-08T11:53:55Z", "type": "commit"}, {"oid": "bca7c6ecdc794ab9cfa909bec67a6d04d8aa3ec1", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/bca7c6ecdc794ab9cfa909bec67a6d04d8aa3ec1", "message": ":zap: add the toasternote factory test", "committedDate": "2020-05-11T09:09:09Z", "type": "commit"}, {"oid": "7b78519a916ce22c1a196f20af2ab8841a72c461", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/7b78519a916ce22c1a196f20af2ab8841a72c461", "message": ":zap: fix the gradle version", "committedDate": "2020-05-11T09:13:26Z", "type": "commit"}, {"oid": "4c8b191172e9acf067d12d18eca6b1e83851ba99", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/4c8b191172e9acf067d12d18eca6b1e83851ba99", "message": ":heavy_check_mark: update the toaster notes tests", "committedDate": "2020-05-11T13:24:09Z", "type": "commit"}, {"oid": "2f80340631612640e8ae9eca4469b436af7c993e", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/2f80340631612640e8ae9eca4469b436af7c993e", "message": ":zap: update the travis config", "committedDate": "2020-05-11T14:35:31Z", "type": "commit"}, {"oid": "a1e482074d216b68c560efe4ee4bbf3871879f22", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/a1e482074d216b68c560efe4ee4bbf3871879f22", "message": ":zap: Update the coveralls build command", "committedDate": "2020-05-11T14:40:08Z", "type": "commit"}, {"oid": "58adec03a886488bbe0d2d6987a14cc7db2e9ec4", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/58adec03a886488bbe0d2d6987a14cc7db2e9ec4", "message": "fix the build script", "committedDate": "2020-05-11T14:46:08Z", "type": "commit"}, {"oid": "a47dea1e4e0680b0ad17d54800d5421e9a849777", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/a47dea1e4e0680b0ad17d54800d5421e9a849777", "message": "update the android version", "committedDate": "2020-05-11T15:02:03Z", "type": "commit"}, {"oid": "e0855ec9013a060d13fddc23d37a4fe28a8c75f5", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/e0855ec9013a060d13fddc23d37a4fe28a8c75f5", "message": ":zap: remove the time wait on travis excution", "committedDate": "2020-05-12T07:46:46Z", "type": "commit"}, {"oid": "041b4af7c7ea1665a8c2f940180eb8061fa7b2a6", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/041b4af7c7ea1665a8c2f940180eb8061fa7b2a6", "message": ":zap: update the tests to check the exact views expected in the view list", "committedDate": "2020-05-12T22:18:47Z", "type": "commit"}, {"oid": "57a00c9b713ba0d47ae21973cb56cfd7275e2f0d", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/57a00c9b713ba0d47ae21973cb56cfd7275e2f0d", "message": ":zap: Uncomment require dependecies configs", "committedDate": "2020-05-12T22:19:47Z", "type": "commit"}, {"oid": "5012cc687db7bebc0aa1058ec2654790fdc43adc", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/5012cc687db7bebc0aa1058ec2654790fdc43adc", "message": "Merge branch 'master' of github.com:OpenSRP/opensrp-client-native-form into feature/fix_radio_readonly_with_relevance", "committedDate": "2020-05-13T07:30:43Z", "type": "commit"}, {"oid": "7c3c863fcb9318691b89cbc4a97195e8424f369b", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/7c3c863fcb9318691b89cbc4a97195e8424f369b", "message": ":ok_hand: remove unused variables", "committedDate": "2020-05-13T07:36:49Z", "type": "commit"}, {"oid": "75837effe9cf4ad220a4d94aa9234c8723577c64", "url": "https://github.com/opensrp/opensrp-client-native-form/commit/75837effe9cf4ad220a4d94aa9234c8723577c64", "message": ":heavy_check_mark: Test the `setReadOnlyRadioButtonOptions` method", "committedDate": "2020-05-13T08:09:56Z", "type": "commit"}]}