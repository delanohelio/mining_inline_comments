{"pr_number": 2167, "pr_title": "Add Warehouse to store and manage parts", "pr_createdAt": "2020-10-26T21:34:32Z", "pr_url": "https://github.com/MegaMek/mekhq/pull/2167", "timeline": [{"oid": "c370978011d8243ec96eb134b8155d04bdbe5317", "url": "https://github.com/MegaMek/mekhq/commit/c370978011d8243ec96eb134b8155d04bdbe5317", "message": "Add a warehouse type to manage parts", "committedDate": "2020-10-26T18:53:19Z", "type": "commit"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "url": "https://github.com/MegaMek/mekhq/commit/851026ff48ec4e39238b2c56212bac2ea7993670", "message": "Use new Warehouse type in Campaign (etc)", "committedDate": "2020-10-26T18:53:19Z", "type": "commit"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "url": "https://github.com/MegaMek/mekhq/commit/37fc5840de9bf6c5bb19b38767e1394be220e1b9", "message": "Move some event logic to the Warehouse", "committedDate": "2020-10-26T20:02:30Z", "type": "commit"}, {"oid": "7402125580b873b9d5570ea7cd0a3849327f9829", "url": "https://github.com/MegaMek/mekhq/commit/7402125580b873b9d5570ea7cd0a3849327f9829", "message": "Add tests for warehouse part additions", "committedDate": "2020-10-26T20:06:55Z", "type": "commit"}, {"oid": "5c80dd28f3909cf9a37ee1594a31faaa48497539", "url": "https://github.com/MegaMek/mekhq/commit/5c80dd28f3909cf9a37ee1594a31faaa48497539", "message": "Add part removal tests", "committedDate": "2020-10-26T21:07:35Z", "type": "commit"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "url": "https://github.com/MegaMek/mekhq/commit/3f795a2b3ba1840a198ca067a1d76aed4429f699", "message": "Move removing child parts to the Warehouse", "committedDate": "2020-10-26T21:26:50Z", "type": "commit"}, {"oid": "b3ee473cf2d5c36178de74b70758419aa406cafe", "url": "https://github.com/MegaMek/mekhq/commit/b3ee473cf2d5c36178de74b70758419aa406cafe", "message": "Fix whitespace oddity", "committedDate": "2020-10-26T21:38:28Z", "type": "commit"}, {"oid": "5ba1a765f98db585f56969e58e3459ef108e8728", "url": "https://github.com/MegaMek/mekhq/commit/5ba1a765f98db585f56969e58e3459ef108e8728", "message": "Remove Java 11 Optional::isEmpty usage", "committedDate": "2020-10-26T22:00:41Z", "type": "commit"}, {"oid": "cf0401d0d052b0961d6fff62671bb7019836f6b1", "url": "https://github.com/MegaMek/mekhq/commit/cf0401d0d052b0961d6fff62671bb7019836f6b1", "message": "Add tests for merging parts", "committedDate": "2020-10-27T19:17:08Z", "type": "commit"}, {"oid": "cb06edc43781a77c08bed8f4a86c5c5b63f0a2db", "url": "https://github.com/MegaMek/mekhq/commit/cb06edc43781a77c08bed8f4a86c5c5b63f0a2db", "message": "Add tests covering not merging spares with refits and replacements", "committedDate": "2020-10-27T20:42:42Z", "type": "commit"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "url": "https://github.com/MegaMek/mekhq/commit/c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "message": "Move spare part helpers to Warehouse and add tests", "committedDate": "2020-10-27T21:22:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0ODQwOA==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513048408", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Armor a = (Armor)campaign.getWarehouse().findSparePart(part -> {\n          \n          \n            \n                    Armor a = (Armor) campaign.getWarehouse().findSparePart(part -> {", "author": "Windchild292", "createdAt": "2020-10-27T21:38:47Z", "path": "MekHQ/src/mekhq/campaign/parts/Armor.java", "diffHunk": "@@ -565,7 +565,7 @@ public boolean isEnoughSpareArmorAvailable() {\n     }\n \n     public int getAmountAvailable() {\n-        Armor a = (Armor)campaign.findSparePart(part -> {\n+        Armor a = (Armor)campaign.getWarehouse().findSparePart(part -> {", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/parts/Armor.java b/MekHQ/src/mekhq/campaign/parts/Armor.java\nindex e8f615fc9..c29d73dba 100644\n--- a/MekHQ/src/mekhq/campaign/parts/Armor.java\n+++ b/MekHQ/src/mekhq/campaign/parts/Armor.java\n\n@@ -565,7 +565,7 @@ public class Armor extends Part implements IAcquisitionWork {\n     }\n \n     public int getAmountAvailable() {\n-        Armor a = (Armor)campaign.getWarehouse().findSparePart(part -> {\n+        Armor a = (Armor) campaign.getWarehouse().findSparePart(part -> {\n             return part instanceof Armor\n                 && part.isPresent()\n                 && !part.isReservedForRefit()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0ODQ2MQ==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513048461", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Armor a = (Armor)campaign.getWarehouse().findSparePart(part -> {\n          \n          \n            \n                    Armor a = (Armor) campaign.getWarehouse().findSparePart(part -> {", "author": "Windchild292", "createdAt": "2020-10-27T21:38:53Z", "path": "MekHQ/src/mekhq/campaign/parts/Armor.java", "diffHunk": "@@ -576,7 +576,7 @@ public int getAmountAvailable() {\n     }\n \n     public void changeAmountAvailable(int amount) {\n-        Armor a = (Armor)campaign.findSparePart(part -> {\n+        Armor a = (Armor)campaign.getWarehouse().findSparePart(part -> {", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/parts/Armor.java b/MekHQ/src/mekhq/campaign/parts/Armor.java\nindex e8f615fc9..c29d73dba 100644\n--- a/MekHQ/src/mekhq/campaign/parts/Armor.java\n+++ b/MekHQ/src/mekhq/campaign/parts/Armor.java\n\n@@ -576,7 +576,7 @@ public class Armor extends Part implements IAcquisitionWork {\n     }\n \n     public void changeAmountAvailable(int amount) {\n-        Armor a = (Armor)campaign.getWarehouse().findSparePart(part -> {\n+        Armor a = (Armor) campaign.getWarehouse().findSparePart(part -> {\n             return (part instanceof Armor)\n                 && part.isPresent()\n                 && Objects.equals(getRefitUnit(), part.getRefitUnit())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0ODYyMw==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513048623", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BaArmor a = (BaArmor)campaign.getWarehouse().findSparePart(part -> {\n          \n          \n            \n                    BaArmor a = (BaArmor) campaign.getWarehouse().findSparePart(part -> {", "author": "Windchild292", "createdAt": "2020-10-27T21:39:10Z", "path": "MekHQ/src/mekhq/campaign/parts/BaArmor.java", "diffHunk": "@@ -153,7 +153,7 @@ public Part getNewPart() {\n     }\n \n     public int getAmountAvailable() {\n-        BaArmor a = (BaArmor)campaign.findSparePart(part -> {\n+        BaArmor a = (BaArmor)campaign.getWarehouse().findSparePart(part -> {", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/parts/BaArmor.java b/MekHQ/src/mekhq/campaign/parts/BaArmor.java\nindex 675ef51b4..55ba7fac3 100644\n--- a/MekHQ/src/mekhq/campaign/parts/BaArmor.java\n+++ b/MekHQ/src/mekhq/campaign/parts/BaArmor.java\n\n@@ -153,7 +153,7 @@ public class BaArmor extends Armor implements IAcquisitionWork {\n     }\n \n     public int getAmountAvailable() {\n-        BaArmor a = (BaArmor)campaign.getWarehouse().findSparePart(part -> {\n+        BaArmor a = (BaArmor) campaign.getWarehouse().findSparePart(part -> {\n             return part instanceof BaArmor\n                 && part.isPresent()\n                 && !part.isReservedForRefit()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0ODY4NQ==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513048685", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BaArmor a = (BaArmor)campaign.getWarehouse().findSparePart(part -> {\n          \n          \n            \n                    BaArmor a = (BaArmor) campaign.getWarehouse().findSparePart(part -> {", "author": "Windchild292", "createdAt": "2020-10-27T21:39:15Z", "path": "MekHQ/src/mekhq/campaign/parts/BaArmor.java", "diffHunk": "@@ -166,7 +166,7 @@ public int getAmountAvailable() {\n \n     @Override\n     public void changeAmountAvailable(int amount) {\n-        BaArmor a = (BaArmor)campaign.findSparePart(part -> {\n+        BaArmor a = (BaArmor)campaign.getWarehouse().findSparePart(part -> {", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/parts/BaArmor.java b/MekHQ/src/mekhq/campaign/parts/BaArmor.java\nindex 675ef51b4..55ba7fac3 100644\n--- a/MekHQ/src/mekhq/campaign/parts/BaArmor.java\n+++ b/MekHQ/src/mekhq/campaign/parts/BaArmor.java\n\n@@ -166,7 +166,7 @@ public class BaArmor extends Armor implements IAcquisitionWork {\n \n     @Override\n     public void changeAmountAvailable(int amount) {\n-        BaArmor a = (BaArmor)campaign.getWarehouse().findSparePart(part -> {\n+        BaArmor a = (BaArmor) campaign.getWarehouse().findSparePart(part -> {\n             return isSamePartType(part)\n                 && part.isPresent();\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1MDEyNg==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513050126", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ProtomekArmor a = (ProtomekArmor)campaign.getWarehouse().findSparePart(part -> {\n          \n          \n            \n                    ProtomekArmor a = (ProtomekArmor) campaign.getWarehouse().findSparePart(part -> {", "author": "Windchild292", "createdAt": "2020-10-27T21:42:03Z", "path": "MekHQ/src/mekhq/campaign/parts/ProtomekArmor.java", "diffHunk": "@@ -123,7 +123,7 @@ public Part getNewPart() {\n     }\n \n     public int getAmountAvailable() {\n-        ProtomekArmor a = (ProtomekArmor)campaign.findSparePart(part -> {\n+        ProtomekArmor a = (ProtomekArmor)campaign.getWarehouse().findSparePart(part -> {", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/parts/ProtomekArmor.java b/MekHQ/src/mekhq/campaign/parts/ProtomekArmor.java\nindex 7a416ffb5..128b86a5d 100644\n--- a/MekHQ/src/mekhq/campaign/parts/ProtomekArmor.java\n+++ b/MekHQ/src/mekhq/campaign/parts/ProtomekArmor.java\n\n@@ -123,7 +123,7 @@ public class ProtomekArmor extends Armor implements IAcquisitionWork {\n     }\n \n     public int getAmountAvailable() {\n-        ProtomekArmor a = (ProtomekArmor)campaign.getWarehouse().findSparePart(part -> {\n+        ProtomekArmor a = (ProtomekArmor) campaign.getWarehouse().findSparePart(part -> {\n             return part instanceof ProtomekArmor\n                 && part.isPresent()\n                 && !part.isReservedForRefit()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1MDIyNg==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513050226", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ProtomekArmor a = (ProtomekArmor)campaign.getWarehouse().findSparePart(part -> {\n          \n          \n            \n                    ProtomekArmor a = (ProtomekArmor) campaign.getWarehouse().findSparePart(part -> {", "author": "Windchild292", "createdAt": "2020-10-27T21:42:16Z", "path": "MekHQ/src/mekhq/campaign/parts/ProtomekArmor.java", "diffHunk": "@@ -135,7 +135,7 @@ public int getAmountAvailable() {\n     }\n \n     public void changeAmountAvailable(int amount) {\n-        ProtomekArmor a = (ProtomekArmor)campaign.findSparePart(part -> {\n+        ProtomekArmor a = (ProtomekArmor)campaign.getWarehouse().findSparePart(part -> {", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/parts/ProtomekArmor.java b/MekHQ/src/mekhq/campaign/parts/ProtomekArmor.java\nindex 7a416ffb5..128b86a5d 100644\n--- a/MekHQ/src/mekhq/campaign/parts/ProtomekArmor.java\n+++ b/MekHQ/src/mekhq/campaign/parts/ProtomekArmor.java\n\n@@ -135,7 +135,7 @@ public class ProtomekArmor extends Armor implements IAcquisitionWork {\n     }\n \n     public void changeAmountAvailable(int amount) {\n-        ProtomekArmor a = (ProtomekArmor)campaign.getWarehouse().findSparePart(part -> {\n+        ProtomekArmor a = (ProtomekArmor) campaign.getWarehouse().findSparePart(part -> {\n             return isSamePartType(part)\n                 && part.isPresent();\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1MDM2OA==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513050368", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SVArmor a = (SVArmor)campaign.getWarehouse().findSparePart(part -> {\n          \n          \n            \n                    SVArmor a = (SVArmor) campaign.getWarehouse().findSparePart(part -> {", "author": "Windchild292", "createdAt": "2020-10-27T21:42:32Z", "path": "MekHQ/src/mekhq/campaign/parts/SVArmor.java", "diffHunk": "@@ -131,7 +131,7 @@ public Part getNewPart() {\n     }\n \n     public int getAmountAvailable() {\n-        SVArmor a = (SVArmor)campaign.findSparePart(part -> {\n+        SVArmor a = (SVArmor)campaign.getWarehouse().findSparePart(part -> {", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/parts/SVArmor.java b/MekHQ/src/mekhq/campaign/parts/SVArmor.java\nindex aa1d91e8e..41df1724a 100644\n--- a/MekHQ/src/mekhq/campaign/parts/SVArmor.java\n+++ b/MekHQ/src/mekhq/campaign/parts/SVArmor.java\n\n@@ -131,7 +131,7 @@ public class SVArmor extends Armor {\n     }\n \n     public int getAmountAvailable() {\n-        SVArmor a = (SVArmor)campaign.getWarehouse().findSparePart(part -> {\n+        SVArmor a = (SVArmor) campaign.getWarehouse().findSparePart(part -> {\n             return isSamePartType(part)\n                 && part.isPresent()\n                 && !part.isReservedForRefit();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1MDQxMA==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513050410", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SVArmor a = (SVArmor)campaign.getWarehouse().findSparePart(part -> {\n          \n          \n            \n                    SVArmor a = (SVArmor) campaign.getWarehouse().findSparePart(part -> {", "author": "Windchild292", "createdAt": "2020-10-27T21:42:38Z", "path": "MekHQ/src/mekhq/campaign/parts/SVArmor.java", "diffHunk": "@@ -141,7 +141,7 @@ public int getAmountAvailable() {\n     }\n \n     public void changeAmountAvailable(int amount) {\n-        SVArmor a = (SVArmor)campaign.findSparePart(part -> {\n+        SVArmor a = (SVArmor)campaign.getWarehouse().findSparePart(part -> {", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/parts/SVArmor.java b/MekHQ/src/mekhq/campaign/parts/SVArmor.java\nindex aa1d91e8e..41df1724a 100644\n--- a/MekHQ/src/mekhq/campaign/parts/SVArmor.java\n+++ b/MekHQ/src/mekhq/campaign/parts/SVArmor.java\n\n@@ -141,7 +141,7 @@ public class SVArmor extends Armor {\n     }\n \n     public void changeAmountAvailable(int amount) {\n-        SVArmor a = (SVArmor)campaign.getWarehouse().findSparePart(part -> {\n+        SVArmor a = (SVArmor) campaign.getWarehouse().findSparePart(part -> {\n             return isSamePartType(part)\n                 && part.isPresent()\n                 && Objects.equals(getRefitUnit(), part.getRefitUnit());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NDExOA==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513054118", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n          \n          \n            \n             * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.", "author": "Windchild292", "createdAt": "2020-10-27T21:50:30Z", "path": "MekHQ/unittests/mekhq/EventSpy.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/unittests/mekhq/EventSpy.java b/MekHQ/unittests/mekhq/EventSpy.java\nindex b3506868a..1cfdaddef 100644\n--- a/MekHQ/unittests/mekhq/EventSpy.java\n+++ b/MekHQ/unittests/mekhq/EventSpy.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NDE2Mg==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513054162", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Windchild292", "createdAt": "2020-10-27T21:50:35Z", "path": "MekHQ/unittests/mekhq/EventSpy.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NTA2NA==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513055064", "bodyText": "Double spacing is an accessibility issue.", "author": "Windchild292", "createdAt": "2020-10-27T21:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NDE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/unittests/mekhq/EventSpy.java b/MekHQ/unittests/mekhq/EventSpy.java\nindex b3506868a..1cfdaddef 100644\n--- a/MekHQ/unittests/mekhq/EventSpy.java\n+++ b/MekHQ/unittests/mekhq/EventSpy.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NDg5NA==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513054894", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return The list of events which occurred, in order\n          \n          \n            \n                 * @return The list of events which occurred, in the order", "author": "Windchild292", "createdAt": "2020-10-27T21:52:10Z", "path": "MekHQ/unittests/mekhq/EventSpy.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import megamek.common.annotations.Nullable;\n+import megamek.common.event.MMEvent;\n+import megamek.common.event.Subscribe;\n+import mekhq.campaign.event.*;\n+\n+/**\n+ * Provides a list of events captured during its lifetime.\n+ * Use this as part of a try-with-resources block.\n+ *\n+ * If you need to listen to a new event, add a handler to this\n+ * class.\n+ */\n+public class EventSpy implements AutoCloseable {\n+    private final List<MMEvent> events = new ArrayList<>();\n+\n+    /**\n+     * Creates a new EventSpy and registers it with\n+     * MekHQ's event bus.\n+     */\n+    public EventSpy() {\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * Deregisters this instance from MekHQ's event bus.\n+     */\n+    public void close() {\n+        MekHQ.unregisterHandler(this);\n+    }\n+\n+    /**\n+     * Gets the list of events which occurred.\n+     * @return The list of events which occurred, in order", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/unittests/mekhq/EventSpy.java b/MekHQ/unittests/mekhq/EventSpy.java\nindex b3506868a..1cfdaddef 100644\n--- a/MekHQ/unittests/mekhq/EventSpy.java\n+++ b/MekHQ/unittests/mekhq/EventSpy.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NjE0MQ==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513056141", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n          \n          \n            \n             * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.", "author": "Windchild292", "createdAt": "2020-10-27T21:54:49Z", "path": "MekHQ/unittests/mekhq/campaign/WarehouseTest.java", "diffHunk": "@@ -0,0 +1,1020 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5588a2cabc37ca4b8378bdea52ba85152b994b3e", "chunk": "diff --git a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\nindex 3f9020e71..4d69329fd 100644\n--- a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n+++ b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NjE5Mw==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513056193", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Windchild292", "createdAt": "2020-10-27T21:54:54Z", "path": "MekHQ/unittests/mekhq/campaign/WarehouseTest.java", "diffHunk": "@@ -0,0 +1,1020 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5588a2cabc37ca4b8378bdea52ba85152b994b3e", "chunk": "diff --git a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\nindex 3f9020e71..4d69329fd 100644\n--- a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n+++ b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NzMxMw==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513057313", "bodyText": "This can almost certainly be simplified into a single line.", "author": "Windchild292", "createdAt": "2020-10-27T21:57:25Z", "path": "MekHQ/unittests/mekhq/campaign/WarehouseTest.java", "diffHunk": "@@ -0,0 +1,1020 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign;\n+\n+import org.junit.Test;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.Mech;\n+import mekhq.EventSpy;\n+import mekhq.campaign.event.PartChangedEvent;\n+import mekhq.campaign.event.PartNewEvent;\n+import mekhq.campaign.event.PartRemovedEvent;\n+import mekhq.campaign.parts.AmmoStorage;\n+import mekhq.campaign.parts.Armor;\n+import mekhq.campaign.parts.MekLocation;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+public class WarehouseTest {\n+    @Test\n+    public void testWarehouseSimplePartActions() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // A new warehouse is empty\n+        assertTrue(warehouse.getParts().isEmpty());\n+\n+        // Create a mock part\n+        int mockId = 10;\n+        Part mockPart = mock(Part.class);\n+        when(mockPart.getId()).thenReturn(mockId);\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart);\n+\n+        // The part should be returned when we get it by ID\n+        assertEquals(mockPart, warehouse.getPart(mockId));\n+\n+        // forEachPart should have our part\n+        warehouse.forEachPart(p -> {\n+            // There should only be one part in the warehouse\n+            // and it should be our part\n+            assertEquals(mockPart, p);\n+        });\n+\n+        // getParts should return the part\n+        assertTrue(warehouse.getParts().contains(mockPart));\n+\n+        // The part should also be removed when we request it\n+        assertTrue(warehouse.removePart(mockPart));\n+\n+        // And the part should no longer be in the warehouse\n+        assertNull(warehouse.getPart(mockId));\n+\n+        // We should not run over any part once removed\n+        warehouse.forEachPart(p -> {\n+            assertTrue(false);\n+        });", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5588a2cabc37ca4b8378bdea52ba85152b994b3e", "chunk": "diff --git a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\nindex 3f9020e71..4d69329fd 100644\n--- a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n+++ b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NzYxMQ==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513057611", "bodyText": "This can almost certainly be simplified into a single line of test with the explanation before.", "author": "Windchild292", "createdAt": "2020-10-27T21:58:06Z", "path": "MekHQ/unittests/mekhq/campaign/WarehouseTest.java", "diffHunk": "@@ -0,0 +1,1020 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign;\n+\n+import org.junit.Test;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.Mech;\n+import mekhq.EventSpy;\n+import mekhq.campaign.event.PartChangedEvent;\n+import mekhq.campaign.event.PartNewEvent;\n+import mekhq.campaign.event.PartRemovedEvent;\n+import mekhq.campaign.parts.AmmoStorage;\n+import mekhq.campaign.parts.Armor;\n+import mekhq.campaign.parts.MekLocation;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+public class WarehouseTest {\n+    @Test\n+    public void testWarehouseSimplePartActions() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // A new warehouse is empty\n+        assertTrue(warehouse.getParts().isEmpty());\n+\n+        // Create a mock part\n+        int mockId = 10;\n+        Part mockPart = mock(Part.class);\n+        when(mockPart.getId()).thenReturn(mockId);\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart);\n+\n+        // The part should be returned when we get it by ID\n+        assertEquals(mockPart, warehouse.getPart(mockId));\n+\n+        // forEachPart should have our part\n+        warehouse.forEachPart(p -> {\n+            // There should only be one part in the warehouse\n+            // and it should be our part\n+            assertEquals(mockPart, p);\n+        });", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5588a2cabc37ca4b8378bdea52ba85152b994b3e", "chunk": "diff --git a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\nindex 3f9020e71..4d69329fd 100644\n--- a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n+++ b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NzcwMQ==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513057701", "bodyText": "Same here", "author": "Windchild292", "createdAt": "2020-10-27T21:58:19Z", "path": "MekHQ/unittests/mekhq/campaign/WarehouseTest.java", "diffHunk": "@@ -0,0 +1,1020 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign;\n+\n+import org.junit.Test;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.Mech;\n+import mekhq.EventSpy;\n+import mekhq.campaign.event.PartChangedEvent;\n+import mekhq.campaign.event.PartNewEvent;\n+import mekhq.campaign.event.PartRemovedEvent;\n+import mekhq.campaign.parts.AmmoStorage;\n+import mekhq.campaign.parts.Armor;\n+import mekhq.campaign.parts.MekLocation;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+public class WarehouseTest {\n+    @Test\n+    public void testWarehouseSimplePartActions() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // A new warehouse is empty\n+        assertTrue(warehouse.getParts().isEmpty());\n+\n+        // Create a mock part\n+        int mockId = 10;\n+        Part mockPart = mock(Part.class);\n+        when(mockPart.getId()).thenReturn(mockId);\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart);\n+\n+        // The part should be returned when we get it by ID\n+        assertEquals(mockPart, warehouse.getPart(mockId));\n+\n+        // forEachPart should have our part\n+        warehouse.forEachPart(p -> {\n+            // There should only be one part in the warehouse\n+            // and it should be our part\n+            assertEquals(mockPart, p);\n+        });\n+\n+        // getParts should return the part\n+        assertTrue(warehouse.getParts().contains(mockPart));\n+\n+        // The part should also be removed when we request it\n+        assertTrue(warehouse.removePart(mockPart));\n+\n+        // And the part should no longer be in the warehouse\n+        assertNull(warehouse.getPart(mockId));\n+\n+        // We should not run over any part once removed\n+        warehouse.forEachPart(p -> {\n+            assertTrue(false);\n+        });\n+\n+        // getParts should no longer contain anything\n+        assertTrue(warehouse.getParts().isEmpty());\n+    }\n+\n+    @Test\n+    public void testWarehouseAddNewPart() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // Create a mock part without an ID\n+        Part mockPart = mock(Part.class, RETURNS_DEEP_STUBS);\n+        when(mockPart.getId()).thenCallRealMethod();\n+        doCallRealMethod().when(mockPart).setId(anyInt());\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart);\n+\n+        // We should have been assigned an ID\n+        assertTrue(mockPart.getId() > 0);\n+\n+        // The part should be returned when we get it by ID\n+        assertEquals(mockPart, warehouse.getPart(mockPart.getId()));\n+\n+        // forEachPart should have our part\n+        warehouse.forEachPart(p -> {\n+            // There should only be one part in the warehouse\n+            // and it should be our part\n+            assertEquals(mockPart, p);\n+        });", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5588a2cabc37ca4b8378bdea52ba85152b994b3e", "chunk": "diff --git a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\nindex 3f9020e71..4d69329fd 100644\n--- a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n+++ b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1Nzc5NQ==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513057795", "bodyText": "And here", "author": "Windchild292", "createdAt": "2020-10-27T21:58:34Z", "path": "MekHQ/unittests/mekhq/campaign/WarehouseTest.java", "diffHunk": "@@ -0,0 +1,1020 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign;\n+\n+import org.junit.Test;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.Mech;\n+import mekhq.EventSpy;\n+import mekhq.campaign.event.PartChangedEvent;\n+import mekhq.campaign.event.PartNewEvent;\n+import mekhq.campaign.event.PartRemovedEvent;\n+import mekhq.campaign.parts.AmmoStorage;\n+import mekhq.campaign.parts.Armor;\n+import mekhq.campaign.parts.MekLocation;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+public class WarehouseTest {\n+    @Test\n+    public void testWarehouseSimplePartActions() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // A new warehouse is empty\n+        assertTrue(warehouse.getParts().isEmpty());\n+\n+        // Create a mock part\n+        int mockId = 10;\n+        Part mockPart = mock(Part.class);\n+        when(mockPart.getId()).thenReturn(mockId);\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart);\n+\n+        // The part should be returned when we get it by ID\n+        assertEquals(mockPart, warehouse.getPart(mockId));\n+\n+        // forEachPart should have our part\n+        warehouse.forEachPart(p -> {\n+            // There should only be one part in the warehouse\n+            // and it should be our part\n+            assertEquals(mockPart, p);\n+        });\n+\n+        // getParts should return the part\n+        assertTrue(warehouse.getParts().contains(mockPart));\n+\n+        // The part should also be removed when we request it\n+        assertTrue(warehouse.removePart(mockPart));\n+\n+        // And the part should no longer be in the warehouse\n+        assertNull(warehouse.getPart(mockId));\n+\n+        // We should not run over any part once removed\n+        warehouse.forEachPart(p -> {\n+            assertTrue(false);\n+        });\n+\n+        // getParts should no longer contain anything\n+        assertTrue(warehouse.getParts().isEmpty());\n+    }\n+\n+    @Test\n+    public void testWarehouseAddNewPart() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // Create a mock part without an ID\n+        Part mockPart = mock(Part.class, RETURNS_DEEP_STUBS);\n+        when(mockPart.getId()).thenCallRealMethod();\n+        doCallRealMethod().when(mockPart).setId(anyInt());\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart);\n+\n+        // We should have been assigned an ID\n+        assertTrue(mockPart.getId() > 0);\n+\n+        // The part should be returned when we get it by ID\n+        assertEquals(mockPart, warehouse.getPart(mockPart.getId()));\n+\n+        // forEachPart should have our part\n+        warehouse.forEachPart(p -> {\n+            // There should only be one part in the warehouse\n+            // and it should be our part\n+            assertEquals(mockPart, p);\n+        });\n+\n+        // getParts should return the part\n+        assertTrue(warehouse.getParts().contains(mockPart));\n+\n+        // The part should also be removed when we request it\n+        assertTrue(warehouse.removePart(mockPart));\n+\n+        // And the part should no longer be in the warehouse\n+        assertNull(warehouse.getPart(mockPart.getId()));\n+\n+        // We should not run over any part once removed\n+        warehouse.forEachPart(p -> {\n+            assertTrue(false);\n+        });", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5588a2cabc37ca4b8378bdea52ba85152b994b3e", "chunk": "diff --git a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\nindex 3f9020e71..4d69329fd 100644\n--- a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n+++ b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1Nzg2NQ==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513057865", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...that is not the same as our previous part\n          \n          \n            \n                    // ... that is not the same as our previous part", "author": "Windchild292", "createdAt": "2020-10-27T21:58:43Z", "path": "MekHQ/unittests/mekhq/campaign/WarehouseTest.java", "diffHunk": "@@ -0,0 +1,1020 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign;\n+\n+import org.junit.Test;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.Mech;\n+import mekhq.EventSpy;\n+import mekhq.campaign.event.PartChangedEvent;\n+import mekhq.campaign.event.PartNewEvent;\n+import mekhq.campaign.event.PartRemovedEvent;\n+import mekhq.campaign.parts.AmmoStorage;\n+import mekhq.campaign.parts.Armor;\n+import mekhq.campaign.parts.MekLocation;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+public class WarehouseTest {\n+    @Test\n+    public void testWarehouseSimplePartActions() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // A new warehouse is empty\n+        assertTrue(warehouse.getParts().isEmpty());\n+\n+        // Create a mock part\n+        int mockId = 10;\n+        Part mockPart = mock(Part.class);\n+        when(mockPart.getId()).thenReturn(mockId);\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart);\n+\n+        // The part should be returned when we get it by ID\n+        assertEquals(mockPart, warehouse.getPart(mockId));\n+\n+        // forEachPart should have our part\n+        warehouse.forEachPart(p -> {\n+            // There should only be one part in the warehouse\n+            // and it should be our part\n+            assertEquals(mockPart, p);\n+        });\n+\n+        // getParts should return the part\n+        assertTrue(warehouse.getParts().contains(mockPart));\n+\n+        // The part should also be removed when we request it\n+        assertTrue(warehouse.removePart(mockPart));\n+\n+        // And the part should no longer be in the warehouse\n+        assertNull(warehouse.getPart(mockId));\n+\n+        // We should not run over any part once removed\n+        warehouse.forEachPart(p -> {\n+            assertTrue(false);\n+        });\n+\n+        // getParts should no longer contain anything\n+        assertTrue(warehouse.getParts().isEmpty());\n+    }\n+\n+    @Test\n+    public void testWarehouseAddNewPart() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // Create a mock part without an ID\n+        Part mockPart = mock(Part.class, RETURNS_DEEP_STUBS);\n+        when(mockPart.getId()).thenCallRealMethod();\n+        doCallRealMethod().when(mockPart).setId(anyInt());\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart);\n+\n+        // We should have been assigned an ID\n+        assertTrue(mockPart.getId() > 0);\n+\n+        // The part should be returned when we get it by ID\n+        assertEquals(mockPart, warehouse.getPart(mockPart.getId()));\n+\n+        // forEachPart should have our part\n+        warehouse.forEachPart(p -> {\n+            // There should only be one part in the warehouse\n+            // and it should be our part\n+            assertEquals(mockPart, p);\n+        });\n+\n+        // getParts should return the part\n+        assertTrue(warehouse.getParts().contains(mockPart));\n+\n+        // The part should also be removed when we request it\n+        assertTrue(warehouse.removePart(mockPart));\n+\n+        // And the part should no longer be in the warehouse\n+        assertNull(warehouse.getPart(mockPart.getId()));\n+\n+        // We should not run over any part once removed\n+        warehouse.forEachPart(p -> {\n+            assertTrue(false);\n+        });\n+\n+        // getParts should no longer contain anything\n+        assertTrue(warehouse.getParts().isEmpty());\n+    }\n+\n+    @Test\n+    public void testWarehouseAddSecondNewPart() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // Create a mock part without an ID\n+        Part mockPart0 = mock(Part.class, RETURNS_DEEP_STUBS);\n+        when(mockPart0.getId()).thenCallRealMethod();\n+        doCallRealMethod().when(mockPart0).setId(anyInt());\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart0);\n+\n+        // We should have been assigned an ID\n+        assertTrue(mockPart0.getId() > 0);\n+\n+        // Create a second mock part without an ID\n+        Part mockPart1 = mock(Part.class, RETURNS_DEEP_STUBS);\n+        when(mockPart1.getId()).thenCallRealMethod();\n+        doCallRealMethod().when(mockPart1).setId(anyInt());\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart1);\n+\n+        // We should have been assigned an ID...\n+        assertTrue(mockPart1.getId() > 0);\n+\n+        // ...that is not the same as our previous part", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5588a2cabc37ca4b8378bdea52ba85152b994b3e", "chunk": "diff --git a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\nindex 3f9020e71..4d69329fd 100644\n--- a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n+++ b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODQxNQ==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513058415", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ArrayList<Part> mockChildParts = new ArrayList<>();\n          \n          \n            \n                    List<Part> mockChildParts = new ArrayList<>();", "author": "Windchild292", "createdAt": "2020-10-27T21:59:49Z", "path": "MekHQ/unittests/mekhq/campaign/WarehouseTest.java", "diffHunk": "@@ -0,0 +1,1020 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign;\n+\n+import org.junit.Test;\n+\n+import megamek.common.AmmoType;\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.Mech;\n+import mekhq.EventSpy;\n+import mekhq.campaign.event.PartChangedEvent;\n+import mekhq.campaign.event.PartNewEvent;\n+import mekhq.campaign.event.PartRemovedEvent;\n+import mekhq.campaign.parts.AmmoStorage;\n+import mekhq.campaign.parts.Armor;\n+import mekhq.campaign.parts.MekLocation;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+public class WarehouseTest {\n+    @Test\n+    public void testWarehouseSimplePartActions() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // A new warehouse is empty\n+        assertTrue(warehouse.getParts().isEmpty());\n+\n+        // Create a mock part\n+        int mockId = 10;\n+        Part mockPart = mock(Part.class);\n+        when(mockPart.getId()).thenReturn(mockId);\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart);\n+\n+        // The part should be returned when we get it by ID\n+        assertEquals(mockPart, warehouse.getPart(mockId));\n+\n+        // forEachPart should have our part\n+        warehouse.forEachPart(p -> {\n+            // There should only be one part in the warehouse\n+            // and it should be our part\n+            assertEquals(mockPart, p);\n+        });\n+\n+        // getParts should return the part\n+        assertTrue(warehouse.getParts().contains(mockPart));\n+\n+        // The part should also be removed when we request it\n+        assertTrue(warehouse.removePart(mockPart));\n+\n+        // And the part should no longer be in the warehouse\n+        assertNull(warehouse.getPart(mockId));\n+\n+        // We should not run over any part once removed\n+        warehouse.forEachPart(p -> {\n+            assertTrue(false);\n+        });\n+\n+        // getParts should no longer contain anything\n+        assertTrue(warehouse.getParts().isEmpty());\n+    }\n+\n+    @Test\n+    public void testWarehouseAddNewPart() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // Create a mock part without an ID\n+        Part mockPart = mock(Part.class, RETURNS_DEEP_STUBS);\n+        when(mockPart.getId()).thenCallRealMethod();\n+        doCallRealMethod().when(mockPart).setId(anyInt());\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart);\n+\n+        // We should have been assigned an ID\n+        assertTrue(mockPart.getId() > 0);\n+\n+        // The part should be returned when we get it by ID\n+        assertEquals(mockPart, warehouse.getPart(mockPart.getId()));\n+\n+        // forEachPart should have our part\n+        warehouse.forEachPart(p -> {\n+            // There should only be one part in the warehouse\n+            // and it should be our part\n+            assertEquals(mockPart, p);\n+        });\n+\n+        // getParts should return the part\n+        assertTrue(warehouse.getParts().contains(mockPart));\n+\n+        // The part should also be removed when we request it\n+        assertTrue(warehouse.removePart(mockPart));\n+\n+        // And the part should no longer be in the warehouse\n+        assertNull(warehouse.getPart(mockPart.getId()));\n+\n+        // We should not run over any part once removed\n+        warehouse.forEachPart(p -> {\n+            assertTrue(false);\n+        });\n+\n+        // getParts should no longer contain anything\n+        assertTrue(warehouse.getParts().isEmpty());\n+    }\n+\n+    @Test\n+    public void testWarehouseAddSecondNewPart() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // Create a mock part without an ID\n+        Part mockPart0 = mock(Part.class, RETURNS_DEEP_STUBS);\n+        when(mockPart0.getId()).thenCallRealMethod();\n+        doCallRealMethod().when(mockPart0).setId(anyInt());\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart0);\n+\n+        // We should have been assigned an ID\n+        assertTrue(mockPart0.getId() > 0);\n+\n+        // Create a second mock part without an ID\n+        Part mockPart1 = mock(Part.class, RETURNS_DEEP_STUBS);\n+        when(mockPart1.getId()).thenCallRealMethod();\n+        doCallRealMethod().when(mockPart1).setId(anyInt());\n+\n+        // Add the mock part to our warehouse\n+        warehouse.addPart(mockPart1);\n+\n+        // We should have been assigned an ID...\n+        assertTrue(mockPart1.getId() > 0);\n+\n+        // ...that is not the same as our previous part\n+        assertNotEquals(mockPart0.getId(), mockPart1.getId());\n+    }\n+\n+    @Test\n+    public void testWarehouseAddPartEvent() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // Create a mock part\n+        int mockId = 10;\n+        Part mockPart = mock(Part.class);\n+        when(mockPart.getId()).thenReturn(mockId);\n+\n+        try (EventSpy eventSpy = new EventSpy()) {\n+            // Add the mock part to our warehouse\n+            warehouse.addPart(mockPart);\n+\n+            // This part never existed so there should be\n+            // a PartNewEvent fired.\n+            assertTrue(eventSpy.getEvents()\n+                    .stream()\n+                    .filter(e -> e instanceof PartNewEvent)\n+                    .filter(e -> mockPart == ((PartNewEvent) e).getPart())\n+                    .findAny()\n+                    .isPresent());\n+\n+            // Add the part again, simulating being say removed from a\n+            // unit or something\n+            warehouse.addPart(mockPart);\n+\n+            // There should be only ONE event as we did not add\n+            // this part to the warehouse\n+            assertEquals(1,\n+                    eventSpy.getEvents()\n+                            .stream()\n+                            .filter(e -> e instanceof PartNewEvent)\n+                            .filter(e -> mockPart == ((PartNewEvent) e).getPart())\n+                            .count());\n+        }\n+    }\n+\n+    @Test\n+    public void testWarehouseRemovePart() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // Create a mock part\n+        int mockId = 10;\n+        Part mockPart = mock(Part.class);\n+        when(mockPart.getId()).thenReturn(mockId);\n+\n+        try (EventSpy eventSpy = new EventSpy()) {\n+            // Ensure we can't remove a part that doesn't exist\n+            assertFalse(warehouse.removePart(mockPart));\n+\n+            // If we didn't remove a part, we should have no event\n+            assertFalse(eventSpy.getEvents()\n+                    .stream()\n+                    .filter(e -> e instanceof PartRemovedEvent)\n+                    .findAny()\n+                    .isPresent());\n+\n+            // Add the mock part to our warehouse\n+            warehouse.addPart(mockPart);\n+\n+            // Ensure we can then remove the part\n+            assertTrue(warehouse.removePart(mockPart));\n+\n+            // There should be an event where we removed the mock part\n+            assertEquals(1,\n+                    eventSpy.getEvents()\n+                            .stream()\n+                            .filter(e -> e instanceof PartRemovedEvent)\n+                            .filter(e -> mockPart == ((PartRemovedEvent) e).getPart())\n+                            .count());\n+        }\n+    }\n+\n+    @Test\n+    public void testWarehouseRemoveChildParts() {\n+        Warehouse warehouse = new Warehouse();\n+\n+        // Add a parent part to the warehouse\n+        Part mockParentPart = createMockPart(1);\n+        warehouse.addPart(mockParentPart);\n+\n+        // Create child parts for the parent part\n+        ArrayList<Part> mockChildParts = new ArrayList<>();", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2Njk0MA==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513166940", "bodyText": "I'm mocking an ArrayList:\n\n  \n    \n      mekhq/MekHQ/src/mekhq/campaign/parts/Part.java\n    \n    \n         Line 1458\n      in\n      fc47919\n    \n    \n    \n    \n\n        \n          \n           public ArrayList<Part> getChildParts() {", "author": "sixlettervariables", "createdAt": "2020-10-28T04:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzI3Mg==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513173272", "bodyText": "Then this is an issue in the base method. Unless required any List methods should return list, not ArrayList", "author": "Windchild292", "createdAt": "2020-10-28T04:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NDI4MQ==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513174281", "bodyText": "Sure, just not the scope of this PR.", "author": "sixlettervariables", "createdAt": "2020-10-28T04:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "5588a2cabc37ca4b8378bdea52ba85152b994b3e", "chunk": "diff --git a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\nindex 3f9020e71..4d69329fd 100644\n--- a/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n+++ b/MekHQ/unittests/mekhq/campaign/WarehouseTest.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2OTYyNw==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513069627", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Windchild292", "createdAt": "2020-10-27T22:25:54Z", "path": "MekHQ/src/mekhq/campaign/Warehouse.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/Warehouse.java b/MekHQ/src/mekhq/campaign/Warehouse.java\nindex b66b1333e..2bd263c98 100644\n--- a/MekHQ/src/mekhq/campaign/Warehouse.java\n+++ b/MekHQ/src/mekhq/campaign/Warehouse.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2OTY3NA==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513069674", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n          \n          \n            \n             * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.", "author": "Windchild292", "createdAt": "2020-10-27T22:26:01Z", "path": "MekHQ/src/mekhq/campaign/Warehouse.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/Warehouse.java b/MekHQ/src/mekhq/campaign/Warehouse.java\nindex b66b1333e..2bd263c98 100644\n--- a/MekHQ/src/mekhq/campaign/Warehouse.java\n+++ b/MekHQ/src/mekhq/campaign/Warehouse.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MzExMQ==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513073111", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // ...we did not merge parts, so fall through to the\n          \n          \n            \n                        // ... we did not merge parts, so fall through to the", "author": "Windchild292", "createdAt": "2020-10-27T22:34:43Z", "path": "MekHQ/src/mekhq/campaign/Warehouse.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign;\n+\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import megamek.common.annotations.Nullable;\n+import mekhq.MekHQ;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.campaign.event.PartChangedEvent;\n+import mekhq.campaign.event.PartNewEvent;\n+import mekhq.campaign.event.PartRemovedEvent;\n+import mekhq.campaign.parts.AmmoStorage;\n+import mekhq.campaign.parts.Armor;\n+import mekhq.campaign.parts.Part;\n+\n+/**\n+ * Stores parts for a Campaign.\n+ */\n+public class Warehouse {\n+    private final TreeMap<Integer, Part> parts = new TreeMap<>();\n+\n+    /**\n+     * Adds a part to the warehouse.\n+     * @param part The part to add to the warehouse.\n+     * @return The part added to the warehouse.\n+     */\n+    public Part addPart(Part part) {\n+        return addPart(part, false);\n+    }\n+\n+    /**\n+     * Adds a part to the warehouse, optionally merging it with\n+     * any existing spare part.\n+     * @param part The part to add to the warehouse.\n+     * @param mergeWithExisting If true and the part is spare, it may\n+     *                          be merged with an existing spare part.\n+     * @return The part itself or the spare part it was merged with.\n+     */\n+    public Part addPart(Part part, boolean mergeWithExisting) {\n+        Objects.requireNonNull(part);\n+\n+        if (mergeWithExisting && part.isSpare()) {\n+            Part mergedPart = mergePartWithExisting(part);\n+\n+            // CAW: intentional reference equality\n+            if (mergedPart != part) {\n+                // We've merged parts, so let interested parties know we've\n+                // updated the merged part.\n+                MekHQ.triggerEvent(new PartChangedEvent(mergedPart));\n+\n+                // Check if the part being added exists, and if so\n+                // remove it from the warehouse\n+                if (part.getId() > 0) {\n+                    removePart(part);\n+                }\n+\n+                return mergedPart;\n+            }\n+\n+            // ...we did not merge parts, so fall through to the", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/src/mekhq/campaign/Warehouse.java b/MekHQ/src/mekhq/campaign/Warehouse.java\nindex b66b1333e..2bd263c98 100644\n--- a/MekHQ/src/mekhq/campaign/Warehouse.java\n+++ b/MekHQ/src/mekhq/campaign/Warehouse.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq.campaign;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4NDMzOA==", "url": "https://github.com/MegaMek/mekhq/pull/2167#discussion_r513084338", "bodyText": "This is a perfect example of an accessibility issue where the comment is split over two lines. One line would be best, even if it goes slightly over the expected length, when only a single word is split to make it . This is irregardless of screen size, because this actually leads to far longer comprehension.", "author": "Windchild292", "createdAt": "2020-10-27T23:06:32Z", "path": "MekHQ/unittests/mekhq/EventSpy.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import megamek.common.annotations.Nullable;\n+import megamek.common.event.MMEvent;\n+import megamek.common.event.Subscribe;\n+import mekhq.campaign.event.*;\n+\n+/**\n+ * Provides a list of events captured during its lifetime.\n+ * Use this as part of a try-with-resources block.\n+ *\n+ * If you need to listen to a new event, add a handler to this\n+ * class.\n+ */\n+public class EventSpy implements AutoCloseable {\n+    private final List<MMEvent> events = new ArrayList<>();\n+\n+    /**\n+     * Creates a new EventSpy and registers it with\n+     * MekHQ's event bus.\n+     */\n+    public EventSpy() {\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * Deregisters this instance from MekHQ's event bus.\n+     */\n+    public void close() {\n+        MekHQ.unregisterHandler(this);\n+    }\n+\n+    /**\n+     * Gets the list of events which occurred.\n+     * @return The list of events which occurred, in order\n+     *         received.", "originalCommit": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7200fce2d9403ce835296581082dd826e5117f", "chunk": "diff --git a/MekHQ/unittests/mekhq/EventSpy.java b/MekHQ/unittests/mekhq/EventSpy.java\nindex b3506868a..1cfdaddef 100644\n--- a/MekHQ/unittests/mekhq/EventSpy.java\n+++ b/MekHQ/unittests/mekhq/EventSpy.java\n\n@@ -10,11 +10,11 @@\n  *\n  * MekHQ is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n- * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n package mekhq;\n"}}, {"oid": "6d7200fce2d9403ce835296581082dd826e5117f", "url": "https://github.com/MegaMek/mekhq/commit/6d7200fce2d9403ce835296581082dd826e5117f", "message": "Apply suggestions from code review\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-10-28T03:58:28Z", "type": "commit"}, {"oid": "5588a2cabc37ca4b8378bdea52ba85152b994b3e", "url": "https://github.com/MegaMek/mekhq/commit/5588a2cabc37ca4b8378bdea52ba85152b994b3e", "message": "Apply suggestions from code review\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-10-28T04:05:29Z", "type": "commit"}, {"oid": "d096301be969b18dd619aa26640ad0ea8a8160d2", "url": "https://github.com/MegaMek/mekhq/commit/d096301be969b18dd619aa26640ad0ea8a8160d2", "message": "Making use of longer line lengths for comments per PR review", "committedDate": "2020-10-28T17:18:28Z", "type": "commit"}]}