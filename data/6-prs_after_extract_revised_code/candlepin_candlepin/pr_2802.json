{"pr_number": 2802, "pr_title": "ENT-1848: Port OwnerResource to spec-first", "pr_createdAt": "2020-09-10T14:19:39Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2802", "timeline": [{"oid": "2291bcef60feb15433dc118fe8e428f99b507bac", "url": "https://github.com/candlepin/candlepin/commit/2291bcef60feb15433dc118fe8e428f99b507bac", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Moved some of the access related tests from Junit to Rspec.\n   Junits did not invoke the VerifyAuthorizationFilter\n   when endpoint is ported into OpenAPI.", "committedDate": "2020-09-14T09:49:08Z", "type": "forcePushed"}, {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "url": "https://github.com/candlepin/candlepin/commit/f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs", "committedDate": "2020-09-24T08:05:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzODA3NQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494338075", "bodyText": "Let's use this as an opportunity to rename OwnerInfo to not that. OwnerStatistics would be a better fit here", "author": "Ceiu", "createdAt": "2020-09-24T13:53:23Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.ObjectTranslator;\n+import org.candlepin.model.OwnerInfo;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * The OwnerInfoDTOTranslator provides translation from\n+ * OwnerInfo model objects to OwnerInfoDTO\n+ */\n+public class OwnerInfoDTOTranslator implements ObjectTranslator<OwnerInfo, OwnerInfoDTO> {", "originalCommit": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzOTM0OA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494339348", "bodyText": "Also, so it's clear: OwnerInfo as it exists today, is not a model object. It's a DTO that happens to live in the model package. I'm not sure if there is a need to have a separate DTO layer for what is already a DTO; so we may be able to eliminate the translator entirely. Perhaps this could be something discussed with the whole team.", "author": "Ceiu", "createdAt": "2020-09-24T13:55:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzODA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkyNDQyNQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494924425", "bodyText": "It looks like there's only 1 endpoint that uses OwnerInfo as output, and ideally we wouldn't need a translator (we'd just change OwnerInfoCurator.getByOwner to populate the OwnerInfoDTO that is defined in yaml), but the problem is that OwnerInfo is not just a DTO, and has a lot of add*() methods that contain logic (and yaml-defined DTOs can't be easily altered to contain additional methods with extra logic).\nOne solution about eliminating the translator entirely would be to use the builder pattern here, by creating an OwnerInfoBuilder that will own all these add*() methods and accumulate the data, and when we're done we'd call .build() which would return an OwnerInfoDTO.", "author": "nikosmoum", "createdAt": "2020-09-25T11:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzODA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1OTE4NA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496459184", "bodyText": "Updated the code to build OwnerInfo from OwnerInfoBuilder.", "author": "sonalidhome", "createdAt": "2020-09-29T06:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzODA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwOTY2OA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496609668", "bodyText": "ack from me", "author": "nikosmoum", "createdAt": "2020-09-29T10:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzODA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b300038ad20522b825951d0fe7c9af9e7b691279", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslator.java b/server/src/main/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslator.java\ndeleted file mode 100644\nindex 6316f9228..000000000\n--- a/server/src/main/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslator.java\n+++ /dev/null\n\n@@ -1,91 +0,0 @@\n-/**\n- * Copyright (c) 2009 - 2020 Red Hat, Inc.\n- *\n- * This software is licensed to you under the GNU General Public License,\n- * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n- * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n- * along with this software; if not, see\n- * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n- *\n- * Red Hat trademarks are not licensed under GPLv2. No permission is\n- * granted to use or replicate Red Hat trademarks that are incorporated\n- * in this software or its documentation.\n- */\n-\n-package org.candlepin.dto.api.v1;\n-\n-import org.candlepin.dto.ModelTranslator;\n-import org.candlepin.dto.ObjectTranslator;\n-import org.candlepin.model.OwnerInfo;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- * The OwnerInfoDTOTranslator provides translation from\n- * OwnerInfo model objects to OwnerInfoDTO\n- */\n-public class OwnerInfoDTOTranslator implements ObjectTranslator<OwnerInfo, OwnerInfoDTO> {\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public OwnerInfoDTO translate(OwnerInfo source) {\n-        return this.translate(null, source);\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public OwnerInfoDTO translate(ModelTranslator modelTranslator, OwnerInfo source) {\n-        return source != null ?\n-            this.populate(modelTranslator, source, new OwnerInfoDTO()) : null;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public OwnerInfoDTO populate(OwnerInfo source, OwnerInfoDTO destination) {\n-        return this.populate(null, source, destination);\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public OwnerInfoDTO populate(ModelTranslator modelTranslator,\n-        OwnerInfo source, OwnerInfoDTO destination) {\n-        if (source == null) {\n-            throw new IllegalArgumentException(\"source is null\");\n-        }\n-\n-        if (destination == null) {\n-            throw new IllegalArgumentException(\"dest is null\");\n-        }\n-        destination.consumerCounts(source.getConsumerCounts())\n-            .consumerGuestCounts(source.getConsumerGuestCounts())\n-            .entitlementsConsumedByType(source.getEntitlementsConsumedByType())\n-            .consumerTypeCountByPool(source.getConsumerTypeCountByPool())\n-            .enabledConsumerTypeCountByPool(source.getEnabledConsumerTypeCountByPool())\n-            .consumerCountsByComplianceStatus(source.getConsumerCountsByComplianceStatus());\n-\n-        if (!source.getEntitlementsConsumedByFamily().isEmpty()) {\n-            Map<String, ConsumptionTypeCountsDTO> cbf = new HashMap<>();\n-            source.getEntitlementsConsumedByFamily()\n-                .forEach((s, consumptionTypeCounts) ->\n-                cbf.put(s, new ConsumptionTypeCountsDTO().physical(consumptionTypeCounts.getPhysical())\n-                .guest(consumptionTypeCounts.getGuest())));\n-\n-            destination.entitlementsConsumedByFamily(cbf);\n-        }\n-        else {\n-            destination.entitlementsConsumedByFamily(null);\n-        }\n-\n-        return destination;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MDI5Mw==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494340293", "bodyText": "You'll probably need to add updated/created here as well, if we're going to be not using the certificate translator hierarchy.", "author": "Ceiu", "createdAt": "2020-09-24T13:56:10Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java", "diffHunk": "@@ -58,14 +59,26 @@ public UeberCertificateDTO populate(UeberCertificate source, UeberCertificateDTO\n     public UeberCertificateDTO populate(ModelTranslator translator, UeberCertificate source,\n         UeberCertificateDTO dest) {\n \n-        dest = super.populate(translator, source, dest);\n+        if (source == null) {\n+            throw new IllegalArgumentException(\"source is null\");\n+        }\n+\n+        if (dest == null) {\n+            throw new IllegalArgumentException(\"dest is null\");\n+        }\n+\n+        dest.id(source.getId())", "originalCommit": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MDc0Mw==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494880743", "bodyText": "Added these fields.", "author": "sonalidhome", "createdAt": "2020-09-25T09:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MDI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9c9100393632dbac61ed2a3e09ca7a1b1266f590", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java b/server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java\nindex b893a4619..2be0d1cd8 100644\n--- a/server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java\n+++ b/server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java\n\n@@ -69,7 +69,9 @@ public class UeberCertificateTranslator\n \n         dest.id(source.getId())\n             .key(source.getKey())\n-            .cert(source.getCert());\n+            .cert(source.getCert())\n+            .created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()));\n \n         if (translator != null) {\n             dest.setSerial(translator.translate(source.getSerial(), CertificateSerialDTO.class));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MzUxMQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494343511", "bodyText": "We might not need this anymore with the removal of so many of the inline annotations.", "author": "Ceiu", "createdAt": "2020-09-24T13:59:40Z", "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -1498,86 +1248,48 @@ public void deleteLogLevel(@PathParam(\"owner_key\") String ownerKey) {\n         return translator.translateQuery(query, ConsumerDTOArrayElement.class);\n     }\n \n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{owner_key}/consumers/count\")\n     @SuppressWarnings(\"checkstyle:indentation\")\n-    @ApiOperation(notes = \"Retrieve a count of Consumers for the Owner\", value = \"consumers count\")\n-    @ApiResponses({\n-        @ApiResponse(code = 404, message = \"Owner not found\"),\n-        @ApiResponse(code = 400, message = \"Invalid request\")\n-    })\n-    public int countConsumers(\n-        @PathParam(\"owner_key\")\n+    @Override\n+    public Integer countConsumers(\n         @Verify(value = Owner.class, subResource = SubResource.CONSUMERS) String ownerKey,\n-        @QueryParam(\"type\") Set<String> typeLabels,\n-        @QueryParam(\"sku\") List<String> skus,\n-        @QueryParam(\"subscription_id\") List<String> subscriptionIds,\n-        @QueryParam(\"contract\") List<String> contracts) {\n+        Set<String> typeLabels,\n+        List<String> skus,\n+        List<String> subscriptionIds,\n+        List<String> contracts) {\n \n         this.findOwnerByKey(ownerKey);\n         consumerTypeValidator.findAndValidateTypeLabels(typeLabels);\n \n         return consumerCurator.countConsumers(ownerKey, typeLabels, skus, subscriptionIds, contracts);\n     }\n \n-    /**\n-     * Retrieves a list of Pools for an Owner\n-     *\n-     * @param ownerKey id of the owner whose entitlement pools are sought.\n-     * @param matches Find pools matching the given pattern in a variety of fields.\n-     * * and ? wildcards are supported.\n-     * @return a list of Pool objects\n-     * @httpcode 400\n-     * @httpcode 404\n-     * @httpcode 200\n-     */\n+    @Override\n     @Transactional\n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{owner_key}/pools\")\n     @SuppressWarnings(\"checkstyle:indentation\")", "originalCommit": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MDcyNQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494880725", "bodyText": "Removed.", "author": "sonalidhome", "createdAt": "2020-09-25T09:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MzUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c9100393632dbac61ed2a3e09ca7a1b1266f590", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/OwnerResource.java b/server/src/main/java/org/candlepin/resource/OwnerResource.java\nindex 9e56dd80d..84d424fbe 100755\n--- a/server/src/main/java/org/candlepin/resource/OwnerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/OwnerResource.java\n\n@@ -1248,7 +1248,6 @@ public class OwnerResource implements OwnersApi {\n         return translator.translateQuery(query, ConsumerDTOArrayElement.class);\n     }\n \n-    @SuppressWarnings(\"checkstyle:indentation\")\n     @Override\n     public Integer countConsumers(\n         @Verify(value = Owner.class, subResource = SubResource.CONSUMERS) String ownerKey,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0NTg1OQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494345859", "bodyText": "I'd have to go back and look, but did we add a DTO for Subscription? Subscription is already a DTO.\nAdditionally, rather than converting twice, since we only use fabricateSubscriptionFromPool in the resources to convert a pool to a subscription, we could/should just write a translator that explicitly handles the translation from Pool to Subscription[DTO] and use that instead.", "author": "Ceiu", "createdAt": "2020-09-24T14:02:35Z", "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -1655,125 +1367,28 @@ public int countConsumers(\n         return poolDTOs;\n     }\n \n-    /**\n-     * Retrieves a list of Subscriptions for an Owner\n-     *\n-     * @return a list of Subscription objects\n-     * @httpcode 404\n-     * @httpcode 200\n-     */\n-    @GET\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{owner_key}/subscriptions\")\n-    @ApiOperation(notes = \"Retrieves a list of Subscriptions for an Owner\", value = \"List Subscriptions\")\n-    @ApiResponses({ @ApiResponse(code = 404, message = \"Owner not found\") })\n-    public List<Subscription> getSubscriptions(@PathParam(\"owner_key\") String ownerKey) {\n+    @Override\n+    public List<SubscriptionDTO> getOwnerSubscriptions(String ownerKey) {\n         Owner owner = this.findOwnerByKey(ownerKey);\n \n-        List<Subscription> subscriptions = new LinkedList<>();\n+        List<SubscriptionDTO> subscriptions = new LinkedList<>();\n \n         for (Pool pool : this.poolManager.listPoolsByOwner(owner).list()) {\n-            SourceSubscription srcsub = pool.getSourceSubscription();\n \n+            SourceSubscription srcsub = pool.getSourceSubscription();\n             if (srcsub != null && \"master\".equalsIgnoreCase(srcsub.getSubscriptionSubKey())) {\n-                subscriptions.add(this.poolManager.fabricateSubscriptionFromPool(pool));\n+                subscriptions.add(this.translator.translate(\n+                    this.poolManager.fabricateSubscriptionFromPool(pool),", "originalCommit": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NTUyNg==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494875526", "bodyText": "We added a SubscriptionDTO when porting the SubscriptionResource to OpenApi (and it looks like we also do the double conversion there). We can't help not redefining it since everything that is part of the API has to be defined in the yaml file. I agree with creating a Pool to SubscriptionDTO translator, and getting rid of the SubscriptionTranslator and the fabricateSubscriptionFromPool method.", "author": "nikosmoum", "createdAt": "2020-09-25T09:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0NTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MDY5NA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494880694", "bodyText": "This was updated as per the previous changes done in PR: #2674.", "author": "sonalidhome", "createdAt": "2020-09-25T09:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0NTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1ODc1OQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496458759", "bodyText": "Updated the code to translate from Pool to SubscriptionDTO.", "author": "sonalidhome", "createdAt": "2020-09-29T06:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0NTg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b300038ad20522b825951d0fe7c9af9e7b691279", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/OwnerResource.java b/server/src/main/java/org/candlepin/resource/OwnerResource.java\nindex 9e56dd80d..f5a421456 100755\n--- a/server/src/main/java/org/candlepin/resource/OwnerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/OwnerResource.java\n\n@@ -1377,9 +1377,7 @@ public class OwnerResource implements OwnersApi {\n \n             SourceSubscription srcsub = pool.getSourceSubscription();\n             if (srcsub != null && \"master\".equalsIgnoreCase(srcsub.getSubscriptionSubKey())) {\n-                subscriptions.add(this.translator.translate(\n-                    this.poolManager.fabricateSubscriptionFromPool(pool),\n-                    SubscriptionDTO.class));\n+                subscriptions.add(this.translator.translate(pool, SubscriptionDTO.class));\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0ODgwMg==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494348802", "bodyText": "Our mappers already handle converting exceptions to the generic \"internal server error\" if they're not caught. If we don't have explicit error handling to perform, or some other behavior to improve the output for clients. Additionally, the declaration and translation of the job can only happen if the queuing of the job succeeds, so there is no reason to declare the job or perform translation outside the try/catch block.\nIs there some behavior change with OpenAPI that I'm not aware of? What's the intent here?", "author": "Ceiu", "createdAt": "2020-09-24T14:06:23Z", "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -1794,30 +1409,23 @@ public AsyncJobStatusDTO refreshPools(\n             .setOwner(owner)\n             .setLazyRegeneration(lazyRegen);\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n+        AsyncJobStatus job;\n+\n+        try {\n+            job = this.jobManager.queueJob(config);\n+        }\n+        catch (JobException e) {\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+            log.error(errmsg, e);\n+            throw new IseException(errmsg, e);", "originalCommit": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MDY3MA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494880670", "bodyText": "As already discussed in PR: #2692 (comment). We need to explicitly throw an exception because the auto-generated method does not throws an exception.", "author": "sonalidhome", "createdAt": "2020-09-25T09:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0ODgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "b300038ad20522b825951d0fe7c9af9e7b691279", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/OwnerResource.java b/server/src/main/java/org/candlepin/resource/OwnerResource.java\nindex 9e56dd80d..f5a421456 100755\n--- a/server/src/main/java/org/candlepin/resource/OwnerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/OwnerResource.java\n\n@@ -1409,10 +1407,9 @@ public class OwnerResource implements OwnersApi {\n             .setOwner(owner)\n             .setLazyRegeneration(lazyRegen);\n \n-        AsyncJobStatus job;\n-\n         try {\n-            job = this.jobManager.queueJob(config);\n+            AsyncJobStatus job = this.jobManager.queueJob(config);\n+            return this.translator.translate(job, AsyncJobStatusDTO.class);\n         }\n         catch (JobException e) {\n             String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTYyMQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494349621", "bodyText": "Same questions here", "author": "Ceiu", "createdAt": "2020-09-24T14:07:36Z", "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -2002,42 +1559,28 @@ public AsyncJobStatusDTO undoImports(\n         JobConfig config = UndoImportsJob.createJobConfig()\n             .setOwner(owner);\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n+        AsyncJobStatus job;", "originalCommit": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MDY0Mg==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494880642", "bodyText": "The auto-generated method does not throws an exception.", "author": "sonalidhome", "createdAt": "2020-09-25T09:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b300038ad20522b825951d0fe7c9af9e7b691279", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/OwnerResource.java b/server/src/main/java/org/candlepin/resource/OwnerResource.java\nindex 9e56dd80d..f5a421456 100755\n--- a/server/src/main/java/org/candlepin/resource/OwnerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/OwnerResource.java\n\n@@ -1559,9 +1554,9 @@ public class OwnerResource implements OwnersApi {\n         JobConfig config = UndoImportsJob.createJobConfig()\n             .setOwner(owner);\n \n-        AsyncJobStatus job;\n         try {\n-            job = this.jobManager.queueJob(config);\n+            AsyncJobStatus job = this.jobManager.queueJob(config);\n+            return this.translator.translate(job, AsyncJobStatusDTO.class);\n         }\n         catch (JobException e) {\n             String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTg3MA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494349870", "bodyText": "Same questions here", "author": "Ceiu", "createdAt": "2020-09-24T14:07:58Z", "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -2121,7 +1637,17 @@ public AsyncJobStatusDTO importManifestAsync(\n             JobConfig config =  manifestManager.importManifestAsync(owner, fileData.getData(),\n                 fileData.getUploadedFilename(), overrides);\n \n-            AsyncJobStatus job = this.jobManager.queueJob(config);\n+            AsyncJobStatus job;", "originalCommit": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MDYyMw==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494880623", "bodyText": "The auto-generated method does not throws an exception.", "author": "sonalidhome", "createdAt": "2020-09-25T09:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "b300038ad20522b825951d0fe7c9af9e7b691279", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/OwnerResource.java b/server/src/main/java/org/candlepin/resource/OwnerResource.java\nindex 9e56dd80d..f5a421456 100755\n--- a/server/src/main/java/org/candlepin/resource/OwnerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/OwnerResource.java\n\n@@ -1637,9 +1630,9 @@ public class OwnerResource implements OwnersApi {\n             JobConfig config =  manifestManager.importManifestAsync(owner, fileData.getData(),\n                 fileData.getUploadedFilename(), overrides);\n \n-            AsyncJobStatus job;\n             try {\n-                job = this.jobManager.queueJob(config);\n+                AsyncJobStatus job = this.jobManager.queueJob(config);\n+                return this.translator.translate(job, AsyncJobStatusDTO.class);\n             }\n             catch (JobException e) {\n                 String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4MzY3MA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r493683670", "bodyText": "created/updated fields also need to be translated here", "author": "nikosmoum", "createdAt": "2020-09-23T15:24:37Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java", "diffHunk": "@@ -58,14 +59,26 @@ public UeberCertificateDTO populate(UeberCertificate source, UeberCertificateDTO\n     public UeberCertificateDTO populate(ModelTranslator translator, UeberCertificate source,\n         UeberCertificateDTO dest) {\n \n-        dest = super.populate(translator, source, dest);\n+        if (source == null) {\n+            throw new IllegalArgumentException(\"source is null\");\n+        }\n+\n+        if (dest == null) {\n+            throw new IllegalArgumentException(\"dest is null\");\n+        }\n+\n+        dest.id(source.getId())\n+            .key(source.getKey())\n+            .cert(source.getCert());", "originalCommit": "2291bcef60feb15433dc118fe8e428f99b507bac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c9100393632dbac61ed2a3e09ca7a1b1266f590", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java b/server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java\nindex b893a4619..2be0d1cd8 100644\n--- a/server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java\n+++ b/server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java\n\n@@ -69,7 +69,9 @@ public class UeberCertificateTranslator\n \n         dest.id(source.getId())\n             .key(source.getKey())\n-            .cert(source.getCert());\n+            .cert(source.getCert())\n+            .created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()));\n \n         if (translator != null) {\n             dest.setSerial(translator.translate(source.getSerial(), CertificateSerialDTO.class));\n"}}, {"oid": "9c9100393632dbac61ed2a3e09ca7a1b1266f590", "url": "https://github.com/candlepin/candlepin/commit/9c9100393632dbac61ed2a3e09ca7a1b1266f590", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs", "committedDate": "2020-09-25T08:43:49Z", "type": "forcePushed"}, {"oid": "482111a75c24579277f968f9677f7c09b2141db4", "url": "https://github.com/candlepin/candlepin/commit/482111a75c24579277f968f9677f7c09b2141db4", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs", "committedDate": "2020-09-25T09:50:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkyOTU1NA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494929554", "bodyText": "For this line, you don't need to check for null. Util.toDate() will just return null of the arg is null", "author": "nikosmoum", "createdAt": "2020-09-25T11:39:04Z", "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -1498,86 +1248,46 @@ public void deleteLogLevel(@PathParam(\"owner_key\") String ownerKey) {\n         return translator.translateQuery(query, ConsumerDTOArrayElement.class);\n     }\n \n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{owner_key}/consumers/count\")\n-    @SuppressWarnings(\"checkstyle:indentation\")\n-    @ApiOperation(notes = \"Retrieve a count of Consumers for the Owner\", value = \"consumers count\")\n-    @ApiResponses({\n-        @ApiResponse(code = 404, message = \"Owner not found\"),\n-        @ApiResponse(code = 400, message = \"Invalid request\")\n-    })\n-    public int countConsumers(\n-        @PathParam(\"owner_key\")\n+    @Override\n+    public Integer countConsumers(\n         @Verify(value = Owner.class, subResource = SubResource.CONSUMERS) String ownerKey,\n-        @QueryParam(\"type\") Set<String> typeLabels,\n-        @QueryParam(\"sku\") List<String> skus,\n-        @QueryParam(\"subscription_id\") List<String> subscriptionIds,\n-        @QueryParam(\"contract\") List<String> contracts) {\n+        Set<String> typeLabels,\n+        List<String> skus,\n+        List<String> subscriptionIds,\n+        List<String> contracts) {\n \n         this.findOwnerByKey(ownerKey);\n         consumerTypeValidator.findAndValidateTypeLabels(typeLabels);\n \n         return consumerCurator.countConsumers(ownerKey, typeLabels, skus, subscriptionIds, contracts);\n     }\n \n-    /**\n-     * Retrieves a list of Pools for an Owner\n-     *\n-     * @param ownerKey id of the owner whose entitlement pools are sought.\n-     * @param matches Find pools matching the given pattern in a variety of fields.\n-     * * and ? wildcards are supported.\n-     * @return a list of Pool objects\n-     * @httpcode 400\n-     * @httpcode 404\n-     * @httpcode 200\n-     */\n+    @Override\n     @Transactional\n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{owner_key}/pools\")\n-    @SuppressWarnings(\"checkstyle:indentation\")\n-    @ApiOperation(notes = \"Retrieves a list of Pools for an Owner. This endpoint \" +\n-        \"supports paging with query parameters. For more details please visit \" +\n-        \"https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\",\n-        value = \"List Pools\")\n-    @ApiResponses({\n-        @ApiResponse(code = 404, message = \"Owner not found\"),\n-        @ApiResponse(code = 400, message = \"Invalid request\")\n-    })\n     public List<PoolDTO> listPools(\n-        @PathParam(\"owner_key\") @Verify(value = Owner.class, subResource = SubResource.POOLS) String ownerKey,\n-        @QueryParam(\"consumer\") String consumerUuid,\n-        @QueryParam(\"activation_key\") String activationKeyName,\n-        @QueryParam(\"product\") String productId,\n-        @QueryParam(\"subscription\") String subscriptionId,\n-        @ApiParam(\"Include pools that are not suited to the unit's facts.\")\n-        @QueryParam(\"listall\") @DefaultValue(\"false\") boolean listAll,\n-        @ApiParam(\"Date to use as current time for lookup criteria. Defaults\" +\n-                \" to current date if not specified.\")\n-        @QueryParam(\"activeon\") @DefaultValue(DateFormat.NOW) @DateFormat Date activeOn,\n-        @ApiParam(\"Find pools matching the given pattern in a variety of fields;\" +\n-                \" * and ? wildcards are supported; may be specified multiple times\")\n-        @QueryParam(\"matches\") List<String> matches,\n-        @ApiParam(\"The attributes to return based on the specified types.\")\n-        @QueryParam(\"attribute\") List<KeyValueParamDTO> attrFilters,\n-        @ApiParam(\"When set to true, it will add future dated pools to the result, \" +\n-                \"based on the activeon date.\")\n-        @QueryParam(\"add_future\") @DefaultValue(\"false\") boolean addFuture,\n-        @ApiParam(\"When set to true, it will return only future dated pools to the result, \" +\n-                \"based on the activeon date.\")\n-        @QueryParam(\"only_future\") @DefaultValue(\"false\") boolean onlyFuture,\n-        @ApiParam(\"Will only return pools with a start date after the supplied date. \" +\n-                \"Overrides the activeOn date.\")\n-        @QueryParam(\"after\") @DateFormat Date after,\n-        @ApiParam(\"One or more pool IDs to use to filter the output; only pools with IDs matching \" +\n-                \"those provided will be returned; may be specified multiple times\")\n-        @QueryParam(\"poolid\") List<String> poolIds,\n-        @Context Principal principal,\n-        @Context PageRequest pageRequest) {\n+        @Verify(value = Owner.class, subResource = SubResource.POOLS) String ownerKey,\n+        String consumerUuid,\n+        String activationKeyName,\n+        String productId,\n+        String subscriptionId,\n+        Boolean listAll,\n+        OffsetDateTime activeOn,\n+        List<String> matches,\n+        List<KeyValueParamDTO> attrFilters,\n+        Boolean addFuture,\n+        Boolean onlyFuture,\n+        OffsetDateTime after,\n+        List<String> poolIds) {\n+\n+        Principal principal = this.principalProvider.get();\n+        PageRequest pageRequest = ResteasyContext.getContextData(PageRequest.class);\n \n         Owner owner = findOwnerByKey(ownerKey);\n \n+        // set default to current date\n+        Date activeOnDate = activeOn != null ? Util.toDate(activeOn) : new Date();\n+        Date afterDate = after != null ? Util.toDate(after) : null;", "originalCommit": "482111a75c24579277f968f9677f7c09b2141db4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1ODA0MQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496458041", "bodyText": "Done.", "author": "sonalidhome", "createdAt": "2020-09-29T06:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkyOTU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "b300038ad20522b825951d0fe7c9af9e7b691279", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/OwnerResource.java b/server/src/main/java/org/candlepin/resource/OwnerResource.java\nindex 84d424fbe..f5a421456 100755\n--- a/server/src/main/java/org/candlepin/resource/OwnerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/OwnerResource.java\n\n@@ -1286,7 +1288,7 @@ public class OwnerResource implements OwnersApi {\n \n         // set default to current date\n         Date activeOnDate = activeOn != null ? Util.toDate(activeOn) : new Date();\n-        Date afterDate = after != null ? Util.toDate(after) : null;\n+        Date afterDate = Util.toDate(after);\n \n         Consumer c = null;\n         if (consumerUuid != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMzMyNg==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494933326", "bodyText": "We should be doing what other endpoints do here, and use proper logging (log.error()) and then throwing an IseException", "author": "nikosmoum", "createdAt": "2020-09-25T11:47:06Z", "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -1213,58 +1091,29 @@ public void deleteOwner(@PathParam(\"owner_key\") String ownerKey,\n         return entitlementDTOs;\n     }\n \n-    /**\n-     * Heals an Owner\n-     *\n-     * Starts an asynchronous healing for the given Owner. At the end of the\n-     * process the idea is that all of the consumers in the owned by the Owner\n-     * will be up to date.\n-     *\n-     * @param ownerKey id of the owner to be healed.\n-     * @return a JobDetail object\n-     * @httpcode 404\n-     * @httpcode 202\n-     */\n-    @POST\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.WILDCARD)\n-    @Path(\"{owner_key}/entitlements\")\n-    @ApiOperation(notes = \"Starts an asynchronous healing for the given Owner.\" +\n-        \" At the end of the process the idea is that all of the consumers \" +\n-        \"in the owned by the Owner will be up to date.\", value = \"Heal owner\")\n-    @ApiResponses({ @ApiResponse(code = 404, message = \"Owner not found\") })\n+    @Override\n     public AsyncJobStatusDTO healEntire(\n-        @ApiParam(\"ownerKey id of the owner to be healed.\") @PathParam(\"owner_key\") @Verify(Owner.class)\n-        String ownerKey)\n-        throws JobException {\n+        @Verify(Owner.class) String ownerKey) {\n \n         Owner owner = findOwnerByKey(ownerKey);\n         JobConfig config = HealEntireOrgJob.createJobConfig().setOwner(owner).setEntitleDate(new Date());\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n+        AsyncJobStatus job = null;\n+        try {\n+            job = this.jobManager.queueJob(config);\n+        }\n+        catch (JobException e) {\n+            e.printStackTrace();", "originalCommit": "482111a75c24579277f968f9677f7c09b2141db4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNDA5Ng==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494934096", "bodyText": "Also, like the place that crog mentioned: we don't have to declare the job variable and do the translation outside the try block. It can just be:\n        try {\n            AsyncJobStatus job = this.jobManager.queueJob(config);\n             return this.translator.translate(job, AsyncJobStatusDTO.class);\n        }\n        catch (JobException e) {\n\nsince there's no other work being done after the catch anyway", "author": "nikosmoum", "createdAt": "2020-09-25T11:48:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1Nzk2OA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496457968", "bodyText": "Updated.", "author": "sonalidhome", "createdAt": "2020-09-29T06:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMzMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "b300038ad20522b825951d0fe7c9af9e7b691279", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/OwnerResource.java b/server/src/main/java/org/candlepin/resource/OwnerResource.java\nindex 84d424fbe..f5a421456 100755\n--- a/server/src/main/java/org/candlepin/resource/OwnerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/OwnerResource.java\n\n@@ -1098,14 +1098,16 @@ public class OwnerResource implements OwnersApi {\n         Owner owner = findOwnerByKey(ownerKey);\n         JobConfig config = HealEntireOrgJob.createJobConfig().setOwner(owner).setEntitleDate(new Date());\n \n-        AsyncJobStatus job = null;\n         try {\n-            job = this.jobManager.queueJob(config);\n+            AsyncJobStatus job = this.jobManager.queueJob(config);\n+            return this.translator.translate(job, AsyncJobStatusDTO.class);\n         }\n         catch (JobException e) {\n-            e.printStackTrace();\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+            log.error(errmsg, e);\n+            throw new IseException(errmsg, e);\n         }\n-        return this.translator.translate(job, AsyncJobStatusDTO.class);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0MjE5NQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494942195", "bodyText": "If we end up removing the OwnerInfoTranslator class, then this won't matter, but if we don't, we should either uncomment/update this block or remove it", "author": "nikosmoum", "createdAt": "2020-09-25T12:06:20Z", "path": "server/src/test/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslatorTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import static org.junit.Assert.*;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.model.ConsumerType;\n+import org.candlepin.model.OwnerInfo;\n+\n+public class OwnerInfoDTOTranslatorTest extends\n+    AbstractTranslatorTest<OwnerInfo, OwnerInfoDTO, OwnerInfoDTOTranslator> {\n+\n+    OwnerInfoDTOTranslator translator = new OwnerInfoDTOTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(this.translator,\n+            OwnerInfo.class, OwnerInfoDTO.class);\n+    }\n+\n+    @Override\n+    protected OwnerInfoDTOTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected OwnerInfo initSourceObject() {\n+        OwnerInfo ownerInfo = new OwnerInfo();\n+        ownerInfo.addTypeTotal(new ConsumerType(\"test\"), 1, 2);\n+        ownerInfo.setGuestCount(2);\n+        ownerInfo.setPhysicalCount(2);\n+        ownerInfo.addToConsumerTypeCountByPool(new ConsumerType(\"test-1\"), 5);\n+        ownerInfo.addToEnabledConsumerTypeCountByPool(new ConsumerType(\"test-2\"), 1);\n+        ownerInfo.setConsumerCountByComplianceStatus(\"test-status\", 4);\n+        ownerInfo.addToEntitlementsConsumedByFamily(\"test-family\", 1, 3);\n+        return ownerInfo;\n+    }\n+\n+    @Override\n+    protected OwnerInfoDTO initDestinationObject() {\n+        return new OwnerInfoDTO();\n+    }\n+\n+    @Override\n+    protected void verifyOutput(OwnerInfo source, OwnerInfoDTO dest, boolean childrenGenerated) {\n+        if (source != null) {\n+            assertEquals(source.getConsumerCounts(), dest.getConsumerCounts());\n+            assertEquals(source.getConsumerGuestCounts(), dest.getConsumerGuestCounts());\n+            assertEquals(source.getEntitlementsConsumedByType(), dest.getEntitlementsConsumedByType());\n+            assertEquals(source.getConsumerTypeCountByPool(), dest.getConsumerTypeCountByPool());\n+            assertEquals(source.getEnabledConsumerTypeCountByPool(),\n+                dest.getEnabledConsumerTypeCountByPool());\n+            assertEquals(source.getConsumerCountsByComplianceStatus(),\n+                dest.getConsumerCountsByComplianceStatus());\n+            assertEquals(source.getEntitlementsConsumedByFamily().size(),\n+                dest.getEntitlementsConsumedByFamily().size());\n+\n+            //TODO: Add family check here\n+            /*boolean isConsumed;\n+            if(!source.getEntitlementsConsumedByFamily().isEmpty()) {\n+                isConsumed = source.getEntitlementsConsumedByFamily().entrySet().stream()\n+                    .allMatch(e -> e.equals(dest.getEntitlementsConsumedByFamily().get(e.getKey())));\n+                assertTrue(isConsumed);\n+            }*/", "originalCommit": "482111a75c24579277f968f9677f7c09b2141db4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NzgxOQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496457819", "bodyText": "Removed OwnerInfoTranslator.", "author": "sonalidhome", "createdAt": "2020-09-29T06:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0MjE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b300038ad20522b825951d0fe7c9af9e7b691279", "chunk": "diff --git a/server/src/test/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslatorTest.java b/server/src/test/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslatorTest.java\ndeleted file mode 100644\nindex 3e757bcee..000000000\n--- a/server/src/test/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslatorTest.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/**\n- * Copyright (c) 2009 - 2020 Red Hat, Inc.\n- *\n- * This software is licensed to you under the GNU General Public License,\n- * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n- * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n- * along with this software; if not, see\n- * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n- *\n- * Red Hat trademarks are not licensed under GPLv2. No permission is\n- * granted to use or replicate Red Hat trademarks that are incorporated\n- * in this software or its documentation.\n- */\n-\n-package org.candlepin.dto.api.v1;\n-\n-import static org.junit.Assert.*;\n-\n-import org.candlepin.dto.AbstractTranslatorTest;\n-import org.candlepin.dto.ModelTranslator;\n-import org.candlepin.model.ConsumerType;\n-import org.candlepin.model.OwnerInfo;\n-\n-public class OwnerInfoDTOTranslatorTest extends\n-    AbstractTranslatorTest<OwnerInfo, OwnerInfoDTO, OwnerInfoDTOTranslator> {\n-\n-    OwnerInfoDTOTranslator translator = new OwnerInfoDTOTranslator();\n-\n-    @Override\n-    protected void initModelTranslator(ModelTranslator modelTranslator) {\n-        modelTranslator.registerTranslator(this.translator,\n-            OwnerInfo.class, OwnerInfoDTO.class);\n-    }\n-\n-    @Override\n-    protected OwnerInfoDTOTranslator initObjectTranslator() {\n-        return this.translator;\n-    }\n-\n-    @Override\n-    protected OwnerInfo initSourceObject() {\n-        OwnerInfo ownerInfo = new OwnerInfo();\n-        ownerInfo.addTypeTotal(new ConsumerType(\"test\"), 1, 2);\n-        ownerInfo.setGuestCount(2);\n-        ownerInfo.setPhysicalCount(2);\n-        ownerInfo.addToConsumerTypeCountByPool(new ConsumerType(\"test-1\"), 5);\n-        ownerInfo.addToEnabledConsumerTypeCountByPool(new ConsumerType(\"test-2\"), 1);\n-        ownerInfo.setConsumerCountByComplianceStatus(\"test-status\", 4);\n-        ownerInfo.addToEntitlementsConsumedByFamily(\"test-family\", 1, 3);\n-        return ownerInfo;\n-    }\n-\n-    @Override\n-    protected OwnerInfoDTO initDestinationObject() {\n-        return new OwnerInfoDTO();\n-    }\n-\n-    @Override\n-    protected void verifyOutput(OwnerInfo source, OwnerInfoDTO dest, boolean childrenGenerated) {\n-        if (source != null) {\n-            assertEquals(source.getConsumerCounts(), dest.getConsumerCounts());\n-            assertEquals(source.getConsumerGuestCounts(), dest.getConsumerGuestCounts());\n-            assertEquals(source.getEntitlementsConsumedByType(), dest.getEntitlementsConsumedByType());\n-            assertEquals(source.getConsumerTypeCountByPool(), dest.getConsumerTypeCountByPool());\n-            assertEquals(source.getEnabledConsumerTypeCountByPool(),\n-                dest.getEnabledConsumerTypeCountByPool());\n-            assertEquals(source.getConsumerCountsByComplianceStatus(),\n-                dest.getConsumerCountsByComplianceStatus());\n-            assertEquals(source.getEntitlementsConsumedByFamily().size(),\n-                dest.getEntitlementsConsumedByFamily().size());\n-\n-            //TODO: Add family check here\n-            /*boolean isConsumed;\n-            if(!source.getEntitlementsConsumedByFamily().isEmpty()) {\n-                isConsumed = source.getEntitlementsConsumedByFamily().entrySet().stream()\n-                    .allMatch(e -> e.equals(dest.getEntitlementsConsumedByFamily().get(e.getKey())));\n-                assertTrue(isConsumed);\n-            }*/\n-\n-        }\n-        else {\n-            assertNull(dest);\n-        }\n-    }\n-}\n"}}, {"oid": "b300038ad20522b825951d0fe7c9af9e7b691279", "url": "https://github.com/candlepin/candlepin/commit/b300038ad20522b825951d0fe7c9af9e7b691279", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes", "committedDate": "2020-09-29T06:52:26Z", "type": "forcePushed"}, {"oid": "12bc08f25c024968a349d475b218cd9410fe278c", "url": "https://github.com/candlepin/candlepin/commit/12bc08f25c024968a349d475b218cd9410fe278c", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes", "committedDate": "2020-09-29T07:02:08Z", "type": "forcePushed"}, {"oid": "87268966528d5376b4e5bd2909f6eb333c1c2b1f", "url": "https://github.com/candlepin/candlepin/commit/87268966528d5376b4e5bd2909f6eb333c1c2b1f", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes", "committedDate": "2020-09-29T07:26:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMjUyMw==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496602523", "bodyText": "This should be iterating over getConsumerTypeCountByPool", "author": "nikosmoum", "createdAt": "2020-09-29T10:14:53Z", "path": "server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2009 - 2012 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.model;\n+\n+import org.candlepin.dto.api.v1.ConsumptionTypeCountsDTO;\n+import org.candlepin.dto.api.v1.OwnerInfo;\n+\n+import java.util.List;\n+\n+/**\n+ * OwnerInfoBuilder is used to accumulate data to build OwnerInfo with dynamic values.\n+ */\n+\n+public class OwnerInfoBuilder {\n+\n+    private OwnerInfo ownerInfo;\n+\n+    public static final String PHYSICAL = \"physical\";\n+    public static final String GUEST = \"guest\";\n+\n+    public OwnerInfoBuilder() {\n+        ownerInfo = new OwnerInfo();\n+    }\n+\n+    public OwnerInfo build() {\n+        return this.ownerInfo;\n+    }\n+\n+    public void addTypeTotal(ConsumerType type, int consumers, int entitlements) {\n+        ownerInfo.putConsumerCounts(type.getLabel(), consumers);\n+        ownerInfo.putEntitlementsConsumedByType(type.getLabel(), entitlements);\n+    }\n+\n+    public void addToConsumerTypeCountByPool(ConsumerType type, int toAdd) {\n+        Integer count = ownerInfo.getConsumerTypeCountByPool().get(type.getLabel());\n+        if (count == null) {\n+            count = 0;\n+        }\n+        ownerInfo.putConsumerTypeCountByPool(type.getLabel(), count + toAdd);\n+    }\n+\n+    public void addToEnabledConsumerTypeCountByPool(ConsumerType type, int toAdd) {\n+        Integer count = ownerInfo.getEnabledConsumerTypeCountByPool().get(type.getLabel());\n+        if (count == null) {\n+            count = 0;\n+        }\n+        ownerInfo.putEnabledConsumerTypeCountByPool(type.getLabel(), count + toAdd);\n+    }\n+\n+    public void setConsumerTypesByPool(List<ConsumerType> consumerTypes) {\n+        for (ConsumerType c : consumerTypes) {\n+            ownerInfo.putConsumerTypeCountByPool(c.getLabel(), 0);\n+        }\n+    }\n+\n+    public void addToEntitlementsConsumedByFamily(String family, int physical,\n+        int virtual) {\n+        ConsumptionTypeCountsDTO typeCounts;\n+        if (!ownerInfo.getEntitlementsConsumedByFamily().containsKey(family)) {\n+            typeCounts = new ConsumptionTypeCountsDTO().physical(0).guest(0);\n+            ownerInfo.putEntitlementsConsumedByFamily(family, typeCounts);\n+        }\n+        else {\n+            typeCounts = ownerInfo.getEntitlementsConsumedByFamily().get(family);\n+        }\n+\n+        typeCounts.setPhysical(typeCounts.getPhysical() + physical);\n+        typeCounts.setGuest(typeCounts.getGuest() + virtual);\n+    }\n+\n+    public void addDefaultEntitlementsConsumedByFamily(int physical, int virtual) {\n+        for (String key : ownerInfo.getEntitlementsConsumedByFamily().keySet()) {\n+            ConsumptionTypeCountsDTO count = ownerInfo.getEntitlementsConsumedByFamily().get(key);\n+            physical -= count.getPhysical();\n+            virtual -= count.getGuest();\n+        }\n+\n+        // just ignore the default family if we have nothing to put in it.\n+        if (physical > 0 || virtual > 0) {\n+            addToEntitlementsConsumedByFamily(\"none\", physical, virtual);\n+        }\n+    }\n+\n+    public void addDefaultEnabledConsumerTypeCount(int activePools) {\n+        for (String key : ownerInfo.getEntitlementsConsumedByType().keySet()) {", "originalCommit": "87268966528d5376b4e5bd2909f6eb333c1c2b1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1MDY4OQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496650689", "bodyText": "Corrected.", "author": "sonalidhome", "createdAt": "2020-09-29T11:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMjUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "de72e6192899fc03b145bd49bb13aec8291ba159", "chunk": "diff --git a/server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java b/server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java\nindex 6175aa751..4ffd3d6e9 100644\n--- a/server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java\n+++ b/server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java\n\n@@ -33,10 +33,8 @@ public class OwnerInfoBuilder {\n \n     public OwnerInfoBuilder() {\n         ownerInfo = new OwnerInfo();\n-    }\n-\n-    public OwnerInfo build() {\n-        return this.ownerInfo;\n+        ownerInfo.putConsumerGuestCounts(GUEST, 0);\n+        ownerInfo.putConsumerGuestCounts(PHYSICAL, 0);\n     }\n \n     public void addTypeTotal(ConsumerType type, int consumers, int entitlements) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwODA0NQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496608045", "bodyText": "The original OwnerInfo constructor was doing some data initialization:\n        consumerGuestCounts.put(GUEST, 0);\n        consumerGuestCounts.put(PHYSICAL, 0);\n\nWe should also add that here, and add a unit test for it if one does not already exist", "author": "nikosmoum", "createdAt": "2020-09-29T10:24:43Z", "path": "server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2009 - 2012 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.model;\n+\n+import org.candlepin.dto.api.v1.ConsumptionTypeCountsDTO;\n+import org.candlepin.dto.api.v1.OwnerInfo;\n+\n+import java.util.List;\n+\n+/**\n+ * OwnerInfoBuilder is used to accumulate data to build OwnerInfo with dynamic values.\n+ */\n+\n+public class OwnerInfoBuilder {\n+\n+    private OwnerInfo ownerInfo;\n+\n+    public static final String PHYSICAL = \"physical\";\n+    public static final String GUEST = \"guest\";\n+\n+    public OwnerInfoBuilder() {\n+        ownerInfo = new OwnerInfo();", "originalCommit": "87268966528d5376b4e5bd2909f6eb333c1c2b1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1MzQzOQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496653439", "bodyText": "Consumer count is set in setConsumerGuestCounts from OwnerInfoCurator. And this method is getting called before info.build(). Hence the Owner with no consumer is working as excepted. Still, I have added these into initialization as per the request.", "author": "sonalidhome", "createdAt": "2020-09-29T11:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwODA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "de72e6192899fc03b145bd49bb13aec8291ba159", "chunk": "diff --git a/server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java b/server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java\nindex 6175aa751..4ffd3d6e9 100644\n--- a/server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java\n+++ b/server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java\n\n@@ -33,10 +33,8 @@ public class OwnerInfoBuilder {\n \n     public OwnerInfoBuilder() {\n         ownerInfo = new OwnerInfo();\n-    }\n-\n-    public OwnerInfo build() {\n-        return this.ownerInfo;\n+        ownerInfo.putConsumerGuestCounts(GUEST, 0);\n+        ownerInfo.putConsumerGuestCounts(PHYSICAL, 0);\n     }\n \n     public void addTypeTotal(ConsumerType type, int consumers, int entitlements) {\n"}}, {"oid": "de72e6192899fc03b145bd49bb13aec8291ba159", "url": "https://github.com/candlepin/candlepin/commit/de72e6192899fc03b145bd49bb13aec8291ba159", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes", "committedDate": "2020-09-29T11:43:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1MzQ3OA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496653478", "bodyText": "Unfortunately, it is not as simple as changing the source on the translator from Subscription to Pool.\nWhen the fabricate method creates a new Subscription object, it uses this constructor: public Subscription populate(Pool source, ProductCurator productCurator) which itself does A LOT of work that involves logic, and the ProductCurator. For example, we can't just assign the quantity, but calculate it first with Subscription.setQuantityFromPool.\nWe should move all that logic from the Subscription.populate(source, productCurator) method here because it is basically a translator method hidden within the Subscription class, and entirely remove the following methods, because they are will no longer be needed:\nSubscription.Subscription(Pool source, ProductCurator productCurator)\nSubscription.populate(Pool source, ProductCurator productCurator)\nSubscription.setQuantityFromPool(Pool pool)\nCandlepinPoolManager.fabricateSubscriptionFromPool(Pool pool)\nPoolManager.fabricateSubscriptionFromPool(Pool pool)", "author": "nikosmoum", "createdAt": "2020-09-29T11:49:46Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/PoolToSubscriptionTranslator.java", "diffHunk": "@@ -74,13 +74,13 @@ public SubscriptionDTO populate(\n             throw new IllegalArgumentException(\"dest is null\");\n         }\n \n-        dest.id(source.getId())\n+        dest.id(source.getSubscriptionId())\n             .quantity(source.getQuantity())", "originalCommit": "de72e6192899fc03b145bd49bb13aec8291ba159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNDE2MQ==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r499414161", "bodyText": "Updated the changes as per the Subscription.populate method. Also removed the not required methods.", "author": "sonalidhome", "createdAt": "2020-10-05T08:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1MzQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "4e455c45e2b74a182c5fa1f13024c70f2d2219e0", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/api/v1/PoolToSubscriptionTranslator.java b/server/src/main/java/org/candlepin/dto/api/v1/PoolToSubscriptionTranslator.java\nindex 737a2dcde..fc6047bb7 100644\n--- a/server/src/main/java/org/candlepin/dto/api/v1/PoolToSubscriptionTranslator.java\n+++ b/server/src/main/java/org/candlepin/dto/api/v1/PoolToSubscriptionTranslator.java\n\n@@ -75,7 +89,7 @@ public class PoolToSubscriptionTranslator implements ObjectTranslator<Pool, Subs\n         }\n \n         dest.id(source.getSubscriptionId())\n-            .quantity(source.getQuantity())\n+            .quantity(getQuantityFromPool(source))\n             .startDate(Util.toDateTime(source.getStartDate()))\n             .endDate(Util.toDateTime(source.getEndDate()))\n             .contractNumber(source.getContractNumber())\n"}}, {"oid": "4e455c45e2b74a182c5fa1f13024c70f2d2219e0", "url": "https://github.com/candlepin/candlepin/commit/4e455c45e2b74a182c5fa1f13024c70f2d2219e0", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes", "committedDate": "2020-10-05T08:03:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzNTE0NA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r499535144", "bodyText": "One last thing to mention:\nI think we should preserve these 3 unit tests (this one, along with testFabricateSubWithZeroInstanceMultiplier and testFabricateSubWithMultiplierAndInstanceMultiplier) because they test the quantity translation logic. We can port them directly into PoolToSubscriptionTranslatorTest.java and change the fabricateSubscriptionFromPool call to translator.translate(pool, SubscriptionDTO)", "author": "nikosmoum", "createdAt": "2020-10-05T11:41:06Z", "path": "server/src/test/java/org/candlepin/controller/PoolManagerTest.java", "diffHunk": "@@ -1703,117 +1703,6 @@ public void createPoolsForPoolBonusExist() {\n         assertThrows(IllegalStateException.class, () -> pRules.createAndEnrichPools(p, existingPools));\n     }\n \n-    @Test\n-    public void testFabricateSubscriptionFromPool() {\n-        Product product = TestUtil.createProduct(\"product\", \"Product\");\n-        Product provided1 = TestUtil.createProduct(\"provided-1\", \"Provided 1\");\n-        Product provided2 = TestUtil.createProduct(\"provided-2\", \"Provided 2\");\n-        product.setLocked(true);\n-        provided1.setLocked(true);\n-        provided2.setLocked(true);\n-\n-        ProductData productDTO = product.toDTO();\n-        ProductData provided1DTO = provided1.toDTO();\n-        ProductData provided2DTO = provided2.toDTO();\n-\n-        Pool pool = mock(Pool.class);\n-\n-        HashSet<Product> provided = new HashSet<>();\n-        HashSet<ProductData> providedDTOs = new HashSet<>();\n-        provided.add(provided1);\n-        provided.add(provided2);\n-        providedDTOs.add(provided1DTO);\n-        providedDTOs.add(provided2DTO);\n-\n-        Long quantity = new Long(42);\n-\n-        Date startDate = new Date(System.currentTimeMillis() - 86400000);\n-        Date endDate = new Date(System.currentTimeMillis() + 86400000);\n-        Date updated = new Date();\n-\n-        String subscriptionId = \"test-subscription-1\";\n-\n-        when(pool.getOwner()).thenReturn(owner);\n-        when(pool.getProduct()).thenReturn(product);\n-        when(mockProductCurator.getPoolProvidedProductsCached(any(Pool.class))).thenReturn(provided);\n-        when(pool.getQuantity()).thenReturn(quantity);\n-        when(pool.getStartDate()).thenReturn(startDate);\n-        when(pool.getEndDate()).thenReturn(endDate);\n-        when(pool.getUpdated()).thenReturn(updated);\n-        when(pool.getSubscriptionId()).thenReturn(subscriptionId);\n-        // TODO: Add other attributes to check here.\n-\n-        Subscription fabricated = manager.fabricateSubscriptionFromPool(pool);\n-        pool.populateAllTransientProvidedProducts(mockProductCurator);\n-        assertEquals(owner, fabricated.getOwner());\n-        assertEquals(productDTO, fabricated.getProduct());\n-        assertEquals(providedDTOs, fabricated.getProvidedProducts());\n-        assertEquals(quantity, fabricated.getQuantity());\n-        assertEquals(startDate, fabricated.getStartDate());\n-        assertEquals(endDate, fabricated.getEndDate());\n-        assertEquals(updated, fabricated.getModified());\n-        assertEquals(subscriptionId, fabricated.getId());\n-    }\n-\n-\n-    /**\n-     * See BZ1292283\n-     */\n-    @Test\n-    public void testFabricateSubWithMultiplier() {", "originalCommit": "4e455c45e2b74a182c5fa1f13024c70f2d2219e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzMzAyOA==", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r499633028", "bodyText": "Added these tests under PoolToSubscriptionTranslatorTest.java", "author": "sonalidhome", "createdAt": "2020-10-05T14:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzNTE0NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c79c43f6e2a2db667d8ac9db4dead8e5fecf3593", "url": "https://github.com/candlepin/candlepin/commit/c79c43f6e2a2db667d8ac9db4dead8e5fecf3593", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes", "committedDate": "2020-10-05T14:16:24Z", "type": "forcePushed"}, {"oid": "e7c71eba6de0a48569ef7fb6e7bc25f3264a7b6c", "url": "https://github.com/candlepin/candlepin/commit/e7c71eba6de0a48569ef7fb6e7bc25f3264a7b6c", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes", "committedDate": "2020-10-06T05:15:11Z", "type": "forcePushed"}, {"oid": "975f3bfaf5e90b28b5d0e71abb77f4edcc8a7032", "url": "https://github.com/candlepin/candlepin/commit/975f3bfaf5e90b28b5d0e71abb77f4edcc8a7032", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes", "committedDate": "2020-10-07T05:28:07Z", "type": "commit"}, {"oid": "975f3bfaf5e90b28b5d0e71abb77f4edcc8a7032", "url": "https://github.com/candlepin/candlepin/commit/975f3bfaf5e90b28b5d0e71abb77f4edcc8a7032", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes", "committedDate": "2020-10-07T05:28:07Z", "type": "forcePushed"}]}