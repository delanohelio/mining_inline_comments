{"pr_number": 2694, "pr_title": "Bug 1751848 Stopped checking & consider pools irrespective of Consumer Entitlement SLA for auto attach. (ENT-2278)", "pr_createdAt": "2020-05-06T07:05:35Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2694", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0MDA4NQ==", "url": "https://github.com/candlepin/candlepin/pull/2694#discussion_r420640085", "bodyText": "Now that we have a change in behaviour, that is tested by this test, we should remove the other tests that were testing the previous behaviour (the only still pass for the wrong reasons, because they were wrongly written in the first place):\nselectBestPoolsDoesNotFilterPoolsBySLAWhenConsumerHasOnlyNullEntitlementSLAs,\nselectBestPoolsFiltersPoolsBySLAWhenConsumerWithSLAHasNonNullNonMatchingEntitlementSLAsAndOwnerDefaultSLAIsUsed,\nselectBestPoolsFiltersPoolsBySLAWhenConsumerWithSLAHasNonNullNonMatchingEntitlementSLAsAndOverrideSLAIsUsed,\nselectBestPoolsFiltersPoolsBySLAWhenConsumerHasNonNullNonMatchingEntitlementSLAsAndConsumerSLAIsUsed,\nselectBestPoolsDoesNotFilterPoolsBySLAWhenConsumerHasNonNullMatchingEntitlementSLAs", "author": "nikosmoum", "createdAt": "2020-05-06T08:56:24Z", "path": "server/src/test/java/org/candlepin/policy/AutobindRulesTest.java", "diffHunk": "@@ -638,6 +638,59 @@ public void selectBestPoolsFiltersPoolsBySLAWhenConsumerHasNonNullNonMatchingEnt\n         assertTrue(bestPools.contains(new PoolQuantity(noSLAPool, 1)));\n     }\n \n+    @Test\n+    @SuppressWarnings(\"checkstyle:LineLength\")\n+    public void selectBestPoolsDoesNotFilterPoolsByConsumerEntitlementInsteadPrioritizePoolsMatchingConsumerSLA() {", "originalCommit": "9dd0a44bbd88fdf234b84a35035e5a4c227681dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3ODYyNQ==", "url": "https://github.com/candlepin/candlepin/pull/2694#discussion_r420678625", "bodyText": "Removed these unit tests & Fixed the commit message.", "author": "wolfdale", "createdAt": "2020-05-06T10:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0MDA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "442877f10a7e9f10c3ad5aac873bb8d4e60e03c6", "chunk": "diff --git a/server/src/test/java/org/candlepin/policy/AutobindRulesTest.java b/server/src/test/java/org/candlepin/policy/AutobindRulesTest.java\nindex 7b82750f1..410f0a540 100644\n--- a/server/src/test/java/org/candlepin/policy/AutobindRulesTest.java\n+++ b/server/src/test/java/org/candlepin/policy/AutobindRulesTest.java\n\n@@ -549,95 +549,6 @@ public class AutobindRulesTest {\n         assertTrue(bestPools.contains(new PoolQuantity(noSLAPool, 1)));\n     }\n \n-    @Test\n-    public void selectBestPoolsDoesNotFilterPoolsBySLAWhenConsumerHasNonNullMatchingEntitlementSLAs() {\n-        // Create Premium SLA prod\n-        String slaPremiumProdId = \"premium-sla-product\";\n-        Product slaPremiumProduct = TestUtil.createProduct(slaPremiumProdId, \"Product with SLA Permium\");\n-        slaPremiumProduct.setAttribute(Product.Attributes.SUPPORT_LEVEL, \"Premium\");\n-\n-        Pool slaPremiumPool = TestUtil.createPool(owner, slaPremiumProduct);\n-        slaPremiumPool.setId(\"pool-with-premium-sla\");\n-        slaPremiumPool.getProduct().setAttribute(Product.Attributes.SUPPORT_LEVEL, \"Premium\");\n-\n-        // Create a product with no SLA.\n-        Product noSLAProduct = TestUtil.createProduct(productId, \"A test product\");\n-        Pool noSLAPool = TestUtil.createPool(owner, noSLAProduct);\n-        noSLAPool.setId(\"pool-1\");\n-\n-        List<Pool> pools = new LinkedList<>();\n-        pools.add(noSLAPool);\n-        pools.add(slaPremiumPool);\n-\n-        // The consumer has set their SLA to Premium, and also has an existing entitlement with Premium SLA\n-        // which means the pool with Premium SLA should not be filtered.\n-        consumer.setServiceLevel(\"Premium\");\n-        Entitlement entitlementWithPremiumSLA = new Entitlement();\n-        entitlementWithPremiumSLA.setPool(slaPremiumPool);\n-        compliance.addCompliantProduct(\"2432\", entitlementWithPremiumSLA);\n-\n-        List<PoolQuantity> bestPools = autobindRules.selectBestPools(consumer,\n-            new String[]{ productId, slaPremiumProdId },\n-            pools, compliance, null, new HashSet<>(), false);\n-\n-        assertEquals(2, bestPools.size());\n-        // The Premium SLA pool should NOT have gotten filtered because the customer had\n-        // existing entitlements that included one with a Premium SLA.\n-        assertTrue(bestPools.contains(new PoolQuantity(slaPremiumPool, 1)));\n-        // Also, check pool with no sla is not filtered (as always)\n-        assertTrue(bestPools.contains(new PoolQuantity(noSLAPool, 1)));\n-    }\n-\n-    @Test\n-    @SuppressWarnings(\"checkstyle:LineLength\")\n-    public void selectBestPoolsFiltersPoolsBySLAWhenConsumerHasNonNullNonMatchingEntitlementSLAsAndConsumerSLAIsUsed() {\n-        // Create Premium SLA prod\n-        String slaPremiumProdId = \"premium-sla-product\";\n-        Product slaPremiumProduct = TestUtil.createProduct(slaPremiumProdId, \"Product with SLA Permium\");\n-        slaPremiumProduct.setAttribute(Product.Attributes.SUPPORT_LEVEL, \"Premium\");\n-\n-        Pool slaPremiumPool = TestUtil.createPool(owner, slaPremiumProduct);\n-        slaPremiumPool.setId(\"pool-with-premium-sla\");\n-        slaPremiumPool.getProduct().setAttribute(Product.Attributes.SUPPORT_LEVEL, \"Premium\");\n-\n-        // Create Standard SLA Product\n-        String slaStandardProdId = \"standard-sla-product\";\n-        Product slaStandardProduct = TestUtil.createProduct(slaStandardProdId, \"Product with SLA Standard\");\n-        slaStandardProduct.setAttribute(Product.Attributes.SUPPORT_LEVEL, \"Standard\");\n-\n-        Pool slaStandardPool = TestUtil.createPool(owner, slaStandardProduct);\n-        slaStandardPool.setId(\"pool-with-standard-sla\");\n-        slaStandardPool.getProduct().setAttribute(Product.Attributes.SUPPORT_LEVEL, \"Standard\");\n-\n-        // Create a product with no SLA.\n-        Product noSLAProduct = TestUtil.createProduct(productId, \"A test product\");\n-        Pool noSLAPool = TestUtil.createPool(owner, noSLAProduct);\n-        noSLAPool.setId(\"pool-1\");\n-\n-        List<Pool> pools = new LinkedList<>();\n-        pools.add(noSLAPool);\n-        pools.add(slaPremiumPool);\n-        // ^ A Standard SLA pool is not in the list of candidate pools.\n-\n-        // The consumer has set their SLA to Premium, and also has an existing entitlement with Standard SLA\n-        // which means the pool with Premium SLA SHOULD get filtered.\n-        consumer.setServiceLevel(\"Premium\");\n-        Entitlement entitlementWithStandardSLA = new Entitlement();\n-        entitlementWithStandardSLA.setPool(slaStandardPool);\n-        compliance.addPartiallyCompliantProduct(\"b4b4b4\", entitlementWithStandardSLA);\n-\n-        List<PoolQuantity> bestPools = autobindRules.selectBestPools(consumer,\n-            new String[]{ productId, slaStandardProdId},\n-            pools, compliance, null, new HashSet<>(), false);\n-\n-        assertEquals(1, bestPools.size());\n-        // The Premium SLA pool should get filtered because the customer had existing entitlements that\n-        // did not include one with a Premium SLA.\n-        assertFalse(bestPools.contains(new PoolQuantity(slaPremiumPool, 1)));\n-        // Also, check pool with no sla is not filtered (as always)\n-        assertTrue(bestPools.contains(new PoolQuantity(noSLAPool, 1)));\n-    }\n-\n     @Test\n     @SuppressWarnings(\"checkstyle:LineLength\")\n     public void selectBestPoolsDoesNotFilterPoolsByConsumerEntitlementInsteadPrioritizePoolsMatchingConsumerSLA() {\n"}}, {"oid": "442877f10a7e9f10c3ad5aac873bb8d4e60e03c6", "url": "https://github.com/candlepin/candlepin/commit/442877f10a7e9f10c3ad5aac873bb8d4e60e03c6", "message": "1751848: Stopped checking & consider pools irrespective of Consumer Entitlement SLA for auto attach.\n\n\t- Removed Pool validation on Consumer Existing SLA from rules.js\n\t- SLA is only going to be used to prioritize/de-prioritize pools.", "committedDate": "2020-05-06T09:56:38Z", "type": "commit"}, {"oid": "442877f10a7e9f10c3ad5aac873bb8d4e60e03c6", "url": "https://github.com/candlepin/candlepin/commit/442877f10a7e9f10c3ad5aac873bb8d4e60e03c6", "message": "1751848: Stopped checking & consider pools irrespective of Consumer Entitlement SLA for auto attach.\n\n\t- Removed Pool validation on Consumer Existing SLA from rules.js\n\t- SLA is only going to be used to prioritize/de-prioritize pools.", "committedDate": "2020-05-06T09:56:38Z", "type": "forcePushed"}]}