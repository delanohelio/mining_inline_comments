{"pr_number": 2723, "pr_title": "ENT-2440: Map internal async job states to a subset of client-supported states", "pr_createdAt": "2020-06-08T08:19:06Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2723", "timeline": [{"oid": "111be186786a300e52f9a4155854697f4475ea60", "url": "https://github.com/candlepin/candlepin/commit/111be186786a300e52f9a4155854697f4475ea60", "message": "ENT-2440: Map internal async job states to a subset of client-supported states\n- Introduce an enum with client facing Job States\n- Map internal JobState to PublicJobState", "committedDate": "2020-06-08T10:22:46Z", "type": "forcePushed"}, {"oid": "10663fde0a6da529aba62d6d194faa72b64bc1e1", "url": "https://github.com/candlepin/candlepin/commit/10663fde0a6da529aba62d6d194faa72b64bc1e1", "message": "ENT-2440: Map internal async job states to a subset of client-supported states\n- Introduce an enum with client facing Job States\n- Map internal JobState to PublicJobState", "committedDate": "2020-06-08T10:56:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczMDI1MA==", "url": "https://github.com/candlepin/candlepin/pull/2723#discussion_r436730250", "bodyText": "I'm torn on this one. I can see a temporary \"FAILED\" output being useful, but it's still kind of \"RUNNING\" since it'll get picked up again unless something breaks internally.", "author": "Ceiu", "createdAt": "2020-06-08T14:01:34Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java", "diffHunk": "@@ -72,14 +71,54 @@ public AsyncJobStatusDTO populate(ModelTranslator translator, AsyncJobStatus sou\n         destination.setAttempts(source.getAttempts());\n         destination.setMaxAttempts(source.getMaxAttempts());\n         destination.setResult(source.getJobResult());\n+        destination.setState(stateToString(mapState(source.getState())));\n+        destination.setPreviousState(stateToString(mapState(source.getPreviousState())));\n \n-        JobState state = source.getState();\n-        destination.setState(state != null ? state.name() : null);\n+        return destination;\n+    }\n \n-        JobState pstate = source.getPreviousState();\n-        destination.setPreviousState(pstate != null ? pstate.name() : null);\n+    private String stateToString(PublicJobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        return state.name();\n+    }\n \n-        return destination;\n+    public static PublicJobState mapState(JobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        PublicJobState publicJobState;\n+        switch (state) {\n+            case FINISHED:\n+                publicJobState = PublicJobState.FINISHED;\n+                break;\n+            case CREATED:\n+                publicJobState = PublicJobState.CREATED;\n+                break;\n+            case QUEUED:\n+            case RUNNING:\n+            case SCHEDULED:\n+            case WAITING:\n+                publicJobState = PublicJobState.RUNNING;\n+                break;\n+            case ABORTED:\n+            case CANCELED:\n+            case FAILED:\n+            case FAILED_WITH_RETRY:", "originalCommit": "10663fde0a6da529aba62d6d194faa72b64bc1e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NDEzNg==", "url": "https://github.com/candlepin/candlepin/pull/2723#discussion_r436774136", "bodyText": "I haven't thought of that. It makes sense to map it to failed only once it reaches terminal state. Done.", "author": "Januson", "createdAt": "2020-06-08T14:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczMDI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "016d9438e9499275bbc63dd7b8f4b8ca8c64af98", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java b/server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java\nindex e4532a1d8..01534753c 100644\n--- a/server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java\n+++ b/server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java\n\n@@ -94,18 +94,20 @@ public class AsyncJobStatusTranslator extends TimestampedEntityTranslator<AsyncJ\n                 publicJobState = PublicJobState.FINISHED;\n                 break;\n             case CREATED:\n+            case QUEUED:\n                 publicJobState = PublicJobState.CREATED;\n                 break;\n-            case QUEUED:\n+            case CANCELED:\n+                publicJobState = PublicJobState.CANCELED;\n+                break;\n+            case FAILED_WITH_RETRY:\n             case RUNNING:\n             case SCHEDULED:\n             case WAITING:\n                 publicJobState = PublicJobState.RUNNING;\n                 break;\n             case ABORTED:\n-            case CANCELED:\n             case FAILED:\n-            case FAILED_WITH_RETRY:\n             default:\n                 publicJobState = PublicJobState.FAILED;\n                 break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzI5Nw==", "url": "https://github.com/candlepin/candlepin/pull/2723#discussion_r436743297", "bodyText": "Should QUEUED be part of RUNNING or CREATED? This is another one where I can see arguments for either case.", "author": "Ceiu", "createdAt": "2020-06-08T14:15:42Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java", "diffHunk": "@@ -72,14 +71,54 @@ public AsyncJobStatusDTO populate(ModelTranslator translator, AsyncJobStatus sou\n         destination.setAttempts(source.getAttempts());\n         destination.setMaxAttempts(source.getMaxAttempts());\n         destination.setResult(source.getJobResult());\n+        destination.setState(stateToString(mapState(source.getState())));\n+        destination.setPreviousState(stateToString(mapState(source.getPreviousState())));\n \n-        JobState state = source.getState();\n-        destination.setState(state != null ? state.name() : null);\n+        return destination;\n+    }\n \n-        JobState pstate = source.getPreviousState();\n-        destination.setPreviousState(pstate != null ? pstate.name() : null);\n+    private String stateToString(PublicJobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        return state.name();\n+    }\n \n-        return destination;\n+    public static PublicJobState mapState(JobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        PublicJobState publicJobState;\n+        switch (state) {\n+            case FINISHED:\n+                publicJobState = PublicJobState.FINISHED;\n+                break;\n+            case CREATED:\n+                publicJobState = PublicJobState.CREATED;\n+                break;\n+            case QUEUED:", "originalCommit": "10663fde0a6da529aba62d6d194faa72b64bc1e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NDMyNg==", "url": "https://github.com/candlepin/candlepin/pull/2723#discussion_r436774326", "bodyText": "I guess you are right. Queued job is not running yet so we can merge the state into the CREATED instead of RUNNING. Done.", "author": "Januson", "createdAt": "2020-06-08T14:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzI5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "016d9438e9499275bbc63dd7b8f4b8ca8c64af98", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java b/server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java\nindex e4532a1d8..01534753c 100644\n--- a/server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java\n+++ b/server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java\n\n@@ -94,18 +94,20 @@ public class AsyncJobStatusTranslator extends TimestampedEntityTranslator<AsyncJ\n                 publicJobState = PublicJobState.FINISHED;\n                 break;\n             case CREATED:\n+            case QUEUED:\n                 publicJobState = PublicJobState.CREATED;\n                 break;\n-            case QUEUED:\n+            case CANCELED:\n+                publicJobState = PublicJobState.CANCELED;\n+                break;\n+            case FAILED_WITH_RETRY:\n             case RUNNING:\n             case SCHEDULED:\n             case WAITING:\n                 publicJobState = PublicJobState.RUNNING;\n                 break;\n             case ABORTED:\n-            case CANCELED:\n             case FAILED:\n-            case FAILED_WITH_RETRY:\n             default:\n                 publicJobState = PublicJobState.FAILED;\n                 break;\n"}}, {"oid": "016d9438e9499275bbc63dd7b8f4b8ca8c64af98", "url": "https://github.com/candlepin/candlepin/commit/016d9438e9499275bbc63dd7b8f4b8ca8c64af98", "message": "ENT-2440: Map internal async job states to a subset of client-supported states\n- Introduce an enum with client facing Job States\n- Map internal JobState to PublicJobState", "committedDate": "2020-06-08T14:55:28Z", "type": "forcePushed"}, {"oid": "96f659a195924f8a35ec2811ceb721dfde3a9997", "url": "https://github.com/candlepin/candlepin/commit/96f659a195924f8a35ec2811ceb721dfde3a9997", "message": "ENT-2440: Map internal async job states to a subset of client-supported states\n- Introduce an enum with client facing Job States\n- Map internal JobState to PublicJobState", "committedDate": "2020-06-08T15:24:10Z", "type": "commit"}, {"oid": "96f659a195924f8a35ec2811ceb721dfde3a9997", "url": "https://github.com/candlepin/candlepin/commit/96f659a195924f8a35ec2811ceb721dfde3a9997", "message": "ENT-2440: Map internal async job states to a subset of client-supported states\n- Introduce an enum with client facing Job States\n- Map internal JobState to PublicJobState", "committedDate": "2020-06-08T15:24:10Z", "type": "forcePushed"}]}