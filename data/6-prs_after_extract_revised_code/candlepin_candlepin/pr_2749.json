{"pr_number": 2749, "pr_title": "ENT-2455: Fix too many params for Entitlements query", "pr_createdAt": "2020-07-09T11:33:25Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2749", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxNzA1NQ==", "url": "https://github.com/candlepin/candlepin/pull/2749#discussion_r453917055", "bodyText": "If we're going to be using this lookup for paging, we need the query itself to be ordered, and we cannot use a set (as its ordering is not guaranteed either).\nThe entire criteria usage itself likely needs to be axed here.", "author": "Ceiu", "createdAt": "2020-07-13T20:36:31Z", "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -437,27 +440,69 @@ private String sanitizeMatchesFilter(String matches) {\n             List<String> entitlementIds = criteria.list();\n \n             if (entitlementIds != null && !entitlementIds.isEmpty()) {\n-                criteria = this.currentSession()\n-                    .createCriteria(Entitlement.class)\n-                    .add(CPRestrictions.in(\"id\", entitlementIds));\n-\n-                entitlementsPage = listByCriteria(criteria, pageRequest);\n+                entitlementsPage = createPage(findEntitlements(entitlementIds), pageRequest);\n             }\n             else {\n                 entitlementsPage = new Page<>();\n-                entitlementsPage.setPageData(Collections.<Entitlement>emptyList());\n+                entitlementsPage.setPageData(Collections.emptyList());\n                 entitlementsPage.setMaxRecords(0);\n             }\n         }\n-\n         return entitlementsPage;\n     }\n \n+    private Set<Entitlement> findEntitlements(List<String> entitlementIds) {", "originalCommit": "5112312c57dac9b5e7ae517fb70ee2aea59aca99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2NDMyNg==", "url": "https://github.com/candlepin/candlepin/pull/2749#discussion_r457964326", "bodyText": "Done.", "author": "Januson", "createdAt": "2020-07-21T09:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxNzA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f77e3cf878eeb7e0ccf62256b7fb7756b31c10a4", "chunk": "diff --git a/server/src/main/java/org/candlepin/model/EntitlementCurator.java b/server/src/main/java/org/candlepin/model/EntitlementCurator.java\nindex a022aa9d9..bdf50c5d0 100644\n--- a/server/src/main/java/org/candlepin/model/EntitlementCurator.java\n+++ b/server/src/main/java/org/candlepin/model/EntitlementCurator.java\n\n@@ -440,7 +437,8 @@ public class EntitlementCurator extends AbstractHibernateCurator<Entitlement> {\n             List<String> entitlementIds = criteria.list();\n \n             if (entitlementIds != null && !entitlementIds.isEmpty()) {\n-                entitlementsPage = createPage(findEntitlements(entitlementIds), pageRequest);\n+                entitlementsPage = createPage(this.findEntitlements(entitlementIds), pageRequest);\n+\n             }\n             else {\n                 entitlementsPage = new Page<>();\n"}}, {"oid": "f77e3cf878eeb7e0ccf62256b7fb7756b31c10a4", "url": "https://github.com/candlepin/candlepin/commit/f77e3cf878eeb7e0ccf62256b7fb7756b31c10a4", "message": "ENT-2455: Fix too many params for Entitlements query", "committedDate": "2020-07-16T10:04:43Z", "type": "forcePushed"}, {"oid": "825d0f256a6c2042077e48c874c108c695ae6763", "url": "https://github.com/candlepin/candlepin/commit/825d0f256a6c2042077e48c874c108c695ae6763", "message": "ENT-2455: Fix too many params for Entitlements query", "committedDate": "2020-07-16T11:33:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzODc1OA==", "url": "https://github.com/candlepin/candlepin/pull/2749#discussion_r458138758", "bodyText": "If we're requiring a list as input, we could use .sublist instead of streaming and collecting.", "author": "Ceiu", "createdAt": "2020-07-21T14:25:51Z", "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -437,27 +437,61 @@ private String sanitizeMatchesFilter(String matches) {\n             List<String> entitlementIds = criteria.list();\n \n             if (entitlementIds != null && !entitlementIds.isEmpty()) {\n-                criteria = this.currentSession()\n-                    .createCriteria(Entitlement.class)\n-                    .add(CPRestrictions.in(\"id\", entitlementIds));\n+                entitlementsPage = createPage(this.findEntitlements(entitlementIds), pageRequest);\n \n-                entitlementsPage = listByCriteria(criteria, pageRequest);\n             }\n             else {\n                 entitlementsPage = new Page<>();\n-                entitlementsPage.setPageData(Collections.<Entitlement>emptyList());\n+                entitlementsPage.setPageData(Collections.emptyList());\n                 entitlementsPage.setMaxRecords(0);\n             }\n         }\n-\n         return entitlementsPage;\n     }\n \n+    private List<Entitlement> findEntitlements(Iterable<String> entitlementIds) {\n+        String queryStr = \"SELECT e \" +\n+            \"FROM Entitlement e \" +\n+            \"WHERE e.id IN (:entitlement_ids) \" +\n+            \"ORDER BY e.id\";\n+\n+        Query query = getEntityManager().createQuery(queryStr, Entitlement.class);\n+        List<Entitlement> result = new LinkedList<>();\n+        if (entitlementIds == null || !entitlementIds.iterator().hasNext()) {\n+            return result;\n+        }\n+\n+        int blockSize = Math.min(this.getInBlockSize(), this.getQueryParameterLimit() / 2);\n+        for (List<String> block : Iterables.partition(entitlementIds, blockSize)) {\n+            result.addAll(query.setParameter(\"entitlement_ids\", block).getResultList());\n+        }\n+        return result;\n+    }\n+\n+    private Page<List<Entitlement>> createPage(List<Entitlement> entitlements, PageRequest pageRequest) {\n+        Page<List<Entitlement>> page = new Page<>();\n+        if (pageRequest != null) {\n+            int start = (pageRequest.getPage() - 1) * pageRequest.getPerPage();\n+            List<Entitlement> currentPage = entitlements.stream()", "originalCommit": "825d0f256a6c2042077e48c874c108c695ae6763", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37d221b0b66da0a76550f5d3647399c7f8c2c75b", "chunk": "diff --git a/server/src/main/java/org/candlepin/model/EntitlementCurator.java b/server/src/main/java/org/candlepin/model/EntitlementCurator.java\nindex 7c3094ca6..34d6936bc 100644\n--- a/server/src/main/java/org/candlepin/model/EntitlementCurator.java\n+++ b/server/src/main/java/org/candlepin/model/EntitlementCurator.java\n\n@@ -434,10 +434,15 @@ public class EntitlementCurator extends AbstractHibernateCurator<Entitlement> {\n                 criteria.add(Restrictions.eq(objectType, object));\n             }\n \n-            List<String> entitlementIds = criteria.list();\n+            List<String> entitlementIds = new LinkedList<>(criteria.list());\n \n             if (entitlementIds != null && !entitlementIds.isEmpty()) {\n-                entitlementsPage = createPage(this.findEntitlements(entitlementIds), pageRequest);\n+                int start = (pageRequest.getPage() - 1) * pageRequest.getPerPage();\n+                List<String> pagedEntIds = entitlementIds.stream()\n+                    .skip(start)\n+                    .limit(pageRequest.getPerPage())\n+                    .collect(Collectors.toList());\n+                entitlementsPage = createPage(this.findEntitlements(pagedEntIds), pageRequest);\n \n             }\n             else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0NDY3OQ==", "url": "https://github.com/candlepin/candlepin/pull/2749#discussion_r458144679", "bodyText": "We're still broken here (and, for the record, we were broken before): as soon as we re-query here, we lose any sorting from the pageRequest unless we pass the same sorting params through.\nAdditionally, if we're going to keep the multi-query behavior, we should use this as an opportunity to not query the entire set of entitlements, and only grab the entitlements from the block of IDs we're going to fetch.", "author": "Ceiu", "createdAt": "2020-07-21T14:33:18Z", "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -437,27 +437,61 @@ private String sanitizeMatchesFilter(String matches) {\n             List<String> entitlementIds = criteria.list();\n \n             if (entitlementIds != null && !entitlementIds.isEmpty()) {\n-                criteria = this.currentSession()\n-                    .createCriteria(Entitlement.class)\n-                    .add(CPRestrictions.in(\"id\", entitlementIds));\n+                entitlementsPage = createPage(this.findEntitlements(entitlementIds), pageRequest);", "originalCommit": "825d0f256a6c2042077e48c874c108c695ae6763", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37d221b0b66da0a76550f5d3647399c7f8c2c75b", "chunk": "diff --git a/server/src/main/java/org/candlepin/model/EntitlementCurator.java b/server/src/main/java/org/candlepin/model/EntitlementCurator.java\nindex 7c3094ca6..34d6936bc 100644\n--- a/server/src/main/java/org/candlepin/model/EntitlementCurator.java\n+++ b/server/src/main/java/org/candlepin/model/EntitlementCurator.java\n\n@@ -434,10 +434,15 @@ public class EntitlementCurator extends AbstractHibernateCurator<Entitlement> {\n                 criteria.add(Restrictions.eq(objectType, object));\n             }\n \n-            List<String> entitlementIds = criteria.list();\n+            List<String> entitlementIds = new LinkedList<>(criteria.list());\n \n             if (entitlementIds != null && !entitlementIds.isEmpty()) {\n-                entitlementsPage = createPage(this.findEntitlements(entitlementIds), pageRequest);\n+                int start = (pageRequest.getPage() - 1) * pageRequest.getPerPage();\n+                List<String> pagedEntIds = entitlementIds.stream()\n+                    .skip(start)\n+                    .limit(pageRequest.getPerPage())\n+                    .collect(Collectors.toList());\n+                entitlementsPage = createPage(this.findEntitlements(pagedEntIds), pageRequest);\n \n             }\n             else {\n"}}, {"oid": "37d221b0b66da0a76550f5d3647399c7f8c2c75b", "url": "https://github.com/candlepin/candlepin/commit/37d221b0b66da0a76550f5d3647399c7f8c2c75b", "message": "ENT-2455: Fix too many params for Entitlements query", "committedDate": "2020-07-22T14:49:49Z", "type": "forcePushed"}, {"oid": "c74c0501c27853f59a3dfe8f8c5bd83c475ccda7", "url": "https://github.com/candlepin/candlepin/commit/c74c0501c27853f59a3dfe8f8c5bd83c475ccda7", "message": "ENT-2455: Fix too many params for Entitlements query", "committedDate": "2020-07-23T07:08:32Z", "type": "forcePushed"}, {"oid": "945c5ec17adeee193ab9316d5810ff850831f52f", "url": "https://github.com/candlepin/candlepin/commit/945c5ec17adeee193ab9316d5810ff850831f52f", "message": "Rewrite the queries into JPA Criteria API", "committedDate": "2020-08-19T14:27:20Z", "type": "forcePushed"}, {"oid": "7c4ad37261e1bda7f72e2057108cf1d8fe0cf211", "url": "https://github.com/candlepin/candlepin/commit/7c4ad37261e1bda7f72e2057108cf1d8fe0cf211", "message": "ENT-2455: Fix too many params for Entitlements query", "committedDate": "2020-08-19T14:30:28Z", "type": "commit"}, {"oid": "a260ae5e651d1567d3a9ca3c760c665ab5939001", "url": "https://github.com/candlepin/candlepin/commit/a260ae5e651d1567d3a9ca3c760c665ab5939001", "message": "Rewrite the queries into JPA Criteria API", "committedDate": "2020-08-19T14:30:28Z", "type": "commit"}, {"oid": "a260ae5e651d1567d3a9ca3c760c665ab5939001", "url": "https://github.com/candlepin/candlepin/commit/a260ae5e651d1567d3a9ca3c760c665ab5939001", "message": "Rewrite the queries into JPA Criteria API", "committedDate": "2020-08-19T14:30:28Z", "type": "forcePushed"}, {"oid": "90420ce77ab06713ab8abbe1cf8b24c66a55f1b2", "url": "https://github.com/candlepin/candlepin/commit/90420ce77ab06713ab8abbe1cf8b24c66a55f1b2", "message": "Fix poolId", "committedDate": "2020-08-20T17:37:53Z", "type": "commit"}, {"oid": "acb59bcaec8a99115bd2334a53113806b25cda94", "url": "https://github.com/candlepin/candlepin/commit/acb59bcaec8a99115bd2334a53113806b25cda94", "message": "Update hsqldb dependency", "committedDate": "2020-08-20T18:19:08Z", "type": "commit"}, {"oid": "424450fb967882c3cb4d5354032999975b5007f6", "url": "https://github.com/candlepin/candlepin/commit/424450fb967882c3cb4d5354032999975b5007f6", "message": "Fix PoolCuratorTest", "committedDate": "2020-08-21T09:34:25Z", "type": "commit"}, {"oid": "f6e2f99b58fb31d97071b5a83d7ce859861e1454", "url": "https://github.com/candlepin/candlepin/commit/f6e2f99b58fb31d97071b5a83d7ce859861e1454", "message": "Setup generation of JPA Metamodel", "committedDate": "2020-08-21T12:53:21Z", "type": "forcePushed"}, {"oid": "f6a2dc21aae6febb2ac9e6d56034f82309bd61e5", "url": "https://github.com/candlepin/candlepin/commit/f6a2dc21aae6febb2ac9e6d56034f82309bd61e5", "message": "Setup generation of JPA Metamodel", "committedDate": "2020-08-24T07:42:43Z", "type": "forcePushed"}, {"oid": "217a07c0571b0dd4f8658595ba3dd9fb37b047f7", "url": "https://github.com/candlepin/candlepin/commit/217a07c0571b0dd4f8658595ba3dd9fb37b047f7", "message": "Setup generation of JPA Metamodel", "committedDate": "2020-08-24T11:00:02Z", "type": "commit"}, {"oid": "217a07c0571b0dd4f8658595ba3dd9fb37b047f7", "url": "https://github.com/candlepin/candlepin/commit/217a07c0571b0dd4f8658595ba3dd9fb37b047f7", "message": "Setup generation of JPA Metamodel", "committedDate": "2020-08-24T11:00:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUxMjgzMw==", "url": "https://github.com/candlepin/candlepin/pull/2749#discussion_r476512833", "bodyText": "This isn't quite right. If the query coming in is filtered at all, the max records value won't line up with the maximum number of rows for the query being executed.", "author": "Ceiu", "createdAt": "2020-08-25T14:53:54Z", "path": "server/src/main/java/org/candlepin/model/AbstractHibernateCurator.java", "diffHunk": "@@ -563,6 +601,25 @@ protected Criterion getSecureCriteriaRestrictions(Class entityClass) {\n         return page;\n     }\n \n+    @Transactional\n+    public Page<List<E>> listByCriteria(Root<E> root, CriteriaQuery<E> criteria, PageRequest pageRequest) {\n+        Page<List<E>> page = new Page<>();\n+        if (pageRequest != null) {\n+            criteria.orderBy(createPagingOrder(root, pageRequest));\n+            // TODO page should store long\n+            page.setMaxRecords(this.findRowCount().intValue());", "originalCommit": "217a07c0571b0dd4f8658595ba3dd9fb37b047f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfeeb0f72cc63cbe76fdbf36b73eaa67c2c4f296", "chunk": "diff --git a/server/src/main/java/org/candlepin/model/AbstractHibernateCurator.java b/server/src/main/java/org/candlepin/model/AbstractHibernateCurator.java\nindex 3b721b7ef..cc01d5ccc 100755\n--- a/server/src/main/java/org/candlepin/model/AbstractHibernateCurator.java\n+++ b/server/src/main/java/org/candlepin/model/AbstractHibernateCurator.java\n\n@@ -602,13 +600,14 @@ public abstract class AbstractHibernateCurator<E extends Persisted> {\n     }\n \n     @Transactional\n-    public Page<List<E>> listByCriteria(Root<E> root, CriteriaQuery<E> criteria, PageRequest pageRequest) {\n+    public Page<List<E>> listByCriteria(Root<E> root, CriteriaQuery<E> criteria, PageRequest pageRequest,\n+        int maxRecords) {\n         Page<List<E>> page = new Page<>();\n         if (pageRequest != null) {\n             criteria.orderBy(createPagingOrder(root, pageRequest));\n             // TODO page should store long\n-            page.setMaxRecords(this.findRowCount().intValue());\n-            page.setPageData(loadPageData(root, criteria, pageRequest));\n+            page.setMaxRecords(maxRecords);\n+            page.setPageData(loadPageData(criteria, pageRequest));\n             page.setPageRequest(pageRequest);\n         }\n         else {\n"}}, {"oid": "dfeeb0f72cc63cbe76fdbf36b73eaa67c2c4f296", "url": "https://github.com/candlepin/candlepin/commit/dfeeb0f72cc63cbe76fdbf36b73eaa67c2c4f296", "message": "Fix max records count", "committedDate": "2020-08-26T13:08:55Z", "type": "commit"}, {"oid": "e2deb95b0818f29d2bc2b085289b6372afdf8158", "url": "https://github.com/candlepin/candlepin/commit/e2deb95b0818f29d2bc2b085289b6372afdf8158", "message": "Move generated sources to build folder", "committedDate": "2020-08-27T07:39:22Z", "type": "commit"}]}