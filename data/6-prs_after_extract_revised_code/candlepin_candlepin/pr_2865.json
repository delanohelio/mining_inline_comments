{"pr_number": 2865, "pr_title": "ENT-1867: Porting ConsumerResource to spec-first", "pr_createdAt": "2020-12-14T13:35:55Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2865", "timeline": [{"oid": "93c622df876ef8b055e59e68808739f26b964697", "url": "https://github.com/candlepin/candlepin/commit/93c622df876ef8b055e59e68808739f26b964697", "message": "ENT-1867: Porting ConsumerResource to spec-first", "committedDate": "2020-12-17T11:16:59Z", "type": "forcePushed"}, {"oid": "7b17587875bf1efd94d8d3d12445169bd5215828", "url": "https://github.com/candlepin/candlepin/commit/7b17587875bf1efd94d8d3d12445169bd5215828", "message": "ENT-1867: Port ConsumerResource to spec-first", "committedDate": "2020-12-21T12:13:58Z", "type": "forcePushed"}, {"oid": "b9e4fdaedefd0e1b60e6f9cd77b34a057bf0b20c", "url": "https://github.com/candlepin/candlepin/commit/b9e4fdaedefd0e1b60e6f9cd77b34a057bf0b20c", "message": "ENT-1867: Port ConsumerResource to spec-first", "committedDate": "2020-12-22T12:13:00Z", "type": "forcePushed"}, {"oid": "b93540e48cc16e14700368ae1b87f06a8ac7230e", "url": "https://github.com/candlepin/candlepin/commit/b93540e48cc16e14700368ae1b87f06a8ac7230e", "message": "ENT-1867: Port ConsumerResource to spec-first", "committedDate": "2020-12-23T05:50:14Z", "type": "forcePushed"}, {"oid": "138277c998912f3cff7cbfac98e98e01bf42daae", "url": "https://github.com/candlepin/candlepin/commit/138277c998912f3cff7cbfac98e98e01bf42daae", "message": "ENT-1867: Port ConsumerResource to spec-first", "committedDate": "2020-12-23T07:03:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwNjc1MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551206750", "bodyText": "We should drop this whole test class. DateRange.contains was no longer in use and there is no need to test getters of generated class.", "author": "Januson", "createdAt": "2021-01-04T09:39:28Z", "path": "server/src/test/java/org/candlepin/util/DateRangeTest.java", "diffHunk": "@@ -35,33 +36,27 @@\n     public void getters() {\n         Date start = TestDateUtil.date(2012, 5, 22);\n         Date end = TestDateUtil.date(2012, 7, 4);\n-        DateRange range = new DateRange(start, end);\n-\n-        assertEquals(start, range.getStartDate());\n-        assertEquals(end, range.getEndDate());\n+        DateRange range = new DateRange();\n+        range.startDate(Util.toDateTime(start)).endDate(Util.toDateTime(end));\n+        assertEquals(start, Util.toDate(range.getStartDate()));\n+        assertEquals(end, Util.toDate(range.getEndDate()));\n     }\n \n     @Test\n     public void contains() {\n-        DateRange range = new DateRange(TestDateUtil.date(2001, 7, 5), TestDateUtil.date(2010, 7, 4));\n-\n-        assertTrue(range.contains(TestDateUtil.date(2005, 6, 9)));\n-        assertFalse(range.contains(TestDateUtil.date(1971, 7, 19)));\n-        assertFalse(range.contains(TestDateUtil.date(2012, 4, 19)));\n-        assertTrue(range.contains(TestDateUtil.date(2001, 7, 5)));\n-        assertTrue(range.contains(TestDateUtil.date(2010, 7, 4)));\n+        Date start = TestDateUtil.date(2001, 7, 5);", "originalCommit": "138277c998912f3cff7cbfac98e98e01bf42daae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDQ4MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551914480", "bodyText": "Done", "author": "wolfdale", "createdAt": "2021-01-05T12:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwNjc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "d2fc2e2c29fb7533e0d510d79ce635eaeee472d9", "chunk": "diff --git a/server/src/test/java/org/candlepin/util/DateRangeTest.java b/server/src/test/java/org/candlepin/util/DateRangeTest.java\ndeleted file mode 100644\nindex 40419b743..000000000\n--- a/server/src/test/java/org/candlepin/util/DateRangeTest.java\n+++ /dev/null\n\n@@ -1,62 +0,0 @@\n-/**\n- * Copyright (c) 2009 - 2012 Red Hat, Inc.\n- *\n- * This software is licensed to you under the GNU General Public License,\n- * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n- * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n- * along with this software; if not, see\n- * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n- *\n- * Red Hat trademarks are not licensed under GPLv2. No permission is\n- * granted to use or replicate Red Hat trademarks that are incorporated\n- * in this software or its documentation.\n- */\n-package org.candlepin.util;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n-import org.candlepin.dto.api.v1.DateRange;\n-import org.candlepin.test.TestDateUtil;\n-\n-import org.junit.Test;\n-\n-import java.util.Date;\n-\n-\n-\n-/**\n- * DateRangeTest\n- */\n-public class DateRangeTest {\n-\n-    @Test\n-    public void getters() {\n-        Date start = TestDateUtil.date(2012, 5, 22);\n-        Date end = TestDateUtil.date(2012, 7, 4);\n-        DateRange range = new DateRange();\n-        range.startDate(Util.toDateTime(start)).endDate(Util.toDateTime(end));\n-        assertEquals(start, Util.toDate(range.getStartDate()));\n-        assertEquals(end, Util.toDate(range.getEndDate()));\n-    }\n-\n-    @Test\n-    public void contains() {\n-        Date start = TestDateUtil.date(2001, 7, 5);\n-        Date end = TestDateUtil.date(2010, 7, 4);\n-        DateRange range = new DateRange();\n-        range.startDate(Util.toDateTime(start)).endDate(Util.toDateTime(end));\n-        assertTrue(contains(TestDateUtil.date(2005, 6, 9), start, end));\n-        assertFalse(contains(TestDateUtil.date(1971, 7, 19), start, end));\n-        assertFalse(contains(TestDateUtil.date(2012, 4, 19), start, end));\n-        assertTrue(contains(TestDateUtil.date(2001, 7, 5), start, end));\n-        assertTrue(contains(TestDateUtil.date(2010, 7, 4), start, end));\n-    }\n-\n-    private boolean contains(Date date, Date startDate, Date endDate) {\n-        return (startDate != null && startDate.compareTo(date) <= 0) &&\n-            (endDate != null && endDate.compareTo(date) >= 0);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDAzMw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551914033", "bodyText": "@candlepin/candlepin-server Can some one please review this part specifically. I was not able to pass this test with normal ConsumerPrincipal therefore decide to use TrustedUserPrincipal (which has full access), which I assume actually changes the meaning of the test case. I did the same thing with ownerShouldSeeOwnEntitlements() test case.\nWith ConsumerPrincipal I get ForbiddenException: insufficient permissions.\n[Test worker] WARN  AbstractAuthorizationFilter[91] - Refusing principal: {\"type\":\"consumer\",\"name\":\"757a1b25-ef22-4b08-b023-0a5c9b5ef03d\"} access to: revokeOnGuestMigration \nThis happens due to VerifyAuthorizationFilterFactory class which act as a method interceptor binded for testing so whenever any method (such as revokeOnGuestMigration) of ConsumerResource class is called it goes through VerifyAuthorizationFilterFactory. Since this revokeOnGuestMigration method is not annotated with @verify, the  access gets denied.", "author": "wolfdale", "createdAt": "2021-01-05T12:54:25Z", "path": "server/src/test/java/org/candlepin/resource/ConsumerResourceIntegrationTest.java", "diffHunk": "@@ -495,11 +492,12 @@ public void consumerShouldSeeOwnEntitlements() throws JobException {\n         consumerResource.bind(consumer.getUuid(), pool.getId(),\n             null, 1, null, null, false, null, null);\n \n-        setupPrincipal(new ConsumerPrincipal(consumer, owner));\n+        setupPrincipal(new TrustedUserPrincipal(\"Test\"));", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAzMDQ3MQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r554030471", "bodyText": "There is a way around this. The reason the revokeOnGuestMigration method is intercepted, is because in TestingModules.java you bind the interceptor with Matchers.any(), which will match any method inside the ConsumerResource. Changing that to Matchers.annotatedWith(Verify.class) should work (it will still intercept the methods that have @Verify, but not the ones that don't (like revokeOnGuestMigration).", "author": "nikosmoum", "createdAt": "2021-01-08T15:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA1NjM1MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555056350", "bodyText": "Its a good approach, using the Matchers.annotatedWith() method to target methods annotated with @verify, but there are few other test cases which invokes the methods that does not have @verify annotation on it & expect filter to be called. Such as - testConsumerCannotListAllConsumers & canNotDeleteConsumerOtherThanSelf", "author": "wolfdale", "createdAt": "2021-01-11T13:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg3MTkzOQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555871939", "bodyText": "I have added a commit with a fix for this. It removed the 2 interceptor bindings for ConsumerResource/OwnerResource, and instead altered the custom matcher we already had (HttpMethodMatcher) to only bind the interceptor for methods that are overriding methods that have http-related annotations (all our API endpoints are overriden from the openapi-generated interfaces that have the rest annotations, so it will match exactly all of those, and no other unrelated ones).", "author": "nikosmoum", "createdAt": "2021-01-12T15:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "d2fc2e2c29fb7533e0d510d79ce635eaeee472d9", "chunk": "diff --git a/server/src/test/java/org/candlepin/resource/ConsumerResourceIntegrationTest.java b/server/src/test/java/org/candlepin/resource/ConsumerResourceIntegrationTest.java\nindex 90507fbf9..f1b15b296 100644\n--- a/server/src/test/java/org/candlepin/resource/ConsumerResourceIntegrationTest.java\n+++ b/server/src/test/java/org/candlepin/resource/ConsumerResourceIntegrationTest.java\n\n@@ -492,12 +491,11 @@ public class ConsumerResourceIntegrationTest extends DatabaseTestFixture {\n         consumerResource.bind(consumer.getUuid(), pool.getId(),\n             null, 1, null, null, false, null, null);\n \n-        setupPrincipal(new TrustedUserPrincipal(\"Test\"));\n+        setupPrincipal(new ConsumerPrincipal(consumer, owner));\n         securityInterceptor.enable();\n \n-        int result = consumerResource.listEntitlements(\n-            consumer.getUuid(), null, true, \"\", new ArrayList<>()).size();\n-        assertEquals(3, result);\n+        assertEquals(3, consumerResource.listEntitlements(\n+            consumer.getUuid(), null, true, \"\", new ArrayList<>()).size());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg5MDc5MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553890790", "bodyText": "The since variable can be declared in the yaml with format: date-time, and here it can be defined as OffsetDateTime. And all the stuff below is not needed.\nWe have added a class OffsetDateTimeParamConverterProvider that will convert dates in the form of string of various formats into an OffsetDateTime. From looking what that class does, you probably need to mark the since variable here with  a javax.validation.constraints.Pattern annotation, and specify the format on it, and the converter class will do the rest.", "author": "nikosmoum", "createdAt": "2021-01-08T11:27:25Z", "path": "server/src/main/java/org/candlepin/resource/ConsumerResource.java", "diffHunk": "@@ -1967,27 +1897,34 @@ public void deleteConsumer(\n         return returnCerts;\n     }\n \n-    @ApiOperation(notes = \"Retrieves the body of the Content Access Certificate for the Consumer\",\n-        value = \"getContentAccessBody\", response = String.class)\n-    @ApiResponses({ @ApiResponse(code = 404, message = \"\"), @ApiResponse(code = 304, message = \"\") })\n-    @GET\n-    @Path(\"{consumer_uuid}/accessible_content\")\n-    @Produces(MediaType.APPLICATION_JSON)\n-    public Response getContentAccessBody(\n-        @PathParam(\"consumer_uuid\") @Verify(Consumer.class) String consumerUuid,\n-        @HeaderParam(\"If-Modified-Since\") @DefaultValue(\"Thu, 01 Jan 1970 00:00:00 GMT\")\n-        @DateFormat({ \"EEE, dd MMM yyyy HH:mm:ss z\" }) Date since) {\n-\n+    @Override\n+    public Response getContentAccessBody(@Verify(Consumer.class) String consumerUuid, String since) {", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjgxNw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042817", "bodyText": "I don't think we can add Pattern constrains on parameter here. Since its a overridden method & breaks the rules of inheritance, when I tried this I got the compiler error something like below -\nMethod parameters do not respect the inheritance rules. In subtypes, no parameter constraints may be declared on overridden or implemented methods, nor may parameters be marked for cascaded validation.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg5MDc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4MzQ4Mg==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555883482", "bodyText": "I think this might be a limitation of the Pattern annotation, because it's from the javax.validation package. Have you tried keeping the old annotation (@DateFormat) in the exact same way it was applied before, and then modifying OffsetDateTimeParamConverterProvider to handle that instead of @Pattern?", "author": "nikosmoum", "createdAt": "2021-01-12T15:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg5MDc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "d2fc2e2c29fb7533e0d510d79ce635eaeee472d9", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/ConsumerResource.java b/server/src/main/java/org/candlepin/resource/ConsumerResource.java\nindex 4e46bebf5..9fd26dd79 100755\n--- a/server/src/main/java/org/candlepin/resource/ConsumerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/ConsumerResource.java\n\n@@ -1898,7 +1898,8 @@ public class ConsumerResource implements ConsumersApi {\n     }\n \n     @Override\n-    public Response getContentAccessBody(@Verify(Consumer.class) String consumerUuid, String since) {\n+    public Response getContentAccessBody(@Verify(Consumer.class) String consumerUuid,\n+        @DateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\") OffsetDateTime since) {\n         log.debug(\"Getting content access certificate for consumer: {}\", consumerUuid);\n         Consumer consumer = consumerCurator.verifyAndLookupConsumer(consumerUuid);\n         ConsumerType ctype = this.consumerTypeCurator.getConsumerType(consumer);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNTUxMQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553935511", "bodyText": "So this annotation does not work here because the method is called indirectly (not as a 'main' resource method)?", "author": "nikosmoum", "createdAt": "2021-01-08T13:12:47Z", "path": "server/src/main/java/org/candlepin/resource/ConsumerResource.java", "diffHunk": "@@ -1921,18 +1835,34 @@ public void deleteConsumer(\n         sink.queueEvent(event);\n     }\n \n-    @ApiOperation(notes = \"Retrieves a list of Entitlement Certificates for the Consumer\",\n-        value = \"getEntitlementCertificates\")\n-    @ApiResponses({ @ApiResponse(code = 404, message = \"\") })\n-    @GET\n-    @Path(\"{consumer_uuid}/certificates\")\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @UpdateConsumerCheckIn\n-    public List<CertificateDTO> getEntitlementCertificates(\n-        @PathParam(\"consumer_uuid\") @Verify(Consumer.class) String consumerUuid,\n-        @QueryParam(\"serials\") String serials) {\n-\n+    /**\n+     * Method to get entitlement certificates.\n+     * NOTE: Here we explicitly update consumer Check-In.\n+     *\n+     * @param consumerUuid\n+     *  Consumer UUID\n+     *\n+     * @param serials\n+     *  Certificate serial\n+     *\n+     * @return\n+     *  List of DTOs representing certificates\n+     */\n+    public List<CertificateDTO> getEntitlementCertificates(@Verify(Consumer.class) String consumerUuid,\n+        String serials) {\n         log.debug(\"Getting client certificates for consumer: {}\", consumerUuid);\n+\n+        // UpdateConsumerCheckIn", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjU5OQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042599", "bodyText": "Correct. Since this method is called indirectly, ConsumerCheckInFilter filter is not applied. Therefore we are explicitly updating consumer check-in.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNTUxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NTA5MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553985090", "bodyText": "for a method with this many parameters, it is probably more readable to have them 1 per line like it was before", "author": "nikosmoum", "createdAt": "2021-01-08T14:46:42Z", "path": "server/src/main/java/org/candlepin/resource/ConsumerResource.java", "diffHunk": "@@ -2147,43 +2069,25 @@ private void validateBindArguments(String poolIdString, Integer quantity,\n \n     }\n \n-    @ApiOperation(notes = \"If a pool ID is specified, we know we're binding to that exact pool. \" +\n-        \"Specifying an entitle date in this case makes no sense and will throw an \" +\n-        \"error. If a list of product IDs are specified, we attempt to auto-bind to\" +\n-        \" subscriptions which will provide those products. An optional date can be\" +\n-        \" specified allowing the consumer to get compliant for some date in the \" +\n-        \"future. If no date is specified we assume the current date. If neither a \" +\n-        \"pool nor an ID is specified, this is a healing request. The path is similar \" +\n-        \"to the bind by products, but in this case we use the installed products on \" +\n-        \"the consumer, and their current compliant status, to determine which product\" +\n-        \" IDs should be requested. The entitle date is used the same as with bind by \" +\n-        \"products. The response will contain a list of Entitlement objects if async is\" +\n-        \" false, or a JobDetail object if async is true.\", value = \"Bind Entitlements\")\n-    @ApiResponses({ @ApiResponse(code = 400, message = \"\"),\n-        @ApiResponse(code = 403, message = \"Binds Entitlements\"), @ApiResponse(code = 404, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"/{consumer_uuid}/entitlements\")\n-    @SuppressWarnings(\"checkstyle:indentation\")\n-    public Response bind(\n-        @PathParam(\"consumer_uuid\") @Verify(Consumer.class) String consumerUuid,\n-        @QueryParam(\"pool\") @Verify(value = Pool.class, nullable = true,\n-            subResource = SubResource.ENTITLEMENTS) String poolIdString,\n-        @QueryParam(\"product\") String[] productIds,\n-        @QueryParam(\"quantity\") Integer quantity,\n-        @QueryParam(\"email\") String email,\n-        @QueryParam(\"email_locale\") String emailLocale,\n-        @QueryParam(\"async\") @DefaultValue(\"false\") boolean async,\n-        @QueryParam(\"entitle_date\") String entitleDateStr,\n-        @QueryParam(\"from_pool\") List<String> fromPools) throws JobException {\n+    @Override\n+    @SuppressWarnings({\"checkstyle:indentation\", \"checkstyle:methodlength\"})\n+    public Response bind(@Verify(Consumer.class) String consumerUuid,\n+        @Verify(value = Pool.class, nullable = true, subResource = SubResource.ENTITLEMENTS)\n+        String poolIdString, List<String> listOfProductIds,\n+        Integer quantity, String email, String emailLocale, Boolean async, String entitleDateStr,\n+        List<String> fromPools) {", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MzA4OQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555043089", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2021-01-11T13:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NTA5MA=="}], "type": "inlineReview", "revised_code": {"commit": "d2fc2e2c29fb7533e0d510d79ce635eaeee472d9", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/ConsumerResource.java b/server/src/main/java/org/candlepin/resource/ConsumerResource.java\nindex 4e46bebf5..9fd26dd79 100755\n--- a/server/src/main/java/org/candlepin/resource/ConsumerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/ConsumerResource.java\n\n@@ -2071,10 +2056,16 @@ public class ConsumerResource implements ConsumersApi {\n \n     @Override\n     @SuppressWarnings({\"checkstyle:indentation\", \"checkstyle:methodlength\"})\n-    public Response bind(@Verify(Consumer.class) String consumerUuid,\n+    public Response bind(\n+        @Verify(Consumer.class) String consumerUuid,\n         @Verify(value = Pool.class, nullable = true, subResource = SubResource.ENTITLEMENTS)\n-        String poolIdString, List<String> listOfProductIds,\n-        Integer quantity, String email, String emailLocale, Boolean async, String entitleDateStr,\n+        String poolIdString,\n+        List<String> listOfProductIds,\n+        Integer quantity,\n+        String email,\n+        String emailLocale,\n+        Boolean async,\n+        String entitleDateStr,\n         List<String> fromPools) {\n         /* NOTE: This method should NEVER be provided with a POST body.\n            While technically that change would be backwards compatible,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NzEzNA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553987134", "bodyText": "Let's be consistent and throw the same exception as other places we call queueJob:\n        catch (JobException e) {\n            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n                config.getJobKey());\n            log.error(errmsg, e);\n            throw new IseException(errmsg, e);\n        }", "author": "nikosmoum", "createdAt": "2021-01-08T14:49:54Z", "path": "server/src/main/java/org/candlepin/resource/ConsumerResource.java", "diffHunk": "@@ -2246,7 +2150,15 @@ public Response bind(\n             }\n \n             // events will be triggered by the job\n-            AsyncJobStatus status = jobManager.queueJob(jobConfig);\n+            AsyncJobStatus status = null;\n+\n+            try {\n+                status = jobManager.queueJob(jobConfig);\n+            }\n+            catch (JobException e) {\n+                throw new RuntimeException(\"Unable to queue jobs.\");", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjI3OA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042278", "bodyText": "Sure, fixed it.", "author": "wolfdale", "createdAt": "2021-01-11T13:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NzEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "d2fc2e2c29fb7533e0d510d79ce635eaeee472d9", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/ConsumerResource.java b/server/src/main/java/org/candlepin/resource/ConsumerResource.java\nindex 4e46bebf5..9fd26dd79 100755\n--- a/server/src/main/java/org/candlepin/resource/ConsumerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/ConsumerResource.java\n\n@@ -2156,7 +2147,10 @@ public class ConsumerResource implements ConsumersApi {\n                 status = jobManager.queueJob(jobConfig);\n             }\n             catch (JobException e) {\n-                throw new RuntimeException(\"Unable to queue jobs.\");\n+                String errmsg = this.i18n.tr(\"An unexpected exception occurred \" +\n+                    \"while scheduling job \\\"{0}\\\"\", jobConfig.getJobKey());\n+                log.error(errmsg, e);\n+                throw new IseException(errmsg, e);\n             }\n \n             AsyncJobStatusDTO statusDTO = this.translator.translate(status, AsyncJobStatusDTO.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4OTk2NQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553989965", "bodyText": "Same as the previous comment for this catch block", "author": "nikosmoum", "createdAt": "2021-01-08T14:54:37Z", "path": "server/src/main/java/org/candlepin/resource/ConsumerResource.java", "diffHunk": "@@ -2658,7 +2459,14 @@ public AsyncJobStatusDTO exportDataAsync(\n         JobConfig config = manifestManager.generateManifestAsync(consumerUuid, owner, cdnLabel,\n             webAppPrefix, apiUrl, getExtensionParamMap(extensionArgs));\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n+        AsyncJobStatus job = null;\n+\n+        try {\n+            job = this.jobManager.queueJob(config);\n+        }\n+        catch (JobException e) {\n+            throw new RuntimeException(\"Unable to queue jobs\");", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjI0NA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042244", "bodyText": "Sure, fixed it.", "author": "wolfdale", "createdAt": "2021-01-11T13:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4OTk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d2fc2e2c29fb7533e0d510d79ce635eaeee472d9", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/ConsumerResource.java b/server/src/main/java/org/candlepin/resource/ConsumerResource.java\nindex 4e46bebf5..9fd26dd79 100755\n--- a/server/src/main/java/org/candlepin/resource/ConsumerResource.java\n+++ b/server/src/main/java/org/candlepin/resource/ConsumerResource.java\n\n@@ -2465,8 +2459,12 @@ public class ConsumerResource implements ConsumersApi {\n             job = this.jobManager.queueJob(config);\n         }\n         catch (JobException e) {\n-            throw new RuntimeException(\"Unable to queue jobs\");\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred \" +\n+                \"while scheduling job \\\"{0}\\\"\", config.getJobKey());\n+            log.error(errmsg, e);\n+            throw new IseException(errmsg, e);\n         }\n+\n         return this.translator.translate(job, AsyncJobStatusDTO.class);\n     }\n \n"}}, {"oid": "d2fc2e2c29fb7533e0d510d79ce635eaeee472d9", "url": "https://github.com/candlepin/candlepin/commit/d2fc2e2c29fb7533e0d510d79ce635eaeee472d9", "message": "Unit test fix", "committedDate": "2021-01-14T10:43:39Z", "type": "forcePushed"}, {"oid": "b7669cfc70eee00ad3e64fdac73376e29445c724", "url": "https://github.com/candlepin/candlepin/commit/b7669cfc70eee00ad3e64fdac73376e29445c724", "message": "Add timezone id format support to getContentAccessBody API\n\n* Alter getContentAccessBody endpoint yaml to accept date in\n  OffsetDateTime format and apply specific date format pattern\n  that generates @Pattern annotation\n* Extract OffsetDateTime parsing to a util method shared by\n  both the deserializer and param converter, and enhance\n  the parsing to support formats with Zone ids\n* Remove obsolete DateFormat & DateFormatter classes", "committedDate": "2021-01-14T11:23:15Z", "type": "forcePushed"}, {"oid": "f3e071ee5cacf95d4a944150644a3f3f142101b5", "url": "https://github.com/candlepin/candlepin/commit/f3e071ee5cacf95d4a944150644a3f3f142101b5", "message": "ENT-1867: Port ConsumerResource to spec-first\n\n - Added consumer resource endpoint definitions\n - Added content access endpoint definition\n - Added specification for following DTOs\n   - ComplianceReasonDTO\n   - ComplianceStatusDTO\n   - ContentAccessDTO\n   - PoolQuantityDTO\n   - SystemPurposeComplianceStatusDTO\n - Updated translators for DTOs\n - Alter getContentAccessBody endpoint yaml to accept date in\n   OffsetDateTime format and apply specific date format pattern\n   that generates @Pattern annotation\n - Extract OffsetDateTime parsing to a util method shared by\n   both the deserializer and param converter, and enhance\n   the parsing to support formats with Zone ids\n - Removed obsolete DeleteResult, DateRange, DateFormat & DateFormatter classes", "committedDate": "2021-01-14T12:21:50Z", "type": "forcePushed"}, {"oid": "7111fa25b856f7f66f309fa5708bc29b87a5ced4", "url": "https://github.com/candlepin/candlepin/commit/7111fa25b856f7f66f309fa5708bc29b87a5ced4", "message": "ENT-1867: Port ConsumerResource to spec-first\n\n - Added consumer resource endpoint definitions\n - Added content access endpoint definition\n - Added specification for following DTOs\n   - ComplianceReasonDTO\n   - ComplianceStatusDTO\n   - ContentAccessDTO\n   - PoolQuantityDTO\n   - SystemPurposeComplianceStatusDTO\n - Updated translators for DTOs\n - Alter getContentAccessBody endpoint yaml to accept date in\n   OffsetDateTime format and apply specific date format pattern\n   that generates @Pattern annotation\n - Extract OffsetDateTime parsing to a util method shared by\n   both the deserializer and param converter, and enhance\n   the parsing to support formats with Zone ids\n - Removed obsolete DeleteResult, DateRange, DateFormat & DateFormatter classes", "committedDate": "2021-01-14T13:16:07Z", "type": "forcePushed"}, {"oid": "380ae176a66a2451d3fe181fb3a7d795435b3ed7", "url": "https://github.com/candlepin/candlepin/commit/380ae176a66a2451d3fe181fb3a7d795435b3ed7", "message": "ENT-1867: Port ConsumerResource to spec-first\n\n - Added consumer resource endpoint definitions\n - Added content access endpoint definition\n - Added specification for following DTOs\n   - ComplianceReasonDTO\n   - ComplianceStatusDTO\n   - ContentAccessDTO\n   - PoolQuantityDTO\n   - SystemPurposeComplianceStatusDTO\n - Updated translators for DTOs\n - Alter getContentAccessBody endpoint yaml to accept date in\n   OffsetDateTime format and apply specific date format pattern\n   that generates @Pattern annotation\n - Extract OffsetDateTime parsing to a util method shared by\n   both the deserializer and param converter, and enhance\n   the parsing to support formats with Zone ids\n - Removed obsolete DeleteResult, DateRange, DateFormat & DateFormatter classes", "committedDate": "2021-01-14T15:03:38Z", "type": "forcePushed"}, {"oid": "08b28b5411a0449f3314dfefcdc70e18321df623", "url": "https://github.com/candlepin/candlepin/commit/08b28b5411a0449f3314dfefcdc70e18321df623", "message": "ENT-1867: Port ConsumerResource to spec-first\n\n - Added consumer resource endpoint definitions\n - Added content access endpoint definition\n - Added specification for following DTOs\n   - ComplianceReasonDTO\n   - ComplianceStatusDTO\n   - ContentAccessDTO\n   - PoolQuantityDTO\n   - SystemPurposeComplianceStatusDTO\n - Updated translators for DTOs\n - Alter getContentAccessBody endpoint yaml to accept date in\n   OffsetDateTime format and apply specific date format pattern\n   that generates @Pattern annotation\n - Extract OffsetDateTime parsing to a util method shared by\n   both the deserializer and param converter, and enhance\n   the parsing to support formats with Zone ids\n - Removed obsolete DeleteResult, DateRange, DateFormat & DateFormatter classes", "committedDate": "2021-01-14T15:44:30Z", "type": "commit"}, {"oid": "08b28b5411a0449f3314dfefcdc70e18321df623", "url": "https://github.com/candlepin/candlepin/commit/08b28b5411a0449f3314dfefcdc70e18321df623", "message": "ENT-1867: Port ConsumerResource to spec-first\n\n - Added consumer resource endpoint definitions\n - Added content access endpoint definition\n - Added specification for following DTOs\n   - ComplianceReasonDTO\n   - ComplianceStatusDTO\n   - ContentAccessDTO\n   - PoolQuantityDTO\n   - SystemPurposeComplianceStatusDTO\n - Updated translators for DTOs\n - Alter getContentAccessBody endpoint yaml to accept date in\n   OffsetDateTime format and apply specific date format pattern\n   that generates @Pattern annotation\n - Extract OffsetDateTime parsing to a util method shared by\n   both the deserializer and param converter, and enhance\n   the parsing to support formats with Zone ids\n - Removed obsolete DeleteResult, DateRange, DateFormat & DateFormatter classes", "committedDate": "2021-01-14T15:44:30Z", "type": "forcePushed"}]}