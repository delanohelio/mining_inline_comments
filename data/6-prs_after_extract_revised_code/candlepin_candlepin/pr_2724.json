{"pr_number": 2724, "pr_title": "[M] 1843186: Refactor job constraints to reduce memory footprint (ENT-2469)", "pr_createdAt": "2020-06-09T20:06:27Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2724", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4ODQzNQ==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r437688435", "bodyText": "Need to revert the visibility change or the transactional tag is useless here.", "author": "Ceiu", "createdAt": "2020-06-09T20:09:18Z", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1489,8 +1474,30 @@ else if (jobState != JobState.QUEUED) {\n      * @return\n      *  the updated AsyncJobStatus entity\n      */\n+    private AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state, String result)\n+        throws JobStateManagementException {\n+\n+        status.setJobResult(result);\n+        return this.updateJobStatus(status, state);\n+    }\n+\n+    /**\n+     * Updates the state of the provided job status\n+     *\n+     * @param status\n+     *  The AsyncJobStatus to update\n+     *\n+     * @param state\n+     *  The state to set\n+     *\n+     * @throws JobStateManagementException\n+     *  if the job state is unable to be updated due to a database failure\n+     *\n+     * @return\n+     *  the updated AsyncJobStatus entity\n+     */\n     @Transactional\n-    protected AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state, Object result)\n+    private AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state)", "originalCommit": "c59eec24b9f6b71e70bfe3aff766563169c7b837", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0398b550ba5dfacfda241afc31b5a8e1a805d616", "chunk": "diff --git a/server/src/main/java/org/candlepin/async/JobManager.java b/server/src/main/java/org/candlepin/async/JobManager.java\nindex 2f95f55ce..a1ed9b356 100644\n--- a/server/src/main/java/org/candlepin/async/JobManager.java\n+++ b/server/src/main/java/org/candlepin/async/JobManager.java\n\n@@ -1497,7 +1493,7 @@ public class JobManager implements ModeChangeListener {\n      *  the updated AsyncJobStatus entity\n      */\n     @Transactional\n-    private AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state)\n+    protected AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state)\n         throws JobStateManagementException {\n \n         // Impl note:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4OTQ0MQ==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r437689441", "bodyText": "Could restore the failure state message here, perhaps.", "author": "Ceiu", "createdAt": "2020-06-09T20:11:12Z", "path": "server/src/main/java/org/candlepin/resource/ProductResource.java", "diffHunk": "@@ -312,11 +312,9 @@ public void deleteProduct(\n                 statuses.add(this.jobManager.queueJob(config));\n             }\n             catch (Exception e) {\n-                AsyncJobStatus failedStatus = new AsyncJobStatus();\n-                failedStatus.setName(RefreshPoolsJob.JOB_NAME);\n-                failedStatus.setState(AsyncJobStatus.JobState.FAILED);\n-                failedStatus.setJobResult(e.toString());\n-                statuses.add(failedStatus);\n+                statuses.add(new AsyncJobStatus()\n+                    .setName(RefreshPoolsJob.JOB_NAME)\n+                    .setState(AsyncJobStatus.JobState.FAILED));", "originalCommit": "c59eec24b9f6b71e70bfe3aff766563169c7b837", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0398b550ba5dfacfda241afc31b5a8e1a805d616", "chunk": "diff --git a/server/src/main/java/org/candlepin/resource/ProductResource.java b/server/src/main/java/org/candlepin/resource/ProductResource.java\nindex b39a0f6c7..3480b3612 100644\n--- a/server/src/main/java/org/candlepin/resource/ProductResource.java\n+++ b/server/src/main/java/org/candlepin/resource/ProductResource.java\n\n@@ -314,7 +314,8 @@ public class ProductResource {\n             catch (Exception e) {\n                 statuses.add(new AsyncJobStatus()\n                     .setName(RefreshPoolsJob.JOB_NAME)\n-                    .setState(AsyncJobStatus.JobState.FAILED));\n+                    .setState(AsyncJobStatus.JobState.FAILED)\n+                    .setJobResult(e.toString()));\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5MDk3MQ==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r437690971", "bodyText": "This is no longer necessary", "author": "Ceiu", "createdAt": "2020-06-09T20:14:10Z", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -961,7 +959,7 @@ public AsyncJobStatus findJob(String jobId) {\n      * @return\n      *  a list of jobs matching the provided query arguments/filters\n      */\n-    public List<AsyncJobStatus> findJobs(AsyncJobStatusCurator.AsyncJobStatusQueryBuilder queryBuilder) {\n+    public List<? extends AsyncJobStatus> findJobs(AsyncJobStatusQueryBuilder queryBuilder) {", "originalCommit": "c59eec24b9f6b71e70bfe3aff766563169c7b837", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0398b550ba5dfacfda241afc31b5a8e1a805d616", "chunk": "diff --git a/server/src/main/java/org/candlepin/async/JobManager.java b/server/src/main/java/org/candlepin/async/JobManager.java\nindex 2f95f55ce..a1ed9b356 100644\n--- a/server/src/main/java/org/candlepin/async/JobManager.java\n+++ b/server/src/main/java/org/candlepin/async/JobManager.java\n\n@@ -959,7 +957,7 @@ public class JobManager implements ModeChangeListener {\n      * @return\n      *  a list of jobs matching the provided query arguments/filters\n      */\n-    public List<? extends AsyncJobStatus> findJobs(AsyncJobStatusQueryBuilder queryBuilder) {\n+    public List<AsyncJobStatus> findJobs(AsyncJobStatusQueryBuilder queryBuilder) {\n         return this.jobCurator.findJobs(queryBuilder);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjI3OA==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438696278", "bodyText": "Since you're changing these 2 places to stop trying to persist the failed queuing of a job, there is one more place that does that which should probably change: the catch block in postJobStatusMessage().\nThis is called in 2 places:\n\nWhen queuing a job as normally\nWhen the execution of a job failed with retry=true and we're trying to re-queue it.\n\nIt should probably stop trying to persist the FAILED state, and just re-throw (it already rethrows) the exception.", "author": "nikosmoum", "createdAt": "2020-06-11T10:40:45Z", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1096,8 +1084,7 @@ public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n             // If this occurs do to some other unexpected failure, we'll have some state cleanup\n             // to deal with, probably.\n \n-            this.setJobState(status, JobState.FAILED);\n-            status.setJobResult(e.toString());\n+            throw new JobException(e, true);", "originalCommit": "c59eec24b9f6b71e70bfe3aff766563169c7b837", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDI5NA==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r440940294", "bodyText": "In both of those cases, we have a job that has already been persisted, and the failure is more likely from being unable to send an artemis message. If it is a DB error, the exception on update will be rethrown (as you noted) and that will propagate through the system and fail in the expected way.", "author": "Ceiu", "createdAt": "2020-06-16T15:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMjM5MA==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441322390", "bodyText": "That's fine, but we still have another problem because in the first case, the state that was persisted was CREATED, and we can't move it from CREATED to FAILED (invalid transition). And if we did change that to ABORTED, then the 2nd case wouldn't work because FAILED_WITH_RETRY -> ABORTED is invalid. So maybe we should add ABORTED to the valid transitions from FAILED_WITH_RETRY? (alternatively, we could simply make CREATED -> FAILED valid, but I would prefer the other solution).", "author": "nikosmoum", "createdAt": "2020-06-17T06:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNDE2Nw==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441524167", "bodyText": "Ahh, gotcha. I've added the FAILED_WITH_RETRY -> ABORTED transition, and updated the exception handler in message posting to use ABORTED.", "author": "Ceiu", "createdAt": "2020-06-17T12:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjI3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NDU1Mw==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438744553", "bodyText": "Looks like this was copied from a top-level class to an internal class here. We should probably delete ImportConflictJobException.java then (no need to keep both)", "author": "nikosmoum", "createdAt": "2020-06-11T12:25:51Z", "path": "server/src/main/java/org/candlepin/async/tasks/ImportJob.java", "diffHunk": "@@ -159,6 +163,40 @@ public void validate() throws JobConfigValidationException {\n         }\n     }\n \n+    /**\n+     * The equivalent of {@link ImportConflictException}, but for asynchronous imports.\n+     * It is used by transforming an {@link org.candlepin.common.exceptions.CandlepinException} to a\n+     * {@link JobExecutionException}, fit for propagating to the job management system, without keeping the\n+     * redundant fields the former has (such as requestUuid & REST return code), while retaining the useful\n+     * information (list of conflicts, display message) accessible through its toString method.\n+     */\n+    private static class ImportConflictJobException extends JobExecutionException {", "originalCommit": "c59eec24b9f6b71e70bfe3aff766563169c7b837", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NjY5NQ==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438766695", "bodyText": "Oops. Deleted.", "author": "Ceiu", "createdAt": "2020-06-11T13:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NDU1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NzEyNQ==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438747125", "bodyText": "Are we not able to lazy-load this field after all? (or is that not desirable any more because the constraint memory issue is handled anyway?)", "author": "nikosmoum", "createdAt": "2020-06-11T12:31:02Z", "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "diffHunk": "@@ -215,25 +207,29 @@ public JobDataJsonConverter() {\n     @Column(name = \"end_time\")\n     private Date endTime;\n \n-    @Column(name = \"job_data\")\n-    @Convert(converter = JobDataJsonConverter.class)\n-    private SerializedJobData jobData;\n+    @ElementCollection(fetch = FetchType.LAZY)\n+    @CollectionTable(name = \"cp_async_job_arguments\", joinColumns = @JoinColumn(name = \"job_id\"))\n+    @MapKeyColumn(name = \"name\", nullable = false)\n+    @Column(name = \"value\")\n+    private Map<String, String> arguments;\n+\n+    @Column(name = \"job_result\")\n+    private String result;", "originalCommit": "c59eec24b9f6b71e70bfe3aff766563169c7b837", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NjUwNQ==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438766505", "bodyText": "Haven't gone back to check. The first method ended up causing tons of problems and not working, so I just dropped it to a standard field for the interim. I think it'll be fine since we will ever have around 10 populated instances per node at any given time outside of the remaining problem area that needs to be addressed in the bulk-fetching of jobs.", "author": "Ceiu", "createdAt": "2020-06-11T13:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NzEyNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1ODQxMw==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438758413", "bodyText": "Since this method isn't used anywhere else, should we just delete it? I can't imagine where else we'd need it", "author": "nikosmoum", "createdAt": "2020-06-11T12:51:51Z", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1012,25 +1010,19 @@ public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n         try {\n             // Check if the queueing is blocked by constraints\n             Collection<JobConstraint> constraints = config.getConstraints();\n-            Set<AsyncJobStatus> blockingJobs = new HashSet<>();\n+            Set<String> blockingJobIds = new HashSet<>();\n \n             if (constraints != null && !constraints.isEmpty()) {\n-                Collection<AsyncJobStatus> existingJobs = Collections.unmodifiableList(\n-                    this.jobCurator.getNonTerminalJobs());", "originalCommit": "c59eec24b9f6b71e70bfe3aff766563169c7b837", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0398b550ba5dfacfda241afc31b5a8e1a805d616", "chunk": "diff --git a/server/src/main/java/org/candlepin/async/JobManager.java b/server/src/main/java/org/candlepin/async/JobManager.java\nindex 2f95f55ce..a1ed9b356 100644\n--- a/server/src/main/java/org/candlepin/async/JobManager.java\n+++ b/server/src/main/java/org/candlepin/async/JobManager.java\n\n@@ -1022,10 +1020,10 @@ public class JobManager implements ModeChangeListener {\n                 }\n             }\n \n-            if (blockingJobIds.isEmpty()) {\n-                // Persist the job status so that the ID will be generated.\n-                status = this.jobCurator.create(status);\n+            // Persist the job status so that the ID will be generated.\n+            status = this.jobCurator.create(status);\n \n+            if (blockingJobIds.isEmpty()) {\n                 // Build and send the job message and update the job state accordingly\n                 status = this.postJobStatusMessage(status);\n                 log.info(\"Job queued: {}\", status);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1OTUwMg==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438759502", "bodyText": "param added in the doc, but the signature remained the same", "author": "nikosmoum", "createdAt": "2020-06-11T12:53:50Z", "path": "server/src/main/java/org/candlepin/model/AsyncJobStatusCurator.java", "diffHunk": "@@ -219,6 +222,9 @@ public AsyncJobStatusCurator() {\n      * Fetches a collection of jobs in the given states. If no jobs can be found in the states\n      * specified, this method returns an empty collection.\n      *\n+     * @param extended\n+     *  whether or not to fetch extended job status information", "originalCommit": "c59eec24b9f6b71e70bfe3aff766563169c7b837", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NTg2NQ==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438765865", "bodyText": "Removed", "author": "Ceiu", "createdAt": "2020-06-11T13:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1OTUwMg=="}], "type": "inlineReview", "revised_code": {"commit": "0398b550ba5dfacfda241afc31b5a8e1a805d616", "chunk": "diff --git a/server/src/main/java/org/candlepin/model/AsyncJobStatusCurator.java b/server/src/main/java/org/candlepin/model/AsyncJobStatusCurator.java\nindex 9550af757..e980eae5c 100644\n--- a/server/src/main/java/org/candlepin/model/AsyncJobStatusCurator.java\n+++ b/server/src/main/java/org/candlepin/model/AsyncJobStatusCurator.java\n\n@@ -222,9 +225,6 @@ public class AsyncJobStatusCurator extends AbstractHibernateCurator<AsyncJobStat\n      * Fetches a collection of jobs in the given states. If no jobs can be found in the states\n      * specified, this method returns an empty collection.\n      *\n-     * @param extended\n-     *  whether or not to fetch extended job status information\n-     *\n      * @param states\n      *  a collection of states to use for filtering jobs\n      *\n"}}, {"oid": "0398b550ba5dfacfda241afc31b5a8e1a805d616", "url": "https://github.com/candlepin/candlepin/commit/0398b550ba5dfacfda241afc31b5a8e1a805d616", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field\n- Messaging exceptions will now set the job state to ABORTED instead\n  of FAILED\n- Added a transition from FAILED_WITH_RETRY to ABORTED to allow\n  proper handling of the case where a failed job is intended to be\n  re-queued but the message cannot be sent for any reason", "committedDate": "2020-06-11T19:38:59Z", "type": "commit"}, {"oid": "f2d79e03f34b6c48f9ed846b5979b4b239eabe9b", "url": "https://github.com/candlepin/candlepin/commit/f2d79e03f34b6c48f9ed846b5979b4b239eabe9b", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field", "committedDate": "2020-06-11T03:49:44Z", "type": "forcePushed"}, {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c", "url": "https://github.com/candlepin/candlepin/commit/ff00b7a575f9a2157d846d2d205034dc5641fe2c", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field", "committedDate": "2020-06-11T07:40:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjE3Mg==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441476172", "bodyText": "Looks like the name change caused a spec test failure, and the test needs updating", "author": "nikosmoum", "createdAt": "2020-06-17T11:30:09Z", "path": "server/src/main/java/org/candlepin/async/tasks/HypervisorHeartbeatUpdateJob.java", "diffHunk": "@@ -42,7 +42,7 @@\n     private static final Logger log = LoggerFactory.getLogger(HypervisorHeartbeatUpdateJob.class);\n \n     public static final String JOB_KEY = \"HypervisorHeartbeatUpdateJob\";\n-    public static final String JOB_NAME = \"hypervisor_heartbeat_update\";\n+    public static final String JOB_NAME = \"Hypervisor Heartbeat Update\";", "originalCommit": "ff00b7a575f9a2157d846d2d205034dc5641fe2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTM5OA==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441531398", "bodyText": "Fixed", "author": "Ceiu", "createdAt": "2020-06-17T13:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjE3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDI4MQ==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441510281", "bodyText": "Now that we use an objectmapper excplicitly here, to serialize result objects, we should remove the old infrastructure we used to do that with the @Convert annotation: JobDataJsonConverter / AbstractJsonConverter.java", "author": "nikosmoum", "createdAt": "2020-06-17T12:35:30Z", "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "diffHunk": "@@ -28,32 +31,34 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n-import javax.persistence.Convert;\n import javax.persistence.Converter;\n+import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n+import javax.persistence.MapKeyColumn;\n import javax.persistence.Table;\n import javax.persistence.Version;\n import javax.validation.constraints.NotNull;\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlRootElement;\n \n \n \n /**\n- * Represents the current status for a long-running job.\n+ * Represents the job status for an async job. This class does not include extended information,\n+ * such as the job result. The AsyncJobStatusEx class can be used in cases where the extended\n+ * information is needed.\n  */\n-@XmlRootElement\n-@XmlAccessorType(XmlAccessType.PROPERTY)\n @Entity\n @Table(name = AsyncJobStatus.DB_TABLE)\n-public class AsyncJobStatus extends AbstractHibernateObject implements JobExecutionContext {\n+public class AsyncJobStatus extends AbstractHibernateObject {\n+\n+    /** Basic ObjectMapper to use for serializing job results as we receive them */\n+    private static final ObjectMapper MAPPER = ObjectMapperFactory.getObjectMapper();", "originalCommit": "ff00b7a575f9a2157d846d2d205034dc5641fe2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTMyMw==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441531323", "bodyText": "AbstractJsonConverter is the JSON compliment to ResultDataUserType. We no longer have an immediate use for it now, but that's what we should use in the future.\nOne thing that comes to mind here is perhaps using a one-way version of the converter rather than explicitly converting it ourselves. Might be cleaner than what is currently in this PR.", "author": "Ceiu", "createdAt": "2020-06-17T13:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2MDQ5Mg==", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441560492", "bodyText": "You can do it that way if you want, or leave it as a todo?", "author": "nikosmoum", "createdAt": "2020-06-17T13:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDI4MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1f5bfc1b80904f691670dabe1398ca9023cf6f7c", "url": "https://github.com/candlepin/candlepin/commit/1f5bfc1b80904f691670dabe1398ca9023cf6f7c", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field\n- Messaging exceptions will now set the job state to ABORTED instead\n  of FAILED\n- Added a transition from FAILED_WITH_RETRY to ABORTED to allow\n  proper handling of the case where a failed job is intended to be\n  re-queued but the message cannot be sent for any reason", "committedDate": "2020-06-11T11:21:29Z", "type": "forcePushed"}, {"oid": "780216261aaecd0a85d3117279e511d26e117981", "url": "https://github.com/candlepin/candlepin/commit/780216261aaecd0a85d3117279e511d26e117981", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field\n- Messaging exceptions will now set the job state to ABORTED instead\n  of FAILED\n- Added a transition from FAILED_WITH_RETRY to ABORTED to allow\n  proper handling of the case where a failed job is intended to be\n  re-queued but the message cannot be sent for any reason", "committedDate": "2020-06-11T12:08:39Z", "type": "forcePushed"}, {"oid": "0398b550ba5dfacfda241afc31b5a8e1a805d616", "url": "https://github.com/candlepin/candlepin/commit/0398b550ba5dfacfda241afc31b5a8e1a805d616", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field\n- Messaging exceptions will now set the job state to ABORTED instead\n  of FAILED\n- Added a transition from FAILED_WITH_RETRY to ABORTED to allow\n  proper handling of the case where a failed job is intended to be\n  re-queued but the message cannot be sent for any reason", "committedDate": "2020-06-11T19:38:59Z", "type": "forcePushed"}]}