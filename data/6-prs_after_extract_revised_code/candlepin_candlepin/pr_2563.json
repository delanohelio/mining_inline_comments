{"pr_number": 2563, "pr_title": "[F] [ENT-1831][ENT-1830] update pool response and manifest export flow", "pr_createdAt": "2020-01-14T07:21:08Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2563", "timeline": [{"oid": "d276a39e176e535c3fa6f39b93b05f16e718b1bc", "url": "https://github.com/candlepin/candlepin/commit/d276a39e176e535c3fa6f39b93b05f16e718b1bc", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Add logic in PoolTranslator to accumulate provided products for stacked entitlements at runtime\n  - Updated product creation logic in rspec\n  - Update translator junits to pass entitlement EntitlementCurator in this constructor\n  - updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts", "committedDate": "2020-01-14T07:41:03Z", "type": "forcePushed"}, {"oid": "1070f83a4e0c5ba5c5cd10e7467c85ec54790877", "url": "https://github.com/candlepin/candlepin/commit/1070f83a4e0c5ba5c5cd10e7467c85ec54790877", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Add logic in PoolTranslator to accumulate provided products for stacked entitlements at runtime\n  - Updated product creation logic in rspec\n  - Update translator junits to pass entitlement EntitlementCurator in this constructor\n  - updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts", "committedDate": "2020-01-14T09:42:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM2NzQ0MQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r366367441", "bodyText": "For blocks like this, either follow the existing formatting (each new param on a new line), or update the formatting for the whole statement. This occurs a number of times throughout this PR.", "author": "Ceiu", "createdAt": "2020-01-14T14:26:48Z", "path": "server/src/test/java/org/candlepin/resource/util/InstalledProductStatusCalculatorTest.java", "diffHunk": "@@ -117,7 +118,7 @@ public void setUp() {\n \n         translator = new StandardTranslator(this.consumerTypeCurator,\n             this.environmentCurator,\n-            this.ownerCurator);\n+            this.ownerCurator, this.entitlementCurator);", "originalCommit": "1070f83a4e0c5ba5c5cd10e7467c85ec54790877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3NDAxMQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r367274011", "bodyText": "Fixed.", "author": "abhiskum", "createdAt": "2020-01-16T07:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM2NzQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2576563692b24fc182ef1ac28aa1f065ef297fa", "chunk": "diff --git a/server/src/test/java/org/candlepin/resource/util/InstalledProductStatusCalculatorTest.java b/server/src/test/java/org/candlepin/resource/util/InstalledProductStatusCalculatorTest.java\nindex 9a2a347cc..b92e46182 100644\n--- a/server/src/test/java/org/candlepin/resource/util/InstalledProductStatusCalculatorTest.java\n+++ b/server/src/test/java/org/candlepin/resource/util/InstalledProductStatusCalculatorTest.java\n\n@@ -116,8 +116,7 @@ public class InstalledProductStatusCalculatorTest {\n     public void setUp() {\n         MockitoAnnotations.initMocks(this);\n \n-        translator = new StandardTranslator(this.consumerTypeCurator,\n-            this.environmentCurator,\n+        translator = new StandardTranslator(this.consumerTypeCurator, this.environmentCurator,\n             this.ownerCurator, this.entitlementCurator);\n \n         // Load the default production rules:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM2ODIxMg==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r366368212", "bodyText": "Trailing punctuation goes on the previous line. If it cannot fit, bring the last chunk of code down. In this case, I'm guessing this.oc, should be on 171.", "author": "Ceiu", "createdAt": "2020-01-14T14:28:13Z", "path": "server/src/test/java/org/candlepin/sync/ImporterTest.java", "diffHunk": "@@ -163,8 +164,11 @@ public void init() throws URISyntaxException, IOException {\n         this.mockSubReconciler = Mockito.mock(SubscriptionReconciler.class);\n         this.consumerTypeCurator = Mockito.mock(ConsumerTypeCurator.class);\n         oc = mock(OwnerCurator.class);\n+        entitlementCurator = mock(EntitlementCurator.class);\n \n-        this.translator = new StandardTranslator(this.consumerTypeCurator, this.environmentCurator, this.oc);\n+\n+        this.translator = new StandardTranslator(this.consumerTypeCurator, this.environmentCurator, this.oc\n+            , this.entitlementCurator);", "originalCommit": "1070f83a4e0c5ba5c5cd10e7467c85ec54790877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3NDA2OA==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r367274068", "bodyText": "Fixed.", "author": "abhiskum", "createdAt": "2020-01-16T07:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM2ODIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "e2576563692b24fc182ef1ac28aa1f065ef297fa", "chunk": "diff --git a/server/src/test/java/org/candlepin/sync/ImporterTest.java b/server/src/test/java/org/candlepin/sync/ImporterTest.java\nindex 2a57b63aa..9e38a10e0 100644\n--- a/server/src/test/java/org/candlepin/sync/ImporterTest.java\n+++ b/server/src/test/java/org/candlepin/sync/ImporterTest.java\n\n@@ -166,9 +166,8 @@ public class ImporterTest {\n         oc = mock(OwnerCurator.class);\n         entitlementCurator = mock(EntitlementCurator.class);\n \n-\n-        this.translator = new StandardTranslator(this.consumerTypeCurator, this.environmentCurator, this.oc\n-            , this.entitlementCurator);\n+        this.translator = new StandardTranslator(this.consumerTypeCurator, this.environmentCurator, this.oc,\n+            this.entitlementCurator);\n     }\n \n     @After\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4MTI2NA==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r366381264", "bodyText": "There are a number of ways to format these blocks, and for the most part that's fine; but try to be consistent in which you choose. Elsewhere in the PR there is a nearly identical block which is formatted with different breakage.", "author": "Ceiu", "createdAt": "2020-01-14T14:50:56Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java", "diffHunk": "@@ -122,20 +132,22 @@ public PoolDTO populate(ModelTranslator modelTranslator, Pool source, PoolDTO de\n                 dest.setBranding(Collections.emptySet());\n             }\n \n-            Set<Product> products = source.getProvidedProducts();\n+            Collection<Product> products =\n+                source.getProduct() != null ? source.getProduct().getProvidedProducts() : null;\n             if (products != null && !products.isEmpty()) {\n                 for (Product prod : products) {\n                     if (prod != null) {\n-                        dest.addProvidedProduct(\n-                            new PoolDTO.ProvidedProductDTO(prod.getId(), prod.getName()));\n+                        dest.addProvidedProduct(new PoolDTO.ProvidedProductDTO(prod.getId(), prod.getName()));\n                     }\n                 }\n+\n             }\n             else {\n                 dest.setProvidedProducts(Collections.<PoolDTO.ProvidedProductDTO>emptySet());\n             }\n \n-            Set<Product> derivedProducts = source.getDerivedProvidedProducts();\n+            Collection<Product> derivedProducts =\n+                source.getDerivedProduct() != null ? source.getDerivedProduct().getProvidedProducts() : null;", "originalCommit": "1070f83a4e0c5ba5c5cd10e7467c85ec54790877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3MzQwNQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r367273405", "bodyText": "fixed.", "author": "abhiskum", "createdAt": "2020-01-16T07:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4MTI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "e2576563692b24fc182ef1ac28aa1f065ef297fa", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java b/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java\nindex 599eb84f6..21372f490 100755\n--- a/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java\n+++ b/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java\n\n@@ -134,31 +134,15 @@ public class PoolTranslator extends TimestampedEntityTranslator<Pool, PoolDTO> {\n \n             Collection<Product> products =\n                 source.getProduct() != null ? source.getProduct().getProvidedProducts() : null;\n-            if (products != null && !products.isEmpty()) {\n-                for (Product prod : products) {\n-                    if (prod != null) {\n-                        dest.addProvidedProduct(new PoolDTO.ProvidedProductDTO(prod.getId(), prod.getName()));\n-                    }\n-                }\n-\n-            }\n-            else {\n-                dest.setProvidedProducts(Collections.<PoolDTO.ProvidedProductDTO>emptySet());\n-            }\n+            Set<PoolDTO.ProvidedProductDTO> providedProductDTOs = new HashSet<>();\n+            addProvidedProducts(products, providedProductDTOs);\n+            dest.setProvidedProducts(providedProductDTOs);\n \n             Collection<Product> derivedProducts =\n                 source.getDerivedProduct() != null ? source.getDerivedProduct().getProvidedProducts() : null;\n-            if (derivedProducts != null && !derivedProducts.isEmpty()) {\n-                for (Product derivedProd : derivedProducts) {\n-                    if (derivedProd != null) {\n-                        dest.addDerivedProvidedProduct(\n-                            new PoolDTO.ProvidedProductDTO(derivedProd.getId(), derivedProd.getName()));\n-                    }\n-                }\n-            }\n-            else {\n-                dest.setDerivedProvidedProducts(Collections.<PoolDTO.ProvidedProductDTO>emptySet());\n-            }\n+            Set<PoolDTO.ProvidedProductDTO> derivedProvidedProductDTOs = new HashSet<>();\n+            addProvidedProducts(derivedProducts, derivedProvidedProductDTOs);\n+            dest.setDerivedProvidedProducts(derivedProvidedProductDTOs);\n \n             // accumulate provided products for stacked entitlements\n             if (PoolType.STACK_DERIVED.equals(source.getType())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4MTU2OQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r366381569", "bodyText": "Whitespace missing between the // and TODO", "author": "Ceiu", "createdAt": "2020-01-14T14:51:20Z", "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "diffHunk": "@@ -974,6 +974,11 @@ private Pool convertToMasterPoolImpl(SubscriptionInfo sub, Owner owner, Map<Stri\n             }\n \n             pool.setProvidedProducts(products);\n+            //TODO: workaround to pass import spec tests. we will revisit and update this in import and", "originalCommit": "1070f83a4e0c5ba5c5cd10e7467c85ec54790877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3NDE3OA==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r367274178", "bodyText": "Fixed.", "author": "abhiskum", "createdAt": "2020-01-16T07:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4MTU2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2576563692b24fc182ef1ac28aa1f065ef297fa", "chunk": "diff --git a/server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java b/server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java\nindex 9dc82b226..965570a52 100644\n--- a/server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java\n+++ b/server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java\n\n@@ -974,7 +974,7 @@ public class CandlepinPoolManager implements PoolManager {\n             }\n \n             pool.setProvidedProducts(products);\n-            //TODO: workaround to pass import spec tests. we will revisit and update this in import and\n+            // TODO: workaround to pass import spec tests. we will revisit and update this in import and\n             // refresh code changes\n             if (pool.getProduct() != null) {\n                 pool.getProduct().setProvidedProducts(products);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NjQ5Nw==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r366396497", "bodyText": "Product model translation needs to be n-tier aware during the conversion to a flat list here and below.", "author": "Ceiu", "createdAt": "2020-01-14T15:16:17Z", "path": "server/src/main/java/org/candlepin/sync/Exporter.java", "diffHunk": "@@ -492,12 +492,18 @@ private void exportProducts(File baseDir, Consumer consumer) throws IOException\n             Product product = pool.getProduct();\n             products.put(product.getId(), product);\n \n+            for (Product providedProduct : product.getProvidedProducts()) {", "originalCommit": "1070f83a4e0c5ba5c5cd10e7467c85ec54790877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3NDIzNQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r367274235", "bodyText": "Fixed.", "author": "abhiskum", "createdAt": "2020-01-16T07:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NjQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e2576563692b24fc182ef1ac28aa1f065ef297fa", "chunk": "diff --git a/server/src/main/java/org/candlepin/sync/Exporter.java b/server/src/main/java/org/candlepin/sync/Exporter.java\nindex 501324bd1..06b2da366 100644\n--- a/server/src/main/java/org/candlepin/sync/Exporter.java\n+++ b/server/src/main/java/org/candlepin/sync/Exporter.java\n\n@@ -492,17 +493,13 @@ public class Exporter {\n             Product product = pool.getProduct();\n             products.put(product.getId(), product);\n \n-            for (Product providedProduct : product.getProvidedProducts()) {\n-                products.put(providedProduct.getId(), providedProduct);\n-            }\n+            addProvidedProducts(product.getProvidedProducts(), products);\n \n             // Also need to check for sub products\n             Product derivedProduct = pool.getDerivedProduct();\n             if (derivedProduct != null) {\n                 products.put(derivedProduct.getId(), derivedProduct);\n-                for (Product derivedProvidedProduct : derivedProduct.getProvidedProducts()) {\n-                    products.put(derivedProvidedProduct.getId(), derivedProvidedProduct);\n-                }\n+                addProvidedProducts(derivedProduct.getProvidedProducts(), products);\n             }\n             for (Product derivedProvidedProduct : productCurator\n                 .getPoolDerivedProvidedProductsCached(pool)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NzU2NA==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r366397564", "bodyText": "These need to be n-tier aware translations", "author": "Ceiu", "createdAt": "2020-01-14T15:18:04Z", "path": "server/src/main/java/org/candlepin/dto/manifest/v1/PoolTranslator.java", "diffHunk": "@@ -150,8 +162,47 @@ public PoolDTO populate(ModelTranslator modelTranslator, Pool source, PoolDTO de\n             else {\n                 dest.setDerivedProvidedProducts(Collections.emptySet());\n             }\n+\n+            // accumulate provided products for stacked entitlements\n+            if (PoolType.STACK_DERIVED.equals(source.getType())) {\n+                Collection<Product> providedProducts = accumulateStackDerivedPoolProvidedProducts(source);\n+                if (source.getDerivedProduct() != null) {\n+                    for (Product providedProduct : providedProducts) {", "originalCommit": "1070f83a4e0c5ba5c5cd10e7467c85ec54790877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwNzkyNg==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r367307926", "bodyText": "Done.", "author": "abhiskum", "createdAt": "2020-01-16T09:19:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NzU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "e2576563692b24fc182ef1ac28aa1f065ef297fa", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/manifest/v1/PoolTranslator.java b/server/src/main/java/org/candlepin/dto/manifest/v1/PoolTranslator.java\nindex 30554af86..fb1b7175b 100755\n--- a/server/src/main/java/org/candlepin/dto/manifest/v1/PoolTranslator.java\n+++ b/server/src/main/java/org/candlepin/dto/manifest/v1/PoolTranslator.java\n\n@@ -135,33 +135,17 @@ public class PoolTranslator implements ObjectTranslator<Pool, PoolDTO> {\n                 dest.setBranding(Collections.emptySet());\n             }\n \n-            Collection<Product> products = source.getProduct() != null ?\n-                source.getProduct().getProvidedProducts() : null;\n-            if (products != null && !products.isEmpty()) {\n-                for (Product prod : products) {\n-                    if (prod != null) {\n-                        dest.addProvidedProduct(\n-                            new PoolDTO.ProvidedProductDTO(prod.getId(), prod.getName()));\n-                    }\n-                }\n-            }\n-            else {\n-                dest.setProvidedProducts(Collections.emptySet());\n-            }\n-\n-            Collection<Product> derivedProducts = source.getDerivedProduct() != null ?\n-                source.getDerivedProduct().getProvidedProducts() : null;\n-            if (derivedProducts != null && !derivedProducts.isEmpty()) {\n-                for (Product derivedProd : derivedProducts) {\n-                    if (derivedProd != null) {\n-                        dest.addDerivedProvidedProduct(\n-                            new PoolDTO.ProvidedProductDTO(derivedProd.getId(), derivedProd.getName()));\n-                    }\n-                }\n-            }\n-            else {\n-                dest.setDerivedProvidedProducts(Collections.emptySet());\n-            }\n+            Collection<Product> products =\n+                source.getProduct() != null ? source.getProduct().getProvidedProducts() : null;\n+            Set<PoolDTO.ProvidedProductDTO> providedProductDTOs = new HashSet<>();\n+            addProvidedProducts(products, providedProductDTOs);\n+            dest.setProvidedProducts(providedProductDTOs);\n+\n+            Collection<Product> derivedProducts =\n+                source.getDerivedProduct() != null ? source.getDerivedProduct().getProvidedProducts() : null;\n+            Set<PoolDTO.ProvidedProductDTO> derivedProvidedProductDTOs = new HashSet<>();\n+            addProvidedProducts(derivedProducts, derivedProvidedProductDTOs);\n+            dest.setDerivedProvidedProducts(derivedProvidedProductDTOs);\n \n             // accumulate provided products for stacked entitlements\n             if (PoolType.STACK_DERIVED.equals(source.getType())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5Nzc5NA==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r366397794", "bodyText": "These need to be n-tier aware translations", "author": "Ceiu", "createdAt": "2020-01-14T15:18:30Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java", "diffHunk": "@@ -147,8 +159,48 @@ public PoolDTO populate(ModelTranslator modelTranslator, Pool source, PoolDTO de\n             else {\n                 dest.setDerivedProvidedProducts(Collections.<PoolDTO.ProvidedProductDTO>emptySet());\n             }\n+\n+            // accumulate provided products for stacked entitlements\n+            if (PoolType.STACK_DERIVED.equals(source.getType())) {\n+                Collection<Product> providedProducts = accumulateStackDerivedPoolProvidedProducts(source);\n+                if (source.getDerivedProduct() != null) {\n+                    for (Product providedProduct : providedProducts) {", "originalCommit": "1070f83a4e0c5ba5c5cd10e7467c85ec54790877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwNzg5Mg==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r367307892", "bodyText": "Done.", "author": "abhiskum", "createdAt": "2020-01-16T09:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5Nzc5NA=="}], "type": "inlineReview", "revised_code": {"commit": "e2576563692b24fc182ef1ac28aa1f065ef297fa", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java b/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java\nindex 599eb84f6..21372f490 100755\n--- a/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java\n+++ b/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java\n\n@@ -134,31 +134,15 @@ public class PoolTranslator extends TimestampedEntityTranslator<Pool, PoolDTO> {\n \n             Collection<Product> products =\n                 source.getProduct() != null ? source.getProduct().getProvidedProducts() : null;\n-            if (products != null && !products.isEmpty()) {\n-                for (Product prod : products) {\n-                    if (prod != null) {\n-                        dest.addProvidedProduct(new PoolDTO.ProvidedProductDTO(prod.getId(), prod.getName()));\n-                    }\n-                }\n-\n-            }\n-            else {\n-                dest.setProvidedProducts(Collections.<PoolDTO.ProvidedProductDTO>emptySet());\n-            }\n+            Set<PoolDTO.ProvidedProductDTO> providedProductDTOs = new HashSet<>();\n+            addProvidedProducts(products, providedProductDTOs);\n+            dest.setProvidedProducts(providedProductDTOs);\n \n             Collection<Product> derivedProducts =\n                 source.getDerivedProduct() != null ? source.getDerivedProduct().getProvidedProducts() : null;\n-            if (derivedProducts != null && !derivedProducts.isEmpty()) {\n-                for (Product derivedProd : derivedProducts) {\n-                    if (derivedProd != null) {\n-                        dest.addDerivedProvidedProduct(\n-                            new PoolDTO.ProvidedProductDTO(derivedProd.getId(), derivedProd.getName()));\n-                    }\n-                }\n-            }\n-            else {\n-                dest.setDerivedProvidedProducts(Collections.<PoolDTO.ProvidedProductDTO>emptySet());\n-            }\n+            Set<PoolDTO.ProvidedProductDTO> derivedProvidedProductDTOs = new HashSet<>();\n+            addProvidedProducts(derivedProducts, derivedProvidedProductDTOs);\n+            dest.setDerivedProvidedProducts(derivedProvidedProductDTOs);\n \n             // accumulate provided products for stacked entitlements\n             if (PoolType.STACK_DERIVED.equals(source.getType())) {\n"}}, {"oid": "e2576563692b24fc182ef1ac28aa1f065ef297fa", "url": "https://github.com/candlepin/candlepin/commit/e2576563692b24fc182ef1ac28aa1f065ef297fa", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Add logic in PoolTranslator to accumulate provided products for stacked entitlements at runtime\n  - Updated product creation logic in rspec\n  - Update translator junits to pass entitlement EntitlementCurator in this constructor\n  - updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts", "committedDate": "2020-01-16T07:51:54Z", "type": "forcePushed"}, {"oid": "2f6a855952c85fa4f40c6909e2bb7f461a7df346", "url": "https://github.com/candlepin/candlepin/commit/2f6a855952c85fa4f40c6909e2bb7f461a7df346", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Add logic in PoolTranslator to accumulate provided products for stacked entitlements at runtime\n  - Updated product creation logic in rspec\n  - Update translator junits to pass entitlement EntitlementCurator in this constructor\n  - updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts", "committedDate": "2020-01-16T09:18:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3ODQwNQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r367378405", "bodyText": "\ud83d\udc4d Yep, it would be easier to get the refresh changes done first", "author": "nikosmoum", "createdAt": "2020-01-16T11:56:48Z", "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "diffHunk": "@@ -974,6 +974,11 @@ private Pool convertToMasterPoolImpl(SubscriptionInfo sub, Owner owner, Map<Stri\n             }\n \n             pool.setProvidedProducts(products);\n+            // TODO: workaround to pass import spec tests. we will revisit and update this in import and\n+            // refresh code changes", "originalCommit": "2f6a855952c85fa4f40c6909e2bb7f461a7df346", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMzI0Mw==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r367913243", "bodyText": "This is something we discussed for a bit before, and it didn't seem right to me. I wasn't familiar with the code in StackedSubPoolValueAccumulator and how it's used, and it's hard to go through, but I tried to look into it a bit, and from what I understand this is what happens:\nWhen we want to update sub-pools (stack derived pools) of a master pool, we find the entitlements from the same stack of that sub-pool, then find the pools off of those entitlements, and see if any of their provided products changed, and if they did change, we set those provided products on that sub-pool here, and eventually persist it.\nI assume the problem that arose that prompted you to add this change in the Translator is that those updated provided products are not reflected in the pool's marketing product, so we add them in the DTO here due to possible spec test failures? Would it not be preferable to change the code in PoolRules instead, to add those updated provided products on the marketing product directly and make sure our model data is consistent? Then we wouldn't need to do this on the DTO?\n@abhiskum Maybe I'm misunderstanding something since I'm not familiar with this part of the application? @Ceiu do you happen to know more about this?", "author": "nikosmoum", "createdAt": "2020-01-17T12:31:39Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java", "diffHunk": "@@ -122,33 +132,74 @@ public PoolDTO populate(ModelTranslator modelTranslator, Pool source, PoolDTO de\n                 dest.setBranding(Collections.emptySet());\n             }\n \n-            Set<Product> products = source.getProvidedProducts();\n-            if (products != null && !products.isEmpty()) {\n-                for (Product prod : products) {\n-                    if (prod != null) {\n-                        dest.addProvidedProduct(\n-                            new PoolDTO.ProvidedProductDTO(prod.getId(), prod.getName()));\n+            Collection<Product> products =\n+                source.getProduct() != null ? source.getProduct().getProvidedProducts() : null;\n+            Set<PoolDTO.ProvidedProductDTO> providedProductDTOs = new HashSet<>();\n+            addProvidedProducts(products, providedProductDTOs);\n+            dest.setProvidedProducts(providedProductDTOs);\n+\n+            Collection<Product> derivedProducts =\n+                source.getDerivedProduct() != null ? source.getDerivedProduct().getProvidedProducts() : null;\n+            Set<PoolDTO.ProvidedProductDTO> derivedProvidedProductDTOs = new HashSet<>();\n+            addProvidedProducts(derivedProducts, derivedProvidedProductDTOs);\n+            dest.setDerivedProvidedProducts(derivedProvidedProductDTOs);\n+\n+            // accumulate provided products for stacked entitlements\n+            if (PoolType.STACK_DERIVED.equals(source.getType())) {", "originalCommit": "2f6a855952c85fa4f40c6909e2bb7f461a7df346", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MTY1NA==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r368051654", "bodyText": "This probably isn't something we want to change internally in pool rules. As far as I understood the intent of this particular block, it's that we want to maintain the old flat representation of provided products on a given pool at the API level. But apparently stacks share provided products? That bit seems wrong to me, but will require some investigation to verify. If that's truly how stacks work, then this logic is fine (though maybe some other details need to be sorted out).", "author": "Ceiu", "createdAt": "2020-01-17T17:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMzI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUwNzg5OQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r368507899", "bodyText": "This is something we should discuss. @abhiskum will set up a meeting.", "author": "nikosmoum", "createdAt": "2020-01-20T11:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMzI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0NzkzMg==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r368847932", "bodyText": "As per discussion with @barnabycourt, @Ceiu, @nikosmoum and @wolfdale, we came up with the conclusion that we do not need to accumulate provided products in case of stacked entitlement as marketing product and stack id has one to one relationship i.e. different marketing product will not have the same stacking id and all the required provided products will be available in marketing product itself from adapter.", "author": "abhiskum", "createdAt": "2020-01-21T07:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMzI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f7d1e71b597628a07ee9508b9ad5418989401a08", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java b/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java\nindex d55b2cba6..682007ea4 100755\n--- a/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java\n+++ b/server/src/main/java/org/candlepin/dto/api/v1/PoolTranslator.java\n\n@@ -143,53 +134,11 @@ public class PoolTranslator extends TimestampedEntityTranslator<Pool, PoolDTO> {\n             Set<PoolDTO.ProvidedProductDTO> derivedProvidedProductDTOs = new HashSet<>();\n             addProvidedProducts(derivedProducts, derivedProvidedProductDTOs);\n             dest.setDerivedProvidedProducts(derivedProvidedProductDTOs);\n-\n-            // accumulate provided products for stacked entitlements\n-            if (PoolType.STACK_DERIVED.equals(source.getType())) {\n-                Set<PoolDTO.ProvidedProductDTO> expectedProvidedProds = new HashSet<>();\n-\n-                accumulateStackDerivedPoolProvidedProducts(source, expectedProvidedProds);\n-\n-                if (source.getDerivedProduct() != null) {\n-                    for (PoolDTO.ProvidedProductDTO providedProductDTO : expectedProvidedProds) {\n-                        dest.addDerivedProvidedProduct(providedProductDTO);\n-                    }\n-                }\n-                else {\n-                    for (PoolDTO.ProvidedProductDTO providedProductDTO : expectedProvidedProds) {\n-                        dest.addProvidedProduct(providedProductDTO);\n-                    }\n-                }\n-            }\n-\n         }\n \n         return dest;\n     }\n \n-    /**\n-     *\n-     * @param pool\n-     * @return\n-     *   accumulated provided products collection from the same stack entitlements\n-     */\n-    private void accumulateStackDerivedPoolProvidedProducts(Pool pool,\n-        Set<PoolDTO.ProvidedProductDTO> expectedProvidedProds) {\n-        List<Entitlement> stackedEntitlements = this.entitlementCurator\n-            .findByStackId(pool.getSourceStack().getSourceConsumer(), pool.getSourceStackId()).list();\n-        for (Entitlement nextStacked : stackedEntitlements) {\n-            Pool nextStackedPool = nextStacked.getPool();\n-            if (nextStackedPool.getDerivedProduct() == null) {\n-                addProvidedProducts(nextStackedPool.getProduct().getProvidedProducts(),\n-                    expectedProvidedProds);\n-            }\n-            else {\n-                addProvidedProducts(nextStackedPool.getDerivedProduct().getProvidedProducts(),\n-                    expectedProvidedProds);\n-            }\n-        }\n-    }\n-\n     private void addProvidedProducts(Collection<Product> providedProducts,\n         Set<PoolDTO.ProvidedProductDTO> providedProductDTOs) {\n         if (providedProducts == null || providedProducts.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNTE2OA==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r367915168", "bodyText": "Are these recursive calls what is meant by \"n-tier aware\"? Are we sure that this is how we're going to be handling this in the future; as a marketing product that has provided products and each provided product has its own provided products etc.? Last I checked we were not going to be doing the N-tier stuff, because we don't yet know how the product management people are going to design that stuff.\n@abhiskum @Ceiu", "author": "nikosmoum", "createdAt": "2020-01-17T12:37:21Z", "path": "server/src/main/java/org/candlepin/dto/manifest/v1/PoolTranslator.java", "diffHunk": "@@ -125,33 +135,73 @@ public PoolDTO populate(ModelTranslator modelTranslator, Pool source, PoolDTO de\n                 dest.setBranding(Collections.emptySet());\n             }\n \n-            Set<Product> products = source.getProvidedProducts();\n-            if (products != null && !products.isEmpty()) {\n-                for (Product prod : products) {\n-                    if (prod != null) {\n-                        dest.addProvidedProduct(\n-                            new PoolDTO.ProvidedProductDTO(prod.getId(), prod.getName()));\n+            Collection<Product> products =\n+                source.getProduct() != null ? source.getProduct().getProvidedProducts() : null;\n+            Set<PoolDTO.ProvidedProductDTO> providedProductDTOs = new HashSet<>();\n+            addProvidedProducts(products, providedProductDTOs);\n+            dest.setProvidedProducts(providedProductDTOs);\n+\n+            Collection<Product> derivedProducts =\n+                source.getDerivedProduct() != null ? source.getDerivedProduct().getProvidedProducts() : null;\n+            Set<PoolDTO.ProvidedProductDTO> derivedProvidedProductDTOs = new HashSet<>();\n+            addProvidedProducts(derivedProducts, derivedProvidedProductDTOs);\n+            dest.setDerivedProvidedProducts(derivedProvidedProductDTOs);\n+\n+            // accumulate provided products for stacked entitlements\n+            if (PoolType.STACK_DERIVED.equals(source.getType())) {\n+                Set<PoolDTO.ProvidedProductDTO> expectedProvidedProds = new HashSet<>();\n+\n+                accumulateStackDerivedPoolProvidedProducts(source, expectedProvidedProds);\n+\n+                if (source.getDerivedProduct() != null) {\n+                    for (PoolDTO.ProvidedProductDTO providedProductDTO : expectedProvidedProds) {\n+                        dest.addDerivedProvidedProduct(providedProductDTO);\n                     }\n                 }\n-            }\n-            else {\n-                dest.setProvidedProducts(Collections.emptySet());\n-            }\n-\n-            Set<Product> derivedProducts = source.getDerivedProvidedProducts();\n-            if (derivedProducts != null && !derivedProducts.isEmpty()) {\n-                for (Product derivedProd : derivedProducts) {\n-                    if (derivedProd != null) {\n-                        dest.addDerivedProvidedProduct(\n-                            new PoolDTO.ProvidedProductDTO(derivedProd.getId(), derivedProd.getName()));\n+                else {\n+                    for (PoolDTO.ProvidedProductDTO providedProductDTO : expectedProvidedProds) {\n+                        dest.addProvidedProduct(providedProductDTO);\n                     }\n                 }\n             }\n+        }\n+\n+        return dest;\n+    }\n+\n+    /**\n+     *\n+     * @param pool\n+     * @return\n+     *   accumulated provided products collection from the same stack entitlements\n+     */\n+    private void accumulateStackDerivedPoolProvidedProducts(Pool pool,\n+        Set<PoolDTO.ProvidedProductDTO> expectedProvidedProds) {\n+        List<Entitlement> stackedEntitlements = this.entitlementCurator\n+            .findByStackId(pool.getSourceStack().getSourceConsumer(), pool.getSourceStackId()).list();\n+        for (Entitlement nextStacked : stackedEntitlements) {\n+            Pool nextStackedPool = nextStacked.getPool();\n+            if (nextStackedPool.getDerivedProduct() == null) {\n+                addProvidedProducts(nextStackedPool.getProduct().getProvidedProducts(),\n+                    expectedProvidedProds);\n+            }\n             else {\n-                dest.setDerivedProvidedProducts(Collections.emptySet());\n+                addProvidedProducts(nextStackedPool.getDerivedProduct().getProvidedProducts(),\n+                    expectedProvidedProds);\n             }\n         }\n+    }\n \n-        return dest;\n+    private void addProvidedProducts(Collection<Product> providedProducts,\n+        Set<PoolDTO.ProvidedProductDTO> providedProductDTOs) {\n+        if (providedProducts == null || providedProducts.isEmpty()) {\n+            return;\n+        }\n+        for (Product product : providedProducts) {\n+            if (product != null) {\n+                providedProductDTOs.add(new PoolDTO.ProvidedProductDTO(product.getId(), product.getName()));\n+                addProvidedProducts(product.getProvidedProducts(), providedProductDTOs);", "originalCommit": "2f6a855952c85fa4f40c6909e2bb7f461a7df346", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NzMyNw==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r368047327", "bodyText": "\"N-tier\" the project name and n-tier as the thing I've been saying here are two different things (I think).\nI've stated this in another PR already, but for the sake of github comment history, I'll reiterate here:\nI posed this question during a post scrum, as I wasn't sure if we should be ignoring the provided products of provided products or not. The discussion ended with \"yes, we should handle those\" and that's what lead to my (perhaps poorly summarized) comment about n-tier handling.\nWhether or not that's something that is or will be used on the business side... who knows. Personally, I feel the effort to write it now and not worry about whether or not they'll use it is so low that I see no reason to skip it, and if it never gets utilized, it's almost free as far as processing time goes. We've probably spent more effort discussing the value than just doing it straight away.", "author": "Ceiu", "createdAt": "2020-01-17T17:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNTE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzNjAzNg==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r369036036", "bodyText": "While re-reviewing this earlier today, I noticed that the way we handle n-tier here, is that we set all provided products of the hierarchy to the top marketing object.\nSo if ProductA has ProvidedProductB, and ProvidedProductB itself has ProvidedProductC, then we end up with this DTO structure:\nProductA {\n    providedProducts: [ ProvidedProductB, ProvidedProductC ]\n} \n\nShouldn't it instead be like this?:\nProductA {\n    providedProducts: [ \n        ProvidedProductB { \n            providedProducts: [ ProvidedProductC ]\n        }\n    ]\n}\n\nAgain, sorry if this was already discussed in more detail and I missed it!", "author": "nikosmoum", "createdAt": "2020-01-21T14:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNTE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1NjQ0MQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r369056441", "bodyText": "That should be correct, since this whole remapping is done to simulate the old flat structure we had before.", "author": "Ceiu", "createdAt": "2020-01-21T15:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNTE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA2MDk1Mg==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r369060952", "bodyText": "I see, disregard my comment then!", "author": "nikosmoum", "createdAt": "2020-01-21T15:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNTE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "f7d1e71b597628a07ee9508b9ad5418989401a08", "chunk": "diff --git a/server/src/main/java/org/candlepin/dto/manifest/v1/PoolTranslator.java b/server/src/main/java/org/candlepin/dto/manifest/v1/PoolTranslator.java\nindex 4eab5eb45..29da149ce 100755\n--- a/server/src/main/java/org/candlepin/dto/manifest/v1/PoolTranslator.java\n+++ b/server/src/main/java/org/candlepin/dto/manifest/v1/PoolTranslator.java\n\n@@ -146,52 +137,11 @@ public class PoolTranslator implements ObjectTranslator<Pool, PoolDTO> {\n             Set<PoolDTO.ProvidedProductDTO> derivedProvidedProductDTOs = new HashSet<>();\n             addProvidedProducts(derivedProducts, derivedProvidedProductDTOs);\n             dest.setDerivedProvidedProducts(derivedProvidedProductDTOs);\n-\n-            // accumulate provided products for stacked entitlements\n-            if (PoolType.STACK_DERIVED.equals(source.getType())) {\n-                Set<PoolDTO.ProvidedProductDTO> expectedProvidedProds = new HashSet<>();\n-\n-                accumulateStackDerivedPoolProvidedProducts(source, expectedProvidedProds);\n-\n-                if (source.getDerivedProduct() != null) {\n-                    for (PoolDTO.ProvidedProductDTO providedProductDTO : expectedProvidedProds) {\n-                        dest.addDerivedProvidedProduct(providedProductDTO);\n-                    }\n-                }\n-                else {\n-                    for (PoolDTO.ProvidedProductDTO providedProductDTO : expectedProvidedProds) {\n-                        dest.addProvidedProduct(providedProductDTO);\n-                    }\n-                }\n-            }\n         }\n \n         return dest;\n     }\n \n-    /**\n-     *\n-     * @param pool\n-     * @return\n-     *   accumulated provided products collection from the same stack entitlements\n-     */\n-    private void accumulateStackDerivedPoolProvidedProducts(Pool pool,\n-        Set<PoolDTO.ProvidedProductDTO> expectedProvidedProds) {\n-        List<Entitlement> stackedEntitlements = this.entitlementCurator\n-            .findByStackId(pool.getSourceStack().getSourceConsumer(), pool.getSourceStackId()).list();\n-        for (Entitlement nextStacked : stackedEntitlements) {\n-            Pool nextStackedPool = nextStacked.getPool();\n-            if (nextStackedPool.getDerivedProduct() == null) {\n-                addProvidedProducts(nextStackedPool.getProduct().getProvidedProducts(),\n-                    expectedProvidedProds);\n-            }\n-            else {\n-                addProvidedProducts(nextStackedPool.getDerivedProduct().getProvidedProducts(),\n-                    expectedProvidedProds);\n-            }\n-        }\n-    }\n-\n     private void addProvidedProducts(Collection<Product> providedProducts,\n         Set<PoolDTO.ProvidedProductDTO> providedProductDTOs) {\n         if (providedProducts == null || providedProducts.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1OTc4OQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r368059789", "bodyText": "Missed formatting correction", "author": "Ceiu", "createdAt": "2020-01-17T17:50:34Z", "path": "server/src/test/java/org/candlepin/sync/EntitlementImporterTest.java", "diffHunk": "@@ -101,7 +102,7 @@ public void init() {\n \n         this.translator = new StandardTranslator(mockConsumerTypeCurator,\n             mockEnvironmentCurator,\n-            ownerCurator);\n+            ownerCurator, entitlementCurator);", "originalCommit": "2f6a855952c85fa4f40c6909e2bb7f461a7df346", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyOTEwMQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r368529101", "bodyText": "Fixed.", "author": "abhiskum", "createdAt": "2020-01-20T12:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1OTc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "917e9082b6e145ba84adb04a8c3e73d81a84f040", "chunk": "diff --git a/server/src/test/java/org/candlepin/sync/EntitlementImporterTest.java b/server/src/test/java/org/candlepin/sync/EntitlementImporterTest.java\nindex 680fee3c7..b4ebb7804 100644\n--- a/server/src/test/java/org/candlepin/sync/EntitlementImporterTest.java\n+++ b/server/src/test/java/org/candlepin/sync/EntitlementImporterTest.java\n\n@@ -100,8 +100,7 @@ public class EntitlementImporterTest {\n         this.owner = new Owner();\n         this.owner.setId(\"test-owner-id\");\n \n-        this.translator = new StandardTranslator(mockConsumerTypeCurator,\n-            mockEnvironmentCurator,\n+        this.translator = new StandardTranslator(mockConsumerTypeCurator, mockEnvironmentCurator,\n             ownerCurator, entitlementCurator);\n \n         i18n = I18nFactory.getI18n(getClass(), Locale.US, I18nFactory.FALLBACK);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MDI3MQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r368060271", "bodyText": "Missed whitespace correction", "author": "Ceiu", "createdAt": "2020-01-17T17:51:48Z", "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "diffHunk": "@@ -993,6 +998,11 @@ private Pool convertToMasterPoolImpl(SubscriptionInfo sub, Owner owner, Map<Stri\n             }\n \n             pool.setDerivedProvidedProducts(products);\n+            //TODO: workaround to pass import spec tests. we will revisit and update this in import and", "originalCommit": "2f6a855952c85fa4f40c6909e2bb7f461a7df346", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyOTAxMQ==", "url": "https://github.com/candlepin/candlepin/pull/2563#discussion_r368529011", "bodyText": "Fixed.", "author": "abhiskum", "createdAt": "2020-01-20T12:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MDI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "917e9082b6e145ba84adb04a8c3e73d81a84f040", "chunk": "diff --git a/server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java b/server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java\nindex 965570a52..8afb77a43 100644\n--- a/server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java\n+++ b/server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java\n\n@@ -998,7 +998,7 @@ public class CandlepinPoolManager implements PoolManager {\n             }\n \n             pool.setDerivedProvidedProducts(products);\n-            //TODO: workaround to pass import spec tests. we will revisit and update this in import and\n+            // TODO: workaround to pass import spec tests. we will revisit and update this in import and\n             // refresh code changes\n             if (pool.getDerivedProduct() != null) {\n                 pool.getDerivedProduct().setProvidedProducts(products);\n"}}, {"oid": "917e9082b6e145ba84adb04a8c3e73d81a84f040", "url": "https://github.com/candlepin/candlepin/commit/917e9082b6e145ba84adb04a8c3e73d81a84f040", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Add logic in PoolTranslator to accumulate provided products for stacked entitlements at runtime\n  - Updated product creation logic in rspec\n  - Update translator junits to pass entitlement EntitlementCurator in this constructor\n  - updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts", "committedDate": "2020-01-20T11:44:57Z", "type": "forcePushed"}, {"oid": "f7d1e71b597628a07ee9508b9ad5418989401a08", "url": "https://github.com/candlepin/candlepin/commit/f7d1e71b597628a07ee9508b9ad5418989401a08", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Add logic in PoolTranslator to accumulate provided products for stacked entitlements at runtime\n  - Updated product creation logic in rspec\n  - Update translator junits to pass entitlement EntitlementCurator in this constructor\n  - updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts", "committedDate": "2020-01-21T07:19:28Z", "type": "forcePushed"}, {"oid": "c0f842cfd31dc511135c1ab2640d5638806bd18e", "url": "https://github.com/candlepin/candlepin/commit/c0f842cfd31dc511135c1ab2640d5638806bd18e", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Add logic in PoolTranslator to accumulate provided products for stacked entitlements at runtime\n  - Updated product creation logic in rspec\n  - Update translator junits to pass entitlement EntitlementCurator in this constructor\n  - updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts", "committedDate": "2020-01-21T15:48:13Z", "type": "forcePushed"}, {"oid": "3a26112cb32d2f5574299edf810cdc4118b7d1b3", "url": "https://github.com/candlepin/candlepin/commit/3a26112cb32d2f5574299edf810cdc4118b7d1b3", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Updated product creation logic in rspec\n  - Update translator junits to pass entitlement EntitlementCurator in this constructor\n  - updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts", "committedDate": "2020-01-22T00:29:16Z", "type": "forcePushed"}, {"oid": "0ecf68ab62f4d14348ead78c47e3690a7c366cdc", "url": "https://github.com/candlepin/candlepin/commit/0ecf68ab62f4d14348ead78c47e3690a7c366cdc", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Updated org/candlepin/sync/Exporter.java to copy provided products from product and derived product\n  - Updated product creation logic in rspec\n  - Updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts\n  - Updated rspec and junit as per code changes", "committedDate": "2020-01-22T00:30:50Z", "type": "forcePushed"}, {"oid": "9eae5bae99f7137ad862e10683b86496963518e1", "url": "https://github.com/candlepin/candlepin/commit/9eae5bae99f7137ad862e10683b86496963518e1", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Updated org/candlepin/sync/Exporter.java to copy provided products from product and derived product\n  - Updated product creation logic in rspec\n  - Updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts\n  - Updated rspec and junit as per code changes\n  - Removed spec tests related to accumulate provided products in case of stacked entitlements as\nmarketing product and stack id has one to one relationship i.e. different marketing product will not have the same stacking id and all the required provided products will be available in marketing product itself from adapter.", "committedDate": "2020-01-22T00:42:00Z", "type": "forcePushed"}, {"oid": "cd62cc1137a71b221a00b32686fd1cd19efb0bb3", "url": "https://github.com/candlepin/candlepin/commit/cd62cc1137a71b221a00b32686fd1cd19efb0bb3", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Updated org/candlepin/sync/Exporter.java to copy provided products from product and derived product\n  - Updated product creation logic in rspec\n  - Updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts\n  - Updated rspec and junit as per code changes\n  - Removed spec tests related to accumulate provided products in case of stacked entitlements as marketing product and stack id has one to one relationship i.e. different marketing product will not have the same stacking id and all the required provided products will be available in marketing product itself from adapter.", "committedDate": "2020-01-22T00:43:17Z", "type": "commit"}, {"oid": "cd62cc1137a71b221a00b32686fd1cd19efb0bb3", "url": "https://github.com/candlepin/candlepin/commit/cd62cc1137a71b221a00b32686fd1cd19efb0bb3", "message": "[ENT-1831][ENT-1830] update pool response and manifest export flow\n  - Update org/candlepin/dto/api/v1/PoolTranslator.java to populate provided products into PoolDTO from Pool.Product.ProvidedProducts\n  - Updated org/candlepin/sync/Exporter.java to copy provided products from product and derived product\n  - Updated product creation logic in rspec\n  - Updated org/candlepin/dto/manifest/v1/PoolTranslator.java to populate provided products into PoolDTO from pool.product.providedProducts\n  - Updated rspec and junit as per code changes\n  - Removed spec tests related to accumulate provided products in case of stacked entitlements as marketing product and stack id has one to one relationship i.e. different marketing product will not have the same stacking id and all the required provided products will be available in marketing product itself from adapter.", "committedDate": "2020-01-22T00:43:17Z", "type": "forcePushed"}]}