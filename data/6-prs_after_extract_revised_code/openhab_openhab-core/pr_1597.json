{"pr_number": 1597, "pr_title": "[audio] ported audio sinks from addons to core", "pr_createdAt": "2020-08-16T14:19:03Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1597", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzQ1MA==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143450", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n          \n          \n            \n                        .singleton(AudioStream.class);\n          \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(AudioStream.class);", "author": "wborn", "createdAt": "2020-08-16T18:27:06Z", "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.javasound.internal;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import javazoom.jl.decoder.JavaLayerException;\n+import javazoom.jl.player.Player;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.FloatControl;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.Mixer;\n+import javax.sound.sampled.Port;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.smarthome.core.audio.AudioFormat;\n+import org.eclipse.smarthome.core.audio.AudioSink;\n+import org.eclipse.smarthome.core.audio.AudioStream;\n+import org.eclipse.smarthome.core.audio.URLAudioStream;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioFormatException;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioStreamException;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n+ * line-out).\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@Component(service = AudioSink.class, immediate = true)\n+public class JavaSoundAudioSink implements AudioSink {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n+\n+    private boolean isMac = false;\n+    private PercentType macVolumeValue = null;\n+    private static Player streamPlayer = null;\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));\n+\n+    // we accept any stream\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n+            .singleton(AudioStream.class);", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "chunk": "diff --git a/bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java b/bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java\ndeleted file mode 100644\nindex f3a783661..000000000\n--- a/bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java\n+++ /dev/null\n\n@@ -1,232 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.io.javasound.internal;\n-\n-import static java.util.stream.Collectors.toSet;\n-\n-import java.io.IOException;\n-import java.math.BigDecimal;\n-import java.util.Collections;\n-import java.util.Locale;\n-import java.util.Set;\n-import java.util.stream.Stream;\n-import javazoom.jl.decoder.JavaLayerException;\n-import javazoom.jl.player.Player;\n-\n-import javax.sound.sampled.AudioSystem;\n-import javax.sound.sampled.FloatControl;\n-import javax.sound.sampled.LineUnavailableException;\n-import javax.sound.sampled.Mixer;\n-import javax.sound.sampled.Port;\n-\n-import org.apache.commons.collections.Closure;\n-import org.apache.commons.io.IOUtils;\n-import org.eclipse.smarthome.core.audio.AudioFormat;\n-import org.eclipse.smarthome.core.audio.AudioSink;\n-import org.eclipse.smarthome.core.audio.AudioStream;\n-import org.eclipse.smarthome.core.audio.URLAudioStream;\n-import org.eclipse.smarthome.core.audio.UnsupportedAudioFormatException;\n-import org.eclipse.smarthome.core.audio.UnsupportedAudioStreamException;\n-import org.eclipse.smarthome.core.library.types.PercentType;\n-import org.osgi.framework.BundleContext;\n-import org.osgi.framework.Constants;\n-import org.osgi.service.component.annotations.Activate;\n-import org.osgi.service.component.annotations.Component;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n- * line-out).\n- *\n- * @author Kai Kreuzer - Initial contribution and API\n- * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n- *\n- */\n-@Component(service = AudioSink.class, immediate = true)\n-public class JavaSoundAudioSink implements AudioSink {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n-\n-    private boolean isMac = false;\n-    private PercentType macVolumeValue = null;\n-    private static Player streamPlayer = null;\n-\n-    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n-            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));\n-\n-    // we accept any stream\n-    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n-            .singleton(AudioStream.class);\n-\n-    @Activate\n-    protected void activate(BundleContext context) {\n-        String os = context.getProperty(Constants.FRAMEWORK_OS_NAME);\n-        if (os != null && os.toLowerCase().startsWith(\"macos\")) {\n-            isMac = true;\n-        }\n-    }\n-\n-    @Override\n-    public synchronized void process(final AudioStream audioStream)\n-            throws UnsupportedAudioFormatException, UnsupportedAudioStreamException {\n-        if (audioStream != null && audioStream.getFormat().getCodec() != AudioFormat.CODEC_MP3) {\n-            AudioPlayer audioPlayer = new AudioPlayer(audioStream);\n-            audioPlayer.start();\n-            try {\n-                audioPlayer.join();\n-            } catch (InterruptedException e) {\n-                LOGGER.error(\"Playing audio has been interrupted.\");\n-            }\n-        } else {\n-            if (audioStream == null || audioStream instanceof URLAudioStream) {\n-                // we are dealing with an infinite stream here\n-                if (streamPlayer != null) {\n-                    // if we are already playing a stream, stop it first\n-                    streamPlayer.close();\n-                    streamPlayer = null;\n-                }\n-                if (audioStream == null) {\n-                    // the call was only for stopping the currently playing stream\n-                    return;\n-                } else {\n-                    try {\n-                        // we start a new continuous stream and store its handle\n-                        streamPlayer = new Player(audioStream);\n-                        playInThread(streamPlayer);\n-                    } catch (JavaLayerException e) {\n-                        LOGGER.error(\"An exception occurred while playing url audio stream : '{}'\", e.getMessage());\n-                    }\n-                    return;\n-                }\n-            } else {\n-                // we are playing some normal file (no url stream)\n-                try {\n-                    playInThread(new Player(audioStream));\n-                } catch (JavaLayerException e) {\n-                    LOGGER.error(\"An exception occurred while playing audio : '{}'\", e.getMessage());\n-                }\n-            }\n-        }\n-    }\n-\n-    private void playInThread(final Player player) {\n-        // run in new thread\n-        new Thread(() -> {\n-            try {\n-                player.play();\n-            } catch (Exception e) {\n-                LOGGER.error(\"An exception occurred while playing audio : '{}'\", e.getMessage());\n-            } finally {\n-                player.close();\n-            }\n-        }).start();\n-    }\n-\n-    protected synchronized void deactivate() {\n-        if (streamPlayer != null) {\n-            // stop playing streams on shutdown\n-            streamPlayer.close();\n-            streamPlayer = null;\n-        }\n-    }\n-\n-    @Override\n-    public Set<AudioFormat> getSupportedFormats() {\n-        return SUPPORTED_AUDIO_FORMATS;\n-    }\n-\n-    @Override\n-    public Set<Class<? extends AudioStream>> getSupportedStreams() {\n-        return SUPPORTED_AUDIO_STREAMS;\n-    }\n-\n-    @Override\n-    public String getId() {\n-        return \"enhancedjavasound\";\n-    }\n-\n-    @Override\n-    public String getLabel(Locale locale) {\n-        return \"System Speaker\";\n-    }\n-\n-    @Override\n-    public PercentType getVolume() throws IOException {\n-        if (!isMac) {\n-            final Float[] volumes = new Float[1];\n-            runVolumeCommand(new Closure() {\n-                @Override\n-                public void execute(Object input) {\n-                    FloatControl volumeControl = (FloatControl) input;\n-                    volumes[0] = volumeControl.getValue();\n-                }\n-            });\n-            if (volumes[0] != null) {\n-                return new PercentType(new BigDecimal(volumes[0] * 100f));\n-            } else {\n-                throw new IOException(\"Cannot determine master volume level\");\n-            }\n-        } else {\n-            // we use a cache of the value as the script execution is pretty slow\n-            if (macVolumeValue == null) {\n-                Process p = Runtime.getRuntime()\n-                        .exec(new String[] { \"osascript\", \"-e\", \"output volume of (get volume settings)\" });\n-                String value = IOUtils.toString(p.getInputStream()).trim();\n-                macVolumeValue = new PercentType(value);\n-            }\n-            return macVolumeValue;\n-        }\n-    }\n-\n-    @Override\n-    public void setVolume(final PercentType volume) throws IOException {\n-        if (volume.intValue() < 0 || volume.intValue() > 100) {\n-            throw new IllegalArgumentException(\"Volume value must be in the range [0,100]!\");\n-        }\n-        if (!isMac) {\n-            runVolumeCommand(new Closure() {\n-                @Override\n-                public void execute(Object input) {\n-                    FloatControl volumeControl = (FloatControl) input;\n-                    volumeControl.setValue(volume.floatValue() / 100f);\n-                }\n-            });\n-        } else {\n-            Runtime.getRuntime()\n-                    .exec(new String[] { \"osascript\", \"-e\", \"set volume output volume \" + volume.intValue() });\n-            macVolumeValue = volume;\n-        }\n-    }\n-\n-    private void runVolumeCommand(Closure closure) {\n-        Mixer.Info[] infos = AudioSystem.getMixerInfo();\n-        for (Mixer.Info info : infos) {\n-            Mixer mixer = AudioSystem.getMixer(info);\n-            if (mixer.isLineSupported(Port.Info.SPEAKER)) {\n-                Port port;\n-                try {\n-                    port = (Port) mixer.getLine(Port.Info.SPEAKER);\n-                    port.open();\n-                    if (port.isControlSupported(FloatControl.Type.VOLUME)) {\n-                        FloatControl volume = (FloatControl) port.getControl(FloatControl.Type.VOLUME);\n-                        closure.execute(volume);\n-                    }\n-                    port.close();\n-                } catch (LineUnavailableException e) {\n-                    LOGGER.error(\"Cannot access master volume control\", e);\n-                }\n-            }\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzQ2NQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Collections.singleton(audioFormat);\n          \n          \n            \n                    return Set.of(audioFormat);", "author": "wborn", "createdAt": "2020-08-16T18:27:18Z", "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSource.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.javasound.internal;\n+\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.DataLine;\n+import javax.sound.sampled.TargetDataLine;\n+\n+import org.eclipse.smarthome.core.audio.AudioException;\n+import org.eclipse.smarthome.core.audio.AudioFormat;\n+import org.eclipse.smarthome.core.audio.AudioSource;\n+import org.eclipse.smarthome.core.audio.AudioStream;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an AudioSource from an input channel of the host.\n+ *\n+ * @author Kelly Davis - Initial contribution and API\n+ * @author Kai Kreuzer - Refactored and stabilized\n+ *\n+ */\n+@Component(service = AudioSource.class, immediate = true)\n+public class JavaSoundAudioSource implements AudioSource {\n+\n+    /**\n+     * Java Sound audio format\n+     */\n+    private final javax.sound.sampled.AudioFormat format = new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true,\n+            false);\n+\n+    /**\n+     * AudioFormat of the JavaSoundAudioSource\n+     */\n+    private final AudioFormat audioFormat = convertAudioFormat(format);\n+\n+    /**\n+     * TargetDataLine for the mic\n+     */\n+    private TargetDataLine microphone;\n+\n+    /**\n+     * Constructs a JavaSoundAudioSource\n+     */\n+    public JavaSoundAudioSource() {\n+    }\n+\n+    private void initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n+        try {\n+            TargetDataLine microphone;\n+            microphone = AudioSystem.getTargetDataLine(format);\n+\n+            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);\n+            microphone = (TargetDataLine) AudioSystem.getLine(info);\n+\n+            microphone.open(format);\n+\n+            this.microphone = microphone;\n+        } catch (Exception e) {\n+            throw new AudioException(\"Error creating the audio input stream.\", e);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized AudioStream getInputStream(AudioFormat expectedFormat) throws AudioException {\n+        if (!expectedFormat.isCompatible(audioFormat)) {\n+            throw new AudioException(\"Cannot produce streams in format \" + expectedFormat);\n+        }\n+        if (microphone == null) {\n+            initMicrophone(format);\n+        }\n+        return new JavaSoundInputStream(this.microphone, audioFormat);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"javasound\";\n+    }\n+\n+    /**\n+     * Converts a javax.sound.sampled.AudioFormat to a org.eclipse.smarthome.core.audio.AudioFormat\n+     *\n+     * @param audioFormat the AudioFormat to convert\n+     * @return The converted AudioFormat\n+     */\n+    private static AudioFormat convertAudioFormat(javax.sound.sampled.AudioFormat audioFormat) {\n+        String container = AudioFormat.CONTAINER_WAVE;\n+\n+        String codec = audioFormat.getEncoding().toString();\n+\n+        Boolean bigEndian = new Boolean(audioFormat.isBigEndian());\n+\n+        int frameSize = audioFormat.getFrameSize(); // In bytes\n+        int bitsPerFrame = frameSize * 8;\n+        Integer bitDepth = ((AudioSystem.NOT_SPECIFIED == frameSize) ? null : new Integer(bitsPerFrame));\n+\n+        float frameRate = audioFormat.getFrameRate();\n+        Integer bitRate = ((AudioSystem.NOT_SPECIFIED == frameRate) ? null\n+                : new Integer((int) (frameRate * bitsPerFrame)));\n+\n+        float sampleRate = audioFormat.getSampleRate();\n+        Long frequency = ((AudioSystem.NOT_SPECIFIED == sampleRate) ? null : new Long((long) sampleRate));\n+\n+        return new AudioFormat(container, codec, bigEndian, bitDepth, bitRate, frequency);\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return \"javasound\";\n+    }\n+\n+    @Override\n+    public String getLabel(Locale locale) {\n+        return \"System Microphone\";\n+    }\n+\n+    @Override\n+    public Set<AudioFormat> getSupportedFormats() {\n+        return Collections.singleton(audioFormat);", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "chunk": "diff --git a/bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSource.java b/bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSource.java\ndeleted file mode 100644\nindex d1b0455fa..000000000\n--- a/bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSource.java\n+++ /dev/null\n\n@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.io.javasound.internal;\n-\n-import java.util.Collections;\n-import java.util.Locale;\n-import java.util.Set;\n-\n-import javax.sound.sampled.AudioSystem;\n-import javax.sound.sampled.DataLine;\n-import javax.sound.sampled.TargetDataLine;\n-\n-import org.eclipse.smarthome.core.audio.AudioException;\n-import org.eclipse.smarthome.core.audio.AudioFormat;\n-import org.eclipse.smarthome.core.audio.AudioSource;\n-import org.eclipse.smarthome.core.audio.AudioStream;\n-import org.osgi.service.component.annotations.Component;\n-\n-/**\n- * This is an AudioSource from an input channel of the host.\n- *\n- * @author Kelly Davis - Initial contribution and API\n- * @author Kai Kreuzer - Refactored and stabilized\n- *\n- */\n-@Component(service = AudioSource.class, immediate = true)\n-public class JavaSoundAudioSource implements AudioSource {\n-\n-    /**\n-     * Java Sound audio format\n-     */\n-    private final javax.sound.sampled.AudioFormat format = new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true,\n-            false);\n-\n-    /**\n-     * AudioFormat of the JavaSoundAudioSource\n-     */\n-    private final AudioFormat audioFormat = convertAudioFormat(format);\n-\n-    /**\n-     * TargetDataLine for the mic\n-     */\n-    private TargetDataLine microphone;\n-\n-    /**\n-     * Constructs a JavaSoundAudioSource\n-     */\n-    public JavaSoundAudioSource() {\n-    }\n-\n-    private void initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n-        try {\n-            TargetDataLine microphone;\n-            microphone = AudioSystem.getTargetDataLine(format);\n-\n-            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);\n-            microphone = (TargetDataLine) AudioSystem.getLine(info);\n-\n-            microphone.open(format);\n-\n-            this.microphone = microphone;\n-        } catch (Exception e) {\n-            throw new AudioException(\"Error creating the audio input stream.\", e);\n-        }\n-    }\n-\n-    @Override\n-    public synchronized AudioStream getInputStream(AudioFormat expectedFormat) throws AudioException {\n-        if (!expectedFormat.isCompatible(audioFormat)) {\n-            throw new AudioException(\"Cannot produce streams in format \" + expectedFormat);\n-        }\n-        if (microphone == null) {\n-            initMicrophone(format);\n-        }\n-        return new JavaSoundInputStream(this.microphone, audioFormat);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"javasound\";\n-    }\n-\n-    /**\n-     * Converts a javax.sound.sampled.AudioFormat to a org.eclipse.smarthome.core.audio.AudioFormat\n-     *\n-     * @param audioFormat the AudioFormat to convert\n-     * @return The converted AudioFormat\n-     */\n-    private static AudioFormat convertAudioFormat(javax.sound.sampled.AudioFormat audioFormat) {\n-        String container = AudioFormat.CONTAINER_WAVE;\n-\n-        String codec = audioFormat.getEncoding().toString();\n-\n-        Boolean bigEndian = new Boolean(audioFormat.isBigEndian());\n-\n-        int frameSize = audioFormat.getFrameSize(); // In bytes\n-        int bitsPerFrame = frameSize * 8;\n-        Integer bitDepth = ((AudioSystem.NOT_SPECIFIED == frameSize) ? null : new Integer(bitsPerFrame));\n-\n-        float frameRate = audioFormat.getFrameRate();\n-        Integer bitRate = ((AudioSystem.NOT_SPECIFIED == frameRate) ? null\n-                : new Integer((int) (frameRate * bitsPerFrame)));\n-\n-        float sampleRate = audioFormat.getSampleRate();\n-        Long frequency = ((AudioSystem.NOT_SPECIFIED == sampleRate) ? null : new Long((long) sampleRate));\n-\n-        return new AudioFormat(container, codec, bigEndian, bitDepth, bitRate, frequency);\n-    }\n-\n-    @Override\n-    public String getId() {\n-        return \"javasound\";\n-    }\n-\n-    @Override\n-    public String getLabel(Locale locale) {\n-        return \"System Microphone\";\n-    }\n-\n-    @Override\n-    public Set<AudioFormat> getSupportedFormats() {\n-        return Collections.singleton(audioFormat);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzUwMQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143501", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n          \n          \n            \n                        .singleton(AudioStream.class);\n          \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(AudioStream.class);", "author": "wborn", "createdAt": "2020-08-16T18:27:35Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSink.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.javasound;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Scanner;\n+import java.util.Set;\n+import java.util.function.Function;\n+import javazoom.jl.decoder.JavaLayerException;\n+import javazoom.jl.player.Player;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.FloatControl;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.Mixer;\n+import javax.sound.sampled.Port;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioSink;\n+import org.openhab.core.audio.AudioStream;\n+import org.openhab.core.audio.URLAudioStream;\n+import org.openhab.core.audio.UnsupportedAudioFormatException;\n+import org.openhab.core.audio.UnsupportedAudioStreamException;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.library.types.PercentType;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n+ * line-out).\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSink.class, immediate = true)\n+public class JavaSoundAudioSink implements AudioSink {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n+\n+    private boolean isMac = false;\n+    private @Nullable PercentType macVolumeValue = null;\n+    private @Nullable static Player streamPlayer = null;\n+\n+    private NamedThreadFactory threadFactory = new NamedThreadFactory(\"audio\");\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);\n+\n+    // we accept any stream\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n+            .singleton(AudioStream.class);", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "chunk": "diff --git a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSink.java b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSink.java\nindex 67532d965..038471b2f 100644\n--- a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSink.java\n+++ b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSink.java\n\n@@ -69,8 +69,7 @@ public class JavaSoundAudioSink implements AudioSink {\n     private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);\n \n     // we accept any stream\n-    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n-            .singleton(AudioStream.class);\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(AudioStream.class);\n \n     @Activate\n     protected void activate(BundleContext context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzUyMw==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143523", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Collections.singleton(audioFormat);\n          \n          \n            \n                    return Set.of(audioFormat);", "author": "wborn", "createdAt": "2020-08-16T18:27:50Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.javasound;\n+\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.DataLine;\n+import javax.sound.sampled.TargetDataLine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioException;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioSource;\n+import org.openhab.core.audio.AudioStream;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an AudioSource from an input channel of the host.\n+ *\n+ * @author Kelly Davis - Initial contribution and API\n+ * @author Kai Kreuzer - Refactored and stabilized\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSource.class, immediate = true)\n+public class JavaSoundAudioSource implements AudioSource {\n+\n+    /**\n+     * Java Sound audio format\n+     */\n+    private final javax.sound.sampled.AudioFormat format = new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true,\n+            false);\n+\n+    /**\n+     * AudioFormat of the JavaSoundAudioSource\n+     */\n+    private final AudioFormat audioFormat = convertAudioFormat(format);\n+\n+    /**\n+     * TargetDataLine for the mic\n+     */\n+    private @Nullable TargetDataLine microphone;\n+\n+    /**\n+     * Constructs a JavaSoundAudioSource\n+     */\n+    public JavaSoundAudioSource() {\n+    }\n+\n+    private TargetDataLine initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n+        try {\n+            TargetDataLine microphone;\n+            microphone = AudioSystem.getTargetDataLine(format);\n+\n+            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);\n+            microphone = (TargetDataLine) AudioSystem.getLine(info);\n+\n+            microphone.open(format);\n+\n+            this.microphone = microphone;\n+            return microphone;\n+        } catch (Exception e) {\n+            throw new AudioException(\"Error creating the audio input stream.\", e);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized AudioStream getInputStream(AudioFormat expectedFormat) throws AudioException {\n+        if (!expectedFormat.isCompatible(audioFormat)) {\n+            throw new AudioException(\"Cannot produce streams in format \" + expectedFormat);\n+        }\n+        TargetDataLine mic = this.microphone;\n+        if (mic == null) {\n+            mic = initMicrophone(format);\n+        }\n+        return new JavaSoundInputStream(mic, audioFormat);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"javasound\";\n+    }\n+\n+    /**\n+     * Converts a javax.sound.sampled.AudioFormat to a org.openhab.core.audio.AudioFormat\n+     *\n+     * @param audioFormat the AudioFormat to convert\n+     * @return The converted AudioFormat\n+     */\n+    private static AudioFormat convertAudioFormat(javax.sound.sampled.AudioFormat audioFormat) {\n+        String container = AudioFormat.CONTAINER_WAVE;\n+\n+        String codec = audioFormat.getEncoding().toString();\n+\n+        Boolean bigEndian = Boolean.valueOf(audioFormat.isBigEndian());\n+\n+        int frameSize = audioFormat.getFrameSize(); // In bytes\n+        int bitsPerFrame = frameSize * 8;\n+        Integer bitDepth = ((AudioSystem.NOT_SPECIFIED == frameSize) ? null : Integer.valueOf(bitsPerFrame));\n+\n+        float frameRate = audioFormat.getFrameRate();\n+        Integer bitRate = ((AudioSystem.NOT_SPECIFIED == frameRate) ? null\n+                : Integer.valueOf((int) (frameRate * bitsPerFrame)));\n+\n+        float sampleRate = audioFormat.getSampleRate();\n+        Long frequency = ((AudioSystem.NOT_SPECIFIED == sampleRate) ? null : Long.valueOf((long) sampleRate));\n+\n+        return new AudioFormat(container, codec, bigEndian, bitDepth, bitRate, frequency);\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return \"javasound\";\n+    }\n+\n+    @Override\n+    public String getLabel(@Nullable Locale locale) {\n+        return \"System Microphone\";\n+    }\n+\n+    @Override\n+    public Set<AudioFormat> getSupportedFormats() {\n+        return Collections.singleton(audioFormat);", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "chunk": "diff --git a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java\nindex 7adfea2b9..395079fd0 100644\n--- a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java\n+++ b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java\n\n@@ -134,6 +134,6 @@ public class JavaSoundAudioSource implements AudioSource {\n \n     @Override\n     public Set<AudioFormat> getSupportedFormats() {\n-        return Collections.singleton(audioFormat);\n+        return Set.of(audioFormat);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzUzNQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143535", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(Collections.singleton(PlayURLEvent.TYPE));\n          \n          \n            \n                    super(Set.of(PlayURLEvent.TYPE));", "author": "wborn", "createdAt": "2020-08-16T18:28:06Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.util.Collections;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.AbstractEventFactory;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an {@link EventFactory} for creating web audio events.\n+ * The only currently supported event type is {@link PlayURLEvent}.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ */\n+@NonNullByDefault\n+@Component(service = EventFactory.class, immediate = true)\n+public class WebAudioEventFactory extends AbstractEventFactory {\n+\n+    private static final String PLAY_URL_TOPIC = \"smarthome/webaudio/playurl\";\n+\n+    /**\n+     * Constructs a new WebAudioEventFactory.\n+     */\n+    public WebAudioEventFactory() {\n+        super(Collections.singleton(PlayURLEvent.TYPE));", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "chunk": "diff --git a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java\nindex f9428b9d9..31faba000 100644\n--- a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java\n+++ b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java\n\n@@ -37,7 +37,7 @@ public class WebAudioEventFactory extends AbstractEventFactory {\n      * Constructs a new WebAudioEventFactory.\n      */\n     public WebAudioEventFactory() {\n-        super(Collections.singleton(PlayURLEvent.TYPE));\n+        super(Set.of(PlayURLEvent.TYPE));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzU3NA==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143574", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));\n          \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);", "author": "wborn", "createdAt": "2020-08-16T18:28:34Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioHTTPServer;\n+import org.openhab.core.audio.AudioSink;\n+import org.openhab.core.audio.AudioStream;\n+import org.openhab.core.audio.FixedLengthAudioStream;\n+import org.openhab.core.audio.URLAudioStream;\n+import org.openhab.core.audio.UnsupportedAudioFormatException;\n+import org.openhab.core.audio.UnsupportedAudioStreamException;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.library.types.PercentType;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that publishes an event through SSE and temporarily serves the stream via HTTP for web players\n+ * to pick it up.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSink.class, immediate = true)\n+public class WebAudioAudioSink implements AudioSink {\n+\n+    private final Logger logger = LoggerFactory.getLogger(WebAudioAudioSink.class);\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "chunk": "diff --git a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java\nindex be4cb9a69..9c32a368a 100644\n--- a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java\n+++ b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java\n\n@@ -51,10 +51,8 @@ public class WebAudioAudioSink implements AudioSink {\n \n     private final Logger logger = LoggerFactory.getLogger(WebAudioAudioSink.class);\n \n-    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n-            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));\n-    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n-            .unmodifiableSet(Stream.of(FixedLengthAudioStream.class, URLAudioStream.class).collect(Collectors.toSet()));\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(FixedLengthAudioStream.class, URLAudioStream.class);\n \n     private AudioHTTPServer audioHTTPServer;\n     private EventPublisher eventPublisher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzYwMw==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143603", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.of(FixedLengthAudioStream.class, URLAudioStream.class).collect(Collectors.toSet()));\n          \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(FixedLengthAudioStream.class, URLAudioStream.class);", "author": "wborn", "createdAt": "2020-08-16T18:28:55Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioHTTPServer;\n+import org.openhab.core.audio.AudioSink;\n+import org.openhab.core.audio.AudioStream;\n+import org.openhab.core.audio.FixedLengthAudioStream;\n+import org.openhab.core.audio.URLAudioStream;\n+import org.openhab.core.audio.UnsupportedAudioFormatException;\n+import org.openhab.core.audio.UnsupportedAudioStreamException;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.library.types.PercentType;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that publishes an event through SSE and temporarily serves the stream via HTTP for web players\n+ * to pick it up.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSink.class, immediate = true)\n+public class WebAudioAudioSink implements AudioSink {\n+\n+    private final Logger logger = LoggerFactory.getLogger(WebAudioAudioSink.class);\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n+            .unmodifiableSet(Stream.of(FixedLengthAudioStream.class, URLAudioStream.class).collect(Collectors.toSet()));", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "chunk": "diff --git a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java\nindex be4cb9a69..9c32a368a 100644\n--- a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java\n+++ b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java\n\n@@ -51,10 +51,8 @@ public class WebAudioAudioSink implements AudioSink {\n \n     private final Logger logger = LoggerFactory.getLogger(WebAudioAudioSink.class);\n \n-    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n-            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));\n-    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n-            .unmodifiableSet(Stream.of(FixedLengthAudioStream.class, URLAudioStream.class).collect(Collectors.toSet()));\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(FixedLengthAudioStream.class, URLAudioStream.class);\n \n     private AudioHTTPServer audioHTTPServer;\n     private EventPublisher eventPublisher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzYzMQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143631", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));\n          \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);", "author": "wborn", "createdAt": "2020-08-16T18:29:17Z", "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.javasound.internal;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import javazoom.jl.decoder.JavaLayerException;\n+import javazoom.jl.player.Player;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.FloatControl;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.Mixer;\n+import javax.sound.sampled.Port;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.smarthome.core.audio.AudioFormat;\n+import org.eclipse.smarthome.core.audio.AudioSink;\n+import org.eclipse.smarthome.core.audio.AudioStream;\n+import org.eclipse.smarthome.core.audio.URLAudioStream;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioFormatException;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioStreamException;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n+ * line-out).\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@Component(service = AudioSink.class, immediate = true)\n+public class JavaSoundAudioSink implements AudioSink {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n+\n+    private boolean isMac = false;\n+    private PercentType macVolumeValue = null;\n+    private static Player streamPlayer = null;\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "chunk": "diff --git a/bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java b/bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java\ndeleted file mode 100644\nindex f3a783661..000000000\n--- a/bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java\n+++ /dev/null\n\n@@ -1,232 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.io.javasound.internal;\n-\n-import static java.util.stream.Collectors.toSet;\n-\n-import java.io.IOException;\n-import java.math.BigDecimal;\n-import java.util.Collections;\n-import java.util.Locale;\n-import java.util.Set;\n-import java.util.stream.Stream;\n-import javazoom.jl.decoder.JavaLayerException;\n-import javazoom.jl.player.Player;\n-\n-import javax.sound.sampled.AudioSystem;\n-import javax.sound.sampled.FloatControl;\n-import javax.sound.sampled.LineUnavailableException;\n-import javax.sound.sampled.Mixer;\n-import javax.sound.sampled.Port;\n-\n-import org.apache.commons.collections.Closure;\n-import org.apache.commons.io.IOUtils;\n-import org.eclipse.smarthome.core.audio.AudioFormat;\n-import org.eclipse.smarthome.core.audio.AudioSink;\n-import org.eclipse.smarthome.core.audio.AudioStream;\n-import org.eclipse.smarthome.core.audio.URLAudioStream;\n-import org.eclipse.smarthome.core.audio.UnsupportedAudioFormatException;\n-import org.eclipse.smarthome.core.audio.UnsupportedAudioStreamException;\n-import org.eclipse.smarthome.core.library.types.PercentType;\n-import org.osgi.framework.BundleContext;\n-import org.osgi.framework.Constants;\n-import org.osgi.service.component.annotations.Activate;\n-import org.osgi.service.component.annotations.Component;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n- * line-out).\n- *\n- * @author Kai Kreuzer - Initial contribution and API\n- * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n- *\n- */\n-@Component(service = AudioSink.class, immediate = true)\n-public class JavaSoundAudioSink implements AudioSink {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n-\n-    private boolean isMac = false;\n-    private PercentType macVolumeValue = null;\n-    private static Player streamPlayer = null;\n-\n-    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n-            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));\n-\n-    // we accept any stream\n-    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n-            .singleton(AudioStream.class);\n-\n-    @Activate\n-    protected void activate(BundleContext context) {\n-        String os = context.getProperty(Constants.FRAMEWORK_OS_NAME);\n-        if (os != null && os.toLowerCase().startsWith(\"macos\")) {\n-            isMac = true;\n-        }\n-    }\n-\n-    @Override\n-    public synchronized void process(final AudioStream audioStream)\n-            throws UnsupportedAudioFormatException, UnsupportedAudioStreamException {\n-        if (audioStream != null && audioStream.getFormat().getCodec() != AudioFormat.CODEC_MP3) {\n-            AudioPlayer audioPlayer = new AudioPlayer(audioStream);\n-            audioPlayer.start();\n-            try {\n-                audioPlayer.join();\n-            } catch (InterruptedException e) {\n-                LOGGER.error(\"Playing audio has been interrupted.\");\n-            }\n-        } else {\n-            if (audioStream == null || audioStream instanceof URLAudioStream) {\n-                // we are dealing with an infinite stream here\n-                if (streamPlayer != null) {\n-                    // if we are already playing a stream, stop it first\n-                    streamPlayer.close();\n-                    streamPlayer = null;\n-                }\n-                if (audioStream == null) {\n-                    // the call was only for stopping the currently playing stream\n-                    return;\n-                } else {\n-                    try {\n-                        // we start a new continuous stream and store its handle\n-                        streamPlayer = new Player(audioStream);\n-                        playInThread(streamPlayer);\n-                    } catch (JavaLayerException e) {\n-                        LOGGER.error(\"An exception occurred while playing url audio stream : '{}'\", e.getMessage());\n-                    }\n-                    return;\n-                }\n-            } else {\n-                // we are playing some normal file (no url stream)\n-                try {\n-                    playInThread(new Player(audioStream));\n-                } catch (JavaLayerException e) {\n-                    LOGGER.error(\"An exception occurred while playing audio : '{}'\", e.getMessage());\n-                }\n-            }\n-        }\n-    }\n-\n-    private void playInThread(final Player player) {\n-        // run in new thread\n-        new Thread(() -> {\n-            try {\n-                player.play();\n-            } catch (Exception e) {\n-                LOGGER.error(\"An exception occurred while playing audio : '{}'\", e.getMessage());\n-            } finally {\n-                player.close();\n-            }\n-        }).start();\n-    }\n-\n-    protected synchronized void deactivate() {\n-        if (streamPlayer != null) {\n-            // stop playing streams on shutdown\n-            streamPlayer.close();\n-            streamPlayer = null;\n-        }\n-    }\n-\n-    @Override\n-    public Set<AudioFormat> getSupportedFormats() {\n-        return SUPPORTED_AUDIO_FORMATS;\n-    }\n-\n-    @Override\n-    public Set<Class<? extends AudioStream>> getSupportedStreams() {\n-        return SUPPORTED_AUDIO_STREAMS;\n-    }\n-\n-    @Override\n-    public String getId() {\n-        return \"enhancedjavasound\";\n-    }\n-\n-    @Override\n-    public String getLabel(Locale locale) {\n-        return \"System Speaker\";\n-    }\n-\n-    @Override\n-    public PercentType getVolume() throws IOException {\n-        if (!isMac) {\n-            final Float[] volumes = new Float[1];\n-            runVolumeCommand(new Closure() {\n-                @Override\n-                public void execute(Object input) {\n-                    FloatControl volumeControl = (FloatControl) input;\n-                    volumes[0] = volumeControl.getValue();\n-                }\n-            });\n-            if (volumes[0] != null) {\n-                return new PercentType(new BigDecimal(volumes[0] * 100f));\n-            } else {\n-                throw new IOException(\"Cannot determine master volume level\");\n-            }\n-        } else {\n-            // we use a cache of the value as the script execution is pretty slow\n-            if (macVolumeValue == null) {\n-                Process p = Runtime.getRuntime()\n-                        .exec(new String[] { \"osascript\", \"-e\", \"output volume of (get volume settings)\" });\n-                String value = IOUtils.toString(p.getInputStream()).trim();\n-                macVolumeValue = new PercentType(value);\n-            }\n-            return macVolumeValue;\n-        }\n-    }\n-\n-    @Override\n-    public void setVolume(final PercentType volume) throws IOException {\n-        if (volume.intValue() < 0 || volume.intValue() > 100) {\n-            throw new IllegalArgumentException(\"Volume value must be in the range [0,100]!\");\n-        }\n-        if (!isMac) {\n-            runVolumeCommand(new Closure() {\n-                @Override\n-                public void execute(Object input) {\n-                    FloatControl volumeControl = (FloatControl) input;\n-                    volumeControl.setValue(volume.floatValue() / 100f);\n-                }\n-            });\n-        } else {\n-            Runtime.getRuntime()\n-                    .exec(new String[] { \"osascript\", \"-e\", \"set volume output volume \" + volume.intValue() });\n-            macVolumeValue = volume;\n-        }\n-    }\n-\n-    private void runVolumeCommand(Closure closure) {\n-        Mixer.Info[] infos = AudioSystem.getMixerInfo();\n-        for (Mixer.Info info : infos) {\n-            Mixer mixer = AudioSystem.getMixer(info);\n-            if (mixer.isLineSupported(Port.Info.SPEAKER)) {\n-                Port port;\n-                try {\n-                    port = (Port) mixer.getLine(Port.Info.SPEAKER);\n-                    port.open();\n-                    if (port.isControlSupported(FloatControl.Type.VOLUME)) {\n-                        FloatControl volume = (FloatControl) port.getControl(FloatControl.Type.VOLUME);\n-                        closure.execute(volume);\n-                    }\n-                    port.close();\n-                } catch (LineUnavailableException e) {\n-                    LOGGER.error(\"Cannot access master volume control\", e);\n-                }\n-            }\n-        }\n-    }\n-}\n"}}, {"oid": "a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "url": "https://github.com/openhab/openhab-core/commit/a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-17T20:48:10Z", "type": "forcePushed"}, {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed", "url": "https://github.com/openhab/openhab-core/commit/bd80813db106152a8624c6b091fc54d36e48a4ed", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-17T21:27:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzODkwOA==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472138908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        TargetDataLine microphone;\n          \n          \n            \n                        microphone = AudioSystem.getTargetDataLine(format);\n          \n          \n            \n                        TargetDataLine microphone = AudioSystem.getTargetDataLine(format);", "author": "wborn", "createdAt": "2020-08-18T12:27:34Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.javasound;\n+\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.DataLine;\n+import javax.sound.sampled.TargetDataLine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioException;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioSource;\n+import org.openhab.core.audio.AudioStream;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an AudioSource from an input channel of the host.\n+ *\n+ * @author Kelly Davis - Initial contribution and API\n+ * @author Kai Kreuzer - Refactored and stabilized\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSource.class, immediate = true)\n+public class JavaSoundAudioSource implements AudioSource {\n+\n+    /**\n+     * Java Sound audio format\n+     */\n+    private final javax.sound.sampled.AudioFormat format = new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true,\n+            false);\n+\n+    /**\n+     * AudioFormat of the JavaSoundAudioSource\n+     */\n+    private final AudioFormat audioFormat = convertAudioFormat(format);\n+\n+    /**\n+     * TargetDataLine for the mic\n+     */\n+    private @Nullable TargetDataLine microphone;\n+\n+    /**\n+     * Constructs a JavaSoundAudioSource\n+     */\n+    public JavaSoundAudioSource() {\n+    }\n+\n+    private TargetDataLine initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n+        try {\n+            TargetDataLine microphone;\n+            microphone = AudioSystem.getTargetDataLine(format);", "originalCommit": "bd80813db106152a8624c6b091fc54d36e48a4ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc0ecaef6645ae747ce13c036b2e6a98967e98c4", "chunk": "diff --git a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java\nindex b0e633f84..0bc0382e9 100644\n--- a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java\n+++ b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java\n\n@@ -62,8 +62,7 @@ public class JavaSoundAudioSource implements AudioSource {\n \n     private TargetDataLine initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n         try {\n-            TargetDataLine microphone;\n-            microphone = AudioSystem.getTargetDataLine(format);\n+            TargetDataLine microphone = AudioSystem.getTargetDataLine(format);\n \n             DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);\n             microphone = (TargetDataLine) AudioSystem.getLine(info);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTI2OQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472139269", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String PLAY_URL_TOPIC = \"smarthome/webaudio/playurl\";\n          \n          \n            \n                private static final String PLAY_URL_TOPIC = \"openhab/webaudio/playurl\";", "author": "wborn", "createdAt": "2020-08-18T12:28:16Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.AbstractEventFactory;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an {@link EventFactory} for creating web audio events.\n+ * The only currently supported event type is {@link PlayURLEvent}.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ */\n+@NonNullByDefault\n+@Component(service = EventFactory.class, immediate = true)\n+public class WebAudioEventFactory extends AbstractEventFactory {\n+\n+    private static final String PLAY_URL_TOPIC = \"smarthome/webaudio/playurl\";", "originalCommit": "bd80813db106152a8624c6b091fc54d36e48a4ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc0ecaef6645ae747ce13c036b2e6a98967e98c4", "chunk": "diff --git a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java\nindex 6efc15091..773897b9e 100644\n--- a/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java\n+++ b/bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java\n\n@@ -31,7 +31,7 @@ import org.osgi.service.component.annotations.Component;\n @Component(service = EventFactory.class, immediate = true)\n public class WebAudioEventFactory extends AbstractEventFactory {\n \n-    private static final String PLAY_URL_TOPIC = \"smarthome/webaudio/playurl\";\n+    private static final String PLAY_URL_TOPIC = \"openhab/webaudio/playurl\";\n \n     /**\n      * Constructs a new WebAudioEventFactory.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MjE5MQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472142191", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> audioConfig = new Hashtable<>();\n          \n          \n            \n                    audioConfig.put(\"defaultSink\", sink.getId());\n          \n          \n            \n                    Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());", "author": "wborn", "createdAt": "2020-08-18T12:33:31Z", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,19 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n+        ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n+        Dictionary<String, Object> audioConfig = new Hashtable<>();\n+        audioConfig.put(\"defaultSink\", sink.getId());", "originalCommit": "bd80813db106152a8624c6b091fc54d36e48a4ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2905c58d9fb710ea31cf6b30364a9c8bd569ad55", "chunk": "diff --git a/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java b/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\nindex b583d56ce..fd2d83ac2 100644\n--- a/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\n+++ b/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\n\n@@ -68,10 +70,15 @@ public class VoiceManagerImplTest extends JavaOSGiTest {\n         registerService(voice);\n \n         ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n+\n+        audioManager = getService(AudioManager.class);\n+        assertNotNull(audioManager);\n+\n         Dictionary<String, Object> audioConfig = new Hashtable<>();\n         audioConfig.put(\"defaultSink\", sink.getId());\n-        Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\");\n+        Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\", null);\n         configuration.update(audioConfig);\n+        configuration.update();\n \n         voiceManager = getService(VoiceManager.class, VoiceManagerImpl.class);\n         assertNotNull(voiceManager);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MjM5Mw==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472142393", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> voiceConfig = new Hashtable<>();\n          \n          \n            \n                    voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n          \n          \n            \n                    Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());", "author": "wborn", "createdAt": "2020-08-18T12:33:51Z", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,19 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n+        ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n+        Dictionary<String, Object> audioConfig = new Hashtable<>();\n+        audioConfig.put(\"defaultSink\", sink.getId());\n+        Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\");\n+        configuration.update(audioConfig);\n+\n+        voiceManager = getService(VoiceManager.class, VoiceManagerImpl.class);\n+        assertNotNull(voiceManager);\n+\n         Dictionary<String, Object> voiceConfig = new Hashtable<>();\n         voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());", "originalCommit": "bd80813db106152a8624c6b091fc54d36e48a4ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2905c58d9fb710ea31cf6b30364a9c8bd569ad55", "chunk": "diff --git a/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java b/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\nindex b583d56ce..fd2d83ac2 100644\n--- a/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\n+++ b/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\n\n@@ -68,10 +70,15 @@ public class VoiceManagerImplTest extends JavaOSGiTest {\n         registerService(voice);\n \n         ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n+\n+        audioManager = getService(AudioManager.class);\n+        assertNotNull(audioManager);\n+\n         Dictionary<String, Object> audioConfig = new Hashtable<>();\n         audioConfig.put(\"defaultSink\", sink.getId());\n-        Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\");\n+        Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\", null);\n         configuration.update(audioConfig);\n+        configuration.update();\n \n         voiceManager = getService(VoiceManager.class, VoiceManagerImpl.class);\n         assertNotNull(voiceManager);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMzM1MQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472523351", "bodyText": "Sorry, the previous suggestion wasn't good since the IDE suggested Map.of  which is an interface implemented by Hashtable, so let's revert these:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());\n          \n          \n            \n                    Dictionary<String, Object> audioConfig = new Hashtable<>();\n          \n          \n            \n                    audioConfig.put(\"defaultSink\", sink.getId());", "author": "wborn", "createdAt": "2020-08-18T22:14:24Z", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,17 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n-        Dictionary<String, Object> voiceConfig = new Hashtable<>();\n-        voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n         ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n-        Configuration configuration = configAdmin.getConfiguration(VoiceManagerImpl.CONFIGURATION_PID);\n-        configuration.update(voiceConfig);\n+        Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());", "originalCommit": "eee0aa6485143d2c61195f1bbb219d77c72c23ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc0ecaef6645ae747ce13c036b2e6a98967e98c4", "chunk": "diff --git a/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java b/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\nindex 69a796093..b583d56ce 100644\n--- a/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\n+++ b/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\n\n@@ -68,14 +68,16 @@ public class VoiceManagerImplTest extends JavaOSGiTest {\n         registerService(voice);\n \n         ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n-        Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());\n+        Dictionary<String, Object> audioConfig = new Hashtable<>();\n+        audioConfig.put(\"defaultSink\", sink.getId());\n         Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\");\n         configuration.update(audioConfig);\n \n         voiceManager = getService(VoiceManager.class, VoiceManagerImpl.class);\n         assertNotNull(voiceManager);\n \n-        Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());\n+        Dictionary<String, Object> voiceConfig = new Hashtable<>();\n+        voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n         configuration = configAdmin.getConfiguration(VoiceManagerImpl.CONFIGURATION_PID);\n         configuration.update(voiceConfig);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMzUxNg==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472523516", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());\n          \n          \n            \n                    Dictionary<String, Object> voiceConfig = new Hashtable<>();\n          \n          \n            \n                    voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());", "author": "wborn", "createdAt": "2020-08-18T22:14:49Z", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,17 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n-        Dictionary<String, Object> voiceConfig = new Hashtable<>();\n-        voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n         ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n-        Configuration configuration = configAdmin.getConfiguration(VoiceManagerImpl.CONFIGURATION_PID);\n-        configuration.update(voiceConfig);\n+        Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());\n+        Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\");\n+        configuration.update(audioConfig);\n \n-        audioManager = new AudioManagerStub();\n-        registerService(audioManager);\n+        voiceManager = getService(VoiceManager.class, VoiceManagerImpl.class);\n+        assertNotNull(voiceManager);\n+\n+        Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());", "originalCommit": "eee0aa6485143d2c61195f1bbb219d77c72c23ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc0ecaef6645ae747ce13c036b2e6a98967e98c4", "chunk": "diff --git a/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java b/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\nindex 69a796093..b583d56ce 100644\n--- a/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\n+++ b/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java\n\n@@ -68,14 +68,16 @@ public class VoiceManagerImplTest extends JavaOSGiTest {\n         registerService(voice);\n \n         ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n-        Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());\n+        Dictionary<String, Object> audioConfig = new Hashtable<>();\n+        audioConfig.put(\"defaultSink\", sink.getId());\n         Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\");\n         configuration.update(audioConfig);\n \n         voiceManager = getService(VoiceManager.class, VoiceManagerImpl.class);\n         assertNotNull(voiceManager);\n \n-        Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());\n+        Dictionary<String, Object> voiceConfig = new Hashtable<>();\n+        voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n         configuration = configAdmin.getConfiguration(VoiceManagerImpl.CONFIGURATION_PID);\n         configuration.update(voiceConfig);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0MTA3Ng==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472541076", "bodyText": "It seems the resolution issues can be resolved by removing this internal import. After that the tests run again but still fail.", "author": "wborn", "createdAt": "2020-08-18T23:05:14Z", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/voiceconsolecommandextension/VoiceConsoleCommandExtensionTest.java", "diffHunk": "@@ -16,10 +16,10 @@\n \n import org.junit.jupiter.api.BeforeEach;\n import org.openhab.core.audio.AudioManager;\n+import org.openhab.core.audio.internal.AudioManagerImpl;", "originalCommit": "eee0aa6485143d2c61195f1bbb219d77c72c23ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc0ecaef6645ae747ce13c036b2e6a98967e98c4", "chunk": "diff --git a/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/voiceconsolecommandextension/VoiceConsoleCommandExtensionTest.java b/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/voiceconsolecommandextension/VoiceConsoleCommandExtensionTest.java\nindex d5cc6e406..f59f337c9 100644\n--- a/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/voiceconsolecommandextension/VoiceConsoleCommandExtensionTest.java\n+++ b/itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/voiceconsolecommandextension/VoiceConsoleCommandExtensionTest.java\n\n@@ -16,7 +16,6 @@ import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.openhab.core.audio.AudioManager;\n-import org.openhab.core.audio.internal.AudioManagerImpl;\n import org.openhab.core.io.console.extensions.ConsoleCommandExtension;\n import org.openhab.core.test.java.JavaOSGiTest;\n import org.openhab.core.voice.VoiceManager;\n"}}, {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed", "url": "https://github.com/openhab/openhab-core/commit/bd80813db106152a8624c6b091fc54d36e48a4ed", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-17T21:27:54Z", "type": "forcePushed"}, {"oid": "dc0ecaef6645ae747ce13c036b2e6a98967e98c4", "url": "https://github.com/openhab/openhab-core/commit/dc0ecaef6645ae747ce13c036b2e6a98967e98c4", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-21T08:41:19Z", "type": "forcePushed"}, {"oid": "2905c58d9fb710ea31cf6b30364a9c8bd569ad55", "url": "https://github.com/openhab/openhab-core/commit/2905c58d9fb710ea31cf6b30364a9c8bd569ad55", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-21T15:09:42Z", "type": "commit"}, {"oid": "2905c58d9fb710ea31cf6b30364a9c8bd569ad55", "url": "https://github.com/openhab/openhab-core/commit/2905c58d9fb710ea31cf6b30364a9c8bd569ad55", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-21T15:09:42Z", "type": "forcePushed"}, {"oid": "fd841f228dc1da8ed7db8a0d89e177b5e579a914", "url": "https://github.com/openhab/openhab-core/commit/fd841f228dc1da8ed7db8a0d89e177b5e579a914", "message": "removed unnecessary bnd property again\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-21T20:08:31Z", "type": "commit"}]}