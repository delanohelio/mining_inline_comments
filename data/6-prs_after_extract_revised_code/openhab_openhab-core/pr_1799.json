{"pr_number": 1799, "pr_title": "[automation] Create Nashorn script engines with the proper class loader", "pr_createdAt": "2020-11-05T17:48:14Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1799", "timeline": [{"oid": "58f2cb5cbd5b43ac3ddaea64283a99406c623350", "url": "https://github.com/openhab/openhab-core/commit/58f2cb5cbd5b43ac3ddaea64283a99406c623350", "message": "[automation] Create Nashorn script engines with the proper class loader\n\nThis should fix the issue reported here:\nhttps://community.openhab.org/t/openhab-3-0-milestone-2-discussion/107564/8\n\nwhere the Nashorn script engine would be created with the\ncurrent thread's class loader, causing JS code like this:\n```\nvar Log = Java.type(\"org.openhab.core.model.script.actions.Log\");\nLog.logError(\"Experiments\", \"This is an OH error log\");\nLog.logWarn(\"Experiments\", \"This is an OH warn log\");\nLog.logInfo(\"Experiments\", \"This is an OH info log\");\nLog.logDebug(\"Experiments\", \"This is an OH debug log\");\n```\nto run fine when the rule was triggered but fail to find the Log\nclass when run from the REST API's `/rest/rules/{ruleUID}/runnow`,\nbecause in that case the generic createScriptEngine implementation\nwould return script engines using the JAX-RS class loader as the\n\"app\" class loader.\n\nNote:\nWe also have an opportunity to restrict which classes are exposed\nto the script with a ClassFilter to a specific set:\nhttps://docs.oracle.com/javase/8/docs/jdk/api/nashorn/jdk/nashorn/api/scripting/NashornScriptEngineFactory.html#getScriptEngine-java.lang.String:A-java.lang.ClassLoader-jdk.nashorn.api.scripting.ClassFilter-\nThis could prove useful to mitigate code execution vulnerabilities,\nas the script code is modifiable remotely.\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-11-05T17:45:45Z", "type": "commit"}, {"oid": "d074e0fc5dfd5fbaeacad52a99f12fbf370d2dda", "url": "https://github.com/openhab/openhab-core/commit/d074e0fc5dfd5fbaeacad52a99f12fbf370d2dda", "message": "Use reflection to instantiate the NashornScriptEngineFactory\n\nThis will fail gracefully when the Nashorn engine is not present.\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-11-05T18:42:42Z", "type": "commit"}, {"oid": "5f8bfdd041ce6767f7fd030fc176c8169f9a5433", "url": "https://github.com/openhab/openhab-core/commit/5f8bfdd041ce6767f7fd030fc176c8169f9a5433", "message": "Get the NashornScriptEngineFactory from the ScriptEngineManager\n\nStill use reflection to call the getScriptEngine variant with\nthe explicit ClassLoader.\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-11-05T19:17:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyOTkzNA==", "url": "https://github.com/openhab/openhab-core/pull/1799#discussion_r518629934", "bodyText": "If the classloader that creates the component is also usable, you might be able to get rid of this reflection and reuse the same NashornScriptEngineFactory in createScriptEngine like I did with Groovy by just assigning the NashornScriptEngineFactory to a field.\nSee: GroovyScriptEngineFactory", "author": "wborn", "createdAt": "2020-11-06T09:35:37Z", "path": "bundles/org.openhab.core.automation.module.script/src/main/java/org/openhab/core/automation/module/script/internal/NashornScriptEngineFactory.java", "diffHunk": "@@ -72,4 +80,25 @@ public void scopeValues(ScriptEngine scriptEngine, Map<String, Object> scopeValu\n             logger.error(\"ScriptException while importing scope: {}\", ex.getMessage());\n         }\n     }\n+\n+    @Override\n+    public @Nullable ScriptEngine createScriptEngine(String scriptType) {\n+        try {\n+            for (javax.script.ScriptEngineFactory f : ENGINE_MANAGER.getEngineFactories()) {\n+                List<String> mimeTypes = f.getMimeTypes();\n+                List<String> extensions = f.getExtensions();\n+\n+                if (mimeTypes.contains(scriptType) || extensions.contains(scriptType)) {\n+                    Method method = f.getClass().getMethod(\"getScriptEngine\", ClassLoader.class);\n+                    return (ScriptEngine) method.invoke(f, NashornScriptEngineFactory.class.getClassLoader());", "originalCommit": "5f8bfdd041ce6767f7fd030fc176c8169f9a5433", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0ODc0Mw==", "url": "https://github.com/openhab/openhab-core/pull/1799#discussion_r518748743", "bodyText": "That's what I did initially, but I got resolution failures (https://ci.openhab.org/job/PR-openHAB-Core/2682/console):\nmissing requirement [org.openhab.core.automation.module.script/3.0.0.202011051754] osgi.wiring.package; filter:=\"(osgi.wiring.package=jdk.nashorn.api.scripting)\"]]\nand I didn't know how to solve them \ud83d\ude1e", "author": "ghys", "createdAt": "2020-11-06T13:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyOTkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNDE2Ng==", "url": "https://github.com/openhab/openhab-core/pull/1799#discussion_r523424166", "bodyText": "It's probably because it is considered to be an internal JDK package and it may not be available in each JVM implementation. Since it is also deprecated it's probably best not to depend on it also because Nashorn has been removed since Java 15.", "author": "wborn", "createdAt": "2020-11-14T14:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyOTkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "7926c623788304ff54138fad389b0219a0d659fc", "chunk": "diff --git a/bundles/org.openhab.core.automation.module.script/src/main/java/org/openhab/core/automation/module/script/internal/NashornScriptEngineFactory.java b/bundles/org.openhab.core.automation.module.script/src/main/java/org/openhab/core/automation/module/script/internal/NashornScriptEngineFactory.java\nindex d87e4b87b..2c709e6c8 100644\n--- a/bundles/org.openhab.core.automation.module.script/src/main/java/org/openhab/core/automation/module/script/internal/NashornScriptEngineFactory.java\n+++ b/bundles/org.openhab.core.automation.module.script/src/main/java/org/openhab/core/automation/module/script/internal/NashornScriptEngineFactory.java\n\n@@ -83,22 +77,10 @@ public class NashornScriptEngineFactory extends AbstractScriptEngineFactory {\n \n     @Override\n     public @Nullable ScriptEngine createScriptEngine(String scriptType) {\n-        try {\n-            for (javax.script.ScriptEngineFactory f : ENGINE_MANAGER.getEngineFactories()) {\n-                List<String> mimeTypes = f.getMimeTypes();\n-                List<String> extensions = f.getExtensions();\n-\n-                if (mimeTypes.contains(scriptType) || extensions.contains(scriptType)) {\n-                    Method method = f.getClass().getMethod(\"getScriptEngine\", ClassLoader.class);\n-                    return (ScriptEngine) method.invoke(f, NashornScriptEngineFactory.class.getClassLoader());\n-                }\n-            }\n-\n-            return null;\n-        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException\n-                | SecurityException e) {\n-            logger.error(\"Unable to create Nashorn script engine\", e);\n-            return null;\n-        }\n+        ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();\n+        Thread.currentThread().setContextClassLoader(NashornScriptEngineFactory.class.getClassLoader());\n+        ScriptEngine scriptEngine = super.createScriptEngine(scriptType);\n+        Thread.currentThread().setContextClassLoader(originalClassLoader);\n+        return scriptEngine;\n     }\n }\n"}}, {"oid": "7926c623788304ff54138fad389b0219a0d659fc", "url": "https://github.com/openhab/openhab-core/commit/7926c623788304ff54138fad389b0219a0d659fc", "message": "Replace reflection logic with a temporary change of the context class loader\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-11-13T11:44:12Z", "type": "commit"}]}