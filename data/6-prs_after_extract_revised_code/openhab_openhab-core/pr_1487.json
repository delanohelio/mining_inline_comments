{"pr_number": 1487, "pr_title": "Use constructor injection and update null annotations", "pr_createdAt": "2020-05-20T10:36:00Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1487", "timeline": [{"oid": "1271f1925c63c69c9886c281b3866cb03911b3f8", "url": "https://github.com/openhab/openhab-core/commit/1271f1925c63c69c9886c281b3866cb03911b3f8", "message": "Use constructor injection and update null annotations\n\nSigned-off-by: Wouter Born <github@maindrain.net>", "committedDate": "2020-05-20T07:49:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNzEwNQ==", "url": "https://github.com/openhab/openhab-core/pull/1487#discussion_r428037105", "bodyText": "Don't you want to call them mock here?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @Mock HttpContext httpContext;\n          \n          \n            \n                private @Mock HttpContext httpContextMock;", "author": "cweitkamp", "createdAt": "2020-05-20T14:02:15Z", "path": "bundles/org.openhab.core.ui.icon/src/test/java/org/openhab/core/ui/icon/internal/IconServletTest.java", "diffHunk": "@@ -74,6 +76,9 @@ public void reset() {\n     private IconServlet servlet;\n     private ByteArrayServletOutputStream responseOutputStream = new ByteArrayServletOutputStream();\n \n+    private @Mock HttpContext httpContext;", "originalCommit": "1271f1925c63c69c9886c281b3866cb03911b3f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MjQyOA==", "url": "https://github.com/openhab/openhab-core/pull/1487#discussion_r428062428", "bodyText": "Good catch, I'll update them!", "author": "wborn", "createdAt": "2020-05-20T14:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNzEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "13801fed0984df8da25314477c769e3f40225c22", "chunk": "diff --git a/bundles/org.openhab.core.ui.icon/src/test/java/org/openhab/core/ui/icon/internal/IconServletTest.java b/bundles/org.openhab.core.ui.icon/src/test/java/org/openhab/core/ui/icon/internal/IconServletTest.java\nindex f0b829368..facb9a74d 100644\n--- a/bundles/org.openhab.core.ui.icon/src/test/java/org/openhab/core/ui/icon/internal/IconServletTest.java\n+++ b/bundles/org.openhab.core.ui.icon/src/test/java/org/openhab/core/ui/icon/internal/IconServletTest.java\n\n@@ -76,236 +76,236 @@ public class IconServletTest {\n     private IconServlet servlet;\n     private ByteArrayServletOutputStream responseOutputStream = new ByteArrayServletOutputStream();\n \n-    private @Mock HttpContext httpContext;\n-    private @Mock HttpService httpService;\n+    private @Mock HttpContext httpContextMock;\n+    private @Mock HttpService httpServiceMock;\n \n-    private @Mock HttpServletRequest request;\n-    private @Mock HttpServletResponse response;\n+    private @Mock HttpServletRequest requestMock;\n+    private @Mock HttpServletResponse responseMock;\n \n-    private @Mock IconProvider provider1;\n-    private @Mock IconProvider provider2;\n+    private @Mock IconProvider provider1Mock;\n+    private @Mock IconProvider provider2Mock;\n \n     public @Rule MockitoRule mockitoRule = MockitoJUnit.rule();\n \n     @Before\n     public void before() throws IOException {\n-        servlet = new IconServlet(httpService, httpContext);\n+        servlet = new IconServlet(httpServiceMock, httpContextMock);\n         responseOutputStream.reset();\n     }\n \n     @Test\n     public void testOldUrlStyle() throws ServletException, IOException {\n-        when(request.getRequestURI()).thenReturn(\"/y-34.png\");\n+        when(requestMock.getRequestURI()).thenReturn(\"/y-34.png\");\n \n-        when(response.getOutputStream()).thenReturn(responseOutputStream);\n+        when(responseMock.getOutputStream()).thenReturn(responseOutputStream);\n \n-        when(provider1.hasIcon(\"y\", \"classic\", Format.PNG)).thenReturn(0);\n-        when(provider1.getIcon(\"y\", \"classic\", \"34\", Format.PNG))\n+        when(provider1Mock.hasIcon(\"y\", \"classic\", Format.PNG)).thenReturn(0);\n+        when(provider1Mock.getIcon(\"y\", \"classic\", \"34\", Format.PNG))\n                 .thenReturn(new ByteArrayInputStream(\"provider 1 icon: y classic 34 png\".getBytes()));\n \n-        servlet.addIconProvider(provider1);\n-        servlet.doGet(request, response);\n+        servlet.addIconProvider(provider1Mock);\n+        servlet.doGet(requestMock, responseMock);\n \n         assertEquals(\"provider 1 icon: y classic 34 png\", responseOutputStream.getOutput());\n-        verify(response, never()).sendError(anyInt());\n+        verify(responseMock, never()).sendError(anyInt());\n     }\n \n     @Test\n     public void testPriority() throws ServletException, IOException {\n-        when(request.getRequestURI()).thenReturn(\"/x\");\n-        when(request.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n-        when(request.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n-        when(request.getParameter(PARAM_STATE)).thenReturn(\"34\");\n+        when(requestMock.getRequestURI()).thenReturn(\"/x\");\n+        when(requestMock.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n+        when(requestMock.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n+        when(requestMock.getParameter(PARAM_STATE)).thenReturn(\"34\");\n \n-        when(response.getOutputStream()).thenReturn(responseOutputStream);\n+        when(responseMock.getOutputStream()).thenReturn(responseOutputStream);\n \n-        when(provider1.hasIcon(\"x\", \"test\", Format.SVG)).thenReturn(0);\n-        when(provider1.getIcon(\"x\", \"test\", \"34\", Format.SVG))\n+        when(provider1Mock.hasIcon(\"x\", \"test\", Format.SVG)).thenReturn(0);\n+        when(provider1Mock.getIcon(\"x\", \"test\", \"34\", Format.SVG))\n                 .thenReturn(new ByteArrayInputStream(\"provider 1 icon: x test 34 svg\".getBytes()));\n \n-        servlet.addIconProvider(provider1);\n-        servlet.doGet(request, response);\n+        servlet.addIconProvider(provider1Mock);\n+        servlet.doGet(requestMock, responseMock);\n \n         assertEquals(\"provider 1 icon: x test 34 svg\", responseOutputStream.getOutput());\n-        verify(response, never()).sendError(anyInt());\n+        verify(responseMock, never()).sendError(anyInt());\n \n         responseOutputStream.reset();\n \n-        when(provider2.hasIcon(\"x\", \"test\", Format.SVG)).thenReturn(1);\n-        when(provider2.getIcon(\"x\", \"test\", \"34\", Format.SVG))\n+        when(provider2Mock.hasIcon(\"x\", \"test\", Format.SVG)).thenReturn(1);\n+        when(provider2Mock.getIcon(\"x\", \"test\", \"34\", Format.SVG))\n                 .thenReturn(new ByteArrayInputStream(\"provider 2 icon: x test 34 svg\".getBytes()));\n \n-        servlet.addIconProvider(provider2);\n-        servlet.doGet(request, response);\n+        servlet.addIconProvider(provider2Mock);\n+        servlet.doGet(requestMock, responseMock);\n \n         assertEquals(\"provider 2 icon: x test 34 svg\", responseOutputStream.getOutput());\n-        verify(response, never()).sendError(anyInt());\n+        verify(responseMock, never()).sendError(anyInt());\n     }\n \n     @Test\n     public void testMissingIcon() throws ServletException, IOException {\n-        when(request.getRequestURI()).thenReturn(\"/icon/missing_for_test.png\");\n+        when(requestMock.getRequestURI()).thenReturn(\"/icon/missing_for_test.png\");\n \n-        when(provider1.hasIcon(anyString(), anyString(), isA(Format.class))).thenReturn(null);\n+        when(provider1Mock.hasIcon(anyString(), anyString(), isA(Format.class))).thenReturn(null);\n \n-        servlet.addIconProvider(provider1);\n-        servlet.doGet(request, response);\n+        servlet.addIconProvider(provider1Mock);\n+        servlet.doGet(requestMock, responseMock);\n \n         assertEquals(\"\", responseOutputStream.getOutput());\n-        verify(response).sendError(404);\n+        verify(responseMock).sendError(404);\n     }\n \n     @Test\n     public void testAnyFormatFalse() throws ServletException, IOException {\n-        when(request.getRequestURI()).thenReturn(\"/z\");\n-        when(request.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n-        when(request.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"false\");\n-        when(request.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n-        when(request.getParameter(PARAM_STATE)).thenReturn(\"34\");\n+        when(requestMock.getRequestURI()).thenReturn(\"/z\");\n+        when(requestMock.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n+        when(requestMock.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"false\");\n+        when(requestMock.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n+        when(requestMock.getParameter(PARAM_STATE)).thenReturn(\"34\");\n \n-        when(response.getOutputStream()).thenReturn(responseOutputStream);\n+        when(responseMock.getOutputStream()).thenReturn(responseOutputStream);\n \n-        when(provider1.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(0);\n-        when(provider1.getIcon(\"z\", \"test\", \"34\", Format.SVG))\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(0);\n+        when(provider1Mock.getIcon(\"z\", \"test\", \"34\", Format.SVG))\n                 .thenReturn(new ByteArrayInputStream(\"provider 1 icon: z test 34 svg\".getBytes()));\n \n-        servlet.addIconProvider(provider1);\n-        servlet.doGet(request, response);\n+        servlet.addIconProvider(provider1Mock);\n+        servlet.doGet(requestMock, responseMock);\n \n         assertEquals(\"provider 1 icon: z test 34 svg\", responseOutputStream.getOutput());\n-        verify(response, never()).sendError(anyInt());\n-        verify(provider1, never()).hasIcon(\"z\", \"test\", Format.PNG);\n+        verify(responseMock, never()).sendError(anyInt());\n+        verify(provider1Mock, never()).hasIcon(\"z\", \"test\", Format.PNG);\n     }\n \n     @Test\n     public void testAnyFormatSameProviders() throws ServletException, IOException {\n-        when(request.getRequestURI()).thenReturn(\"/z\");\n-        when(request.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n-        when(request.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"true\");\n-        when(request.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n-        when(request.getParameter(PARAM_STATE)).thenReturn(\"34\");\n+        when(requestMock.getRequestURI()).thenReturn(\"/z\");\n+        when(requestMock.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n+        when(requestMock.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"true\");\n+        when(requestMock.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n+        when(requestMock.getParameter(PARAM_STATE)).thenReturn(\"34\");\n \n-        when(response.getOutputStream()).thenReturn(responseOutputStream);\n+        when(responseMock.getOutputStream()).thenReturn(responseOutputStream);\n \n-        when(provider1.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(0);\n-        when(provider1.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(0);\n-        when(provider1.getIcon(\"z\", \"test\", \"34\", Format.SVG))\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(0);\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(0);\n+        when(provider1Mock.getIcon(\"z\", \"test\", \"34\", Format.SVG))\n                 .thenReturn(new ByteArrayInputStream(\"provider 1 icon: z test 34 svg\".getBytes()));\n \n-        servlet.addIconProvider(provider1);\n-        servlet.doGet(request, response);\n+        servlet.addIconProvider(provider1Mock);\n+        servlet.doGet(requestMock, responseMock);\n \n         assertEquals(\"provider 1 icon: z test 34 svg\", responseOutputStream.getOutput());\n-        verify(response, never()).sendError(anyInt());\n-        verify(provider1, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n-        verify(provider1, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n+        verify(responseMock, never()).sendError(anyInt());\n+        verify(provider1Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n+        verify(provider1Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n     }\n \n     @Test\n     public void testAnyFormatHigherPriorityOtherFormat() throws ServletException, IOException {\n-        when(request.getRequestURI()).thenReturn(\"/z\");\n-        when(request.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n-        when(request.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"true\");\n-        when(request.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n-        when(request.getParameter(PARAM_STATE)).thenReturn(\"34\");\n+        when(requestMock.getRequestURI()).thenReturn(\"/z\");\n+        when(requestMock.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n+        when(requestMock.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"true\");\n+        when(requestMock.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n+        when(requestMock.getParameter(PARAM_STATE)).thenReturn(\"34\");\n \n-        when(response.getOutputStream()).thenReturn(responseOutputStream);\n+        when(responseMock.getOutputStream()).thenReturn(responseOutputStream);\n \n-        when(provider1.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(0);\n-        when(provider1.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(0);\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(0);\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(0);\n \n-        when(provider2.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(1);\n-        when(provider2.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(null);\n-        when(provider2.getIcon(\"z\", \"test\", \"34\", Format.PNG))\n+        when(provider2Mock.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(1);\n+        when(provider2Mock.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(null);\n+        when(provider2Mock.getIcon(\"z\", \"test\", \"34\", Format.PNG))\n                 .thenReturn(new ByteArrayInputStream(\"provider 2 icon: z test 34 png\".getBytes()));\n \n-        servlet.addIconProvider(provider1);\n-        servlet.addIconProvider(provider2);\n-        servlet.doGet(request, response);\n+        servlet.addIconProvider(provider1Mock);\n+        servlet.addIconProvider(provider2Mock);\n+        servlet.doGet(requestMock, responseMock);\n \n         assertEquals(\"provider 2 icon: z test 34 png\", responseOutputStream.getOutput());\n-        verify(response, never()).sendError(anyInt());\n-        verify(provider1, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n-        verify(provider1, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n-        verify(provider2, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n-        verify(provider2, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n+        verify(responseMock, never()).sendError(anyInt());\n+        verify(provider1Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n+        verify(provider1Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n+        verify(provider2Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n+        verify(provider2Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n     }\n \n     @Test\n     public void testAnyFormatHigherPriorityRequestedFormat() throws ServletException, IOException {\n-        when(request.getRequestURI()).thenReturn(\"/z\");\n-        when(request.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n-        when(request.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"true\");\n-        when(request.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n-        when(request.getParameter(PARAM_STATE)).thenReturn(\"34\");\n+        when(requestMock.getRequestURI()).thenReturn(\"/z\");\n+        when(requestMock.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n+        when(requestMock.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"true\");\n+        when(requestMock.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n+        when(requestMock.getParameter(PARAM_STATE)).thenReturn(\"34\");\n \n-        when(response.getOutputStream()).thenReturn(responseOutputStream);\n+        when(responseMock.getOutputStream()).thenReturn(responseOutputStream);\n \n-        when(provider1.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(0);\n-        when(provider1.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(0);\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(0);\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(0);\n \n-        when(provider2.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(null);\n-        when(provider2.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(1);\n-        when(provider2.getIcon(\"z\", \"test\", \"34\", Format.SVG))\n+        when(provider2Mock.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(null);\n+        when(provider2Mock.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(1);\n+        when(provider2Mock.getIcon(\"z\", \"test\", \"34\", Format.SVG))\n                 .thenReturn(new ByteArrayInputStream(\"provider 2 icon: z test 34 svg\".getBytes()));\n \n-        servlet.addIconProvider(provider1);\n-        servlet.addIconProvider(provider2);\n-        servlet.doGet(request, response);\n+        servlet.addIconProvider(provider1Mock);\n+        servlet.addIconProvider(provider2Mock);\n+        servlet.doGet(requestMock, responseMock);\n \n         assertEquals(\"provider 2 icon: z test 34 svg\", responseOutputStream.getOutput());\n-        verify(response, never()).sendError(anyInt());\n-        verify(provider1, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n-        verify(provider1, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n-        verify(provider2, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n-        verify(provider2, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n+        verify(responseMock, never()).sendError(anyInt());\n+        verify(provider1Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n+        verify(provider1Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n+        verify(provider2Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n+        verify(provider2Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n     }\n \n     @Test\n     public void testAnyFormatNoOtherFormat() throws ServletException, IOException {\n-        when(request.getRequestURI()).thenReturn(\"/z\");\n-        when(request.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n-        when(request.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"true\");\n-        when(request.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n-        when(request.getParameter(PARAM_STATE)).thenReturn(\"34\");\n+        when(requestMock.getRequestURI()).thenReturn(\"/z\");\n+        when(requestMock.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n+        when(requestMock.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"true\");\n+        when(requestMock.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n+        when(requestMock.getParameter(PARAM_STATE)).thenReturn(\"34\");\n \n-        when(response.getOutputStream()).thenReturn(responseOutputStream);\n+        when(responseMock.getOutputStream()).thenReturn(responseOutputStream);\n \n-        when(provider1.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(null);\n-        when(provider1.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(0);\n-        when(provider1.getIcon(\"z\", \"test\", \"34\", Format.SVG))\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(null);\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(0);\n+        when(provider1Mock.getIcon(\"z\", \"test\", \"34\", Format.SVG))\n                 .thenReturn(new ByteArrayInputStream(\"provider 1 icon: z test 34 svg\".getBytes()));\n \n-        servlet.addIconProvider(provider1);\n-        servlet.doGet(request, response);\n+        servlet.addIconProvider(provider1Mock);\n+        servlet.doGet(requestMock, responseMock);\n \n         assertEquals(\"provider 1 icon: z test 34 svg\", responseOutputStream.getOutput());\n-        verify(response, never()).sendError(anyInt());\n-        verify(provider1, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n-        verify(provider1, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n+        verify(responseMock, never()).sendError(anyInt());\n+        verify(provider1Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n+        verify(provider1Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n     }\n \n     @Test\n     public void testAnyFormatNoRequestedFormat() throws ServletException, IOException {\n-        when(request.getRequestURI()).thenReturn(\"/z\");\n-        when(request.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n-        when(request.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"true\");\n-        when(request.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n-        when(request.getParameter(PARAM_STATE)).thenReturn(\"34\");\n+        when(requestMock.getRequestURI()).thenReturn(\"/z\");\n+        when(requestMock.getParameter(PARAM_FORMAT)).thenReturn(\"svg\");\n+        when(requestMock.getParameter(PARAM_ANY_FORMAT)).thenReturn(\"true\");\n+        when(requestMock.getParameter(PARAM_ICONSET)).thenReturn(\"test\");\n+        when(requestMock.getParameter(PARAM_STATE)).thenReturn(\"34\");\n \n-        when(response.getOutputStream()).thenReturn(responseOutputStream);\n+        when(responseMock.getOutputStream()).thenReturn(responseOutputStream);\n \n-        when(provider1.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(0);\n-        when(provider1.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(null);\n-        when(provider1.getIcon(\"z\", \"test\", \"34\", Format.PNG))\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.PNG)).thenReturn(0);\n+        when(provider1Mock.hasIcon(\"z\", \"test\", Format.SVG)).thenReturn(null);\n+        when(provider1Mock.getIcon(\"z\", \"test\", \"34\", Format.PNG))\n                 .thenReturn(new ByteArrayInputStream(\"provider 1 icon: z test 34 png\".getBytes()));\n \n-        servlet.addIconProvider(provider1);\n-        servlet.doGet(request, response);\n+        servlet.addIconProvider(provider1Mock);\n+        servlet.doGet(requestMock, responseMock);\n \n         assertEquals(\"provider 1 icon: z test 34 png\", responseOutputStream.getOutput());\n-        verify(response, never()).sendError(anyInt());\n-        verify(provider1, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n-        verify(provider1, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n+        verify(responseMock, never()).sendError(anyInt());\n+        verify(provider1Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.PNG);\n+        verify(provider1Mock, atLeastOnce()).hasIcon(\"z\", \"test\", Format.SVG);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MTc5MQ==", "url": "https://github.com/openhab/openhab-core/pull/1487#discussion_r428041791", "bodyText": "\ud83d\udc4d", "author": "cweitkamp", "createdAt": "2020-05-20T14:08:03Z", "path": "bundles/org.openhab.core.config.discovery/src/main/java/org/openhab/core/config/discovery/internal/DiscoveryServiceRegistryImpl.java", "diffHunk": "@@ -136,8 +135,6 @@ public void reduceNumberOfDiscoveryServices() {\n \n     private final Logger logger = LoggerFactory.getLogger(DiscoveryServiceRegistryImpl.class);\n \n-    private @NonNullByDefault({}) SafeCaller safeCaller;", "originalCommit": "1271f1925c63c69c9886c281b3866cb03911b3f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NTQ4NQ==", "url": "https://github.com/openhab/openhab-core/pull/1487#discussion_r428045485", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @Mock UsbSerialScanner usbSerialScanner;\n          \n          \n            \n                private @Mock UsbSerialScanner usbSerialScannerMock;", "author": "cweitkamp", "createdAt": "2020-05-20T14:12:37Z", "path": "itests/org.openhab.core.config.discovery.usbserial.linuxsysfs.tests/src/main/java/org/openhab/core/config/discovery/usbserial/linuxsysfs/internal/PollingUsbSerialScannerTest.java", "diffHunk": "@@ -37,22 +39,20 @@\n \n     private UsbSerialDeviceInformationGenerator usbDeviceInfoGenerator = new UsbSerialDeviceInformationGenerator();\n \n-    private UsbSerialScanner usbSerialScanner;\n     private PollingUsbSerialScanner pollingScanner;\n-    private UsbSerialDiscoveryListener discoveryListener;\n+    private @Mock UsbSerialDiscoveryListener discoveryListenerMock;\n+    private @Mock UsbSerialScanner usbSerialScanner;", "originalCommit": "1271f1925c63c69c9886c281b3866cb03911b3f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13801fed0984df8da25314477c769e3f40225c22", "chunk": "diff --git a/itests/org.openhab.core.config.discovery.usbserial.linuxsysfs.tests/src/main/java/org/openhab/core/config/discovery/usbserial/linuxsysfs/internal/PollingUsbSerialScannerTest.java b/itests/org.openhab.core.config.discovery.usbserial.linuxsysfs.tests/src/main/java/org/openhab/core/config/discovery/usbserial/linuxsysfs/internal/PollingUsbSerialScannerTest.java\nindex 16bb1df79..c8b1ebc3a 100644\n--- a/itests/org.openhab.core.config.discovery.usbserial.linuxsysfs.tests/src/main/java/org/openhab/core/config/discovery/usbserial/linuxsysfs/internal/PollingUsbSerialScannerTest.java\n+++ b/itests/org.openhab.core.config.discovery.usbserial.linuxsysfs.tests/src/main/java/org/openhab/core/config/discovery/usbserial/linuxsysfs/internal/PollingUsbSerialScannerTest.java\n\n@@ -41,7 +41,7 @@ public class PollingUsbSerialScannerTest {\n \n     private PollingUsbSerialScanner pollingScanner;\n     private @Mock UsbSerialDiscoveryListener discoveryListenerMock;\n-    private @Mock UsbSerialScanner usbSerialScanner;\n+    private @Mock UsbSerialScanner usbSerialScannerMock;\n \n     @Before\n     public void setup() {\n"}}, {"oid": "13801fed0984df8da25314477c769e3f40225c22", "url": "https://github.com/openhab/openhab-core/commit/13801fed0984df8da25314477c769e3f40225c22", "message": "Address review comments\n\nSigned-off-by: Wouter Born <github@maindrain.net>", "committedDate": "2020-05-20T14:44:25Z", "type": "commit"}]}