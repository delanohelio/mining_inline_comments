{"pr_number": 1509, "pr_title": "Added group and system triggers to automation component", "pr_createdAt": "2020-05-31T22:44:07Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1509", "timeline": [{"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1", "url": "https://github.com/openhab/openhab-core/commit/aa3595a470510f8ce75b6b23dc4f872db038ddb1", "message": "Added group and system triggers to automation component\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-05-31T22:37:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NjU4NA==", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433446584", "bodyText": "Should we omit using the annotation @SupressWarnings by using the wildcard character (?)?", "author": "cweitkamp", "createdAt": "2020-06-01T19:37:22Z", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemCommandEvent;\n+import org.openhab.core.types.Command;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if a member of an item group receives a command.\n+ * The group name and command value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class GroupCommandTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GroupCommandTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final String command;\n+    private final String topic;\n+\n+    private final Set<String> types;\n+    private final BundleContext bundleContext;\n+\n+    public static final String MODULE_TYPE_ID = \"core.GroupCommandTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_COMMAND = \"command\";\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private ServiceRegistration eventSubscriberRegistration;", "originalCommit": "aa3595a470510f8ce75b6b23dc4f872db038ddb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "chunk": "diff --git a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\nindex 5b8e44634..8fc92696a 100644\n--- a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\n+++ b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\n\n@@ -19,7 +19,8 @@ import java.util.Hashtable;\n import java.util.Map;\n import java.util.Set;\n \n-import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.automation.Trigger;\n import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n import org.openhab.core.automation.handler.TriggerHandlerCallback;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NjgzNw==", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433446837", "bodyText": "Can you add nullness annotations on new classes and interfaces?", "author": "cweitkamp", "createdAt": "2020-06-01T19:37:52Z", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemCommandEvent;\n+import org.openhab.core.types.Command;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if a member of an item group receives a command.\n+ * The group name and command value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class GroupCommandTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {", "originalCommit": "aa3595a470510f8ce75b6b23dc4f872db038ddb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "chunk": "diff --git a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\nindex 5b8e44634..8fc92696a 100644\n--- a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\n+++ b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\n\n@@ -19,7 +19,8 @@ import java.util.Hashtable;\n import java.util.Map;\n import java.util.Set;\n \n-import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.automation.Trigger;\n import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n import org.openhab.core.automation.handler.TriggerHandlerCallback;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0ODkwMQ==", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433448901", "bodyText": "Is this local variable just for suppressing the null-warning on callback? If so you may want to cast it directly to TriggerHandlerCallback.\nAnd check for callback instanceof TriggerHandlerCallback.", "author": "cweitkamp", "createdAt": "2020-06-01T19:42:07Z", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemCommandEvent;\n+import org.openhab.core.types.Command;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if a member of an item group receives a command.\n+ * The group name and command value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class GroupCommandTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GroupCommandTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final String command;\n+    private final String topic;\n+\n+    private final Set<String> types;\n+    private final BundleContext bundleContext;\n+\n+    public static final String MODULE_TYPE_ID = \"core.GroupCommandTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_COMMAND = \"command\";\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private ServiceRegistration eventSubscriberRegistration;\n+    private ItemRegistry itemRegistry;\n+\n+    public GroupCommandTriggerHandler(Trigger module, BundleContext bundleContext) {\n+        super(module);\n+        this.groupName = (String) module.getConfiguration().get(CFG_GROUPNAME);\n+        this.command = (String) module.getConfiguration().get(CFG_COMMAND);\n+        this.types = Collections.singleton(ItemCommandEvent.TYPE);\n+        this.bundleContext = bundleContext;\n+        Dictionary<String, Object> properties = new Hashtable<>();\n+        this.topic = \"smarthome/items/\";\n+        properties.put(\"event.topics\", topic);\n+        eventSubscriberRegistration = this.bundleContext.registerService(EventSubscriber.class.getName(), this,\n+                properties);\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return types;\n+    }\n+\n+    @Override\n+    public EventFilter getEventFilter() {\n+        return this;\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        if (callback != null) {\n+            ModuleHandlerCallback cb = callback;", "originalCommit": "aa3595a470510f8ce75b6b23dc4f872db038ddb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "chunk": "diff --git a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\nindex 5b8e44634..8fc92696a 100644\n--- a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\n+++ b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\n\n@@ -19,7 +19,8 @@ import java.util.Hashtable;\n import java.util.Map;\n import java.util.Set;\n \n-import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.automation.Trigger;\n import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n import org.openhab.core.automation.handler.TriggerHandlerCallback;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MDQ2NA==", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433450464", "bodyText": "Avoid duplicate castings and assign it to a local variable instead.", "author": "cweitkamp", "createdAt": "2020-06-01T19:45:20Z", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemCommandEvent;\n+import org.openhab.core.types.Command;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if a member of an item group receives a command.\n+ * The group name and command value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class GroupCommandTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GroupCommandTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final String command;\n+    private final String topic;\n+\n+    private final Set<String> types;\n+    private final BundleContext bundleContext;\n+\n+    public static final String MODULE_TYPE_ID = \"core.GroupCommandTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_COMMAND = \"command\";\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private ServiceRegistration eventSubscriberRegistration;\n+    private ItemRegistry itemRegistry;\n+\n+    public GroupCommandTriggerHandler(Trigger module, BundleContext bundleContext) {\n+        super(module);\n+        this.groupName = (String) module.getConfiguration().get(CFG_GROUPNAME);\n+        this.command = (String) module.getConfiguration().get(CFG_COMMAND);\n+        this.types = Collections.singleton(ItemCommandEvent.TYPE);\n+        this.bundleContext = bundleContext;\n+        Dictionary<String, Object> properties = new Hashtable<>();\n+        this.topic = \"smarthome/items/\";\n+        properties.put(\"event.topics\", topic);\n+        eventSubscriberRegistration = this.bundleContext.registerService(EventSubscriber.class.getName(), this,\n+                properties);\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return types;\n+    }\n+\n+    @Override\n+    public EventFilter getEventFilter() {\n+        return this;\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        if (callback != null) {\n+            ModuleHandlerCallback cb = callback;\n+            logger.trace(\"Received Event: Source: {} Topic: {} Type: {}  Payload: {}\", event.getSource(),\n+                    event.getTopic(), event.getType(), event.getPayload());\n+            Map<String, Object> values = new HashMap<>();\n+            if (event instanceof ItemCommandEvent) {\n+                String itemName = ((ItemCommandEvent) event).getItemName();", "originalCommit": "aa3595a470510f8ce75b6b23dc4f872db038ddb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "chunk": "diff --git a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\nindex 5b8e44634..8fc92696a 100644\n--- a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\n+++ b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java\n\n@@ -19,7 +19,8 @@ import java.util.Hashtable;\n import java.util.Map;\n import java.util.Set;\n \n-import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.automation.Trigger;\n import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n import org.openhab.core.automation.handler.TriggerHandlerCallback;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MjMyNg==", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433452326", "bodyText": "Omit @SupressWarnings.", "author": "cweitkamp", "createdAt": "2020-06-01T19:49:16Z", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.GroupItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateEvent;\n+import org.openhab.core.types.State;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if state event of a member of an item group occurs.\n+ * The group name and state value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class GroupStateTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+    private final Logger logger = LoggerFactory.getLogger(GroupStateTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final String state;\n+    private final String previousState;\n+    private Set<String> types;\n+    private final BundleContext bundleContext;\n+    private ItemRegistry itemRegistry;\n+\n+    public static final String UPDATE_MODULE_TYPE_ID = \"core.GroupStateUpdateTrigger\";\n+    public static final String CHANGE_MODULE_TYPE_ID = \"core.GroupStateChangeTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_STATE = \"state\";\n+    private static final String CFG_PREVIOUS_STATE = \"previousState\";\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private ServiceRegistration eventSubscriberRegistration;", "originalCommit": "aa3595a470510f8ce75b6b23dc4f872db038ddb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "chunk": "diff --git a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java\nindex 4b589e727..9f3786b8c 100644\n--- a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java\n+++ b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java\n\n@@ -20,6 +20,8 @@ import java.util.Hashtable;\n import java.util.Map;\n import java.util.Set;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.automation.ModuleHandlerCallback;\n import org.openhab.core.automation.Trigger;\n import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NjU3MQ==", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433456571", "bodyText": "Please remove the @NonNull annotations rather add @NonNullByDefault on class level.", "author": "cweitkamp", "createdAt": "2020-06-01T19:58:02Z", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/SystemEventFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.events.system;\n+\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.AbstractEventFactory;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFactory;\n+import org.openhab.core.types.Type;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * Factory that creates system events.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@Component(immediate = true, service = EventFactory.class)\n+public class SystemEventFactory extends AbstractEventFactory {\n+\n+    static final String SYSTEM_STARTLEVEL_TOPIC = \"smarthome/system/startlevel\";\n+\n+    public SystemEventFactory() {\n+        super(Stream.of(StartlevelEvent.TYPE).collect(Collectors.toSet()));\n+    }\n+\n+    /**\n+     * Creates a trigger event from a {@link Type}.\n+     *\n+     * @param startlevel Startlevel of system\n+     * @return Created start level event.\n+     */\n+    public static StartlevelEvent createStartlevelEvent(Integer startlevel) {\n+        SystemEventPayloadBean bean = new SystemEventPayloadBean(startlevel);\n+        String payload = serializePayload(bean);\n+        return new StartlevelEvent(SYSTEM_STARTLEVEL_TOPIC, payload, null, startlevel);\n+    }\n+\n+    @Override\n+    protected @NonNull Event createEventByType(@NonNull String eventType, @NonNull String topic,", "originalCommit": "aa3595a470510f8ce75b6b23dc4f872db038ddb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "chunk": "diff --git a/bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/SystemEventFactory.java b/bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/SystemEventFactory.java\nindex 88ee3483d..d6a85d62f 100644\n--- a/bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/SystemEventFactory.java\n+++ b/bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/SystemEventFactory.java\n\n@@ -15,7 +15,7 @@ package org.openhab.core.events.system;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.events.AbstractEventFactory;\n import org.openhab.core.events.Event;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2NzMwNQ==", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433467305", "bodyText": "This part could be improved by moving it into the previous if-condition(s).", "author": "cweitkamp", "createdAt": "2020-06-01T20:20:26Z", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/SystemTriggerHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.events.system.StartlevelEvent;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a ModuleHandler implementation for Triggers which trigger the rule if a certain system event occurs.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SystemTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SystemTriggerHandler.class);\n+\n+    public static final String STARTLEVEL_MODULE_TYPE_ID = \"core.SystemStartlevelTrigger\";\n+    private static final String CFG_STARTLEVEL = \"startlevel\";\n+    private static final String OUT_STARTLEVEL = \"startlevel\";\n+\n+    private final Integer startlevel;\n+    private final Set<String> types;\n+    private final BundleContext bundleContext;\n+\n+    private ServiceRegistration<?> eventSubscriberRegistration;\n+\n+    public SystemTriggerHandler(Trigger module, BundleContext bundleContext) {\n+        super(module);\n+        this.startlevel = ((BigDecimal) module.getConfiguration().get(CFG_STARTLEVEL)).intValue();\n+        if (STARTLEVEL_MODULE_TYPE_ID.equals(module.getTypeUID())) {\n+            this.types = Collections.singleton(StartlevelEvent.TYPE);\n+        } else {\n+            logger.warn(\"Module type '{}' is not (yet) handled by this class.\", module.getTypeUID());\n+            throw new IllegalArgumentException(module.getTypeUID() + \" is no valid module type.\");\n+        }\n+        this.bundleContext = bundleContext;\n+        Dictionary<String, Object> properties = new Hashtable<>();\n+        properties.put(\"event.topics\", \"smarthome/system/*\");\n+        eventSubscriberRegistration = this.bundleContext.registerService(EventSubscriber.class.getName(), this,\n+                properties);\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return types;\n+    }\n+\n+    @Override\n+    public @Nullable EventFilter getEventFilter() {\n+        return this;\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        final ModuleHandlerCallback callback = this.callback;\n+        if (!(callback instanceof TriggerHandlerCallback)) {\n+            return;\n+        }\n+\n+        TriggerHandlerCallback thCallback = (TriggerHandlerCallback) callback;\n+        logger.trace(\"Received Event: Source: {} Topic: {} Type: {}  Payload: {}\", event.getSource(), event.getTopic(),\n+                event.getType(), event.getPayload());\n+        Map<String, Object> values = new HashMap<>();\n+        if (event instanceof StartlevelEvent && STARTLEVEL_MODULE_TYPE_ID.equals(module.getTypeUID())) {\n+            Integer sl = ((StartlevelEvent) event).getStartlevel();\n+            if (startlevel.equals(sl)) {\n+                values.put(OUT_STARTLEVEL, sl);\n+            }\n+        }\n+        if (!values.isEmpty()) {\n+            thCallback.triggered(module, values);", "originalCommit": "aa3595a470510f8ce75b6b23dc4f872db038ddb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "chunk": "diff --git a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/SystemTriggerHandler.java b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/SystemTriggerHandler.java\nindex e248a9514..7149d7459 100644\n--- a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/SystemTriggerHandler.java\n+++ b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/SystemTriggerHandler.java\n\n@@ -96,11 +96,9 @@ public class SystemTriggerHandler extends BaseTriggerModuleHandler implements Ev\n             Integer sl = ((StartlevelEvent) event).getStartlevel();\n             if (startlevel.equals(sl)) {\n                 values.put(OUT_STARTLEVEL, sl);\n+                thCallback.triggered(module, values);\n             }\n         }\n-        if (!values.isEmpty()) {\n-            thCallback.triggered(module, values);\n-        }\n     }\n \n     /**\n"}}, {"oid": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "url": "https://github.com/openhab/openhab-core/commit/8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-06-02T19:17:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MTg5Nw==", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434341897", "bodyText": "One more class for adding annotations.", "author": "cweitkamp", "createdAt": "2020-06-03T06:44:59Z", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/StartlevelEvent.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.events.system;\n+\n+import org.openhab.core.events.AbstractEvent;\n+\n+/**\n+ * {@link StartlevelEvent}s will be delivered through the openHAB event bus if the start level of the system has\n+ * changed.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class StartlevelEvent extends AbstractEvent {", "originalCommit": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f4b8fb4de0269ceece5948409c1d52b1ea49ef2", "chunk": "diff --git a/bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/StartlevelEvent.java b/bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/StartlevelEvent.java\nindex 8566babc5..ff139dd1e 100644\n--- a/bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/StartlevelEvent.java\n+++ b/bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/StartlevelEvent.java\n\n@@ -12,6 +12,8 @@\n  */\n package org.openhab.core.events.system;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.events.AbstractEvent;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MjUyNQ==", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434342525", "bodyText": "Avoid duplicate castings and assign it to a local variable instead.", "author": "cweitkamp", "createdAt": "2020-06-03T06:46:26Z", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.GroupItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateEvent;\n+import org.openhab.core.types.State;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if state event of a member of an item group occurs.\n+ * The group name and state value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GroupStateTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+    private final Logger logger = LoggerFactory.getLogger(GroupStateTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final @Nullable String state;\n+    private final String previousState;\n+    private Set<String> types;\n+    private final BundleContext bundleContext;\n+    private @Nullable ItemRegistry itemRegistry;\n+\n+    public static final String UPDATE_MODULE_TYPE_ID = \"core.GroupStateUpdateTrigger\";\n+    public static final String CHANGE_MODULE_TYPE_ID = \"core.GroupStateChangeTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_STATE = \"state\";\n+    private static final String CFG_PREVIOUS_STATE = \"previousState\";\n+\n+    private ServiceRegistration<?> eventSubscriberRegistration;\n+\n+    public GroupStateTriggerHandler(Trigger module, BundleContext bundleContext) {\n+        super(module);\n+        this.groupName = (String) module.getConfiguration().get(CFG_GROUPNAME);\n+        this.state = (String) module.getConfiguration().get(CFG_STATE);\n+        this.previousState = (String) module.getConfiguration().get(CFG_PREVIOUS_STATE);\n+        if (UPDATE_MODULE_TYPE_ID.equals(module.getTypeUID())) {\n+            this.types = Collections.singleton(ItemStateEvent.TYPE);\n+        } else {\n+            Set<String> set = new HashSet<>();\n+            set.add(ItemStateChangedEvent.TYPE);\n+            set.add(GroupItemStateChangedEvent.TYPE);\n+            this.types = Collections.unmodifiableSet(set);\n+        }\n+        this.bundleContext = bundleContext;\n+        Dictionary<String, Object> properties = new Hashtable<>();\n+        properties.put(\"event.topics\", \"smarthome/items/*\");\n+        eventSubscriberRegistration = this.bundleContext.registerService(EventSubscriber.class.getName(), this,\n+                properties);\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return types;\n+    }\n+\n+    @Override\n+    public @Nullable EventFilter getEventFilter() {\n+        return this;\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        if (callback != null) {\n+            ModuleHandlerCallback cb = callback;\n+            logger.trace(\"Received Event: Source: {} Topic: {} Type: {}  Payload: {}\", event.getSource(),\n+                    event.getTopic(), event.getType(), event.getPayload());\n+            Map<String, Object> values = new HashMap<>();\n+            if (event instanceof ItemStateEvent && UPDATE_MODULE_TYPE_ID.equals(module.getTypeUID())) {\n+                String itemName = ((ItemStateEvent) event).getItemName();", "originalCommit": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f4b8fb4de0269ceece5948409c1d52b1ea49ef2", "chunk": "diff --git a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java\nindex 9f3786b8c..548b288a2 100644\n--- a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java\n+++ b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java\n\n@@ -22,7 +22,6 @@ import java.util.Set;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n-import org.openhab.core.automation.ModuleHandlerCallback;\n import org.openhab.core.automation.Trigger;\n import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n import org.openhab.core.automation.handler.TriggerHandlerCallback;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MjU0NQ==", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434342545", "bodyText": "See #1509 (comment)", "author": "cweitkamp", "createdAt": "2020-06-03T06:46:29Z", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.GroupItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateEvent;\n+import org.openhab.core.types.State;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if state event of a member of an item group occurs.\n+ * The group name and state value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GroupStateTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+    private final Logger logger = LoggerFactory.getLogger(GroupStateTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final @Nullable String state;\n+    private final String previousState;\n+    private Set<String> types;\n+    private final BundleContext bundleContext;\n+    private @Nullable ItemRegistry itemRegistry;\n+\n+    public static final String UPDATE_MODULE_TYPE_ID = \"core.GroupStateUpdateTrigger\";\n+    public static final String CHANGE_MODULE_TYPE_ID = \"core.GroupStateChangeTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_STATE = \"state\";\n+    private static final String CFG_PREVIOUS_STATE = \"previousState\";\n+\n+    private ServiceRegistration<?> eventSubscriberRegistration;\n+\n+    public GroupStateTriggerHandler(Trigger module, BundleContext bundleContext) {\n+        super(module);\n+        this.groupName = (String) module.getConfiguration().get(CFG_GROUPNAME);\n+        this.state = (String) module.getConfiguration().get(CFG_STATE);\n+        this.previousState = (String) module.getConfiguration().get(CFG_PREVIOUS_STATE);\n+        if (UPDATE_MODULE_TYPE_ID.equals(module.getTypeUID())) {\n+            this.types = Collections.singleton(ItemStateEvent.TYPE);\n+        } else {\n+            Set<String> set = new HashSet<>();\n+            set.add(ItemStateChangedEvent.TYPE);\n+            set.add(GroupItemStateChangedEvent.TYPE);\n+            this.types = Collections.unmodifiableSet(set);\n+        }\n+        this.bundleContext = bundleContext;\n+        Dictionary<String, Object> properties = new Hashtable<>();\n+        properties.put(\"event.topics\", \"smarthome/items/*\");\n+        eventSubscriberRegistration = this.bundleContext.registerService(EventSubscriber.class.getName(), this,\n+                properties);\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return types;\n+    }\n+\n+    @Override\n+    public @Nullable EventFilter getEventFilter() {\n+        return this;\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        if (callback != null) {", "originalCommit": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f4b8fb4de0269ceece5948409c1d52b1ea49ef2", "chunk": "diff --git a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java\nindex 9f3786b8c..548b288a2 100644\n--- a/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java\n+++ b/bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java\n\n@@ -22,7 +22,6 @@ import java.util.Set;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n-import org.openhab.core.automation.ModuleHandlerCallback;\n import org.openhab.core.automation.Trigger;\n import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n import org.openhab.core.automation.handler.TriggerHandlerCallback;\n"}}, {"oid": "7f4b8fb4de0269ceece5948409c1d52b1ea49ef2", "url": "https://github.com/openhab/openhab-core/commit/7f4b8fb4de0269ceece5948409c1d52b1ea49ef2", "message": "addressed further review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-06-03T20:04:44Z", "type": "commit"}]}