{"pr_number": 1362, "pr_title": "Metadata-based state & command description providers", "pr_createdAt": "2020-02-10T14:07:38Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1362", "timeline": [{"oid": "e6937c86a695ffffbe4945a5c1ebbccf545e5d4e", "url": "https://github.com/openhab/openhab-core/commit/e6937c86a695ffffbe4945a5c1ebbccf545e5d4e", "message": "Metadata-based state & command description providers\n\nImplements #1185.\n\nThese providers will look into item metadata, which\ncan be managed by UIs with the API, to set or override\nthe item's state description (pattern, options, read\nonly...) or command description.\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-02-10T14:06:50Z", "type": "commit"}, {"oid": "237d8bd3ca6202e1c2fd394c2ef24b9ca01daacc", "url": "https://github.com/openhab/openhab-core/commit/237d8bd3ca6202e1c2fd394c2ef24b9ca01daacc", "message": "Support service ranking to fix itest\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-02-10T14:53:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMzMwMA==", "url": "https://github.com/openhab/openhab-core/pull/1362#discussion_r377913300", "bodyText": "You can add the @Reference directly in line 45 and get rid off the getter and setter methods.\nOr pass it in via constructor as you do in MetadataStateDescriptionFragmentProvider.", "author": "kaikreuzer", "createdAt": "2020-02-11T21:35:42Z", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataCommandDescriptionProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.internal.items;\n+\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.internal.types.CommandDescriptionImpl;\n+import org.openhab.core.items.Metadata;\n+import org.openhab.core.items.MetadataKey;\n+import org.openhab.core.items.MetadataRegistry;\n+import org.openhab.core.types.CommandDescription;\n+import org.openhab.core.types.CommandDescriptionProvider;\n+import org.openhab.core.types.CommandOption;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@link CommandDescription} provider from items' metadata\n+ *\n+ * @author Yannick Schaus - initial contribution\n+ *\n+ */\n+@Component(service = CommandDescriptionProvider.class)\n+public class MetadataCommandDescriptionProvider implements CommandDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(MetadataCommandDescriptionProvider.class);\n+\n+    public static final String COMMANDDESCRIPTION_METADATA_NAMESPACE = \"commandDescription\";\n+\n+    private MetadataRegistry metadataRegistry;\n+\n+    @Override\n+    public @Nullable CommandDescription getCommandDescription(@NonNull String itemName, @Nullable Locale locale) {\n+        Metadata metadata = metadataRegistry.get(new MetadataKey(COMMANDDESCRIPTION_METADATA_NAMESPACE, itemName));\n+\n+        if (metadata != null) {\n+            try {\n+                CommandDescriptionImpl commandDescription = new CommandDescriptionImpl();\n+                if (metadata.getConfiguration().containsKey(\"options\")) {\n+                    Stream.of(metadata.getConfiguration().get(\"options\").toString().split(\",\")).forEach(o -> {\n+                        if (o.contains(\"=\")) {\n+                            commandDescription.addCommandOption(\n+                                    new CommandOption(o.split(\"=\")[0].trim(), o.split(\"=\")[1].trim()));\n+                        } else {\n+                            commandDescription.addCommandOption(new CommandOption(o.trim(), null));\n+                        }\n+                    });\n+                }\n+\n+                return commandDescription;\n+            } catch (Exception e) {\n+                logger.error(\"Unable to parse the commandDescription from metadata for item {}\", itemName, e);\n+                return null;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Reference", "originalCommit": "237d8bd3ca6202e1c2fd394c2ef24b9ca01daacc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f662d7c081c850934a7c962c551d039d7997c63", "chunk": "diff --git a/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataCommandDescriptionProvider.java b/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataCommandDescriptionProvider.java\nindex 19a05f2ac..ae469d06b 100644\n--- a/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataCommandDescriptionProvider.java\n+++ b/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataCommandDescriptionProvider.java\n\n@@ -13,9 +13,11 @@\n package org.openhab.core.internal.items;\n \n import java.util.Locale;\n+import java.util.Map;\n import java.util.stream.Stream;\n \n import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.internal.types.CommandDescriptionImpl;\n import org.openhab.core.items.Metadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNDQ0Mw==", "url": "https://github.com/openhab/openhab-core/pull/1362#discussion_r377914443", "bodyText": "This should imho be a WARN for the user, telling him that the value is ignored. No stacktrace must be added here as we are not talking about a bug in the software.", "author": "kaikreuzer", "createdAt": "2020-02-11T21:37:52Z", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataStateDescriptionFragmentProvider.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.internal.items;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.items.Metadata;\n+import org.openhab.core.items.MetadataKey;\n+import org.openhab.core.items.MetadataRegistry;\n+import org.openhab.core.types.StateDescriptionFragment;\n+import org.openhab.core.types.StateDescriptionFragmentBuilder;\n+import org.openhab.core.types.StateDescriptionFragmentProvider;\n+import org.openhab.core.types.StateOption;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@link StateDescriptionFragment} provider from items' metadata\n+ *\n+ * @author Yannick Schaus - initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = StateDescriptionFragmentProvider.class)\n+public class MetadataStateDescriptionFragmentProvider implements StateDescriptionFragmentProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(MetadataStateDescriptionFragmentProvider.class);\n+\n+    public static final String STATEDESCRIPTION_METADATA_NAMESPACE = \"stateDescription\";\n+\n+    private final MetadataRegistry metadataRegistry;\n+\n+    private final Integer rank;\n+\n+    @Activate\n+    public MetadataStateDescriptionFragmentProvider(final @Reference MetadataRegistry metadataRegistry,\n+            Map<String, Object> properties) {\n+        this.metadataRegistry = metadataRegistry;\n+\n+        Object serviceRanking = properties.get(Constants.SERVICE_RANKING);\n+        if (serviceRanking instanceof Integer) {\n+            rank = (Integer) serviceRanking;\n+        } else {\n+            rank = 1; // takes precedence over other providers usually ranked 0\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable StateDescriptionFragment getStateDescriptionFragment(@NonNull String itemName,\n+            @Nullable Locale locale) {\n+        Metadata metadata = metadataRegistry.get(new MetadataKey(STATEDESCRIPTION_METADATA_NAMESPACE, itemName));\n+\n+        if (metadata != null) {\n+            try {\n+                StateDescriptionFragmentBuilder builder = StateDescriptionFragmentBuilder.create();\n+                if (metadata.getConfiguration().containsKey(\"pattern\")) {\n+                    builder.withPattern((String) metadata.getConfiguration().get(\"pattern\"));\n+                }\n+                if (metadata.getConfiguration().containsKey(\"min\")) {\n+                    builder.withMinimum(getBigDecimal(metadata.getConfiguration().get(\"min\")));\n+                }\n+                if (metadata.getConfiguration().containsKey(\"max\")) {\n+                    builder.withMaximum(getBigDecimal(metadata.getConfiguration().get(\"min\")));\n+                }\n+                if (metadata.getConfiguration().containsKey(\"step\")) {\n+                    builder.withStep(getBigDecimal(metadata.getConfiguration().get(\"min\")));\n+                }\n+                if (metadata.getConfiguration().containsKey(\"readOnly\")) {\n+                    builder.withReadOnly(getBoolean(metadata.getConfiguration().get(\"readOnly\")));\n+                }\n+                if (metadata.getConfiguration().containsKey(\"options\")) {\n+                    List<StateOption> stateOptions = Stream\n+                            .of(metadata.getConfiguration().get(\"options\").toString().split(\",\")).map(o -> {\n+                                return (o.contains(\"=\"))\n+                                        ? new StateOption(o.split(\"=\")[0].trim(), o.split(\"=\")[1].trim())\n+                                        : new StateOption(o.trim(), null);\n+                            }).collect(Collectors.toList());\n+                    builder.withOptions(stateOptions);\n+                }\n+\n+                return builder.build();\n+            } catch (Exception e) {\n+                logger.error(\"Unable to parse the stateDescription from metadata for item {}\", itemName, e);", "originalCommit": "237d8bd3ca6202e1c2fd394c2ef24b9ca01daacc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f662d7c081c850934a7c962c551d039d7997c63", "chunk": "diff --git a/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataStateDescriptionFragmentProvider.java b/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataStateDescriptionFragmentProvider.java\nindex 071c0fe59..dcb6ff6b2 100644\n--- a/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataStateDescriptionFragmentProvider.java\n+++ b/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataStateDescriptionFragmentProvider.java\n\n@@ -83,10 +83,10 @@ public class MetadataStateDescriptionFragmentProvider implements StateDescriptio\n                     builder.withMinimum(getBigDecimal(metadata.getConfiguration().get(\"min\")));\n                 }\n                 if (metadata.getConfiguration().containsKey(\"max\")) {\n-                    builder.withMaximum(getBigDecimal(metadata.getConfiguration().get(\"min\")));\n+                    builder.withMaximum(getBigDecimal(metadata.getConfiguration().get(\"max\")));\n                 }\n                 if (metadata.getConfiguration().containsKey(\"step\")) {\n-                    builder.withStep(getBigDecimal(metadata.getConfiguration().get(\"min\")));\n+                    builder.withStep(getBigDecimal(metadata.getConfiguration().get(\"step\")));\n                 }\n                 if (metadata.getConfiguration().containsKey(\"readOnly\")) {\n                     builder.withReadOnly(getBoolean(metadata.getConfiguration().get(\"readOnly\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNjIwMw==", "url": "https://github.com/openhab/openhab-core/pull/1362#discussion_r377916203", "bodyText": "This should imho be a WARN for the user, telling him that the value is ignored. No stacktrace must be added here as we are not talking about a bug in the software.", "author": "kaikreuzer", "createdAt": "2020-02-11T21:41:17Z", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataCommandDescriptionProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.internal.items;\n+\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.internal.types.CommandDescriptionImpl;\n+import org.openhab.core.items.Metadata;\n+import org.openhab.core.items.MetadataKey;\n+import org.openhab.core.items.MetadataRegistry;\n+import org.openhab.core.types.CommandDescription;\n+import org.openhab.core.types.CommandDescriptionProvider;\n+import org.openhab.core.types.CommandOption;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@link CommandDescription} provider from items' metadata\n+ *\n+ * @author Yannick Schaus - initial contribution\n+ *\n+ */\n+@Component(service = CommandDescriptionProvider.class)\n+public class MetadataCommandDescriptionProvider implements CommandDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(MetadataCommandDescriptionProvider.class);\n+\n+    public static final String COMMANDDESCRIPTION_METADATA_NAMESPACE = \"commandDescription\";\n+\n+    private MetadataRegistry metadataRegistry;\n+\n+    @Override\n+    public @Nullable CommandDescription getCommandDescription(@NonNull String itemName, @Nullable Locale locale) {\n+        Metadata metadata = metadataRegistry.get(new MetadataKey(COMMANDDESCRIPTION_METADATA_NAMESPACE, itemName));\n+\n+        if (metadata != null) {\n+            try {\n+                CommandDescriptionImpl commandDescription = new CommandDescriptionImpl();\n+                if (metadata.getConfiguration().containsKey(\"options\")) {\n+                    Stream.of(metadata.getConfiguration().get(\"options\").toString().split(\",\")).forEach(o -> {\n+                        if (o.contains(\"=\")) {\n+                            commandDescription.addCommandOption(\n+                                    new CommandOption(o.split(\"=\")[0].trim(), o.split(\"=\")[1].trim()));\n+                        } else {\n+                            commandDescription.addCommandOption(new CommandOption(o.trim(), null));\n+                        }\n+                    });\n+                }\n+\n+                return commandDescription;\n+            } catch (Exception e) {\n+                logger.error(\"Unable to parse the commandDescription from metadata for item {}\", itemName, e);", "originalCommit": "237d8bd3ca6202e1c2fd394c2ef24b9ca01daacc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f662d7c081c850934a7c962c551d039d7997c63", "chunk": "diff --git a/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataCommandDescriptionProvider.java b/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataCommandDescriptionProvider.java\nindex 19a05f2ac..ae469d06b 100644\n--- a/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataCommandDescriptionProvider.java\n+++ b/bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataCommandDescriptionProvider.java\n\n@@ -13,9 +13,11 @@\n package org.openhab.core.internal.items;\n \n import java.util.Locale;\n+import java.util.Map;\n import java.util.stream.Stream;\n \n import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.internal.types.CommandDescriptionImpl;\n import org.openhab.core.items.Metadata;\n"}}, {"oid": "0f662d7c081c850934a7c962c551d039d7997c63", "url": "https://github.com/openhab/openhab-core/commit/0f662d7c081c850934a7c962c551d039d7997c63", "message": "Add unit tests, address review comments\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-02-13T01:37:17Z", "type": "commit"}, {"oid": "0f662d7c081c850934a7c962c551d039d7997c63", "url": "https://github.com/openhab/openhab-core/commit/0f662d7c081c850934a7c962c551d039d7997c63", "message": "Add unit tests, address review comments\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-02-13T01:37:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEwNTY5Ng==", "url": "https://github.com/openhab/openhab-core/pull/1362#discussion_r379105696", "bodyText": "haha, it seems the unit tests have already helped ;-)", "author": "kaikreuzer", "createdAt": "2020-02-13T20:38:19Z", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataStateDescriptionFragmentProvider.java", "diffHunk": "@@ -83,10 +83,10 @@ public MetadataStateDescriptionFragmentProvider(final @Reference MetadataRegistr\n                     builder.withMinimum(getBigDecimal(metadata.getConfiguration().get(\"min\")));\n                 }\n                 if (metadata.getConfiguration().containsKey(\"max\")) {\n-                    builder.withMaximum(getBigDecimal(metadata.getConfiguration().get(\"min\")));\n+                    builder.withMaximum(getBigDecimal(metadata.getConfiguration().get(\"max\")));", "originalCommit": "0f662d7c081c850934a7c962c551d039d7997c63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEwNzU3OA==", "url": "https://github.com/openhab/openhab-core/pull/1362#discussion_r379107578", "bodyText": "My thoughts exactly but I wanted to keep that under the radar ;)", "author": "ghys", "createdAt": "2020-02-13T20:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEwNTY5Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4d39a44c9ac356db51a1482f35180672077427c5", "url": "https://github.com/openhab/openhab-core/commit/4d39a44c9ac356db51a1482f35180672077427c5", "message": "Make constructor public\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-02-15T15:41:17Z", "type": "commit"}]}