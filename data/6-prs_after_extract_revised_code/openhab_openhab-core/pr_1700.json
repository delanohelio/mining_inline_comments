{"pr_number": 1700, "pr_title": "Make ExecUtil more robust", "pr_createdAt": "2020-10-07T06:31:02Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1700", "timeline": [{"oid": "cd2ce3ca0fa5b03db1c9fef6abb6d27df727c070", "url": "https://github.com/openhab/openhab-core/commit/cd2ce3ca0fa5b03db1c9fef6abb6d27df727c070", "message": "Make ExecUtil more robust\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-10-07T06:21:29Z", "type": "commit"}, {"oid": "a5739fa22a62cffce52507b86485462b4fa6c76c", "url": "https://github.com/openhab/openhab-core/commit/a5739fa22a62cffce52507b86485462b4fa6c76c", "message": "Adjusted according to code review\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-10-07T16:53:59Z", "type": "commit"}, {"oid": "f467089103cd0450cc24becf177fd8b91154ac1d", "url": "https://github.com/openhab/openhab-core/commit/f467089103cd0450cc24becf177fd8b91154ac1d", "message": "Fix script Exec class.\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-10-07T17:06:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MjM0MA==", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501272340", "bodyText": "This JavaDoc still needs to be updated for the latest changes.", "author": "wborn", "createdAt": "2020-10-07T19:55:48Z", "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -28,87 +35,101 @@\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n+ * @author Connor Petty - rewrote\n  */\n+@NonNullByDefault\n public class ExecUtil {\n \n     private static Logger logger = LoggerFactory.getLogger(ExecUtil.class);\n \n-    /**\n-     * Use this to separate between command and parameter, and also between parameters.\n-     */\n-    public static final String CMD_LINE_DELIMITER = \"@@\";\n+    private static ExecutorService executor = ThreadPoolManager.getPool(\"ExecUtil\");\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code>. Sometimes (especially observed on MacOS) the commandLine isn't executed\n-     * properly. In that cases another exec-method is to be used. To accomplish this please use the special delimiter\n-     * '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a String list and the\n-     * special exec-method is used.\n+     * Executes <code>commandLine</code>.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n      * @param commandLine the command line to execute\n      */\n-    public static void executeCommandLine(String commandLine) {\n-        internalExecute(commandLine);\n+    public static void executeCommandLine(String... commandLine) {\n+        try {\n+            new ProcessBuilder(commandLine).redirectError(Redirect.DISCARD).redirectOutput(Redirect.DISCARD).start();\n+        } catch (IOException e) {\n+            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e);\n+        }\n     }\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code> and return its result. Sometimes (especially observed on MacOS) the commandLine\n-     * isn't executed properly. In that cases another exec-method is to be used. To accomplish this please use the\n-     * special delimiter '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a\n-     * String list and the special exec-method is used.\n+     * Executes <code>commandLine</code> and return its result.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n+     * @param timeout timeout for execution in milliseconds, 0 to wait indefinitely", "originalCommit": "f467089103cd0450cc24becf177fd8b91154ac1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNzgzMQ==", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501307831", "bodyText": "done", "author": "cpmeister", "createdAt": "2020-10-07T21:01:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MjM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "c7a47bcd6540ae3d50cfdecf7188dd1bb18d1c3a", "chunk": "diff --git a/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java b/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java\nindex bf33875ce..c52a52c60 100644\n--- a/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java\n+++ b/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java\n\n@@ -35,7 +35,7 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n- * @author Connor Petty - rewrote\n+ * @author Connor Petty - replaced delimiter usage with argument array\n  */\n @NonNullByDefault\n public class ExecUtil {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MjUxNg==", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501272516", "bodyText": "Can you  be a bit more specific?", "author": "wborn", "createdAt": "2020-10-07T19:56:09Z", "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -28,87 +35,101 @@\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n+ * @author Connor Petty - rewrote", "originalCommit": "f467089103cd0450cc24becf177fd8b91154ac1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNzg3NQ==", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501307875", "bodyText": "done", "author": "cpmeister", "createdAt": "2020-10-07T21:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MjUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "c7a47bcd6540ae3d50cfdecf7188dd1bb18d1c3a", "chunk": "diff --git a/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java b/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java\nindex bf33875ce..c52a52c60 100644\n--- a/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java\n+++ b/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java\n\n@@ -35,7 +35,7 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n- * @author Connor Petty - rewrote\n+ * @author Connor Petty - replaced delimiter usage with argument array\n  */\n @NonNullByDefault\n public class ExecUtil {\n"}}, {"oid": "c7a47bcd6540ae3d50cfdecf7188dd1bb18d1c3a", "url": "https://github.com/openhab/openhab-core/commit/c7a47bcd6540ae3d50cfdecf7188dd1bb18d1c3a", "message": "Fixed javadoc\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-10-07T21:01:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5MDI4Ng==", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501490286", "bodyText": "The timeout is only used when it is not null:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param timeout the max time to wait for a process to finish, 0 to wait indefinitely\n          \n          \n            \n                 * @param timeout the max time to wait for a process to finish, null to wait indefinitely", "author": "wborn", "createdAt": "2020-10-08T07:01:25Z", "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -28,87 +35,101 @@\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n+ * @author Connor Petty - replaced delimiter usage with argument array\n  */\n+@NonNullByDefault\n public class ExecUtil {\n \n     private static Logger logger = LoggerFactory.getLogger(ExecUtil.class);\n \n-    /**\n-     * Use this to separate between command and parameter, and also between parameters.\n-     */\n-    public static final String CMD_LINE_DELIMITER = \"@@\";\n+    private static ExecutorService executor = ThreadPoolManager.getPool(\"ExecUtil\");\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code>. Sometimes (especially observed on MacOS) the commandLine isn't executed\n-     * properly. In that cases another exec-method is to be used. To accomplish this please use the special delimiter\n-     * '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a String list and the\n-     * special exec-method is used.\n+     * Executes <code>commandLine</code>.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n      * @param commandLine the command line to execute\n      */\n-    public static void executeCommandLine(String commandLine) {\n-        internalExecute(commandLine);\n+    public static void executeCommandLine(String... commandLine) {\n+        try {\n+            new ProcessBuilder(commandLine).redirectError(Redirect.DISCARD).redirectOutput(Redirect.DISCARD).start();\n+        } catch (IOException e) {\n+            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e);\n+        }\n     }\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code> and return its result. Sometimes (especially observed on MacOS) the commandLine\n-     * isn't executed properly. In that cases another exec-method is to be used. To accomplish this please use the\n-     * special delimiter '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a\n-     * String list and the special exec-method is used.\n+     * Executes <code>commandLine</code> and return its result.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n+     * @param timeout the max time to wait for a process to finish, 0 to wait indefinitely", "originalCommit": "c7a47bcd6540ae3d50cfdecf7188dd1bb18d1c3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNjk0Mw==", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501816943", "bodyText": "oof, forgot that one.\nFixed", "author": "cpmeister", "createdAt": "2020-10-08T15:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5MDI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "38168e34c8929ff6b0dacfb2885d9c0cfd8b33ca", "chunk": "diff --git a/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java b/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java\nindex c52a52c60..65aa94322 100644\n--- a/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java\n+++ b/bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java\n\n@@ -68,7 +68,7 @@ public class ExecUtil {\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n-     * @param timeout the max time to wait for a process to finish, 0 to wait indefinitely\n+     * @param timeout the max time to wait for a process to finish, null to wait indefinitely\n      * @param commandLine the command line to execute\n      * @return response data from executed command line or <code>null</code> if a timeout or error occurred\n      */\n"}}, {"oid": "38168e34c8929ff6b0dacfb2885d9c0cfd8b33ca", "url": "https://github.com/openhab/openhab-core/commit/38168e34c8929ff6b0dacfb2885d9c0cfd8b33ca", "message": "Fix javadoc\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-10-08T15:33:27Z", "type": "commit"}]}