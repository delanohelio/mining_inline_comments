{"pr_number": 1514, "pr_title": "[dsl] Model loading improvements", "pr_createdAt": "2020-06-07T21:47:25Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1514", "timeline": [{"oid": "876496f09409a831d3e94ebd13181ed211af9257", "url": "https://github.com/openhab/openhab-core/commit/876496f09409a831d3e94ebd13181ed211af9257", "message": "Model loading improvements\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-06-07T21:42:20Z", "type": "commit"}, {"oid": "ca095b5d940543c0681482d197ad00c47d698cad", "url": "https://github.com/openhab/openhab-core/commit/ca095b5d940543c0681482d197ad00c47d698cad", "message": "fixed test\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-06-07T22:06:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwNjUyNg==", "url": "https://github.com/openhab/openhab-core/pull/1514#discussion_r436606526", "bodyText": "The FolderObserver already uses constructor injection? Can we use it for the ReadyService too?", "author": "cweitkamp", "createdAt": "2020-06-08T10:42:57Z", "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java", "diffHunk": "@@ -60,6 +62,12 @@\n \n     /* the model repository is provided as a service */\n     private final ModelRepository modelRepository;\n+    private static final String READYMARKER_TYPE = \"dsl\";\n+\n+    @Reference\n+    /* default */ ReadyService readyService;", "originalCommit": "ca095b5d940543c0681482d197ad00c47d698cad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d11447e204ab268956b419b4ed06f000861d0315", "chunk": "diff --git a/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java b/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java\nindex 9c03ffa00..98d7a61b7 100644\n--- a/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java\n+++ b/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java\n\n@@ -64,8 +64,7 @@ public class FolderObserver extends AbstractWatchService {\n     private final ModelRepository modelRepository;\n     private static final String READYMARKER_TYPE = \"dsl\";\n \n-    @Reference\n-    /* default */ ReadyService readyService;\n+    private final ReadyService readyService;\n \n     private boolean activated;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwODQ1MA==", "url": "https://github.com/openhab/openhab-core/pull/1514#discussion_r436608450", "bodyText": "Combine nested ifs and consider new condition in method removeAllModelsOfType().", "author": "cweitkamp", "createdAt": "2020-06-08T10:46:56Z", "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java", "diffHunk": "@@ -203,8 +189,9 @@ public void reloadAllModelsOfType(final String modelType) {\n             // Make a copy to avoid ConcurrentModificationException\n             List<Resource> resourceListCopy = new ArrayList<>(resourceSet.getResources());\n             for (Resource resource : resourceListCopy) {\n-                if (resource != null && resource.getURI().lastSegment().contains(\".\") && resource.isLoaded()) {\n-                    if (modelType.equalsIgnoreCase(resource.getURI().fileExtension())) {\n+                if (resource.getURI().lastSegment().contains(\".\") && resource.isLoaded()) {\n+                    if (modelType.equalsIgnoreCase(resource.getURI().fileExtension())\n+                            && !resource.getURI().lastSegment().startsWith(\"tmp_\")) {", "originalCommit": "ca095b5d940543c0681482d197ad00c47d698cad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d11447e204ab268956b419b4ed06f000861d0315", "chunk": "diff --git a/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java b/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java\nindex 09970156e..40afefa0e 100644\n--- a/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java\n+++ b/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java\n\n@@ -189,17 +186,16 @@ public class ModelRepositoryImpl implements ModelRepository {\n             // Make a copy to avoid ConcurrentModificationException\n             List<Resource> resourceListCopy = new ArrayList<>(resourceSet.getResources());\n             for (Resource resource : resourceListCopy) {\n-                if (resource.getURI().lastSegment().contains(\".\") && resource.isLoaded()) {\n-                    if (modelType.equalsIgnoreCase(resource.getURI().fileExtension())\n-                            && !resource.getURI().lastSegment().startsWith(\"tmp_\")) {\n-                        XtextResource xtextResource = (XtextResource) resource;\n-                        // It's not sufficient to discard the derived state.\n-                        // The quick & dirts solution is to reparse the whole resource.\n-                        // We trigger this by dummy updating the resource.\n-                        logger.debug(\"Refreshing resource '{}'\", resource.getURI().lastSegment());\n-                        xtextResource.update(1, 0, \"\");\n-                        notifyListeners(resource.getURI().lastSegment(), EventType.MODIFIED);\n-                    }\n+                if (resource.getURI().lastSegment().contains(\".\") && resource.isLoaded()\n+                        && modelType.equalsIgnoreCase(resource.getURI().fileExtension())\n+                        && !resource.getURI().lastSegment().startsWith(\"tmp_\")) {\n+                    XtextResource xtextResource = (XtextResource) resource;\n+                    // It's not sufficient to discard the derived state.\n+                    // The quick & dirts solution is to reparse the whole resource.\n+                    // We trigger this by dummy updating the resource.\n+                    logger.debug(\"Refreshing resource '{}'\", resource.getURI().lastSegment());\n+                    xtextResource.update(1, 0, \"\");\n+                    notifyListeners(resource.getURI().lastSegment(), EventType.MODIFIED);\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxMDA1MA==", "url": "https://github.com/openhab/openhab-core/pull/1514#discussion_r436610050", "bodyText": "This is a nice improvement. With absence of these ugly nestings we can use a try-with-resources statement on the inputStream declaration and get rid of the finally introduced in #1423.", "author": "cweitkamp", "createdAt": "2020-06-08T10:50:29Z", "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java", "diffHunk": "@@ -98,20 +98,18 @@ public ModelRepositoryImpl(final @Reference SafeEMF safeEmf) {\n \n     @Override\n     public boolean addOrRefreshModel(String name, final InputStream originalInputStream) {\n+        logger.info(\"Loading model '{}'\", name);\n         Resource resource = null;\n         InputStream inputStream = null;\n         try {\n-            if (originalInputStream != null) {\n-                byte[] bytes = originalInputStream.readAllBytes();\n-                String validationResult = validateModel(name, new ByteArrayInputStream(bytes));\n-                if (validationResult != null) {\n-                    logger.warn(\"Configuration model '{}' has errors, therefore ignoring it: {}\", name,\n-                            validationResult);\n-                    removeModel(name);\n-                    return false;\n-                }\n-                inputStream = new ByteArrayInputStream(bytes);\n+            byte[] bytes = originalInputStream.readAllBytes();\n+            String validationResult = validateModel(name, new ByteArrayInputStream(bytes));\n+            if (validationResult != null) {\n+                logger.warn(\"Configuration model '{}' has errors, therefore ignoring it: {}\", name, validationResult);\n+                removeModel(name);\n+                return false;\n             }\n+            inputStream = new ByteArrayInputStream(bytes);", "originalCommit": "ca095b5d940543c0681482d197ad00c47d698cad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d11447e204ab268956b419b4ed06f000861d0315", "chunk": "diff --git a/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java b/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java\nindex 09970156e..40afefa0e 100644\n--- a/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java\n+++ b/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java\n\n@@ -100,16 +100,20 @@ public class ModelRepositoryImpl implements ModelRepository {\n     public boolean addOrRefreshModel(String name, final InputStream originalInputStream) {\n         logger.info(\"Loading model '{}'\", name);\n         Resource resource = null;\n-        InputStream inputStream = null;\n-        try {\n-            byte[] bytes = originalInputStream.readAllBytes();\n+        byte[] bytes = null;\n+        try (InputStream inputStream = originalInputStream) {\n+            bytes = inputStream.readAllBytes();\n             String validationResult = validateModel(name, new ByteArrayInputStream(bytes));\n             if (validationResult != null) {\n                 logger.warn(\"Configuration model '{}' has errors, therefore ignoring it: {}\", name, validationResult);\n                 removeModel(name);\n                 return false;\n             }\n-            inputStream = new ByteArrayInputStream(bytes);\n+        } catch (IOException e) {\n+            logger.warn(\"Configuration model '{}' cannot be parsed correctly!\", name, e);\n+            return false;\n+        }\n+        try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n             resource = getResource(name);\n             if (resource == null) {\n                 synchronized (resourceSet) {\n"}}, {"oid": "d11447e204ab268956b419b4ed06f000861d0315", "url": "https://github.com/openhab/openhab-core/commit/d11447e204ab268956b419b4ed06f000861d0315", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-06-08T19:23:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5NTUxNg==", "url": "https://github.com/openhab/openhab-core/pull/1514#discussion_r437195516", "bodyText": "ftr: This is probably not necessary as the FolderObserver handles the passed InputStream (originalInputStream), but I do not think that it will hurt:\n\n  \n    \n      openhab-core/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java\n    \n    \n        Lines 233 to 238\n      in\n      b7ab807\n    \n    \n    \n    \n\n        \n          \n           try (InputStream inputStream = Files.newInputStream(file.toPath())) { \n        \n\n        \n          \n               nameFileMap.put(file.getName(), file); \n        \n\n        \n          \n               modelRepository.addOrRefreshModel(file.getName(), inputStream); \n        \n\n        \n          \n           } catch (IOException e) { \n        \n\n        \n          \n               logger.warn(\"Error while opening file during update: {}\", file.getAbsolutePath()); \n        \n\n        \n          \n           }", "author": "cweitkamp", "createdAt": "2020-06-09T07:32:45Z", "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java", "diffHunk": "@@ -98,20 +98,22 @@ public ModelRepositoryImpl(final @Reference SafeEMF safeEmf) {\n \n     @Override\n     public boolean addOrRefreshModel(String name, final InputStream originalInputStream) {\n+        logger.info(\"Loading model '{}'\", name);\n         Resource resource = null;\n-        InputStream inputStream = null;\n-        try {\n-            if (originalInputStream != null) {\n-                byte[] bytes = originalInputStream.readAllBytes();\n-                String validationResult = validateModel(name, new ByteArrayInputStream(bytes));\n-                if (validationResult != null) {\n-                    logger.warn(\"Configuration model '{}' has errors, therefore ignoring it: {}\", name,\n-                            validationResult);\n-                    removeModel(name);\n-                    return false;\n-                }\n-                inputStream = new ByteArrayInputStream(bytes);\n+        byte[] bytes = null;\n+        try (InputStream inputStream = originalInputStream) {", "originalCommit": "d11447e204ab268956b419b4ed06f000861d0315", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NDc3Mg==", "url": "https://github.com/openhab/openhab-core/pull/1514#discussion_r437674772", "bodyText": "True, I didn't see that. But imho it is better to explicitly make sure that the stream is closed within the method. One should not rely on the caller to do it.", "author": "kaikreuzer", "createdAt": "2020-06-09T19:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5NTUxNg=="}], "type": "inlineReview", "revised_code": null}]}