{"pr_number": 1414, "pr_title": "Removed deprecated constructors and methods from Thing API", "pr_createdAt": "2020-04-09T11:29:04Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1414", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzOTQ5NA==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r406139494", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"Kind must not be null or aempty!\");\n          \n          \n            \n                            throw new IllegalArgumentException(\"Kind must not be null or empty!\");", "author": "cweitkamp", "createdAt": "2020-04-09T11:30:04Z", "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/i18n/ChannelTypeI18nLocalizationService.java", "diffHunk": "@@ -160,11 +160,7 @@ public ChannelType createLocalizedChannelType(Bundle bundle, ChannelType channel\n                 }\n                 return triggerBuilder.build();\n             default:\n-                return new ChannelType(channelTypeUID, channelType.isAdvanced(), channelType.getItemType(),\n-                        channelType.getKind(), label == null ? defaultLabel : label, description,\n-                        channelType.getCategory(), channelType.getTags(), channelType.getState(),\n-                        channelType.getEvent(), channelType.getConfigDescriptionURI(),\n-                        channelType.getAutoUpdatePolicy());\n+                throw new IllegalArgumentException(\"Kind must not be null or aempty!\");", "originalCommit": "c12cdab833dc9c68f4c427b16d424e087ca4b9b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f3bdd0ebe121dea70c099ecf8c7edb98082655b", "chunk": "diff --git a/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/i18n/ChannelTypeI18nLocalizationService.java b/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/i18n/ChannelTypeI18nLocalizationService.java\nindex cd12f1092..f5f60deae 100644\n--- a/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/i18n/ChannelTypeI18nLocalizationService.java\n+++ b/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/i18n/ChannelTypeI18nLocalizationService.java\n\n@@ -139,29 +144,40 @@ public class ChannelTypeI18nLocalizationService {\n                 CommandDescription command = createLocalizedCommandDescription(bundle,\n                         channelType.getCommandDescription(), channelTypeUID, locale);\n \n-                StateChannelTypeBuilder stateBuilder = ChannelTypeBuilder\n-                        .state(channelTypeUID, label == null ? defaultLabel : label, channelType.getItemType())\n-                        .isAdvanced(channelType.isAdvanced()).withCategory(channelType.getCategory())\n-                        .withConfigDescriptionURI(channelType.getConfigDescriptionURI()).withTags(channelType.getTags())\n-                        .withStateDescription(state).withAutoUpdatePolicy(channelType.getAutoUpdatePolicy())\n-                        .withCommandDescription(command);\n-                if (description != null) {\n-                    stateBuilder.withDescription(description);\n+                String itemType = channelType.getItemType();\n+                if (itemType == null || itemType.isBlank()) {\n+                    throw new IllegalArgumentException(\"If the kind is 'state', the item type must be set!\");\n                 }\n-                return stateBuilder.build();\n+                StateChannelTypeBuilder stateBuilder = ChannelTypeBuilder //\n+                        .state(channelTypeUID, label == null ? defaultLabel : label, itemType) //\n+                        .withStateDescription(state) //\n+                        .withAutoUpdatePolicy(channelType.getAutoUpdatePolicy()) //\n+                        .withCommandDescription(command);\n+\n+                builder = stateBuilder;\n+                break;\n             case TRIGGER:\n-                TriggerChannelTypeBuilder triggerBuilder = ChannelTypeBuilder\n-                        .trigger(channelTypeUID, label == null ? defaultLabel : label)\n-                        .isAdvanced(channelType.isAdvanced()).withCategory(channelType.getCategory())\n-                        .withConfigDescriptionURI(channelType.getConfigDescriptionURI()).withTags(channelType.getTags())\n-                        .withEventDescription(channelType.getEvent());\n-                if (description != null) {\n-                    triggerBuilder.withDescription(description);\n+                TriggerChannelTypeBuilder triggerBuilder = ChannelTypeBuilder //\n+                        .trigger(channelTypeUID, label == null ? defaultLabel : label);\n+                EventDescription event = channelType.getEvent();\n+                if (event != null) {\n+                    triggerBuilder.withEventDescription(event);\n                 }\n-                return triggerBuilder.build();\n+                builder = triggerBuilder;\n+                break;\n             default:\n-                throw new IllegalArgumentException(\"Kind must not be null or aempty!\");\n+                throw new IllegalArgumentException(\"Kind must not be null or empty!\");\n+        }\n+        if (description != null) {\n+            builder.withDescription(description);\n+        }\n+        if (category != null) {\n+            builder.withCategory(category);\n+        }\n+        if (configDescriptionURI != null) {\n+            builder.withConfigDescriptionURI(configDescriptionURI);\n         }\n+        return builder.isAdvanced(channelType.isAdvanced()).withTags(channelType.getTags()).build();\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzOTczNQ==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r406139735", "bodyText": "Is this if really necessary?", "author": "cweitkamp", "createdAt": "2020-04-09T11:30:35Z", "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/type/StateChannelTypeBuilderImpl.java", "diffHunk": "@@ -65,15 +64,15 @@ public StateChannelTypeBuilder withCommandDescription(@Nullable CommandDescripti\n         return this;\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     @Override\n     public ChannelType build() {\n         if (stateDescription != null) {", "originalCommit": "c12cdab833dc9c68f4c427b16d424e087ca4b9b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f3bdd0ebe121dea70c099ecf8c7edb98082655b", "chunk": "diff --git a/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/type/StateChannelTypeBuilderImpl.java b/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/type/StateChannelTypeBuilderImpl.java\nindex 4a259f8a8..17949ded1 100644\n--- a/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/type/StateChannelTypeBuilderImpl.java\n+++ b/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/type/StateChannelTypeBuilderImpl.java\n\n@@ -67,12 +67,8 @@ public class StateChannelTypeBuilderImpl extends AbstractChannelTypeBuilder<Stat\n     @SuppressWarnings(\"deprecation\")\n     @Override\n     public ChannelType build() {\n-        if (stateDescription != null) {\n-            return new ChannelType(channelTypeUID, advanced, itemType, label, description, category,\n-                    tags.isEmpty() ? null : tags, stateDescription, null, configDescriptionURI, autoUpdatePolicy);\n-        }\n-        return new ChannelType(channelTypeUID, advanced, itemType, label, description, category,\n-                tags.isEmpty() ? null : tags, null, commandDescription, configDescriptionURI, autoUpdatePolicy);\n+        return new ChannelType(channelTypeUID, advanced, itemType, label, description, category, tags, stateDescription,\n+                commandDescription, configDescriptionURI, autoUpdatePolicy);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MDE1NA==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r406140154", "bodyText": "FTR: I am working on nullness annotations for this class.", "author": "cweitkamp", "createdAt": "2020-04-09T11:31:34Z", "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/type/ChannelType.java", "diffHunk": "@@ -18,6 +18,7 @@\n import java.util.Set;\n \n import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;", "originalCommit": "c12cdab833dc9c68f4c427b16d424e087ca4b9b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f3bdd0ebe121dea70c099ecf8c7edb98082655b", "chunk": "diff --git a/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/type/ChannelType.java b/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/type/ChannelType.java\nindex 44524b44a..72ddc0859 100644\n--- a/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/type/ChannelType.java\n+++ b/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/type/ChannelType.java\n\n@@ -17,7 +17,7 @@ import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n \n-import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.config.core.ConfigDescription;\n import org.openhab.core.thing.Channel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NDgwNQ==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r407244805", "bodyText": "Looks like there are still add-ons using these deprecated constructors. I made a local add-ons port build and it failed on the Homematic add-on:\nHomematicTypeGeneratorImpl.java:[306,14266] The constructor ChannelType(ChannelTypeUID, boolean, String, ChannelKind, String, String, String, null, StateDescription, EventDescription, URI) is undefined\nSo if we'd merge this PR it would break the add-ons port. Unless the deprecations are fixed on the 2.5.x branch.", "author": "wborn", "createdAt": "2020-04-12T19:53:34Z", "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/type/ChannelType.java", "diffHunk": "@@ -41,59 +42,35 @@\n     private final ChannelKind kind;\n     private final Set<String> tags;\n     private final String category;\n-    private final StateDescription state;\n-    private final CommandDescription commandDescription;\n+    private final @Nullable StateDescription state;\n+    private final @Nullable CommandDescription commandDescription;\n     private final EventDescription event;\n     private final URI configDescriptionURI;\n     private final AutoUpdatePolicy autoUpdatePolicy;\n \n     /**\n+     * Creates a new instance of this class with the specified parameters.\n+     *\n      * @deprecated Use the {@link ChannelTypeBuilder} instead.\n      */\n     @Deprecated\n     public ChannelType(ChannelTypeUID uid, boolean advanced, String itemType, String label, String description,\n-            String category, Set<String> tags, StateDescription state, URI configDescriptionURI) {\n-        this(uid, advanced, itemType, ChannelKind.STATE, label, description, category, tags, state, null,\n-                configDescriptionURI);\n+            String category, Set<String> tags, EventDescription event, URI configDescriptionURI)\n+            throws IllegalArgumentException {\n+        this(uid, advanced, itemType, ChannelKind.TRIGGER, label, description, category, tags, null, null, event,\n+                configDescriptionURI, null);\n     }\n \n     /**\n+     * Creates a new instance of this class with the specified parameters.\n+     *\n      * @deprecated Use the {@link ChannelTypeBuilder} instead.\n      */\n     @Deprecated\n-    public ChannelType(ChannelTypeUID uid, boolean advanced, String itemType, ChannelKind kind, String label,", "originalCommit": "c12cdab833dc9c68f4c427b16d424e087ca4b9b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NTc5NQ==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r407385795", "bodyText": "I am currently working on a PR for the Homematic binding that will replace all deprecated constructors, methods etc. Will try to push it today.", "author": "MHerbst", "createdAt": "2020-04-13T08:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NDgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5NjY3NQ==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r407396675", "bodyText": "That will certainly help @MHerbst! \ud83d\udc4d", "author": "wborn", "createdAt": "2020-04-13T09:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NDgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5NzcyMw==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r407397723", "bodyText": "@MHerbst Thank you. I will crawl the rest of the add-ons and replace the remaining.\n@wborn How can I manage a local add-ons port for testing?", "author": "cweitkamp", "createdAt": "2020-04-13T09:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NDgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMjAyNg==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r407402026", "bodyText": "I use this port-addons.sh script based on the script used by Jenkins in the add-ons port build.", "author": "wborn", "createdAt": "2020-04-13T09:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NDgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwNTk5OA==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r407405998", "bodyText": "So you run the script on a 2.5.x based branch.\nIf you want to do the same build as Jenkins you checkout 2.5.x in that dir. E.g. to see if there are any openhab-core changes breaking the add-ons port build.\nSometimes you also want to checkout your own 2.5.x branch to see if you can keep 2.5.x compatible with breaking changes in OH 3.0. I do that for instance when adding nullness annotations. You might also want to do that after fixing deprecations before submitting the PR.", "author": "wborn", "createdAt": "2020-04-13T09:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NDgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ2NjA3Nw==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r407466077", "bodyText": "My PR to fix add-ons build: openhab/openhab-addons#7354", "author": "cweitkamp", "createdAt": "2020-04-13T12:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NDgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1OTc0OQ==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r408759749", "bodyText": "Thank you both for fixing the deprecations!\nThe add-ons port now again builds for me with this PR locally. \ud83d\udc4d", "author": "wborn", "createdAt": "2020-04-15T11:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NDgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f3bdd0ebe121dea70c099ecf8c7edb98082655b", "chunk": "diff --git a/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/type/ChannelType.java b/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/type/ChannelType.java\nindex 44524b44a..72ddc0859 100644\n--- a/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/type/ChannelType.java\n+++ b/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/type/ChannelType.java\n\n@@ -35,18 +35,19 @@ import org.openhab.core.types.StateDescription;\n  * @author Michael Grammling - Initial contribution\n  * @author Henning Treu - add command options\n  */\n+@NonNullByDefault\n public class ChannelType extends AbstractDescriptionType {\n \n     private final boolean advanced;\n-    private final String itemType;\n+    private final @Nullable String itemType;\n     private final ChannelKind kind;\n     private final Set<String> tags;\n-    private final String category;\n+    private final @Nullable String category;\n     private final @Nullable StateDescription state;\n     private final @Nullable CommandDescription commandDescription;\n-    private final EventDescription event;\n-    private final URI configDescriptionURI;\n-    private final AutoUpdatePolicy autoUpdatePolicy;\n+    private final @Nullable EventDescription event;\n+    private final @Nullable URI configDescriptionURI;\n+    private final @Nullable AutoUpdatePolicy autoUpdatePolicy;\n \n     /**\n      * Creates a new instance of this class with the specified parameters.\n"}}, {"oid": "6f3bdd0ebe121dea70c099ecf8c7edb98082655b", "url": "https://github.com/openhab/openhab-core/commit/6f3bdd0ebe121dea70c099ecf8c7edb98082655b", "message": "Minor changes\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-04-13T10:11:43Z", "type": "forcePushed"}, {"oid": "9538da6d235e2c9204a2c390acf12b5d4aab4259", "url": "https://github.com/openhab/openhab-core/commit/9538da6d235e2c9204a2c390acf12b5d4aab4259", "message": "Clean-up after rebase\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-04-15T08:01:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MDI1NA==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r408760254", "bodyText": "Why was it commented?\nCan it be uncommented, fixed or removed instead?", "author": "wborn", "createdAt": "2020-04-15T11:06:42Z", "path": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/ThingUIDTest.java", "diffHunk": "@@ -26,19 +26,19 @@ public void testThreeSegments() {\n         ThingTypeUID thingType = new ThingTypeUID(\"fake\", \"type\");\n         ThingUID t = new ThingUID(thingType, \"gaga\");\n \n-        assertEquals(\"type\", t.getThingTypeId());\n+        assertEquals(\"type\", t.getThingTypeUID().getId());\n         assertEquals(\"gaga\", t.getId());\n         assertEquals(\"fake:type:gaga\", t.getAsString());\n     }\n \n-    @Test\n-    public void testTwoSegments() {\n-        ThingUID t = new ThingUID(\"fake\", \"gaga\");\n-\n-        assertNull(t.getThingTypeId());\n-        assertEquals(\"gaga\", t.getId());\n-        assertEquals(\"fake::gaga\", t.getAsString());\n-    }\n+    // @Test\n+    // public void testTwoSegments() {", "originalCommit": "9538da6d235e2c9204a2c390acf12b5d4aab4259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEyODQyNg==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r410128426", "bodyText": "I readed and changed it.", "author": "cweitkamp", "createdAt": "2020-04-17T10:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MDI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "674465944098923d857b6c67c150b858f3578f95", "chunk": "diff --git a/bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/ThingUIDTest.java b/bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/ThingUIDTest.java\nindex e7447696d..5b2f9ac55 100644\n--- a/bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/ThingUIDTest.java\n+++ b/bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/ThingUIDTest.java\n\n@@ -24,29 +25,31 @@ public class ThingUIDTest {\n     @Test\n     public void testThreeSegments() {\n         ThingTypeUID thingType = new ThingTypeUID(\"fake\", \"type\");\n-        ThingUID t = new ThingUID(thingType, \"gaga\");\n+        ThingUID subject = new ThingUID(thingType, \"thing\");\n \n-        assertEquals(\"type\", t.getThingTypeUID().getId());\n-        assertEquals(\"gaga\", t.getId());\n-        assertEquals(\"fake:type:gaga\", t.getAsString());\n+        assertEquals(\"fake\", subject.getBindingId());\n+        assertEquals(\"thing\", subject.getId());\n+        assertThat(subject.getAllSegments(), hasSize(3));\n+        assertEquals(\"fake:type:thing\", subject.getAsString());\n     }\n \n-    // @Test\n-    // public void testTwoSegments() {\n-    // ThingUID t = new ThingUID(\"fake\", \"gaga\");\n-    //\n-    // assertNull(t.getThingTypeId());\n-    // assertEquals(\"gaga\", t.getId());\n-    // assertEquals(\"fake::gaga\", t.getAsString());\n-    // }\n+    @Test\n+    public void testTwoSegments() {\n+        ThingUID subject = new ThingUID(\"fake\", \"thing\");\n+\n+        assertEquals(\"fake\", subject.getBindingId());\n+        assertEquals(\"thing\", subject.getId());\n+        assertThat(subject.getAllSegments(), hasSize(3));\n+        assertEquals(\"fake::thing\", subject.getAsString());\n+    }\n \n     @Test\n     public void testGetBridgeIds() {\n         ThingTypeUID thingType = new ThingTypeUID(\"fake\", \"type\");\n-        ThingUID t = new ThingUID(thingType, new ThingUID(\"fake\", \"something\", \"bridge\"), \"thing\");\n+        ThingUID subject = new ThingUID(thingType, new ThingUID(\"fake\", \"something\", \"bridge\"), \"thing\");\n \n-        assertEquals(\"fake:type:bridge:thing\", t.getAsString());\n-        assertEquals(1, t.getBridgeIds().size());\n-        assertEquals(\"bridge\", t.getBridgeIds().get(0));\n+        assertEquals(\"fake:type:bridge:thing\", subject.getAsString());\n+        assertThat(subject.getBridgeIds(), hasSize(1));\n+        assertEquals(\"bridge\", subject.getBridgeIds().get(0));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMzAxNw==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r408923017", "bodyText": "It's probably deprecated because this method always creates a new ThingTypeUID, whereas Thing.getThingTypeUID() returns an existing object. In a binding ThingHandler you typically already have a Thing object reference, so it will save CPU cycles and garbage (+ collection) by calling Thing.getThingTypeUID() and reusing the existing objects where possible.", "author": "wborn", "createdAt": "2020-04-15T15:15:46Z", "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/ThingUID.java", "diffHunk": "@@ -135,29 +135,11 @@ public ThingUID(String... segments) {\n         super(segments);\n     }\n \n-    /**\n-     * Returns the thing type id.\n-     *\n-     * @return thing type id\n-     * @deprecated use {@link Thing#getThingTypeUID()} instead.\n-     */\n-    @Deprecated\n-    public String getThingTypeId() {\n-        String thingType = getSegment(1);\n-        if (NO_THING_TYPE.equals(thingType)) {\n-            return null;\n-        } else {\n-            return thingType;\n-        }\n-    }\n-\n     /**\n      * Returns the thing type uid.\n      *\n      * @return thing type uid\n-     * @deprecated use {@link Thing#getThingTypeUID()} instead.", "originalCommit": "9538da6d235e2c9204a2c390acf12b5d4aab4259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEzOTQzNA==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r410139434", "bodyText": "true ... and it can return null which` breaks other stuff like discovery ... (see e.g. 2d88d58).", "author": "cweitkamp", "createdAt": "2020-04-17T10:36:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMzAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyNjkyNQ==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r410426925", "bodyText": "I finally found a way to remove it.", "author": "cweitkamp", "createdAt": "2020-04-17T19:28:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMzAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NzI3Ng==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r410457276", "bodyText": "Some more things to solve for the add-ons build: openhab/openhab-addons#7402 and openhab/openhab-addons#7403.", "author": "cweitkamp", "createdAt": "2020-04-17T20:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMzAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "674465944098923d857b6c67c150b858f3578f95", "chunk": "diff --git a/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/ThingUID.java b/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/ThingUID.java\nindex 29defac4b..c120d8f56 100644\n--- a/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/ThingUID.java\n+++ b/bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/ThingUID.java\n\n@@ -129,26 +133,12 @@ public class ThingUID extends UID {\n     /**\n      * Instantiates a new thing UID.\n      *\n-     * @param segments segments (must not be null)\n+     * @param segments segments\n      */\n     public ThingUID(String... segments) {\n         super(segments);\n     }\n \n-    /**\n-     * Returns the thing type uid.\n-     *\n-     * @return thing type uid\n-     */\n-    public ThingTypeUID getThingTypeUID() {\n-        String thingType = getSegment(1);\n-        if (NO_THING_TYPE.equals(thingType)) {\n-            return null;\n-        } else {\n-            return new ThingTypeUID(getSegment(0), getSegment(1));\n-        }\n-    }\n-\n     /**\n      * Returns the bridge ids.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4OTI5Ng==", "url": "https://github.com/openhab/openhab-core/pull/1414#discussion_r410489296", "bodyText": "Moved into separate PR (#1424) but kind of required for this PR.", "author": "cweitkamp", "createdAt": "2020-04-17T21:56:49Z", "path": "bundles/org.openhab.core.config.discovery/src/main/java/org/openhab/core/config/discovery/internal/DiscoveryResultImpl.java", "diffHunk": "@@ -45,31 +48,6 @@\n     DiscoveryResultImpl() {\n     }\n \n-    /**", "originalCommit": "a84dd66214076a85378942fa7f03b482ecf61f5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "674465944098923d857b6c67c150b858f3578f95", "chunk": "diff --git a/bundles/org.openhab.core.config.discovery/src/main/java/org/openhab/core/config/discovery/internal/DiscoveryResultImpl.java b/bundles/org.openhab.core.config.discovery/src/main/java/org/openhab/core/config/discovery/internal/DiscoveryResultImpl.java\nindex 2abcb22bf..0416ac5b0 100644\n--- a/bundles/org.openhab.core.config.discovery/src/main/java/org/openhab/core/config/discovery/internal/DiscoveryResultImpl.java\n+++ b/bundles/org.openhab.core.config.discovery/src/main/java/org/openhab/core/config/discovery/internal/DiscoveryResultImpl.java\n\n@@ -52,20 +54,20 @@ public class DiscoveryResultImpl implements DiscoveryResult {\n      * Creates a new instance of this class with the specified parameters.\n      *\n      * @param thingTypeUID the {@link ThingTypeUID}\n-     * @param thingUID the Thing UID to be set (must not be null). If a {@code Thing} disappears and is discovered\n-     *            again, the same {@code Thing} ID must be created. A typical {@code Thing} ID could be the serial\n-     *            number. It's usually <i>not</i> a product name.\n-     * @param properties the properties to be set (could be null or empty)\n-     * @param representationProperty the representationProperty to be set (could be null or empty)\n-     * @param label the human readable label to set (could be null or empty)\n-     * @param bridgeUID the unique bridge ID to be set\n+     * @param thingUID the {@link ThingUID} to be set. If a {@code Thing} disappears and is discovered again, the same\n+     *            {@code Thing} ID must be created. A typical {@code Thing} ID could be the serial number. It's usually\n+     *            <i>not</i> a product name.\n+     * @param bridgeUID the unique {@link Bridge} ID to be set\n+     * @param properties the properties to be set\n+     * @param representationProperty the representationProperty to be set\n+     * @param label the human readable label to set\n      * @param timeToLive time to live in seconds\n      *\n-     * @throws IllegalArgumentException if the Thing type UID or the Thing UID is null\n-     * @deprecated use {@link DiscoveryResultBuilder} instead\n+     * @throws IllegalArgumentException if the {@link ThingUID} is null or the time to live is less than 1\n+     * @deprecated use {@link DiscoveryResultBuilder} instead.\n      */\n     @Deprecated\n-    public DiscoveryResultImpl(@Nullable ThingTypeUID thingTypeUID, ThingUID thingUID, ThingUID bridgeUID,\n+    public DiscoveryResultImpl(@Nullable ThingTypeUID thingTypeUID, ThingUID thingUID, @Nullable ThingUID bridgeUID,\n             @Nullable Map<String, Object> properties, @Nullable String representationProperty, @Nullable String label,\n             long timeToLive) throws IllegalArgumentException {\n         if (thingUID == null) {\n"}}, {"oid": "674465944098923d857b6c67c150b858f3578f95", "url": "https://github.com/openhab/openhab-core/commit/674465944098923d857b6c67c150b858f3578f95", "message": "Clean-up after rebase\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-04-20T08:30:53Z", "type": "forcePushed"}, {"oid": "d9716ee868d1e55e5ce42bc034fcaa1620cc34cc", "url": "https://github.com/openhab/openhab-core/commit/d9716ee868d1e55e5ce42bc034fcaa1620cc34cc", "message": "Rebase and Spotless\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-04-26T10:32:52Z", "type": "forcePushed"}, {"oid": "8622f5e2b1811c77d452f0a08b04424685678577", "url": "https://github.com/openhab/openhab-core/commit/8622f5e2b1811c77d452f0a08b04424685678577", "message": "Rebase and Spotless\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-06-24T10:07:57Z", "type": "forcePushed"}, {"oid": "258e6ffe1162994a8acba2e88474b190352e7373", "url": "https://github.com/openhab/openhab-core/commit/258e6ffe1162994a8acba2e88474b190352e7373", "message": "Removed deprecated constructors and methods from Thing API\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-09-13T10:17:45Z", "type": "commit"}, {"oid": "258e6ffe1162994a8acba2e88474b190352e7373", "url": "https://github.com/openhab/openhab-core/commit/258e6ffe1162994a8acba2e88474b190352e7373", "message": "Removed deprecated constructors and methods from Thing API\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-09-13T10:17:45Z", "type": "forcePushed"}]}