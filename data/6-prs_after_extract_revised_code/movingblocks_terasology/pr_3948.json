{"pr_number": 3948, "pr_title": "feat(JOML) replace perspective and ortho with JOML impl", "pr_createdAt": "2020-05-10T17:49:15Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/3948", "timeline": [{"oid": "9442678e456d97705ee2d3edc8ac0ea4697ae7f0", "url": "https://github.com/MovingBlocks/Terasology/commit/9442678e456d97705ee2d3edc8ac0ea4697ae7f0", "message": "feat(JOML) replace perspective and ortho with JOML impl", "committedDate": "2020-05-10T17:47:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4Mzc0MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3948#discussion_r422683740", "bodyText": "The top and bottom parameters need to be switched.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    projectionMatrix = new Matrix4f().ortho(left,right,top,bottom,zNear,zFar).transpose();\n          \n          \n            \n                    projectionMatrix = new Matrix4f().ortho(left,right,bottom,top,zNear,zFar).transpose();", "author": "kBlaszczyk", "createdAt": "2020-05-10T18:47:00Z", "path": "engine/src/main/java/org/terasology/rendering/cameras/OrthographicCamera.java", "diffHunk": "@@ -89,7 +89,7 @@ public void updateMatrices(float fov) {\n             return;\n         }\n \n-        projectionMatrix = MatrixUtils.createOrthogonalProjectionMatrix(left, right, top, bottom, zNear, zFar);\n+        projectionMatrix = new Matrix4f().ortho(left,right,top,bottom,zNear,zFar).transpose();", "originalCommit": "9442678e456d97705ee2d3edc8ac0ea4697ae7f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09d200f9b2da8b3b4faf3793ad6f651c0c8bd529", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/cameras/OrthographicCamera.java b/engine/src/main/java/org/terasology/rendering/cameras/OrthographicCamera.java\nindex d963e370a..82acc5876 100644\n--- a/engine/src/main/java/org/terasology/rendering/cameras/OrthographicCamera.java\n+++ b/engine/src/main/java/org/terasology/rendering/cameras/OrthographicCamera.java\n\n@@ -89,7 +89,7 @@ public void updateMatrices(float fov) {\n             return;\n         }\n \n-        projectionMatrix = new Matrix4f().ortho(left,right,top,bottom,zNear,zFar).transpose();\n+        projectionMatrix = new Matrix4f().ortho(left,right,bottom,top,zNear,zFar).transpose();\n         viewMatrix = MatrixUtils.createViewMatrix(0f, 0.0f, 0f, viewingDirection.x, viewingDirection.y, viewingDirection.z, up.x, up.y, up.z);\n         normViewMatrix = MatrixUtils.createViewMatrix(0f, 0f, 0f, viewingDirection.x, viewingDirection.y, viewingDirection.z, up.x, up.y, up.z);\n \n"}}, {"oid": "09d200f9b2da8b3b4faf3793ad6f651c0c8bd529", "url": "https://github.com/MovingBlocks/Terasology/commit/09d200f9b2da8b3b4faf3793ad6f651c0c8bd529", "message": "Update engine/src/main/java/org/terasology/rendering/cameras/OrthographicCamera.java\n\nCo-authored-by: Kevin Blaszczyk <kevin.blaszczyk@gmail.com>", "committedDate": "2020-05-10T18:55:44Z", "type": "commit"}, {"oid": "8c3b89e372f5837a6fae467bad16f13d847fe707", "url": "https://github.com/MovingBlocks/Terasology/commit/8c3b89e372f5837a6fae467bad16f13d847fe707", "message": "correct formatting", "committedDate": "2020-05-10T18:56:34Z", "type": "commit"}, {"oid": "dd36fee7fd33e075074af993cdc791ea2fe59933", "url": "https://github.com/MovingBlocks/Terasology/commit/dd36fee7fd33e075074af993cdc791ea2fe59933", "message": "added test cases for PerspectiveCameraTest and OrthogonalCameraTest", "committedDate": "2020-05-10T23:33:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NTk4OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3948#discussion_r426165988", "bodyText": "I haven't worked in this part of the code, so do let me know if there are standard practices to brush up on. But being new to this, my reaction on seeing a test like this is: wha?\nThis PR changes a value from 5.0273395 to -5.235E-1. Why? Is it to account  for an implementation change, necessary for the new version to pass? Or is it an adjustment to the test data that makes a better test case?\nWhere do these numbers with with four (or more) significant figures come from? Does it matter what they are, or are they arbitrary values the test is using as a starting place?", "author": "keturn", "createdAt": "2020-05-16T15:59:18Z", "path": "engine-tests/src/test/java/org/terasology/rendering/cameras/PerspectiveCameraTest.java", "diffHunk": "@@ -55,24 +56,28 @@ public void testPerspectiveCamera() {\n         camera.setOrientation(new Quat4f(45, .001f, .001f));\n         camera.updateMatrices();\n \n-        Matrix4f viewMatrix = new Matrix4f(5.0273395f, 0.0f, 0.0f, 0.0f\n-                , 0.0f, 8.937492f, 0.0f, 0.0f\n-                , 0.0f, 0.0f, -1.00004f, -0.20000401f\n-                , 0.0f, 0.0f, -1.0f, 0.0f);\n+        Matrix4f viewMatrix = new Matrix4f(-5.253E-1f, 0.000E+0f, 8.509E-1f, 0.000E+0f,\n+            8.509E-4f, 1.000E+0f, 5.253E-4f, 0.000E+0f,\n+            -8.509E-1f, 1.000E-3f, -5.253E-1f, 0.000E+0f,\n+            -0.000E+0f, -0.000E+0f, -0.000E+0f, 1.000E+0f);", "originalCommit": "dd36fee7fd33e075074af993cdc791ea2fe59933", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NjE5Ng==", "url": "https://github.com/MovingBlocks/Terasology/pull/3948#discussion_r426166196", "bodyText": "(I'm glad you moved those line-starting commas, though. \ud83d\ude42 I don't think start-with-comma is a standard this repository follows.)", "author": "keturn", "createdAt": "2020-05-16T16:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NTk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2OTUzNw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3948#discussion_r426169537", "bodyText": "used some random position and tested it with the old code and then moved it back to this. the test might not be necessary.", "author": "pollend", "createdAt": "2020-05-16T16:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NTk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3ODI2MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3948#discussion_r426178260", "bodyText": "we talked about this on discord and I agreed that if these methods are just calling through to joml's orthographic and perspective methods, we don't learn much by testing the arithmetic ourselves.", "author": "keturn", "createdAt": "2020-05-16T18:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NTk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "147a0c22c2f16fa162d0829dc4674a26bfaf0f24", "chunk": "diff --git a/engine-tests/src/test/java/org/terasology/rendering/cameras/PerspectiveCameraTest.java b/engine-tests/src/test/java/org/terasology/rendering/cameras/PerspectiveCameraTest.java\ndeleted file mode 100644\nindex a79dcb360..000000000\n--- a/engine-tests/src/test/java/org/terasology/rendering/cameras/PerspectiveCameraTest.java\n+++ /dev/null\n\n@@ -1,83 +0,0 @@\n-/*\n- * Copyright 2017 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.terasology.rendering.cameras;\n-\n-import org.joml.Matrix4f;\n-import org.joml.Quaternionf;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.terasology.config.Config;\n-import org.terasology.config.RenderingConfig;\n-import org.terasology.context.internal.ContextImpl;\n-import org.terasology.context.internal.MockContext;\n-import org.terasology.engine.subsystem.DisplayDevice;\n-import org.terasology.math.geom.Quat4f;\n-import org.terasology.registry.CoreRegistry;\n-import org.terasology.testUtil.TeraAssert;\n-import org.terasology.world.WorldProvider;\n-\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-public class PerspectiveCameraTest {\n-\n-\n-    @Before\n-    public void setUp() {\n-        Config config = new Config(new MockContext());\n-        config.loadDefaults();\n-        CoreRegistry.setContext(new ContextImpl());\n-        CoreRegistry.put(Config.class, config);\n-    }\n-\n-    @Test\n-    public void testPerspectiveCamera() {\n-        WorldProvider provider = mock(WorldProvider.class);\n-        DisplayDevice device = mock(DisplayDevice.class);\n-        when(device.getDisplayWidth()).thenReturn(1280);\n-        when(device.getDisplayHeight()).thenReturn(720);\n-        RenderingConfig config = new RenderingConfig();\n-\n-\n-        PerspectiveCamera camera = new PerspectiveCamera(provider, config, device);\n-        camera.setOrientation(new Quat4f(45, .001f, .001f));\n-        camera.updateMatrices();\n-\n-        Matrix4f viewMatrix = new Matrix4f(-5.253E-1f, 0.000E+0f, 8.509E-1f, 0.000E+0f,\n-            8.509E-4f, 1.000E+0f, 5.253E-4f, 0.000E+0f,\n-            -8.509E-1f, 1.000E-3f, -5.253E-1f, 0.000E+0f,\n-            -0.000E+0f, -0.000E+0f, -0.000E+0f, 1.000E+0f);\n-        Matrix4f projectionMatrix = new Matrix4f(5.0273395f, 0.0f, 0.0f, 0.0f\n-            , 0.0f, 8.937492f, 0.0f, 0.0f\n-            , 0.0f, 0.0f, -1.00004f, -0.20000401f\n-            , 0.0f, 0.0f, -1.0f, 0.0f);\n-        Matrix4f normViewMatrix = new Matrix4f(-.525322f, 0.0f, 0.8509036f, -0.0f\n-            , 8.509035E-4f, 0.9999995f, 5.25322E-4f, -0.0f,\n-            -0.85090315f, 0.001f, -0.5253218f, -0.0f,\n-            0.0f, 0.0f, 0.0f, 1.0f);\n-\n-        Matrix4f reflectedNormViewMatrix =  new Matrix4f( -5.253E-1f, 0.000E+0f, 8.509E-1f,   0.000E+0f,\n-            8.509E-4f, -1.000E+0f, 5.253E-4f,  0.000E+0f,\n-            -8.509E-1f,  -1.000E-3f, -5.253E-1f,  0.000E+0f,\n-            0.000E+0f,  0.000E+0f,  0.000E+0f,  1.000E+0f);\n-\n-        TeraAssert.assertEquals(viewMatrix, camera.getViewMatrix(), 0.001f);\n-        TeraAssert.assertEquals(projectionMatrix, camera.getProjectionMatrix(), 0.001f);\n-        TeraAssert.assertEquals(normViewMatrix, camera.getNormViewMatrix(), 0.001f);\n-        camera.setReflected(true);\n-        TeraAssert.assertEquals(reflectedNormViewMatrix, camera.getNormViewMatrix(), 0.001f);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NzQ5Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3948#discussion_r426167497", "bodyText": "Here we've got what looks to be the same values as in viewMatrix, almost.\nAre those the same numbers, but displayed a little differently due to binary-floating-point vs decimal representations? Or is the change of 0.01% significant? Could this have been a copy of viewMatrix instead?\nI don't believe it's necessary to remove all numbers from tests (in a math library, even!), but I'm failing to tell signal from noise here.", "author": "keturn", "createdAt": "2020-05-16T16:17:23Z", "path": "engine-tests/src/test/java/org/terasology/rendering/cameras/PerspectiveCameraTest.java", "diffHunk": "@@ -55,24 +56,28 @@ public void testPerspectiveCamera() {\n         camera.setOrientation(new Quat4f(45, .001f, .001f));\n         camera.updateMatrices();\n \n-        Matrix4f viewMatrix = new Matrix4f(5.0273395f, 0.0f, 0.0f, 0.0f\n-                , 0.0f, 8.937492f, 0.0f, 0.0f\n-                , 0.0f, 0.0f, -1.00004f, -0.20000401f\n-                , 0.0f, 0.0f, -1.0f, 0.0f);\n+        Matrix4f viewMatrix = new Matrix4f(-5.253E-1f, 0.000E+0f, 8.509E-1f, 0.000E+0f,\n+            8.509E-4f, 1.000E+0f, 5.253E-4f, 0.000E+0f,\n+            -8.509E-1f, 1.000E-3f, -5.253E-1f, 0.000E+0f,\n+            -0.000E+0f, -0.000E+0f, -0.000E+0f, 1.000E+0f);\n         Matrix4f projectionMatrix = new Matrix4f(5.0273395f, 0.0f, 0.0f, 0.0f\n-                , 0.0f, 8.937492f, 0.0f, 0.0f\n-                , 0.0f, 0.0f, -1.00004f, -0.20000401f\n-                , 0.0f, 0.0f, -1.0f, 0.0f);\n-        Matrix4f normViewMatrix = new Matrix4f(0.27303523f,0.0f,-0.962004f,-0.0f\n-                ,-0.96200305f,0.0014514439f,-0.27303496f,-0.0f,\n-                0.0013962948f,0.99999887f,3.962953f,-0.0f,\n-                0.0f,0.0f,0.0f,1.0f);\n+            , 0.0f, 8.937492f, 0.0f, 0.0f\n+            , 0.0f, 0.0f, -1.00004f, -0.20000401f\n+            , 0.0f, 0.0f, -1.0f, 0.0f);\n+        Matrix4f normViewMatrix = new Matrix4f(-.525322f, 0.0f, 0.8509036f, -0.0f\n+            , 8.509035E-4f, 0.9999995f, 5.25322E-4f, -0.0f,\n+            -0.85090315f, 0.001f, -0.5253218f, -0.0f,\n+            0.0f, 0.0f, 0.0f, 1.0f);", "originalCommit": "dd36fee7fd33e075074af993cdc791ea2fe59933", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2ODI3NA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3948#discussion_r426168274", "bodyText": "On a second reading, I see this test does have that camera.setOrientation with the 0.001 radian pitch and yaw, so maybe those tiny differences are significant?", "author": "keturn", "createdAt": "2020-05-16T16:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NzQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "147a0c22c2f16fa162d0829dc4674a26bfaf0f24", "chunk": "diff --git a/engine-tests/src/test/java/org/terasology/rendering/cameras/PerspectiveCameraTest.java b/engine-tests/src/test/java/org/terasology/rendering/cameras/PerspectiveCameraTest.java\ndeleted file mode 100644\nindex a79dcb360..000000000\n--- a/engine-tests/src/test/java/org/terasology/rendering/cameras/PerspectiveCameraTest.java\n+++ /dev/null\n\n@@ -1,83 +0,0 @@\n-/*\n- * Copyright 2017 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.terasology.rendering.cameras;\n-\n-import org.joml.Matrix4f;\n-import org.joml.Quaternionf;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.terasology.config.Config;\n-import org.terasology.config.RenderingConfig;\n-import org.terasology.context.internal.ContextImpl;\n-import org.terasology.context.internal.MockContext;\n-import org.terasology.engine.subsystem.DisplayDevice;\n-import org.terasology.math.geom.Quat4f;\n-import org.terasology.registry.CoreRegistry;\n-import org.terasology.testUtil.TeraAssert;\n-import org.terasology.world.WorldProvider;\n-\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-public class PerspectiveCameraTest {\n-\n-\n-    @Before\n-    public void setUp() {\n-        Config config = new Config(new MockContext());\n-        config.loadDefaults();\n-        CoreRegistry.setContext(new ContextImpl());\n-        CoreRegistry.put(Config.class, config);\n-    }\n-\n-    @Test\n-    public void testPerspectiveCamera() {\n-        WorldProvider provider = mock(WorldProvider.class);\n-        DisplayDevice device = mock(DisplayDevice.class);\n-        when(device.getDisplayWidth()).thenReturn(1280);\n-        when(device.getDisplayHeight()).thenReturn(720);\n-        RenderingConfig config = new RenderingConfig();\n-\n-\n-        PerspectiveCamera camera = new PerspectiveCamera(provider, config, device);\n-        camera.setOrientation(new Quat4f(45, .001f, .001f));\n-        camera.updateMatrices();\n-\n-        Matrix4f viewMatrix = new Matrix4f(-5.253E-1f, 0.000E+0f, 8.509E-1f, 0.000E+0f,\n-            8.509E-4f, 1.000E+0f, 5.253E-4f, 0.000E+0f,\n-            -8.509E-1f, 1.000E-3f, -5.253E-1f, 0.000E+0f,\n-            -0.000E+0f, -0.000E+0f, -0.000E+0f, 1.000E+0f);\n-        Matrix4f projectionMatrix = new Matrix4f(5.0273395f, 0.0f, 0.0f, 0.0f\n-            , 0.0f, 8.937492f, 0.0f, 0.0f\n-            , 0.0f, 0.0f, -1.00004f, -0.20000401f\n-            , 0.0f, 0.0f, -1.0f, 0.0f);\n-        Matrix4f normViewMatrix = new Matrix4f(-.525322f, 0.0f, 0.8509036f, -0.0f\n-            , 8.509035E-4f, 0.9999995f, 5.25322E-4f, -0.0f,\n-            -0.85090315f, 0.001f, -0.5253218f, -0.0f,\n-            0.0f, 0.0f, 0.0f, 1.0f);\n-\n-        Matrix4f reflectedNormViewMatrix =  new Matrix4f( -5.253E-1f, 0.000E+0f, 8.509E-1f,   0.000E+0f,\n-            8.509E-4f, -1.000E+0f, 5.253E-4f,  0.000E+0f,\n-            -8.509E-1f,  -1.000E-3f, -5.253E-1f,  0.000E+0f,\n-            0.000E+0f,  0.000E+0f,  0.000E+0f,  1.000E+0f);\n-\n-        TeraAssert.assertEquals(viewMatrix, camera.getViewMatrix(), 0.001f);\n-        TeraAssert.assertEquals(projectionMatrix, camera.getProjectionMatrix(), 0.001f);\n-        TeraAssert.assertEquals(normViewMatrix, camera.getNormViewMatrix(), 0.001f);\n-        camera.setReflected(true);\n-        TeraAssert.assertEquals(reflectedNormViewMatrix, camera.getNormViewMatrix(), 0.001f);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2Nzk1OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3948#discussion_r426167959", "bodyText": "I bet there's a way we can make this assertion method easier to read and give more useful output on fail. I think you're following established precedent here, so I certainly won't hold up a review on that, but maybe a little side project for sometime.", "author": "keturn", "createdAt": "2020-05-16T16:22:39Z", "path": "engine-tests/src/main/java/org/terasology/testUtil/TeraAssert.java", "diffHunk": "@@ -65,6 +66,34 @@ public static void assertEquals(Vector3f expected, Vector3f actual, float error)\n         }\n     }\n \n+    public static void assertEquals(Matrix4fc expected, Matrix4fc actual, float error) {\n+        if (expected == null) {\n+            assertNull(actual);\n+        } else {\n+            assertNotNull(actual);\n+            Supplier<String> errorMessageSupplier = () -> \"Expected \\n\" + expected + \" Actual \\n\" + actual;\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m00(), actual.m00(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m01(), actual.m01(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m02(), actual.m02(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m03(), actual.m03(), error, errorMessageSupplier);\n+\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m10(), actual.m10(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m11(), actual.m11(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m12(), actual.m12(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m13(), actual.m13(), error, errorMessageSupplier);\n+\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m20(), actual.m20(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m21(), actual.m21(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m22(), actual.m22(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m23(), actual.m23(), error, errorMessageSupplier);\n+\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m30(), actual.m30(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m31(), actual.m31(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m32(), actual.m32(), error, errorMessageSupplier);\n+            org.junit.jupiter.api.Assertions.assertEquals(expected.m33(), actual.m33(), error, errorMessageSupplier);", "originalCommit": "dd36fee7fd33e075074af993cdc791ea2fe59933", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "147a0c22c2f16fa162d0829dc4674a26bfaf0f24", "chunk": "diff --git a/engine-tests/src/main/java/org/terasology/testUtil/TeraAssert.java b/engine-tests/src/main/java/org/terasology/testUtil/TeraAssert.java\nindex 861259caa..b9e0c9adb 100644\n--- a/engine-tests/src/main/java/org/terasology/testUtil/TeraAssert.java\n+++ b/engine-tests/src/main/java/org/terasology/testUtil/TeraAssert.java\n\n@@ -66,34 +65,6 @@ public static void assertEquals(Vector3f expected, Vector3f actual, float error)\n         }\n     }\n \n-    public static void assertEquals(Matrix4fc expected, Matrix4fc actual, float error) {\n-        if (expected == null) {\n-            assertNull(actual);\n-        } else {\n-            assertNotNull(actual);\n-            Supplier<String> errorMessageSupplier = () -> \"Expected \\n\" + expected + \" Actual \\n\" + actual;\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m00(), actual.m00(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m01(), actual.m01(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m02(), actual.m02(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m03(), actual.m03(), error, errorMessageSupplier);\n-\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m10(), actual.m10(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m11(), actual.m11(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m12(), actual.m12(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m13(), actual.m13(), error, errorMessageSupplier);\n-\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m20(), actual.m20(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m21(), actual.m21(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m22(), actual.m22(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m23(), actual.m23(), error, errorMessageSupplier);\n-\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m30(), actual.m30(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m31(), actual.m31(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m32(), actual.m32(), error, errorMessageSupplier);\n-            org.junit.jupiter.api.Assertions.assertEquals(expected.m33(), actual.m33(), error, errorMessageSupplier);\n-        }\n-    }\n-\n     public static void assertEquals(Vector2f expected, Vector2f actual, float error) {\n         if (expected == null) {\n             assertNull(actual);\n"}}, {"oid": "147a0c22c2f16fa162d0829dc4674a26bfaf0f24", "url": "https://github.com/MovingBlocks/Terasology/commit/147a0c22c2f16fa162d0829dc4674a26bfaf0f24", "message": "removed camera tests", "committedDate": "2020-05-16T17:27:05Z", "type": "commit"}]}