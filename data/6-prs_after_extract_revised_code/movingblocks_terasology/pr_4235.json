{"pr_number": 4235, "pr_title": "feature(autoconfig): migrate SystemConfig", "pr_createdAt": "2020-11-06T13:48:25Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4235", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MTU1NA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r519171554", "bodyText": "Where do these default values come from?", "author": "skaldarnar", "createdAt": "2020-11-07T12:15:25Z", "path": "engine/src/main/java/org/terasology/config/SystemConfig.java", "diffHunk": "@@ -16,99 +16,63 @@\n \n package org.terasology.config;\n \n+import org.terasology.config.flexible.AutoConfig;\n+import org.terasology.config.flexible.Setting;\n+import org.terasology.config.flexible.constraints.NumberRangeConstraint;\n+\n import java.util.Locale;\n import java.util.Locale.Category;\n \n-public class SystemConfig {\n+import static org.terasology.config.flexible.SettingArgument.constraint;\n+import static org.terasology.config.flexible.SettingArgument.defaultValue;\n+import static org.terasology.config.flexible.SettingArgument.type;\n+\n+public class SystemConfig extends AutoConfig {\n     public static final String SAVED_GAMES_ENABLED_PROPERTY = \"org.terasology.savedGamesEnabled\";\n     public static final String PERMISSIVE_SECURITY_ENABLED_PROPERTY = \"org.terasology.permissiveSecurityEnabled\";\n \n-    private long dayNightLengthInMs;\n-    private int maxThreads;\n-    private int maxSecondsBetweenSaves;\n-    private int maxUnloadedChunksPercentageTillSave;\n-    private boolean debugEnabled;\n-    private boolean monitoringEnabled;\n-    private boolean writeSaveGamesEnabled;\n-    private long chunkGenerationFailTimeoutInMs;\n-    private String locale;\n-\n-    public long getDayNightLengthInMs() {\n-        return dayNightLengthInMs;\n-    }\n-\n-    public void setDayNightLengthInMs(long dayNightLengthInMs) {\n-        this.dayNightLengthInMs = dayNightLengthInMs;\n-    }\n-\n-    public int getMaxThreads() {\n-        return maxThreads;\n-    }\n-\n-    public void setMaxThreads(int maxThreads) {\n-        this.maxThreads = maxThreads;\n-    }\n-\n-    public int getMaxSecondsBetweenSaves() {\n-        return maxSecondsBetweenSaves;\n-    }\n-\n-    public void setMaxSecondsBetweenSaves(int maxSecondsBetweenSaves) {\n-        this.maxSecondsBetweenSaves = maxSecondsBetweenSaves;\n-    }\n-\n-    public int getMaxUnloadedChunksPercentageTillSave() {\n-        return maxUnloadedChunksPercentageTillSave;\n-    }\n-\n-    public void setMaxUnloadedChunksPercentageTillSave(int maxUnloadedChunksPercentageTillSave) {\n-        this.maxUnloadedChunksPercentageTillSave = maxUnloadedChunksPercentageTillSave;\n-    }\n-\n-    public boolean isDebugEnabled() {\n-        return debugEnabled;\n-    }\n-\n-    public void setDebugEnabled(boolean debugEnabled) {\n-        this.debugEnabled = debugEnabled;\n-    }\n-\n-    public boolean isMonitoringEnabled() {\n-        return monitoringEnabled;\n-    }\n-\n-    public void setMonitoringEnabled(boolean monitoringEnabled) {\n-        this.monitoringEnabled = monitoringEnabled;\n-    }\n-\n-    public boolean isWriteSaveGamesEnabled() {\n-        String property = System.getProperty(SAVED_GAMES_ENABLED_PROPERTY);\n-        if (property != null) {\n-            return Boolean.parseBoolean(property);\n-        }\n-        return writeSaveGamesEnabled;\n-    }\n-\n-    public void setWriteSaveGamesEnabled(boolean writeSaveGamesEnabled) {\n-        this.writeSaveGamesEnabled = writeSaveGamesEnabled;\n-    }\n-\n-    public long getChunkGenerationFailTimeoutInMs() {\n-        return chunkGenerationFailTimeoutInMs;\n-    }\n-\n-    public void setChunkGenerationFailTimeoutInMs(long chunkGenerationFailTimeoutInMs) {\n-        this.chunkGenerationFailTimeoutInMs = chunkGenerationFailTimeoutInMs;\n-    }\n-\n-    public Locale getLocale() {\n-        if (locale == null) {\n-            setLocale(Locale.getDefault(Category.DISPLAY));\n-        }\n-        return Locale.forLanguageTag(locale);\n-    }\n-\n-    public void setLocale(Locale locale) {\n-        this.locale = locale.toLanguageTag();\n-    }\n+    public final Setting<Long> dayNightLengthInMs = setting(\n+            type(Long.class),\n+            defaultValue(1800000L),\n+            constraint(new NumberRangeConstraint<>(0L, Long.MAX_VALUE, false, false))\n+    );\n+    public final Setting<Integer> maxThreads = setting(\n+            type(Integer.class),\n+            defaultValue(Runtime.getRuntime().availableProcessors() - 1),", "originalCommit": "b7cd86bc95416aa3b2316a30dbde9d58af2b37f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3Mjk0Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r519172942", "bodyText": "This value from recommendations for threading(Google) and i saw it in issue about FlexableConfig.\n(Default value in config is 2)\nAll other value from config.", "author": "DarkWeird", "createdAt": "2020-11-07T12:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MTU1NA=="}, {"id": "PRRC_kwDOABXxN84sIY8b", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r740396827", "bodyText": "On single-core systems, this comes out to zero. \ud83d\udca5", "author": "keturn", "createdAt": "2021-11-01T17:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MTU1NA=="}, {"id": "PRRC_kwDOABXxN84sIZNb", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r740397915", "bodyText": "Ok. Will fixed.... Where are you found single core? VM?", "author": "DarkWeird", "createdAt": "2021-11-01T17:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MTU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "f55c867e037ff85c73c2e3623eb0cbf8471c5a22", "chunk": "diff --git a/engine/src/main/java/org/terasology/config/SystemConfig.java b/engine/src/main/java/org/terasology/config/SystemConfig.java\nindex d2550a58c..69070bbed 100644\n--- a/engine/src/main/java/org/terasology/config/SystemConfig.java\n+++ b/engine/src/main/java/org/terasology/config/SystemConfig.java\n\n@@ -49,7 +49,7 @@\n     public final Setting<Integer> maxUnloadedChunksPercentageTillSave = setting(\n             type(Integer.class),\n             defaultValue(40),\n-            constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))\n+            constraint(new NumberRangeConstraint<>(0, 100, false, false))\n     );\n     public final Setting<Boolean> debugEnabled = setting(\n             type(Boolean.class),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MTYyOA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r519171628", "bodyText": "If this is about percentage, shouldn't the range constraint be [0...100]?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))\n          \n          \n            \n                        constraint(new NumberRangeConstraint<>(0, 100, false, false))", "author": "skaldarnar", "createdAt": "2020-11-07T12:16:25Z", "path": "engine/src/main/java/org/terasology/config/SystemConfig.java", "diffHunk": "@@ -16,99 +16,63 @@\n \n package org.terasology.config;\n \n+import org.terasology.config.flexible.AutoConfig;\n+import org.terasology.config.flexible.Setting;\n+import org.terasology.config.flexible.constraints.NumberRangeConstraint;\n+\n import java.util.Locale;\n import java.util.Locale.Category;\n \n-public class SystemConfig {\n+import static org.terasology.config.flexible.SettingArgument.constraint;\n+import static org.terasology.config.flexible.SettingArgument.defaultValue;\n+import static org.terasology.config.flexible.SettingArgument.type;\n+\n+public class SystemConfig extends AutoConfig {\n     public static final String SAVED_GAMES_ENABLED_PROPERTY = \"org.terasology.savedGamesEnabled\";\n     public static final String PERMISSIVE_SECURITY_ENABLED_PROPERTY = \"org.terasology.permissiveSecurityEnabled\";\n \n-    private long dayNightLengthInMs;\n-    private int maxThreads;\n-    private int maxSecondsBetweenSaves;\n-    private int maxUnloadedChunksPercentageTillSave;\n-    private boolean debugEnabled;\n-    private boolean monitoringEnabled;\n-    private boolean writeSaveGamesEnabled;\n-    private long chunkGenerationFailTimeoutInMs;\n-    private String locale;\n-\n-    public long getDayNightLengthInMs() {\n-        return dayNightLengthInMs;\n-    }\n-\n-    public void setDayNightLengthInMs(long dayNightLengthInMs) {\n-        this.dayNightLengthInMs = dayNightLengthInMs;\n-    }\n-\n-    public int getMaxThreads() {\n-        return maxThreads;\n-    }\n-\n-    public void setMaxThreads(int maxThreads) {\n-        this.maxThreads = maxThreads;\n-    }\n-\n-    public int getMaxSecondsBetweenSaves() {\n-        return maxSecondsBetweenSaves;\n-    }\n-\n-    public void setMaxSecondsBetweenSaves(int maxSecondsBetweenSaves) {\n-        this.maxSecondsBetweenSaves = maxSecondsBetweenSaves;\n-    }\n-\n-    public int getMaxUnloadedChunksPercentageTillSave() {\n-        return maxUnloadedChunksPercentageTillSave;\n-    }\n-\n-    public void setMaxUnloadedChunksPercentageTillSave(int maxUnloadedChunksPercentageTillSave) {\n-        this.maxUnloadedChunksPercentageTillSave = maxUnloadedChunksPercentageTillSave;\n-    }\n-\n-    public boolean isDebugEnabled() {\n-        return debugEnabled;\n-    }\n-\n-    public void setDebugEnabled(boolean debugEnabled) {\n-        this.debugEnabled = debugEnabled;\n-    }\n-\n-    public boolean isMonitoringEnabled() {\n-        return monitoringEnabled;\n-    }\n-\n-    public void setMonitoringEnabled(boolean monitoringEnabled) {\n-        this.monitoringEnabled = monitoringEnabled;\n-    }\n-\n-    public boolean isWriteSaveGamesEnabled() {\n-        String property = System.getProperty(SAVED_GAMES_ENABLED_PROPERTY);\n-        if (property != null) {\n-            return Boolean.parseBoolean(property);\n-        }\n-        return writeSaveGamesEnabled;\n-    }\n-\n-    public void setWriteSaveGamesEnabled(boolean writeSaveGamesEnabled) {\n-        this.writeSaveGamesEnabled = writeSaveGamesEnabled;\n-    }\n-\n-    public long getChunkGenerationFailTimeoutInMs() {\n-        return chunkGenerationFailTimeoutInMs;\n-    }\n-\n-    public void setChunkGenerationFailTimeoutInMs(long chunkGenerationFailTimeoutInMs) {\n-        this.chunkGenerationFailTimeoutInMs = chunkGenerationFailTimeoutInMs;\n-    }\n-\n-    public Locale getLocale() {\n-        if (locale == null) {\n-            setLocale(Locale.getDefault(Category.DISPLAY));\n-        }\n-        return Locale.forLanguageTag(locale);\n-    }\n-\n-    public void setLocale(Locale locale) {\n-        this.locale = locale.toLanguageTag();\n-    }\n+    public final Setting<Long> dayNightLengthInMs = setting(\n+            type(Long.class),\n+            defaultValue(1800000L),\n+            constraint(new NumberRangeConstraint<>(0L, Long.MAX_VALUE, false, false))\n+    );\n+    public final Setting<Integer> maxThreads = setting(\n+            type(Integer.class),\n+            defaultValue(Runtime.getRuntime().availableProcessors() - 1),\n+            constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))\n+    );\n+    public final Setting<Integer> maxSecondsBetweenSaves = setting(\n+            type(Integer.class),\n+            defaultValue(60),\n+            constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))\n+    );\n+    public final Setting<Integer> maxUnloadedChunksPercentageTillSave = setting(\n+            type(Integer.class),\n+            defaultValue(40),\n+            constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))", "originalCommit": "b7cd86bc95416aa3b2316a30dbde9d58af2b37f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f55c867e037ff85c73c2e3623eb0cbf8471c5a22", "chunk": "diff --git a/engine/src/main/java/org/terasology/config/SystemConfig.java b/engine/src/main/java/org/terasology/config/SystemConfig.java\nindex d2550a58c..69070bbed 100644\n--- a/engine/src/main/java/org/terasology/config/SystemConfig.java\n+++ b/engine/src/main/java/org/terasology/config/SystemConfig.java\n\n@@ -49,7 +49,7 @@\n     public final Setting<Integer> maxUnloadedChunksPercentageTillSave = setting(\n             type(Integer.class),\n             defaultValue(40),\n-            constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))\n+            constraint(new NumberRangeConstraint<>(0, 100, false, false))\n     );\n     public final Setting<Boolean> debugEnabled = setting(\n             type(Boolean.class),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MTczMA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r519171730", "bodyText": "I think this should be false - normal players should not see the debug info by default. (Assuming this is about the in-game debug view...)", "author": "skaldarnar", "createdAt": "2020-11-07T12:17:47Z", "path": "engine/src/main/java/org/terasology/config/SystemConfig.java", "diffHunk": "@@ -16,99 +16,63 @@\n \n package org.terasology.config;\n \n+import org.terasology.config.flexible.AutoConfig;\n+import org.terasology.config.flexible.Setting;\n+import org.terasology.config.flexible.constraints.NumberRangeConstraint;\n+\n import java.util.Locale;\n import java.util.Locale.Category;\n \n-public class SystemConfig {\n+import static org.terasology.config.flexible.SettingArgument.constraint;\n+import static org.terasology.config.flexible.SettingArgument.defaultValue;\n+import static org.terasology.config.flexible.SettingArgument.type;\n+\n+public class SystemConfig extends AutoConfig {\n     public static final String SAVED_GAMES_ENABLED_PROPERTY = \"org.terasology.savedGamesEnabled\";\n     public static final String PERMISSIVE_SECURITY_ENABLED_PROPERTY = \"org.terasology.permissiveSecurityEnabled\";\n \n-    private long dayNightLengthInMs;\n-    private int maxThreads;\n-    private int maxSecondsBetweenSaves;\n-    private int maxUnloadedChunksPercentageTillSave;\n-    private boolean debugEnabled;\n-    private boolean monitoringEnabled;\n-    private boolean writeSaveGamesEnabled;\n-    private long chunkGenerationFailTimeoutInMs;\n-    private String locale;\n-\n-    public long getDayNightLengthInMs() {\n-        return dayNightLengthInMs;\n-    }\n-\n-    public void setDayNightLengthInMs(long dayNightLengthInMs) {\n-        this.dayNightLengthInMs = dayNightLengthInMs;\n-    }\n-\n-    public int getMaxThreads() {\n-        return maxThreads;\n-    }\n-\n-    public void setMaxThreads(int maxThreads) {\n-        this.maxThreads = maxThreads;\n-    }\n-\n-    public int getMaxSecondsBetweenSaves() {\n-        return maxSecondsBetweenSaves;\n-    }\n-\n-    public void setMaxSecondsBetweenSaves(int maxSecondsBetweenSaves) {\n-        this.maxSecondsBetweenSaves = maxSecondsBetweenSaves;\n-    }\n-\n-    public int getMaxUnloadedChunksPercentageTillSave() {\n-        return maxUnloadedChunksPercentageTillSave;\n-    }\n-\n-    public void setMaxUnloadedChunksPercentageTillSave(int maxUnloadedChunksPercentageTillSave) {\n-        this.maxUnloadedChunksPercentageTillSave = maxUnloadedChunksPercentageTillSave;\n-    }\n-\n-    public boolean isDebugEnabled() {\n-        return debugEnabled;\n-    }\n-\n-    public void setDebugEnabled(boolean debugEnabled) {\n-        this.debugEnabled = debugEnabled;\n-    }\n-\n-    public boolean isMonitoringEnabled() {\n-        return monitoringEnabled;\n-    }\n-\n-    public void setMonitoringEnabled(boolean monitoringEnabled) {\n-        this.monitoringEnabled = monitoringEnabled;\n-    }\n-\n-    public boolean isWriteSaveGamesEnabled() {\n-        String property = System.getProperty(SAVED_GAMES_ENABLED_PROPERTY);\n-        if (property != null) {\n-            return Boolean.parseBoolean(property);\n-        }\n-        return writeSaveGamesEnabled;\n-    }\n-\n-    public void setWriteSaveGamesEnabled(boolean writeSaveGamesEnabled) {\n-        this.writeSaveGamesEnabled = writeSaveGamesEnabled;\n-    }\n-\n-    public long getChunkGenerationFailTimeoutInMs() {\n-        return chunkGenerationFailTimeoutInMs;\n-    }\n-\n-    public void setChunkGenerationFailTimeoutInMs(long chunkGenerationFailTimeoutInMs) {\n-        this.chunkGenerationFailTimeoutInMs = chunkGenerationFailTimeoutInMs;\n-    }\n-\n-    public Locale getLocale() {\n-        if (locale == null) {\n-            setLocale(Locale.getDefault(Category.DISPLAY));\n-        }\n-        return Locale.forLanguageTag(locale);\n-    }\n-\n-    public void setLocale(Locale locale) {\n-        this.locale = locale.toLanguageTag();\n-    }\n+    public final Setting<Long> dayNightLengthInMs = setting(\n+            type(Long.class),\n+            defaultValue(1800000L),\n+            constraint(new NumberRangeConstraint<>(0L, Long.MAX_VALUE, false, false))\n+    );\n+    public final Setting<Integer> maxThreads = setting(\n+            type(Integer.class),\n+            defaultValue(Runtime.getRuntime().availableProcessors() - 1),\n+            constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))\n+    );\n+    public final Setting<Integer> maxSecondsBetweenSaves = setting(\n+            type(Integer.class),\n+            defaultValue(60),\n+            constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))\n+    );\n+    public final Setting<Integer> maxUnloadedChunksPercentageTillSave = setting(\n+            type(Integer.class),\n+            defaultValue(40),\n+            constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))\n+    );\n+    public final Setting<Boolean> debugEnabled = setting(\n+            type(Boolean.class),\n+            defaultValue(true)", "originalCommit": "b7cd86bc95416aa3b2316a30dbde9d58af2b37f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MzAyMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r519173021", "bodyText": "Oh yeah...\nI  enable it on fresh install always", "author": "DarkWeird", "createdAt": "2020-11-07T12:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MTczMA=="}], "type": "inlineReview", "revised_code": {"commit": "f55c867e037ff85c73c2e3623eb0cbf8471c5a22", "chunk": "diff --git a/engine/src/main/java/org/terasology/config/SystemConfig.java b/engine/src/main/java/org/terasology/config/SystemConfig.java\nindex d2550a58c..69070bbed 100644\n--- a/engine/src/main/java/org/terasology/config/SystemConfig.java\n+++ b/engine/src/main/java/org/terasology/config/SystemConfig.java\n\n@@ -49,7 +49,7 @@\n     public final Setting<Integer> maxUnloadedChunksPercentageTillSave = setting(\n             type(Integer.class),\n             defaultValue(40),\n-            constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))\n+            constraint(new NumberRangeConstraint<>(0, 100, false, false))\n     );\n     public final Setting<Boolean> debugEnabled = setting(\n             type(Boolean.class),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5MzExMA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r519193110", "bodyText": "I don't know how important the overriding of this setting is, but if this is something we encounter frequently it might be worth looking into adding an overriding feature into AutoConfig or the setting UI. For now we might get away with setting this as the default value of the Setting, but we'll need expert opinion on how this case should be handled.", "author": "eviltak", "createdAt": "2020-11-07T16:21:31Z", "path": "engine/src/main/java/org/terasology/config/SystemConfig.java", "diffHunk": "@@ -16,99 +16,63 @@\n \n package org.terasology.config;\n \n+import org.terasology.config.flexible.AutoConfig;\n+import org.terasology.config.flexible.Setting;\n+import org.terasology.config.flexible.constraints.NumberRangeConstraint;\n+\n import java.util.Locale;\n import java.util.Locale.Category;\n \n-public class SystemConfig {\n+import static org.terasology.config.flexible.SettingArgument.constraint;\n+import static org.terasology.config.flexible.SettingArgument.defaultValue;\n+import static org.terasology.config.flexible.SettingArgument.type;\n+\n+public class SystemConfig extends AutoConfig {\n     public static final String SAVED_GAMES_ENABLED_PROPERTY = \"org.terasology.savedGamesEnabled\";\n     public static final String PERMISSIVE_SECURITY_ENABLED_PROPERTY = \"org.terasology.permissiveSecurityEnabled\";\n \n-    private long dayNightLengthInMs;\n-    private int maxThreads;\n-    private int maxSecondsBetweenSaves;\n-    private int maxUnloadedChunksPercentageTillSave;\n-    private boolean debugEnabled;\n-    private boolean monitoringEnabled;\n-    private boolean writeSaveGamesEnabled;\n-    private long chunkGenerationFailTimeoutInMs;\n-    private String locale;\n-\n-    public long getDayNightLengthInMs() {\n-        return dayNightLengthInMs;\n-    }\n-\n-    public void setDayNightLengthInMs(long dayNightLengthInMs) {\n-        this.dayNightLengthInMs = dayNightLengthInMs;\n-    }\n-\n-    public int getMaxThreads() {\n-        return maxThreads;\n-    }\n-\n-    public void setMaxThreads(int maxThreads) {\n-        this.maxThreads = maxThreads;\n-    }\n-\n-    public int getMaxSecondsBetweenSaves() {\n-        return maxSecondsBetweenSaves;\n-    }\n-\n-    public void setMaxSecondsBetweenSaves(int maxSecondsBetweenSaves) {\n-        this.maxSecondsBetweenSaves = maxSecondsBetweenSaves;\n-    }\n-\n-    public int getMaxUnloadedChunksPercentageTillSave() {\n-        return maxUnloadedChunksPercentageTillSave;\n-    }\n-\n-    public void setMaxUnloadedChunksPercentageTillSave(int maxUnloadedChunksPercentageTillSave) {\n-        this.maxUnloadedChunksPercentageTillSave = maxUnloadedChunksPercentageTillSave;\n-    }\n-\n-    public boolean isDebugEnabled() {\n-        return debugEnabled;\n-    }\n-\n-    public void setDebugEnabled(boolean debugEnabled) {\n-        this.debugEnabled = debugEnabled;\n-    }\n-\n-    public boolean isMonitoringEnabled() {\n-        return monitoringEnabled;\n-    }\n-\n-    public void setMonitoringEnabled(boolean monitoringEnabled) {\n-        this.monitoringEnabled = monitoringEnabled;\n-    }\n-\n-    public boolean isWriteSaveGamesEnabled() {\n-        String property = System.getProperty(SAVED_GAMES_ENABLED_PROPERTY);", "originalCommit": "82b994c8d1dec73a31b59fe04cbd65af9d58d8bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5MzczNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r519193735", "bodyText": "I have some code about this locally.\nExtends DSL with:\nsystemProperty(String, Function<String,V>)\nWhere function - converter,\nV - settings type", "author": "DarkWeird", "createdAt": "2020-11-07T16:28:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5MzExMA=="}], "type": "inlineReview", "revised_code": {"commit": "f6af4441c2f34ce22ffa91959bf799a76a7dc79a", "chunk": "diff --git a/engine/src/main/java/org/terasology/config/SystemConfig.java b/engine/src/main/java/org/terasology/config/SystemConfig.java\nindex 69070bbed..d2550a58c 100644\n--- a/engine/src/main/java/org/terasology/config/SystemConfig.java\n+++ b/engine/src/main/java/org/terasology/config/SystemConfig.java\n\n@@ -49,7 +49,7 @@\n     public final Setting<Integer> maxUnloadedChunksPercentageTillSave = setting(\n             type(Integer.class),\n             defaultValue(40),\n-            constraint(new NumberRangeConstraint<>(0, 100, false, false))\n+            constraint(new NumberRangeConstraint<>(0, Integer.MAX_VALUE, false, false))\n     );\n     public final Setting<Boolean> debugEnabled = setting(\n             type(Boolean.class),\n"}}, {"oid": "f6af4441c2f34ce22ffa91959bf799a76a7dc79a", "url": "https://github.com/MovingBlocks/Terasology/commit/f6af4441c2f34ce22ffa91959bf799a76a7dc79a", "message": "feature(autoconfig): migrate SystemConfig", "committedDate": "2021-02-14T02:02:07Z", "type": "commit"}, {"oid": "273528850e847ee0281a14cfbea8216909e3da78", "url": "https://github.com/MovingBlocks/Terasology/commit/273528850e847ee0281a14cfbea8216909e3da78", "message": "feature(autoconfig): add LocaleTypeHandler to AutoConfigManager", "committedDate": "2021-02-14T02:02:10Z", "type": "commit"}, {"oid": "f55c867e037ff85c73c2e3623eb0cbf8471c5a22", "url": "https://github.com/MovingBlocks/Terasology/commit/f55c867e037ff85c73c2e3623eb0cbf8471c5a22", "message": "Update engine/src/main/java/org/terasology/config/SystemConfig.java\n\nCo-authored-by: Tobias Nett <skaldarnar@googlemail.com>", "committedDate": "2021-02-14T02:02:10Z", "type": "commit"}, {"oid": "951b81d718650192260742957ff24dbc948ebd5e", "url": "https://github.com/MovingBlocks/Terasology/commit/951b81d718650192260742957ff24dbc948ebd5e", "message": "feature(autoconfig): add systemProperty values", "committedDate": "2021-02-14T02:02:10Z", "type": "commit"}, {"oid": "cf5652aa86b9a675e49872381c4670e0e48b87a9", "url": "https://github.com/MovingBlocks/Terasology/commit/cf5652aa86b9a675e49872381c4670e0e48b87a9", "message": "feature(autoconfig): add systemProperty values tests", "committedDate": "2021-02-14T02:02:10Z", "type": "commit"}, {"oid": "b8f2aab126e32c28ac3ce3904fcde4b1fde05091", "url": "https://github.com/MovingBlocks/Terasology/commit/b8f2aab126e32c28ac3ce3904fcde4b1fde05091", "message": "fix(autoconfig): set default value for debug - false", "committedDate": "2021-02-14T02:02:10Z", "type": "commit"}, {"oid": "71206085e9d596b7257de7ce8a59672a0cfbc1a4", "url": "https://github.com/MovingBlocks/Terasology/commit/71206085e9d596b7257de7ce8a59672a0cfbc1a4", "message": "chore(autoconfig): reformat SystemConfig", "committedDate": "2021-02-14T02:02:10Z", "type": "commit"}, {"oid": "71206085e9d596b7257de7ce8a59672a0cfbc1a4", "url": "https://github.com/MovingBlocks/Terasology/commit/71206085e9d596b7257de7ce8a59672a0cfbc1a4", "message": "chore(autoconfig): reformat SystemConfig", "committedDate": "2021-02-14T02:02:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTc0MzMzMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r575743331", "bodyText": "isn't this a valid settings change. what are you trying to test?", "author": "pollend", "createdAt": "2021-02-14T02:46:49Z", "path": "engine-tests/src/test/java/org/terasology/config/flexible/internal/SettingImplTest.java", "diffHunk": "@@ -37,40 +24,81 @@\n     private static final SimpleUri SETTING_ID = new SimpleUri(\"engine-tests:TestSetting\");\n \n     @Nested\n-    public class SetValue {\n+    class SetValue {\n         private Setting<Integer> setting;\n \n         private int eventResult;\n \n         @BeforeEach\n         public void setUp() {\n             setting = new SettingImpl<>(\n-                TypeInfo.of(Integer.class), 50,\n+                    TypeInfo.of(Integer.class), 50,\n                     new NumberRangeConstraint<>(0, 100, false, false),\n-                    \"\", \"\");\n+                    \"\", \"\", null, null);\n \n             eventResult = -1;\n \n             setting.subscribe((setting1, oldValue) -> eventResult = setting1.get());\n         }\n \n         @Test\n-        public void testSetsValue() {\n+        void testSetsValue() {\n             assertTrue(setting.set(25));\n \n             assertEquals(25, eventResult);\n         }\n \n         @Test\n-        public void testDoesNotSetValue() {\n+        void testDoesNotSetValue() {\n             assertFalse(setting.set(101));\n \n             assertEquals(-1, eventResult);\n         }\n     }\n \n     @Nested\n-    public class Subscribers {\n+    class SystemProperty {\n+        private static final String TEST_CONFIG_SYSTEM_PROPERTY = \"foo.bar.config.value\";\n+        private static final int TEST_CONFIG_SYSTEM_PROPERTY_VALUE = 75;\n+\n+        private Setting<Integer> setting;\n+\n+        private int eventResult;\n+\n+        @BeforeEach\n+        public void setUp() {\n+            setting = new SettingImpl<>(\n+                    TypeInfo.of(Integer.class), 50,\n+                    new NumberRangeConstraint<>(0, 100, false, false),\n+                    \"\", \"\", TEST_CONFIG_SYSTEM_PROPERTY, Integer::valueOf);\n+\n+            eventResult = -1;\n+\n+            setting.subscribe((setting1, oldValue) -> eventResult = setting1.get());\n+        }\n+\n+        @Test\n+        void testSystemPropertyValue() {\n+            System.setProperty(TEST_CONFIG_SYSTEM_PROPERTY, String.valueOf(TEST_CONFIG_SYSTEM_PROPERTY_VALUE));\n+            assertEquals(75, setting.get());\n+        }\n+\n+        @Test\n+        void testSystemPropertyValueNotPresent() {\n+            System.getProperties().remove(TEST_CONFIG_SYSTEM_PROPERTY);\n+            assertEquals(50, setting.get());\n+        }\n+\n+        @Test\n+        void testDoesNotSetValue() {\n+            assertFalse(setting.set(25));", "originalCommit": "71206085e9d596b7257de7ce8a59672a0cfbc1a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "385c6b58d78f4489bd1b06233c1d3b0e4b223341", "chunk": "diff --git a/engine-tests/src/test/java/org/terasology/config/flexible/internal/SettingImplTest.java b/engine-tests/src/test/java/org/terasology/config/flexible/internal/SettingImplTest.java\nindex 2c4e5ed0e..79c9efab7 100644\n--- a/engine-tests/src/test/java/org/terasology/config/flexible/internal/SettingImplTest.java\n+++ b/engine-tests/src/test/java/org/terasology/config/flexible/internal/SettingImplTest.java\n\n@@ -91,7 +91,7 @@ void testSystemPropertyValueNotPresent() {\n \n         @Test\n         void testDoesNotSetValue() {\n-            assertFalse(setting.set(25));\n+            assertFalse(setting.set(101));\n \n             assertEquals(-1, eventResult);\n         }\n"}}, {"oid": "e82f01bb682596c12566e9f05897af071b7b3693", "url": "https://github.com/MovingBlocks/Terasology/commit/e82f01bb682596c12566e9f05897af071b7b3693", "message": "Merge branch 'develop' into feature/auto-system-config", "committedDate": "2021-02-16T08:41:06Z", "type": "commit"}, {"oid": "385c6b58d78f4489bd1b06233c1d3b0e4b223341", "url": "https://github.com/MovingBlocks/Terasology/commit/385c6b58d78f4489bd1b06233c1d3b0e4b223341", "message": "fix(auto-system-config): fix test `testDoesNotSetValue`", "committedDate": "2021-02-16T08:51:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk2MjgzNw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r576962837", "bodyText": "nitpick (non-blocking): To me converter often implies that the conversion can work in both directions, and that it can be between arbitrary types. In this case (converting from String -> T) I'd call it a decoder function (the dual function T -> String would be the encoder).", "author": "skaldarnar", "createdAt": "2021-02-16T16:32:20Z", "path": "engine/src/main/java/org/terasology/config/flexible/internal/SettingBuilder.java", "diffHunk": "@@ -66,8 +55,16 @@\n     SettingBuilder<T> description(String description);\n \n     /**\n-     * Builds the {@link Setting} with the components that have already been specified and\n-     * returns it.\n+     * Specfies the system property of the {@link Setting} being created.\n+     *\n+     * @param systemProperty This system property which will rewrite value.\n+     * @param converter converter for systemProperty: String -> T", "originalCommit": "385c6b58d78f4489bd1b06233c1d3b0e4b223341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzQwMTQ1Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r577401457", "bodyText": "I don't like idea to write something in sysProps at runtime.\nIt are going to problems :D I saw systems, where general config source - is  sysProps.\nthen we catch problem like CoreRegistry + parallel tests.. it was worst.\nwhich word you want to see for non-duplex converter?", "author": "DarkWeird", "createdAt": "2021-02-17T08:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk2MjgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "17dd34dbf9a005577c6b0b547bdbc5f7d4e55c3c", "chunk": "diff --git a/engine/src/main/java/org/terasology/config/flexible/internal/SettingBuilder.java b/engine/src/main/java/org/terasology/config/flexible/internal/SettingBuilder.java\nindex e875d41b2..8e6a9ccc6 100644\n--- a/engine/src/main/java/org/terasology/config/flexible/internal/SettingBuilder.java\n+++ b/engine/src/main/java/org/terasology/config/flexible/internal/SettingBuilder.java\n\n@@ -55,13 +56,11 @@\n     SettingBuilder<T> description(String description);\n \n     /**\n-     * Specfies the system property of the {@link Setting} being created.\n-     *\n-     * @param systemProperty This system property which will rewrite value.\n-     * @param converter converter for systemProperty: String -> T\n-     * @return The builder object.\n+     * Specfies the override f the {@link Setting} being created.\n+     * @param overrideProvider The Supplier which provide override for settings value if exists.\n+     * @return This builder object.\n      */\n-    SettingBuilder<T> systemProperty(String systemProperty, Function<String, T> converter);\n+    SettingBuilder<T> override(Supplier<Optional<T>> overrideProvider);\n \n     /**\n      * Builds the {@link Setting} with the components that have already been specified and returns it.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk2NjAxNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r576966015", "bodyText": "thought Should we have a (private) method to check whether this setting is a system property? This might make the semantics of this method a bit more obvious:\nif (isSystemProperty()) {\n  return getSystemPropertyValue();\n} else {\n\treturn value;\n}\nIs it intended that we return the value in case the system property converter yielded a null value here?", "author": "skaldarnar", "createdAt": "2021-02-16T16:36:42Z", "path": "engine/src/main/java/org/terasology/config/flexible/internal/SettingImpl.java", "diffHunk": "@@ -137,13 +143,23 @@ public T getDefaultValue() {\n \n     @Override\n     public T get() {\n+        T systemPropertyValue = getSystemPropertyValue();\n+        if (systemPropertyValue != null) {\n+            return systemPropertyValue;\n+        }", "originalCommit": "385c6b58d78f4489bd1b06233c1d3b0e4b223341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk5OTY0Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r576999643", "bodyText": "No. System property should rewrite value only.", "author": "DarkWeird", "createdAt": "2021-02-16T17:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk2NjAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "17dd34dbf9a005577c6b0b547bdbc5f7d4e55c3c", "chunk": "diff --git a/engine/src/main/java/org/terasology/config/flexible/internal/SettingImpl.java b/engine/src/main/java/org/terasology/config/flexible/internal/SettingImpl.java\nindex 5904b7205..e1b7c59df 100644\n--- a/engine/src/main/java/org/terasology/config/flexible/internal/SettingImpl.java\n+++ b/engine/src/main/java/org/terasology/config/flexible/internal/SettingImpl.java\n\n@@ -143,18 +130,14 @@ public T getDefaultValue() {\n \n     @Override\n     public T get() {\n-        T systemPropertyValue = getSystemPropertyValue();\n-        if (systemPropertyValue != null) {\n-            return systemPropertyValue;\n-        }\n-        return value;\n+        return override.get().orElse(value);\n     }\n \n     @Override\n     public boolean set(T newValue) {\n         Preconditions.checkNotNull(newValue, \"The value of a setting cannot be null.\");\n \n-        if (getSystemPropertyValue() != null) {\n+        if (override.get().isPresent()) {\n             LOGGER.warn(\"An attempt was made to overwrite the value specified in the System property.\" +\n                     \" This will give nothing while the System Property value is supplied\");\n             return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzAwMTc2Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r577001767", "bodyText": "Since Locale is a SDK class, can we add this type handler by default to every type handler library (and hence move it into one of the initialization methods in TypeHandlerLibrary)?", "author": "eviltak", "createdAt": "2021-02-16T17:25:33Z", "path": "engine/src/main/java/org/terasology/config/flexible/AutoConfigManager.java", "diffHunk": "@@ -48,6 +50,7 @@\n \n     public AutoConfigManager(TypeHandlerLibrary typeHandlerLibrary) {\n         this.typeHandlerLibrary = typeHandlerLibrary;\n+        typeHandlerLibrary.addTypeHandler(Locale.class, new LocaleTypeHandler());", "originalCommit": "385c6b58d78f4489bd1b06233c1d3b0e4b223341", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7663427a1e5ae2155eac6e6c0aee474b179d53ca", "chunk": "diff --git a/engine/src/main/java/org/terasology/config/flexible/AutoConfigManager.java b/engine/src/main/java/org/terasology/config/flexible/AutoConfigManager.java\nindex cb8d1569a..1d24b3fd7 100644\n--- a/engine/src/main/java/org/terasology/config/flexible/AutoConfigManager.java\n+++ b/engine/src/main/java/org/terasology/config/flexible/AutoConfigManager.java\n\n@@ -50,7 +35,6 @@\n \n     public AutoConfigManager(TypeHandlerLibrary typeHandlerLibrary) {\n         this.typeHandlerLibrary = typeHandlerLibrary;\n-        typeHandlerLibrary.addTypeHandler(Locale.class, new LocaleTypeHandler());\n     }\n \n     public void loadConfigsIn(Context context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzAwODE0Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r577008142", "bodyText": "Similar to above -- since Locale is a SDK class, it might be better to move this to a subpackage in org.terasology.persistence.typeHandling.", "author": "eviltak", "createdAt": "2021-02-16T17:34:31Z", "path": "engine/src/main/java/org/terasology/config/flexible/typehandling/LocaleTypeHandler.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.config.flexible.typehandling;\n+\n+import org.terasology.persistence.typeHandling.StringRepresentationTypeHandler;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Locale type handler for {@link org.terasology.config.SystemConfig#locale}\n+ */\n+public class LocaleTypeHandler extends StringRepresentationTypeHandler<Locale> {", "originalCommit": "385c6b58d78f4489bd1b06233c1d3b0e4b223341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzAxOTM5Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r577019397", "bodyText": "* Serializes objects of type {@link java.util.Locale} --  no need to reference the particular use case for which this type handler was created.", "author": "eviltak", "createdAt": "2021-02-16T17:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzAwODE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7663427a1e5ae2155eac6e6c0aee474b179d53ca", "chunk": "diff --git a/engine/src/main/java/org/terasology/config/flexible/typehandling/LocaleTypeHandler.java b/subsystems/TypeHandlerLibrary/src/main/java/org/terasology/persistence/typeHandling/coreTypes/LocaleTypeHandler.java\nsimilarity index 73%\nrename from engine/src/main/java/org/terasology/config/flexible/typehandling/LocaleTypeHandler.java\nrename to subsystems/TypeHandlerLibrary/src/main/java/org/terasology/persistence/typeHandling/coreTypes/LocaleTypeHandler.java\nindex 352f48b0b..a7a3533b7 100644\n--- a/engine/src/main/java/org/terasology/config/flexible/typehandling/LocaleTypeHandler.java\n+++ b/subsystems/TypeHandlerLibrary/src/main/java/org/terasology/persistence/typeHandling/coreTypes/LocaleTypeHandler.java\n\n@@ -1,14 +1,14 @@\n-// Copyright 2020 The Terasology Foundation\n+// Copyright 2021 The Terasology Foundation\n // SPDX-License-Identifier: Apache-2.0\n \n-package org.terasology.config.flexible.typehandling;\n+package org.terasology.persistence.typeHandling.coreTypes;\n \n import org.terasology.persistence.typeHandling.StringRepresentationTypeHandler;\n \n import java.util.Locale;\n \n /**\n- * Locale type handler for {@link org.terasology.config.SystemConfig#locale}\n+ * Serializes objects of type {@link java.util.Locale}\n  */\n public class LocaleTypeHandler extends StringRepresentationTypeHandler<Locale> {\n     @Override\n"}}, {"oid": "7663427a1e5ae2155eac6e6c0aee474b179d53ca", "url": "https://github.com/MovingBlocks/Terasology/commit/7663427a1e5ae2155eac6e6c0aee474b179d53ca", "message": "refactor(system-config): move LocaleTypeHandler to THL", "committedDate": "2021-02-17T07:33:11Z", "type": "commit"}, {"oid": "17dd34dbf9a005577c6b0b547bdbc5f7d4e55c3c", "url": "https://github.com/MovingBlocks/Terasology/commit/17dd34dbf9a005577c6b0b547bdbc5f7d4e55c3c", "message": "refactor(system-config): replace systemProperty DSL field with override DSL field for AutoConfig's Settings", "committedDate": "2021-02-17T08:38:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzc3NzI3OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4235#discussion_r577777279", "bodyText": "Spelling: of instead of f", "author": "eviltak", "createdAt": "2021-02-17T16:53:42Z", "path": "engine/src/main/java/org/terasology/config/flexible/internal/SettingBuilder.java", "diffHunk": "@@ -55,13 +56,11 @@\n     SettingBuilder<T> description(String description);\n \n     /**\n-     * Specfies the system property of the {@link Setting} being created.\n-     *\n-     * @param systemProperty This system property which will rewrite value.\n-     * @param converter converter for systemProperty: String -> T\n-     * @return The builder object.\n+     * Specfies the override f the {@link Setting} being created.", "originalCommit": "17dd34dbf9a005577c6b0b547bdbc5f7d4e55c3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7d13359cb10f810dda53cad627c9321f2e45abc", "chunk": "diff --git a/engine/src/main/java/org/terasology/config/flexible/internal/SettingBuilder.java b/engine/src/main/java/org/terasology/config/flexible/internal/SettingBuilder.java\nindex 8e6a9ccc6..ef00c9fd7 100644\n--- a/engine/src/main/java/org/terasology/config/flexible/internal/SettingBuilder.java\n+++ b/engine/src/main/java/org/terasology/config/flexible/internal/SettingBuilder.java\n\n@@ -56,7 +56,7 @@\n     SettingBuilder<T> description(String description);\n \n     /**\n-     * Specfies the override f the {@link Setting} being created.\n+     * Specfies the override of the {@link Setting} being created.\n      * @param overrideProvider The Supplier which provide override for settings value if exists.\n      * @return This builder object.\n      */\n"}}, {"oid": "d95d076b8bee9a5dcaaa35a33c32446cc46a714f", "url": "https://github.com/MovingBlocks/Terasology/commit/d95d076b8bee9a5dcaaa35a33c32446cc46a714f", "message": "Merge branch 'develop' into feature/auto-system-config", "committedDate": "2021-02-26T06:54:53Z", "type": "commit"}, {"oid": "f7d13359cb10f810dda53cad627c9321f2e45abc", "url": "https://github.com/MovingBlocks/Terasology/commit/f7d13359cb10f810dda53cad627c9321f2e45abc", "message": "refactor(system-config): fix tests, update SystemConfig to last AutoConfig state.(translations)", "committedDate": "2021-02-26T11:37:57Z", "type": "commit"}, {"oid": "42caa355787d488542a3a396a61e153d27c98509", "url": "https://github.com/MovingBlocks/Terasology/commit/42caa355787d488542a3a396a61e153d27c98509", "message": "chore(system-config): remove system config entry from default.cfg", "committedDate": "2021-02-26T11:41:59Z", "type": "commit"}, {"oid": "4c0c08f6e694a92ec1c339118dc66e8596612ff1", "url": "https://github.com/MovingBlocks/Terasology/commit/4c0c08f6e694a92ec1c339118dc66e8596612ff1", "message": "docs(system-config): fix javadoc", "committedDate": "2021-02-26T12:01:28Z", "type": "commit"}, {"oid": "b8c7cb7281f1bc084c3809eb21d72a54eab1fa08", "url": "https://github.com/MovingBlocks/Terasology/commit/b8c7cb7281f1bc084c3809eb21d72a54eab1fa08", "message": "Merge branch 'develop' into feature/auto-system-config", "committedDate": "2021-03-01T08:34:54Z", "type": "commit"}, {"oid": "27cd22c92cfdf227c4ff6c093cbe68539d82ea4c", "url": "https://github.com/MovingBlocks/Terasology/commit/27cd22c92cfdf227c4ff6c093cbe68539d82ea4c", "message": "Merge branch 'develop' into feature/auto-system-config", "committedDate": "2021-03-09T19:07:00Z", "type": "commit"}, {"oid": "8b6c5b549546b991d34ac9cf58826235c284bd13", "url": "https://github.com/MovingBlocks/Terasology/commit/8b6c5b549546b991d34ac9cf58826235c284bd13", "message": "Merge branch 'develop' into feature/auto-system-config", "committedDate": "2021-03-09T20:05:47Z", "type": "commit"}]}