{"pr_number": 3968, "pr_title": "feat: Particle pool rendering", "pr_createdAt": "2020-05-18T18:17:10Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/3968", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxNzI0Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3968#discussion_r426817247", "bodyText": "The only reason for me to not do this automatically in the constructor is that the glMethods are breaking the unit tests, because they run without an OpenGL context.", "author": "kBlaszczyk", "createdAt": "2020-05-18T18:29:32Z", "path": "engine/src/main/java/org/terasology/particles/ParticlePool.java", "diffHunk": "@@ -225,6 +240,74 @@ public void storeTemporaryDataAt(final int index, final int rawMask) {\n         }\n     }\n \n+    /**\n+     * Initializes this particle pool for rendering.\n+     * The method should be called right after object creation.\n+     */\n+    public void initRendering() {", "originalCommit": "2cdeb9b68e5f1497d2965f29e17c3f32fb215db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38a620f5a946f94d9e4bea89010358cb0423db34", "chunk": "diff --git a/engine/src/main/java/org/terasology/particles/ParticlePool.java b/engine/src/main/java/org/terasology/particles/ParticlePool.java\nindex 146546fb2..c83955b2b 100644\n--- a/engine/src/main/java/org/terasology/particles/ParticlePool.java\n+++ b/engine/src/main/java/org/terasology/particles/ParticlePool.java\n\n@@ -240,74 +225,6 @@ public void storeTemporaryDataAt(final int index, final int rawMask) {\n         }\n     }\n \n-    /**\n-     * Initializes this particle pool for rendering.\n-     * The method should be called right after object creation.\n-     */\n-    public void initRendering() {\n-        vao = GL30.glGenVertexArrays();\n-        positionVbo = GL15.glGenBuffers();\n-        scaleVbo = GL15.glGenBuffers();\n-        colorVbo = GL15.glGenBuffers();\n-        textureOffsetVbo = GL15.glGenBuffers();\n-\n-        GL30.glBindVertexArray(vao);\n-\n-        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, positionVbo);\n-        GL20.glEnableVertexAttribArray(0);\n-        GL20.glVertexAttribPointer(0, 3, GL11.GL_FLOAT, false, 0, 0);\n-\n-        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, scaleVbo);\n-        GL20.glEnableVertexAttribArray(1);\n-        GL20.glVertexAttribPointer(1, 3, GL11.GL_FLOAT, false, 0, 0);\n-\n-        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, colorVbo);\n-        GL20.glEnableVertexAttribArray(2);\n-        GL20.glVertexAttribPointer(2, 4, GL11.GL_FLOAT, false, 0, 0);\n-\n-        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, textureOffsetVbo);\n-        GL20.glEnableVertexAttribArray(3);\n-        GL20.glVertexAttribPointer(3, 2, GL11.GL_FLOAT, false, 0, 0);\n-\n-        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);\n-        GL30.glBindVertexArray(0);\n-    }\n-\n-    /**\n-     * Renders the particles in the pool by doing an OpenGL draw call.\n-     */\n-    public void draw() {\n-        GL30.glBindVertexArray(vao);\n-        GL11.glDrawArrays(GL11.GL_POINTS, 0, livingParticles());\n-        GL30.glBindVertexArray(0);\n-    }\n-\n-    public void prepareRendering() {\n-        refreshBuffer(positionBuffer, position, 3);\n-        refreshBuffer(scaleBuffer, scale, 3);\n-        refreshBuffer(colorBuffer, color, 4);\n-        refreshBuffer(textureOffsetBuffer, textureOffset, 2);\n-\n-        bufferData(positionBuffer, positionVbo);\n-        bufferData(scaleBuffer, scaleVbo);\n-        bufferData(colorBuffer, colorVbo);\n-        bufferData(textureOffsetBuffer, textureOffsetVbo);\n-\n-        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);\n-    }\n-\n-    private void refreshBuffer(FloatBuffer buffer, float[] data, int typeSize) {\n-        buffer.position(0).limit(data.length);\n-        buffer.put(data, 0, livingParticles() * typeSize);\n-        buffer.flip();\n-    }\n-\n-    private void bufferData(FloatBuffer data, int vbo) {\n-        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vbo);\n-        GL15.glBufferData(GL15.GL_ARRAY_BUFFER, 0, GL15.GL_STREAM_DRAW);\n-        GL15.glBufferData(GL15.GL_ARRAY_BUFFER, data, GL15.GL_STREAM_DRAW);\n-    }\n-\n     private void resetParticleData(final int i) {\n         final int i2 = i * 2;\n         final int i3 = i * 3;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxOTIzNg==", "url": "https://github.com/MovingBlocks/Terasology/pull/3968#discussion_r426819236", "bodyText": "The compilation validation moved into compileShader().", "author": "kBlaszczyk", "createdAt": "2020-05-18T18:33:33Z", "path": "engine/src/main/java/org/terasology/rendering/opengl/GLSLShader.java", "diffHunk": "@@ -257,23 +261,17 @@ private void registerAllShaderPermutations() {\n         Set<Set<ShaderProgramFeature>> allPermutations = Sets.powerSet(availableFeatures);\n \n         for (Set<ShaderProgramFeature> permutation : allPermutations) {\n+            int featureHash = ShaderProgramFeature.getBitset(permutation);\n+\n             int fragShaderId = compileShader(GL20.GL_FRAGMENT_SHADER, permutation);\n             int vertShaderId = compileShader(GL20.GL_VERTEX_SHADER, permutation);\n-\n-            if (compileSuccess(fragShaderId) && compileSuccess(vertShaderId)) {", "originalCommit": "2cdeb9b68e5f1497d2965f29e17c3f32fb215db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38a620f5a946f94d9e4bea89010358cb0423db34", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/opengl/GLSLShader.java b/engine/src/main/java/org/terasology/rendering/opengl/GLSLShader.java\nindex 9b5b420ae..d0d85649f 100644\n--- a/engine/src/main/java/org/terasology/rendering/opengl/GLSLShader.java\n+++ b/engine/src/main/java/org/terasology/rendering/opengl/GLSLShader.java\n\n@@ -261,17 +257,23 @@ private void registerAllShaderPermutations() {\n         Set<Set<ShaderProgramFeature>> allPermutations = Sets.powerSet(availableFeatures);\n \n         for (Set<ShaderProgramFeature> permutation : allPermutations) {\n-            int featureHash = ShaderProgramFeature.getBitset(permutation);\n-\n             int fragShaderId = compileShader(GL20.GL_FRAGMENT_SHADER, permutation);\n             int vertShaderId = compileShader(GL20.GL_VERTEX_SHADER, permutation);\n-            if (shaderProgramBase.getGeometryProgram() != null) {\n-                int geomShaderId = compileShader(GL32.GL_GEOMETRY_SHADER, permutation);\n-                disposalAction.geometryPrograms.put(featureHash, geomShaderId);\n-            }\n \n-            disposalAction.fragmentPrograms.put(featureHash, fragShaderId);\n-            disposalAction.vertexPrograms.put(featureHash, vertShaderId);\n+            if (compileSuccess(fragShaderId) && compileSuccess(vertShaderId)) {\n+                int featureHash = ShaderProgramFeature.getBitset(permutation);\n+                disposalAction.fragmentPrograms.put(featureHash, fragShaderId);\n+                disposalAction.vertexPrograms.put(featureHash, vertShaderId);\n+            } else {\n+                dumpCode(GL20.GL_FRAGMENT_SHADER,permutation,assembleShader(GL20.GL_FRAGMENT_SHADER,permutation));\n+                dumpCode(GL20.GL_VERTEX_SHADER,permutation,assembleShader(GL20.GL_VERTEX_SHADER,permutation));\n+\n+                throw new RuntimeException(String.format(\"Shader '%s' failed to compile for features '%s'.%n%n\"\n+                                + \"Vertex Shader Info: %n%s%n\"\n+                                + \"Fragment Shader Info: %n%s\",\n+                        getUrn(), permutation,\n+                        getLogInfo(vertShaderId), getLogInfo(fragShaderId)));\n+            }\n         }\n \n         logger.debug(\"Compiled {} permutations for {}.\", allPermutations.size(), getUrn());\n"}}, {"oid": "38a620f5a946f94d9e4bea89010358cb0423db34", "url": "https://github.com/MovingBlocks/Terasology/commit/38a620f5a946f94d9e4bea89010358cb0423db34", "message": "Add shader to render particle position buffer.", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "be6c9e1a9a63f03440dea2e5159e07a0d2862501", "url": "https://github.com/MovingBlocks/Terasology/commit/be6c9e1a9a63f03440dea2e5159e07a0d2862501", "message": "Make particle pool renderable.", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "e809de6c719d1b68b7b1c3de8aa10e8216883078", "url": "https://github.com/MovingBlocks/Terasology/commit/e809de6c719d1b68b7b1c3de8aa10e8216883078", "message": "Render all particles in a pool in one go", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "0b96d3dc8a62b8b7c6985af618264ee21defc7bb", "url": "https://github.com/MovingBlocks/Terasology/commit/0b96d3dc8a62b8b7c6985af618264ee21defc7bb", "message": "Render particles as quads using a geometry shader.", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "ff3f2ebec0f851035d3a07ac143a462c9b19a5aa", "url": "https://github.com/MovingBlocks/Terasology/commit/ff3f2ebec0f851035d3a07ac143a462c9b19a5aa", "message": "Add alpha blending when rendering particles", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "dcbc5f2333542ae712fb7d390bcaafe3807a2e4d", "url": "https://github.com/MovingBlocks/Terasology/commit/dcbc5f2333542ae712fb7d390bcaafe3807a2e4d", "message": "Render particles using textures.", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "c93fa502db8358175b0f78f895ffa372b62fe17a", "url": "https://github.com/MovingBlocks/Terasology/commit/c93fa502db8358175b0f78f895ffa372b62fe17a", "message": "Fix view projection matrix usage.", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "528f9bee689e00d3a2883f2644ec68de94d010ce", "url": "https://github.com/MovingBlocks/Terasology/commit/528f9bee689e00d3a2883f2644ec68de94d010ce", "message": "Support scaling the particles' quads", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "f4bebabcd3e938240a9f35124c6d406d49792a3e", "url": "https://github.com/MovingBlocks/Terasology/commit/f4bebabcd3e938240a9f35124c6d406d49792a3e", "message": "Support texture offsets and colors for particles", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "fe4d783ad63eed989ba05022a322962f660ce208", "url": "https://github.com/MovingBlocks/Terasology/commit/fe4d783ad63eed989ba05022a322962f660ce208", "message": "Add support for custom shader versions to GLSLShader", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "92be8c015c05cb9faae339ca59430202685da09c", "url": "https://github.com/MovingBlocks/Terasology/commit/92be8c015c05cb9faae339ca59430202685da09c", "message": "Replace old particle shaders.", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "5285f40754caeda9fb75e8e723ea15e5d147c6d9", "url": "https://github.com/MovingBlocks/Terasology/commit/5285f40754caeda9fb75e8e723ea15e5d147c6d9", "message": "Fix texture offsets in particle shader", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "8d944a3f269aff568de9298c430046fb67852478", "url": "https://github.com/MovingBlocks/Terasology/commit/8d944a3f269aff568de9298c430046fb67852478", "message": "Clean up the branch", "committedDate": "2020-05-21T20:09:17Z", "type": "commit"}, {"oid": "7eff136b815dfa167c659ec33ed5197f6e1310e9", "url": "https://github.com/MovingBlocks/Terasology/commit/7eff136b815dfa167c659ec33ed5197f6e1310e9", "message": "Add new required OpenGL capabilities to LwjglGraphics", "committedDate": "2020-05-21T20:19:51Z", "type": "forcePushed"}, {"oid": "33a77efe7ed251b3735463d6f8b26f5ea51dc8f3", "url": "https://github.com/MovingBlocks/Terasology/commit/33a77efe7ed251b3735463d6f8b26f5ea51dc8f3", "message": "Add new required OpenGL capabilities to LwjglGraphics", "committedDate": "2020-05-21T21:00:12Z", "type": "commit"}, {"oid": "33a77efe7ed251b3735463d6f8b26f5ea51dc8f3", "url": "https://github.com/MovingBlocks/Terasology/commit/33a77efe7ed251b3735463d6f8b26f5ea51dc8f3", "message": "Add new required OpenGL capabilities to LwjglGraphics", "committedDate": "2020-05-21T21:00:12Z", "type": "forcePushed"}]}