{"pr_number": 4059, "pr_title": "Improve Simplex and Perlin noise generators", "pr_createdAt": "2020-06-21T13:40:12Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4059", "timeline": [{"oid": "d00c2e734f067f7514171d632f48034b1ccc24ee", "url": "https://github.com/MovingBlocks/Terasology/commit/d00c2e734f067f7514171d632f48034b1ccc24ee", "message": "modified simplex, perlin to allow variable perms", "committedDate": "2020-06-03T21:13:59Z", "type": "commit"}, {"oid": "367d3102d45756ef5192309db47e732ae6c4df76", "url": "https://github.com/MovingBlocks/Terasology/commit/367d3102d45756ef5192309db47e732ae6c4df76", "message": "Merge branch 'develop' of github.com:MovingBlocks/Terasology into develop", "committedDate": "2020-06-04T18:29:37Z", "type": "commit"}, {"oid": "07cc660c43ff75b34caf122d146c318b8765e1fe", "url": "https://github.com/MovingBlocks/Terasology/commit/07cc660c43ff75b34caf122d146c318b8765e1fe", "message": "Merge branch 'develop' of github.com:MovingBlocks/Terasology into develop", "committedDate": "2020-06-04T21:04:53Z", "type": "commit"}, {"oid": "00c1881f661e80fba4f36252e65aab337fd17eb1", "url": "https://github.com/MovingBlocks/Terasology/commit/00c1881f661e80fba4f36252e65aab337fd17eb1", "message": "perlin noise tileable", "committedDate": "2020-06-17T17:16:07Z", "type": "commit"}, {"oid": "38aced9bdffe71da3f83e3a6a50ec712436a40dd", "url": "https://github.com/MovingBlocks/Terasology/commit/38aced9bdffe71da3f83e3a6a50ec712436a40dd", "message": "add tileable noise support, docs", "committedDate": "2020-06-21T12:51:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNTI0Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4059#discussion_r443235243", "bodyText": "Is there a specific reason for writing 1 << 8 instead of 256? Is the grid dimension required to be a power of 2?", "author": "skaldarnar", "createdAt": "2020-06-21T16:25:30Z", "path": "engine/src/main/java/org/terasology/utilities/procedural/PerlinNoise.java", "diffHunk": "@@ -27,38 +27,50 @@\n public class PerlinNoise extends AbstractNoise implements Noise2D, Noise3D {\n \n     private final int[] noisePermutations;\n+    private final int permCount;\n \n     /**\n      * Init. a new generator with a given seed value.\n      *\n      * @param seed The seed value\n      */\n     public PerlinNoise(long seed) {\n+        this(seed, 1 << 8);", "originalCommit": "38aced9bdffe71da3f83e3a6a50ec712436a40dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzODE5NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4059#discussion_r443238195", "bodyText": "Ah nothing it think this is copypasta effects?\nAnyways fixing this", "author": "sin3point14", "createdAt": "2020-06-21T17:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNTI0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNTQzMw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4059#discussion_r443235433", "bodyText": "Why do we floor two times here, or what exactly does floorMod do?", "author": "skaldarnar", "createdAt": "2020-06-21T16:28:11Z", "path": "engine/src/main/java/org/terasology/utilities/procedural/PerlinNoise.java", "diffHunk": "@@ -71,9 +83,9 @@ public PerlinNoise(long seed) {\n      */\n     @Override\n     public float noise(float posX, float posY, float posZ) {\n-        int xInt = (int) TeraMath.fastFloor(posX) & 255;\n-        int yInt = (int) TeraMath.fastFloor(posY) & 255;\n-        int zInt = (int) TeraMath.fastFloor(posZ) & 255;\n+        int xInt = Math.floorMod((int) TeraMath.fastFloor(posX), permCount);", "originalCommit": "38aced9bdffe71da3f83e3a6a50ec712436a40dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzODU2OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4059#discussion_r443238569", "bodyText": "% doesn't handle negative numbers well, for those cases floorMod is needed and fastFloor converts a float to int while always reducing it, casting to int will give issues- (int)-7.65 == -7 while -8 is needed here", "author": "sin3point14", "createdAt": "2020-06-21T17:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNTQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzODkyMg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4059#discussion_r443238922", "bodyText": "ok in the simplex implementation I found the better version to use here floorToInt, swapping it in", "author": "sin3point14", "createdAt": "2020-06-21T17:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNTQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "1e0ffa140e15051004a1f74c31d160c962121517", "chunk": "diff --git a/engine/src/main/java/org/terasology/utilities/procedural/PerlinNoise.java b/engine/src/main/java/org/terasology/utilities/procedural/PerlinNoise.java\nindex 6a5c7e78d..88b081a67 100644\n--- a/engine/src/main/java/org/terasology/utilities/procedural/PerlinNoise.java\n+++ b/engine/src/main/java/org/terasology/utilities/procedural/PerlinNoise.java\n\n@@ -83,9 +83,9 @@ public PerlinNoise(long seed, int gridDim) {\n      */\n     @Override\n     public float noise(float posX, float posY, float posZ) {\n-        int xInt = Math.floorMod((int) TeraMath.fastFloor(posX), permCount);\n-        int yInt = Math.floorMod((int) TeraMath.fastFloor(posY), permCount);\n-        int zInt = Math.floorMod((int) TeraMath.fastFloor(posZ), permCount);\n+        int xInt = Math.floorMod(TeraMath.floorToInt(posX), permCount);\n+        int yInt = Math.floorMod(TeraMath.floorToInt(posY), permCount);\n+        int zInt = Math.floorMod(TeraMath.floorToInt(posZ), permCount);\n \n         float x = posX - TeraMath.fastFloor(posX);\n         float y = posY - TeraMath.fastFloor(posY);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNTQ5Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4059#discussion_r443235493", "bodyText": "Typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public SimplexNoise(long seed, int girdDim) {\n          \n          \n            \n                public SimplexNoise(long seed, int gridDim) {", "author": "skaldarnar", "createdAt": "2020-06-21T16:29:07Z", "path": "engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java", "diffHunk": "@@ -62,42 +62,57 @@\n     private static final float F4 = ((float) Math.sqrt(5.0f) - 1.0f) / 4.0f;\n     private static final float G4 = (5.0f - (float) Math.sqrt(5.0f)) / 20.0f;\n \n-    private final short[] perm = new short[512];\n-    private final short[] permMod12 = new short[512];\n+    private final short[] perm;\n+    private final short[] permMod12;\n+    private final int permCount;\n \n     /**\n-     * Initialize permutations with a given seed\n+     * Multiply this with the gridDim provided and noise(x,x) will give tileable 1D noise which will tile\n+     * when x crosses a multiple of (this * gridDim)\n+     */\n+    public final float tileable1DMagicNumber = 0.5773502691896258f;\n+\n+    /**\n+     * Initialize permutations with a given seed and grid dimension.\n+     * Supports 1D tileable noise\n+     * @see SimplexNoise#tileable1DMagicNumber\n      *\n      * @param seed a seed value used for permutation shuffling\n+     * @param gridDim gridDim x gridDim will be the number of squares in the square grid formed after skewing the simplices belonging to once \"tile\"\n      */\n     public SimplexNoise(long seed) {\n+        this(seed, 8);\n+    }\n+\n+    public SimplexNoise(long seed, int girdDim) {", "originalCommit": "38aced9bdffe71da3f83e3a6a50ec712436a40dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e0ffa140e15051004a1f74c31d160c962121517", "chunk": "diff --git a/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java b/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java\nindex 33386af18..3679b992b 100644\n--- a/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java\n+++ b/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java\n\n@@ -65,12 +71,14 @@\n     private final short[] perm;\n     private final short[] permMod12;\n     private final int permCount;\n-\n     /**\n-     * Multiply this with the gridDim provided and noise(x,x) will give tileable 1D noise which will tile\n-     * when x crosses a multiple of (this * gridDim)\n+     * Initialize permutations with a given seed and grid dimension.\n+     *\n+     * @param seed a seed value used for permutation shuffling\n      */\n-    public final float tileable1DMagicNumber = 0.5773502691896258f;\n+    public SimplexNoise(long seed) {\n+        this(seed, 256);\n+    }\n \n     /**\n      * Initialize permutations with a given seed and grid dimension.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNTUyNw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4059#discussion_r443235527", "bodyText": "Why does Perlin noise have a grid dimension of 1 << 8 and Simplex noise a grid dimension of 8?", "author": "skaldarnar", "createdAt": "2020-06-21T16:29:38Z", "path": "engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java", "diffHunk": "@@ -62,42 +62,57 @@\n     private static final float F4 = ((float) Math.sqrt(5.0f) - 1.0f) / 4.0f;\n     private static final float G4 = (5.0f - (float) Math.sqrt(5.0f)) / 20.0f;\n \n-    private final short[] perm = new short[512];\n-    private final short[] permMod12 = new short[512];\n+    private final short[] perm;\n+    private final short[] permMod12;\n+    private final int permCount;\n \n     /**\n-     * Initialize permutations with a given seed\n+     * Multiply this with the gridDim provided and noise(x,x) will give tileable 1D noise which will tile\n+     * when x crosses a multiple of (this * gridDim)\n+     */\n+    public final float tileable1DMagicNumber = 0.5773502691896258f;\n+\n+    /**\n+     * Initialize permutations with a given seed and grid dimension.\n+     * Supports 1D tileable noise\n+     * @see SimplexNoise#tileable1DMagicNumber\n      *\n      * @param seed a seed value used for permutation shuffling\n+     * @param gridDim gridDim x gridDim will be the number of squares in the square grid formed after skewing the simplices belonging to once \"tile\"\n      */\n     public SimplexNoise(long seed) {\n+        this(seed, 8);", "originalCommit": "38aced9bdffe71da3f83e3a6a50ec712436a40dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzODYxNg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4059#discussion_r443238616", "bodyText": "Oh this was a bad miss, fixing this rn thanks!", "author": "sin3point14", "createdAt": "2020-06-21T17:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNTUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "1e0ffa140e15051004a1f74c31d160c962121517", "chunk": "diff --git a/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java b/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java\nindex 33386af18..3679b992b 100644\n--- a/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java\n+++ b/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java\n\n@@ -65,12 +71,14 @@\n     private final short[] perm;\n     private final short[] permMod12;\n     private final int permCount;\n-\n     /**\n-     * Multiply this with the gridDim provided and noise(x,x) will give tileable 1D noise which will tile\n-     * when x crosses a multiple of (this * gridDim)\n+     * Initialize permutations with a given seed and grid dimension.\n+     *\n+     * @param seed a seed value used for permutation shuffling\n      */\n-    public final float tileable1DMagicNumber = 0.5773502691896258f;\n+    public SimplexNoise(long seed) {\n+        this(seed, 256);\n+    }\n \n     /**\n      * Initialize permutations with a given seed and grid dimension.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNTY0OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4059#discussion_r443235649", "bodyText": "In the Perlin implementation you did some combination of floorMod and floor  - why is a simple modulo operation sufficient here, and why is it not sufficient in Perlin implementation?", "author": "skaldarnar", "createdAt": "2020-06-21T16:30:48Z", "path": "engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java", "diffHunk": "@@ -154,8 +169,8 @@ public float noise(float xin, float yin) {\n         float y2 = y0 - 1.0f + 2.0f * G2;\n \n         // Work out the hashed gradient indices of the three simplex corners\n-        int ii = i & 255;\n-        int jj = j & 255;\n+        int ii = i % permCount;", "originalCommit": "38aced9bdffe71da3f83e3a6a50ec712436a40dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0Mjg4NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4059#discussion_r443242885", "bodyText": "oh I thought that here i, j are positive integers but on second look I can see that this is problematic, fixed this", "author": "sin3point14", "createdAt": "2020-06-21T18:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNTY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e0ffa140e15051004a1f74c31d160c962121517", "chunk": "diff --git a/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java b/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java\nindex 33386af18..3679b992b 100644\n--- a/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java\n+++ b/engine/src/main/java/org/terasology/utilities/procedural/SimplexNoise.java\n\n@@ -169,8 +173,8 @@ public float noise(float xin, float yin) {\n         float y2 = y0 - 1.0f + 2.0f * G2;\n \n         // Work out the hashed gradient indices of the three simplex corners\n-        int ii = i % permCount;\n-        int jj = j % permCount;\n+        int ii = Math.floorMod(i, permCount);\n+        int jj = Math.floorMod(j, permCount);\n         int gi0 = permMod12[ii + perm[jj]];\n         int gi1 = permMod12[ii + i1 + perm[jj + j1]];\n         int gi2 = permMod12[ii + 1 + perm[jj + 1]];\n"}}, {"oid": "1e0ffa140e15051004a1f74c31d160c962121517", "url": "https://github.com/MovingBlocks/Terasology/commit/1e0ffa140e15051004a1f74c31d160c962121517", "message": "typo fixes, incorrect modulo operator usage fixed", "committedDate": "2020-06-21T19:37:57Z", "type": "commit"}, {"oid": "1e0ffa140e15051004a1f74c31d160c962121517", "url": "https://github.com/MovingBlocks/Terasology/commit/1e0ffa140e15051004a1f74c31d160c962121517", "message": "typo fixes, incorrect modulo operator usage fixed", "committedDate": "2020-06-21T19:37:57Z", "type": "forcePushed"}, {"oid": "f20386cde63a68d841e877d41e4ce595ce8260d6", "url": "https://github.com/MovingBlocks/Terasology/commit/f20386cde63a68d841e877d41e4ce595ce8260d6", "message": "Update .idea/misc.xml\n\nCo-authored-by: Michael Pollind <mpollind@gmail.com>", "committedDate": "2020-06-24T04:35:06Z", "type": "commit"}]}