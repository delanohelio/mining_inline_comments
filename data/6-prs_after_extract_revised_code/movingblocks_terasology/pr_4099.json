{"pr_number": 4099, "pr_title": "Make EntityRef.copy and related things deeper", "pr_createdAt": "2020-07-25T23:47:39Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4099", "timeline": [{"oid": "f30a507ae33ec4860a36002aef1bba71713e3252", "url": "https://github.com/MovingBlocks/Terasology/commit/f30a507ae33ec4860a36002aef1bba71713e3252", "message": "Make EntityRef.copy and related things deeper\n\nWhen copying a component, also make copies of all EntityRefs that\nit owns.", "committedDate": "2020-07-25T23:28:34Z", "type": "commit"}, {"oid": "3519b0366f1b7c65be2a2b88cd8b63dd8d7c7088", "url": "https://github.com/MovingBlocks/Terasology/commit/3519b0366f1b7c65be2a2b88cd8b63dd8d7c7088", "message": "Make deep copying optional\n\nAdd an argument to CopyStrategy for whether to deep copy entities,\nso that the original behaviour is still available. Entities are\ncopied deeply only if they are owned by the object being copied\nand the deep-copy version of the copy function is called.\nEntityRef.copy does a deep copy by default.", "committedDate": "2020-07-26T13:16:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU4NA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r460557584", "bodyText": "The copy method already performs a conventional \"deep\" copy. To avoid potential confusion, I think it might be better to rename this method to something like copyWithOwnedEntities (or something better) lest someone is misled into thinking that copy only performs a shallow copy.", "author": "eviltak", "createdAt": "2020-07-26T18:18:00Z", "path": "engine/src/main/java/org/terasology/reflection/metadata/ClassLibrary.java", "diffHunk": "@@ -60,6 +60,14 @@\n      */\n     <TYPE extends T> TYPE copy(TYPE object);\n \n+    /**\n+     * Copies the registered class, also making copies of any entities that it owns\n+     *\n+     * @param object The object to create a copy of\n+     * @return A copy of the class, or null if not registered\n+     */\n+    <TYPE extends T> TYPE deepCopy(TYPE object);", "originalCommit": "3519b0366f1b7c65be2a2b88cd8b63dd8d7c7088", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MjQ4NA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r460562484", "bodyText": "recursivelyDeepCopy ? \ud83d\ude01\nIf we're sure we don't end up with multiple entity owners or circular ownership loops and silly things like that.", "author": "Cervator", "createdAt": "2020-07-26T19:09:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5MjY3Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r460592672", "bodyText": "That's probably a good idea. I'll change it.\nI can think of one case where an ownership loop could potentially occur (assuming specific hypothetical module features that don't currently exist): if there's an item like the bags from some Minecraft mod I can't remember the name of, storage items that you can access directly from your inventory, it might be possible to put a bag in itself if that isn't specifically prevented. That would basically be a bug with this hypothetical module anyway though.", "author": "4Denthusiast", "createdAt": "2020-07-27T00:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "341a1a3aea5730835ceaf441a7b9710eb21a8b95", "chunk": "diff --git a/engine/src/main/java/org/terasology/reflection/metadata/ClassLibrary.java b/engine/src/main/java/org/terasology/reflection/metadata/ClassLibrary.java\nindex 513594fe2..bb9cd30cf 100644\n--- a/engine/src/main/java/org/terasology/reflection/metadata/ClassLibrary.java\n+++ b/engine/src/main/java/org/terasology/reflection/metadata/ClassLibrary.java\n\n@@ -60,14 +60,6 @@\n      */\n     <TYPE extends T> TYPE copy(TYPE object);\n \n-    /**\n-     * Copies the registered class, also making copies of any entities that it owns\n-     *\n-     * @param object The object to create a copy of\n-     * @return A copy of the class, or null if not registered\n-     */\n-    <TYPE extends T> TYPE deepCopy(TYPE object);\n-\n     /**\n      * @param uri The uri identifying the class to look up\n      * @return The metadata for the given class, or null if not registered.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDc2OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r460560768", "bodyText": "It's a matter of preference, but in this case, I personally find it more aesthetically pleasing to leave the copy method as is and introduce a separate method (analogous to ClassLibrary.deepCopy) in this interface that also copies the owned entities over using a boolean to specify conditional behavior. This new method would have a default implementation that delegates to the original copy method, so only those classes which actually have to worry about copying entities have anything to do with it.\nI should say that doing this is not a necessity, and it should be fine as is.", "author": "eviltak", "createdAt": "2020-07-26T18:51:25Z", "path": "engine/src/main/java/org/terasology/reflection/copy/CopyStrategy.java", "diffHunk": "@@ -25,8 +25,9 @@\n \n     /**\n      * @param value The value to copy\n+     * @param copyEntities Whether to make deep copies of EntityRefs that are owned by this object\n      * @return A safe to use copy of the given value.\n      */\n-    T copy(T value);\n+    T copy(T value, boolean copyEntities);", "originalCommit": "3519b0366f1b7c65be2a2b88cd8b63dd8d7c7088", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5MTE0NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r460591145", "bodyText": "I did it this way largely because most of the implementations (all but one actually) are either exactly the same for both values of copyEntities or just pass on the flag to a recursive call, therefore this method seemed a bit simpler.", "author": "4Denthusiast", "createdAt": "2020-07-27T00:07:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "341a1a3aea5730835ceaf441a7b9710eb21a8b95", "chunk": "diff --git a/engine/src/main/java/org/terasology/reflection/copy/CopyStrategy.java b/engine/src/main/java/org/terasology/reflection/copy/CopyStrategy.java\nindex 2f19a3e1f..b78ab7711 100644\n--- a/engine/src/main/java/org/terasology/reflection/copy/CopyStrategy.java\n+++ b/engine/src/main/java/org/terasology/reflection/copy/CopyStrategy.java\n\n@@ -25,9 +25,8 @@\n \n     /**\n      * @param value The value to copy\n-     * @param copyEntities Whether to make deep copies of EntityRefs that are owned by this object\n      * @return A safe to use copy of the given value.\n      */\n-    T copy(T value, boolean copyEntities);\n+    T copy(T value);\n \n }\n"}}, {"oid": "341a1a3aea5730835ceaf441a7b9710eb21a8b95", "url": "https://github.com/MovingBlocks/Terasology/commit/341a1a3aea5730835ceaf441a7b9710eb21a8b95", "message": "Reduce dependency on EntityRef\n\nCompletely rearrange the PR so that the deep copying of owned entities\nis available specifically on components via a separate CopyStrategy.", "committedDate": "2020-07-27T01:24:37Z", "type": "commit"}, {"oid": "338f7cef50d8d040d334696e72bb7e6834ebac37", "url": "https://github.com/MovingBlocks/Terasology/commit/338f7cef50d8d040d334696e72bb7e6834ebac37", "message": "Fix javadoc", "committedDate": "2020-07-27T02:10:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NzM3NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461277375", "bodyText": "Would it be worthwhile to expand on this javadoc a bit now that the cases are understood/covered better? Making it more explicit about the cases and considerations that exist.", "author": "Cervator", "createdAt": "2020-07-28T02:19:42Z", "path": "engine/src/main/java/org/terasology/entitySystem/entity/EntityRef.java", "diffHunk": "@@ -34,8 +34,6 @@\n \n     /**\n      * Copies this entity, creating a new entity with identical components.\n-     * Note: You will need to be careful when copying entities, particularly around ownership - this method does nothing to prevent you ending up", "originalCommit": "338f7cef50d8d040d334696e72bb7e6834ebac37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce970dd3416de6ff4c92f28a7d952b5532e4d21f", "chunk": "diff --git a/engine/src/main/java/org/terasology/entitySystem/entity/EntityRef.java b/engine/src/main/java/org/terasology/entitySystem/entity/EntityRef.java\nindex f2d479bd9..95f3f46f0 100644\n--- a/engine/src/main/java/org/terasology/entitySystem/entity/EntityRef.java\n+++ b/engine/src/main/java/org/terasology/entitySystem/entity/EntityRef.java\n\n@@ -34,6 +34,7 @@\n \n     /**\n      * Copies this entity, creating a new entity with identical components.\n+     * Also copies any owned entities, recursively.\n      *\n      * @return A copy of this entity.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4MjAzMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461282031", "bodyText": "Maybe toss a tiny sentence into the javadoc here just to cover it beyond param/return? For instance would it copy an owned entity of an owned entity ? Or is it just one layer?", "author": "Cervator", "createdAt": "2020-07-28T02:36:38Z", "path": "engine/src/main/java/org/terasology/entitySystem/metadata/ComponentMetadata.java", "diffHunk": "@@ -129,4 +129,31 @@ public boolean isBlockLifecycleEventsRequired() {\n     public T getAnnotation(final Class<T> type) {\n         return Iterables.getOnlyElement(Iterables.filter(annotations, type), null);\n     }\n+\n+    /**\n+     * @param object The instance of this class to copy", "originalCommit": "338f7cef50d8d040d334696e72bb7e6834ebac37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce970dd3416de6ff4c92f28a7d952b5532e4d21f", "chunk": "diff --git a/engine/src/main/java/org/terasology/entitySystem/metadata/ComponentMetadata.java b/engine/src/main/java/org/terasology/entitySystem/metadata/ComponentMetadata.java\nindex a27a9831d..bf4b5740b 100644\n--- a/engine/src/main/java/org/terasology/entitySystem/metadata/ComponentMetadata.java\n+++ b/engine/src/main/java/org/terasology/entitySystem/metadata/ComponentMetadata.java\n\n@@ -131,6 +131,8 @@ public T getAnnotation(final Class<T> type) {\n     }\n \n     /**\n+     * Makes a copy, and if there are any entities owned by this component, copy those too recursively.\n+     *\n      * @param object The instance of this class to copy\n      * @return A copy of the given object\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4MzY1Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461283652", "bodyText": "Unused exports now", "author": "Cervator", "createdAt": "2020-07-28T02:42:11Z", "path": "engine/src/main/java/org/terasology/reflection/copy/CopyStrategyLibrary.java", "diffHunk": "@@ -18,6 +18,8 @@\n import com.google.common.collect.Maps;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.terasology.entitySystem.entity.EntityRef;", "originalCommit": "338f7cef50d8d040d334696e72bb7e6834ebac37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce970dd3416de6ff4c92f28a7d952b5532e4d21f", "chunk": "diff --git a/engine/src/main/java/org/terasology/reflection/copy/CopyStrategyLibrary.java b/engine/src/main/java/org/terasology/reflection/copy/CopyStrategyLibrary.java\nindex 63aba1523..0da5ab050 100644\n--- a/engine/src/main/java/org/terasology/reflection/copy/CopyStrategyLibrary.java\n+++ b/engine/src/main/java/org/terasology/reflection/copy/CopyStrategyLibrary.java\n\n@@ -18,8 +18,6 @@\n import com.google.common.collect.Maps;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.terasology.entitySystem.entity.EntityRef;\n-import org.terasology.reflection.copy.strategy.EntityCopyStrategy;\n import org.terasology.reflection.metadata.ClassMetadata;\n import org.terasology.reflection.metadata.DefaultClassMetadata;\n import org.terasology.reflection.MappedContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDAzNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461284035", "bodyText": "This license header reminds me - you can use a compact version now, although it is still just trickling out so most are still this old one. New one is hooked up in IntelliJ so you can delete old -> right click where it was -> generate -> copyright\n// Copyright 2020 The Terasology Foundation\n// SPDX-License-Identifier: Apache-2.0", "author": "Cervator", "createdAt": "2020-07-28T02:43:41Z", "path": "engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*", "originalCommit": "338f7cef50d8d040d334696e72bb7e6834ebac37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzODQwNw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461838407", "bodyText": "I had it like this just because I copied the whole file from another copy strategy originally.", "author": "4Denthusiast", "createdAt": "2020-07-28T19:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ce970dd3416de6ff4c92f28a7d952b5532e4d21f", "chunk": "diff --git a/engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java b/engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java\nindex 97423df24..faf714ef0 100644\n--- a/engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java\n+++ b/engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java\n\n@@ -1,25 +1,13 @@\n-/*\n- * Copyright 2020 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n package org.terasology.reflection.copy.strategy;\n \n import org.terasology.entitySystem.entity.EntityRef;\n import org.terasology.reflection.copy.CopyStrategy;\n \n /**\n-* Provides a deep copy of an entity.\n+ * Provides a deep copy of an entity, including any owned entities recursively.\n  */\n public class EntityCopyStrategy implements CopyStrategy<EntityRef> {\n     public static final EntityCopyStrategy INSTANCE = new EntityCopyStrategy();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDM4Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461284382", "bodyText": "May be useful to ever so slightly expand on this, since previously what was deep or not was ambiguous - would be nice to enter the future with everything more explicit with less room for interpretation :-)", "author": "Cervator", "createdAt": "2020-07-28T02:44:55Z", "path": "engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.reflection.copy.strategy;\n+\n+import org.terasology.entitySystem.entity.EntityRef;\n+import org.terasology.reflection.copy.CopyStrategy;\n+\n+/**\n+* Provides a deep copy of an entity.", "originalCommit": "338f7cef50d8d040d334696e72bb7e6834ebac37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce970dd3416de6ff4c92f28a7d952b5532e4d21f", "chunk": "diff --git a/engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java b/engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java\nindex 97423df24..faf714ef0 100644\n--- a/engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java\n+++ b/engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java\n\n@@ -1,25 +1,13 @@\n-/*\n- * Copyright 2020 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n package org.terasology.reflection.copy.strategy;\n \n import org.terasology.entitySystem.entity.EntityRef;\n import org.terasology.reflection.copy.CopyStrategy;\n \n /**\n-* Provides a deep copy of an entity.\n+ * Provides a deep copy of an entity, including any owned entities recursively.\n  */\n public class EntityCopyStrategy implements CopyStrategy<EntityRef> {\n     public static final EntityCopyStrategy INSTANCE = new EntityCopyStrategy();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDcyNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461284725", "bodyText": "Unused import now thanks to this", "author": "Cervator", "createdAt": "2020-07-28T02:46:03Z", "path": "engine/src/main/java/org/terasology/reflection/metadata/ClassMetadata.java", "diffHunk": "@@ -100,10 +100,9 @@ private void addFields(CopyStrategyLibrary copyStrategyLibrary, ReflectFactory f\n             if (Modifier.isTransient(field.getModifiers()) || Modifier.isStatic(field.getModifiers())) {\n                 continue;\n             }\n-            CopyStrategy<?> copyStrategy = copyStrategyLibrary.getStrategy(field.getGenericType());\n \n             try {\n-                FIELD metadata = createField(field, copyStrategy, factory);\n+                FIELD metadata = createField(field, copyStrategyLibrary, factory);", "originalCommit": "338f7cef50d8d040d334696e72bb7e6834ebac37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NTg2Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461285867", "bodyText": "This class has one of those goofy empty javadoc blocks:\n/**\n */\n\nIf you notice those and/or are in there anyway making changes that might mean you understand the class a bit feel free to sprinkle a little bit of javadoc - no obligation though, even just wiping the empty block helps keep stuff a bit more tidy", "author": "Cervator", "createdAt": "2020-07-28T02:50:24Z", "path": "engine/src/main/java/org/terasology/entitySystem/metadata/EventMetadata.java", "diffHunk": "@@ -86,7 +86,7 @@ public boolean isSkipInstigator() {\n     }\n \n     @Override\n-    protected <V> ReplicatedFieldMetadata<T, ?> createField(Field field, CopyStrategy<V> copyStrategy, ReflectFactory factory) throws InaccessibleFieldException {\n-        return new ReplicatedFieldMetadata<>(this, field, copyStrategy, factory, true);\n+    protected ReplicatedFieldMetadata<T, ?> createField(Field field, CopyStrategyLibrary copyStrategyLibrary, ReflectFactory factory) throws InaccessibleFieldException {", "originalCommit": "338f7cef50d8d040d334696e72bb7e6834ebac37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "ce970dd3416de6ff4c92f28a7d952b5532e4d21f", "url": "https://github.com/MovingBlocks/Terasology/commit/ce970dd3416de6ff4c92f28a7d952b5532e4d21f", "message": "Respond to Cervator's review", "committedDate": "2020-07-28T19:56:33Z", "type": "commit"}]}