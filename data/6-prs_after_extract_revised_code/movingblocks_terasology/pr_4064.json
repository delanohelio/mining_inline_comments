{"pr_number": 4064, "pr_title": "fix(GameProvider): prevent creating game with duplicate name", "pr_createdAt": "2020-07-03T08:29:02Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4064", "timeline": [{"oid": "58bfa5a13f887eb5fa914e86c4fcf4f2d4650b07", "url": "https://github.com/MovingBlocks/Terasology/commit/58bfa5a13f887eb5fa914e86c4fcf4f2d4650b07", "message": "fix(new_game_name): Fix error with creating game, which have equals name as exists save", "committedDate": "2020-07-03T08:21:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NTE2Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4064#discussion_r453065162", "bodyText": "isn't this check included in the next one?", "author": "skaldarnar", "createdAt": "2020-07-10T20:35:21Z", "path": "engine-tests/src/test/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProviderTest.java", "diffHunk": "@@ -162,6 +178,15 @@ public void getNextGameNameDefaultNoSavesTest() {\n         assertEquals(GAME_1, name);\n     }\n \n+    @Test\n+    public void getNextGameNameCustomNoSavesTest() {\n+        String gameName = \"Custom\";\n+        final String name = GameProvider.getNextGameName(gameName);\n+\n+        assertNotNull(name);", "originalCommit": "58bfa5a13f887eb5fa914e86c4fcf4f2d4650b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MTg1Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4064#discussion_r453561853", "bodyText": "No.we already have \"saved\" game  in next test . there - not.", "author": "DarkWeird", "createdAt": "2020-07-13T10:45:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NTE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "90e33dbc012b8934830d1fc9e5b9e0d3a963e50d", "chunk": "diff --git a/engine-tests/src/test/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProviderTest.java b/engine-tests/src/test/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProviderTest.java\nindex 7381e5d6c..95afc40b9 100644\n--- a/engine-tests/src/test/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProviderTest.java\n+++ b/engine-tests/src/test/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProviderTest.java\n\n@@ -175,7 +177,7 @@ public void getNextGameNameDefaultNoSavesTest() {\n         final String name = GameProvider.getNextGameName();\n \n         assertNotNull(name);\n-        assertEquals(GAME_1, name);\n+        assertEquals(DEFAULT_GAME_NAME, name);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NjE0OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4064#discussion_r453066149", "bodyText": "What do you think of creating a method for this called mimicSaveGame(customSavesFolder, gameName)?", "author": "skaldarnar", "createdAt": "2020-07-10T20:37:58Z", "path": "engine-tests/src/test/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProviderTest.java", "diffHunk": "@@ -175,6 +200,21 @@ public void getNextGameNameNumberTest() throws IOException {\n         assertEquals(\"Game 2\", name);\n     }\n \n+    @ParameterizedTest(name = \"getNextGameName(\\\"{0}\\\") -> \\\"{1}\\\"\")\n+    @MethodSource(\"nextGameNamesProvider\")\n+    public void getNextGameNameNumberCustomNameTest(String gameName, String nextGameName) throws IOException {\n+\n+        Path customSaveFolder = TMP_SAVES_FOLDER_PATH.resolve(gameName);\n+        Files.createDirectories(customSaveFolder);\n+        Path manifestFilePath = customSaveFolder.resolve(GameManifest.DEFAULT_FILE_NAME);\n+        writeToFile(manifestFilePath, MANIFEST_EXAMPLE.replace(GAME_1, gameName));", "originalCommit": "58bfa5a13f887eb5fa914e86c4fcf4f2d4650b07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90e33dbc012b8934830d1fc9e5b9e0d3a963e50d", "chunk": "diff --git a/engine-tests/src/test/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProviderTest.java b/engine-tests/src/test/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProviderTest.java\nindex 7381e5d6c..95afc40b9 100644\n--- a/engine-tests/src/test/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProviderTest.java\n+++ b/engine-tests/src/test/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProviderTest.java\n\n@@ -197,18 +198,13 @@ public void getNextGameNameNumberTest() throws IOException {\n         final String name = GameProvider.getNextGameName();\n \n         assertNotNull(name);\n-        assertEquals(\"Game 2\", name);\n+        assertEquals(\"Game 1\", name);\n     }\n \n     @ParameterizedTest(name = \"getNextGameName(\\\"{0}\\\") -> \\\"{1}\\\"\")\n     @MethodSource(\"nextGameNamesProvider\")\n     public void getNextGameNameNumberCustomNameTest(String gameName, String nextGameName) throws IOException {\n-\n-        Path customSaveFolder = TMP_SAVES_FOLDER_PATH.resolve(gameName);\n-        Files.createDirectories(customSaveFolder);\n-        Path manifestFilePath = customSaveFolder.resolve(GameManifest.DEFAULT_FILE_NAME);\n-        writeToFile(manifestFilePath, MANIFEST_EXAMPLE.replace(GAME_1, gameName));\n-\n+        mimicGameName(gameName);\n         final String name = GameProvider.getNextGameName(gameName);\n \n         assertNotNull(name);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NjcwOA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4064#discussion_r453066708", "bodyText": "Why is this necessary? shouldn't this be covered by getNextGameName(gameName)?", "author": "skaldarnar", "createdAt": "2020-07-10T20:39:34Z", "path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProvider.java", "diffHunk": "@@ -110,21 +111,42 @@ public static boolean isSavesFolderEmpty() {\n     }\n \n     /**\n-     * Generates the game name based on the game number of the last saved game\n+     * Generates the game name based on the game number of the last saved game Uses {@link\n+     * GameProvider#DEFAULT_GAME_NAME_PREFIX} for resolve.\n      */\n     public static String getNextGameName() {\n+        String nextGameName = getNextGameName(DEFAULT_GAME_NAME_PREFIX);\n+        if (nextGameName.equals(DEFAULT_GAME_NAME_PREFIX)) {\n+            return nextGameName + 1;\n+        }", "originalCommit": "58bfa5a13f887eb5fa914e86c4fcf4f2d4650b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1OTg4Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4064#discussion_r453559883", "bodyText": "Default name is \"Game 1\"\nIf move this it getNextGameName(gameName) then any custom gamenames will have suffix \" 1\"", "author": "DarkWeird", "createdAt": "2020-07-13T10:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NjcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "f4e103ec88c4090e5658e5876a853536e9a4f2ba", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProvider.java b/engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProvider.java\nindex 2eeea1ec5..b54a5b8a2 100644\n--- a/engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProvider.java\n+++ b/engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProvider.java\n\n@@ -123,30 +124,56 @@ public static String getNextGameName() {\n     }\n \n     /**\n-     * Generates the game name based on the game number of the last saved game\n+     * Retrieve the next game name based on the game number of the last saved game.\n+     * <p>\n+     * This will append a game number or increment a given name number if the name prefix is already present as saved\n+     * game.\n+     *\n+     * <pre>\n+     *     1. \"Game\"    -> \"Game\"\n+     *     2. \"Game\"    -> \"Game 1\"\n+     *     3. \"Game 1\"  -> \"Game 2\"\n+     * </pre>\n+     * <p>\n+     * When incrementing the number the currently highest number is incremented by one (i.e., \"gaps\" are not filled).\n+     *\n+     * <pre>\n+     *     1. \"Gooey 3\"     -> \"Gooey 3\"\n+     *     2. \"Gooey\"       -> \"Gooey 4\"\n+     * </pre>\n      *\n      * @param gameName will to use as game prefix, if saves contains this game name\n-     * @return next game name with number. Example: \"Game\" -> \"Game 1\", \"Game 1 -> Game 2\"\n+     * @return next game name with number, or the given name if unique\n      */\n     public static String getNextGameName(String gameName) {\n-        int gameNumber = 1;\n-        String name = gameName;\n-        for (GameInfo info : GameProvider.getSavedGames()) {\n-            if (info.getManifest().getTitle().startsWith(name)) {\n-                String remainder = info.getManifest().getTitle().substring(name.length());\n-                if (remainder.trim().isEmpty()) {\n-                    remainder = name.replaceAll(\".*?(\\\\d+)$\", \"$1\");\n-                    name = name.replaceAll(\"(\\\\d+)$\", \"\");\n-                }\n-                try {\n-                    gameNumber = Math.max(gameNumber, Integer.parseInt(remainder) + 1);\n-                } catch (NumberFormatException e) {\n-                    logger.trace(\"Could not parse {} as integer (not an error)\", remainder, e);\n-                }\n-                return name.trim() + \" \" + gameNumber;\n-            }\n+        final NumberedGameName requestedName = NumberedGameName.fromString(gameName);\n+\n+        final Map<String, List<NumberedGameName>> savedGames = GameProvider.getSavedGames().stream()\n+                .map(savedGame -> savedGame.getManifest().getTitle())\n+                .map(NumberedGameName::fromString)\n+                .collect(Collectors.groupingBy(numberedGameName -> numberedGameName.namePrefix));\n+\n+        if (savedGames.containsKey(requestedName.namePrefix)) {\n+            final int nextNumber = highestGameNumber(savedGames.get(requestedName.namePrefix)) + 1;\n+            return new NumberedGameName(requestedName.namePrefix, Optional.of(nextNumber)).toString();\n+        } else {\n+            return requestedName.toString();\n         }\n-        return name;\n+    }\n+\n+    /**\n+     * Find the highest game number in the list of numbered game names.\n+     *\n+     * @param names a list of numbered game names\n+     * @return the highest number associated with the a game name, or 0 if none was found\n+     */\n+    private static int highestGameNumber(final List<NumberedGameName> names) {\n+        return names.stream()\n+                .map(n -> n.number)\n+                .filter(Optional::isPresent)\n+                .mapToInt(Optional::get)\n+                .max()\n+                .orElse(0);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MDEyOQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4064#discussion_r453070129", "bodyText": "This prefix match and handling looks a bit shaky to me. We probably should define way more tests to define what we expect here...", "author": "skaldarnar", "createdAt": "2020-07-10T20:48:19Z", "path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProvider.java", "diffHunk": "@@ -110,21 +111,42 @@ public static boolean isSavesFolderEmpty() {\n     }\n \n     /**\n-     * Generates the game name based on the game number of the last saved game\n+     * Generates the game name based on the game number of the last saved game Uses {@link\n+     * GameProvider#DEFAULT_GAME_NAME_PREFIX} for resolve.\n      */\n     public static String getNextGameName() {\n+        String nextGameName = getNextGameName(DEFAULT_GAME_NAME_PREFIX);\n+        if (nextGameName.equals(DEFAULT_GAME_NAME_PREFIX)) {\n+            return nextGameName + 1;\n+        }\n+        return nextGameName;\n+    }\n+\n+    /**\n+     * Generates the game name based on the game number of the last saved game\n+     *\n+     * @param gameName will to use as game prefix, if saves contains this game name\n+     * @return next game name with number. Example: \"Game\" -> \"Game 1\", \"Game 1 -> Game 2\"\n+     */\n+    public static String getNextGameName(String gameName) {\n         int gameNumber = 1;\n+        String name = gameName;\n         for (GameInfo info : GameProvider.getSavedGames()) {\n-            if (info.getManifest().getTitle().startsWith(DEFAULT_GAME_NAME_PREFIX)) {\n-                String remainder = info.getManifest().getTitle().substring(DEFAULT_GAME_NAME_PREFIX.length());\n+            if (info.getManifest().getTitle().startsWith(name)) {", "originalCommit": "58bfa5a13f887eb5fa914e86c4fcf4f2d4650b07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4e103ec88c4090e5658e5876a853536e9a4f2ba", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProvider.java b/engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProvider.java\nindex 2eeea1ec5..b54a5b8a2 100644\n--- a/engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProvider.java\n+++ b/engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/savedGames/GameProvider.java\n\n@@ -123,30 +124,56 @@ public static String getNextGameName() {\n     }\n \n     /**\n-     * Generates the game name based on the game number of the last saved game\n+     * Retrieve the next game name based on the game number of the last saved game.\n+     * <p>\n+     * This will append a game number or increment a given name number if the name prefix is already present as saved\n+     * game.\n+     *\n+     * <pre>\n+     *     1. \"Game\"    -> \"Game\"\n+     *     2. \"Game\"    -> \"Game 1\"\n+     *     3. \"Game 1\"  -> \"Game 2\"\n+     * </pre>\n+     * <p>\n+     * When incrementing the number the currently highest number is incremented by one (i.e., \"gaps\" are not filled).\n+     *\n+     * <pre>\n+     *     1. \"Gooey 3\"     -> \"Gooey 3\"\n+     *     2. \"Gooey\"       -> \"Gooey 4\"\n+     * </pre>\n      *\n      * @param gameName will to use as game prefix, if saves contains this game name\n-     * @return next game name with number. Example: \"Game\" -> \"Game 1\", \"Game 1 -> Game 2\"\n+     * @return next game name with number, or the given name if unique\n      */\n     public static String getNextGameName(String gameName) {\n-        int gameNumber = 1;\n-        String name = gameName;\n-        for (GameInfo info : GameProvider.getSavedGames()) {\n-            if (info.getManifest().getTitle().startsWith(name)) {\n-                String remainder = info.getManifest().getTitle().substring(name.length());\n-                if (remainder.trim().isEmpty()) {\n-                    remainder = name.replaceAll(\".*?(\\\\d+)$\", \"$1\");\n-                    name = name.replaceAll(\"(\\\\d+)$\", \"\");\n-                }\n-                try {\n-                    gameNumber = Math.max(gameNumber, Integer.parseInt(remainder) + 1);\n-                } catch (NumberFormatException e) {\n-                    logger.trace(\"Could not parse {} as integer (not an error)\", remainder, e);\n-                }\n-                return name.trim() + \" \" + gameNumber;\n-            }\n+        final NumberedGameName requestedName = NumberedGameName.fromString(gameName);\n+\n+        final Map<String, List<NumberedGameName>> savedGames = GameProvider.getSavedGames().stream()\n+                .map(savedGame -> savedGame.getManifest().getTitle())\n+                .map(NumberedGameName::fromString)\n+                .collect(Collectors.groupingBy(numberedGameName -> numberedGameName.namePrefix));\n+\n+        if (savedGames.containsKey(requestedName.namePrefix)) {\n+            final int nextNumber = highestGameNumber(savedGames.get(requestedName.namePrefix)) + 1;\n+            return new NumberedGameName(requestedName.namePrefix, Optional.of(nextNumber)).toString();\n+        } else {\n+            return requestedName.toString();\n         }\n-        return name;\n+    }\n+\n+    /**\n+     * Find the highest game number in the list of numbered game names.\n+     *\n+     * @param names a list of numbered game names\n+     * @return the highest number associated with the a game name, or 0 if none was found\n+     */\n+    private static int highestGameNumber(final List<NumberedGameName> names) {\n+        return names.stream()\n+                .map(n -> n.number)\n+                .filter(Optional::isPresent)\n+                .mapToInt(Optional::get)\n+                .max()\n+                .orElse(0);\n     }\n \n }\n"}}, {"oid": "0641ed142b7c85b52543df2b48eec1c4231855fd", "url": "https://github.com/MovingBlocks/Terasology/commit/0641ed142b7c85b52543df2b48eec1c4231855fd", "message": "add NumberedGameName data container to model numbered game names", "committedDate": "2020-07-10T22:40:58Z", "type": "commit"}, {"oid": "f4e103ec88c4090e5658e5876a853536e9a4f2ba", "url": "https://github.com/MovingBlocks/Terasology/commit/f4e103ec88c4090e5658e5876a853536e9a4f2ba", "message": "use NumberedGameName to determine next game name", "committedDate": "2020-07-10T22:49:51Z", "type": "commit"}, {"oid": "6754e8da2ee619e06decbecb988a54a52c3d00a8", "url": "https://github.com/MovingBlocks/Terasology/commit/6754e8da2ee619e06decbecb988a54a52c3d00a8", "message": "fix: apply matcher and throw IAE in case of unexpected parsing error", "committedDate": "2020-07-10T23:00:17Z", "type": "commit"}, {"oid": "90e33dbc012b8934830d1fc9e5b9e0d3a963e50d", "url": "https://github.com/MovingBlocks/Terasology/commit/90e33dbc012b8934830d1fc9e5b9e0d3a963e50d", "message": "chore(new-game-name): Cleanup code, add Test, rename default GameName in tests.", "committedDate": "2020-07-13T19:43:22Z", "type": "commit"}, {"oid": "f0b1fcc90563bee74f82e89479e51159a432a954", "url": "https://github.com/MovingBlocks/Terasology/commit/f0b1fcc90563bee74f82e89479e51159a432a954", "message": "fix: wait more for savegames tests", "committedDate": "2020-07-13T20:01:08Z", "type": "commit"}, {"oid": "d7c94d6e4530be6cc396b03d12dbe67f7b6f3e1e", "url": "https://github.com/MovingBlocks/Terasology/commit/d7c94d6e4530be6cc396b03d12dbe67f7b6f3e1e", "message": "fix: even more waiting...", "committedDate": "2020-07-21T20:58:10Z", "type": "commit"}, {"oid": "d2ec69d49445dcdcf0ce507dda80932e9028c7be", "url": "https://github.com/MovingBlocks/Terasology/commit/d2ec69d49445dcdcf0ce507dda80932e9028c7be", "message": "fix(tests): try longer sleep to save games properly", "committedDate": "2020-07-23T16:23:21Z", "type": "commit"}, {"oid": "7e679c2476312fb459c3e5872c136ebc0aa14ee9", "url": "https://github.com/MovingBlocks/Terasology/commit/7e679c2476312fb459c3e5872c136ebc0aa14ee9", "message": "fix(tests): reduce sleep time and integrate in mimicGameName", "committedDate": "2020-07-23T16:45:49Z", "type": "commit"}, {"oid": "ffac0cb2c248bf8a10cc42380ff01d0e7698e744", "url": "https://github.com/MovingBlocks/Terasology/commit/ffac0cb2c248bf8a10cc42380ff01d0e7698e744", "message": "fix: `InterruptedException` can be thrown", "committedDate": "2020-07-23T16:54:54Z", "type": "commit"}, {"oid": "272f197deec1e44e679b084fc1e077eb264caba7", "url": "https://github.com/MovingBlocks/Terasology/commit/272f197deec1e44e679b084fc1e077eb264caba7", "message": "fix: keep it simple stupid: use delay constant", "committedDate": "2020-07-23T17:21:35Z", "type": "commit"}, {"oid": "4a264c7cc3e9f2a2e5d07ce5c7d2d41f73d5afe8", "url": "https://github.com/MovingBlocks/Terasology/commit/4a264c7cc3e9f2a2e5d07ce5c7d2d41f73d5afe8", "message": "fix: increase timestamp delay a bit more", "committedDate": "2020-07-23T17:46:47Z", "type": "commit"}, {"oid": "01feafd42ac60da4fa2eff8e6efd0609a428e7a0", "url": "https://github.com/MovingBlocks/Terasology/commit/01feafd42ac60da4fa2eff8e6efd0609a428e7a0", "message": "fix: increase timestamp delay some more", "committedDate": "2020-07-23T18:05:11Z", "type": "commit"}, {"oid": "140c3df7909e9335f47de40f23131fd98bbc5d75", "url": "https://github.com/MovingBlocks/Terasology/commit/140c3df7909e9335f47de40f23131fd98bbc5d75", "message": "fix: increase timestamp delay even more", "committedDate": "2020-07-23T18:23:27Z", "type": "commit"}]}