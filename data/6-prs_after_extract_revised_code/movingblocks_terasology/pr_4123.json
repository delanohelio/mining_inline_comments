{"pr_number": 4123, "pr_title": "Adds new method in AbstractValueModifiableEvent to obtain result value without capping", "pr_createdAt": "2020-08-12T15:48:36Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4123", "timeline": [{"oid": "e9e7ac930862f3defd90bca38c05bc918cd9349d", "url": "https://github.com/MovingBlocks/Terasology/commit/e9e7ac930862f3defd90bca38c05bc918cd9349d", "message": "Add separate method for negative result value calculation", "committedDate": "2020-08-13T14:32:39Z", "type": "commit"}, {"oid": "e9e7ac930862f3defd90bca38c05bc918cd9349d", "url": "https://github.com/MovingBlocks/Terasology/commit/e9e7ac930862f3defd90bca38c05bc918cd9349d", "message": "Add separate method for negative result value calculation", "committedDate": "2020-08-13T14:32:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMTk5Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4123#discussion_r471021997", "bodyText": "Rather than duplicate the calculation (invites bugs) would it make sense to have getResultValue call getResultValueWithoutCapping then simply cap and return the result?", "author": "Cervator", "createdAt": "2020-08-15T18:34:25Z", "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java", "diffHunk": "@@ -76,6 +78,27 @@ public float getResultValue() {\n         return Math.max(0, (baseValue + modifiers.sum()) * product(multipliers) + postModifiers.sum());\n     }\n \n+    /**\n+     * This is a temporary method to be used in events where negative value support is essential for calculating the\n+     * result value.\n+     *\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = (<baseValue> + \u03a3 <modifier>) * \u03a0 <multiplier> + \u03a3 <postModifier>\n+     * </pre>\n+     *\n+     * <emph>Negative result values are allowed here.</emph>\n+     */\n+    public float getResultValueWithoutCapping() {\n+        //TODO: Based on an extended discussion from : https://github.com/MovingBlocks/Terasology/pull/4063\n+        // This is a temporary method which should be merged with the getResultValue() after all its uses are\n+        // checked out and corrected for(if needed).\n+        return (baseValue + modifiers.sum()) * product(multipliers) + postModifiers.sum();", "originalCommit": "e9e7ac930862f3defd90bca38c05bc918cd9349d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c231f3a4ce4b26c452163400229fa18b1d97ea10", "chunk": "diff --git a/engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java b/engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java\nindex f7ca6b1bd..4a8214634 100644\n--- a/engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java\n+++ b/engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java\n\n@@ -75,13 +74,13 @@ public float getResultValue() {\n         //TODO(skaldarnar): Based on a discussion in https://github.com/MovingBlocks/Terasology/pull/4063 we may want\n         // to lift the guarantee/restriction that the result value needs to be non-negative. Systems are still free to\n         // apply this restriction if needed.\n-        return Math.max(0, (baseValue + modifiers.sum()) * product(multipliers) + postModifiers.sum());\n+        return Math.max(0, getResultValueWithoutCapping());\n     }\n \n     /**\n      * This is a temporary method to be used in events where negative value support is essential for calculating the\n      * result value.\n-     *\n+     * <p>\n      * Calculates the result value from the base value and given modifiers and multipliers.\n      * <p>\n      * The value is calculated based on the following formula:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMjQ3OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4123#discussion_r471022479", "bodyText": "If you just have one method call the other you could probably also save the duplication in the javadoc with a @see tag or whichever the appropriate one is. Not that it is necessarily bad to be thorough but it is such a typical bug when you have two similar things then end up forgetting a spot :-)", "author": "Cervator", "createdAt": "2020-08-15T18:40:12Z", "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java", "diffHunk": "@@ -76,6 +78,27 @@ public float getResultValue() {\n         return Math.max(0, (baseValue + modifiers.sum()) * product(multipliers) + postModifiers.sum());\n     }\n \n+    /**\n+     * This is a temporary method to be used in events where negative value support is essential for calculating the\n+     * result value.\n+     *\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = (<baseValue> + \u03a3 <modifier>) * \u03a0 <multiplier> + \u03a3 <postModifier>", "originalCommit": "e9e7ac930862f3defd90bca38c05bc918cd9349d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c231f3a4ce4b26c452163400229fa18b1d97ea10", "chunk": "diff --git a/engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java b/engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java\nindex f7ca6b1bd..4a8214634 100644\n--- a/engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java\n+++ b/engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java\n\n@@ -75,13 +74,13 @@ public float getResultValue() {\n         //TODO(skaldarnar): Based on a discussion in https://github.com/MovingBlocks/Terasology/pull/4063 we may want\n         // to lift the guarantee/restriction that the result value needs to be non-negative. Systems are still free to\n         // apply this restriction if needed.\n-        return Math.max(0, (baseValue + modifiers.sum()) * product(multipliers) + postModifiers.sum());\n+        return Math.max(0, getResultValueWithoutCapping());\n     }\n \n     /**\n      * This is a temporary method to be used in events where negative value support is essential for calculating the\n      * result value.\n-     *\n+     * <p>\n      * Calculates the result value from the base value and given modifiers and multipliers.\n      * <p>\n      * The value is calculated based on the following formula:\n"}}, {"oid": "c231f3a4ce4b26c452163400229fa18b1d97ea10", "url": "https://github.com/MovingBlocks/Terasology/commit/c231f3a4ce4b26c452163400229fa18b1d97ea10", "message": "Reduce code duplication", "committedDate": "2020-08-16T13:16:14Z", "type": "commit"}, {"oid": "227d39006e4c99028f383d31333a42bb1e203221", "url": "https://github.com/MovingBlocks/Terasology/commit/227d39006e4c99028f383d31333a42bb1e203221", "message": "use @see for javadocs", "committedDate": "2020-08-16T13:24:36Z", "type": "commit"}]}