{"pr_number": 4028, "pr_title": "feat(JOML): Correct matrix output for Camera#getProjectionMatrix()", "pr_createdAt": "2020-06-03T19:13:49Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4028", "timeline": [{"oid": "d2e56c108fdad025ff9310f194e84d31fa21f57f", "url": "https://github.com/MovingBlocks/Terasology/commit/d2e56c108fdad025ff9310f194e84d31fa21f57f", "message": "feat(JOML): Correct matrix output for Camera#getProjectionMatrix()", "committedDate": "2020-06-03T19:13:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzgwMA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4028#discussion_r434823800", "bodyText": "does this end up being the same as joml's perspectiveRect? or is the fovY we come up with different than the perspective it would set if we passed display width and height to perspectiveRect?\neither way, I think we can use the setPerspective would let us avoid the need to reset the matrix to identity first.", "author": "keturn", "createdAt": "2020-06-03T20:07:25Z", "path": "engine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java", "diffHunk": "@@ -137,23 +138,25 @@ public void updateMatrices() {\n     public void updateMatrices(float fov) {\n         // Nothing to do...\n         if (cachedPosition.equals(getPosition()) && cachedViewigDirection.equals(viewingDirection)\n-                && cachedBobbingRotationOffsetFactor == bobbingRotationOffsetFactor && cachedBobbingVerticalOffsetFactor == bobbingVerticalOffsetFactor\n-                && cachedFov == fov\n-                && cachedZFar == getzFar() && cachedZNear == getzNear()\n-                && cachedReflectionHeight == getReflectionHeight()) {\n+            && cachedBobbingRotationOffsetFactor == bobbingRotationOffsetFactor && cachedBobbingVerticalOffsetFactor == bobbingVerticalOffsetFactor\n+            && cachedFov == fov\n+            && cachedZFar == getzFar() && cachedZNear == getzNear()\n+            && cachedReflectionHeight == getReflectionHeight()) {\n             return;\n         }\n \n         viewingDirection.cross(up, tempRightVector);\n         tempRightVector.mul(bobbingRotationOffsetFactor);\n \n-        projectionMatrix = createPerspectiveProjectionMatrix(fov, getzNear(), getzFar(),this.displayDevice);\n+        float aspectRatio = (float) displayDevice.getDisplayWidth() / displayDevice.getDisplayHeight();\n+        float fovY = (float) (2 * Math.atan2(Math.tan(0.5 * fov * TeraMath.DEG_TO_RAD), aspectRatio));\n+        projectionMatrix.identity().perspective(fovY, aspectRatio, getzNear(), getzFar()).transpose();", "originalCommit": "d2e56c108fdad025ff9310f194e84d31fa21f57f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzMjcxMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4028#discussion_r434832711", "bodyText": "also ... keeping the .transpose here but then re-transposing in the abstract Camera.getProjectionMatrix?\nI guess the projectionMatrix property still needs to be transposed for some things, that's probably what you meant by things you need to correct in the camera later. But I lean toward adding an additional private field so we can store the non-transposed version instead of making a new object on every access.", "author": "keturn", "createdAt": "2020-06-03T20:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzOTU5MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4028#discussion_r434839590", "bodyText": "JOMLUtil already makes new instances when it goes back and forth so I don't see too much of an issue here. If the transpose goes away then the new instance just needs to be removed. keeping an extra field seems like it will introduce a bit more work when I go back to remove it.", "author": "pollend", "createdAt": "2020-06-03T20:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "88de4134f59bf4497f3e094b9e4ef4c630d12977", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java b/engine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java\nindex 2e9f75bba..5bcd28138 100644\n--- a/engine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java\n+++ b/engine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java\n\n@@ -150,7 +150,7 @@ public void updateMatrices(float fov) {\n \n         float aspectRatio = (float) displayDevice.getDisplayWidth() / displayDevice.getDisplayHeight();\n         float fovY = (float) (2 * Math.atan2(Math.tan(0.5 * fov * TeraMath.DEG_TO_RAD), aspectRatio));\n-        projectionMatrix.identity().perspective(fovY, aspectRatio, getzNear(), getzFar()).transpose();\n+        projectionMatrix.setPerspective(fovY, aspectRatio, getzNear(), getzFar()).transpose();\n \n         viewMatrix = MatrixUtils.createViewMatrix(0f, bobbingVerticalOffsetFactor * 2.0f, 0f, viewingDirection.x, viewingDirection.y + bobbingVerticalOffsetFactor * 2.0f,\n             viewingDirection.z, up.x + tempRightVector.x, up.y + tempRightVector.y, up.z + tempRightVector.z);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDMxOQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4028#discussion_r434834319", "bodyText": "If this is something that gets called every frame, I'm itching to optimize the memory access here too, but that doesn't have to be in this PR.", "author": "keturn", "createdAt": "2020-06-03T20:28:14Z", "path": "engine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java", "diffHunk": "@@ -71,7 +72,7 @@ public boolean isBobbingAllowed() {\n     @Override\n     public void loadProjectionMatrix() {\n         glMatrixMode(GL_PROJECTION);\n-        GL11.glLoadMatrix(MatrixUtils.matrixToFloatBuffer(getProjectionMatrix()));\n+        GL11.glLoadMatrix(getProjectionMatrix().get(BufferUtils.createFloatBuffer(16)));", "originalCommit": "d2e56c108fdad025ff9310f194e84d31fa21f57f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "88de4134f59bf4497f3e094b9e4ef4c630d12977", "url": "https://github.com/MovingBlocks/Terasology/commit/88de4134f59bf4497f3e094b9e4ef4c630d12977", "message": "update projection matrix", "committedDate": "2020-06-03T22:46:13Z", "type": "commit"}, {"oid": "14be9e0b5539e227c75a14b0b70b1d50ba7f516d", "url": "https://github.com/MovingBlocks/Terasology/commit/14be9e0b5539e227c75a14b0b70b1d50ba7f516d", "message": "refactor(PerspectiveCamera): transpose projection matrix only once per update", "committedDate": "2020-06-12T20:18:15Z", "type": "commit"}, {"oid": "08d8ac9b244713a77c0c12f1dd4e4fdd206a0c6d", "url": "https://github.com/MovingBlocks/Terasology/commit/08d8ac9b244713a77c0c12f1dd4e4fdd206a0c6d", "message": "Merge pull request #2 from keturn/suggest/4028\n\nrefactor(PerspectiveCamera): transpose projection matrix only once pe\u2026", "committedDate": "2020-06-13T04:21:49Z", "type": "commit"}]}