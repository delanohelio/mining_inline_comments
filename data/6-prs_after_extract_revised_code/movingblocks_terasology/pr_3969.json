{"pr_number": 3969, "pr_title": "Upgrading LWJGL to version 3", "pr_createdAt": "2020-05-19T06:11:49Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/3969", "timeline": [{"oid": "132882ad365c1d8e1fdedbe4aeab8c77c2b61899", "url": "https://github.com/MovingBlocks/Terasology/commit/132882ad365c1d8e1fdedbe4aeab8c77c2b61899", "message": "chore(LWJGL3): expose lwjgl3 libs to modules", "committedDate": "2020-05-21T08:48:18Z", "type": "forcePushed"}, {"oid": "7da81a4c3b8a95e82cc990ba754b36cdfcad8a28", "url": "https://github.com/MovingBlocks/Terasology/commit/7da81a4c3b8a95e82cc990ba754b36cdfcad8a28", "message": "feat(LWJGL3): initial migrate", "committedDate": "2020-06-08T17:52:37Z", "type": "commit"}, {"oid": "7d5d90868a90794f2c457f4e00e48831b731d1df", "url": "https://github.com/MovingBlocks/Terasology/commit/7d5d90868a90794f2c457f4e00e48831b731d1df", "message": "fix: keyboard binding id from lwjgl's to tera's", "committedDate": "2020-06-08T17:52:40Z", "type": "commit"}, {"oid": "c6c7a987e3aca3b5d3f080e251d0f364534cc500", "url": "https://github.com/MovingBlocks/Terasology/commit/c6c7a987e3aca3b5d3f080e251d0f364534cc500", "message": "fix: save window position and window size on exit", "committedDate": "2020-06-08T17:52:40Z", "type": "commit"}, {"oid": "22950e9954fb9d9a99028aad8bc64d27828761b4", "url": "https://github.com/MovingBlocks/Terasology/commit/22950e9954fb9d9a99028aad8bc64d27828761b4", "message": "chore: refactor GL and GLFW debug/error callbacks", "committedDate": "2020-06-08T17:52:40Z", "type": "commit"}, {"oid": "d15eeec65748a5f02e7ad25cbf5a2d7b350724eb", "url": "https://github.com/MovingBlocks/Terasology/commit/d15eeec65748a5f02e7ad25cbf5a2d7b350724eb", "message": "Fix: WindowResizeCallback creates only 1 time on window creation", "committedDate": "2020-06-08T17:52:40Z", "type": "commit"}, {"oid": "9c7cb572030c377437dffcc1812857481a80e381", "url": "https://github.com/MovingBlocks/Terasology/commit/9c7cb572030c377437dffcc1812857481a80e381", "message": "Fix: Return SkySphere! and glu's Sphere related things", "committedDate": "2020-06-08T17:52:43Z", "type": "commit"}, {"oid": "feaa3a19bcf2e40b47ff9184b911c3b07d45abaa", "url": "https://github.com/MovingBlocks/Terasology/commit/feaa3a19bcf2e40b47ff9184b911c3b07d45abaa", "message": "Fix: Settings Resolution restored now!", "committedDate": "2020-06-08T17:52:45Z", "type": "commit"}, {"oid": "3689c8d698e0688ef839f72bdf4472d2a3611fc9", "url": "https://github.com/MovingBlocks/Terasology/commit/3689c8d698e0688ef839f72bdf4472d2a3611fc9", "message": "chore(LWJGL3): expose lwjgl3 libs to modules", "committedDate": "2020-06-08T17:54:11Z", "type": "commit"}, {"oid": "b615a280950d68437dd907d1d4fdb934dad6555d", "url": "https://github.com/MovingBlocks/Terasology/commit/b615a280950d68437dd907d1d4fdb934dad6555d", "message": "fix(LWJGL3): fix disable vSync", "committedDate": "2020-06-08T17:54:13Z", "type": "commit"}, {"oid": "4cde3a866e83f7256f3aed27c2a01c2fa5525184", "url": "https://github.com/MovingBlocks/Terasology/commit/4cde3a866e83f7256f3aed27c2a01c2fa5525184", "message": "fix(LWJGL3): fixed mouse scroll. before was delta=0", "committedDate": "2020-06-08T17:54:13Z", "type": "commit"}, {"oid": "47b2ec149afdf29e3b1ba2114d9ff8ebc24d737d", "url": "https://github.com/MovingBlocks/Terasology/commit/47b2ec149afdf29e3b1ba2114d9ff8ebc24d737d", "message": "fix(Lwjgl3): reordered lwjgl3 natives init and direct implement os detect. otherwise System.setProperty haven't any effect on Lwjgl Configuration.", "committedDate": "2020-06-08T17:54:13Z", "type": "commit"}, {"oid": "cdd628201809b32f6705b46d3530a84cc575ed48", "url": "https://github.com/MovingBlocks/Terasology/commit/cdd628201809b32f6705b46d3530a84cc575ed48", "message": "fix(Lwjgl3): fixed Resolution, switching DesplayModes", "committedDate": "2020-06-08T17:54:13Z", "type": "commit"}, {"oid": "1d4435848384f1aa0bd5143ccbbf29c96e65e542", "url": "https://github.com/MovingBlocks/Terasology/commit/1d4435848384f1aa0bd5143ccbbf29c96e65e542", "message": "chore(LWJGL3): Remove static getter for window/display size", "committedDate": "2020-06-08T17:54:16Z", "type": "commit"}, {"oid": "1e0a8224e3d02e0b3c0a608e2e7617815701c34f", "url": "https://github.com/MovingBlocks/Terasology/commit/1e0a8224e3d02e0b3c0a608e2e7617815701c34f", "message": "fix(LWJGL3): Fix FrameLimit", "committedDate": "2020-06-08T17:54:17Z", "type": "commit"}, {"oid": "760f8c46c3cd536c398f2839ea386ced5bd0ab86", "url": "https://github.com/MovingBlocks/Terasology/commit/760f8c46c3cd536c398f2839ea386ced5bd0ab86", "message": "fix(LWJGL3): Merge keys and chars from callbacks together.", "committedDate": "2020-06-08T17:54:17Z", "type": "commit"}, {"oid": "35af4a3c0130553f06f0a33903a025b1e32f588c", "url": "https://github.com/MovingBlocks/Terasology/commit/35af4a3c0130553f06f0a33903a025b1e32f588c", "message": "chore(LWJGL3): refactor Sync(framelimiter) names.", "committedDate": "2020-06-08T17:54:17Z", "type": "commit"}, {"oid": "ec235660ed47b9713709118d345201f22237ab8f", "url": "https://github.com/MovingBlocks/Terasology/commit/ec235660ed47b9713709118d345201f22237ab8f", "message": "fix(LWJGL3): fix OpenGL's messages", "committedDate": "2020-06-08T17:54:17Z", "type": "commit"}, {"oid": "f9d94a310892a1ef3ebb055197bd0c026e05f8b9", "url": "https://github.com/MovingBlocks/Terasology/commit/f9d94a310892a1ef3ebb055197bd0c026e05f8b9", "message": "chore(LWJGL3): cleanup commented code/todos. PixelFormat(depth bits) returned", "committedDate": "2020-06-08T17:54:17Z", "type": "commit"}, {"oid": "8c1499c15faf5e5706e3274c02831f0d84632654", "url": "https://github.com/MovingBlocks/Terasology/commit/8c1499c15faf5e5706e3274c02831f0d84632654", "message": "fix(LWJGL3): revert .idea configs", "committedDate": "2020-06-08T17:54:17Z", "type": "commit"}, {"oid": "3d78b7ad2af0faea9b093d0a06e2410bf41d57fa", "url": "https://github.com/MovingBlocks/Terasology/commit/3d78b7ad2af0faea9b093d0a06e2410bf41d57fa", "message": "fix(LWJGL3): make OS detection for determinate platform path - lwjgl-independ (it can break writing lwjgl's path natives)", "committedDate": "2020-06-08T17:54:17Z", "type": "commit"}, {"oid": "10f639b21b36a2f59d92d064edeefbe768eb94ee", "url": "https://github.com/MovingBlocks/Terasology/commit/10f639b21b36a2f59d92d064edeefbe768eb94ee", "message": "chore(lwjgl3): update LWJGL3 for DAG", "committedDate": "2020-06-08T19:54:55Z", "type": "commit"}, {"oid": "b377ec148b7904fcce95fe5b1893f2d1b8c09b30", "url": "https://github.com/MovingBlocks/Terasology/commit/b377ec148b7904fcce95fe5b1893f2d1b8c09b30", "message": "Merge remote-tracking branch 'tera/develop' into lwjgl3\n\n# Conflicts:\n#\tengine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglGraphics.java\n#\tengine/src/main/java/org/terasology/rendering/ShaderManagerLwjgl.java", "committedDate": "2020-06-08T20:04:22Z", "type": "commit"}, {"oid": "b377ec148b7904fcce95fe5b1893f2d1b8c09b30", "url": "https://github.com/MovingBlocks/Terasology/commit/b377ec148b7904fcce95fe5b1893f2d1b8c09b30", "message": "Merge remote-tracking branch 'tera/develop' into lwjgl3\n\n# Conflicts:\n#\tengine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglGraphics.java\n#\tengine/src/main/java/org/terasology/rendering/ShaderManagerLwjgl.java", "committedDate": "2020-06-08T20:04:22Z", "type": "forcePushed"}, {"oid": "4246b761a4e4dd138563f6da41e5f41d9f285802", "url": "https://github.com/MovingBlocks/Terasology/commit/4246b761a4e4dd138563f6da41e5f41d9f285802", "message": "fix(lwjgl3): Fix lwjgl2's GLContext -> lwjgl3's GL in SpritePraticleRenderer", "committedDate": "2020-06-08T20:15:27Z", "type": "commit"}, {"oid": "7bacf1ca60997df0b89837f207118bdf4a706ee4", "url": "https://github.com/MovingBlocks/Terasology/commit/7bacf1ca60997df0b89837f207118bdf4a706ee4", "message": "feat(lwjgl3): Update for LWJGL3", "committedDate": "2020-07-02T19:37:24Z", "type": "commit"}, {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "url": "https://github.com/MovingBlocks/Terasology/commit/a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "message": "Merge remote-tracking branch 'tera/develop' into lwjgl3\n\n# Conflicts:\n#\tengine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java\n#\tengine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java", "committedDate": "2020-07-02T19:41:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDQ3NA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449694474", "bodyText": "A brief bit of class-level javadoc is always nice to have, even if the methods are javadocced :-)", "author": "Cervator", "createdAt": "2020-07-03T20:05:23Z", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.engine.subsystem.lwjgl;\n+\n+import org.lwjgl.glfw.GLFW;\n+\n+public final class Lwjgl2Sync {", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java\nindex adbd4205f..f276b1296 100644\n--- a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java\n+++ b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java\n\n@@ -1,48 +1,35 @@\n-/*\n- * Copyright 2020 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n package org.terasology.engine.subsystem.lwjgl;\n \n import org.lwjgl.glfw.GLFW;\n \n+/**\n+ * A highly accurate sync method that continually adapts to the system it runs on to provide reliable results.\n+ */\n public final class Lwjgl2Sync {\n \n-    private Lwjgl2Sync() {\n-    }\n-\n     /**\n      * number of nano seconds in a second\n      */\n     private static final long NANOS_IN_SECOND = 1000L * 1000L * 1000L;\n-\n     /**\n-     * The time to sleep/yield until the next frame\n+     * for calculating the averages the previous sleep/yield times are stored\n      */\n-    private static long nextFrame = 0;\n-\n+    private static final RunningAvg SLEEP_DURATIONS = new RunningAvg(10);\n+    private static final RunningAvg YIELD_DURATIONS = new RunningAvg(10);\n     /**\n-     * whether the initialisation code has run\n+     * The time to sleep/yield until the next frame\n      */\n-    private static boolean initialised = false;\n-\n+    private static long nextFrame;\n     /**\n-     * for calculating the averages the previous sleep/yield times are stored\n+     * whether the initialisation code has run\n      */\n-    private static RunningAvg sleepDurations = new RunningAvg(10);\n-    private static RunningAvg yieldDurations = new RunningAvg(10);\n+    private static boolean initialised;\n \n+    private Lwjgl2Sync() {\n+    }\n \n     /**\n      * An accurate sync method that will attempt to run at a constant frame rate. It should be called once every frame.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDYyMw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449694623", "bodyText": "Aiieeee brackets here and the next line. What does this class do anyway? Is it copied in from somewhere or original?", "author": "Cervator", "createdAt": "2020-07-03T20:06:16Z", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.engine.subsystem.lwjgl;\n+\n+import org.lwjgl.glfw.GLFW;\n+\n+public final class Lwjgl2Sync {\n+\n+    private Lwjgl2Sync() {\n+    }\n+\n+    /**\n+     * number of nano seconds in a second\n+     */\n+    private static final long NANOS_IN_SECOND = 1000L * 1000L * 1000L;\n+\n+    /**\n+     * The time to sleep/yield until the next frame\n+     */\n+    private static long nextFrame = 0;\n+\n+    /**\n+     * whether the initialisation code has run\n+     */\n+    private static boolean initialised = false;\n+\n+    /**\n+     * for calculating the averages the previous sleep/yield times are stored\n+     */\n+    private static RunningAvg sleepDurations = new RunningAvg(10);\n+    private static RunningAvg yieldDurations = new RunningAvg(10);\n+\n+\n+    /**\n+     * An accurate sync method that will attempt to run at a constant frame rate. It should be called once every frame.\n+     *\n+     * @param fps - the desired frame rate, in frames per second\n+     */\n+    public static void sync(int fps) {\n+        if (fps <= 0) return;", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java\nindex adbd4205f..f276b1296 100644\n--- a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java\n+++ b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java\n\n@@ -1,48 +1,35 @@\n-/*\n- * Copyright 2020 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n package org.terasology.engine.subsystem.lwjgl;\n \n import org.lwjgl.glfw.GLFW;\n \n+/**\n+ * A highly accurate sync method that continually adapts to the system it runs on to provide reliable results.\n+ */\n public final class Lwjgl2Sync {\n \n-    private Lwjgl2Sync() {\n-    }\n-\n     /**\n      * number of nano seconds in a second\n      */\n     private static final long NANOS_IN_SECOND = 1000L * 1000L * 1000L;\n-\n     /**\n-     * The time to sleep/yield until the next frame\n+     * for calculating the averages the previous sleep/yield times are stored\n      */\n-    private static long nextFrame = 0;\n-\n+    private static final RunningAvg SLEEP_DURATIONS = new RunningAvg(10);\n+    private static final RunningAvg YIELD_DURATIONS = new RunningAvg(10);\n     /**\n-     * whether the initialisation code has run\n+     * The time to sleep/yield until the next frame\n      */\n-    private static boolean initialised = false;\n-\n+    private static long nextFrame;\n     /**\n-     * for calculating the averages the previous sleep/yield times are stored\n+     * whether the initialisation code has run\n      */\n-    private static RunningAvg sleepDurations = new RunningAvg(10);\n-    private static RunningAvg yieldDurations = new RunningAvg(10);\n+    private static boolean initialised;\n \n+    private Lwjgl2Sync() {\n+    }\n \n     /**\n      * An accurate sync method that will attempt to run at a constant frame rate. It should be called once every frame.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDczMA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449694730", "bodyText": "Howcome! \ud83d\ude01", "author": "Cervator", "createdAt": "2020-07-03T20:06:59Z", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.engine.subsystem.lwjgl;\n+\n+import org.lwjgl.glfw.GLFW;\n+\n+public final class Lwjgl2Sync {\n+\n+    private Lwjgl2Sync() {\n+    }\n+\n+    /**\n+     * number of nano seconds in a second\n+     */\n+    private static final long NANOS_IN_SECOND = 1000L * 1000L * 1000L;\n+\n+    /**\n+     * The time to sleep/yield until the next frame\n+     */\n+    private static long nextFrame = 0;\n+\n+    /**\n+     * whether the initialisation code has run\n+     */\n+    private static boolean initialised = false;\n+\n+    /**\n+     * for calculating the averages the previous sleep/yield times are stored\n+     */\n+    private static RunningAvg sleepDurations = new RunningAvg(10);\n+    private static RunningAvg yieldDurations = new RunningAvg(10);\n+\n+\n+    /**\n+     * An accurate sync method that will attempt to run at a constant frame rate. It should be called once every frame.\n+     *\n+     * @param fps - the desired frame rate, in frames per second\n+     */\n+    public static void sync(int fps) {\n+        if (fps <= 0) return;\n+        if (!initialised) initialise();\n+\n+        try {\n+            // sleep until the average sleep time is greater than the time remaining till nextFrame\n+            for (long t0 = getTime(), t1; (nextFrame - t0) > sleepDurations.avg(); t0 = t1) {\n+                Thread.sleep(1);\n+                sleepDurations.add((t1 = getTime()) - t0); // update average sleep time\n+            }\n+\n+            // slowly dampen sleep average if too high to avoid yielding too much\n+            sleepDurations.dampenForLowResTicker();\n+\n+            // yield until the average yield time is greater than the time remaining till nextFrame\n+            for (long t0 = getTime(), t1; (nextFrame - t0) > yieldDurations.avg(); t0 = t1) {\n+                Thread.yield();\n+                yieldDurations.add((t1 = getTime()) - t0); // update average yield time\n+            }\n+        } catch (InterruptedException e) {\n+\n+        }\n+\n+        // schedule next frame, drop frame(s) if already too late for next frame\n+        nextFrame = Math.max(nextFrame + NANOS_IN_SECOND / fps, getTime());\n+    }\n+\n+    /**\n+     * This method will initialise the sync method by setting initial values for sleepDurations/yieldDurations and\n+     * nextFrame.\n+     * <p>\n+     * If running on windows it will start the sleep timer fix.\n+     */\n+    private static void initialise() {\n+        initialised = true;\n+\n+        sleepDurations.init(1000 * 1000);\n+        yieldDurations.init((int) (-(getTime() - getTime()) * 1.333));\n+\n+        nextFrame = getTime();\n+\n+        String osName = System.getProperty(\"os.name\");\n+\n+        if (osName.startsWith(\"Win\")) {\n+            // On windows the sleep functions can be highly inaccurate by\n+            // over 10ms making in unusable. However it can be forced to\n+            // be a bit more accurate by running a separate sleeping daemon\n+            // thread.\n+            Thread timerAccuracyThread = new Thread(new Runnable() {\n+                public void run() {\n+                    try {\n+                        Thread.sleep(Long.MAX_VALUE);\n+                    } catch (Exception e) {\n+                    }\n+                }\n+            });\n+\n+            timerAccuracyThread.setName(\"LWJGL Timer\");\n+            timerAccuracyThread.setDaemon(true);\n+            timerAccuracyThread.start();\n+        }\n+    }\n+\n+    /**\n+     * Get the system time in nano seconds\n+     *\n+     * @return will return the current time in nano's\n+     */\n+    private static long getTime() {\n+        return (long) (GLFW.glfwGetTime() * NANOS_IN_SECOND);\n+    }\n+\n+    private static class RunningAvg {\n+        private final long[] slots;\n+        private int offset;\n+\n+        private static final long DAMPEN_THRESHOLD = 10 * 1000L * 1000L; // 10ms\n+        private static final float DAMPEN_FACTOR = 0.9f; // don't change: 0.9f is exactly right!", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyNDYxMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r450224611", "bodyText": "Copy-paste from LWJGL2's class.\nIt is Sync.java - it is exactly right! :D", "author": "DarkWeird", "createdAt": "2020-07-06T13:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDczMA=="}], "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java\nindex adbd4205f..f276b1296 100644\n--- a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java\n+++ b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java\n\n@@ -1,48 +1,35 @@\n-/*\n- * Copyright 2020 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n package org.terasology.engine.subsystem.lwjgl;\n \n import org.lwjgl.glfw.GLFW;\n \n+/**\n+ * A highly accurate sync method that continually adapts to the system it runs on to provide reliable results.\n+ */\n public final class Lwjgl2Sync {\n \n-    private Lwjgl2Sync() {\n-    }\n-\n     /**\n      * number of nano seconds in a second\n      */\n     private static final long NANOS_IN_SECOND = 1000L * 1000L * 1000L;\n-\n     /**\n-     * The time to sleep/yield until the next frame\n+     * for calculating the averages the previous sleep/yield times are stored\n      */\n-    private static long nextFrame = 0;\n-\n+    private static final RunningAvg SLEEP_DURATIONS = new RunningAvg(10);\n+    private static final RunningAvg YIELD_DURATIONS = new RunningAvg(10);\n     /**\n-     * whether the initialisation code has run\n+     * The time to sleep/yield until the next frame\n      */\n-    private static boolean initialised = false;\n-\n+    private static long nextFrame;\n     /**\n-     * for calculating the averages the previous sleep/yield times are stored\n+     * whether the initialisation code has run\n      */\n-    private static RunningAvg sleepDurations = new RunningAvg(10);\n-    private static RunningAvg yieldDurations = new RunningAvg(10);\n+    private static boolean initialised;\n \n+    private Lwjgl2Sync() {\n+    }\n \n     /**\n      * An accurate sync method that will attempt to run at a constant frame rate. It should be called once every frame.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDgxOQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449694819", "bodyText": "Howcome this goes API?", "author": "Cervator", "createdAt": "2020-07-03T20:07:37Z", "path": "engine/src/main/java/org/terasology/engine/subsystem/DisplayDevice.java", "diffHunk": "@@ -15,11 +15,13 @@\n  */\n package org.terasology.engine.subsystem;\n \n+import org.terasology.module.sandbox.API;\n import org.terasology.rendering.nui.layers.mainMenu.videoSettings.DisplayModeSetting;\n import org.terasology.utilities.subscribables.Subscribable;\n \n import java.util.List;\n \n+@API", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzMDA0Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r450230043", "bodyText": "It needs needs for rendering module now.\nThis class provides window width and height.", "author": "DarkWeird", "createdAt": "2020-07-06T13:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDgxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTA1NA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449695054", "bodyText": "Commented out code? Any reason to not just remove?", "author": "Cervator", "createdAt": "2020-07-03T20:09:18Z", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglGraphics.java", "diffHunk": "@@ -143,126 +174,187 @@ public void registerCoreAssetTypes(ModuleAwareAssetTypeManager assetTypeManager)\n     public void postInitialise(Context rootContext) {\n         context.put(RenderingSubsystemFactory.class, new LwjglRenderingSubsystemFactory(bufferPool));\n \n-        initDisplay();\n+        initGLFW();\n+        initWindow();\n         initOpenGL(context);\n \n         context.put(CanvasRenderer.class, new LwjglCanvasRenderer(context));\n     }\n \n     @Override\n     public void postUpdate(GameState currentState, float delta) {\n-        Display.update();\n-\n         if (!displayThreadActions.isEmpty()) {\n             List<Runnable> actions = Lists.newArrayListWithExpectedSize(displayThreadActions.size());\n             displayThreadActions.drainTo(actions);\n             actions.forEach(Runnable::run);\n         }\n \n-        int frameLimit = context.get(Config.class).getRendering().getFrameLimit();\n-        if (frameLimit > 0) {\n-            Display.sync(frameLimit);\n-        }\n         currentState.render();\n \n         lwjglDisplay.update();\n-\n+        int frameLimit = context.get(Config.class).getRendering().getFrameLimit();\n+        if (frameLimit > 0) {\n+            Lwjgl2Sync.sync(frameLimit);\n+        }\n         if (lwjglDisplay.isCloseRequested()) {\n             engine.shutdown();\n         }\n     }\n \n     @Override\n     public void preShutdown() {\n-        if (Display.isCreated() && !Display.isFullscreen() && Display.isVisible()) {\n-            config.setWindowPosX(Display.getX());\n-            config.setWindowPosY(Display.getY());\n-\n-            config.setWindowWidth(Display.getWidth());\n-            config.setWindowHeight(Display.getHeight());\n-\n+        long window = GLFW.glfwGetCurrentContext();\n+        if (window != MemoryUtil.NULL) {\n+            boolean isVisible = GLFW.glfwGetWindowAttrib(window, GLFW.GLFW_VISIBLE) == GLFW.GLFW_TRUE;\n+            boolean isFullScreen = lwjglDisplay.isFullscreen();\n+            if (!isFullScreen && isVisible) {\n+                int[] xBuffer = new int[1];\n+                int[] yBuffer = new int[1];\n+                GLFW.glfwGetWindowPos(window, xBuffer, yBuffer);\n+                config.setWindowPosX(xBuffer[0]);\n+                config.setWindowPosY(yBuffer[0]);\n+\n+                int[] widthBuffer = new int[1];\n+                int[] heightBuffer = new int[1];\n+                GLFW.glfwGetWindowSize(window, widthBuffer, heightBuffer);\n+                config.setWindowWidth(widthBuffer[0]);\n+                config.setWindowHeight(heightBuffer[0]);\n+            }\n         }\n     }\n \n     @Override\n     public void shutdown() {\n-        Display.destroy();\n+        GLFW.glfwTerminate();\n     }\n \n-    private void initDisplay() {\n-        logger.info(\"Initializing display (if last line in log then likely the game crashed from an issue with your video card)\");\n-\n-        try {\n+    private void initGLFW() {\n+        if (!GLFW.glfwInit()) {\n+            throw new RuntimeException(\"Failed to initialize GLFW\");\n+        }\n \n-            lwjglDisplay.setDisplayModeSetting(config.getDisplayModeSetting(), false);\n+        GLFW.glfwDefaultWindowHints();\n+        GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE);\n+        GLFW.glfwWindowHint(GLFW.GLFW_COCOA_GRAPHICS_SWITCHING, GLFW.GLFW_TRUE);\n+        GLFW.glfwWindowHint(GLFW.GLFW_DEPTH_BITS, config.getPixelFormat());\n \n-            Display.setTitle(\"Terasology\" + \" | \" + \"Alpha\");\n-            try {\n+//        GLFW.glfwWindowHint(GLFW.GLFW_CLIENT_API, GLFW.GLFW_OPENGL_API);", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglGraphics.java b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglGraphics.java\nindex ccb1e19a4..ef5e73dea 100644\n--- a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglGraphics.java\n+++ b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglGraphics.java\n\n@@ -238,13 +238,6 @@ private void initGLFW() {\n         GLFW.glfwWindowHint(GLFW.GLFW_COCOA_GRAPHICS_SWITCHING, GLFW.GLFW_TRUE);\n         GLFW.glfwWindowHint(GLFW.GLFW_DEPTH_BITS, config.getPixelFormat());\n \n-//        GLFW.glfwWindowHint(GLFW.GLFW_CLIENT_API, GLFW.GLFW_OPENGL_API);\n-//        GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_VERSION_MAJOR, 3);\n-//        GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_VERSION_MINOR, 3);\n-//        if (Platform.get() == Platform.MACOSX) {\n-//            GLFW.glfwWindowHint(GLFW.GLFW_OPENGL_PROFILE, GLFW.GLFW_OPENGL_COMPAT_PROFILE);\n-//        }\n-\n         if (config.getDebug().isEnabled()) {\n             GLFW.glfwWindowHint(GLFW.GLFW_OPENGL_DEBUG_CONTEXT, GLFW.GLFW_TRUE);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTQ4Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449695483", "bodyText": "Eh? Also this reminds me about the rare issues where the mouse cursor gets grabbed funny and won't let go for some devs. No idea if that's related, like if you had commented this out to avoid that while working on the PR?", "author": "Cervator", "createdAt": "2020-07-03T20:11:55Z", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglInput.java", "diffHunk": "@@ -47,36 +44,25 @@ public void postInitialise(Context rootContext) {\n         this.context = rootContext;\n         initControls();\n         updateInputConfig();\n-        Mouse.setGrabbed(false);\n+        // Mouse.setGrabbed(false);", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d998f6e38bc636ea2502f7a938a8df8be9e5a31", "chunk": "diff --git a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglInput.java b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglInput.java\nindex b6aa9ebb2..540849599 100644\n--- a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglInput.java\n+++ b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglInput.java\n\n@@ -44,7 +44,6 @@ public void postInitialise(Context rootContext) {\n         this.context = rootContext;\n         initControls();\n         updateInputConfig();\n-        // Mouse.setGrabbed(false);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTY5MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449695690", "bodyText": "Would be nice with some more details for this - what needs to be fixed? What's broken? Should we submit an issue with details then link to that issue from the TODO? What does this portlet even do?", "author": "Cervator", "createdAt": "2020-07-03T20:13:15Z", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglPortlet.java", "diffHunk": "@@ -32,11 +30,13 @@ public String getName() {\n \n     @Override\n     public void postInitialise(Context context) {\n-        try {\n-            Display.setParent(customViewPort);\n-        } catch (LWJGLException e) {\n-            throw new RuntimeException(\"Can not initialize graphics device.\", e);\n-        }\n+        // FIXME: LWJGL 3 - reimplement", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglPortlet.java b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglPortlet.java\nindex 1b258aeab..80457c284 100644\n--- a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglPortlet.java\n+++ b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglPortlet.java\n\n@@ -30,13 +30,10 @@ public String getName() {\n \n     @Override\n     public void postInitialise(Context context) {\n-        // FIXME: LWJGL 3 - reimplement\n-        throw new RuntimeException(\"after moving to lwjgl3 it is not implement\"); //TODO FIXIT\n-//        try {\n-//            Display.setParent(customViewPort);\n-//        } catch (LWJGLException e) {\n-//            throw new RuntimeException(\"Can not initialize graphics device.\", e);\n-//        }\n+        // FIXME: LWJGL 3  haven't classes for working with awt.\n+        // Used by TeraED facade only.\n+        // Needs rework TeraED rendering part.\n+        throw new RuntimeException(\"Not implemented\");\n     }\n \n     public void setCustomViewport(Canvas canvas) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTkwOQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449695909", "bodyText": "Very trivial, but a missing space here between ){ - haven't looked too closely for such code style issues elsewhere, but it may be worth doing a little Checkstyle pass per changed class in your IDE", "author": "Cervator", "createdAt": "2020-07-03T20:14:42Z", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglResolution.java", "diffHunk": "@@ -15,42 +15,105 @@\n  */\n package org.terasology.engine.subsystem.lwjgl;\n \n-import org.lwjgl.opengl.DisplayMode;\n+import org.lwjgl.glfw.GLFWVidMode;\n import org.terasology.engine.subsystem.Resolution;\n \n+import java.util.Objects;\n+\n public final class LwjglResolution implements Resolution {\n \n-    private final DisplayMode displayMode;\n+    private int width;\n+    private int height;\n+    private int redBits;\n+    private int greenBits;\n+    private int blueBits;\n+    private int refreshRate;\n+\n+    public LwjglResolution(GLFWVidMode vidMode) {\n+        this.width = vidMode.width();\n+        this.height = vidMode.height();\n+        this.redBits = vidMode.redBits();\n+        this.greenBits = vidMode.greenBits();\n+        this.blueBits = vidMode.blueBits();\n+        this.refreshRate = vidMode.refreshRate();\n+    }\n+\n+    public LwjglResolution(int width, int height, int redBits, int greenBits, int blueBits, int refreshRate) {\n+        this.width = width;\n+        this.height = height;\n+        this.redBits = redBits;\n+        this.greenBits = greenBits;\n+        this.blueBits = blueBits;\n+        this.refreshRate = refreshRate;\n+    }\n+\n+    public int getWidth() {\n+        return width;\n+    }\n+\n+    public int getHeight() {\n+        return height;\n+    }\n+\n+    public int getRedBits() {\n+        return redBits;\n+    }\n \n-    public LwjglResolution(DisplayMode displayMode) {\n-        this.displayMode = displayMode;\n+    public int getGreenBits() {\n+        return greenBits;\n     }\n \n-    public DisplayMode getDisplayMode() {\n-        return displayMode;\n+    public int getBlueBits() {\n+        return blueBits;\n+    }\n+\n+    public int getRefreshRate() {\n+        return refreshRate;\n     }\n \n     @Override\n     public boolean equals(Object o) {\n         if (this == o) {\n             return true;\n         }\n-        if (o == null || getClass() != o.getClass()) {\n+        if (o == null) {\n+            return false;\n+        } else if (o instanceof GLFWVidMode){", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglResolution.java b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglResolution.java\nindex 2fa097711..b8c4a1b2e 100644\n--- a/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglResolution.java\n+++ b/engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglResolution.java\n\n@@ -1,18 +1,6 @@\n-/*\n- * Copyright 2018 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n package org.terasology.engine.subsystem.lwjgl;\n \n import org.lwjgl.glfw.GLFWVidMode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NjA4OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696088", "bodyText": "Eeee - more of these old empty javadoc blocks. If you could fill them in with some basic javadoc then cool. If not and you see empty javadoc blocks please just remove them so the code analytics will complain about there being no javadoc", "author": "Cervator", "createdAt": "2020-07-03T20:15:44Z", "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java", "diffHunk": "@@ -15,40 +15,249 @@\n  */\n package org.terasology.input.lwjgl;\n \n-import com.google.common.collect.Queues;\n-\n-import org.lwjgl.input.Keyboard;\n+import com.google.common.collect.Lists;\n+import gnu.trove.map.TIntIntMap;\n+import gnu.trove.map.hash.TIntIntHashMap;\n+import gnu.trove.set.TIntSet;\n+import gnu.trove.set.hash.TIntHashSet;\n+import org.lwjgl.glfw.GLFW;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.terasology.input.ButtonState;\n import org.terasology.input.Input;\n import org.terasology.input.InputType;\n+import org.terasology.input.Keyboard;\n import org.terasology.input.device.KeyboardAction;\n import org.terasology.input.device.KeyboardDevice;\n \n+import java.util.Iterator;\n import java.util.Queue;\n \n /**\n+ *", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java b/engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java\nindex 4cef1c759..ee34af1d4 100644\n--- a/engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java\n+++ b/engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java\n\n@@ -1,18 +1,6 @@\n-/*\n- * Copyright 2013 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *  http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n package org.terasology.input.lwjgl;\n \n import com.google.common.collect.Lists;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NjE2Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696167", "bodyText": "Commented out code - what's a NONE key anyway? \ud83e\udd14 What's remaining to clean up and test", "author": "Cervator", "createdAt": "2020-07-03T20:16:16Z", "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java", "diffHunk": "@@ -15,40 +15,249 @@\n  */\n package org.terasology.input.lwjgl;\n \n-import com.google.common.collect.Queues;\n-\n-import org.lwjgl.input.Keyboard;\n+import com.google.common.collect.Lists;\n+import gnu.trove.map.TIntIntMap;\n+import gnu.trove.map.hash.TIntIntHashMap;\n+import gnu.trove.set.TIntSet;\n+import gnu.trove.set.hash.TIntHashSet;\n+import org.lwjgl.glfw.GLFW;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.terasology.input.ButtonState;\n import org.terasology.input.Input;\n import org.terasology.input.InputType;\n+import org.terasology.input.Keyboard;\n import org.terasology.input.device.KeyboardAction;\n import org.terasology.input.device.KeyboardDevice;\n \n+import java.util.Iterator;\n import java.util.Queue;\n \n /**\n+ *\n  */\n public class LwjglKeyboardDevice implements KeyboardDevice {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(LwjglKeyboardDevice.class);\n+    private static final TIntIntMap GLFW_TO_TERA_MAPPING = new TIntIntHashMap();\n+\n+    static {\n+        //TODO: test and cleanup keys\n+//        glfwToTeraMaps.put(GLFW.GLFW_KEY_NONE, Keyboard.KeyId.NONE);", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI0Mjk0Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r450242942", "bodyText": "Lwjgl2 had NONE key.. yep strange :D with not used in code... seems, it is for methods like  getKeyPressed()\nI did regex-replace and some manual changes.\ntest all keys :D maybe, i not understood some keys.\nsome keys specified for countries. idk.\ncleanup - remove all commented keys.", "author": "DarkWeird", "createdAt": "2020-07-06T14:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NjE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java b/engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java\nindex 4cef1c759..ee34af1d4 100644\n--- a/engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java\n+++ b/engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java\n\n@@ -1,18 +1,6 @@\n-/*\n- * Copyright 2013 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *  http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n package org.terasology.input.lwjgl;\n \n import com.google.common.collect.Lists;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NjMyOQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696329", "bodyText": "More empty Javadoc", "author": "Cervator", "createdAt": "2020-07-03T20:17:13Z", "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java", "diffHunk": "@@ -32,62 +33,73 @@\n import java.util.Queue;\n \n /**\n+", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java b/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java\nindex f18994cde..96f806aff 100644\n--- a/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java\n+++ b/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java\n\n@@ -33,7 +22,9 @@\n import java.util.Queue;\n \n /**\n-\n+ * Lwjgl 3's (GLFW) mouse device represenation.\n+ * Handles mouse input via GLFW's callbacks\n+ * Handles mouse state.\n  */\n public class LwjglMouseDevice implements MouseDevice, PropertyChangeListener {\n     private RenderingConfig renderingConfig;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NjcyMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696721", "bodyText": "Should this be noted in an issue somewhere just so it is documented that a button down event for mice won't work?", "author": "Cervator", "createdAt": "2020-07-03T20:19:38Z", "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java", "diffHunk": "@@ -32,62 +33,73 @@\n import java.util.Queue;\n \n /**\n+\n  */\n public class LwjglMouseDevice implements MouseDevice, PropertyChangeListener {\n     private RenderingConfig renderingConfig;\n     private float uiScale;\n     private boolean mouseGrabbed;\n+    private Queue<MouseAction> queue = Lists.newLinkedList();\n+\n+    private double xpos = 0.0;\n+    private double ypos = 0.0;\n+\n+    private double xposDelta = 0.0;\n+    private double yposDelta = 0.0;\n \n     public LwjglMouseDevice(Context context) {\n         this.renderingConfig = context.get(Config.class).getRendering();\n         this.uiScale = this.renderingConfig.getUiScale() / 100f;\n         this.renderingConfig.subscribe(RenderingConfig.UI_SCALE, this);\n+\n+        // GLFW callback\n+        long window = GLFW.glfwGetCurrentContext();\n+        GLFW.glfwSetCursorPosCallback(window, this::cursorPosCallback);\n+        GLFW.glfwSetMouseButtonCallback(window, this::mouseButtonCallback);\n+        GLFW.glfwSetScrollCallback(window, this::scrollCallback);\n+\n     }\n \n     @Override\n     public Vector2i getPosition() {\n-        return new Vector2i(Mouse.getX() / this.uiScale, (Display.getHeight() - Mouse.getY()) / this.uiScale);\n+        return new Vector2i((int) (xpos / this.uiScale), (int)  (ypos/ this.uiScale));\n     }\n \n     @Override\n     public Vector2i getDelta() {\n-        return new Vector2i(Mouse.getDX(), -Mouse.getDY());\n+        Vector2i result = new Vector2i((int) xposDelta, (int) yposDelta);\n+        xposDelta = 0.0;\n+        yposDelta = 0.0;\n+        return result;\n     }\n \n     @Override\n     public boolean isButtonDown(int button) {\n-        return Mouse.isButtonDown(button);\n+        return false; //FIXME: low priority unused method", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java b/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java\nindex f18994cde..96f806aff 100644\n--- a/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java\n+++ b/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java\n\n@@ -33,7 +22,9 @@\n import java.util.Queue;\n \n /**\n-\n+ * Lwjgl 3's (GLFW) mouse device represenation.\n+ * Handles mouse input via GLFW's callbacks\n+ * Handles mouse state.\n  */\n public class LwjglMouseDevice implements MouseDevice, PropertyChangeListener {\n     private RenderingConfig renderingConfig;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5Njc2OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696768", "bodyText": "Mystery commented out code", "author": "Cervator", "createdAt": "2020-07-03T20:20:00Z", "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java", "diffHunk": "@@ -96,4 +108,31 @@ public void propertyChange(PropertyChangeEvent evt) {\n             this.uiScale = this.renderingConfig.getUiScale() / 100f;\n         }\n     }\n+\n+    private void cursorPosCallback(long window, double xpos, double ypos) {\n+        xposDelta = xpos - this.xpos;\n+        yposDelta = ypos - this.ypos;\n+        this.xpos = xpos;\n+        this.ypos = ypos;\n+    }\n+\n+    private void mouseButtonCallback(long window, int button, int action, int mods) {\n+        ButtonState state;\n+        if (action == GLFW.GLFW_PRESS) {\n+            state = ButtonState.DOWN;\n+        } else if (action == GLFW.GLFW_RELEASE) {\n+            state = ButtonState.UP;\n+        } else /*if (action == GLFW.GLFW_REPEAT)*/ {", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI0NTQ1MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r450245451", "bodyText": "It is some kind a hmm... opaque meaning definition. answer on future question: \"Why a else returns ButtonState.REPEAT?\"", "author": "DarkWeird", "createdAt": "2020-07-06T14:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5Njc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java b/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java\nindex f18994cde..96f806aff 100644\n--- a/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java\n+++ b/engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java\n\n@@ -109,19 +102,21 @@ public void propertyChange(PropertyChangeEvent evt) {\n         }\n     }\n \n-    private void cursorPosCallback(long window, double xpos, double ypos) {\n-        xposDelta = xpos - this.xpos;\n-        yposDelta = ypos - this.ypos;\n-        this.xpos = xpos;\n-        this.ypos = ypos;\n+    private void cursorPosCallback(long window, double newX, double newY) {\n+        xposDelta = newX - this.xpos;\n+        yposDelta = newY - this.ypos;\n+        this.xpos = newX;\n+        this.ypos = newY;\n     }\n \n     private void mouseButtonCallback(long window, int button, int action, int mods) {\n         ButtonState state;\n         if (action == GLFW.GLFW_PRESS) {\n             state = ButtonState.DOWN;\n+            buttonStates.add(button);\n         } else if (action == GLFW.GLFW_RELEASE) {\n             state = ButtonState.UP;\n+            buttonStates.remove(button);\n         } else /*if (action == GLFW.GLFW_REPEAT)*/ {\n             state = ButtonState.REPEAT;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5Njg5NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696895", "bodyText": "More mystery commented out code, made an earlier comment on this specifically, still curious :-)", "author": "Cervator", "createdAt": "2020-07-03T20:20:41Z", "path": "engine/src/main/java/org/terasology/logic/players/DebugControlSystem.java", "diffHunk": "@@ -140,7 +139,7 @@ public void onKeyDown(KeyDownEvent event, EntityRef entity) {\n                 mouseGrabbed = !mouseGrabbed;\n                 DebugProperties debugProperties = (DebugProperties) nuiManager.getHUD().getHUDElement(\"engine:DebugProperties\");\n                 debugProperties.setVisible(!mouseGrabbed);\n-                Mouse.setGrabbed(mouseGrabbed);\n+               // Mouse.setGrabbed(mouseGrabbed);", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/logic/players/DebugControlSystem.java b/engine/src/main/java/org/terasology/logic/players/DebugControlSystem.java\nindex c8b3e7750..e1a019a4a 100644\n--- a/engine/src/main/java/org/terasology/logic/players/DebugControlSystem.java\n+++ b/engine/src/main/java/org/terasology/logic/players/DebugControlSystem.java\n\n@@ -139,7 +144,7 @@ public void onKeyDown(KeyDownEvent event, EntityRef entity) {\n                 mouseGrabbed = !mouseGrabbed;\n                 DebugProperties debugProperties = (DebugProperties) nuiManager.getHUD().getHUDElement(\"engine:DebugProperties\");\n                 debugProperties.setVisible(!mouseGrabbed);\n-               // Mouse.setGrabbed(mouseGrabbed);\n+                mouseDevice.setGrabbed(mouseGrabbed);\n                 event.consume();\n                 break;\n             case Keyboard.KeyId.F3:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NzA3NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449697075", "bodyText": "Empty javadoc", "author": "Cervator", "createdAt": "2020-07-03T20:21:52Z", "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LwjglCanvasRenderer.java", "diffHunk": "@@ -83,6 +83,7 @@\n import static org.lwjgl.opengl.GL11.glTranslatef;\n \n /**\n+ *", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6e7fb34350749eee6da56b6eb4aec7a09fa4419", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/nui/internal/LwjglCanvasRenderer.java b/engine/src/main/java/org/terasology/rendering/nui/internal/LwjglCanvasRenderer.java\nindex 40cd319ec..72f5fb707 100644\n--- a/engine/src/main/java/org/terasology/rendering/nui/internal/LwjglCanvasRenderer.java\n+++ b/engine/src/main/java/org/terasology/rendering/nui/internal/LwjglCanvasRenderer.java\n\n@@ -82,10 +73,7 @@\n import static org.lwjgl.opengl.GL11.glScalef;\n import static org.lwjgl.opengl.GL11.glTranslatef;\n \n-/**\n- *\n- */\n-public class LwjglCanvasRenderer implements CanvasRenderer, PropertyChangeListener {\n+public class LwjglCanvasRenderer implements TerasologyCanvasRenderer, PropertyChangeListener {\n \n     private static final String CROPPING_BOUNDARIES_PARAM = \"croppingBoundaries\";\n     private static final Rect2f FULL_REGION = Rect2f.createFromMinAndSize(0, 0, 1, 1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NzE2Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449697167", "bodyText": "?", "author": "Cervator", "createdAt": "2020-07-03T20:22:30Z", "path": "engine/src/main/java/org/terasology/rendering/opengl/LwjglFrameBufferObject.java", "diffHunk": "@@ -85,15 +84,15 @@ public void unbindFrame() {\n         glLoadIdentity();\n         glMatrixMode(GL_PROJECTION);\n         glLoadIdentity();\n-        glOrtho(0, Display.getWidth(), Display.getHeight(), 0, 0, 2048f);\n+        glOrtho(0, 500,500, 0, 0, 2048f);", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxODY4Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r450018683", "bodyText": "Forget ^_^ thx", "author": "DarkWeird", "createdAt": "2020-07-06T06:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NzE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/opengl/LwjglFrameBufferObject.java b/engine/src/main/java/org/terasology/rendering/opengl/LwjglFrameBufferObject.java\nindex f91ee9b45..51979bdd1 100644\n--- a/engine/src/main/java/org/terasology/rendering/opengl/LwjglFrameBufferObject.java\n+++ b/engine/src/main/java/org/terasology/rendering/opengl/LwjglFrameBufferObject.java\n\n@@ -84,7 +87,7 @@ public void unbindFrame() {\n         glLoadIdentity();\n         glMatrixMode(GL_PROJECTION);\n         glLoadIdentity();\n-        glOrtho(0, 500,500, 0, 0, 2048f);\n+        glOrtho(0, displayDevice.getWidth(), displayDevice.getHeight(), 0, 0, 2048f);\n         glMatrixMode(GL_MODELVIEW);\n         glLoadIdentity();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NzM1NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449697355", "bodyText": "Clarify? Or able to just do it? Or is it waiting for some future change first?", "author": "Cervator", "createdAt": "2020-07-03T20:23:35Z", "path": "engine/src/main/java/org/terasology/rendering/opengl/PBO.java", "diffHunk": "@@ -19,7 +19,7 @@\n \n import java.nio.ByteBuffer;\n \n-import static org.lwjgl.opengl.ARBBufferObject.*;\n+import static org.lwjgl.opengl.ARBVertexBufferObject.*; //TODO change this imports to GL15 (use above)", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/opengl/PBO.java b/engine/src/main/java/org/terasology/rendering/opengl/PBO.java\nindex 30502f58f..d5f335789 100644\n--- a/engine/src/main/java/org/terasology/rendering/opengl/PBO.java\n+++ b/engine/src/main/java/org/terasology/rendering/opengl/PBO.java\n\n@@ -1,52 +1,45 @@\n-/*\n- * Copyright 2015 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n package org.terasology.rendering.opengl;\n \n import org.lwjgl.BufferUtils;\n \n import java.nio.ByteBuffer;\n \n-import static org.lwjgl.opengl.ARBVertexBufferObject.*; //TODO change this imports to GL15 (use above)\n import static org.lwjgl.opengl.EXTFramebufferObject.GL_FRAMEBUFFER_EXT;\n import static org.lwjgl.opengl.EXTFramebufferObject.glBindFramebufferEXT;\n import static org.lwjgl.opengl.EXTPixelBufferObject.GL_PIXEL_PACK_BUFFER_EXT;\n import static org.lwjgl.opengl.GL11.glReadPixels;\n import static org.lwjgl.opengl.GL15.GL_READ_ONLY;\n+import static org.lwjgl.opengl.GL15.GL_STREAM_READ;\n+import static org.lwjgl.opengl.GL15.glBindBuffer;\n+import static org.lwjgl.opengl.GL15.glBufferData;\n+import static org.lwjgl.opengl.GL15.glGenBuffers;\n+import static org.lwjgl.opengl.GL15.glMapBuffer;\n+import static org.lwjgl.opengl.GL15.glUnmapBuffer;\n \n public class PBO {\n     private int pboId;\n     private ByteBuffer cachedBuffer;\n \n     public PBO(int width, int height) {\n-        pboId = glGenBuffersARB();\n+        pboId = glGenBuffers();\n \n         int byteSize = width * height * 4;\n         cachedBuffer = BufferUtils.createByteBuffer(byteSize);\n \n         bind();\n-        glBufferDataARB(GL_PIXEL_PACK_BUFFER_EXT, byteSize, GL_STREAM_READ_ARB);\n+        glBufferData(GL_PIXEL_PACK_BUFFER_EXT, byteSize, GL_STREAM_READ);\n         unbind();\n     }\n \n     public void bind() {\n-        glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, pboId);\n+        glBindBuffer(GL_PIXEL_PACK_BUFFER_EXT, pboId);\n     }\n \n     public void unbind() {\n-        glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, 0);\n+        glBindBuffer(GL_PIXEL_PACK_BUFFER_EXT, 0);\n     }\n \n     public void copyFromFBO(int fboId, int width, int height, int format, int type) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5ODExMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449698111", "bodyText": "Assuming this code is copy-pasted in from somewhere we should probably attribute it somehow rather than use author tags, which go against our style code. A link to some webpage covering it would be better? And of course the code license should be compatible for sure :-)\nSame goes for any other similar code in this PR\nAlso: We already have a Color class, but I suppose they're different?", "author": "Cervator", "createdAt": "2020-07-03T20:28:41Z", "path": "facades/PC/src/main/java/org/terasology/engine/splash/graphics/Color.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright \u00a9 2015, Heiko Brumme\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.terasology.engine.splash.graphics;\n+\n+import org.joml.Vector3f;\n+import org.joml.Vector4f;\n+\n+/**\n+ * This class represents a RGBA color.\n+ *\n+ * @author Heiko Brumme", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba9cea569f1c9627b66777662a9e514dc5ca4c7", "chunk": "diff --git a/facades/PC/src/main/java/org/terasology/engine/splash/graphics/Color.java b/facades/PC/src/main/java/org/terasology/engine/splash/graphics/Color.java\ndeleted file mode 100644\nindex d12dd7bdf..000000000\n--- a/facades/PC/src/main/java/org/terasology/engine/splash/graphics/Color.java\n+++ /dev/null\n\n@@ -1,272 +0,0 @@\n-/*\n- * The MIT License\n- *\n- * Copyright \u00a9 2015, Heiko Brumme\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-\n-package org.terasology.engine.splash.graphics;\n-\n-import org.joml.Vector3f;\n-import org.joml.Vector4f;\n-\n-/**\n- * This class represents a RGBA color.\n- *\n- * @author Heiko Brumme\n- */\n-public final class Color {\n-\n-    public static final Color WHITE = new Color(1f, 1f, 1f);\n-    public static final Color BLACK = new Color(0f, 0f, 0f);\n-    public static final Color RED = new Color(1f, 0f, 0f);\n-    public static final Color GREEN = new Color(0f, 1f, 0f);\n-    public static final Color BLUE = new Color(0f, 0f, 1f);\n-\n-    /**\n-     * This value specifies the red component.\n-     */\n-    private float red;\n-\n-    /**\n-     * This value specifies the green component.\n-     */\n-    private float green;\n-\n-    /**\n-     * This value specifies the blue component.\n-     */\n-    private float blue;\n-\n-    /**\n-     * This value specifies the transparency.\n-     */\n-    private float alpha;\n-\n-    /**\n-     * The default color is black.\n-     */\n-    public Color() {\n-        this(0f, 0f, 0f);\n-    }\n-\n-    /**\n-     * Creates a RGB-Color with an alpha value of 1.\n-     *\n-     * @param red The red component. Range from 0f to 1f.\n-     * @param green The green component. Range from 0f to 1f.\n-     * @param blue The blue component. Range from 0f to 1f.\n-     */\n-    public Color(float red, float green, float blue) {\n-        this(red, green, blue, 1f);\n-    }\n-\n-    /**\n-     * Creates a RGBA-Color.\n-     *\n-     * @param red The red component. Range from 0f to 1f.\n-     * @param green The green component. Range from 0f to 1f.\n-     * @param blue The blue component. Range from 0f to 1f.\n-     * @param alpha The transparency. Range from 0f to 1f.\n-     */\n-    public Color(float red, float green, float blue, float alpha) {\n-        setRed(red);\n-        setGreen(green);\n-        setBlue(blue);\n-        setAlpha(alpha);\n-    }\n-\n-    /**\n-     * Creates a RGB-Color with an alpha value of 1.\n-     *\n-     * @param red The red component. Range from 0 to 255.\n-     * @param green The green component. Range from 0 to 255.\n-     * @param blue The blue component. Range from 0 to 255.\n-     */\n-    public Color(int red, int green, int blue) {\n-        this(red, green, blue, 255);\n-    }\n-\n-    /**\n-     * Creates a RGBA-Color.\n-     *\n-     * @param red The red component. Range from 0 to 255.\n-     * @param green The green component. Range from 0 to 255.\n-     * @param blue The blue component. Range from 0 to 255.\n-     * @param alpha The transparency. Range from 0 to 255.\n-     */\n-    public Color(int red, int green, int blue, int alpha) {\n-        setRed(red);\n-        setGreen(green);\n-        setBlue(blue);\n-        setAlpha(alpha);\n-    }\n-\n-    /**\n-     * Returns the red component.\n-     *\n-     * @return The red component.\n-     */\n-    public float getRed() {\n-        return red;\n-    }\n-\n-    /**\n-     * Sets the red component.\n-     *\n-     * @param red The red component. Range from 0f to 1f.\n-     */\n-    public void setRed(float red) {\n-        if (red < 0f) {\n-            red = 0f;\n-        }\n-        if (red > 1f) {\n-            red = 1f;\n-        }\n-        this.red = red;\n-    }\n-\n-    /**\n-     * Sets the red component.\n-     *\n-     * @param red The red component. Range from 0 to 255.\n-     */\n-    public void setRed(int red) {\n-        setRed(red / 255f);\n-    }\n-\n-    /**\n-     * Returns the green component.\n-     *\n-     * @return The green component.\n-     */\n-    public float getGreen() {\n-        return green;\n-    }\n-\n-    /**\n-     * Sets the green component.\n-     *\n-     * @param green The green component. Range from 0f to 1f.\n-     */\n-    public void setGreen(float green) {\n-        if (green < 0f) {\n-            green = 0f;\n-        }\n-        if (green > 1f) {\n-            green = 1f;\n-        }\n-        this.green = green;\n-    }\n-\n-    /**\n-     * Sets the green component.\n-     *\n-     * @param green The green component. Range from 0 to 255.\n-     */\n-    public void setGreen(int green) {\n-        setGreen(green / 255f);\n-    }\n-\n-    /**\n-     * Returns the blue component.\n-     *\n-     * @return The blue component.\n-     */\n-    public float getBlue() {\n-        return blue;\n-    }\n-\n-    /**\n-     * Sets the blue component.\n-     *\n-     * @param blue The blue component. Range from 0f to 1f.\n-     */\n-    public void setBlue(float blue) {\n-        if (blue < 0f) {\n-            blue = 0f;\n-        }\n-        if (blue > 1f) {\n-            blue = 1f;\n-        }\n-        this.blue = blue;\n-    }\n-\n-    /**\n-     * Sets the blue component.\n-     *\n-     * @param blue The blue component. Range from 0 to 255.\n-     */\n-    public void setBlue(int blue) {\n-        setBlue(blue / 255f);\n-    }\n-\n-    /**\n-     * Returns the transparency.\n-     *\n-     * @return The transparency.\n-     */\n-    public float getAlpha() {\n-        return alpha;\n-    }\n-\n-    /**\n-     * Sets the transparency.\n-     *\n-     * @param alpha The transparency. Range from 0f to 1f.\n-     */\n-    public void setAlpha(float alpha) {\n-        if (alpha < 0f) {\n-            alpha = 0f;\n-        }\n-        if (alpha > 1f) {\n-            alpha = 1f;\n-        }\n-        this.alpha = alpha;\n-    }\n-\n-    /**\n-     * Sets the transparency.\n-     *\n-     * @param alpha The transparency. Range from 0 to 255.\n-     */\n-    public void setAlpha(int alpha) {\n-        setAlpha(alpha / 255f);\n-    }\n-\n-    /**\n-     * Returns the color as a (x,y,z)-Vector.\n-     *\n-     * @return The color as vec3.\n-     */\n-    public Vector3f toVector3f() {\n-        return new Vector3f(red, green, blue);\n-    }\n-\n-    /**\n-     * Returns the color as a (x,y,z,w)-Vector.\n-     *\n-     * @return The color as vec4.\n-     */\n-    public Vector4f toVector4f() {\n-        return new Vector4f(red, green, blue, alpha);\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5ODUwMA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449698500", "bodyText": "Ah okay so here there are two license headers. Which looks a little odd.\nI do think we can mix them, but maybe we should still include some links, here and/or in the readme?\nOr maybe there's some way we can pull in this code via 3rd party jar or something, to avoid adding it to the repo?", "author": "Cervator", "createdAt": "2020-07-03T20:31:10Z", "path": "facades/PC/src/main/java/org/terasology/engine/splash/graphics/Renderer.java", "diffHunk": "@@ -0,0 +1,481 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright \u00a9 2014-2018, Heiko Brumme\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.terasology.engine.splash.graphics;\n+\n+import org.joml.Matrix4f;\n+import org.lwjgl.glfw.GLFW;\n+import org.lwjgl.system.MemoryStack;\n+import org.lwjgl.system.MemoryUtil;\n+import org.terasology.engine.splash.text.Font;\n+import org.terasology.rendering.dag.RenderGraph;\n+\n+import java.awt.FontFormatException;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.FloatBuffer;\n+import java.nio.IntBuffer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static org.lwjgl.opengl.GL11.GL_BLEND;\n+import static org.lwjgl.opengl.GL11.GL_COLOR_BUFFER_BIT;\n+import static org.lwjgl.opengl.GL11.GL_DEPTH_BUFFER_BIT;\n+import static org.lwjgl.opengl.GL11.GL_ONE_MINUS_SRC_ALPHA;\n+import static org.lwjgl.opengl.GL11.GL_SRC_ALPHA;\n+import static org.lwjgl.opengl.GL11.GL_TRIANGLES;\n+import static org.lwjgl.opengl.GL11.glBlendFunc;\n+import static org.lwjgl.opengl.GL11.glClear;\n+import static org.lwjgl.opengl.GL11.glDrawArrays;\n+import static org.lwjgl.opengl.GL11.glEnable;\n+import static org.lwjgl.opengl.GL15.GL_ARRAY_BUFFER;\n+import static org.lwjgl.opengl.GL15.GL_DYNAMIC_DRAW;\n+import static org.lwjgl.opengl.GL20.GL_FRAGMENT_SHADER;\n+import static org.lwjgl.opengl.GL20.GL_VERTEX_SHADER;\n+\n+/**\n+ * This class is performing the rendering process.\n+ *\n+ * @author Heiko Brumme", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba9cea569f1c9627b66777662a9e514dc5ca4c7", "chunk": "diff --git a/facades/PC/src/main/java/org/terasology/engine/splash/graphics/Renderer.java b/facades/PC/src/main/java/org/terasology/engine/splash/graphics/Renderer.java\ndeleted file mode 100644\nindex 7347a7590..000000000\n--- a/facades/PC/src/main/java/org/terasology/engine/splash/graphics/Renderer.java\n+++ /dev/null\n\n@@ -1,481 +0,0 @@\n-// Copyright 2020 The Terasology Foundation\n-// SPDX-License-Identifier: Apache-2.0\n-\n-/*\n- * The MIT License (MIT)\n- *\n- * Copyright \u00a9 2014-2018, Heiko Brumme\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in all\n- * copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n- * SOFTWARE.\n- */\n-package org.terasology.engine.splash.graphics;\n-\n-import org.joml.Matrix4f;\n-import org.lwjgl.glfw.GLFW;\n-import org.lwjgl.system.MemoryStack;\n-import org.lwjgl.system.MemoryUtil;\n-import org.terasology.engine.splash.text.Font;\n-import org.terasology.rendering.dag.RenderGraph;\n-\n-import java.awt.FontFormatException;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.nio.FloatBuffer;\n-import java.nio.IntBuffer;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-import static org.lwjgl.opengl.GL11.GL_BLEND;\n-import static org.lwjgl.opengl.GL11.GL_COLOR_BUFFER_BIT;\n-import static org.lwjgl.opengl.GL11.GL_DEPTH_BUFFER_BIT;\n-import static org.lwjgl.opengl.GL11.GL_ONE_MINUS_SRC_ALPHA;\n-import static org.lwjgl.opengl.GL11.GL_SRC_ALPHA;\n-import static org.lwjgl.opengl.GL11.GL_TRIANGLES;\n-import static org.lwjgl.opengl.GL11.glBlendFunc;\n-import static org.lwjgl.opengl.GL11.glClear;\n-import static org.lwjgl.opengl.GL11.glDrawArrays;\n-import static org.lwjgl.opengl.GL11.glEnable;\n-import static org.lwjgl.opengl.GL15.GL_ARRAY_BUFFER;\n-import static org.lwjgl.opengl.GL15.GL_DYNAMIC_DRAW;\n-import static org.lwjgl.opengl.GL20.GL_FRAGMENT_SHADER;\n-import static org.lwjgl.opengl.GL20.GL_VERTEX_SHADER;\n-\n-/**\n- * This class is performing the rendering process.\n- *\n- * @author Heiko Brumme\n- */\n-public class Renderer {\n-\n-    private VertexArrayObject vao;\n-    private VertexBufferObject vbo;\n-    private ShaderProgram program;\n-\n-    private FloatBuffer vertices;\n-    private int numVertices;\n-    private boolean drawing;\n-\n-    private Font font;\n-    private Font debugFont;\n-\n-    /**\n-     * Initializes the renderer.\n-     */\n-    public void init() {\n-        /* Setup shader programs */\n-        setupShaderProgram();\n-\n-        /* Enable blending */\n-        glEnable(GL_BLEND);\n-        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n-\n-        /* Create fonts */\n-        try {\n-            font = new Font(Renderer.class.getResourceAsStream(\"/splash/NotoSans-Regular.ttf\"), 16);\n-        } catch (FontFormatException | IOException ex) {\n-            Logger.getLogger(Renderer.class.getName()).log(Level.CONFIG, null, ex);\n-            font = new Font();\n-        }\n-        debugFont = new Font(12, false);\n-    }\n-\n-    /**\n-     * Clears the drawing area.\n-     */\n-    public void clear() {\n-        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n-    }\n-\n-    /**\n-     * Begin rendering.\n-     */\n-    public void begin() {\n-        if (drawing) {\n-            throw new IllegalStateException(\"Renderer is already drawing!\");\n-        }\n-        drawing = true;\n-        numVertices = 0;\n-    }\n-\n-    /**\n-     * End rendering.\n-     */\n-    public void end() {\n-        if (!drawing) {\n-            throw new IllegalStateException(\"Renderer isn't drawing!\");\n-        }\n-        drawing = false;\n-        flush();\n-    }\n-\n-    /**\n-     * Flushes the data to the GPU to let it get rendered.\n-     */\n-    public void flush() {\n-        if (numVertices > 0) {\n-            vertices.flip();\n-\n-            if (vao != null) {\n-                vao.bind();\n-            } else {\n-                vbo.bind(GL_ARRAY_BUFFER);\n-                specifyVertexAttributes();\n-            }\n-            program.use();\n-\n-            /* Upload the new vertex data */\n-            vbo.bind(GL_ARRAY_BUFFER);\n-            vbo.uploadSubData(GL_ARRAY_BUFFER, 0, vertices);\n-\n-            /* Draw batch */\n-            glDrawArrays(GL_TRIANGLES, 0, numVertices);\n-\n-            /* Clear vertex data for next batch */\n-            vertices.clear();\n-            numVertices = 0;\n-        }\n-    }\n-\n-    /**\n-     * Calculates total width of a text.\n-     *\n-     * @param text The text\n-     * @return Total width of the text\n-     */\n-    public int getTextWidth(CharSequence text) {\n-        return font.getWidth(text);\n-    }\n-\n-    /**\n-     * Calculates total height of a text.\n-     *\n-     * @param text The text\n-     * @return Total width of the text\n-     */\n-    public int getTextHeight(CharSequence text) {\n-        return font.getHeight(text);\n-    }\n-\n-    /**\n-     * Calculates total width of a debug text.\n-     *\n-     * @param text The text\n-     * @return Total width of the text\n-     */\n-    public int getDebugTextWidth(CharSequence text) {\n-        return debugFont.getWidth(text);\n-    }\n-\n-    /**\n-     * Calculates total height of a debug text.\n-     *\n-     * @param text The text\n-     * @return Total width of the text\n-     */\n-    public int getDebugTextHeight(CharSequence text) {\n-        return debugFont.getHeight(text);\n-    }\n-\n-    /**\n-     * Draw text at the specified position.\n-     *\n-     * @param text Text to draw\n-     * @param x X coordinate of the text position\n-     * @param y Y coordinate of the text position\n-     */\n-    public void drawText(CharSequence text, float x, float y) {\n-        font.drawText(this, text, x, y);\n-    }\n-\n-    /**\n-     * Draw debug text at the specified position.\n-     *\n-     * @param text Text to draw\n-     * @param x X coordinate of the text position\n-     * @param y Y coordinate of the text position\n-     */\n-    public void drawDebugText(CharSequence text, float x, float y) {\n-        debugFont.drawText(this, text, x, y);\n-    }\n-\n-    /**\n-     * Draw text at the specified position and color.\n-     *\n-     * @param text Text to draw\n-     * @param x X coordinate of the text position\n-     * @param y Y coordinate of the text position\n-     * @param c Color to use\n-     */\n-    public void drawText(CharSequence text, float x, float y, Color c) {\n-        font.drawText(this, text, x, y, c);\n-    }\n-\n-    /**\n-     * Draw debug text at the specified position and color.\n-     *\n-     * @param text Text to draw\n-     * @param x X coordinate of the text position\n-     * @param y Y coordinate of the text position\n-     * @param c Color to use\n-     */\n-    public void drawDebugText(CharSequence text, float x, float y, Color c) {\n-        debugFont.drawText(this, text, x, y, c);\n-    }\n-\n-    /**\n-     * Draws the currently bound texture on specified coordinates.\n-     *\n-     * @param texture Used for getting width and height of the texture\n-     * @param x X position of the texture\n-     * @param y Y position of the texture\n-     */\n-    public void drawTexture(Texture texture, float x, float y) {\n-        drawTexture(texture, x, y, Color.WHITE);\n-    }\n-\n-    /**\n-     * Draws the currently bound texture on specified coordinates and with specified color.\n-     *\n-     * @param texture Used for getting width and height of the texture\n-     * @param x X position of the texture\n-     * @param y Y position of the texture\n-     * @param c The color to use\n-     */\n-    public void drawTexture(Texture texture, float x, float y, Color c) {\n-        /* Vertex positions */\n-        float x1 = x;\n-        float y1 = y;\n-        float x2 = x1 + texture.getWidth();\n-        float y2 = y1 + texture.getHeight();\n-\n-        /* Texture coordinates */\n-        float s1 = 0f;\n-        float t1 = 0f;\n-        float s2 = 1f;\n-        float t2 = 1f;\n-\n-        drawTextureRegion(x1, y1, x2, y2, s1, t1, s2, t2, c);\n-    }\n-\n-    /**\n-     * Draws a texture region with the currently bound texture on specified coordinates.\n-     *\n-     * @param texture Used for getting width and height of the texture\n-     * @param x X position of the texture\n-     * @param y Y position of the texture\n-     * @param regX X position of the texture region\n-     * @param regY Y position of the texture region\n-     * @param regWidth Width of the texture region\n-     * @param regHeight Height of the texture region\n-     */\n-    public void drawTextureRegion(Texture texture, float x, float y, float regX, float regY, float regWidth,\n-                                  float regHeight) {\n-        drawTextureRegion(texture, x, y, regX, regY, regWidth, regHeight, Color.WHITE);\n-    }\n-\n-    /**\n-     * Draws a texture region with the currently bound texture on specified coordinates.\n-     *\n-     * @param texture Used for getting width and height of the texture\n-     * @param x X position of the texture\n-     * @param y Y position of the texture\n-     * @param regX X position of the texture region\n-     * @param regY Y position of the texture region\n-     * @param regWidth Width of the texture region\n-     * @param regHeight Height of the texture region\n-     * @param c The color to use\n-     */\n-    public void drawTextureRegion(Texture texture, float x, float y, float regX, float regY, float regWidth,\n-                                  float regHeight, Color c) {\n-        /* Vertex positions */\n-        float x1 = x;\n-        float y1 = y;\n-        float x2 = x + regWidth;\n-        float y2 = y + regHeight;\n-\n-        /* Texture coordinates */\n-        float s1 = regX / texture.getWidth();\n-        float t1 = regY / texture.getHeight();\n-        float s2 = (regX + regWidth) / texture.getWidth();\n-        float t2 = (regY + regHeight) / texture.getHeight();\n-\n-        drawTextureRegion(x1, y1, x2, y2, s1, t1, s2, t2, c);\n-    }\n-\n-    /**\n-     * Draws a texture region with the currently bound texture on specified coordinates.\n-     *\n-     * @param x1 Bottom left x position\n-     * @param y1 Bottom left y position\n-     * @param x2 Top right x position\n-     * @param y2 Top right y position\n-     * @param s1 Bottom left s coordinate\n-     * @param t1 Bottom left t coordinate\n-     * @param s2 Top right s coordinate\n-     * @param t2 Top right t coordinate\n-     */\n-    public void drawTextureRegion(float x1, float y1, float x2, float y2, float s1, float t1, float s2, float t2) {\n-        drawTextureRegion(x1, y1, x2, y2, s1, t1, s2, t2, Color.WHITE);\n-    }\n-\n-    /**\n-     * Draws a texture region with the currently bound texture on specified coordinates.\n-     *\n-     * @param x1 Bottom left x position\n-     * @param y1 Bottom left y position\n-     * @param x2 Top right x position\n-     * @param y2 Top right y position\n-     * @param s1 Bottom left s coordinate\n-     * @param t1 Bottom left t coordinate\n-     * @param s2 Top right s coordinate\n-     * @param t2 Top right t coordinate\n-     * @param c The color to use\n-     */\n-    public void drawTextureRegion(float x1, float y1, float x2, float y2, float s1, float t1, float s2, float t2,\n-                                  Color c) {\n-        if (vertices.remaining() < 7 * 6) {\n-            /* We need more space in the buffer, so flush it */\n-            flush();\n-        }\n-\n-        float r = c.getRed();\n-        float g = c.getGreen();\n-        float b = c.getBlue();\n-        float a = c.getAlpha();\n-\n-        vertices.put(x1).put(y1).put(r).put(g).put(b).put(a).put(s1).put(t1);\n-        vertices.put(x1).put(y2).put(r).put(g).put(b).put(a).put(s1).put(t2);\n-        vertices.put(x2).put(y2).put(r).put(g).put(b).put(a).put(s2).put(t2);\n-\n-        vertices.put(x1).put(y1).put(r).put(g).put(b).put(a).put(s1).put(t1);\n-        vertices.put(x2).put(y2).put(r).put(g).put(b).put(a).put(s2).put(t2);\n-        vertices.put(x2).put(y1).put(r).put(g).put(b).put(a).put(s2).put(t1);\n-\n-        numVertices += 6;\n-    }\n-    /**\n-     * Dispose renderer and clean up its used data.\n-     */\n-    public void dispose() {\n-        MemoryUtil.memFree(vertices);\n-\n-        if (vao != null) {\n-            vao.delete();\n-        }\n-        vbo.delete();\n-        program.delete();\n-\n-        font.dispose();\n-        debugFont.dispose();\n-    }\n-\n-    /**\n-     * Setups the default shader program.\n-     */\n-    private void setupShaderProgram() {\n-        /* Generate Vertex Buffer Object */\n-        vbo = new VertexBufferObject();\n-        vbo.bind(GL_ARRAY_BUFFER);\n-\n-        /* Create FloatBuffer */\n-        vertices = MemoryUtil.memAllocFloat(4096);\n-\n-        /* Upload null data to allocate storage for the VBO */\n-        long size = vertices.capacity() * Float.BYTES;\n-        vbo.uploadData(GL_ARRAY_BUFFER, size, GL_DYNAMIC_DRAW);\n-\n-        /* Initialize variables */\n-        numVertices = 0;\n-        drawing = false;\n-\n-        /* Load shaders */\n-        Shader vertexShader;\n-        Shader fragmentShader;\n-\n-        vertexShader = Shader.loadShader(GL_VERTEX_SHADER, GLFW.class.getResource(\"/splash/shader/vert.glsl\"));\n-        fragmentShader = Shader.loadShader(GL_FRAGMENT_SHADER, GLFW.class.getResource(\"/splash/shader/frag.glsl\"));\n-\n-        /* Create shader program */\n-        program = new ShaderProgram();\n-        program.attachShader(vertexShader);\n-        program.attachShader(fragmentShader);\n-\n-        program.link();\n-        program.use();\n-\n-        /* Delete linked shaders */\n-        vertexShader.delete();\n-        fragmentShader.delete();\n-\n-        /* Get width and height of framebuffer */\n-        long window = GLFW.glfwGetCurrentContext();\n-        int width;\n-        int height;\n-        try (MemoryStack stack = MemoryStack.stackPush()) {\n-            IntBuffer widthBuffer = stack.mallocInt(1);\n-            IntBuffer heightBuffer = stack.mallocInt(1);\n-            GLFW.glfwGetFramebufferSize(window, widthBuffer, heightBuffer);\n-            width = widthBuffer.get();\n-            height = heightBuffer.get();\n-        }\n-\n-        /* Specify Vertex Pointers */\n-        specifyVertexAttributes();\n-\n-        /* Set texture uniform */\n-        int uniTex = program.getUniformLocation(\"texImage\");\n-        program.setUniform(uniTex, 0);\n-\n-        /* Set model matrix to identity matrix */\n-        Matrix4f model = new Matrix4f();\n-        int uniModel = program.getUniformLocation(\"model\");\n-        program.setUniform(uniModel, model);\n-\n-        /* Set view matrix to identity matrix */\n-        Matrix4f view = new Matrix4f();\n-        int uniView = program.getUniformLocation(\"view\");\n-        program.setUniform(uniView, view);\n-\n-        /* Set projection matrix to an orthographic projection */\n-        Matrix4f projection = new Matrix4f().ortho(0f, width,  0f, height, -1f, 1f);\n-        int uniProjection = program.getUniformLocation(\"projection\");\n-        program.setUniform(uniProjection, projection);\n-    }\n-\n-    /**\n-     * Specifies the vertex pointers.\n-     */\n-    private void specifyVertexAttributes() {\n-        /* Specify Vertex Pointer */\n-        int posAttrib = program.getAttributeLocation(\"position\");\n-        program.enableVertexAttribute(posAttrib);\n-        program.pointVertexAttribute(posAttrib, 2, 8 * Float.BYTES, 0);\n-\n-        /* Specify Color Pointer */\n-        int colAttrib = program.getAttributeLocation(\"color\");\n-        program.enableVertexAttribute(colAttrib);\n-        program.pointVertexAttribute(colAttrib, 4, 8 * Float.BYTES, 2 * Float.BYTES);\n-\n-        /* Specify Texture Pointer */\n-        int texAttrib = program.getAttributeLocation(\"texcoord\");\n-        program.enableVertexAttribute(texAttrib);\n-        program.pointVertexAttribute(texAttrib, 2, 8 * Float.BYTES, 6 * Float.BYTES);\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwMDIyNg==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449700226", "bodyText": "Seeing more of these files makes me think that yeah, maybe we should make this a quick jar file we could build and make available somewhere :-)\nMaybe not right this moment with this PR, but we could write a quick issue and extract it after", "author": "Cervator", "createdAt": "2020-07-03T20:42:54Z", "path": "facades/PC/src/main/java/org/terasology/engine/splash/graphics/Shader.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * The MIT License (MIT)", "originalCommit": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba9cea569f1c9627b66777662a9e514dc5ca4c7", "chunk": "diff --git a/facades/PC/src/main/java/org/terasology/engine/splash/graphics/Shader.java b/facades/PC/src/main/java/org/terasology/engine/splash/graphics/Shader.java\ndeleted file mode 100644\nindex 91bf64295..000000000\n--- a/facades/PC/src/main/java/org/terasology/engine/splash/graphics/Shader.java\n+++ /dev/null\n\n@@ -1,150 +0,0 @@\n-/*\n- * The MIT License (MIT)\n- *\n- * Copyright \u00a9 2014-2017, Heiko Brumme\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in all\n- * copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n- * SOFTWARE.\n- */\n-package org.terasology.engine.splash.graphics;\n-\n-import java.io.BufferedReader;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.net.URL;\n-\n-import static org.lwjgl.opengl.GL11.GL_TRUE;\n-import static org.lwjgl.opengl.GL20.GL_COMPILE_STATUS;\n-import static org.lwjgl.opengl.GL20.glCompileShader;\n-import static org.lwjgl.opengl.GL20.glCreateShader;\n-import static org.lwjgl.opengl.GL20.glDeleteShader;\n-import static org.lwjgl.opengl.GL20.glGetShaderInfoLog;\n-import static org.lwjgl.opengl.GL20.glGetShaderi;\n-import static org.lwjgl.opengl.GL20.glShaderSource;\n-\n-/**\n- * This class represents a shader.\n- *\n- * @author Heiko Brumme\n- */\n-public class Shader {\n-\n-    /**\n-     * Stores the handle of the shader.\n-     */\n-    private final int id;\n-\n-    /**\n-     * Creates a shader with specified type. The type in the tutorial should be either <code>GL_VERTEX_SHADER</code> or\n-     * <code>GL_FRAGMENT_SHADER</code>.\n-     *\n-     * @param type Type of the shader\n-     */\n-    public Shader(int type) {\n-        id = glCreateShader(type);\n-    }\n-\n-    /**\n-     * Sets the source code of this shader.\n-     *\n-     * @param source GLSL Source Code for the shader\n-     */\n-    public void source(CharSequence source) {\n-        glShaderSource(id, source);\n-    }\n-\n-    /**\n-     * Compiles the shader and checks it's status afertwards.\n-     */\n-    public void compile() {\n-        glCompileShader(id);\n-\n-        checkStatus();\n-    }\n-\n-    /**\n-     * Checks if the shader was compiled successfully.\n-     */\n-    private void checkStatus() {\n-        int status = glGetShaderi(id, GL_COMPILE_STATUS);\n-        if (status != GL_TRUE) {\n-            throw new RuntimeException(glGetShaderInfoLog(id));\n-        }\n-    }\n-\n-    /**\n-     * Deletes the shader.\n-     */\n-    public void delete() {\n-        glDeleteShader(id);\n-    }\n-\n-    /**\n-     * Getter for the shader ID.\n-     *\n-     * @return Handle of this shader\n-     */\n-    public int getID() {\n-        return id;\n-    }\n-\n-    /**\n-     * Creates a shader with specified type and source and compiles it. The type in the tutorial should be either\n-     * <code>GL_VERTEX_SHADER</code> or\n-     * <code>GL_FRAGMENT_SHADER</code>.\n-     *\n-     * @param type Type of the shader\n-     * @param source Source of the shader\n-     * @return Compiled Shader from the specified source\n-     */\n-    public static Shader createShader(int type, CharSequence source) {\n-        Shader shader = new Shader(type);\n-        shader.source(source);\n-        shader.compile();\n-\n-        return shader;\n-    }\n-\n-    /**\n-     * Loads a shader from a file.\n-     *\n-     * @param type Type of the shader\n-     * @param path File path of the shader\n-     * @return Compiled Shader from specified file\n-     */\n-    public static Shader loadShader(int type, URL path) {\n-        StringBuilder builder = new StringBuilder();\n-\n-        try (InputStream in = path.openStream();\n-             BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                builder.append(line).append(\"\\n\");\n-            }\n-        } catch (IOException ex) {\n-            throw new RuntimeException(\"Failed to load a shader file!\"\n-                    + System.lineSeparator() + ex.getMessage());\n-        }\n-        CharSequence source = builder.toString();\n-\n-        return createShader(type, source);\n-    }\n-\n-}\n"}}, {"oid": "8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "url": "https://github.com/MovingBlocks/Terasology/commit/8c53d5f2693c85b3434efa3fc5c5d83d13d8df69", "message": "refactor(lwjgl3):JavaDocs, CheckStyle issues, remove unused code", "committedDate": "2020-07-06T14:59:47Z", "type": "commit"}, {"oid": "1d998f6e38bc636ea2502f7a938a8df8be9e5a31", "url": "https://github.com/MovingBlocks/Terasology/commit/1d998f6e38bc636ea2502f7a938a8df8be9e5a31", "message": "refactor(lwjgl3):Remove UnusedCode", "committedDate": "2020-07-06T16:23:23Z", "type": "commit"}, {"oid": "f023fc572254f78e3d0aa5b9085970b9ab73f4d4", "url": "https://github.com/MovingBlocks/Terasology/commit/f023fc572254f78e3d0aa5b9085970b9ab73f4d4", "message": "feat(LWJGL3, NUI): Split \"Raw Input keys\" and \"Char Input\" in InputSystem and NUI.\nInput system and NUI have separate *Char(Event,Action) for text input now.\nUIWidget have onCharInput method now.\nAll Key actions and events haven't inputCharacter(text) now. only raw keys.", "committedDate": "2020-07-09T19:49:19Z", "type": "commit"}, {"oid": "35a226b6a94f3b2ddaa2c82d44cf6b0b4b6ec7fd", "url": "https://github.com/MovingBlocks/Terasology/commit/35a226b6a94f3b2ddaa2c82d44cf6b0b4b6ec7fd", "message": "feat(LWJGL3, NUI): Return OS's input events callback, consume key events is UIText active (Console, Chat)", "committedDate": "2020-07-13T15:55:23Z", "type": "commit"}, {"oid": "0c4eb7f2ac6d4b6c5898b88dc7e5b7bfb3fd5ba3", "url": "https://github.com/MovingBlocks/Terasology/commit/0c4eb7f2ac6d4b6c5898b88dc7e5b7bfb3fd5ba3", "message": "Merge remote-tracking branch 'tera/develop' into lwjgl3", "committedDate": "2020-07-28T17:34:24Z", "type": "commit"}, {"oid": "6ba9cea569f1c9627b66777662a9e514dc5ca4c7", "url": "https://github.com/MovingBlocks/Terasology/commit/6ba9cea569f1c9627b66777662a9e514dc5ca4c7", "message": "chore(lwjgl3): move GLFW SplashScreen code to `splash-screen` library.", "committedDate": "2020-07-28T18:16:47Z", "type": "commit"}, {"oid": "e212aa3802e8d323c4ec6f845bff2cc1f9e64b88", "url": "https://github.com/MovingBlocks/Terasology/commit/e212aa3802e8d323c4ec6f845bff2cc1f9e64b88", "message": "feat(lwjgl3): gradle task determinate Mac now. idea's run configs have run configs for Mac now.", "committedDate": "2020-07-28T19:57:28Z", "type": "commit"}, {"oid": "0883df83b2450ec39811aacbc0b47d355d1cf8d3", "url": "https://github.com/MovingBlocks/Terasology/commit/0883df83b2450ec39811aacbc0b47d355d1cf8d3", "message": "Merge PR #3969\n\n# Conflicts:\n#\tengine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java\n#\tengine/src/main/java/org/terasology/rendering/cameras/OrthographicCamera.java\n#\tengine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java", "committedDate": "2020-08-02T01:38:47Z", "type": "commit"}, {"oid": "0bbe546592ebe28006a312d319f059d36f9c6ae8", "url": "https://github.com/MovingBlocks/Terasology/commit/0bbe546592ebe28006a312d319f059d36f9c6ae8", "message": "chore: conflict resolution", "committedDate": "2020-08-02T02:01:17Z", "type": "commit"}, {"oid": "599d487bc1d59c0bc569146832ae0f54a373c6c0", "url": "https://github.com/MovingBlocks/Terasology/commit/599d487bc1d59c0bc569146832ae0f54a373c6c0", "message": "chore: use snapshot splash-screen for now", "committedDate": "2020-08-02T02:01:47Z", "type": "commit"}, {"oid": "9607b98d13e182d6f4f1c4dda4c93450091cf4b4", "url": "https://github.com/MovingBlocks/Terasology/commit/9607b98d13e182d6f4f1c4dda4c93450091cf4b4", "message": "Merge remote-tracking branch 'tera/develop' into lwjgl3", "committedDate": "2020-08-04T17:50:02Z", "type": "commit"}, {"oid": "d6e7fb34350749eee6da56b6eb4aec7a09fa4419", "url": "https://github.com/MovingBlocks/Terasology/commit/d6e7fb34350749eee6da56b6eb4aec7a09fa4419", "message": "Merge remote-tracking branch 'origin/develop' into lwjgl3\n\n# Conflicts:\n#\tengine/build.gradle\n#\tengine/src/main/java/org/terasology/rendering/backdrop/Skysphere.java\n#\tengine/src/main/java/org/terasology/rendering/nui/CoreLayout.java\n#\tengine/src/main/java/org/terasology/rendering/nui/CoreScreenLayer.java\n#\tengine/src/main/java/org/terasology/rendering/nui/CoreWidget.java\n#\tengine/src/main/java/org/terasology/rendering/nui/UIWidget.java\n#\tengine/src/main/java/org/terasology/rendering/nui/events/NUIKeyEvent.java\n#\tengine/src/main/java/org/terasology/rendering/nui/internal/LwjglCanvasRenderer.java\n#\tengine/src/main/java/org/terasology/rendering/nui/internal/NUIManagerInternal.java\n#\tengine/src/main/java/org/terasology/rendering/nui/widgets/UIText.java\n#\tfacades/PC/src/main/java/org/terasology/engine/Terasology.java", "committedDate": "2020-08-31T08:22:55Z", "type": "commit"}, {"oid": "83cc4a08a08773540f4c4a07047907fc0ed46a9f", "url": "https://github.com/MovingBlocks/Terasology/commit/83cc4a08a08773540f4c4a07047907fc0ed46a9f", "message": "fix(nui): NUI extraction compability", "committedDate": "2020-09-02T08:02:59Z", "type": "commit"}, {"oid": "cc3082fdc7de3ec1854fb27a5db8671390807238", "url": "https://github.com/MovingBlocks/Terasology/commit/cc3082fdc7de3ec1854fb27a5db8671390807238", "message": "Bump up teranui's version", "committedDate": "2020-09-02T08:49:47Z", "type": "commit"}, {"oid": "74aa3ccef40cb1d1e53110d25fe4854e3e20f9a3", "url": "https://github.com/MovingBlocks/Terasology/commit/74aa3ccef40cb1d1e53110d25fe4854e3e20f9a3", "message": "Merge remote-tracking branch 'origin/develop' into lwjgl3\n\n# Conflicts:\n#\tengine/build.gradle\n#\tengine/src/main/java/org/terasology/engine/subsystem/lwjgl/BaseLwjglSubsystem.java\n#\tengine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglGraphics.java\n#\tengine/src/main/java/org/terasology/utilities/LWJGLHelper.java\n#\tfacades/PC/build.gradle", "committedDate": "2020-10-12T12:18:47Z", "type": "commit"}, {"oid": "6029073c03e41ab044bb8aa27cb468effbbd7a05", "url": "https://github.com/MovingBlocks/Terasology/commit/6029073c03e41ab044bb8aa27cb468effbbd7a05", "message": "chore(lwjgl3): minor refactoring", "committedDate": "2020-10-12T14:19:51Z", "type": "commit"}, {"oid": "9928964d2c3ddc0fb7b49703dae3915a25694daf", "url": "https://github.com/MovingBlocks/Terasology/commit/9928964d2c3ddc0fb7b49703dae3915a25694daf", "message": "fix: fix lwjgl3 running for Mac OS", "committedDate": "2020-10-13T12:49:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMjIwOA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r507012208", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(getViewMatrix()));\n          \n          \n            \n                    GL11.glLoadMatrixf(getViewMatrix().get(BufferUtils.createFloatBuffer(16));", "author": "pollend", "createdAt": "2020-10-18T03:41:05Z", "path": "engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java", "diffHunk": "@@ -193,22 +193,22 @@ public Matrix4f getInverseViewProjectionMatrix() {\n     @Deprecated\n     public void loadProjectionMatrix() {\n         glMatrixMode(GL_PROJECTION);\n-        GL11.glLoadMatrix(getProjectionMatrix().get(BufferUtils.createFloatBuffer(16)));\n+        GL11.glLoadMatrixf(getProjectionMatrix().get(BufferUtils.createFloatBuffer(16)));\n         glMatrixMode(GL11.GL_MODELVIEW);\n     }\n \n     @Override\n     @Deprecated\n     public void loadModelViewMatrix() {\n         glMatrixMode(GL11.GL_MODELVIEW);\n-        GL11.glLoadMatrix(getViewMatrix().get(BufferUtils.createFloatBuffer(16)));\n+        GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(getViewMatrix()));", "originalCommit": "9928964d2c3ddc0fb7b49703dae3915a25694daf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8a4e1b229b06fb72b298c75214a10e3166eaba8", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java b/engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java\nindex 8bd8e2f9d..23b97c579 100644\n--- a/engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java\n+++ b/engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java\n\n@@ -201,14 +186,14 @@ public void loadProjectionMatrix() {\n     @Deprecated\n     public void loadModelViewMatrix() {\n         glMatrixMode(GL11.GL_MODELVIEW);\n-        GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(getViewMatrix()));\n+        GL11.glLoadMatrixf(getViewMatrix().get(BufferUtils.createFloatBuffer(16)));\n     }\n \n     @Override\n     @Deprecated\n     public void loadNormalizedModelViewMatrix() {\n         glMatrixMode(GL11.GL_MODELVIEW);\n-        GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(normViewMatrix));\n+        GL11.glLoadMatrixf(normViewMatrix.get(BufferUtils.createFloatBuffer(16)));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMjI4Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r507012287", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(normViewMatrix));\n          \n          \n            \n                    GL11.glLoadMatrixf(normViewMatrix.get(BufferUtils.createFloatBuffer(16)));\n          \n      \n    \n    \n  \n\nMatrixUtils is deprecated.", "author": "pollend", "createdAt": "2020-10-18T03:42:22Z", "path": "engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java", "diffHunk": "@@ -193,22 +193,22 @@ public Matrix4f getInverseViewProjectionMatrix() {\n     @Deprecated\n     public void loadProjectionMatrix() {\n         glMatrixMode(GL_PROJECTION);\n-        GL11.glLoadMatrix(getProjectionMatrix().get(BufferUtils.createFloatBuffer(16)));\n+        GL11.glLoadMatrixf(getProjectionMatrix().get(BufferUtils.createFloatBuffer(16)));\n         glMatrixMode(GL11.GL_MODELVIEW);\n     }\n \n     @Override\n     @Deprecated\n     public void loadModelViewMatrix() {\n         glMatrixMode(GL11.GL_MODELVIEW);\n-        GL11.glLoadMatrix(getViewMatrix().get(BufferUtils.createFloatBuffer(16)));\n+        GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(getViewMatrix()));\n     }\n \n     @Override\n     @Deprecated\n     public void loadNormalizedModelViewMatrix() {\n         glMatrixMode(GL11.GL_MODELVIEW);\n-        GL11.glLoadMatrix(normViewMatrix.get(BufferUtils.createFloatBuffer(16)));\n+        GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(normViewMatrix));", "originalCommit": "9928964d2c3ddc0fb7b49703dae3915a25694daf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8a4e1b229b06fb72b298c75214a10e3166eaba8", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java b/engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java\nindex 8bd8e2f9d..23b97c579 100644\n--- a/engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java\n+++ b/engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java\n\n@@ -201,14 +186,14 @@ public void loadProjectionMatrix() {\n     @Deprecated\n     public void loadModelViewMatrix() {\n         glMatrixMode(GL11.GL_MODELVIEW);\n-        GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(getViewMatrix()));\n+        GL11.glLoadMatrixf(getViewMatrix().get(BufferUtils.createFloatBuffer(16)));\n     }\n \n     @Override\n     @Deprecated\n     public void loadNormalizedModelViewMatrix() {\n         glMatrixMode(GL11.GL_MODELVIEW);\n-        GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(normViewMatrix));\n+        GL11.glLoadMatrixf(normViewMatrix.get(BufferUtils.createFloatBuffer(16)));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMjQ3MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r507012470", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        GL11.glVertexPointer(2, 0,0, wrap(lineVertex));\n          \n          \n            \n                        GL11.glVertexPointer(2, 0, 0, wrap(lineVertex));", "author": "pollend", "createdAt": "2020-10-18T03:45:06Z", "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java", "diffHunk": "@@ -248,7 +248,7 @@ public static void draw(float x1, float y1, float x2, float y2, float width, Col\n                     x2 - tx - rx, y2 - ty - ry,\n                     x2 + tx + rx, y2 + ty + ry\n                 };\n-            GL11.glVertexPointer(2, 0, wrap(lineVertex));\n+            GL11.glVertexPointer(2, 0,0, wrap(lineVertex));", "originalCommit": "9928964d2c3ddc0fb7b49703dae3915a25694daf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8a4e1b229b06fb72b298c75214a10e3166eaba8", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java b/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java\nindex e0bb89dc2..287ab3a3e 100644\n--- a/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java\n+++ b/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java\n\n@@ -238,17 +225,17 @@ public static void draw(float x1, float y1, float x2, float y2, float width, Col\n         if (width >= 3) {\n             //draw cap\n             lineVertex = new float[]\n-                {\n-                    x1 - rx + cx, y1 - ry + cy,    //cap1\n-                    x1 + rx + cx, y1 + ry + cy,\n-                    x1 - tx - rx, y1 - ty - ry,\n-                    x1 + tx + rx, y1 + ty + ry,\n-                    x2 - rx - cx, y2 - ry - cy,    //cap2\n-                    x2 + rx - cx, y2 + ry - cy,\n-                    x2 - tx - rx, y2 - ty - ry,\n-                    x2 + tx + rx, y2 + ty + ry\n-                };\n-            GL11.glVertexPointer(2, 0,0, wrap(lineVertex));\n+                    {\n+                            x1 - rx + cx, y1 - ry + cy,    //cap1\n+                            x1 + rx + cx, y1 + ry + cy,\n+                            x1 - tx - rx, y1 - ty - ry,\n+                            x1 + tx + rx, y1 + ty + ry,\n+                            x2 - rx - cx, y2 - ry - cy,    //cap2\n+                            x2 + rx - cx, y2 + ry - cy,\n+                            x2 - tx - rx, y2 - ty - ry,\n+                            x2 + tx + rx, y2 + ty + ry\n+                    };\n+            GL11.glVertexPointer(2, 0, 0, wrap(lineVertex));\n \n             if (!alphaBlend) {\n                 float[] lineColor =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMjQ4Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r507012483", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            GL11.glColorPointer(3, 0,0, wrap(lineColor));\n          \n          \n            \n                            GL11.glColorPointer(3, 0, 0, wrap(lineColor));", "author": "pollend", "createdAt": "2020-10-18T03:45:18Z", "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java", "diffHunk": "@@ -262,7 +262,7 @@ public static void draw(float x1, float y1, float x2, float y2, float width, Col\n                         cRed, cGreen, cBlue,\n                         cRed, cGreen, cBlue\n                     };\n-                GL11.glColorPointer(3, 0, wrap(lineColor));\n+                GL11.glColorPointer(3, 0,0, wrap(lineColor));", "originalCommit": "9928964d2c3ddc0fb7b49703dae3915a25694daf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8a4e1b229b06fb72b298c75214a10e3166eaba8", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java b/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java\nindex e0bb89dc2..287ab3a3e 100644\n--- a/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java\n+++ b/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java\n\n@@ -262,7 +249,7 @@ public static void draw(float x1, float y1, float x2, float y2, float width, Col\n                         cRed, cGreen, cBlue,\n                         cRed, cGreen, cBlue\n                     };\n-                GL11.glColorPointer(3, 0,0, wrap(lineColor));\n+                GL11.glColorPointer(3, 0, 0, wrap(lineColor));\n             } else {\n                 float[] lineColor =\n                     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMjUxMA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r507012510", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            GL11.glColorPointer(4, 0,0, wrap(lineColor));\n          \n          \n            \n                            GL11.glColorPointer(4, 0, 0, wrap(lineColor));", "author": "pollend", "createdAt": "2020-10-18T03:45:29Z", "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java", "diffHunk": "@@ -275,7 +275,7 @@ public static void draw(float x1, float y1, float x2, float y2, float width, Col\n                         cRed, cGreen, cBlue, a,\n                         cRed, cGreen, cBlue, a\n                     };\n-                GL11.glColorPointer(4, 0, wrap(lineColor));\n+                GL11.glColorPointer(4, 0,0, wrap(lineColor));", "originalCommit": "9928964d2c3ddc0fb7b49703dae3915a25694daf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8a4e1b229b06fb72b298c75214a10e3166eaba8", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java b/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java\nindex e0bb89dc2..287ab3a3e 100644\n--- a/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java\n+++ b/engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java\n\n@@ -275,7 +262,7 @@ public static void draw(float x1, float y1, float x2, float y2, float width, Col\n                         cRed, cGreen, cBlue, a,\n                         cRed, cGreen, cBlue, a\n                     };\n-                GL11.glColorPointer(4, 0,0, wrap(lineColor));\n+                GL11.glColorPointer(4, 0, 0, wrap(lineColor));\n             }\n \n             GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);\n"}}, {"oid": "4d3909c1aa69388f3fbf4b520e3da40fa06db119", "url": "https://github.com/MovingBlocks/Terasology/commit/4d3909c1aa69388f3fbf4b520e3da40fa06db119", "message": "feat(LWGJL3): twaek mouse delta", "committedDate": "2020-10-18T18:39:06Z", "type": "commit"}, {"oid": "ce88be52f632eea4e0d314d314b1edfdf4f1e8d2", "url": "https://github.com/MovingBlocks/Terasology/commit/ce88be52f632eea4e0d314d314b1edfdf4f1e8d2", "message": "Update LwjglMouseDevice.java", "committedDate": "2020-10-18T19:41:48Z", "type": "commit"}, {"oid": "7800b196cb1bcbac5f872f0bc4bd647629c17a24", "url": "https://github.com/MovingBlocks/Terasology/commit/7800b196cb1bcbac5f872f0bc4bd647629c17a24", "message": "Merge pull request #1 from pollend/DwarkWeird-lwgjl3-input-tweak\n\nfeat(LWGJL3): twaek mouse delta", "committedDate": "2020-10-18T19:43:25Z", "type": "commit"}, {"oid": "b123c1ca27c3bdf0c0af0db524a8ad630c280847", "url": "https://github.com/MovingBlocks/Terasology/commit/b123c1ca27c3bdf0c0af0db524a8ad630c280847", "message": "feat(lwjgl3): Fix Gradle's run configuration for MacOS", "committedDate": "2020-10-19T06:40:48Z", "type": "commit"}, {"oid": "e8a4e1b229b06fb72b298c75214a10e3166eaba8", "url": "https://github.com/MovingBlocks/Terasology/commit/e8a4e1b229b06fb72b298c75214a10e3166eaba8", "message": "chore(lwjgl3): Change to usage not depricated code for OpenVRStereoCamera and Reformat LineRenderer", "committedDate": "2020-10-19T07:18:34Z", "type": "commit"}, {"oid": "00506962946adaf42bcee50ac1ac6a42a568d4f5", "url": "https://github.com/MovingBlocks/Terasology/commit/00506962946adaf42bcee50ac1ac6a42a568d4f5", "message": "Merge remote-tracking branch 'origin/develop' into lwjgl3\n\n# Conflicts:\n#\tfacades/PC/build.gradle", "committedDate": "2020-10-21T14:24:06Z", "type": "commit"}, {"oid": "02736ba76324d0e70591772dcf0b6849615193f5", "url": "https://github.com/MovingBlocks/Terasology/commit/02736ba76324d0e70591772dcf0b6849615193f5", "message": "Merge branch 'develop' into lwjgl3", "committedDate": "2020-10-23T06:50:56Z", "type": "commit"}, {"oid": "adb8075fed2516f327f391d830a82774386ad7f8", "url": "https://github.com/MovingBlocks/Terasology/commit/adb8075fed2516f327f391d830a82774386ad7f8", "message": "fix(build): added \"java-platform\" gradle plagin for \"platform\"/BOM dependencies. Seems, broken after upgrading gradle to version 6.7", "committedDate": "2020-10-23T07:47:12Z", "type": "commit"}, {"oid": "c83655fb94c02d68fb8ba31fdb1954e81dde12d6", "url": "https://github.com/MovingBlocks/Terasology/commit/c83655fb94c02d68fb8ba31fdb1954e81dde12d6", "message": "fix(lwjgl3): fix lgtm issues", "committedDate": "2020-10-23T08:08:46Z", "type": "commit"}]}