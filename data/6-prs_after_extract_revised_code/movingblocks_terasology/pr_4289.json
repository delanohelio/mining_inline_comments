{"pr_number": 4289, "pr_title": "feat(JOML): migrate gltf and rendering", "pr_createdAt": "2020-11-29T07:23:20Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4289", "timeline": [{"oid": "a1ab20eec05406bb6aa0fe0dfe409ae246b9348d", "url": "https://github.com/MovingBlocks/Terasology/commit/a1ab20eec05406bb6aa0fe0dfe409ae246b9348d", "message": "partial migration of animation", "committedDate": "2020-11-29T03:55:48Z", "type": "commit"}, {"oid": "1a6bf1f9956d372f3a853927cf1e17309ecf520c", "url": "https://github.com/MovingBlocks/Terasology/commit/1a6bf1f9956d372f3a853927cf1e17309ecf520c", "message": "migrate animation frames", "committedDate": "2020-11-29T04:17:34Z", "type": "commit"}, {"oid": "de560d052dfabba77408ca5928e922178c4271c4", "url": "https://github.com/MovingBlocks/Terasology/commit/de560d052dfabba77408ca5928e922178c4271c4", "message": "migrate skin animation", "committedDate": "2020-11-29T07:22:37Z", "type": "commit"}, {"oid": "3bfeba48c2a47c2ced6c653d1b339b3e56af6464", "url": "https://github.com/MovingBlocks/Terasology/commit/3bfeba48c2a47c2ced6c653d1b339b3e56af6464", "message": "correct normals", "committedDate": "2020-11-29T18:20:22Z", "type": "commit"}, {"oid": "1cb31626b285947ef894a16f0b6d30dcefd0b5a3", "url": "https://github.com/MovingBlocks/Terasology/commit/1cb31626b285947ef894a16f0b6d30dcefd0b5a3", "message": "Merge branch 'develop' into feature/joml-migration-gltf", "committedDate": "2020-12-04T03:50:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0MDAxOA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r538140018", "bodyText": "FQN of class not needed more (import was removed)", "author": "DarkWeird", "createdAt": "2020-12-08T08:38:01Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java", "diffHunk": "@@ -114,37 +117,41 @@ private MeshAnimationData loadAnimation(GLTF gltf, GLTFAnimation animation, List\n \n             switch (channel.getTarget().getPath()) {\n                 case TRANSLATION: {\n-                    List<Vector3f> data = getVector3fs(gltf, loadedBuffers, sampler.getOutput());\n+                    List<org.joml.Vector3f> data = getVector3fs(gltf, loadedBuffers, sampler.getOutput());\n \n-                    channelReaders.add(new BufferChannelReader<>(times, data, sampler.getInterpolation()::interpolate, x -> x.getPosition(bone)));\n+                    channelReaders.add(new BufferChannelReader<>(times, data, sampler.getInterpolation()::interpolate\n+                        , x -> x.getPosition(bone)));\n                     break;\n                 }\n                 case ROTATION: {\n-                    List<Quat4f> data = getQuat4fs(gltf, loadedBuffers, sampler.getOutput());\n-                    channelReaders.add(new BufferChannelReader<>(times, data, sampler.getInterpolation()::interpolate, x -> x.getRotation(bone)));\n+                    List<Quaternionf> data = getQuat4fs(gltf, loadedBuffers, sampler.getOutput());\n+                    channelReaders.add(new BufferChannelReader<>(times, data, sampler.getInterpolation()::interpolate\n+                        , x -> x.getRotation(bone)));\n                     break;\n                 }\n                 case SCALE: {\n-                    List<Vector3f> data = getVector3fs(gltf, loadedBuffers, sampler.getOutput());\n-                    channelReaders.add(new BufferChannelReader<>(times, data, sampler.getInterpolation()::interpolate, x -> x.getBoneScale(bone)));\n+                    List<org.joml.Vector3f> data = getVector3fs(gltf, loadedBuffers, sampler.getOutput());", "originalCommit": "1cb31626b285947ef894a16f0b6d30dcefd0b5a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a2f89903601693c3c7cbd996460cd541af3f5b6", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java b/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java\nindex be15365c8..dd4f6770f 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java\n\n@@ -117,7 +117,7 @@ private MeshAnimationData loadAnimation(GLTF gltf, GLTFAnimation animation, List\n \n             switch (channel.getTarget().getPath()) {\n                 case TRANSLATION: {\n-                    List<org.joml.Vector3f> data = getVector3fs(gltf, loadedBuffers, sampler.getOutput());\n+                    List<Vector3f> data = getVector3fs(gltf, loadedBuffers, sampler.getOutput());\n \n                     channelReaders.add(new BufferChannelReader<>(times, data, sampler.getInterpolation()::interpolate\n                         , x -> x.getPosition(bone)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0MDA1NA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r538140054", "bodyText": "FQN of class not needed more (import was removed)", "author": "DarkWeird", "createdAt": "2020-12-08T08:38:04Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java", "diffHunk": "@@ -114,37 +117,41 @@ private MeshAnimationData loadAnimation(GLTF gltf, GLTFAnimation animation, List\n \n             switch (channel.getTarget().getPath()) {\n                 case TRANSLATION: {\n-                    List<Vector3f> data = getVector3fs(gltf, loadedBuffers, sampler.getOutput());\n+                    List<org.joml.Vector3f> data = getVector3fs(gltf, loadedBuffers, sampler.getOutput());", "originalCommit": "1cb31626b285947ef894a16f0b6d30dcefd0b5a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a2f89903601693c3c7cbd996460cd541af3f5b6", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java b/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java\nindex be15365c8..dd4f6770f 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java\n\n@@ -117,7 +117,7 @@ private MeshAnimationData loadAnimation(GLTF gltf, GLTFAnimation animation, List\n \n             switch (channel.getTarget().getPath()) {\n                 case TRANSLATION: {\n-                    List<org.joml.Vector3f> data = getVector3fs(gltf, loadedBuffers, sampler.getOutput());\n+                    List<Vector3f> data = getVector3fs(gltf, loadedBuffers, sampler.getOutput());\n \n                     channelReaders.add(new BufferChannelReader<>(times, data, sampler.getInterpolation()::interpolate\n                         , x -> x.getPosition(bone)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0MDEyNw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r538140127", "bodyText": "FQN of class not needed more (import was removed)", "author": "DarkWeird", "createdAt": "2020-12-08T08:38:13Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java", "diffHunk": "@@ -163,20 +170,20 @@ private TFloatList getFloats(GLTF gltf, List<byte[]> loadedBuffers, int accessor\n         return floats;\n     }\n \n-    private List<Vector3f> getVector3fs(GLTF gltf, List<byte[]> loadedBuffers, int accessorIndex) throws IOException {\n+    private List<org.joml.Vector3f> getVector3fs(GLTF gltf, List<byte[]> loadedBuffers, int accessorIndex) throws IOException {", "originalCommit": "1cb31626b285947ef894a16f0b6d30dcefd0b5a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81aeafe2c30499dc73f5d4f8c1cc22f7021a9d27", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java b/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java\nindex be15365c8..c751aa929 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/GLTFAnimationFormat.java\n\n@@ -170,11 +170,11 @@ private TFloatList getFloats(GLTF gltf, List<byte[]> loadedBuffers, int accessor\n         return floats;\n     }\n \n-    private List<org.joml.Vector3f> getVector3fs(GLTF gltf, List<byte[]> loadedBuffers, int accessorIndex) throws IOException {\n+    private List<Vector3f> getVector3fs(GLTF gltf, List<byte[]> loadedBuffers, int accessorIndex) throws IOException {\n         TFloatList floats = getFloats(gltf, loadedBuffers, accessorIndex);\n-        List<org.joml.Vector3f> vectors = Lists.newArrayListWithCapacity(floats.size() / 3);\n+        List<Vector3f> vectors = Lists.newArrayListWithCapacity(floats.size() / 3);\n         for (int i = 0; i < floats.size(); i += 3) {\n-            vectors.add(new org.joml.Vector3f(floats.get(i), floats.get(i + 1), floats.get(i + 2)));\n+            vectors.add(new Vector3f(floats.get(i), floats.get(i + 1), floats.get(i + 2)));\n         }\n         return vectors;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0MDQ4OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r538140489", "bodyText": "FQN of class not needed more (import was removed)", "author": "DarkWeird", "createdAt": "2020-12-08T08:38:46Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java", "diffHunk": "@@ -249,7 +272,7 @@ protected void checkVersionSupported(ResourceUrn urn, GLTF gltf) throws IOExcept\n             if (Strings.isNullOrEmpty(boneName)) {\n                 boneName = \"bone_\" + i;\n             }\n-            Bone bone = new Bone(i, boneName, new Matrix4f(rotation, position, scale.x));\n+            Bone bone = new Bone(i, boneName, new org.joml.Matrix4f().translationRotateScale(position, rotation, scale));", "originalCommit": "1cb31626b285947ef894a16f0b6d30dcefd0b5a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81aeafe2c30499dc73f5d4f8c1cc22f7021a9d27", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java b/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java\nindex 7b558392c..d7ce38ab5 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java\n\n@@ -272,7 +272,7 @@ protected void checkVersionSupported(ResourceUrn urn, GLTF gltf) throws IOExcept\n             if (Strings.isNullOrEmpty(boneName)) {\n                 boneName = \"bone_\" + i;\n             }\n-            Bone bone = new Bone(i, boneName, new org.joml.Matrix4f().translationRotateScale(position, rotation, scale));\n+            Bone bone = new Bone(i, boneName, new Matrix4f().translationRotateScale(position, rotation, scale));\n             bone.setInverseBindMatrix(inverseMats.get(i));\n             bones.add(bone);\n             boneToJoint.put(nodeIndex, i);\n"}}, {"oid": "81aeafe2c30499dc73f5d4f8c1cc22f7021a9d27", "url": "https://github.com/MovingBlocks/Terasology/commit/81aeafe2c30499dc73f5d4f8c1cc22f7021a9d27", "message": "remove fully qualified name", "committedDate": "2020-12-09T03:10:43Z", "type": "commit"}, {"oid": "44d6a068d9a2c4ca9535030d0667593e5e51f735", "url": "https://github.com/MovingBlocks/Terasology/commit/44d6a068d9a2c4ca9535030d0667593e5e51f735", "message": "Merge branch 'feature/joml-migration-gltf' of github.com:pollend/Terasology into feature/joml-migration-gltf", "committedDate": "2020-12-09T03:11:17Z", "type": "commit"}, {"oid": "2a2f89903601693c3c7cbd996460cd541af3f5b6", "url": "https://github.com/MovingBlocks/Terasology/commit/2a2f89903601693c3c7cbd996460cd541af3f5b6", "message": "remove fully qualified name", "committedDate": "2020-12-12T04:20:06Z", "type": "commit"}, {"oid": "d8297a82b5728bc9f4bb1425acba2bc8d888ddf5", "url": "https://github.com/MovingBlocks/Terasology/commit/d8297a82b5728bc9f4bb1425acba2bc8d888ddf5", "message": "Merge branch 'develop' into feature/joml-migration-gltf", "committedDate": "2020-12-13T14:30:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkzNzE4NA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r541937184", "bodyText": "This seems like those two matrices should be different... why do we joml-migrate both to a plain new matrix?", "author": "jdrueckert", "createdAt": "2020-12-13T14:33:10Z", "path": "engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java", "diffHunk": "@@ -31,7 +30,7 @@\n     private String name;\n     private int index;\n     private Matrix4f relativeTransform = new Matrix4f();\n-    private Matrix4f inverseBindMatrix = new Matrix4f(Matrix4f.IDENTITY);", "originalCommit": "d8297a82b5728bc9f4bb1425acba2bc8d888ddf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgyMDkxOQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r548820919", "bodyText": "Matricies in JOML are always Identity.", "author": "pollend", "createdAt": "2020-12-25T07:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkzNzE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkxMzQ4OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r548913488", "bodyText": "yes, but Matrix4f() wasn't, was it?", "author": "jdrueckert", "createdAt": "2020-12-25T21:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkzNzE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA0NDQ0OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549044449", "bodyText": "Should relativeTransform be initialized like this: https://github.com/MovingBlocks/Terasology/pull/4289/files#diff-e9569d94bd09dbdf5fdb02d9bfd5d2b781df1f55e0d32adba9620ba7156e4366R115\nnew Matrix4f().m00(0).m11(0).m22(0).m33(0);", "author": "skaldarnar", "createdAt": "2020-12-26T23:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkzNzE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQwOTYyOQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549409629", "bodyText": "it needs to be a zero matrix. umm I don't think there is a way to declare an empty matrix in joml.", "author": "pollend", "createdAt": "2020-12-28T16:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkzNzE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NjQxNw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r550296417", "bodyText": "The initial value is overwritten in the constructor anyways, so this is no problem.", "author": "skaldarnar", "createdAt": "2020-12-30T19:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkzNzE4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkzNzU1Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r541937552", "bodyText": "what about this? still needed or can be removed?", "author": "jdrueckert", "createdAt": "2020-12-13T14:35:21Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java", "diffHunk": "@@ -293,7 +316,7 @@ protected void checkVersionSupported(ResourceUrn urn, GLTF gltf) throws IOExcept\n                     values.get(i + 8), values.get(i + 9), values.get(i + 10), values.get(i + 11),\n                     values.get(i + 12), values.get(i + 13), values.get(i + 14), values.get(i + 15)\n             );\n-            mat.transpose();\n+//            mat.transpose();", "originalCommit": "d8297a82b5728bc9f4bb1425acba2bc8d888ddf5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2be8752f688203ccc0ad4afe37ce779e0e47c143", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java b/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java\nindex d7ce38ab5..3330ca69f 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java\n\n@@ -316,7 +316,6 @@ protected void checkVersionSupported(ResourceUrn urn, GLTF gltf) throws IOExcept\n                     values.get(i + 8), values.get(i + 9), values.get(i + 10), values.get(i + 11),\n                     values.get(i + 12), values.get(i + 13), values.get(i + 14), values.get(i + 15)\n             );\n-//            mat.transpose();\n             matricies.add(mat);\n         }\n         return matricies;\n"}}, {"oid": "3b1c7930e59f8804e9894bd309d00b42a5493ce3", "url": "https://github.com/MovingBlocks/Terasology/commit/3b1c7930e59f8804e9894bd309d00b42a5493ce3", "message": "Merge branch 'develop' into feature/joml-migration-gltf", "committedDate": "2020-12-19T18:16:30Z", "type": "commit"}, {"oid": "2be8752f688203ccc0ad4afe37ce779e0e47c143", "url": "https://github.com/MovingBlocks/Terasology/commit/2be8752f688203ccc0ad4afe37ce779e0e47c143", "message": "remove commented out transpose", "committedDate": "2020-12-19T21:03:40Z", "type": "commit"}, {"oid": "0658a948573cfd92a1bcd9df2bebcce2de40b0f4", "url": "https://github.com/MovingBlocks/Terasology/commit/0658a948573cfd92a1bcd9df2bebcce2de40b0f4", "message": "Merge branch 'develop' into feature/joml-migration-gltf", "committedDate": "2020-12-20T23:17:57Z", "type": "commit"}, {"oid": "6478ff82e6855593dcb332a59db3ecad87a921f5", "url": "https://github.com/MovingBlocks/Terasology/commit/6478ff82e6855593dcb332a59db3ecad87a921f5", "message": "Merge branch 'develop' into feature/joml-migration-gltf", "committedDate": "2020-12-25T07:15:49Z", "type": "commit"}, {"oid": "8e581d7e276ce82eda59f69f143ae4b5f21afd52", "url": "https://github.com/MovingBlocks/Terasology/commit/8e581d7e276ce82eda59f69f143ae4b5f21afd52", "message": "Merge branch 'develop' into feature/joml-migration-gltf", "committedDate": "2020-12-27T00:58:34Z", "type": "commit"}, {"oid": "22cc7def2404187c1ee27cf795687644023e8ebb", "url": "https://github.com/MovingBlocks/Terasology/commit/22cc7def2404187c1ee27cf795687644023e8ebb", "message": "Merge branch 'develop' into feature/joml-migration-gltf", "committedDate": "2020-12-28T12:45:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NDIzNA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549344234", "bodyText": "No need to use a Stream here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ((OpenGLSkeletalMesh) skeletalMesh.mesh).render(Arrays.stream(boneTransforms).collect(Collectors.toList()));\n          \n          \n            \n                        ((OpenGLSkeletalMesh) skeletalMesh.mesh).render(Arrays.asList(boneTransforms));", "author": "skaldarnar", "createdAt": "2020-12-28T13:15:58Z", "path": "engine/src/main/java/org/terasology/rendering/logic/SkeletonRenderer.java", "diffHunk": "@@ -288,20 +288,16 @@ public void renderOpaque() {\n                 if (boneLocation != null) {\n                     Matrix4f boneTransform = new Matrix4f();\n                     boneLocation.getRelativeTransform(boneTransform, entity);\n-                    boneTransform.mul(JomlUtil.from(bone.getInverseBindMatrix()).transpose());\n-                    boneTransforms[bone.getIndex()] = boneTransform;\n+                    boneTransform.mul(bone.getInverseBindMatrix());\n+                    boneTransforms[bone.getIndex()] = boneTransform.transpose();\n                 } else {\n                     logger.warn(\"Unable to resolve bone \\\"{}\\\"\", bone.getName());\n                     boneTransforms[bone.getIndex()] = new Matrix4f();\n \n                 }\n             }\n             ((OpenGLSkeletalMesh) skeletalMesh.mesh).setScaleTranslate(skeletalMesh.scale, skeletalMesh.translate);\n-            ((OpenGLSkeletalMesh) skeletalMesh.mesh).render(Arrays.stream(boneTransforms).map(k -> {\n-                org.terasology.math.geom.Matrix4f t = JomlUtil.from(k);\n-                t.transpose();\n-                return t;\n-            }).collect(Collectors.toList()));\n+            ((OpenGLSkeletalMesh) skeletalMesh.mesh).render(Arrays.stream(boneTransforms).collect(Collectors.toList()));", "originalCommit": "22cc7def2404187c1ee27cf795687644023e8ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/logic/SkeletonRenderer.java b/engine/src/main/java/org/terasology/rendering/logic/SkeletonRenderer.java\nindex 199531651..11d48b6ee 100644\n--- a/engine/src/main/java/org/terasology/rendering/logic/SkeletonRenderer.java\n+++ b/engine/src/main/java/org/terasology/rendering/logic/SkeletonRenderer.java\n\n@@ -297,7 +297,7 @@ public void renderOpaque() {\n                 }\n             }\n             ((OpenGLSkeletalMesh) skeletalMesh.mesh).setScaleTranslate(skeletalMesh.scale, skeletalMesh.translate);\n-            ((OpenGLSkeletalMesh) skeletalMesh.mesh).render(Arrays.stream(boneTransforms).collect(Collectors.toList()));\n+            ((OpenGLSkeletalMesh) skeletalMesh.mesh).render(Arrays.asList(boneTransforms));\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NDkyNg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549344926", "bodyText": "remove commented code and apply formatter.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        a.lerp(b,t,out);\n          \n          \n            \n            //            out.x = a.x + t * (b.x - a.x);\n          \n          \n            \n            //            out.y = a.y + t * (b.y - a.y);\n          \n          \n            \n            //            out.z = a.z + t * (b.z - a.z);\n          \n          \n            \n                        a.lerp(b, t, out);", "author": "skaldarnar", "createdAt": "2020-12-28T13:18:02Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/model/GLTFInterpolation.java", "diffHunk": "@@ -30,15 +30,17 @@\n     LINEAR {\n         @Override\n         public void interpolate(Vector3f a, Vector3f b, float t, Vector3f out) {\n-            out.x = a.x + t * (b.x - a.x);\n-            out.y = a.y + t * (b.y - a.y);\n-            out.z = a.z + t * (b.z - a.z);\n+            a.lerp(b,t,out);\n+//            out.x = a.x + t * (b.x - a.x);\n+//            out.y = a.y + t * (b.y - a.y);\n+//            out.z = a.z + t * (b.z - a.z);", "originalCommit": "22cc7def2404187c1ee27cf795687644023e8ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/model/GLTFInterpolation.java b/engine/src/main/java/org/terasology/rendering/gltf/model/GLTFInterpolation.java\nindex 658b2c2da..ab7ed1504 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/model/GLTFInterpolation.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/model/GLTFInterpolation.java\n\n@@ -24,23 +24,17 @@\n  */\n public enum GLTFInterpolation {\n     /**\n-     * For initial value 'a' and next value 'b' and delta time 't'\n-     * a + (b - a ) * t\n+     * For initial value 'a' and next value 'b' and delta time 't' a + (b - a ) * t\n      */\n     LINEAR {\n         @Override\n         public void interpolate(Vector3f a, Vector3f b, float t, Vector3f out) {\n-            a.lerp(b,t,out);\n-//            out.x = a.x + t * (b.x - a.x);\n-//            out.y = a.y + t * (b.y - a.y);\n-//            out.z = a.z + t * (b.z - a.z);\n-\n+            a.lerp(b, t, out);\n         }\n \n         @Override\n         public void interpolate(Quaternionf a, Quaternionf b, float t, Quaternionf out) {\n             a.slerp(b, t, out);\n-//            out.set(BaseQuat4f.interpolate(a, b, t));\n         }\n     },\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NTAzOA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549345038", "bodyText": "remove commented code\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //            out.set(BaseQuat4f.interpolate(a, b, t));", "author": "skaldarnar", "createdAt": "2020-12-28T13:18:19Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/model/GLTFInterpolation.java", "diffHunk": "@@ -30,15 +30,17 @@\n     LINEAR {\n         @Override\n         public void interpolate(Vector3f a, Vector3f b, float t, Vector3f out) {\n-            out.x = a.x + t * (b.x - a.x);\n-            out.y = a.y + t * (b.y - a.y);\n-            out.z = a.z + t * (b.z - a.z);\n+            a.lerp(b,t,out);\n+//            out.x = a.x + t * (b.x - a.x);\n+//            out.y = a.y + t * (b.y - a.y);\n+//            out.z = a.z + t * (b.z - a.z);\n \n         }\n \n         @Override\n-        public void interpolate(Quat4f a, Quat4f b, float t, Quat4f out) {\n-            out.set(BaseQuat4f.interpolate(a, b, t));\n+        public void interpolate(Quaternionf a, Quaternionf b, float t, Quaternionf out) {\n+            a.slerp(b, t, out);\n+//            out.set(BaseQuat4f.interpolate(a, b, t));", "originalCommit": "22cc7def2404187c1ee27cf795687644023e8ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/model/GLTFInterpolation.java b/engine/src/main/java/org/terasology/rendering/gltf/model/GLTFInterpolation.java\nindex 658b2c2da..ab7ed1504 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/model/GLTFInterpolation.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/model/GLTFInterpolation.java\n\n@@ -24,23 +24,17 @@\n  */\n public enum GLTFInterpolation {\n     /**\n-     * For initial value 'a' and next value 'b' and delta time 't'\n-     * a + (b - a ) * t\n+     * For initial value 'a' and next value 'b' and delta time 't' a + (b - a ) * t\n      */\n     LINEAR {\n         @Override\n         public void interpolate(Vector3f a, Vector3f b, float t, Vector3f out) {\n-            a.lerp(b,t,out);\n-//            out.x = a.x + t * (b.x - a.x);\n-//            out.y = a.y + t * (b.y - a.y);\n-//            out.z = a.z + t * (b.z - a.z);\n-\n+            a.lerp(b, t, out);\n         }\n \n         @Override\n         public void interpolate(Quaternionf a, Quaternionf b, float t, Quaternionf out) {\n             a.slerp(b, t, out);\n-//            out.set(BaseQuat4f.interpolate(a, b, t));\n         }\n     },\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NTUxNw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549345517", "bodyText": "Ehm, what is this deserializer used for?\nI would assume we keep all de- and encoding logic for the TeraMath data types and add new ones for the JOML types (if needed). Are we sure this should be changed?", "author": "skaldarnar", "createdAt": "2020-12-28T13:19:57Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/deserializers/Vector3fDeserializer.java", "diffHunk": "@@ -21,7 +21,7 @@\n import com.google.gson.JsonParseException;\n import gnu.trove.list.TFloatList;\n import gnu.trove.list.array.TFloatArrayList;\n-import org.terasology.math.geom.Vector3f;\n+import org.joml.Vector3f;", "originalCommit": "22cc7def2404187c1ee27cf795687644023e8ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NTY0MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549345640", "bodyText": "Same here, should we keep the old deserializer for teramath types?", "author": "skaldarnar", "createdAt": "2020-12-28T13:20:23Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/deserializers/Quat4fDeserializer.java", "diffHunk": "@@ -21,21 +21,21 @@\n import com.google.gson.JsonParseException;\n import gnu.trove.list.TFloatList;\n import gnu.trove.list.array.TFloatArrayList;\n-import org.terasology.math.geom.Quat4f;\n+import org.joml.Quaternionf;\n \n import java.lang.reflect.Type;\n \n /**\n  * Json deserializer for an Quat4f.\n  */\n-public class Quat4fDeserializer implements JsonDeserializer<Quat4f> {\n+public class Quat4fDeserializer implements JsonDeserializer<Quaternionf> {", "originalCommit": "22cc7def2404187c1ee27cf795687644023e8ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/deserializers/Quat4fDeserializer.java b/engine/src/main/java/org/terasology/rendering/gltf/deserializers/QuaternionfDeserializer.java\nsimilarity index 95%\nrename from engine/src/main/java/org/terasology/rendering/gltf/deserializers/Quat4fDeserializer.java\nrename to engine/src/main/java/org/terasology/rendering/gltf/deserializers/QuaternionfDeserializer.java\nindex 660eae2c9..2dee03f40 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/deserializers/Quat4fDeserializer.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/deserializers/QuaternionfDeserializer.java\n\n@@ -28,7 +28,7 @@\n /**\n  * Json deserializer for an Quat4f.\n  */\n-public class Quat4fDeserializer implements JsonDeserializer<Quaternionf> {\n+public class QuaternionfDeserializer implements JsonDeserializer<Quaternionf> {\n     @Override\n     public Quaternionf deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n         TFloatList result = new TFloatArrayList();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NTc3Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549345772", "bodyText": "Same here, should we keep the old deserializer for teramath types?", "author": "skaldarnar", "createdAt": "2020-12-28T13:20:54Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/deserializers/Matrix4fDeserializer.java", "diffHunk": "@@ -21,7 +21,7 @@\n import com.google.gson.JsonParseException;\n import gnu.trove.list.TFloatList;\n import gnu.trove.list.array.TFloatArrayList;\n-import org.terasology.math.geom.Matrix4f;\n+import org.joml.Matrix4f;", "originalCommit": "22cc7def2404187c1ee27cf795687644023e8ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NzgyOA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549347828", "bodyText": "Why do we create a new matrix object here and set transform? Isn't this equivalent to just\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            transform.set(new Matrix4f().translationRotateScale(position,rotation, scale));\n          \n          \n            \n                            transform.translationRotateScale(position,rotation, scale);", "author": "skaldarnar", "createdAt": "2020-12-28T13:27:35Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/GLTFMeshFormat.java", "diffHunk": "@@ -131,19 +131,19 @@ private Matrix4f getMatrix(GLTF gltf, int nodeIndex) {\n                 if (node.getScale() != null) {\n                     scale.set(node.getScale());\n                 }\n-                transform.set(new Matrix4f(rotation, position, 1.0f));\n-\n-                transform.set(0, 0, scale.getX() * transform.get(0, 0));\n-                transform.set(0, 1, scale.getX() * transform.get(0, 1));\n-                transform.set(0, 2, scale.getX() * transform.get(0, 2));\n-\n-                transform.set(1, 0, scale.getY() * transform.get(1, 0));\n-                transform.set(1, 1, scale.getY() * transform.get(1, 1));\n-                transform.set(1, 2, scale.getY() * transform.get(1, 2));\n-\n-                transform.set(2, 0, scale.getZ() * transform.get(2, 0));\n-                transform.set(2, 1, scale.getZ() * transform.get(2, 1));\n-                transform.set(2, 2, scale.getZ() * transform.get(2, 2));\n+                transform.set(new Matrix4f().translationRotateScale(position,rotation, scale));", "originalCommit": "22cc7def2404187c1ee27cf795687644023e8ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/GLTFMeshFormat.java b/engine/src/main/java/org/terasology/rendering/gltf/GLTFMeshFormat.java\nindex 93d0ef391..dbe1fa1cc 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/GLTFMeshFormat.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/GLTFMeshFormat.java\n\n@@ -131,19 +131,7 @@ private Matrix4f getMatrix(GLTF gltf, int nodeIndex) {\n                 if (node.getScale() != null) {\n                     scale.set(node.getScale());\n                 }\n-                transform.set(new Matrix4f().translationRotateScale(position,rotation, scale));\n-\n-//                transform.set(0, 0, scale.getX() * transform.get(0, 0));\n-//                transform.set(0, 1, scale.getX() * transform.get(0, 1));\n-//                transform.set(0, 2, scale.getX() * transform.get(0, 2));\n-//\n-//                transform.set(1, 0, scale.getY() * transform.get(1, 0));\n-//                transform.set(1, 1, scale.getY() * transform.get(1, 1));\n-//                transform.set(1, 2, scale.getY() * transform.get(1, 2));\n-//\n-//                transform.set(2, 0, scale.getZ() * transform.get(2, 0));\n-//                transform.set(2, 1, scale.getZ() * transform.get(2, 1));\n-//                transform.set(2, 2, scale.getZ() * transform.get(2, 2));\n+                transform.translationRotateScale(position, rotation, scale);\n             } else {\n                 transform.set(node.getMatrix());\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0Nzg4NA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549347884", "bodyText": "remove commented code\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            //                transform.set(0, 0, scale.getX() * transform.get(0, 0));\n          \n          \n            \n            //                transform.set(0, 1, scale.getX() * transform.get(0, 1));\n          \n          \n            \n            //                transform.set(0, 2, scale.getX() * transform.get(0, 2));\n          \n          \n            \n            //\n          \n          \n            \n            //                transform.set(1, 0, scale.getY() * transform.get(1, 0));\n          \n          \n            \n            //                transform.set(1, 1, scale.getY() * transform.get(1, 1));\n          \n          \n            \n            //                transform.set(1, 2, scale.getY() * transform.get(1, 2));\n          \n          \n            \n            //\n          \n          \n            \n            //                transform.set(2, 0, scale.getZ() * transform.get(2, 0));\n          \n          \n            \n            //                transform.set(2, 1, scale.getZ() * transform.get(2, 1));\n          \n          \n            \n            //                transform.set(2, 2, scale.getZ() * transform.get(2, 2));", "author": "skaldarnar", "createdAt": "2020-12-28T13:27:50Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/GLTFMeshFormat.java", "diffHunk": "@@ -131,19 +131,19 @@ private Matrix4f getMatrix(GLTF gltf, int nodeIndex) {\n                 if (node.getScale() != null) {\n                     scale.set(node.getScale());\n                 }\n-                transform.set(new Matrix4f(rotation, position, 1.0f));\n-\n-                transform.set(0, 0, scale.getX() * transform.get(0, 0));\n-                transform.set(0, 1, scale.getX() * transform.get(0, 1));\n-                transform.set(0, 2, scale.getX() * transform.get(0, 2));\n-\n-                transform.set(1, 0, scale.getY() * transform.get(1, 0));\n-                transform.set(1, 1, scale.getY() * transform.get(1, 1));\n-                transform.set(1, 2, scale.getY() * transform.get(1, 2));\n-\n-                transform.set(2, 0, scale.getZ() * transform.get(2, 0));\n-                transform.set(2, 1, scale.getZ() * transform.get(2, 1));\n-                transform.set(2, 2, scale.getZ() * transform.get(2, 2));\n+                transform.set(new Matrix4f().translationRotateScale(position,rotation, scale));\n+\n+//                transform.set(0, 0, scale.getX() * transform.get(0, 0));\n+//                transform.set(0, 1, scale.getX() * transform.get(0, 1));\n+//                transform.set(0, 2, scale.getX() * transform.get(0, 2));\n+//\n+//                transform.set(1, 0, scale.getY() * transform.get(1, 0));\n+//                transform.set(1, 1, scale.getY() * transform.get(1, 1));\n+//                transform.set(1, 2, scale.getY() * transform.get(1, 2));\n+//\n+//                transform.set(2, 0, scale.getZ() * transform.get(2, 0));\n+//                transform.set(2, 1, scale.getZ() * transform.get(2, 1));\n+//                transform.set(2, 2, scale.getZ() * transform.get(2, 2));", "originalCommit": "22cc7def2404187c1ee27cf795687644023e8ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/GLTFMeshFormat.java b/engine/src/main/java/org/terasology/rendering/gltf/GLTFMeshFormat.java\nindex 93d0ef391..dbe1fa1cc 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/GLTFMeshFormat.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/GLTFMeshFormat.java\n\n@@ -131,19 +131,7 @@ private Matrix4f getMatrix(GLTF gltf, int nodeIndex) {\n                 if (node.getScale() != null) {\n                     scale.set(node.getScale());\n                 }\n-                transform.set(new Matrix4f().translationRotateScale(position,rotation, scale));\n-\n-//                transform.set(0, 0, scale.getX() * transform.get(0, 0));\n-//                transform.set(0, 1, scale.getX() * transform.get(0, 1));\n-//                transform.set(0, 2, scale.getX() * transform.get(0, 2));\n-//\n-//                transform.set(1, 0, scale.getY() * transform.get(1, 0));\n-//                transform.set(1, 1, scale.getY() * transform.get(1, 1));\n-//                transform.set(1, 2, scale.getY() * transform.get(1, 2));\n-//\n-//                transform.set(2, 0, scale.getZ() * transform.get(2, 0));\n-//                transform.set(2, 1, scale.getZ() * transform.get(2, 1));\n-//                transform.set(2, 2, scale.getZ() * transform.get(2, 2));\n+                transform.translationRotateScale(position, rotation, scale);\n             } else {\n                 transform.set(node.getMatrix());\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0ODUyNg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549348526", "bodyText": "I'm not sure whether we should change the deserializers for the old types in place, or phase them out more gracefully. Are they used anywhere else, or just here for the glTF format?", "author": "skaldarnar", "createdAt": "2020-12-28T13:29:47Z", "path": "engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java", "diffHunk": "@@ -65,7 +88,7 @@\n             .registerTypeAdapter(TIntList.class, new TIntListDeserializer())\n             .registerTypeAdapter(TFloatList.class, new TFloatListDeserializer())\n             .registerTypeAdapter(Matrix4f.class, new Matrix4fDeserializer())\n-            .registerTypeAdapter(Quat4f.class, new Quat4fDeserializer())\n+            .registerTypeAdapter(Quaternionf.class, new Quat4fDeserializer())", "originalCommit": "22cc7def2404187c1ee27cf795687644023e8ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java b/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java\nindex 3330ca69f..bf057a5de 100644\n--- a/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java\n+++ b/engine/src/main/java/org/terasology/rendering/gltf/GLTFCommonFormat.java\n\n@@ -88,7 +88,7 @@\n             .registerTypeAdapter(TIntList.class, new TIntListDeserializer())\n             .registerTypeAdapter(TFloatList.class, new TFloatListDeserializer())\n             .registerTypeAdapter(Matrix4f.class, new Matrix4fDeserializer())\n-            .registerTypeAdapter(Quaternionf.class, new Quat4fDeserializer())\n+            .registerTypeAdapter(Quaternionf.class, new QuaternionfDeserializer())\n             .registerTypeAdapter(Vector3f.class, new Vector3fDeserializer())\n             .registerTypeAdapter(GLTFComponentType.class, new GLTFComponentTypeDeserializer())\n             .registerTypeAdapter(GLTFMode.class, new GLTFModeDeserializer())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0OTIxNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549349215", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Quaternionf result = new Quaternionf();\n          \n          \n            \n                    relativeTransform.getNormalizedRotation(result);\n          \n          \n            \n                    return result;\n          \n          \n            \n                    return relativeTransform.getNormalizedRotation(new Quaternionf());", "author": "skaldarnar", "createdAt": "2020-12-28T13:32:16Z", "path": "engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java", "diffHunk": "@@ -92,32 +91,18 @@ public void addChild(Bone child) {\n \n     public Vector3f getLocalPosition() {\n         Vector3f result = new Vector3f();\n-        relativeTransform.transformPoint(result);\n+        relativeTransform.transformPosition(result);\n         return result;\n     }\n \n-    public Quat4f getLocalRotation() {\n-        Vector3f scale = getLocalScale();\n-        Matrix4f descaled = new Matrix4f(relativeTransform);\n-        descaled.m00 /= scale.x;\n-        descaled.m10 /= scale.x;\n-        descaled.m20 /= scale.x;\n-        descaled.m01 /= scale.y;\n-        descaled.m11 /= scale.y;\n-        descaled.m21 /= scale.y;\n-        descaled.m02 /= scale.z;\n-        descaled.m12 /= scale.z;\n-        descaled.m22 /= scale.z;\n-        Quat4f result = new Quat4f(Quat4f.IDENTITY);\n-        result.set(descaled);\n+    public Quaternionf getLocalRotation() {\n+        Quaternionf result = new Quaternionf();\n+        relativeTransform.getNormalizedRotation(result);\n         return result;", "originalCommit": "22cc7def2404187c1ee27cf795687644023e8ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java b/engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java\nindex 8981a0c15..022a3c5e8 100644\n--- a/engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java\n+++ b/engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java\n\n@@ -97,8 +97,7 @@ public Vector3f getLocalPosition() {\n \n     public Quaternionf getLocalRotation() {\n         Quaternionf result = new Quaternionf();\n-        relativeTransform.getNormalizedRotation(result);\n-        return result;\n+        return relativeTransform.getNormalizedRotation(new Quaternionf());\n     }\n \n     public Vector3f getLocalScale() {\n"}}, {"oid": "b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "url": "https://github.com/MovingBlocks/Terasology/commit/b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "message": "fixed formatting", "committedDate": "2020-12-28T17:33:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NTI0OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4289#discussion_r549455248", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Quaternionf result = new Quaternionf();", "author": "skaldarnar", "createdAt": "2020-12-28T19:05:03Z", "path": "engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java", "diffHunk": "@@ -97,8 +97,7 @@ public Vector3f getLocalPosition() {\n \n     public Quaternionf getLocalRotation() {\n         Quaternionf result = new Quaternionf();", "originalCommit": "b40dde28709ea4d92baa7e2f7eb5b9f62c5ff33e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acb995b13a083f3aa63f22b2f876fc9910b0f03e", "chunk": "diff --git a/engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java b/engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java\nindex 022a3c5e8..d1fb4b39f 100644\n--- a/engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java\n+++ b/engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java\n\n@@ -96,7 +96,6 @@ public Vector3f getLocalPosition() {\n     }\n \n     public Quaternionf getLocalRotation() {\n-        Quaternionf result = new Quaternionf();\n         return relativeTransform.getNormalizedRotation(new Quaternionf());\n     }\n \n"}}, {"oid": "acb995b13a083f3aa63f22b2f876fc9910b0f03e", "url": "https://github.com/MovingBlocks/Terasology/commit/acb995b13a083f3aa63f22b2f876fc9910b0f03e", "message": "Update engine/src/main/java/org/terasology/rendering/assets/skeletalmesh/Bone.java\n\nCo-authored-by: Tobias Nett <skaldarnar@googlemail.com>", "committedDate": "2020-12-28T19:06:34Z", "type": "commit"}, {"oid": "cf296d001b2c97d6cc43b98b043c447dd63f8640", "url": "https://github.com/MovingBlocks/Terasology/commit/cf296d001b2c97d6cc43b98b043c447dd63f8640", "message": "Merge branch 'develop' into feature/joml-migration-gltf", "committedDate": "2020-12-30T17:47:15Z", "type": "commit"}]}