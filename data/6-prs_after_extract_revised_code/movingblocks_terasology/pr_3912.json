{"pr_number": 3912, "pr_title": "feat(JOML): Migrate PlayerFactory", "pr_createdAt": "2020-04-27T20:51:36Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/3912", "timeline": [{"oid": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "url": "https://github.com/MovingBlocks/Terasology/commit/3255bb7f7d9cae275553d4f348973cfa77acaab0", "message": "added spiral iterable and player factory", "committedDate": "2020-04-27T20:43:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzMTg3MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416831871", "bodyText": "Please write down why this is deprecated and what to use instead \ud83d\ude09", "author": "skaldarnar", "createdAt": "2020-04-28T18:28:08Z", "path": "engine/src/main/java/org/terasology/logic/location/Location.java", "diffHunk": "@@ -60,10 +63,23 @@ public static void attachChild(EntityRef parent, EntityRef child, Vector3f offse\n         }\n     }\n \n+    /**\n+     * attaches a child entity relative to another entity based off of the relative location\n+     * @param parent\n+     * @param child\n+     * @param offset\n+     * @param relativeRotation\n+     * @deprecated", "originalCommit": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "chunk": "diff --git a/engine/src/main/java/org/terasology/logic/location/Location.java b/engine/src/main/java/org/terasology/logic/location/Location.java\nindex b74542e91..47920cf9a 100644\n--- a/engine/src/main/java/org/terasology/logic/location/Location.java\n+++ b/engine/src/main/java/org/terasology/logic/location/Location.java\n\n@@ -64,22 +67,48 @@ public static void attachChild(EntityRef parent, EntityRef child, Vector3f offse\n     }\n \n     /**\n-     * attaches a child entity relative to another entity based off of the relative location\n-     * @param parent\n-     * @param child\n-     * @param offset\n-     * @param relativeRotation\n-     * @deprecated\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     * method will be replaced with JOML implementation {@link #attachChild(EntityRef, EntityRef, Vector3fc, Quaternionfc)}.\n      */\n     @Deprecated\n     public static void attachChild(EntityRef parent, EntityRef child, Vector3f offset, Quat4f relativeRotation) {\n         attachChild(parent, child, offset, relativeRotation, 1f);\n     }\n \n+    /**\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     **/\n     public static void attachChild(EntityRef parent, EntityRef child, Vector3fc offset, Quaternionfc relativeRotation) {\n         attachChild(parent, child, JomlUtil.from(offset), JomlUtil.from(relativeRotation), 1f);\n     }\n \n+    /**\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     * @param relativeScale    relative scale from parent\n+     **/\n+    public static void attachChild(EntityRef parent, EntityRef child, Vector3fc offset, Quaternionfc relativeRotation, float relativeScale) {\n+        attachChild(parent, child, JomlUtil.from(offset), JomlUtil.from(relativeRotation), relativeScale);\n+    }\n+\n     /**\n      * Attaches an entity to another entity. Both must have location components. The child maintains its previous position\n      * and rotation but follows the parent.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzMjc1MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416832750", "bodyText": "What does \"attach\" mean exactly here? Will there be a connection between theses two entities in the end, or does it just update the child's location component relative to the parent's location component with given offset?", "author": "skaldarnar", "createdAt": "2020-04-28T18:29:26Z", "path": "engine/src/main/java/org/terasology/logic/location/Location.java", "diffHunk": "@@ -60,10 +63,23 @@ public static void attachChild(EntityRef parent, EntityRef child, Vector3f offse\n         }\n     }\n \n+    /**\n+     * attaches a child entity relative to another entity based off of the relative location", "originalCommit": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "chunk": "diff --git a/engine/src/main/java/org/terasology/logic/location/Location.java b/engine/src/main/java/org/terasology/logic/location/Location.java\nindex b74542e91..47920cf9a 100644\n--- a/engine/src/main/java/org/terasology/logic/location/Location.java\n+++ b/engine/src/main/java/org/terasology/logic/location/Location.java\n\n@@ -64,22 +67,48 @@ public static void attachChild(EntityRef parent, EntityRef child, Vector3f offse\n     }\n \n     /**\n-     * attaches a child entity relative to another entity based off of the relative location\n-     * @param parent\n-     * @param child\n-     * @param offset\n-     * @param relativeRotation\n-     * @deprecated\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     * method will be replaced with JOML implementation {@link #attachChild(EntityRef, EntityRef, Vector3fc, Quaternionfc)}.\n      */\n     @Deprecated\n     public static void attachChild(EntityRef parent, EntityRef child, Vector3f offset, Quat4f relativeRotation) {\n         attachChild(parent, child, offset, relativeRotation, 1f);\n     }\n \n+    /**\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     **/\n     public static void attachChild(EntityRef parent, EntityRef child, Vector3fc offset, Quaternionfc relativeRotation) {\n         attachChild(parent, child, JomlUtil.from(offset), JomlUtil.from(relativeRotation), 1f);\n     }\n \n+    /**\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     * @param relativeScale    relative scale from parent\n+     **/\n+    public static void attachChild(EntityRef parent, EntityRef child, Vector3fc offset, Quaternionfc relativeRotation, float relativeScale) {\n+        attachChild(parent, child, JomlUtil.from(offset), JomlUtil.from(relativeRotation), relativeScale);\n+    }\n+\n     /**\n      * Attaches an entity to another entity. Both must have location components. The child maintains its previous position\n      * and rotation but follows the parent.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzMzIyNg==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416833226", "bodyText": "I think this method should also get the Javadoc description as above to help figure out what this method should be used for.", "author": "skaldarnar", "createdAt": "2020-04-28T18:30:15Z", "path": "engine/src/main/java/org/terasology/logic/location/Location.java", "diffHunk": "@@ -60,10 +63,23 @@ public static void attachChild(EntityRef parent, EntityRef child, Vector3f offse\n         }\n     }\n \n+    /**\n+     * attaches a child entity relative to another entity based off of the relative location\n+     * @param parent\n+     * @param child\n+     * @param offset\n+     * @param relativeRotation\n+     * @deprecated\n+     */\n+    @Deprecated\n     public static void attachChild(EntityRef parent, EntityRef child, Vector3f offset, Quat4f relativeRotation) {\n         attachChild(parent, child, offset, relativeRotation, 1f);\n     }\n \n+    public static void attachChild(EntityRef parent, EntityRef child, Vector3fc offset, Quaternionfc relativeRotation) {", "originalCommit": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "chunk": "diff --git a/engine/src/main/java/org/terasology/logic/location/Location.java b/engine/src/main/java/org/terasology/logic/location/Location.java\nindex b74542e91..47920cf9a 100644\n--- a/engine/src/main/java/org/terasology/logic/location/Location.java\n+++ b/engine/src/main/java/org/terasology/logic/location/Location.java\n\n@@ -64,22 +67,48 @@ public static void attachChild(EntityRef parent, EntityRef child, Vector3f offse\n     }\n \n     /**\n-     * attaches a child entity relative to another entity based off of the relative location\n-     * @param parent\n-     * @param child\n-     * @param offset\n-     * @param relativeRotation\n-     * @deprecated\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     * method will be replaced with JOML implementation {@link #attachChild(EntityRef, EntityRef, Vector3fc, Quaternionfc)}.\n      */\n     @Deprecated\n     public static void attachChild(EntityRef parent, EntityRef child, Vector3f offset, Quat4f relativeRotation) {\n         attachChild(parent, child, offset, relativeRotation, 1f);\n     }\n \n+    /**\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     **/\n     public static void attachChild(EntityRef parent, EntityRef child, Vector3fc offset, Quaternionfc relativeRotation) {\n         attachChild(parent, child, JomlUtil.from(offset), JomlUtil.from(relativeRotation), 1f);\n     }\n \n+    /**\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     * @param relativeScale    relative scale from parent\n+     **/\n+    public static void attachChild(EntityRef parent, EntityRef child, Vector3fc offset, Quaternionfc relativeRotation, float relativeScale) {\n+        attachChild(parent, child, JomlUtil.from(offset), JomlUtil.from(relativeRotation), relativeScale);\n+    }\n+\n     /**\n      * Attaches an entity to another entity. Both must have location components. The child maintains its previous position\n      * and rotation but follows the parent.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MTU1MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416851550", "bodyText": "I think the documentation on this can be improved, but that's unrelated to this PR.", "author": "skaldarnar", "createdAt": "2020-04-28T19:01:07Z", "path": "engine/src/main/java/org/terasology/math/SpiralIterable.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * An {@link Iterable} that iterates in\n+ * a square-shapes spiral around the central point (inclusive).\n+ * <br><br>\n+ * The iteration starts in positive x direction.\n+ * <br><br>\n+ * The iterating vector is reused. <b>Do not attempt to store the instance</b> e.g. in a collection.\n+ * @author Martin Steiger\n+ */\n+public class SpiralIterable implements Iterable<Vector2ic>{", "originalCommit": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "chunk": "diff --git a/engine/src/main/java/org/terasology/math/SpiralIterable.java b/engine/src/main/java/org/terasology/math/SpiralIterable.java\nindex 6c422c130..9b1a588cc 100644\n--- a/engine/src/main/java/org/terasology/math/SpiralIterable.java\n+++ b/engine/src/main/java/org/terasology/math/SpiralIterable.java\n\n@@ -28,7 +28,6 @@\n  * The iteration starts in positive x direction.\n  * <br><br>\n  * The iterating vector is reused. <b>Do not attempt to store the instance</b> e.g. in a collection.\n- * @author Martin Steiger\n  */\n public class SpiralIterable implements Iterable<Vector2ic>{\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MTg0Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416851843", "bodyText": "remove the author tag, we don't use them (anymore)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @author Martin Steiger", "author": "skaldarnar", "createdAt": "2020-04-28T19:01:32Z", "path": "engine/src/main/java/org/terasology/math/SpiralIterable.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * An {@link Iterable} that iterates in\n+ * a square-shapes spiral around the central point (inclusive).\n+ * <br><br>\n+ * The iteration starts in positive x direction.\n+ * <br><br>\n+ * The iterating vector is reused. <b>Do not attempt to store the instance</b> e.g. in a collection.\n+ * @author Martin Steiger", "originalCommit": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "chunk": "diff --git a/engine/src/main/java/org/terasology/math/SpiralIterable.java b/engine/src/main/java/org/terasology/math/SpiralIterable.java\nindex 6c422c130..9b1a588cc 100644\n--- a/engine/src/main/java/org/terasology/math/SpiralIterable.java\n+++ b/engine/src/main/java/org/terasology/math/SpiralIterable.java\n\n@@ -28,7 +28,6 @@\n  * The iteration starts in positive x direction.\n  * <br><br>\n  * The iterating vector is reused. <b>Do not attempt to store the instance</b> e.g. in a collection.\n- * @author Martin Steiger\n  */\n public class SpiralIterable implements Iterable<Vector2ic>{\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3OTI2Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416879267", "bodyText": "You only deprecated the convenience method. The method above should be deprecated and replaced as well.", "author": "kBlaszczyk", "createdAt": "2020-04-28T19:49:35Z", "path": "engine/src/main/java/org/terasology/logic/location/Location.java", "diffHunk": "@@ -60,10 +63,23 @@ public static void attachChild(EntityRef parent, EntityRef child, Vector3f offse\n         }\n     }", "originalCommit": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "chunk": "diff --git a/engine/src/main/java/org/terasology/logic/location/Location.java b/engine/src/main/java/org/terasology/logic/location/Location.java\nindex b74542e91..47920cf9a 100644\n--- a/engine/src/main/java/org/terasology/logic/location/Location.java\n+++ b/engine/src/main/java/org/terasology/logic/location/Location.java\n\n@@ -64,22 +67,48 @@ public static void attachChild(EntityRef parent, EntityRef child, Vector3f offse\n     }\n \n     /**\n-     * attaches a child entity relative to another entity based off of the relative location\n-     * @param parent\n-     * @param child\n-     * @param offset\n-     * @param relativeRotation\n-     * @deprecated\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     * method will be replaced with JOML implementation {@link #attachChild(EntityRef, EntityRef, Vector3fc, Quaternionfc)}.\n      */\n     @Deprecated\n     public static void attachChild(EntityRef parent, EntityRef child, Vector3f offset, Quat4f relativeRotation) {\n         attachChild(parent, child, offset, relativeRotation, 1f);\n     }\n \n+    /**\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     **/\n     public static void attachChild(EntityRef parent, EntityRef child, Vector3fc offset, Quaternionfc relativeRotation) {\n         attachChild(parent, child, JomlUtil.from(offset), JomlUtil.from(relativeRotation), 1f);\n     }\n \n+    /**\n+     * Attaches an entity to another entity. Both must have location components.\n+     * This method sets the child's relative offset and rotation to the parent {@link LocationComponent}\n+     *\n+     * @param parent           entity with a {@link LocationComponent}\n+     * @param child            entity with a {@link LocationComponent} attach to the parent\n+     * @param offset           relative position from parent\n+     * @param relativeRotation relative rotation from parent\n+     * @param relativeScale    relative scale from parent\n+     **/\n+    public static void attachChild(EntityRef parent, EntityRef child, Vector3fc offset, Quaternionfc relativeRotation, float relativeScale) {\n+        attachChild(parent, child, JomlUtil.from(offset), JomlUtil.from(relativeRotation), relativeScale);\n+    }\n+\n     /**\n      * Attaches an entity to another entity. Both must have location components. The child maintains its previous position\n      * and rotation but follows the parent.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg4Mjk5OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416882998", "bodyText": "The spawnPos parameter could be a Vector3ic.", "author": "kBlaszczyk", "createdAt": "2020-04-28T19:56:10Z", "path": "engine/src/main/java/org/terasology/logic/players/PlayerFactory.java", "diffHunk": "@@ -152,15 +154,15 @@ private Vector3i findOpenVerticalPosition(Vector3i spawnPos, float height) {\n ", "originalCommit": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "chunk": "diff --git a/engine/src/main/java/org/terasology/logic/players/PlayerFactory.java b/engine/src/main/java/org/terasology/logic/players/PlayerFactory.java\nindex 872b4d78c..fcbda3b6f 100644\n--- a/engine/src/main/java/org/terasology/logic/players/PlayerFactory.java\n+++ b/engine/src/main/java/org/terasology/logic/players/PlayerFactory.java\n\n@@ -148,7 +149,7 @@ private float getHeightOf(ComponentContainer prefab) {\n      * @param height the height of the entity to spawn\n      * @return the topmost solid block <code>null</code> if none was found\n      */\n-    private Vector3i findOpenVerticalPosition(Vector3i spawnPos, float height) {\n+    private Vector3i findOpenVerticalPosition(Vector3ic spawnPos, float height) {\n         int consecutiveAirBlocks = 0;\n         Vector3i newSpawnPos = new Vector3i(spawnPos);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg4NDMxMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416884311", "bodyText": "I'd prefer manipulating single vector components using:\nnewSpawnPos.y -= consecutiveAirBlocks\nI guess that's a matter of taste, just take it as something to consider.", "author": "kBlaszczyk", "createdAt": "2020-04-28T19:58:23Z", "path": "engine/src/main/java/org/terasology/logic/players/PlayerFactory.java", "diffHunk": "@@ -152,15 +154,15 @@ private Vector3i findOpenVerticalPosition(Vector3i spawnPos, float height) {\n \n         // TODO: also start looking downwards if initial spawn pos is in the air\n         for (int i = 1; i < 20; i++) {\n-            if (worldProvider.isBlockRelevant(newSpawnPos)) {\n-                if (worldProvider.getBlock(newSpawnPos).isPenetrable()) {\n+            if (worldProvider.isBlockRelevant(JomlUtil.from(newSpawnPos))) {\n+                if (worldProvider.getBlock(JomlUtil.from(newSpawnPos)).isPenetrable()) {\n                     consecutiveAirBlocks++;\n                 } else {\n                     consecutiveAirBlocks = 0;\n                 }\n \n                 if (consecutiveAirBlocks >= height) {\n-                    newSpawnPos.subY(consecutiveAirBlocks);\n+                    newSpawnPos.sub(0,consecutiveAirBlocks,0);", "originalCommit": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "chunk": "diff --git a/engine/src/main/java/org/terasology/logic/players/PlayerFactory.java b/engine/src/main/java/org/terasology/logic/players/PlayerFactory.java\nindex 872b4d78c..fcbda3b6f 100644\n--- a/engine/src/main/java/org/terasology/logic/players/PlayerFactory.java\n+++ b/engine/src/main/java/org/terasology/logic/players/PlayerFactory.java\n\n@@ -148,7 +149,7 @@ private float getHeightOf(ComponentContainer prefab) {\n      * @param height the height of the entity to spawn\n      * @return the topmost solid block <code>null</code> if none was found\n      */\n-    private Vector3i findOpenVerticalPosition(Vector3i spawnPos, float height) {\n+    private Vector3i findOpenVerticalPosition(Vector3ic spawnPos, float height) {\n         int consecutiveAirBlocks = 0;\n         Vector3i newSpawnPos = new Vector3i(spawnPos);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg5MzE4Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416893183", "bodyText": "I'm not sure about this one...\nThe client iterates over read only vectors. So he probably doesn't expect their value to change. Each next() call however, changes the value of the previously returned vector, since it's always the same instance being returned.\nTherefore I think it would be cleaner to return new instance every time. (see next comment)", "author": "kBlaszczyk", "createdAt": "2020-04-28T20:14:23Z", "path": "engine/src/main/java/org/terasology/math/SpiralIterable.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * An {@link Iterable} that iterates in\n+ * a square-shapes spiral around the central point (inclusive).\n+ * <br><br>\n+ * The iteration starts in positive x direction.\n+ * <br><br>\n+ * The iterating vector is reused. <b>Do not attempt to store the instance</b> e.g. in a collection.\n+ * @author Martin Steiger\n+ */\n+public class SpiralIterable implements Iterable<Vector2ic>{\n+\n+    /**\n+     * (MAX_SIDELEN * 2 + 1) ^2 must be < Integer.MAX_VALUE\n+     */\n+    private static final int MAX_RADIUS = 23169;\n+\n+    private final Vector2ic center;\n+    private final boolean clockwise;\n+    private final int maxArea;\n+    private final int scale;\n+\n+    /**\n+     * @param center the spiral center\n+     * @param clockwise true for clockwise iteration, false for counter-clockwise\n+     * @param scale the scale of the iteration (positive integer)\n+     * @param maxRadius the maximum radius of the spiral [0..23169] (inclusive)\n+     */\n+    private SpiralIterable(Vector2ic center, boolean clockwise, int scale, int maxRadius) {\n+        Preconditions.checkArgument(scale > 0, \"scale must be > 0\");\n+        Preconditions.checkArgument(maxRadius >= 0, \"maxRadius must be >= 0\");\n+        Preconditions.checkArgument(maxRadius <= MAX_RADIUS, \"maxRadius must be <= \" + MAX_RADIUS);\n+\n+        int sideLen = maxRadius * 2 + 1;\n+\n+        this.scale = scale;\n+        this.center = center;\n+        this.maxArea = sideLen * sideLen;\n+        this.clockwise = clockwise;\n+    }\n+\n+    /**\n+     * Iterates in clock-wise orientation around the given point.\n+     * The point will be the first iterated point.\n+     * @param center the spiral center\n+     */\n+    public static SpiralIterable.Builder clockwise(Vector2ic center) {\n+        return new SpiralIterable.Builder(center, true);\n+    }\n+\n+    /**\n+     * Iterates in clock-wise orientation around the given point.\n+     * The point will be the first iterated point.\n+     * @param center the spiral center\n+     */\n+    public static SpiralIterable.Builder counterClockwise(Vector2ic center) {\n+        return new SpiralIterable.Builder(center, false);\n+    }\n+\n+    @Override\n+    public Iterator<Vector2ic> iterator() {\n+\n+        return new Iterator<Vector2ic>() {\n+            private int radius = 1;\n+            private int leg;\n+            private int x = -1;\n+            private int y;\n+            private int index;\n+\n+            private Vector2i pos = new Vector2i();", "originalCommit": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkxMTcwMA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416911700", "bodyText": "I think the point is to reduce GC by avoiding creating a new instance. @skaldarnar how much does this matter with regards to performance and would it be better to make a new instance?", "author": "pollend", "createdAt": "2020-04-28T20:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg5MzE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzk2Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416927962", "bodyText": "I just realized, that it even points this out in the javadoc: The iterating vector is reused.\nSo it was definitely done consciously. The GC argument is valid (even though we are having tons of unnecessary vector allocations at runtime anyway), so I guess I can live with that.", "author": "kBlaszczyk", "createdAt": "2020-04-28T21:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg5MzE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "chunk": "diff --git a/engine/src/main/java/org/terasology/math/SpiralIterable.java b/engine/src/main/java/org/terasology/math/SpiralIterable.java\nindex 6c422c130..9b1a588cc 100644\n--- a/engine/src/main/java/org/terasology/math/SpiralIterable.java\n+++ b/engine/src/main/java/org/terasology/math/SpiralIterable.java\n\n@@ -28,7 +28,6 @@\n  * The iteration starts in positive x direction.\n  * <br><br>\n  * The iterating vector is reused. <b>Do not attempt to store the instance</b> e.g. in a collection.\n- * @author Martin Steiger\n  */\n public class SpiralIterable implements Iterable<Vector2ic>{\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg5MzY5Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/3912#discussion_r416893692", "bodyText": "return new Vector2i(finalX, finalY)", "author": "kBlaszczyk", "createdAt": "2020-04-28T20:15:18Z", "path": "engine/src/main/java/org/terasology/math/SpiralIterable.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * An {@link Iterable} that iterates in\n+ * a square-shapes spiral around the central point (inclusive).\n+ * <br><br>\n+ * The iteration starts in positive x direction.\n+ * <br><br>\n+ * The iterating vector is reused. <b>Do not attempt to store the instance</b> e.g. in a collection.\n+ * @author Martin Steiger\n+ */\n+public class SpiralIterable implements Iterable<Vector2ic>{\n+\n+    /**\n+     * (MAX_SIDELEN * 2 + 1) ^2 must be < Integer.MAX_VALUE\n+     */\n+    private static final int MAX_RADIUS = 23169;\n+\n+    private final Vector2ic center;\n+    private final boolean clockwise;\n+    private final int maxArea;\n+    private final int scale;\n+\n+    /**\n+     * @param center the spiral center\n+     * @param clockwise true for clockwise iteration, false for counter-clockwise\n+     * @param scale the scale of the iteration (positive integer)\n+     * @param maxRadius the maximum radius of the spiral [0..23169] (inclusive)\n+     */\n+    private SpiralIterable(Vector2ic center, boolean clockwise, int scale, int maxRadius) {\n+        Preconditions.checkArgument(scale > 0, \"scale must be > 0\");\n+        Preconditions.checkArgument(maxRadius >= 0, \"maxRadius must be >= 0\");\n+        Preconditions.checkArgument(maxRadius <= MAX_RADIUS, \"maxRadius must be <= \" + MAX_RADIUS);\n+\n+        int sideLen = maxRadius * 2 + 1;\n+\n+        this.scale = scale;\n+        this.center = center;\n+        this.maxArea = sideLen * sideLen;\n+        this.clockwise = clockwise;\n+    }\n+\n+    /**\n+     * Iterates in clock-wise orientation around the given point.\n+     * The point will be the first iterated point.\n+     * @param center the spiral center\n+     */\n+    public static SpiralIterable.Builder clockwise(Vector2ic center) {\n+        return new SpiralIterable.Builder(center, true);\n+    }\n+\n+    /**\n+     * Iterates in clock-wise orientation around the given point.\n+     * The point will be the first iterated point.\n+     * @param center the spiral center\n+     */\n+    public static SpiralIterable.Builder counterClockwise(Vector2ic center) {\n+        return new SpiralIterable.Builder(center, false);\n+    }\n+\n+    @Override\n+    public Iterator<Vector2ic> iterator() {\n+\n+        return new Iterator<Vector2ic>() {\n+            private int radius = 1;\n+            private int leg;\n+            private int x = -1;\n+            private int y;\n+            private int index;\n+\n+            private Vector2i pos = new Vector2i();\n+\n+            @Override\n+            public Vector2ic next() {\n+                if (index >= maxArea) {\n+                    throw new NoSuchElementException(\"radius has been reached\");\n+                }\n+\n+                switch (leg) {\n+                    case 0:\n+                        ++x;\n+                        if (x == radius) {\n+                            ++leg;\n+                        }\n+                        break;\n+                    case 1:\n+                        ++y;\n+                        if (y == radius) {\n+                            ++leg;\n+                        }\n+                        break;\n+                    case 2:\n+                        --x;\n+                        if (-x == radius) {\n+                            ++leg;\n+                        }\n+                        break;\n+                    case 3:\n+                        --y;\n+                        if (-y == radius) {\n+                            leg = 0;\n+                            ++radius;\n+                        }\n+                        break;\n+                }\n+\n+                index++;\n+                int finalX = center.x() + x * scale;\n+                int finalY = center.y() + (clockwise ? y : -y) * scale;\n+                pos.set(finalX, finalY);\n+                return pos;", "originalCommit": "3255bb7f7d9cae275553d4f348973cfa77acaab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "chunk": "diff --git a/engine/src/main/java/org/terasology/math/SpiralIterable.java b/engine/src/main/java/org/terasology/math/SpiralIterable.java\nindex 6c422c130..9b1a588cc 100644\n--- a/engine/src/main/java/org/terasology/math/SpiralIterable.java\n+++ b/engine/src/main/java/org/terasology/math/SpiralIterable.java\n\n@@ -28,7 +28,6 @@\n  * The iteration starts in positive x direction.\n  * <br><br>\n  * The iterating vector is reused. <b>Do not attempt to store the instance</b> e.g. in a collection.\n- * @author Martin Steiger\n  */\n public class SpiralIterable implements Iterable<Vector2ic>{\n \n"}}, {"oid": "65de4f24ee57c56fb5db7353ce81d634205fe90a", "url": "https://github.com/MovingBlocks/Terasology/commit/65de4f24ee57c56fb5db7353ce81d634205fe90a", "message": "cleaned up javadocs and minor tweaks to code", "committedDate": "2020-04-29T05:16:23Z", "type": "commit"}]}