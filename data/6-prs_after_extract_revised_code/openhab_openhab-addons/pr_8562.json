{"pr_number": 8562, "pr_title": "[warmup] Initial contribution", "pr_createdAt": "2020-09-23T20:21:52Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8562", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDM2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499254369", "bodyText": "Primitive types should be used where possible. Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Boolean validateSession() throws MyWarmupApiException {\n          \n          \n            \n                private boolean validateSession() throws MyWarmupApiException {", "author": "fwolter", "createdAt": "2020-10-04T14:47:46Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.api;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.warmup.internal.WarmupBindingConstants;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupConfigurationDTO;\n+import org.openhab.binding.warmup.internal.model.auth.AuthRequestDTO;\n+import org.openhab.binding.warmup.internal.model.auth.AuthResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link MyWarmupApi} class contains code specific to calling the My Warmup API.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyWarmupApi {\n+\n+    private static final Gson GSON = new Gson();\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyWarmupApi.class);\n+    private final HttpClient httpClient;\n+\n+    private MyWarmupConfigurationDTO configuration;\n+    private @Nullable String authToken;\n+    private int failCount = 0;\n+\n+    /**\n+     * Construct the API client\n+     *\n+     * @param httpClient HttpClient to make HTTP Calls\n+     * @param configuration Thing configuration which contains API credentials\n+     */\n+    public MyWarmupApi(final HttpClient httpClient, MyWarmupConfigurationDTO configuration) {\n+        this.httpClient = httpClient;\n+        this.configuration = configuration;\n+    }\n+\n+    /**\n+     * Update the configuration, trigger a refresh of the access token\n+     *\n+     * @param configuration contains username and password\n+     */\n+    public void setConfiguration(MyWarmupConfigurationDTO configuration) {\n+        authToken = null;\n+        this.configuration = configuration;\n+    }\n+\n+    private Boolean validateSession() throws MyWarmupApiException {", "originalCommit": "7163bf7c829d89466ced72169007cc567168c81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82e29fd9167300142d0007787bf02242b4d90b0", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java\nindex 26ee6e98e9..21dfd94ca6 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java\n\n@@ -51,7 +51,6 @@ public class MyWarmupApi {\n \n     private MyWarmupConfigurationDTO configuration;\n     private @Nullable String authToken;\n-    private int failCount = 0;\n \n     /**\n      * Construct the API client\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDYwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499254602", "bodyText": "It's good practice to log the exception where it is cought to avoid redundant logging. Same for below.", "author": "fwolter", "createdAt": "2020-10-04T14:49:43Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.api;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.warmup.internal.WarmupBindingConstants;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupConfigurationDTO;\n+import org.openhab.binding.warmup.internal.model.auth.AuthRequestDTO;\n+import org.openhab.binding.warmup.internal.model.auth.AuthResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link MyWarmupApi} class contains code specific to calling the My Warmup API.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyWarmupApi {\n+\n+    private static final Gson GSON = new Gson();\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyWarmupApi.class);\n+    private final HttpClient httpClient;\n+\n+    private MyWarmupConfigurationDTO configuration;\n+    private @Nullable String authToken;\n+    private int failCount = 0;\n+\n+    /**\n+     * Construct the API client\n+     *\n+     * @param httpClient HttpClient to make HTTP Calls\n+     * @param configuration Thing configuration which contains API credentials\n+     */\n+    public MyWarmupApi(final HttpClient httpClient, MyWarmupConfigurationDTO configuration) {\n+        this.httpClient = httpClient;\n+        this.configuration = configuration;\n+    }\n+\n+    /**\n+     * Update the configuration, trigger a refresh of the access token\n+     *\n+     * @param configuration contains username and password\n+     */\n+    public void setConfiguration(MyWarmupConfigurationDTO configuration) {\n+        authToken = null;\n+        this.configuration = configuration;\n+    }\n+\n+    private Boolean validateSession() throws MyWarmupApiException {\n+        if (authToken == null) {\n+            return authenticate();\n+        }\n+        return true;\n+    }\n+\n+    private Boolean authenticate() throws MyWarmupApiException {\n+        try {\n+            String body = GSON.toJson(new AuthRequestDTO(configuration.username, configuration.password,\n+                    WarmupBindingConstants.AUTH_METHOD, WarmupBindingConstants.AUTH_APP_ID));\n+\n+            ContentResponse response = callWarmup(WarmupBindingConstants.APP_ENDPOINT, body, false);\n+\n+            AuthResponseDTO ar = GSON.fromJson(response.getContentAsString(), AuthResponseDTO.class);\n+\n+            if (ar.getStatus().getResult().equals(\"success\")) {\n+                authToken = ar.getResponse().getToken();\n+                failCount = 0;\n+                return true;\n+            } else {\n+                logger.debug(\"Authentication failure {}\", response.getContentAsString());\n+                throw new MyWarmupApiException(\"Authentication Failed\");", "originalCommit": "7163bf7c829d89466ced72169007cc567168c81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82e29fd9167300142d0007787bf02242b4d90b0", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java\nindex 26ee6e98e9..21dfd94ca6 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java\n\n@@ -51,7 +51,6 @@ public class MyWarmupApi {\n \n     private MyWarmupConfigurationDTO configuration;\n     private @Nullable String authToken;\n-    private int failCount = 0;\n \n     /**\n      * Construct the API client\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTM4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499255380", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            roomProperties.put(\"serialNumber\", deviceSN);\n          \n          \n            \n                            roomProperties.put(Thing.PROPERTY_SERIAL_NUMBER, deviceSN);", "author": "fwolter", "createdAt": "2020-10-04T14:57:36Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.discovery;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupAccountHandler;\n+import org.openhab.binding.warmup.internal.handler.WarmupRefreshListener;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+\n+/**\n+ * The {@link WarmupDiscoveryService} is used to discover devices that are connected to a My Warmup account.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService, WarmupRefreshListener {\n+\n+    private @Nullable MyWarmupAccountHandler bridgeHandler;\n+    private @Nullable ThingUID bridgeUID;\n+\n+    public WarmupDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, 5, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        final MyWarmupAccountHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            removeOlderResults(getTimestampOfLastScan());\n+            handler.setDiscoveryService(this);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate discovery list with things\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain != null) {\n+            HashSet<ThingUID> discoveredThings = new HashSet<ThingUID>();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    discoverRoom(location, room, discoveredThings);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void discoverRoom(LocationDTO location, RoomDTO room, HashSet<ThingUID> discoveredThings) {\n+        if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()) {\n+            final String deviceSN = room.getThermostat4ies().get(0).getDeviceSN();\n+            ThingUID localBridgeUID = this.bridgeUID;\n+            if (localBridgeUID != null && deviceSN != null) {\n+                final Map<String, Object> roomProperties = new HashMap<>();\n+                roomProperties.put(\"serialNumber\", deviceSN);", "originalCommit": "7163bf7c829d89466ced72169007cc567168c81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82e29fd9167300142d0007787bf02242b4d90b0", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\nindex 2ee58a35d5..49ae6d157d 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\n\n@@ -28,6 +28,7 @@ import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n import org.openhab.core.config.discovery.AbstractDiscoveryService;\n import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Thing;\n import org.openhab.core.thing.ThingUID;\n import org.openhab.core.thing.binding.ThingHandler;\n import org.openhab.core.thing.binding.ThingHandlerService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTQwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499255402", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withRepresentationProperty(\"serialNumber\").build());\n          \n          \n            \n                                    .withRepresentationProperty(Thing.PROPERTY_SERIAL_NUMBER,).build());", "author": "fwolter", "createdAt": "2020-10-04T14:57:52Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.discovery;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupAccountHandler;\n+import org.openhab.binding.warmup.internal.handler.WarmupRefreshListener;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+\n+/**\n+ * The {@link WarmupDiscoveryService} is used to discover devices that are connected to a My Warmup account.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService, WarmupRefreshListener {\n+\n+    private @Nullable MyWarmupAccountHandler bridgeHandler;\n+    private @Nullable ThingUID bridgeUID;\n+\n+    public WarmupDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, 5, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        final MyWarmupAccountHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            removeOlderResults(getTimestampOfLastScan());\n+            handler.setDiscoveryService(this);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate discovery list with things\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain != null) {\n+            HashSet<ThingUID> discoveredThings = new HashSet<ThingUID>();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    discoverRoom(location, room, discoveredThings);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void discoverRoom(LocationDTO location, RoomDTO room, HashSet<ThingUID> discoveredThings) {\n+        if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()) {\n+            final String deviceSN = room.getThermostat4ies().get(0).getDeviceSN();\n+            ThingUID localBridgeUID = this.bridgeUID;\n+            if (localBridgeUID != null && deviceSN != null) {\n+                final Map<String, Object> roomProperties = new HashMap<>();\n+                roomProperties.put(\"serialNumber\", deviceSN);\n+                roomProperties.put(\"Serial Number\", deviceSN);\n+\n+                roomProperties.put(\"Id\", room.getId());\n+                roomProperties.put(\"Name\", room.getName());\n+                roomProperties.put(\"Location Id\", location.getId());\n+                roomProperties.put(\"Location\", location.getName());\n+\n+                ThingUID roomThingUID = new ThingUID(THING_TYPE_ROOM, localBridgeUID, deviceSN);\n+                thingDiscovered(DiscoveryResultBuilder.create(roomThingUID).withBridge(localBridgeUID)\n+                        .withProperties(roomProperties).withLabel(location.getName() + \" - \" + room.getName())\n+                        .withRepresentationProperty(\"serialNumber\").build());", "originalCommit": "7163bf7c829d89466ced72169007cc567168c81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82e29fd9167300142d0007787bf02242b4d90b0", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\nindex 2ee58a35d5..49ae6d157d 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\n\n@@ -28,6 +28,7 @@ import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n import org.openhab.core.config.discovery.AbstractDiscoveryService;\n import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Thing;\n import org.openhab.core.thing.ThingUID;\n import org.openhab.core.thing.binding.ThingHandler;\n import org.openhab.core.thing.binding.ThingHandlerService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTQ2NA==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499255464", "bodyText": "Is there a reason for adding the serial number twice with different property names?", "author": "fwolter", "createdAt": "2020-10-04T14:58:28Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.discovery;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupAccountHandler;\n+import org.openhab.binding.warmup.internal.handler.WarmupRefreshListener;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+\n+/**\n+ * The {@link WarmupDiscoveryService} is used to discover devices that are connected to a My Warmup account.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService, WarmupRefreshListener {\n+\n+    private @Nullable MyWarmupAccountHandler bridgeHandler;\n+    private @Nullable ThingUID bridgeUID;\n+\n+    public WarmupDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, 5, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        final MyWarmupAccountHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            removeOlderResults(getTimestampOfLastScan());\n+            handler.setDiscoveryService(this);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate discovery list with things\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain != null) {\n+            HashSet<ThingUID> discoveredThings = new HashSet<ThingUID>();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    discoverRoom(location, room, discoveredThings);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void discoverRoom(LocationDTO location, RoomDTO room, HashSet<ThingUID> discoveredThings) {\n+        if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()) {\n+            final String deviceSN = room.getThermostat4ies().get(0).getDeviceSN();\n+            ThingUID localBridgeUID = this.bridgeUID;\n+            if (localBridgeUID != null && deviceSN != null) {\n+                final Map<String, Object> roomProperties = new HashMap<>();\n+                roomProperties.put(\"serialNumber\", deviceSN);\n+                roomProperties.put(\"Serial Number\", deviceSN);", "originalCommit": "7163bf7c829d89466ced72169007cc567168c81f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3NzMyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r526477327", "bodyText": "From what I can see in paperUI in 2.5.x and the new OH3 UI, when an item is discovered, the only information shown in the UI is the label and representation property. In this class I'm just setting the same properties that I also set for a concrete room thing, so as you note later there's some duplication. But it seems to me I shouldn't bother to set any properties in discovery apart from the representation property?", "author": "jamesmelville", "createdAt": "2020-11-18T22:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMjY2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r526632662", "bodyText": "I don't really understand the necessity for adding the serial number twice with different notations. Is it supposed to be a representation property and a human readable version?", "author": "fwolter", "createdAt": "2020-11-19T06:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MjExOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r533652119", "bodyText": "exactly that. representation properties aren't displayed in paper UI after addition of a thing (although typically will be included in the thing id), so I thought it'd still be useful to display as a property.", "author": "jamesmelville", "createdAt": "2020-12-01T19:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MzE2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r534353165", "bodyText": "OH3 shows also the property used as representation property in the UI.", "author": "fwolter", "createdAt": "2020-12-02T17:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQyNjE4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r534426181", "bodyText": "Agreed - the idea was for convenience to have it on this page in paper UI for convenience\n\nbut I can see it's shown in this page twice so I'll remove it as I'm now only targeting v3", "author": "jamesmelville", "createdAt": "2020-12-02T19:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "d82e29fd9167300142d0007787bf02242b4d90b0", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\nindex 2ee58a35d5..49ae6d157d 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\n\n@@ -28,6 +28,7 @@ import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n import org.openhab.core.config.discovery.AbstractDiscoveryService;\n import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Thing;\n import org.openhab.core.thing.ThingUID;\n import org.openhab.core.thing.binding.ThingHandler;\n import org.openhab.core.thing.binding.ThingHandlerService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NjI2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499256260", "bodyText": "The configuration shouldn't be a DTO without NonNullByDefault annotation, as the fields can be null if the user uses textual configuration and forgets to specify a parameter.", "author": "fwolter", "createdAt": "2020-10-04T15:05:22Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupConfigurationDTO.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+/**\n+ * The {@link MyWarmupConfigurationDTO} class contains fields mapping thing configuration parameters for the MyWarmup.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+public class MyWarmupConfigurationDTO {", "originalCommit": "7163bf7c829d89466ced72169007cc567168c81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82e29fd9167300142d0007787bf02242b4d90b0", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupConfigurationDTO.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupConfigurationDTO.java\nindex 8088fcd10c..1826828576 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupConfigurationDTO.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupConfigurationDTO.java\n\n@@ -12,14 +12,17 @@\n  */\n package org.openhab.binding.warmup.internal.handler;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * The {@link MyWarmupConfigurationDTO} class contains fields mapping thing configuration parameters for the MyWarmup.\n  *\n  * @author James Melville - Initial contribution\n  */\n+@NonNullByDefault\n public class MyWarmupConfigurationDTO {\n \n-    public String username;\n-    public String password;\n-    public int refreshIntervalSec;\n+    public String username = \"\";\n+    public String password = \"\";\n+    public int refreshInterval = 300;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NjMwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499256301", "bodyText": "See above.", "author": "fwolter", "createdAt": "2020-10-04T15:05:47Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomConfigurationDTO.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+/**\n+ * The {@link RoomConfigurationDTO} class contains fields mapping thing configuration parameters for the Warmup Room.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+public class RoomConfigurationDTO {", "originalCommit": "7163bf7c829d89466ced72169007cc567168c81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82e29fd9167300142d0007787bf02242b4d90b0", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomConfigurationDTO.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomConfigurationDTO.java\nindex 60e3a9ee75..c80f592a9d 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomConfigurationDTO.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomConfigurationDTO.java\n\n@@ -12,21 +12,24 @@\n  */\n package org.openhab.binding.warmup.internal.handler;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * The {@link RoomConfigurationDTO} class contains fields mapping thing configuration parameters for the Warmup Room.\n  *\n  * @author James Melville - Initial contribution\n  */\n+@NonNullByDefault\n public class RoomConfigurationDTO {\n \n-    private String serialNumber;\n-    private int overrideDurationMin;\n+    private String serialNumber = \"\";\n+    private int overrideDuration = 60;\n \n     public String getSerialNumber() {\n         return serialNumber;\n     }\n \n-    public int getOverrideDurationMin() {\n-        return overrideDurationMin;\n+    public int getOverrideDuration() {\n+        return overrideDuration;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NjQ3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499256477", "bodyText": "As you use these properties in the discovery and below too, you could make the names constants.", "author": "fwolter", "createdAt": "2020-10-04T15:07:46Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RoomHandler extends WarmupThingHandler implements WarmupRefreshListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RoomHandler.class);\n+    private @Nullable RoomConfigurationDTO config;\n+\n+    public RoomHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(RoomConfigurationDTO.class);\n+        super.refreshFromServer();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+        if (CHANNEL_TARGET_TEMPERATURE.equals(channelUID.getId()) && command instanceof QuantityType<?>) {\n+            setOverride((QuantityType<?>) command);\n+        }\n+        if (CHANNEL_FROST_PROTECTION_MODE.equals(channelUID.getId()) && command instanceof OnOffType) {\n+            toggleFrostProtectionMode((OnOffType) command);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate room properties, status and state\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No data from bridge\");\n+        } else if (config != null) {\n+            final String serialNumber = config.getSerialNumber();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()\n+                            && room.getThermostat4ies().get(0).getDeviceSN().equals(serialNumber)) {\n+                        if (room.getThermostat4ies().get(0).getLastPoll() > 10) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Thermostat has not polled for 10 minutes\");\n+                        } else {\n+                            updateStatus(ThingStatus.ONLINE);\n+\n+                            updateProperty(\"Id\", room.getId());\n+                            updateProperty(\"Serial Number\", serialNumber);\n+                            updateProperty(\"Name\", room.getName());\n+                            updateProperty(\"Location Id\", location.getId());\n+                            updateProperty(\"Location\", location.getName());", "originalCommit": "7163bf7c829d89466ced72169007cc567168c81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82e29fd9167300142d0007787bf02242b4d90b0", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\nindex 95b3678143..f26513f29d 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\n\n@@ -50,7 +50,11 @@ public class RoomHandler extends WarmupThingHandler implements WarmupRefreshList\n     public void initialize() {\n         super.initialize();\n         config = getConfigAs(RoomConfigurationDTO.class);\n-        super.refreshFromServer();\n+        if (config.getSerialNumber().length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial Number not configured\");\n+        } else {\n+            super.refreshFromServer();\n+        }\n     }\n \n     @Override\n"}}, {"oid": "d82e29fd9167300142d0007787bf02242b4d90b0", "url": "https://github.com/openhab/openhab-addons/commit/d82e29fd9167300142d0007787bf02242b4d90b0", "message": "Updates from review comments\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2020-12-01T20:01:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MTE5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r535881198", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\n          \n          \n            \n                        .unmodifiableSet(new HashSet<>(Arrays.asList(THING_TYPE_BRIDGE, THING_TYPE_ROOM)));\n          \n          \n            \n                public static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections\n          \n          \n            \n                        .unmodifiableSet(new HashSet<>(Arrays.asList(THING_TYPE_ROOM)));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_BRIDGE, THING_TYPE_ROOM);\n          \n          \n            \n                public static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(THING_TYPE_ROOM);", "author": "fwolter", "createdAt": "2020-12-04T07:07:48Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link WarmupBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupBindingConstants {\n+\n+    private static final String BINDING_ID = \"warmup\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"my-warmup\");\n+    public static final ThingTypeUID THING_TYPE_ROOM = new ThingTypeUID(BINDING_ID, \"room\");\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\n+            .unmodifiableSet(new HashSet<>(Arrays.asList(THING_TYPE_BRIDGE, THING_TYPE_ROOM)));\n+    public static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections\n+            .unmodifiableSet(new HashSet<>(Arrays.asList(THING_TYPE_ROOM)));", "originalCommit": "0dfe710e9a2b26a45ef4a4e767238175c8b6c2ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87161847448925cb3b7a08d692400e1436afaaad", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java\nindex d41a3d78cd..e77e4c2a11 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java\n\n@@ -52,12 +52,6 @@ public class WarmupBindingConstants {\n \n     public static final String FROST_PROTECTION_MODE = \"anti_frost\";\n \n-    // Property Labels\n-    public static final String PROPERTY_ROOM_ID = \"Id\";\n-    public static final String PROPERTY_ROOM_NAME = \"Name\";\n-    public static final String PROPERTY_LOCATION_ID = \"Location Id\";\n-    public static final String PROPERTY_LOCATION_NAME = \"Location\";\n-\n     // Web Service Endpoints\n     public static final String APP_ENDPOINT = \"https://api.warmup.com/apps/app/v1\";\n     public static final String QUERY_ENDPOINT = \"https://apil.warmup.com/graphql\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjExNA==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r535882114", "bodyText": "Can these be removed?", "author": "fwolter", "createdAt": "2020-12-04T07:10:05Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.discovery;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupAccountHandler;\n+import org.openhab.binding.warmup.internal.handler.WarmupRefreshListener;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+\n+/**\n+ * The {@link WarmupDiscoveryService} is used to discover devices that are connected to a My Warmup account.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService, WarmupRefreshListener {\n+\n+    private @Nullable MyWarmupAccountHandler bridgeHandler;\n+    private @Nullable ThingUID bridgeUID;\n+\n+    public WarmupDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, 5, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }", "originalCommit": "0dfe710e9a2b26a45ef4a4e767238175c8b6c2ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNDUwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r536424501", "bodyText": "I copied this pattern from this binding https://github.com/openhab/openhab-addons/blob/main/bundles/org.openhab.binding.draytonwiser/src/main/java/org/openhab/binding/draytonwiser/internal/discovery/DraytonWiserDiscoveryService.java, and I think this part of the code was rewritten by @Hilbrand (who also suggested previous changes to how I'd written the discovery service in #7998). I have to admit I'm not 100% up to speed with these services, so a bit of this was trial and error on my part.\nIt looks like I can remove the activate() method and the discovery still works but not the deactivate() method, which gives the compilation error The inherited method AbstractDiscoveryService.deactivate() cannot hide the public abstract method in ThingHandlerService, so I think I'm making the code compile (deactivate() in AbstractDiscoveryService is protected, but public in the ThingHandlerService), but because background discovery isn't enabled, the method might as well just be empty (and super.activate(null) wouldn't be doing anything either). Does this sound right?", "author": "jamesmelville", "createdAt": "2020-12-04T22:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzExNTcwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r537115701", "bodyText": "That's fine.", "author": "fwolter", "createdAt": "2020-12-06T20:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjExNA=="}], "type": "inlineReview", "revised_code": {"commit": "87161847448925cb3b7a08d692400e1436afaaad", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\nindex bac1d899ee..3fb98ea2b9 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java\n\n@@ -21,17 +21,12 @@ import java.util.Map;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.binding.warmup.internal.handler.MyWarmupAccountHandler;\n-import org.openhab.binding.warmup.internal.handler.WarmupRefreshListener;\n import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n import org.openhab.core.config.discovery.AbstractDiscoveryService;\n import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n-import org.openhab.core.config.discovery.DiscoveryService;\n-import org.openhab.core.thing.Thing;\n import org.openhab.core.thing.ThingUID;\n-import org.openhab.core.thing.binding.ThingHandler;\n-import org.openhab.core.thing.binding.ThingHandlerService;\n \n /**\n  * The {@link WarmupDiscoveryService} is used to discover devices that are connected to a My Warmup account.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4NDEwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r535884107", "bodyText": "It seems a bit unreasonable to log the stack trace when the network fails. Same for below.", "author": "fwolter", "createdAt": "2020-12-04T07:14:58Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RoomHandler extends WarmupThingHandler implements WarmupRefreshListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RoomHandler.class);\n+    private @Nullable RoomConfigurationDTO config;\n+\n+    public RoomHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(RoomConfigurationDTO.class);\n+        if (config.getSerialNumber().length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial Number not configured\");\n+        } else {\n+            super.refreshFromServer();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+        if (CHANNEL_TARGET_TEMPERATURE.equals(channelUID.getId()) && command instanceof QuantityType<?>) {\n+            setOverride((QuantityType<?>) command);\n+        }\n+        if (CHANNEL_FROST_PROTECTION_MODE.equals(channelUID.getId()) && command instanceof OnOffType) {\n+            toggleFrostProtectionMode((OnOffType) command);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate room properties, status and state\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No data from bridge\");\n+        } else if (config != null) {\n+            final String serialNumber = config.getSerialNumber();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()\n+                            && room.getThermostat4ies().get(0).getDeviceSN().equals(serialNumber)) {\n+                        if (room.getThermostat4ies().get(0).getLastPoll() > 10) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Thermostat has not polled for 10 minutes\");\n+                        } else {\n+                            updateStatus(ThingStatus.ONLINE);\n+\n+                            updateProperty(PROPERTY_ROOM_ID, room.getId());\n+                            updateProperty(PROPERTY_ROOM_NAME, room.getName());\n+                            updateProperty(PROPERTY_LOCATION_ID, location.getId());\n+                            updateProperty(PROPERTY_LOCATION_NAME, location.getName());\n+\n+                            updateState(CHANNEL_CURRENT_TEMPERATURE, parseTemperature(room.getCurrentTemperature()));\n+                            updateState(CHANNEL_TARGET_TEMPERATURE, parseTemperature(room.getTargetTemperature()));\n+                            updateState(CHANNEL_OVERRIDE_DURATION, parseDuration(room.getOverrideDuration()));\n+                            updateState(CHANNEL_RUN_MODE, parseString(room.getRunMode()));\n+                            updateState(CHANNEL_FROST_PROTECTION_MODE,\n+                                    OnOffType.from(room.getRunMode().equals(FROST_PROTECTION_MODE)));\n+                        }\n+                        return;\n+                    }\n+                }\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not found\");\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not configured\");\n+        }\n+    }\n+\n+    private void setOverride(final QuantityType<?> command) {\n+        String roomId = getThing().getProperties().get(PROPERTY_ROOM_ID);\n+        String locationId = getThing().getProperties().get(PROPERTY_LOCATION_ID);\n+\n+        QuantityType<?> temp = command.toUnit(SIUnits.CELSIUS);\n+\n+        if (temp != null) {\n+            final int value = temp.multiply(new BigDecimal(10)).intValue();\n+\n+            try {\n+                final MyWarmupAccountHandler localBridgeHandler = bridgeHandler;\n+                if (localBridgeHandler != null && config != null) {\n+                    final int overrideDuration = config.getOverrideDuration();\n+                    if (overrideDuration > 0 && locationId != null && roomId != null) {\n+                        localBridgeHandler.getApi().setOverride(locationId, roomId, value, overrideDuration);\n+                        refreshFromServer();\n+                    }\n+                }\n+            } catch (MyWarmupApiException e) {\n+                logger.debug(\"Set Override failed: {}\", e.getMessage(), e);", "originalCommit": "0dfe710e9a2b26a45ef4a4e767238175c8b6c2ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87161847448925cb3b7a08d692400e1436afaaad", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\nindex 97e2c1a879..480bf2e949 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\n\n@@ -50,11 +50,6 @@ public class RoomHandler extends WarmupThingHandler implements WarmupRefreshList\n     public void initialize() {\n         super.initialize();\n         config = getConfigAs(RoomConfigurationDTO.class);\n-        if (config.getSerialNumber().length() == 0) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial Number not configured\");\n-        } else {\n-            super.refreshFromServer();\n-        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk1NDk1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r541954953", "bodyText": "It seems a bit unreasonable to log the stack trace when the network fails. You could also include the exception's message in the ThingStatusDetailMessage.", "author": "fwolter", "createdAt": "2020-12-13T16:12:04Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApi;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.discovery.WarmupDiscoveryService;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyWarmupAccountHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyWarmupAccountHandler.class);\n+    private final MyWarmupApi api;\n+\n+    private @Nullable QueryResponseDTO queryResponse = null;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable WarmupDiscoveryService discoveryService;\n+\n+    public MyWarmupAccountHandler(Bridge thing, final HttpClient httpClient) {\n+        super(thing);\n+        api = new MyWarmupApi(httpClient, getConfigAs(MyWarmupConfigurationDTO.class));\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MyWarmupConfigurationDTO config = getConfigAs(MyWarmupConfigurationDTO.class);\n+        if (config.username.length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Username not configured\");\n+        } else if (config.password.length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not configured\");\n+        } else if (config.refreshInterval >= 10) {\n+            api.setConfiguration(config);\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refreshFromServer, 0, config.refreshInterval,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Refresh interval misconfigured (minimum 10s)\");\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(WarmupDiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefresh();\n+    }\n+\n+    public void cancelRefresh() {\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    public synchronized void refreshFromServer() {\n+        try {\n+            queryResponse = api.getStatus();\n+        } catch (MyWarmupApiException e) {\n+            queryResponse = null;\n+            logger.debug(\"{}\", e.getMessage(), e);\n+        } finally {\n+            if (queryResponse != null) {\n+                updateStatus(ThingStatus.ONLINE);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Unable to contact MyWarmup\");\n+            }", "originalCommit": "0af633139cb97ab21091cd2d0819eebb839c0bb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY3NzIzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r544677236", "bodyText": "Hi @fwolter , I've tweaked the error handling again, and made the changes to sync up with v3 changes - hope this is better!", "author": "jamesmelville", "createdAt": "2020-12-16T22:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk1NDk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "87161847448925cb3b7a08d692400e1436afaaad", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java\nindex b90b3ba06d..6ec13adf62 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java\n\n@@ -12,8 +12,6 @@\n  */\n package org.openhab.binding.warmup.internal.handler;\n \n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1MTc1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r545851753", "bodyText": "The log message could be removed, as the status update is already logged by the framework.\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "author": "fwolter", "createdAt": "2020-12-18T14:06:35Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java", "diffHunk": "@@ -95,15 +95,12 @@ public void cancelRefresh() {\n     public synchronized void refreshFromServer() {\n         try {\n             queryResponse = api.getStatus();\n+            updateStatus(ThingStatus.ONLINE);\n         } catch (MyWarmupApiException e) {\n             queryResponse = null;\n-            logger.debug(\"{}\", e.getMessage(), e);\n+            logger.debug(\"{}\", e.getMessage());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());", "originalCommit": "2ce09701cdaad70edc394f99b6820a448152dcd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87161847448925cb3b7a08d692400e1436afaaad", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java\nindex 969b82bc48..6ec13adf62 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java\n\n@@ -95,12 +80,15 @@ public class MyWarmupAccountHandler extends BaseBridgeHandler {\n     public synchronized void refreshFromServer() {\n         try {\n             queryResponse = api.getStatus();\n-            updateStatus(ThingStatus.ONLINE);\n         } catch (MyWarmupApiException e) {\n             queryResponse = null;\n-            logger.debug(\"{}\", e.getMessage());\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            cancelRefresh();\n         } finally {\n+            if (queryResponse != null) {\n+                updateStatus(ThingStatus.ONLINE);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Unable to contact MyWarmup\");\n+            }\n             refreshFromCache();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAwMzgxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r557003819", "bodyText": "Why is this in a finally clause? Please remove the finally clause if possible.", "author": "cpmeister", "createdAt": "2021-01-14T02:27:30Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApi;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.discovery.WarmupDiscoveryService;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyWarmupAccountHandler extends BaseBridgeHandler {\n+\n+    private final MyWarmupApi api;\n+\n+    private @Nullable QueryResponseDTO queryResponse = null;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable WarmupDiscoveryService discoveryService;\n+\n+    public MyWarmupAccountHandler(Bridge thing, final HttpClient httpClient) {\n+        super(thing);\n+        api = new MyWarmupApi(httpClient, getConfigAs(MyWarmupConfigurationDTO.class));\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MyWarmupConfigurationDTO config = getConfigAs(MyWarmupConfigurationDTO.class);\n+        if (config.username.length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Username not configured\");\n+        } else if (config.password.length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not configured\");\n+        } else if (config.refreshInterval >= 10) {\n+            api.setConfiguration(config);\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refreshFromServer, 0, config.refreshInterval,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Refresh interval misconfigured (minimum 10s)\");\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(WarmupDiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefresh();\n+    }\n+\n+    public void cancelRefresh() {\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    public synchronized void refreshFromServer() {\n+        try {\n+            queryResponse = api.getStatus();\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (MyWarmupApiException e) {\n+            queryResponse = null;\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        } finally {\n+            refreshFromCache();\n+        }", "originalCommit": "17742513acf9dc0866a7f5bb33980fdbe47d6242", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87161847448925cb3b7a08d692400e1436afaaad", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java\nindex 7c32ace97b..6ec13adf62 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java\n\n@@ -12,8 +12,6 @@\n  */\n package org.openhab.binding.warmup.internal.handler;\n \n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAwNDY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r557004645", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final int value = temp.multiply(new BigDecimal(10)).intValue();\n          \n          \n            \n                        final int value = temp.multiply(BigDecimal.TEN).intValue();", "author": "cpmeister", "createdAt": "2021-01-14T02:30:12Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RoomHandler extends WarmupThingHandler implements WarmupRefreshListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RoomHandler.class);\n+    private @Nullable RoomConfigurationDTO config;\n+\n+    public RoomHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(RoomConfigurationDTO.class);\n+        if (config.getSerialNumber().length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial Number not configured\");\n+        } else {\n+            super.refreshFromServer();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+        if (CHANNEL_TARGET_TEMPERATURE.equals(channelUID.getId()) && command instanceof QuantityType<?>) {\n+            setOverride((QuantityType<?>) command);\n+        }\n+        if (CHANNEL_FROST_PROTECTION_MODE.equals(channelUID.getId()) && command instanceof OnOffType) {\n+            toggleFrostProtectionMode((OnOffType) command);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate room properties, status and state\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No data from bridge\");\n+        } else if (config != null) {\n+            final String serialNumber = config.getSerialNumber();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()\n+                            && room.getThermostat4ies().get(0).getDeviceSN().equals(serialNumber)) {\n+                        if (room.getThermostat4ies().get(0).getLastPoll() > 10) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Thermostat has not polled for 10 minutes\");\n+                        } else {\n+                            updateStatus(ThingStatus.ONLINE);\n+\n+                            updateProperty(PROPERTY_ROOM_ID, room.getId());\n+                            updateProperty(PROPERTY_ROOM_NAME, room.getName());\n+                            updateProperty(PROPERTY_LOCATION_ID, location.getId());\n+                            updateProperty(PROPERTY_LOCATION_NAME, location.getName());\n+\n+                            updateState(CHANNEL_CURRENT_TEMPERATURE, parseTemperature(room.getCurrentTemperature()));\n+                            updateState(CHANNEL_TARGET_TEMPERATURE, parseTemperature(room.getTargetTemperature()));\n+                            updateState(CHANNEL_OVERRIDE_DURATION, parseDuration(room.getOverrideDuration()));\n+                            updateState(CHANNEL_RUN_MODE, parseString(room.getRunMode()));\n+                            updateState(CHANNEL_FROST_PROTECTION_MODE,\n+                                    OnOffType.from(room.getRunMode().equals(FROST_PROTECTION_MODE)));\n+                        }\n+                        return;\n+                    }\n+                }\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not found\");\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not configured\");\n+        }\n+    }\n+\n+    private void setOverride(final QuantityType<?> command) {\n+        String roomId = getThing().getProperties().get(PROPERTY_ROOM_ID);\n+        String locationId = getThing().getProperties().get(PROPERTY_LOCATION_ID);\n+\n+        QuantityType<?> temp = command.toUnit(SIUnits.CELSIUS);\n+\n+        if (temp != null) {\n+            final int value = temp.multiply(new BigDecimal(10)).intValue();", "originalCommit": "17742513acf9dc0866a7f5bb33980fdbe47d6242", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87161847448925cb3b7a08d692400e1436afaaad", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\nindex f5750c39f2..480bf2e949 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\n\n@@ -50,11 +50,6 @@ public class RoomHandler extends WarmupThingHandler implements WarmupRefreshList\n     public void initialize() {\n         super.initialize();\n         config = getConfigAs(RoomConfigurationDTO.class);\n-        if (config.getSerialNumber().length() == 0) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial Number not configured\");\n-        } else {\n-            super.refreshFromServer();\n-        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAwNDk4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r557004983", "bodyText": "Thing properties should not have spaces in them. Please make the properties name camelcase if possible.", "author": "cpmeister", "createdAt": "2021-01-14T02:31:35Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RoomHandler extends WarmupThingHandler implements WarmupRefreshListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RoomHandler.class);\n+    private @Nullable RoomConfigurationDTO config;\n+\n+    public RoomHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(RoomConfigurationDTO.class);\n+        if (config.getSerialNumber().length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial Number not configured\");\n+        } else {\n+            super.refreshFromServer();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+        if (CHANNEL_TARGET_TEMPERATURE.equals(channelUID.getId()) && command instanceof QuantityType<?>) {\n+            setOverride((QuantityType<?>) command);\n+        }\n+        if (CHANNEL_FROST_PROTECTION_MODE.equals(channelUID.getId()) && command instanceof OnOffType) {\n+            toggleFrostProtectionMode((OnOffType) command);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate room properties, status and state\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No data from bridge\");\n+        } else if (config != null) {\n+            final String serialNumber = config.getSerialNumber();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()\n+                            && room.getThermostat4ies().get(0).getDeviceSN().equals(serialNumber)) {\n+                        if (room.getThermostat4ies().get(0).getLastPoll() > 10) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Thermostat has not polled for 10 minutes\");\n+                        } else {\n+                            updateStatus(ThingStatus.ONLINE);\n+\n+                            updateProperty(PROPERTY_ROOM_ID, room.getId());\n+                            updateProperty(PROPERTY_ROOM_NAME, room.getName());\n+                            updateProperty(PROPERTY_LOCATION_ID, location.getId());\n+                            updateProperty(PROPERTY_LOCATION_NAME, location.getName());\n+\n+                            updateState(CHANNEL_CURRENT_TEMPERATURE, parseTemperature(room.getCurrentTemperature()));\n+                            updateState(CHANNEL_TARGET_TEMPERATURE, parseTemperature(room.getTargetTemperature()));\n+                            updateState(CHANNEL_OVERRIDE_DURATION, parseDuration(room.getOverrideDuration()));\n+                            updateState(CHANNEL_RUN_MODE, parseString(room.getRunMode()));\n+                            updateState(CHANNEL_FROST_PROTECTION_MODE,\n+                                    OnOffType.from(room.getRunMode().equals(FROST_PROTECTION_MODE)));\n+                        }\n+                        return;\n+                    }\n+                }\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not found\");\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not configured\");\n+        }\n+    }\n+\n+    private void setOverride(final QuantityType<?> command) {\n+        String roomId = getThing().getProperties().get(PROPERTY_ROOM_ID);\n+        String locationId = getThing().getProperties().get(PROPERTY_LOCATION_ID);\n+\n+        QuantityType<?> temp = command.toUnit(SIUnits.CELSIUS);\n+\n+        if (temp != null) {\n+            final int value = temp.multiply(new BigDecimal(10)).intValue();\n+\n+            try {\n+                final MyWarmupAccountHandler localBridgeHandler = bridgeHandler;\n+                if (localBridgeHandler != null && config != null) {\n+                    final int overrideDuration = config.getOverrideDuration();\n+                    if (overrideDuration > 0 && locationId != null && roomId != null) {\n+                        localBridgeHandler.getApi().setOverride(locationId, roomId, value, overrideDuration);\n+                        refreshFromServer();\n+                    }\n+                }\n+            } catch (MyWarmupApiException e) {\n+                logger.debug(\"Set Override failed: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    private void toggleFrostProtectionMode(OnOffType command) {\n+        String roomId = getThing().getProperties().get(\"Id\");\n+        String locationId = getThing().getProperties().get(\"Location Id\");", "originalCommit": "17742513acf9dc0866a7f5bb33980fdbe47d6242", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87161847448925cb3b7a08d692400e1436afaaad", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\nindex f5750c39f2..480bf2e949 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java\n\n@@ -50,11 +50,6 @@ public class RoomHandler extends WarmupThingHandler implements WarmupRefreshList\n     public void initialize() {\n         super.initialize();\n         config = getConfigAs(RoomConfigurationDTO.class);\n-        if (config.getSerialNumber().length() == 0) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial Number not configured\");\n-        } else {\n-            super.refreshFromServer();\n-        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAwNTI2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r557005263", "bodyText": "The bridge handler instance may change over the lifecycle of the thing handler. I suggest retrieving the bridge handler instance on demand instead of trying to cache it.", "author": "cpmeister", "createdAt": "2021-01-14T02:32:36Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/WarmupThingHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link WarmupThingHandler} is a super class for Things related to the Bridge consolidating logic.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupThingHandler extends BaseThingHandler {\n+\n+    protected @Nullable MyWarmupAccountHandler bridgeHandler;\n+\n+    public WarmupThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            bridgeHandler = (MyWarmupAccountHandler) bridge.getHandler();", "originalCommit": "17742513acf9dc0866a7f5bb33980fdbe47d6242", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87161847448925cb3b7a08d692400e1436afaaad", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/WarmupThingHandler.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/WarmupThingHandler.java\nindex 73eee99bec..0eea60282e 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/WarmupThingHandler.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/WarmupThingHandler.java\n\n@@ -17,11 +17,10 @@ import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.library.types.QuantityType;\n import org.openhab.core.library.types.StringType;\n import org.openhab.core.library.unit.SIUnits;\n-import org.openhab.core.library.unit.Units;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n import org.openhab.core.thing.Bridge;\n import org.openhab.core.thing.ChannelUID;\n import org.openhab.core.thing.Thing;\n-import org.openhab.core.thing.ThingStatus;\n import org.openhab.core.thing.binding.BaseThingHandler;\n import org.openhab.core.types.Command;\n import org.openhab.core.types.RefreshType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDUxMjM1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r570512356", "bodyText": "The copyright year needs to be updated. You can use mvn license:format -pl :org.openhab.binding.warmup in the root. You need to rebase you binding to the current main to update (git pull --rebase) the configuration containing the new year before running this and than git push --force-with-lease update your remote branch,", "author": "Hilbrand", "createdAt": "2021-02-04T20:09:53Z", "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "originalCommit": "17742513acf9dc0866a7f5bb33980fdbe47d6242", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87161847448925cb3b7a08d692400e1436afaaad", "chunk": "diff --git a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java\nindex 0f90d294c7..e77e4c2a11 100644\n--- a/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java\n+++ b/bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java\n\n@@ -12,6 +12,9 @@\n  */\n package org.openhab.binding.warmup.internal;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Set;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"oid": "87161847448925cb3b7a08d692400e1436afaaad", "url": "https://github.com/openhab/openhab-addons/commit/87161847448925cb3b7a08d692400e1436afaaad", "message": "[warmup] Initial Contribution for OpenHAB 3.0\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:17:39Z", "type": "commit"}, {"oid": "4f45d0284b65f0c6a6e57af21c7b5139367535f4", "url": "https://github.com/openhab/openhab-addons/commit/4f45d0284b65f0c6a6e57af21c7b5139367535f4", "message": "Reformat readme\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:18:15Z", "type": "commit"}, {"oid": "adc47d2c7d31dd1cfea5a0d88aaacf9b0176e98d", "url": "https://github.com/openhab/openhab-addons/commit/adc47d2c7d31dd1cfea5a0d88aaacf9b0176e98d", "message": "Refactor Discovery Service\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:18:16Z", "type": "commit"}, {"oid": "7be901ba98260cea680541c1fb6a289ad4f1f411", "url": "https://github.com/openhab/openhab-addons/commit/7be901ba98260cea680541c1fb6a289ad4f1f411", "message": "Initialise with unknown status\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:18:17Z", "type": "commit"}, {"oid": "ecee861c4b964bfe58626c090540b43d9c4e481c", "url": "https://github.com/openhab/openhab-addons/commit/ecee861c4b964bfe58626c090540b43d9c4e481c", "message": "Remove supression of null warnings\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:18:18Z", "type": "commit"}, {"oid": "7c89fadf84fa3ef8f9009b8b1e0e9b0b2b02eeab", "url": "https://github.com/openhab/openhab-addons/commit/7c89fadf84fa3ef8f9009b8b1e0e9b0b2b02eeab", "message": "Mark Thermostat device as offline if not recently polled\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:18:19Z", "type": "commit"}, {"oid": "3072aae217bc1ae459edef7c0a43012a370b677f", "url": "https://github.com/openhab/openhab-addons/commit/3072aae217bc1ae459edef7c0a43012a370b677f", "message": "Don't cancel refresh on failure.\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:18:20Z", "type": "commit"}, {"oid": "38f90d2794408dad2dd1dfe236bf944a22b4950f", "url": "https://github.com/openhab/openhab-addons/commit/38f90d2794408dad2dd1dfe236bf944a22b4950f", "message": "Review updates\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:19:21Z", "type": "commit"}, {"oid": "2376bb016dbce8a64927649bfc71fdeb2accfb91", "url": "https://github.com/openhab/openhab-addons/commit/2376bb016dbce8a64927649bfc71fdeb2accfb91", "message": "Updates from review comments\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:19:46Z", "type": "commit"}, {"oid": "26af9b2b0c6f9c52db13127a2cba6cb932059cda", "url": "https://github.com/openhab/openhab-addons/commit/26af9b2b0c6f9c52db13127a2cba6cb932059cda", "message": "Remove extraneous property\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:19:47Z", "type": "commit"}, {"oid": "f234b43e7932b23e5ede8a980d1cd5c97f897724", "url": "https://github.com/openhab/openhab-addons/commit/f234b43e7932b23e5ede8a980d1cd5c97f897724", "message": "Remove unwanted file, update readme, tweak set initialisation\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:20:09Z", "type": "commit"}, {"oid": "c3db26c9340b4f1fa2ff364f546a7ed64b5596d0", "url": "https://github.com/openhab/openhab-addons/commit/c3db26c9340b4f1fa2ff364f546a7ed64b5596d0", "message": "Remove stack trace logging\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:20:18Z", "type": "commit"}, {"oid": "e7d4b6a6f2fb19f3502bfcee3dcf4eb920b8ec25", "url": "https://github.com/openhab/openhab-addons/commit/e7d4b6a6f2fb19f3502bfcee3dcf4eb920b8ec25", "message": "Remove extraneous code\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:20:19Z", "type": "commit"}, {"oid": "3c3facf4ae080045cd111459e0b4e379ca697a2a", "url": "https://github.com/openhab/openhab-addons/commit/3c3facf4ae080045cd111459e0b4e379ca697a2a", "message": "missing crlf in readme\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:20:20Z", "type": "commit"}, {"oid": "47140372786943029a22b62d8261a486a656e2d4", "url": "https://github.com/openhab/openhab-addons/commit/47140372786943029a22b62d8261a486a656e2d4", "message": "Remove Binding Author, Rename Units class\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:20:21Z", "type": "commit"}, {"oid": "371c4d2c3339faf7db8ab01d94c3c14ade1e7e27", "url": "https://github.com/openhab/openhab-addons/commit/371c4d2c3339faf7db8ab01d94c3c14ade1e7e27", "message": "Rejig error handling\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:20:22Z", "type": "commit"}, {"oid": "4f656e64be1ad15c2be549f37776b40add4c8448", "url": "https://github.com/openhab/openhab-addons/commit/4f656e64be1ad15c2be549f37776b40add4c8448", "message": "Remove pointless logging\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:20:23Z", "type": "commit"}, {"oid": "adeb940a03f3280d8273075f4c7c1ea30a4e6f5b", "url": "https://github.com/openhab/openhab-addons/commit/adeb940a03f3280d8273075f4c7c1ea30a4e6f5b", "message": "Update POM & License headers\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T20:51:50Z", "type": "commit"}, {"oid": "eb8f9f8724c3d742e4f1bb27e90435c885f43021", "url": "https://github.com/openhab/openhab-addons/commit/eb8f9f8724c3d742e4f1bb27e90435c885f43021", "message": "Review Comment tweaks\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T21:03:50Z", "type": "commit"}, {"oid": "0e544f094d9016ec6bd682d75427f9a2a1a6ac81", "url": "https://github.com/openhab/openhab-addons/commit/0e544f094d9016ec6bd682d75427f9a2a1a6ac81", "message": "Access bridge handler on demand\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T21:29:23Z", "type": "commit"}, {"oid": "0e544f094d9016ec6bd682d75427f9a2a1a6ac81", "url": "https://github.com/openhab/openhab-addons/commit/0e544f094d9016ec6bd682d75427f9a2a1a6ac81", "message": "Access bridge handler on demand\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>", "committedDate": "2021-05-10T21:29:23Z", "type": "forcePushed"}]}