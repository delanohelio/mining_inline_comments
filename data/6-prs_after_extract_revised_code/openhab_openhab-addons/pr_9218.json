{"pr_number": 9218, "pr_title": "[espmilighthub] Initial contribution", "pr_createdAt": "2020-12-04T04:14:34Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9218", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwOTU4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538709581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<ThingTypeUID>(Arrays.asList(\n          \n          \n            \n                        THING_TYPE_RGBW, THING_TYPE_RGB_CCT, THING_TYPE_FUT089, THING_TYPE_FUT091, THING_TYPE_CCT, THING_TYPE_RGB));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(\n          \n          \n            \n                        THING_TYPE_RGBW, THING_TYPE_RGB_CCT, THING_TYPE_FUT089, THING_TYPE_FUT091, THING_TYPE_CCT, THING_TYPE_RGB);", "author": "fwolter", "createdAt": "2020-12-08T18:40:18Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link EspMilightHubBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubBindingConstants {\n+    public static final String BINDING_ID = \"mqtt\";\n+    public static final String STATES_BASE_TOPIC = \"milight/states/\";\n+    public static final String COMMANDS_BASE_TOPIC = \"milight/commands/\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_RGB_CCT = new ThingTypeUID(BINDING_ID, \"rgb_cct\");\n+    public static final ThingTypeUID THING_TYPE_CCT = new ThingTypeUID(BINDING_ID, \"cct\");\n+    public static final ThingTypeUID THING_TYPE_RGBW = new ThingTypeUID(BINDING_ID, \"rgbw\");\n+    public static final ThingTypeUID THING_TYPE_RGB = new ThingTypeUID(BINDING_ID, \"rgb\");\n+    public static final ThingTypeUID THING_TYPE_FUT089 = new ThingTypeUID(BINDING_ID, \"fut089\");\n+    public static final ThingTypeUID THING_TYPE_FUT091 = new ThingTypeUID(BINDING_ID, \"fut091\");\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<ThingTypeUID>(Arrays.asList(\n+            THING_TYPE_RGBW, THING_TYPE_RGB_CCT, THING_TYPE_FUT089, THING_TYPE_FUT091, THING_TYPE_CCT, THING_TYPE_RGB));", "originalCommit": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "836d3f3e446eef2bb5224cbea6e7ca92477cb87c", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java\nindex 860c862439..7d2feeab89 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java\n\n@@ -40,8 +40,8 @@ public class EspMilightHubBindingConstants {\n     public static final ThingTypeUID THING_TYPE_FUT089 = new ThingTypeUID(BINDING_ID, \"fut089\");\n     public static final ThingTypeUID THING_TYPE_FUT091 = new ThingTypeUID(BINDING_ID, \"fut091\");\n \n-    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<ThingTypeUID>(Arrays.asList(\n-            THING_TYPE_RGBW, THING_TYPE_RGB_CCT, THING_TYPE_FUT089, THING_TYPE_FUT091, THING_TYPE_CCT, THING_TYPE_RGB));\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(\n+            THING_TYPE_RGBW, THING_TYPE_RGB_CCT, THING_TYPE_FUT089, THING_TYPE_FUT091, THING_TYPE_CCT, THING_TYPE_RGB);\n \n     // Channels\n     public static final String CHANNEL_LEVEL = \"level\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwOTk3MA==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538709970", "bodyText": "Can these be removed?", "author": "fwolter", "createdAt": "2020-12-08T18:40:42Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubHandlerFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.SUPPORTED_THING_TYPES;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.handler.EspMilightHubHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link EspMilightHubHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class EspMilightHubHandlerFactory extends BaseThingHandlerFactory {\n+    private final ThingRegistry thingRegistry;\n+\n+    @Activate\n+    public EspMilightHubHandlerFactory(final @Reference ThingRegistry thingRegistry) {\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Activate\n+    @Override\n+    protected void activate(ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Deactivate\n+    @Override\n+    protected void deactivate(ComponentContext componentContext) {\n+        super.deactivate(componentContext);\n+    }", "originalCommit": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1OTM0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r541459349", "bodyText": "Yes and DONE. These were in one of the MQTT Homie? bindings that I used as an example to work from.", "author": "Skinah", "createdAt": "2020-12-12T00:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwOTk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "ee3582470f23599ca30de4dcf0bcbd39bb2b0ab2", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubHandlerFactory.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubHandlerFactory.java\nindex d859cfc78a..773d06f1ee 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubHandlerFactory.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubHandlerFactory.java\n\n@@ -24,10 +24,8 @@ import org.openhab.core.thing.ThingTypeUID;\n import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n import org.openhab.core.thing.binding.ThingHandler;\n import org.openhab.core.thing.binding.ThingHandlerFactory;\n-import org.osgi.service.component.ComponentContext;\n import org.osgi.service.component.annotations.Activate;\n import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.component.annotations.Deactivate;\n import org.osgi.service.component.annotations.Reference;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMTU2MA==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538711560", "bodyText": "Any reason why you don't use GSON for parsing the JSON?", "author": "fwolter", "createdAt": "2020-12-08T18:42:05Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/Helper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link Helper} Removes the need for any external JSON libs\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Helper {\n+    /**\n+     * resolveJSON will return a value from any key/path that you give and the string can be terminated by any ,}\"\n+     * characters.\n+     *\n+     */\n+    public static String resolveJSON(String messageJSON, String jsonPath, int resultMaxLength) {\n+        String result = \"\";", "originalCommit": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MjQwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r541452407", "bodyText": "No good reason, other than I don't know that lib and this code has been used for years so it is well tested so would prefer to leave it alone until it breaks and then replace it with GSON is the way I would go.", "author": "Skinah", "createdAt": "2020-12-12T00:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMTU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk2NzE1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r541967157", "bodyText": "Ok.", "author": "fwolter", "createdAt": "2020-12-13T17:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMTU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "fffd6799d4856222560e1d442f8476c20e8767bd", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/Helper.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/Helper.java\nindex c3abca76bb..5663a52fbf 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/Helper.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/Helper.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMzAzMA==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538713030", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(\"OFF\"));\n          \n          \n            \n                            changeChannel(CHANNEL_LEVEL, OnOffType.OFF);", "author": "fwolter", "createdAt": "2020-12-08T18:44:13Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String lastCommand = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(\"OFF\"));", "originalCommit": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "836d3f3e446eef2bb5224cbea6e7ca92477cb87c", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex c23b935b5a..59bc70c42b 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -113,7 +113,7 @@ public class EspMilightHubHandler extends BaseThingHandler implements MqttConnec\n         if (!bulbLevel.isEmpty()) {\n             if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n                 changeChannel(CHANNEL_LEVEL, new PercentType(0));\n-                changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(\"OFF\"));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n                 tempBulbLevel = BigDecimal.ZERO;\n             } else {\n                 tempBulbLevel = new BigDecimal(bulbLevel);\n"}}, {"oid": "836d3f3e446eef2bb5224cbea6e7ca92477cb87c", "url": "https://github.com/openhab/openhab-addons/commit/836d3f3e446eef2bb5224cbea6e7ca92477cb87c", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-12-10T07:39:34Z", "type": "forcePushed"}, {"oid": "ee3582470f23599ca30de4dcf0bcbd39bb2b0ab2", "url": "https://github.com/openhab/openhab-addons/commit/ee3582470f23599ca30de4dcf0bcbd39bb2b0ab2", "message": "Fix defaults for older globes.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-12-29T03:14:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NjMzNg==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559796336", "bodyText": "I think the use of ++index makes this harder to understand. It doesn't appear that incrementing the index even matters here, so please just rewrite this without using ++.", "author": "cpmeister", "createdAt": "2021-01-18T21:11:14Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/discovery/EspMilightHubDiscoveryService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.discovery;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.mqtt.discovery.AbstractMQTTDiscovery;\n+import org.openhab.binding.mqtt.discovery.MQTTTopicDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link EspMilightHubDiscoveryService} is responsible for finding globes\n+ * and setting them up for the handlers.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.mqttespmilighthub\")\n+@NonNullByDefault\n+public class EspMilightHubDiscoveryService extends AbstractMQTTDiscovery {\n+    protected final MQTTTopicDiscoveryService discoveryService;\n+\n+    @Activate\n+    public EspMilightHubDiscoveryService(@Reference MQTTTopicDiscoveryService discoveryService) {\n+        super(SUPPORTED_THING_TYPES, 3, true, STATES_BASE_TOPIC + \"#\");\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    @Override\n+    protected MQTTTopicDiscoveryService getDiscoveryService() {\n+        return discoveryService;\n+    }\n+\n+    @Override\n+    public void receivedMessage(ThingUID connectionBridge, MqttBrokerConnection connection, String topic,\n+            byte[] payload) {\n+        resetTimeout();\n+        if (topic.startsWith(STATES_BASE_TOPIC)) {\n+            String cutTopic = topic.replace(STATES_BASE_TOPIC, \"\");\n+            int index = cutTopic.indexOf(\"/\");\n+            if (index != -1) // -1 means \"not found\"\n+            {\n+                String remoteCode = (cutTopic.substring(0, index)); // Store the remote code for use later\n+                cutTopic = topic.replace(STATES_BASE_TOPIC + remoteCode + \"/\", \"\");\n+                index = cutTopic.indexOf(\"/\");\n+                if (index != -1) {\n+                    String globeType = (cutTopic.substring(0, index));\n+                    String remoteGroupID = (cutTopic.substring(++index, ++index));", "originalCommit": "d5f0a51c0fd5c103893a8a6b881d951a6a064599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg2NDY4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r560864689", "bodyText": "It is needed. I could re-write it as this which does the same thing and may be easier to understand.\nString remoteGroupID = (cutTopic.substring(index+1, index+2));\nindex++ This means use the variable and then increment it AFTER the value is used.\n++index This means increment the variable BEFORE it is used.", "author": "Skinah", "createdAt": "2021-01-20T10:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NjMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIxMzY4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r561213685", "bodyText": "I'm aware of the difference between index++ and ++index. The issue I have is that you are using ++index for each parameter. Knowing the evaluation order ( not only the ++index but of each of the parameters relative to each other ) is more knowledge than I think is necessary for an eventual code maintainer to be required to have.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                String remoteGroupID = (cutTopic.substring(++index, ++index));\n          \n          \n            \n                                String remoteGroupID = (cutTopic.substring(index+1, index+2));\n          \n      \n    \n    \n  \n\nKeep it simple please.", "author": "cpmeister", "createdAt": "2021-01-20T19:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NjMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "a5001dc5e1b0fe45a1e92aa51e788956b90acfeb", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/discovery/EspMilightHubDiscoveryService.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/discovery/EspMilightHubDiscoveryService.java\nindex 56b63c4bed..ea38835a8e 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/discovery/EspMilightHubDiscoveryService.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/discovery/EspMilightHubDiscoveryService.java\n\n@@ -67,7 +67,7 @@ public class EspMilightHubDiscoveryService extends AbstractMQTTDiscovery {\n                 index = cutTopic.indexOf(\"/\");\n                 if (index != -1) {\n                     String globeType = (cutTopic.substring(0, index));\n-                    String remoteGroupID = (cutTopic.substring(++index, ++index));\n+                    String remoteGroupID = (cutTopic.substring(index+1, index+2));\n                     // openHAB's framework has better code for handling groups then the firmware does\n                     if (!remoteGroupID.equals(\"0\")) {// Users can manually add group 0 things if they wish\n                         publishDevice(connectionBridge, connection, topic, remoteCode, globeType, remoteGroupID);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NjQyMw==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559796423", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                savedLevel = savedLevel.add(new BigDecimal(10));\n          \n          \n            \n                                savedLevel = savedLevel.add(BigDecimal.TEN);", "author": "cpmeister", "createdAt": "2021-01-18T21:11:35Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));", "originalCommit": "d5f0a51c0fd5c103893a8a6b881d951a6a064599", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex 352f92f666..c23b935b5a 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -60,6 +60,7 @@ public class EspMilightHubHandler extends BaseThingHandler implements MqttConnec\n     private @Nullable MqttBrokerConnection connection;\n     private ThingRegistry thingRegistry;\n     private String globeType = \"\";\n+    private String lastCommand = \"\";\n     private String bulbMode = \"\";\n     private String remotesGroupID = \"\";\n     private String channelPrefix = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NjUxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559796511", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                savedLevel = savedLevel.subtract(new BigDecimal(10));\n          \n          \n            \n                                savedLevel = savedLevel.subtract(BigDecimal.TEN);", "author": "cpmeister", "createdAt": "2021-01-18T21:11:53Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(new BigDecimal(10));", "originalCommit": "d5f0a51c0fd5c103893a8a6b881d951a6a064599", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex 352f92f666..c23b935b5a 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -60,6 +60,7 @@ public class EspMilightHubHandler extends BaseThingHandler implements MqttConnec\n     private @Nullable MqttBrokerConnection connection;\n     private ThingRegistry thingRegistry;\n     private String globeType = \"\";\n+    private String lastCommand = \"\";\n     private String bulbMode = \"\";\n     private String remotesGroupID = \"\";\n     private String channelPrefix = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NzAwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559797005", "bodyText": "Please make new BigDecimal(100) a constant so you can reuse it.", "author": "cpmeister", "createdAt": "2021-01-18T21:13:43Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))", "originalCommit": "d5f0a51c0fd5c103893a8a6b881d951a6a064599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg3MDU1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r560870555", "bodyText": "DONE.", "author": "Skinah", "createdAt": "2021-01-20T10:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NzAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex 352f92f666..c23b935b5a 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -60,6 +60,7 @@ public class EspMilightHubHandler extends BaseThingHandler implements MqttConnec\n     private @Nullable MqttBrokerConnection connection;\n     private ThingRegistry thingRegistry;\n     private String globeType = \"\";\n+    private String lastCommand = \"\";\n     private String bulbMode = \"\";\n     private String remotesGroupID = \"\";\n     private String channelPrefix = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NzY3NA==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559797674", "bodyText": "== shouldn't be used in this case since PercentType isn't a primitive, multiton, or enum.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (hsb.getBrightness() == PercentType.ZERO) {\n          \n          \n            \n                        } else if (PercentType.ZERO.equals(hsb.getBrightness())) {", "author": "cpmeister", "createdAt": "2021-01-18T21:15:50Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(new BigDecimal(10));\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (hsb.getBrightness() == PercentType.ZERO) {", "originalCommit": "d5f0a51c0fd5c103893a8a6b881d951a6a064599", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex 352f92f666..c23b935b5a 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -60,6 +60,7 @@ public class EspMilightHubHandler extends BaseThingHandler implements MqttConnec\n     private @Nullable MqttBrokerConnection connection;\n     private ThingRegistry thingRegistry;\n     private String globeType = \"\";\n+    private String lastCommand = \"\";\n     private String bulbMode = \"\";\n     private String remotesGroupID = \"\";\n     private String channelPrefix = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5ODA0OA==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559798048", "bodyText": "Please cache (PercentType) command to a local variable so you don't have to cast it several times.", "author": "cpmeister", "createdAt": "2021-01-18T21:17:05Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(new BigDecimal(10));\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (hsb.getBrightness() == PercentType.ZERO) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            if (((PercentType) command).intValue() == 0) {", "originalCommit": "d5f0a51c0fd5c103893a8a6b881d951a6a064599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg3NzU1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r560877553", "bodyText": "DONE.", "author": "Skinah", "createdAt": "2021-01-20T11:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5ODA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex 352f92f666..c23b935b5a 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -60,6 +60,7 @@ public class EspMilightHubHandler extends BaseThingHandler implements MqttConnec\n     private @Nullable MqttBrokerConnection connection;\n     private ThingRegistry thingRegistry;\n     private String globeType = \"\";\n+    private String lastCommand = \"\";\n     private String bulbMode = \"\";\n     private String remotesGroupID = \"\";\n     private String channelPrefix = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5ODYxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559798611", "bodyText": "Would this be counted as a configuration error? If so you should set the thing offline.", "author": "cpmeister", "createdAt": "2021-01-18T21:18:43Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(new BigDecimal(10));\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (hsb.getBrightness() == PercentType.ZERO) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            if (((PercentType) command).intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (((PercentType) command).intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = ((PercentType) command).toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                logger.warn(\"dimmedCT must be greater than the favourite white value.\");\n+            }", "originalCommit": "d5f0a51c0fd5c103893a8a6b881d951a6a064599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg4MTI5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r560881293", "bodyText": "Agree, changed it.", "author": "Skinah", "createdAt": "2021-01-20T11:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5ODYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex 352f92f666..c23b935b5a 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -60,6 +60,7 @@ public class EspMilightHubHandler extends BaseThingHandler implements MqttConnec\n     private @Nullable MqttBrokerConnection connection;\n     private ThingRegistry thingRegistry;\n     private String globeType = \"\";\n+    private String lastCommand = \"\";\n     private String bulbMode = \"\";\n     private String remotesGroupID = \"\";\n     private String channelPrefix = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMyNDQ4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r562324481", "bodyText": "Why are you updating the same channel twice?", "author": "cpmeister", "createdAt": "2021-01-22T02:07:09Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);", "originalCommit": "46409b7ea775ea364819798a29662e234434172e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ1ODgyMg==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r562458822", "bodyText": "Fixed, no reason to do it twice.", "author": "Skinah", "createdAt": "2021-01-22T08:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMyNDQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex 779cea3575..c23b935b5a 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -60,6 +60,7 @@ public class EspMilightHubHandler extends BaseThingHandler implements MqttConnec\n     private @Nullable MqttBrokerConnection connection;\n     private ThingRegistry thingRegistry;\n     private String globeType = \"\";\n+    private String lastCommand = \"\";\n     private String bulbMode = \"\";\n     private String remotesGroupID = \"\";\n     private String channelPrefix = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMyNTI4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r562325281", "bodyText": "Please use the correct ThingStatusDetail, also please return immediately when there is a config error.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n          \n          \n            \n                                    \"The dimmedCT config value must be greater than the favouriteWhite value.\");\n          \n          \n            \n                        }\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n          \n          \n            \n                                    \"The dimmedCT config value must be greater than the favourite White value.\");\n          \n          \n            \n                            return;\n          \n          \n            \n                        }", "author": "cpmeister", "createdAt": "2021-01-22T02:08:13Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(BIG_DECIMAL_100).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(BigDecimal.TEN);\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(BigDecimal.TEN);\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (PercentType.ZERO.equals(hsb.getBrightness())) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            PercentType percentType = (PercentType) command;\n+            if (percentType.intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (percentType.intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = percentType.toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                        \"The dimmedCT config value must be greater than the favouriteWhite value.\");\n+            }", "originalCommit": "46409b7ea775ea364819798a29662e234434172e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex 779cea3575..c23b935b5a 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -60,6 +60,7 @@ public class EspMilightHubHandler extends BaseThingHandler implements MqttConnec\n     private @Nullable MqttBrokerConnection connection;\n     private ThingRegistry thingRegistry;\n     private String globeType = \"\";\n+    private String lastCommand = \"\";\n     private String bulbMode = \"\";\n     private String remotesGroupID = \"\";\n     private String channelPrefix = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMyNjYzOA==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r562326638", "bodyText": "Please move this variable to before line 290 so that you can use it there too.", "author": "cpmeister", "createdAt": "2021-01-22T02:10:11Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(BIG_DECIMAL_100).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(BigDecimal.TEN);\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(BigDecimal.TEN);\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (PercentType.ZERO.equals(hsb.getBrightness())) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            PercentType percentType = (PercentType) command;\n+            if (percentType.intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (percentType.intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = percentType.toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                        \"The dimmedCT config value must be greater than the favouriteWhite value.\");\n+            }\n+        }\n+        if (getBridge() == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    \"Globe must have a valid bridge selected before it can come online.\");\n+        } else {\n+            globeType = thing.getThingTypeUID().getId();// eg rgb_cct\n+            String globeLocation = this.getThing().getUID().getId();// eg 0x014\n+            remotesGroupID = globeLocation.substring(globeLocation.length() - 1, globeLocation.length());// eg 4\n+            String remotesIDCode = globeLocation.substring(0, globeLocation.length() - 1);// eg 0x01\n+            fullCommandTopic = COMMANDS_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            fullStatesTopic = STATES_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            // Need to remove the lowercase x from 0x12AB in case it contains all numbers\n+            String caseCheck = globeLocation.substring(2, globeLocation.length() - 1);\n+            if (!caseCheck.equals(caseCheck.toUpperCase())) {\n+                logger.warn(\n+                        \"The milight globe {}{} is using lowercase for the remote code when the hub needs UPPERCASE\",\n+                        remotesIDCode, remotesGroupID);\n+            }\n+            Bridge localBridge = getBridge();", "originalCommit": "46409b7ea775ea364819798a29662e234434172e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ1NTU3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r562455575", "bodyText": "DONE, thanks for spotting.", "author": "Skinah", "createdAt": "2021-01-22T08:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMyNjYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex 779cea3575..c23b935b5a 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -60,6 +60,7 @@ public class EspMilightHubHandler extends BaseThingHandler implements MqttConnec\n     private @Nullable MqttBrokerConnection connection;\n     private ThingRegistry thingRegistry;\n     private String globeType = \"\";\n+    private String lastCommand = \"\";\n     private String bulbMode = \"\";\n     private String remotesGroupID = \"\";\n     private String channelPrefix = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE4MDMxMA==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r563180310", "bodyText": "Isn't this constant defined in the constants file of the mqtt binding? Please use that constant instead.", "author": "cpmeister", "createdAt": "2021-01-23T17:56:07Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link EspMilightHubBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubBindingConstants {\n+    public static final String BINDING_ID = \"mqtt\";", "originalCommit": "cc2092a8db83ea2b12d3458d8ad49de4138f72fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE1MjY1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r564152655", "bodyText": "DONE. required making it public in the mqtt binding.", "author": "Skinah", "createdAt": "2021-01-26T01:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE4MDMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java\nindex d9b1b244af..860c862439 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMzOTYzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r563339635", "bodyText": "Why are you hardcoding the broker thing name here? Isn't the broker accessible through the bridge thing?", "author": "cpmeister", "createdAt": "2021-01-24T19:42:11Z", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(BIG_DECIMAL_100).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(BigDecimal.TEN);\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(BigDecimal.TEN);\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (PercentType.ZERO.equals(hsb.getBrightness())) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            PercentType percentType = (PercentType) command;\n+            if (percentType.intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (percentType.intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = percentType.toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"The dimmedCT config value must be greater than the favourite White value.\");\n+                return;\n+            }\n+        }\n+        Bridge localBridge = getBridge();\n+        if (localBridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    \"Globe must have a valid bridge selected before it can come online.\");\n+            return;\n+        } else {\n+            globeType = thing.getThingTypeUID().getId();// eg rgb_cct\n+            String globeLocation = this.getThing().getUID().getId();// eg 0x014\n+            remotesGroupID = globeLocation.substring(globeLocation.length() - 1, globeLocation.length());// eg 4\n+            String remotesIDCode = globeLocation.substring(0, globeLocation.length() - 1);// eg 0x01\n+            fullCommandTopic = COMMANDS_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            fullStatesTopic = STATES_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            // Need to remove the lowercase x from 0x12AB in case it contains all numbers\n+            String caseCheck = globeLocation.substring(2, globeLocation.length() - 1);\n+            if (!caseCheck.equals(caseCheck.toUpperCase())) {\n+                logger.warn(\n+                        \"The milight globe {}{} is using lowercase for the remote code when the hub needs UPPERCASE\",\n+                        remotesIDCode, remotesGroupID);\n+            }\n+            channelPrefix = BINDING_ID + \":\" + globeType + \":\" + localBridge.getUID().getId() + \":\" + remotesIDCode\n+                    + remotesGroupID + \":\";\n+            connectMQTT();\n+        }\n+    }\n+\n+    private void sendMQTT(String payload) {\n+        MqttBrokerConnection localConnection = connection;\n+        if (localConnection != null) {\n+            localConnection.publish(fullCommandTopic, payload.getBytes(), 1, false);\n+        }\n+    }\n+\n+    @Override\n+    public void processMessage(String topic, byte[] payload) {\n+        String state = new String(payload, StandardCharsets.UTF_8);\n+        logger.trace(\"Recieved the following new Milight state:{}:{}\", topic, state);\n+        processIncomingState(state);\n+    }\n+\n+    @Override\n+    public void connectionStateChanged(MqttConnectionState state, @Nullable Throwable error) {\n+        logger.debug(\"MQTT brokers state changed to:{}\", state);\n+        switch (state) {\n+            case CONNECTED:\n+                updateStatus(ThingStatus.ONLINE);\n+                break;\n+            case CONNECTING:\n+            case DISCONNECTED:\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Bridge (broker) is not connected to your MQTT broker.\");\n+        }\n+    }\n+\n+    public void connectMQTT() {\n+        Bridge localBridge = this.getBridge();\n+        if (localBridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED,\n+                    \"Bridge is missing or offline, you need to setup a working MQTT broker first.\");\n+            return;\n+        }\n+        ThingUID thingUID = new ThingUID(new ThingTypeUID(\"mqtt\", \"broker\"), localBridge.getUID().getId());", "originalCommit": "cc2092a8db83ea2b12d3458d8ad49de4138f72fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDEzODgxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r564138819", "bodyText": "FIXED.", "author": "Skinah", "createdAt": "2021-01-26T00:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMzOTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\nindex e6cc679211..c23b935b5a 100644\n--- a/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n+++ b/bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"oid": "a2036435198e7ce71e35bfb101ad9bc0d190c022", "url": "https://github.com/openhab/openhab-addons/commit/a2036435198e7ce71e35bfb101ad9bc0d190c022", "message": "espmilighthub inital\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "39d2902771ab3ba0421c7e6015c87836d4181c3c", "url": "https://github.com/openhab/openhab-addons/commit/39d2902771ab3ba0421c7e6015c87836d4181c3c", "message": "Update codeowners\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "745283082705c04146b0f669c01a281f4815c1ad", "url": "https://github.com/openhab/openhab-addons/commit/745283082705c04146b0f669c01a281f4815c1ad", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\r\n\r\nSigned-off-by: Matthew Skinner matt@pcmus.com\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "1cfea9d0288df2c9fc29059224dd1742c3c40960", "url": "https://github.com/openhab/openhab-addons/commit/1cfea9d0288df2c9fc29059224dd1742c3c40960", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml\r\n\r\nSigned-off-by: Matthew Skinner matt@pcmus.com\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "721dca6eb9be606fc43a07887abfaf842d30558f", "url": "https://github.com/openhab/openhab-addons/commit/721dca6eb9be606fc43a07887abfaf842d30558f", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/README.md\r\n\r\nSigned-off-by: Matthew Skinner matt@pcmus.com\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "39b1dcf60b9fedbebad4cb2830f55d2d77dfc34c", "url": "https://github.com/openhab/openhab-addons/commit/39b1dcf60b9fedbebad4cb2830f55d2d77dfc34c", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "1b0169cf9eeab553adfc9ac5e9b3c680086037a1", "url": "https://github.com/openhab/openhab-addons/commit/1b0169cf9eeab553adfc9ac5e9b3c680086037a1", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "e61e220fd5aebd295ad52ab3082d0fb31acf2773", "url": "https://github.com/openhab/openhab-addons/commit/e61e220fd5aebd295ad52ab3082d0fb31acf2773", "message": "Apply Suggestions\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "f4c56cb95146ee2aeecb865b82a5c5c1adf077c4", "url": "https://github.com/openhab/openhab-addons/commit/f4c56cb95146ee2aeecb865b82a5c5c1adf077c4", "message": "Nicer Labels for command.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "6993ba1ee212964b92d26fcc62e9cee54e621303", "url": "https://github.com/openhab/openhab-addons/commit/6993ba1ee212964b92d26fcc62e9cee54e621303", "message": "Add full example\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "cf0865ace2fb87bd8bb0b8df7496752fe90a437d", "url": "https://github.com/openhab/openhab-addons/commit/cf0865ace2fb87bd8bb0b8df7496752fe90a437d", "message": "cleanup\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "3c766647acd8a40df7ce0346a8fd642922c79f85", "url": "https://github.com/openhab/openhab-addons/commit/3c766647acd8a40df7ce0346a8fd642922c79f85", "message": "Move to using a config.xml\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "518e67d3ce25281dc38549797996640694f01361", "url": "https://github.com/openhab/openhab-addons/commit/518e67d3ce25281dc38549797996640694f01361", "message": "Use separate channels for commands.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "f556bfc7034b2b47ebd35b394a9a8063cdf1a83c", "url": "https://github.com/openhab/openhab-addons/commit/f556bfc7034b2b47ebd35b394a9a8063cdf1a83c", "message": "Command channel changes.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "4b3ada21b45bc010566c8c0b3105c91f5c5071f1", "url": "https://github.com/openhab/openhab-addons/commit/4b3ada21b45bc010566c8c0b3105c91f5c5071f1", "message": "Update readme.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "29c9bf80db26a3b35bfc255d3a3eba15b6823139", "url": "https://github.com/openhab/openhab-addons/commit/29c9bf80db26a3b35bfc255d3a3eba15b6823139", "message": "Fix defaults for older globes.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "93ebb0be23ab462420f11be21c37cbb037fbd96d", "url": "https://github.com/openhab/openhab-addons/commit/93ebb0be23ab462420f11be21c37cbb037fbd96d", "message": "Update to 3.1 snapshot\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "af7c74a3066c39a684478ce27f59c9abee84a547", "url": "https://github.com/openhab/openhab-addons/commit/af7c74a3066c39a684478ce27f59c9abee84a547", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "7f3a52f7f9d0f199fa86e4a352d8528eed7d030f", "url": "https://github.com/openhab/openhab-addons/commit/7f3a52f7f9d0f199fa86e4a352d8528eed7d030f", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "6cb72450f19c4327e74645c0a6b746e3ebbc8302", "url": "https://github.com/openhab/openhab-addons/commit/6cb72450f19c4327e74645c0a6b746e3ebbc8302", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "ed800652d0ea009c69ebe86bf4bb1650aeda698c", "url": "https://github.com/openhab/openhab-addons/commit/ed800652d0ea009c69ebe86bf4bb1650aeda698c", "message": "Remove multiple newlines.\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "a2778d317c104b622666352071c4f072bb840f3c", "url": "https://github.com/openhab/openhab-addons/commit/a2778d317c104b622666352071c4f072bb840f3c", "message": "Update readme example\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "35d770be2b4113b4003cf913da034f42556369a0", "url": "https://github.com/openhab/openhab-addons/commit/35d770be2b4113b4003cf913da034f42556369a0", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "cfd215d2c549a686bca67acc8a4a9eb3f514f45d", "url": "https://github.com/openhab/openhab-addons/commit/cfd215d2c549a686bca67acc8a4a9eb3f514f45d", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "feaa94ba24c09af90cee611a99f35ee716b49aec", "url": "https://github.com/openhab/openhab-addons/commit/feaa94ba24c09af90cee611a99f35ee716b49aec", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "4faee1d7892a112c2ca6cc7368aff872e99928b6", "url": "https://github.com/openhab/openhab-addons/commit/4faee1d7892a112c2ca6cc7368aff872e99928b6", "message": "BIG_DECIMAL_100\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:43Z", "type": "commit"}, {"oid": "4d2462868a7fb594870dc48cf50492e45160a3fb", "url": "https://github.com/openhab/openhab-addons/commit/4d2462868a7fb594870dc48cf50492e45160a3fb", "message": "remove repeative casting to percentType\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "commit"}, {"oid": "9f7a3457d60b5f8e9ba9e3076cc649c49ec40fa3", "url": "https://github.com/openhab/openhab-addons/commit/9f7a3457d60b5f8e9ba9e3076cc649c49ec40fa3", "message": "Swap warn to thing going offline for config issue.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "commit"}, {"oid": "3296ec6cd242e0140863c5f7ac2460f5e6b048f1", "url": "https://github.com/openhab/openhab-addons/commit/3296ec6cd242e0140863c5f7ac2460f5e6b048f1", "message": "Add to footer.xml\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "commit"}, {"oid": "d694f910060313a9b9ab49ea23c19c73fe6a37f7", "url": "https://github.com/openhab/openhab-addons/commit/d694f910060313a9b9ab49ea23c19c73fe6a37f7", "message": "reuse localBridge\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "commit"}, {"oid": "a5001dc5e1b0fe45a1e92aa51e788956b90acfeb", "url": "https://github.com/openhab/openhab-addons/commit/a5001dc5e1b0fe45a1e92aa51e788956b90acfeb", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/discovery/EspMilightHubDiscoveryService.java\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "commit"}, {"oid": "f5500607a4fb356cd1ec65f245d0cc8309e9d748", "url": "https://github.com/openhab/openhab-addons/commit/f5500607a4fb356cd1ec65f245d0cc8309e9d748", "message": "remove double up.\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "commit"}, {"oid": "5d6fb39b774f712ce80a74f8817fdd8644fd44bc", "url": "https://github.com/openhab/openhab-addons/commit/5d6fb39b774f712ce80a74f8817fdd8644fd44bc", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "commit"}, {"oid": "988e0c79488f83d97648c4029d348f635656f288", "url": "https://github.com/openhab/openhab-addons/commit/988e0c79488f83d97648c4029d348f635656f288", "message": "Spotless fixes\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "commit"}, {"oid": "fffd6799d4856222560e1d442f8476c20e8767bd", "url": "https://github.com/openhab/openhab-addons/commit/fffd6799d4856222560e1d442f8476c20e8767bd", "message": "update copyright header.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "commit"}, {"oid": "f5ab7f8506d0bb7296f70bd84b9225800d538029", "url": "https://github.com/openhab/openhab-addons/commit/f5ab7f8506d0bb7296f70bd84b9225800d538029", "message": "Remove hardcoded bridge\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "commit"}, {"oid": "f5ab7f8506d0bb7296f70bd84b9225800d538029", "url": "https://github.com/openhab/openhab-addons/commit/f5ab7f8506d0bb7296f70bd84b9225800d538029", "message": "Remove hardcoded bridge\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T00:39:44Z", "type": "forcePushed"}, {"oid": "2b2be940e9253e9c6037665a2a424e23c0c3aa92", "url": "https://github.com/openhab/openhab-addons/commit/2b2be940e9253e9c6037665a2a424e23c0c3aa92", "message": "use mqtt constant\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2021-01-26T01:16:43Z", "type": "commit"}, {"oid": "005a6903a7549a048fd90f187e0885e766555ef2", "url": "https://github.com/openhab/openhab-addons/commit/005a6903a7549a048fd90f187e0885e766555ef2", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/README.md\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2021-01-29T12:21:38Z", "type": "commit"}, {"oid": "f8af84db1f22fb8f09afa73357d40337844af286", "url": "https://github.com/openhab/openhab-addons/commit/f8af84db1f22fb8f09afa73357d40337844af286", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/README.md\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2021-01-29T12:21:50Z", "type": "commit"}, {"oid": "d540a6eab08bcdd48eec667dd106ed814f3307a4", "url": "https://github.com/openhab/openhab-addons/commit/d540a6eab08bcdd48eec667dd106ed814f3307a4", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/README.md\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2021-01-29T12:22:02Z", "type": "commit"}, {"oid": "de424e5734b49b0377f0db0b4d0ac87165cffb39", "url": "https://github.com/openhab/openhab-addons/commit/de424e5734b49b0377f0db0b4d0ac87165cffb39", "message": "Update bundles/org.openhab.binding.mqtt.espmilighthub/README.md\r\n\r\nSigned-off-by: Matthew Skinner <matt@pcmus.com>\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2021-01-29T12:22:14Z", "type": "commit"}]}