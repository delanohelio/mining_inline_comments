{"pr_number": 7093, "pr_title": "[valloxmv] additional channels support", "pr_createdAt": "2020-03-04T08:09:23Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7093", "timeline": [{"oid": "264d210c874bd34d72c94a0bd26fc5dca6a9328a", "url": "https://github.com/openhab/openhab-addons/commit/264d210c874bd34d72c94a0bd26fc5dca6a9328a", "message": "Additional channels into ValloxMV binding: https://community.openhab.org/t/new-binding-vallox-mv-ventilation-unit-series-beta/36735/102", "committedDate": "2020-03-04T07:38:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NTA4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r387865083", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Convert temperature to centKelvin (= (Celsius * 100) + 27315 )\n          \n          \n            \n                                // Convert temperature to centiKelvin (= (Celsius * 100) + 27315 )", "author": "J-N-K", "createdAt": "2020-03-04T18:52:08Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java", "diffHunk": "@@ -107,14 +107,14 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n                 }\n             } else if (ValloxMVBindingConstants.WRITABLE_CHANNELS_TEMPERATURE.contains(channelUID.getId())) {\n                 if (command instanceof QuantityType) {\n-                    // Convert temperature to millidegree Kelvin\n+                    // Convert temperature to centKelvin (= (Celsius * 100) + 27315 )", "originalCommit": "264d210c874bd34d72c94a0bd26fc5dca6a9328a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8589ac26029e4f32d4989f3eca9aca9afd1c20d", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\nindex 549db08a83..43a2c80bca 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n\n@@ -107,14 +107,14 @@ public class ValloxMVHandler extends BaseThingHandler {\n                 }\n             } else if (ValloxMVBindingConstants.WRITABLE_CHANNELS_TEMPERATURE.contains(channelUID.getId())) {\n                 if (command instanceof QuantityType) {\n-                    // Convert temperature to centKelvin (= (Celsius * 100) + 27315 )\n+                    // Convert temperature to centiKelvin (= (Celsius * 100) + 27315 )\n                     QuantityType<Temperature> quantity = ((QuantityType<Temperature>) command)\n                             .toUnit(SmartHomeUnits.KELVIN);\n                     if (quantity == null) {\n                         return;\n                     }\n-                    int centKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n-                    valloxSendSocket.request(channelUID, Integer.toString(centKelvin));\n+                    int centiKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n+                    valloxSendSocket.request(channelUID, Integer.toString(centiKelvin));\n                     valloxSendSocket.request(null, null);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NTIzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r387865234", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                int centKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n          \n          \n            \n                                int centiKelvin = quantity.multiply(new BigDecimal(100)).intValue();", "author": "J-N-K", "createdAt": "2020-03-04T18:52:27Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java", "diffHunk": "@@ -107,14 +107,14 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n                 }\n             } else if (ValloxMVBindingConstants.WRITABLE_CHANNELS_TEMPERATURE.contains(channelUID.getId())) {\n                 if (command instanceof QuantityType) {\n-                    // Convert temperature to millidegree Kelvin\n+                    // Convert temperature to centKelvin (= (Celsius * 100) + 27315 )\n                     QuantityType<Temperature> quantity = ((QuantityType<Temperature>) command)\n                             .toUnit(SmartHomeUnits.KELVIN);\n                     if (quantity == null) {\n                         return;\n                     }\n-                    int milliKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n-                    valloxSendSocket.request(channelUID, Integer.toString(milliKelvin));\n+                    int centKelvin = quantity.multiply(new BigDecimal(100)).intValue();", "originalCommit": "264d210c874bd34d72c94a0bd26fc5dca6a9328a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8589ac26029e4f32d4989f3eca9aca9afd1c20d", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\nindex 549db08a83..43a2c80bca 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n\n@@ -107,14 +107,14 @@ public class ValloxMVHandler extends BaseThingHandler {\n                 }\n             } else if (ValloxMVBindingConstants.WRITABLE_CHANNELS_TEMPERATURE.contains(channelUID.getId())) {\n                 if (command instanceof QuantityType) {\n-                    // Convert temperature to centKelvin (= (Celsius * 100) + 27315 )\n+                    // Convert temperature to centiKelvin (= (Celsius * 100) + 27315 )\n                     QuantityType<Temperature> quantity = ((QuantityType<Temperature>) command)\n                             .toUnit(SmartHomeUnits.KELVIN);\n                     if (quantity == null) {\n                         return;\n                     }\n-                    int centKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n-                    valloxSendSocket.request(channelUID, Integer.toString(centKelvin));\n+                    int centiKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n+                    valloxSendSocket.request(channelUID, Integer.toString(centiKelvin));\n                     valloxSendSocket.request(null, null);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NTU1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r387865554", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                valloxSendSocket.request(channelUID, Integer.toString(centKelvin));\n          \n          \n            \n                                valloxSendSocket.request(channelUID, Integer.toString(centiKelvin));", "author": "J-N-K", "createdAt": "2020-03-04T18:53:02Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java", "diffHunk": "@@ -107,14 +107,14 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n                 }\n             } else if (ValloxMVBindingConstants.WRITABLE_CHANNELS_TEMPERATURE.contains(channelUID.getId())) {\n                 if (command instanceof QuantityType) {\n-                    // Convert temperature to millidegree Kelvin\n+                    // Convert temperature to centKelvin (= (Celsius * 100) + 27315 )\n                     QuantityType<Temperature> quantity = ((QuantityType<Temperature>) command)\n                             .toUnit(SmartHomeUnits.KELVIN);\n                     if (quantity == null) {\n                         return;\n                     }\n-                    int milliKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n-                    valloxSendSocket.request(channelUID, Integer.toString(milliKelvin));\n+                    int centKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n+                    valloxSendSocket.request(channelUID, Integer.toString(centKelvin));", "originalCommit": "264d210c874bd34d72c94a0bd26fc5dca6a9328a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8589ac26029e4f32d4989f3eca9aca9afd1c20d", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\nindex 549db08a83..43a2c80bca 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n\n@@ -107,14 +107,14 @@ public class ValloxMVHandler extends BaseThingHandler {\n                 }\n             } else if (ValloxMVBindingConstants.WRITABLE_CHANNELS_TEMPERATURE.contains(channelUID.getId())) {\n                 if (command instanceof QuantityType) {\n-                    // Convert temperature to centKelvin (= (Celsius * 100) + 27315 )\n+                    // Convert temperature to centiKelvin (= (Celsius * 100) + 27315 )\n                     QuantityType<Temperature> quantity = ((QuantityType<Temperature>) command)\n                             .toUnit(SmartHomeUnits.KELVIN);\n                     if (quantity == null) {\n                         return;\n                     }\n-                    int centKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n-                    valloxSendSocket.request(channelUID, Integer.toString(centKelvin));\n+                    int centiKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n+                    valloxSendSocket.request(channelUID, Integer.toString(centiKelvin));\n                     valloxSendSocket.request(null, null);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2ODQ2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r387868465", "bodyText": "Since Java7 we can switch on String. Especiually with the large number of else taht have been added with this PR it would make sense to refactor that (channelUID.getId()would only be called once then)", "author": "J-N-K", "createdAt": "2020-03-04T18:58:19Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java", "diffHunk": "@@ -173,8 +181,13 @@ public ByteBuffer generateRequest() {\n             if (ValloxMVBindingConstants.CHANNEL_STATE.equals(channelUID.getId())) {", "originalCommit": "264d210c874bd34d72c94a0bd26fc5dca6a9328a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2NTIxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r388165217", "bodyText": "Fixed this into code already. At the same time created variable for updateState integer value as well:\nString strChannelUIDid = channelUID.getId();\nInteger intUpdateState = Integer.parseInt(updateState);", "author": "anttiisoaho", "createdAt": "2020-03-05T09:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2ODQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "709082c88c7538186680f909dc5291488db1c60e", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\nindex 789a2fd382..3a32a0786e 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n\n@@ -177,9 +177,11 @@ public class ValloxMVWebSocket {\n                 // requestData (Length 3, Command to get data 246, empty set, checksum [sum of everything before])\n                 return generateCustomRequest(246, new HashMap<Integer, Integer>());\n             }\n+            String strChannelUIDid = channelUID.getId();\n+            Integer intUpdateState = Integer.parseInt(updateState);\n             Map<Integer, Integer> request = new HashMap<>();\n-            if (ValloxMVBindingConstants.CHANNEL_STATE.equals(channelUID.getId())) {\n-                if (Integer.parseInt(updateState) == ValloxMVBindingConstants.STATE_FIREPLACE) {\n+            if (ValloxMVBindingConstants.CHANNEL_STATE == strChannelUIDid) {\n+                if (intUpdateState == ValloxMVBindingConstants.STATE_FIREPLACE) {\n                     // 15 Min fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n                     // CYC_FIREPLACE_TIMER (4613) = 15, checksum)\n                     // To do: we should check this case already in 'request' function and first request Vallox\n"}}, {"oid": "b8589ac26029e4f32d4989f3eca9aca9afd1c20d", "url": "https://github.com/openhab/openhab-addons/commit/b8589ac26029e4f32d4989f3eca9aca9afd1c20d", "message": "Apply suggestions from code review\n\nCo-Authored-By: J-N-K <J-N-K@users.noreply.github.com>", "committedDate": "2020-03-05T06:21:52Z", "type": "commit"}, {"oid": "709082c88c7538186680f909dc5291488db1c60e", "url": "https://github.com/openhab/openhab-addons/commit/709082c88c7538186680f909dc5291488db1c60e", "message": "Suggestions partially implemented, few channels still need to be changed to Switches\n\nSigned-off-by: aisoaho <aisoaho@gmail.com>", "committedDate": "2020-03-05T09:05:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyMjE2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r389022166", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Integer intUpdateState = Integer.parseInt(updateState);\n          \n          \n            \n                        int intUpdateState = Integer.parseInt(updateState);", "author": "J-N-K", "createdAt": "2020-03-06T16:57:29Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java", "diffHunk": "@@ -177,9 +177,11 @@ public ByteBuffer generateRequest() {\n                 // requestData (Length 3, Command to get data 246, empty set, checksum [sum of everything before])\n                 return generateCustomRequest(246, new HashMap<Integer, Integer>());\n             }\n+            String strChannelUIDid = channelUID.getId();\n+            Integer intUpdateState = Integer.parseInt(updateState);", "originalCommit": "709082c88c7538186680f909dc5291488db1c60e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1OTYyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r389259629", "bodyText": "I should have read your original suggestion more carefully. I was thinking this in the first place but simply did not want to change code more than necessary. In fact I was also wondering why we are playing with strings here as all Vallox device stuff are integers anyway - more specifically \"unsigned word\" which we don't have here but we could simply use int (excl. communication with a device).", "author": "anttiisoaho", "createdAt": "2020-03-07T14:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyMjE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwODYwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r389408601", "bodyText": "also this is now implemented", "author": "anttiisoaho", "createdAt": "2020-03-08T21:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyMjE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0f5ab478a8b45e864b6759a0eae68b01cd0fa314", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\nindex 3a32a0786e..a1ec162cae 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n\n@@ -168,99 +174,146 @@ public class ValloxMVWebSocket {\n             // Use bitwise operators to extract two rightmost bytes from the integer\n             byte b1 = (byte) (i & 0xff); // Rightmost byte\n             byte b2 = (byte) ((i >> 8) & 0xff); // Second rightmost byte\n-\n             return ByteBuffer.wrap(new byte[] { b1, b2 });\n         }\n \n         public ByteBuffer generateRequest() {\n-            if (updateState == null || channelUID == null) {\n+            if ((updateState == null) || (channelUID == null)) {\n                 // requestData (Length 3, Command to get data 246, empty set, checksum [sum of everything before])\n+                iValloxCmd = 246;\n                 return generateCustomRequest(246, new HashMap<Integer, Integer>());\n             }\n             String strChannelUIDid = channelUID.getId();\n-            Integer intUpdateState = Integer.parseInt(updateState);\n+            int iUpdateState = Integer.parseInt(updateState);\n             Map<Integer, Integer> request = new HashMap<>();\n-            if (ValloxMVBindingConstants.CHANNEL_STATE == strChannelUIDid) {\n-                if (intUpdateState == ValloxMVBindingConstants.STATE_FIREPLACE) {\n-                    // 15 Min fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 15, checksum)\n-                    // To do: we should check this case already in 'request' function and first request Vallox\n-                    // to provide value from modbus address 20545. Data to send: (3,250,20545,checksum)\n-                    // Vallox will reply with binary data (4,249,20545,value,checksum) from here we can save value to\n-                    // variable. After this 'request' function can request this state update, here we can use variable\n-                    // for setting timer value to modbus address 4613.\n-                    // Note: we should be able to request 2 values at a time, same if clause could be used for both\n-                    request.put(4612, 0);\n-                    request.put(4613, 15);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_ATHOME) {\n-                    // At Home (Length 8, Command to set data 249, CYC_STATE (4609) = 0, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n-                    request.put(4609, 0);\n-                    request.put(4612, 0);\n-                    request.put(4613, 0);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_AWAY) {\n-                    // Away (Length 8, Command to set data 249, CYC_STATE (4609) = 1, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n-                    request.put(4609, 1);\n-                    request.put(4612, 0);\n-                    request.put(4613, 0);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_BOOST) {\n-                    // 30 Min boost (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 30, CYC_FIREPLACE_TIMER\n-                    // (4613) = 0, checksum)\n-                    // To do: we should check this case already in 'request' function and first request Vallox\n-                    // to provide value from modbus address 20544. Data to send: (3,250,20544,checksum)\n-                    // Vallox will reply with binary data (4,249,20544,value,checksum) from here we can save value to\n-                    // variable. After this 'request' function can request this state update, here we can use variable\n-                    // for setting timer value to modbus address 4612.\n-                    // Note: we should be able to request 2 values at a time, same if clause could be used for both\n-                    request.put(4612, 30);\n-                    request.put(4613, 0);\n-                }\n-            } else if (ValloxMVBindingConstants.CHANNEL_ONOFF == strChannelUIDid) {\n-                request.put(4610, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE == strChannelUIDid) {\n-                request.put(20485, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE == strChannelUIDid) {\n-                request.put(20486, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20507, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20501, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20513, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20508, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20502, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20514, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIME == strChannelUIDid) {\n-                request.put(20544, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21766, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN == strChannelUIDid) {\n-                request.put(20487, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN == strChannelUIDid) {\n-                request.put(20488, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME == strChannelUIDid) {\n-                request.put(20545, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21767, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20493, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN == strChannelUIDid) {\n-                request.put(20494, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN == strChannelUIDid) {\n-                request.put(20495, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIME == strChannelUIDid) {\n-                request.put(20496, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21772, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(4615, intUpdateState);\n-            } else {\n-                return null;\n+            switch (strChannelUIDid) {\n+                case ValloxMVBindingConstants.CHANNEL_STATE:\n+                    switch (iUpdateState) {\n+                        case ValloxMVBindingConstants.STATE_FIREPLACE:\n+                            // Fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n+                            // CYC_FIREPLACE_TIMER (4613) = value from CYC_FIREPLACE_TIME, checksum)\n+                            // CYC_FIREPLACE_TIME is read during READ_TABLES and stored into outer class variable\n+                            if (ValloxMVWebSocket.iFireplaceTime < 1) {\n+                                // use 15 minutes in case not initialized (should never happen)\n+                                ValloxMVWebSocket.iFireplaceTime = 15;\n+                            }\n+                            if (OnOffType.ON.equals(ValloxMVWebSocket.ooFireplaceTimerEnabled)) {\n+                                logger.debug(\"Changing to Fireplace profile, timer {} minutes\",\n+                                    ValloxMVWebSocket.iFireplaceTime);\n+                            } else {\n+                                logger.debug(\"Changing to Fireplace profile, timer not enabled\");\n+                            }\n+                            request.put(4612, 0);\n+                            request.put(4613, ValloxMVWebSocket.iFireplaceTime);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_ATHOME:\n+                            // At Home (Length 8, Command to set data 249, CYC_STATE (4609) = 0,\n+                            // CYC_BOOST_TIMER (4612) = 0, CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            logger.debug(\"Changing to At Home profile\");\n+                            request.put(4609, 0);\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_AWAY:\n+                            // Away (Length 8, Command to set data 249, CYC_STATE (4609) = 1,\n+                            // CYC_BOOST_TIMER (4612) = 0, CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            logger.debug(\"Changing to Away profile\");\n+                            request.put(4609, 1);\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_BOOST:\n+                            // Boost (Length 6, Command to set data 249,\n+                            // CYC_BOOST_TIMER (4612) = value from CYC_BOOST_TIME,\n+                            // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            // CYC_BOOST_TIME is read during READ_TABLES and stored into outer class variable\n+                            if (ValloxMVWebSocket.iBoostTime < 1) {\n+                                // use 30 minutes in case not initialized (should never happen)\n+                                ValloxMVWebSocket.iBoostTime = 30;\n+                            }\n+                            if (OnOffType.ON.equals(ValloxMVWebSocket.ooBoostTimerEnabled)) {\n+                                logger.debug(\"Changing to Boost profile, timer {} minutes\",\n+                                    ValloxMVWebSocket.iBoostTime);\n+                            } else {\n+                                logger.debug(\"Changing to Boost profile, timer not enabled\");\n+                            }\n+                            request.put(4612, ValloxMVWebSocket.iBoostTime);\n+                            request.put(4613, 0);\n+                            break;\n+                        default:\n+                            // This should never happen. Let's get back to basic profile.\n+                            // Clearing boost and fireplace timers.\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                    }\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_ONOFF:\n+                    request.put(4610, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE:\n+                    request.put(20485, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE:\n+                    request.put(20486, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING:\n+                    request.put(20507, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING:\n+                    request.put(20501, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING:\n+                    request.put(20513, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET:\n+                    request.put(20508, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET:\n+                    request.put(20502, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET:\n+                    request.put(20514, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_TIME:\n+                    request.put(20544, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED:\n+                    request.put(21766, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN:\n+                    request.put(20487, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN:\n+                    request.put(20488, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME:\n+                    request.put(20545, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED:\n+                    request.put(21767, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET:\n+                    request.put(20493, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN:\n+                    request.put(20494, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN:\n+                    request.put(20495, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_TIME:\n+                    request.put(20496, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED:\n+                    request.put(21772, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED:\n+                    request.put(4615, iUpdateState);\n+                    break;\n+                default:\n+                    return null;\n             }\n+            iValloxCmd = 249;\n             return generateCustomRequest(249, request);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyMjIzMw==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r389022233", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (ValloxMVBindingConstants.CHANNEL_STATE == strChannelUIDid) {\n          \n          \n            \n                            if (intUpdateState == ValloxMVBindingConstants.STATE_FIREPLACE) {\n          \n          \n            \n                        switch (strChannelUIDid) {\n          \n          \n            \n                            case ValloxMVBindingConstants.CHANNEL_STATE:\n          \n          \n            \n                                switch (intUpdateState) {\n          \n          \n            \n                                    case ValloxMVBindingConstants.STATE_FIREPLACE:", "author": "J-N-K", "createdAt": "2020-03-06T16:57:35Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java", "diffHunk": "@@ -177,9 +177,11 @@ public ByteBuffer generateRequest() {\n                 // requestData (Length 3, Command to get data 246, empty set, checksum [sum of everything before])\n                 return generateCustomRequest(246, new HashMap<Integer, Integer>());\n             }\n+            String strChannelUIDid = channelUID.getId();\n+            Integer intUpdateState = Integer.parseInt(updateState);\n             Map<Integer, Integer> request = new HashMap<>();\n-            if (ValloxMVBindingConstants.CHANNEL_STATE.equals(channelUID.getId())) {\n-                if (Integer.parseInt(updateState) == ValloxMVBindingConstants.STATE_FIREPLACE) {\n+            if (ValloxMVBindingConstants.CHANNEL_STATE == strChannelUIDid) {\n+                if (intUpdateState == ValloxMVBindingConstants.STATE_FIREPLACE) {", "originalCommit": "709082c88c7538186680f909dc5291488db1c60e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f5ab478a8b45e864b6759a0eae68b01cd0fa314", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\nindex 3a32a0786e..a1ec162cae 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n\n@@ -168,99 +174,146 @@ public class ValloxMVWebSocket {\n             // Use bitwise operators to extract two rightmost bytes from the integer\n             byte b1 = (byte) (i & 0xff); // Rightmost byte\n             byte b2 = (byte) ((i >> 8) & 0xff); // Second rightmost byte\n-\n             return ByteBuffer.wrap(new byte[] { b1, b2 });\n         }\n \n         public ByteBuffer generateRequest() {\n-            if (updateState == null || channelUID == null) {\n+            if ((updateState == null) || (channelUID == null)) {\n                 // requestData (Length 3, Command to get data 246, empty set, checksum [sum of everything before])\n+                iValloxCmd = 246;\n                 return generateCustomRequest(246, new HashMap<Integer, Integer>());\n             }\n             String strChannelUIDid = channelUID.getId();\n-            Integer intUpdateState = Integer.parseInt(updateState);\n+            int iUpdateState = Integer.parseInt(updateState);\n             Map<Integer, Integer> request = new HashMap<>();\n-            if (ValloxMVBindingConstants.CHANNEL_STATE == strChannelUIDid) {\n-                if (intUpdateState == ValloxMVBindingConstants.STATE_FIREPLACE) {\n-                    // 15 Min fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 15, checksum)\n-                    // To do: we should check this case already in 'request' function and first request Vallox\n-                    // to provide value from modbus address 20545. Data to send: (3,250,20545,checksum)\n-                    // Vallox will reply with binary data (4,249,20545,value,checksum) from here we can save value to\n-                    // variable. After this 'request' function can request this state update, here we can use variable\n-                    // for setting timer value to modbus address 4613.\n-                    // Note: we should be able to request 2 values at a time, same if clause could be used for both\n-                    request.put(4612, 0);\n-                    request.put(4613, 15);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_ATHOME) {\n-                    // At Home (Length 8, Command to set data 249, CYC_STATE (4609) = 0, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n-                    request.put(4609, 0);\n-                    request.put(4612, 0);\n-                    request.put(4613, 0);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_AWAY) {\n-                    // Away (Length 8, Command to set data 249, CYC_STATE (4609) = 1, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n-                    request.put(4609, 1);\n-                    request.put(4612, 0);\n-                    request.put(4613, 0);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_BOOST) {\n-                    // 30 Min boost (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 30, CYC_FIREPLACE_TIMER\n-                    // (4613) = 0, checksum)\n-                    // To do: we should check this case already in 'request' function and first request Vallox\n-                    // to provide value from modbus address 20544. Data to send: (3,250,20544,checksum)\n-                    // Vallox will reply with binary data (4,249,20544,value,checksum) from here we can save value to\n-                    // variable. After this 'request' function can request this state update, here we can use variable\n-                    // for setting timer value to modbus address 4612.\n-                    // Note: we should be able to request 2 values at a time, same if clause could be used for both\n-                    request.put(4612, 30);\n-                    request.put(4613, 0);\n-                }\n-            } else if (ValloxMVBindingConstants.CHANNEL_ONOFF == strChannelUIDid) {\n-                request.put(4610, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE == strChannelUIDid) {\n-                request.put(20485, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE == strChannelUIDid) {\n-                request.put(20486, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20507, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20501, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20513, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20508, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20502, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20514, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIME == strChannelUIDid) {\n-                request.put(20544, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21766, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN == strChannelUIDid) {\n-                request.put(20487, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN == strChannelUIDid) {\n-                request.put(20488, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME == strChannelUIDid) {\n-                request.put(20545, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21767, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20493, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN == strChannelUIDid) {\n-                request.put(20494, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN == strChannelUIDid) {\n-                request.put(20495, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIME == strChannelUIDid) {\n-                request.put(20496, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21772, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(4615, intUpdateState);\n-            } else {\n-                return null;\n+            switch (strChannelUIDid) {\n+                case ValloxMVBindingConstants.CHANNEL_STATE:\n+                    switch (iUpdateState) {\n+                        case ValloxMVBindingConstants.STATE_FIREPLACE:\n+                            // Fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n+                            // CYC_FIREPLACE_TIMER (4613) = value from CYC_FIREPLACE_TIME, checksum)\n+                            // CYC_FIREPLACE_TIME is read during READ_TABLES and stored into outer class variable\n+                            if (ValloxMVWebSocket.iFireplaceTime < 1) {\n+                                // use 15 minutes in case not initialized (should never happen)\n+                                ValloxMVWebSocket.iFireplaceTime = 15;\n+                            }\n+                            if (OnOffType.ON.equals(ValloxMVWebSocket.ooFireplaceTimerEnabled)) {\n+                                logger.debug(\"Changing to Fireplace profile, timer {} minutes\",\n+                                    ValloxMVWebSocket.iFireplaceTime);\n+                            } else {\n+                                logger.debug(\"Changing to Fireplace profile, timer not enabled\");\n+                            }\n+                            request.put(4612, 0);\n+                            request.put(4613, ValloxMVWebSocket.iFireplaceTime);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_ATHOME:\n+                            // At Home (Length 8, Command to set data 249, CYC_STATE (4609) = 0,\n+                            // CYC_BOOST_TIMER (4612) = 0, CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            logger.debug(\"Changing to At Home profile\");\n+                            request.put(4609, 0);\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_AWAY:\n+                            // Away (Length 8, Command to set data 249, CYC_STATE (4609) = 1,\n+                            // CYC_BOOST_TIMER (4612) = 0, CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            logger.debug(\"Changing to Away profile\");\n+                            request.put(4609, 1);\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_BOOST:\n+                            // Boost (Length 6, Command to set data 249,\n+                            // CYC_BOOST_TIMER (4612) = value from CYC_BOOST_TIME,\n+                            // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            // CYC_BOOST_TIME is read during READ_TABLES and stored into outer class variable\n+                            if (ValloxMVWebSocket.iBoostTime < 1) {\n+                                // use 30 minutes in case not initialized (should never happen)\n+                                ValloxMVWebSocket.iBoostTime = 30;\n+                            }\n+                            if (OnOffType.ON.equals(ValloxMVWebSocket.ooBoostTimerEnabled)) {\n+                                logger.debug(\"Changing to Boost profile, timer {} minutes\",\n+                                    ValloxMVWebSocket.iBoostTime);\n+                            } else {\n+                                logger.debug(\"Changing to Boost profile, timer not enabled\");\n+                            }\n+                            request.put(4612, ValloxMVWebSocket.iBoostTime);\n+                            request.put(4613, 0);\n+                            break;\n+                        default:\n+                            // This should never happen. Let's get back to basic profile.\n+                            // Clearing boost and fireplace timers.\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                    }\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_ONOFF:\n+                    request.put(4610, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE:\n+                    request.put(20485, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE:\n+                    request.put(20486, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING:\n+                    request.put(20507, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING:\n+                    request.put(20501, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING:\n+                    request.put(20513, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET:\n+                    request.put(20508, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET:\n+                    request.put(20502, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET:\n+                    request.put(20514, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_TIME:\n+                    request.put(20544, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED:\n+                    request.put(21766, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN:\n+                    request.put(20487, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN:\n+                    request.put(20488, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME:\n+                    request.put(20545, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED:\n+                    request.put(21767, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET:\n+                    request.put(20493, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN:\n+                    request.put(20494, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN:\n+                    request.put(20495, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_TIME:\n+                    request.put(20496, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED:\n+                    request.put(21772, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED:\n+                    request.put(4615, iUpdateState);\n+                    break;\n+                default:\n+                    return null;\n             }\n+            iValloxCmd = 249;\n             return generateCustomRequest(249, request);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyNjM2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r389026365", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } else if (intUpdateState == ValloxMVBindingConstants.STATE_ATHOME) {\n          \n          \n            \n                                break;\n          \n          \n            \n                            case ValloxMVBindingConstants.STATE_ATHOME:", "author": "J-N-K", "createdAt": "2020-03-06T17:01:41Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java", "diffHunk": "@@ -190,19 +192,19 @@ public ByteBuffer generateRequest() {\n                     // Note: we should be able to request 2 values at a time, same if clause could be used for both\n                     request.put(4612, 0);\n                     request.put(4613, 15);\n-                } else if (Integer.parseInt(updateState) == ValloxMVBindingConstants.STATE_ATHOME) {\n+                } else if (intUpdateState == ValloxMVBindingConstants.STATE_ATHOME) {", "originalCommit": "709082c88c7538186680f909dc5291488db1c60e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f5ab478a8b45e864b6759a0eae68b01cd0fa314", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\nindex 3a32a0786e..a1ec162cae 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n\n@@ -168,99 +174,146 @@ public class ValloxMVWebSocket {\n             // Use bitwise operators to extract two rightmost bytes from the integer\n             byte b1 = (byte) (i & 0xff); // Rightmost byte\n             byte b2 = (byte) ((i >> 8) & 0xff); // Second rightmost byte\n-\n             return ByteBuffer.wrap(new byte[] { b1, b2 });\n         }\n \n         public ByteBuffer generateRequest() {\n-            if (updateState == null || channelUID == null) {\n+            if ((updateState == null) || (channelUID == null)) {\n                 // requestData (Length 3, Command to get data 246, empty set, checksum [sum of everything before])\n+                iValloxCmd = 246;\n                 return generateCustomRequest(246, new HashMap<Integer, Integer>());\n             }\n             String strChannelUIDid = channelUID.getId();\n-            Integer intUpdateState = Integer.parseInt(updateState);\n+            int iUpdateState = Integer.parseInt(updateState);\n             Map<Integer, Integer> request = new HashMap<>();\n-            if (ValloxMVBindingConstants.CHANNEL_STATE == strChannelUIDid) {\n-                if (intUpdateState == ValloxMVBindingConstants.STATE_FIREPLACE) {\n-                    // 15 Min fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 15, checksum)\n-                    // To do: we should check this case already in 'request' function and first request Vallox\n-                    // to provide value from modbus address 20545. Data to send: (3,250,20545,checksum)\n-                    // Vallox will reply with binary data (4,249,20545,value,checksum) from here we can save value to\n-                    // variable. After this 'request' function can request this state update, here we can use variable\n-                    // for setting timer value to modbus address 4613.\n-                    // Note: we should be able to request 2 values at a time, same if clause could be used for both\n-                    request.put(4612, 0);\n-                    request.put(4613, 15);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_ATHOME) {\n-                    // At Home (Length 8, Command to set data 249, CYC_STATE (4609) = 0, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n-                    request.put(4609, 0);\n-                    request.put(4612, 0);\n-                    request.put(4613, 0);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_AWAY) {\n-                    // Away (Length 8, Command to set data 249, CYC_STATE (4609) = 1, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n-                    request.put(4609, 1);\n-                    request.put(4612, 0);\n-                    request.put(4613, 0);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_BOOST) {\n-                    // 30 Min boost (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 30, CYC_FIREPLACE_TIMER\n-                    // (4613) = 0, checksum)\n-                    // To do: we should check this case already in 'request' function and first request Vallox\n-                    // to provide value from modbus address 20544. Data to send: (3,250,20544,checksum)\n-                    // Vallox will reply with binary data (4,249,20544,value,checksum) from here we can save value to\n-                    // variable. After this 'request' function can request this state update, here we can use variable\n-                    // for setting timer value to modbus address 4612.\n-                    // Note: we should be able to request 2 values at a time, same if clause could be used for both\n-                    request.put(4612, 30);\n-                    request.put(4613, 0);\n-                }\n-            } else if (ValloxMVBindingConstants.CHANNEL_ONOFF == strChannelUIDid) {\n-                request.put(4610, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE == strChannelUIDid) {\n-                request.put(20485, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE == strChannelUIDid) {\n-                request.put(20486, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20507, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20501, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20513, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20508, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20502, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20514, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIME == strChannelUIDid) {\n-                request.put(20544, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21766, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN == strChannelUIDid) {\n-                request.put(20487, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN == strChannelUIDid) {\n-                request.put(20488, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME == strChannelUIDid) {\n-                request.put(20545, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21767, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20493, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN == strChannelUIDid) {\n-                request.put(20494, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN == strChannelUIDid) {\n-                request.put(20495, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIME == strChannelUIDid) {\n-                request.put(20496, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21772, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(4615, intUpdateState);\n-            } else {\n-                return null;\n+            switch (strChannelUIDid) {\n+                case ValloxMVBindingConstants.CHANNEL_STATE:\n+                    switch (iUpdateState) {\n+                        case ValloxMVBindingConstants.STATE_FIREPLACE:\n+                            // Fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n+                            // CYC_FIREPLACE_TIMER (4613) = value from CYC_FIREPLACE_TIME, checksum)\n+                            // CYC_FIREPLACE_TIME is read during READ_TABLES and stored into outer class variable\n+                            if (ValloxMVWebSocket.iFireplaceTime < 1) {\n+                                // use 15 minutes in case not initialized (should never happen)\n+                                ValloxMVWebSocket.iFireplaceTime = 15;\n+                            }\n+                            if (OnOffType.ON.equals(ValloxMVWebSocket.ooFireplaceTimerEnabled)) {\n+                                logger.debug(\"Changing to Fireplace profile, timer {} minutes\",\n+                                    ValloxMVWebSocket.iFireplaceTime);\n+                            } else {\n+                                logger.debug(\"Changing to Fireplace profile, timer not enabled\");\n+                            }\n+                            request.put(4612, 0);\n+                            request.put(4613, ValloxMVWebSocket.iFireplaceTime);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_ATHOME:\n+                            // At Home (Length 8, Command to set data 249, CYC_STATE (4609) = 0,\n+                            // CYC_BOOST_TIMER (4612) = 0, CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            logger.debug(\"Changing to At Home profile\");\n+                            request.put(4609, 0);\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_AWAY:\n+                            // Away (Length 8, Command to set data 249, CYC_STATE (4609) = 1,\n+                            // CYC_BOOST_TIMER (4612) = 0, CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            logger.debug(\"Changing to Away profile\");\n+                            request.put(4609, 1);\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_BOOST:\n+                            // Boost (Length 6, Command to set data 249,\n+                            // CYC_BOOST_TIMER (4612) = value from CYC_BOOST_TIME,\n+                            // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            // CYC_BOOST_TIME is read during READ_TABLES and stored into outer class variable\n+                            if (ValloxMVWebSocket.iBoostTime < 1) {\n+                                // use 30 minutes in case not initialized (should never happen)\n+                                ValloxMVWebSocket.iBoostTime = 30;\n+                            }\n+                            if (OnOffType.ON.equals(ValloxMVWebSocket.ooBoostTimerEnabled)) {\n+                                logger.debug(\"Changing to Boost profile, timer {} minutes\",\n+                                    ValloxMVWebSocket.iBoostTime);\n+                            } else {\n+                                logger.debug(\"Changing to Boost profile, timer not enabled\");\n+                            }\n+                            request.put(4612, ValloxMVWebSocket.iBoostTime);\n+                            request.put(4613, 0);\n+                            break;\n+                        default:\n+                            // This should never happen. Let's get back to basic profile.\n+                            // Clearing boost and fireplace timers.\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                    }\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_ONOFF:\n+                    request.put(4610, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE:\n+                    request.put(20485, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE:\n+                    request.put(20486, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING:\n+                    request.put(20507, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING:\n+                    request.put(20501, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING:\n+                    request.put(20513, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET:\n+                    request.put(20508, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET:\n+                    request.put(20502, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET:\n+                    request.put(20514, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_TIME:\n+                    request.put(20544, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED:\n+                    request.put(21766, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN:\n+                    request.put(20487, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN:\n+                    request.put(20488, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME:\n+                    request.put(20545, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED:\n+                    request.put(21767, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET:\n+                    request.put(20493, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN:\n+                    request.put(20494, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN:\n+                    request.put(20495, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_TIME:\n+                    request.put(20496, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED:\n+                    request.put(21772, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED:\n+                    request.put(4615, iUpdateState);\n+                    break;\n+                default:\n+                    return null;\n             }\n+            iValloxCmd = 249;\n             return generateCustomRequest(249, request);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyNjkwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r389026904", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (ValloxMVBindingConstants.CHANNEL_ONOFF == strChannelUIDid) {\n          \n          \n            \n                            default:\n          \n          \n            \n                        }\n          \n          \n            \n                        break;\n          \n          \n            \n                        case ValloxMVBindingConstants.CHANNEL_ONOFF:", "author": "J-N-K", "createdAt": "2020-03-06T17:02:46Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java", "diffHunk": "@@ -214,48 +216,48 @@ public ByteBuffer generateRequest() {\n                     request.put(4612, 30);\n                     request.put(4613, 0);\n                 }\n-            } else if (ValloxMVBindingConstants.CHANNEL_ONOFF.equals(channelUID.getId())) {\n-                request.put(4610, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE.equals(channelUID.getId())) {\n-                request.put(20485, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE.equals(channelUID.getId())) {\n-                request.put(20486, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING.equals(channelUID.getId())) {\n-                request.put(20507, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING.equals(channelUID.getId())) {\n-                request.put(20501, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING.equals(channelUID.getId())) {\n-                request.put(20513, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET.equals(channelUID.getId())) {\n-                request.put(20508, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET.equals(channelUID.getId())) {\n-                request.put(20502, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET.equals(channelUID.getId())) {\n-                request.put(20514, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIME.equals(channelUID.getId())) {\n-                request.put(20544, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED.equals(channelUID.getId())) {\n-                request.put(21766, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN.equals(channelUID.getId())) {\n-                request.put(20487, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN.equals(channelUID.getId())) {\n-                request.put(20488, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME.equals(channelUID.getId())) {\n-                request.put(20545, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED.equals(channelUID.getId())) {\n-                request.put(21767, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET.equals(channelUID.getId())) {\n-                request.put(20493, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN.equals(channelUID.getId())) {\n-                request.put(20494, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN.equals(channelUID.getId())) {\n-                request.put(20495, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIME.equals(channelUID.getId())) {\n-                request.put(20496, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED.equals(channelUID.getId())) {\n-                request.put(21772, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED.equals(channelUID.getId())) {\n-                request.put(4615, Integer.parseInt(updateState));\n+            } else if (ValloxMVBindingConstants.CHANNEL_ONOFF == strChannelUIDid) {", "originalCommit": "709082c88c7538186680f909dc5291488db1c60e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f5ab478a8b45e864b6759a0eae68b01cd0fa314", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\nindex 3a32a0786e..a1ec162cae 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n\n@@ -168,99 +174,146 @@ public class ValloxMVWebSocket {\n             // Use bitwise operators to extract two rightmost bytes from the integer\n             byte b1 = (byte) (i & 0xff); // Rightmost byte\n             byte b2 = (byte) ((i >> 8) & 0xff); // Second rightmost byte\n-\n             return ByteBuffer.wrap(new byte[] { b1, b2 });\n         }\n \n         public ByteBuffer generateRequest() {\n-            if (updateState == null || channelUID == null) {\n+            if ((updateState == null) || (channelUID == null)) {\n                 // requestData (Length 3, Command to get data 246, empty set, checksum [sum of everything before])\n+                iValloxCmd = 246;\n                 return generateCustomRequest(246, new HashMap<Integer, Integer>());\n             }\n             String strChannelUIDid = channelUID.getId();\n-            Integer intUpdateState = Integer.parseInt(updateState);\n+            int iUpdateState = Integer.parseInt(updateState);\n             Map<Integer, Integer> request = new HashMap<>();\n-            if (ValloxMVBindingConstants.CHANNEL_STATE == strChannelUIDid) {\n-                if (intUpdateState == ValloxMVBindingConstants.STATE_FIREPLACE) {\n-                    // 15 Min fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 15, checksum)\n-                    // To do: we should check this case already in 'request' function and first request Vallox\n-                    // to provide value from modbus address 20545. Data to send: (3,250,20545,checksum)\n-                    // Vallox will reply with binary data (4,249,20545,value,checksum) from here we can save value to\n-                    // variable. After this 'request' function can request this state update, here we can use variable\n-                    // for setting timer value to modbus address 4613.\n-                    // Note: we should be able to request 2 values at a time, same if clause could be used for both\n-                    request.put(4612, 0);\n-                    request.put(4613, 15);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_ATHOME) {\n-                    // At Home (Length 8, Command to set data 249, CYC_STATE (4609) = 0, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n-                    request.put(4609, 0);\n-                    request.put(4612, 0);\n-                    request.put(4613, 0);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_AWAY) {\n-                    // Away (Length 8, Command to set data 249, CYC_STATE (4609) = 1, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n-                    request.put(4609, 1);\n-                    request.put(4612, 0);\n-                    request.put(4613, 0);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_BOOST) {\n-                    // 30 Min boost (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 30, CYC_FIREPLACE_TIMER\n-                    // (4613) = 0, checksum)\n-                    // To do: we should check this case already in 'request' function and first request Vallox\n-                    // to provide value from modbus address 20544. Data to send: (3,250,20544,checksum)\n-                    // Vallox will reply with binary data (4,249,20544,value,checksum) from here we can save value to\n-                    // variable. After this 'request' function can request this state update, here we can use variable\n-                    // for setting timer value to modbus address 4612.\n-                    // Note: we should be able to request 2 values at a time, same if clause could be used for both\n-                    request.put(4612, 30);\n-                    request.put(4613, 0);\n-                }\n-            } else if (ValloxMVBindingConstants.CHANNEL_ONOFF == strChannelUIDid) {\n-                request.put(4610, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE == strChannelUIDid) {\n-                request.put(20485, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE == strChannelUIDid) {\n-                request.put(20486, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20507, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20501, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20513, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20508, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20502, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20514, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIME == strChannelUIDid) {\n-                request.put(20544, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21766, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN == strChannelUIDid) {\n-                request.put(20487, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN == strChannelUIDid) {\n-                request.put(20488, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME == strChannelUIDid) {\n-                request.put(20545, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21767, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20493, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN == strChannelUIDid) {\n-                request.put(20494, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN == strChannelUIDid) {\n-                request.put(20495, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIME == strChannelUIDid) {\n-                request.put(20496, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21772, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(4615, intUpdateState);\n-            } else {\n-                return null;\n+            switch (strChannelUIDid) {\n+                case ValloxMVBindingConstants.CHANNEL_STATE:\n+                    switch (iUpdateState) {\n+                        case ValloxMVBindingConstants.STATE_FIREPLACE:\n+                            // Fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n+                            // CYC_FIREPLACE_TIMER (4613) = value from CYC_FIREPLACE_TIME, checksum)\n+                            // CYC_FIREPLACE_TIME is read during READ_TABLES and stored into outer class variable\n+                            if (ValloxMVWebSocket.iFireplaceTime < 1) {\n+                                // use 15 minutes in case not initialized (should never happen)\n+                                ValloxMVWebSocket.iFireplaceTime = 15;\n+                            }\n+                            if (OnOffType.ON.equals(ValloxMVWebSocket.ooFireplaceTimerEnabled)) {\n+                                logger.debug(\"Changing to Fireplace profile, timer {} minutes\",\n+                                    ValloxMVWebSocket.iFireplaceTime);\n+                            } else {\n+                                logger.debug(\"Changing to Fireplace profile, timer not enabled\");\n+                            }\n+                            request.put(4612, 0);\n+                            request.put(4613, ValloxMVWebSocket.iFireplaceTime);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_ATHOME:\n+                            // At Home (Length 8, Command to set data 249, CYC_STATE (4609) = 0,\n+                            // CYC_BOOST_TIMER (4612) = 0, CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            logger.debug(\"Changing to At Home profile\");\n+                            request.put(4609, 0);\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_AWAY:\n+                            // Away (Length 8, Command to set data 249, CYC_STATE (4609) = 1,\n+                            // CYC_BOOST_TIMER (4612) = 0, CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            logger.debug(\"Changing to Away profile\");\n+                            request.put(4609, 1);\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_BOOST:\n+                            // Boost (Length 6, Command to set data 249,\n+                            // CYC_BOOST_TIMER (4612) = value from CYC_BOOST_TIME,\n+                            // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            // CYC_BOOST_TIME is read during READ_TABLES and stored into outer class variable\n+                            if (ValloxMVWebSocket.iBoostTime < 1) {\n+                                // use 30 minutes in case not initialized (should never happen)\n+                                ValloxMVWebSocket.iBoostTime = 30;\n+                            }\n+                            if (OnOffType.ON.equals(ValloxMVWebSocket.ooBoostTimerEnabled)) {\n+                                logger.debug(\"Changing to Boost profile, timer {} minutes\",\n+                                    ValloxMVWebSocket.iBoostTime);\n+                            } else {\n+                                logger.debug(\"Changing to Boost profile, timer not enabled\");\n+                            }\n+                            request.put(4612, ValloxMVWebSocket.iBoostTime);\n+                            request.put(4613, 0);\n+                            break;\n+                        default:\n+                            // This should never happen. Let's get back to basic profile.\n+                            // Clearing boost and fireplace timers.\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                    }\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_ONOFF:\n+                    request.put(4610, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE:\n+                    request.put(20485, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE:\n+                    request.put(20486, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING:\n+                    request.put(20507, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING:\n+                    request.put(20501, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING:\n+                    request.put(20513, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET:\n+                    request.put(20508, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET:\n+                    request.put(20502, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET:\n+                    request.put(20514, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_TIME:\n+                    request.put(20544, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED:\n+                    request.put(21766, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN:\n+                    request.put(20487, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN:\n+                    request.put(20488, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME:\n+                    request.put(20545, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED:\n+                    request.put(21767, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET:\n+                    request.put(20493, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN:\n+                    request.put(20494, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN:\n+                    request.put(20495, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_TIME:\n+                    request.put(20496, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED:\n+                    request.put(21772, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED:\n+                    request.put(4615, iUpdateState);\n+                    break;\n+                default:\n+                    return null;\n             }\n+            iValloxCmd = 249;\n             return generateCustomRequest(249, request);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyNzYxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r389027611", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED == strChannelUIDid) {\n          \n          \n            \n                            request.put(4615, intUpdateState);\n          \n          \n            \n                        } else {\n          \n          \n            \n                            return null;\n          \n          \n            \n                        }\n          \n          \n            \n                            case ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED:\n          \n          \n            \n                                request.put(4615, intUpdateState);\n          \n          \n            \n                                break;\n          \n          \n            \n                            default:\n          \n          \n            \n                                return null;\n          \n          \n            \n                        }", "author": "J-N-K", "createdAt": "2020-03-06T17:04:12Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java", "diffHunk": "@@ -214,48 +216,48 @@ public ByteBuffer generateRequest() {\n                     request.put(4612, 30);\n                     request.put(4613, 0);\n                 }\n-            } else if (ValloxMVBindingConstants.CHANNEL_ONOFF.equals(channelUID.getId())) {\n-                request.put(4610, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE.equals(channelUID.getId())) {\n-                request.put(20485, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE.equals(channelUID.getId())) {\n-                request.put(20486, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING.equals(channelUID.getId())) {\n-                request.put(20507, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING.equals(channelUID.getId())) {\n-                request.put(20501, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING.equals(channelUID.getId())) {\n-                request.put(20513, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET.equals(channelUID.getId())) {\n-                request.put(20508, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET.equals(channelUID.getId())) {\n-                request.put(20502, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET.equals(channelUID.getId())) {\n-                request.put(20514, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIME.equals(channelUID.getId())) {\n-                request.put(20544, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED.equals(channelUID.getId())) {\n-                request.put(21766, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN.equals(channelUID.getId())) {\n-                request.put(20487, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN.equals(channelUID.getId())) {\n-                request.put(20488, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME.equals(channelUID.getId())) {\n-                request.put(20545, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED.equals(channelUID.getId())) {\n-                request.put(21767, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET.equals(channelUID.getId())) {\n-                request.put(20493, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN.equals(channelUID.getId())) {\n-                request.put(20494, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN.equals(channelUID.getId())) {\n-                request.put(20495, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIME.equals(channelUID.getId())) {\n-                request.put(20496, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED.equals(channelUID.getId())) {\n-                request.put(21772, Integer.parseInt(updateState));\n-            } else if (ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED.equals(channelUID.getId())) {\n-                request.put(4615, Integer.parseInt(updateState));\n+            } else if (ValloxMVBindingConstants.CHANNEL_ONOFF == strChannelUIDid) {\n+                request.put(4610, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE == strChannelUIDid) {\n+                request.put(20485, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE == strChannelUIDid) {\n+                request.put(20486, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING == strChannelUIDid) {\n+                request.put(20507, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING == strChannelUIDid) {\n+                request.put(20501, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING == strChannelUIDid) {\n+                request.put(20513, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET == strChannelUIDid) {\n+                request.put(20508, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET == strChannelUIDid) {\n+                request.put(20502, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET == strChannelUIDid) {\n+                request.put(20514, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIME == strChannelUIDid) {\n+                request.put(20544, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED == strChannelUIDid) {\n+                request.put(21766, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN == strChannelUIDid) {\n+                request.put(20487, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN == strChannelUIDid) {\n+                request.put(20488, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME == strChannelUIDid) {\n+                request.put(20545, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED == strChannelUIDid) {\n+                request.put(21767, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET == strChannelUIDid) {\n+                request.put(20493, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN == strChannelUIDid) {\n+                request.put(20494, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN == strChannelUIDid) {\n+                request.put(20495, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIME == strChannelUIDid) {\n+                request.put(20496, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED == strChannelUIDid) {\n+                request.put(21772, intUpdateState);\n+            } else if (ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED == strChannelUIDid) {\n+                request.put(4615, intUpdateState);\n             } else {\n                 return null;\n             }", "originalCommit": "709082c88c7538186680f909dc5291488db1c60e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f5ab478a8b45e864b6759a0eae68b01cd0fa314", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\nindex 3a32a0786e..a1ec162cae 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n\n@@ -168,99 +174,146 @@ public class ValloxMVWebSocket {\n             // Use bitwise operators to extract two rightmost bytes from the integer\n             byte b1 = (byte) (i & 0xff); // Rightmost byte\n             byte b2 = (byte) ((i >> 8) & 0xff); // Second rightmost byte\n-\n             return ByteBuffer.wrap(new byte[] { b1, b2 });\n         }\n \n         public ByteBuffer generateRequest() {\n-            if (updateState == null || channelUID == null) {\n+            if ((updateState == null) || (channelUID == null)) {\n                 // requestData (Length 3, Command to get data 246, empty set, checksum [sum of everything before])\n+                iValloxCmd = 246;\n                 return generateCustomRequest(246, new HashMap<Integer, Integer>());\n             }\n             String strChannelUIDid = channelUID.getId();\n-            Integer intUpdateState = Integer.parseInt(updateState);\n+            int iUpdateState = Integer.parseInt(updateState);\n             Map<Integer, Integer> request = new HashMap<>();\n-            if (ValloxMVBindingConstants.CHANNEL_STATE == strChannelUIDid) {\n-                if (intUpdateState == ValloxMVBindingConstants.STATE_FIREPLACE) {\n-                    // 15 Min fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 15, checksum)\n-                    // To do: we should check this case already in 'request' function and first request Vallox\n-                    // to provide value from modbus address 20545. Data to send: (3,250,20545,checksum)\n-                    // Vallox will reply with binary data (4,249,20545,value,checksum) from here we can save value to\n-                    // variable. After this 'request' function can request this state update, here we can use variable\n-                    // for setting timer value to modbus address 4613.\n-                    // Note: we should be able to request 2 values at a time, same if clause could be used for both\n-                    request.put(4612, 0);\n-                    request.put(4613, 15);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_ATHOME) {\n-                    // At Home (Length 8, Command to set data 249, CYC_STATE (4609) = 0, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n-                    request.put(4609, 0);\n-                    request.put(4612, 0);\n-                    request.put(4613, 0);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_AWAY) {\n-                    // Away (Length 8, Command to set data 249, CYC_STATE (4609) = 1, CYC_BOOST_TIMER (4612) = 0,\n-                    // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n-                    request.put(4609, 1);\n-                    request.put(4612, 0);\n-                    request.put(4613, 0);\n-                } else if (intUpdateState == ValloxMVBindingConstants.STATE_BOOST) {\n-                    // 30 Min boost (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 30, CYC_FIREPLACE_TIMER\n-                    // (4613) = 0, checksum)\n-                    // To do: we should check this case already in 'request' function and first request Vallox\n-                    // to provide value from modbus address 20544. Data to send: (3,250,20544,checksum)\n-                    // Vallox will reply with binary data (4,249,20544,value,checksum) from here we can save value to\n-                    // variable. After this 'request' function can request this state update, here we can use variable\n-                    // for setting timer value to modbus address 4612.\n-                    // Note: we should be able to request 2 values at a time, same if clause could be used for both\n-                    request.put(4612, 30);\n-                    request.put(4613, 0);\n-                }\n-            } else if (ValloxMVBindingConstants.CHANNEL_ONOFF == strChannelUIDid) {\n-                request.put(4610, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE == strChannelUIDid) {\n-                request.put(20485, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE == strChannelUIDid) {\n-                request.put(20486, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20507, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20501, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING == strChannelUIDid) {\n-                request.put(20513, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20508, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20502, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20514, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIME == strChannelUIDid) {\n-                request.put(20544, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21766, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN == strChannelUIDid) {\n-                request.put(20487, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN == strChannelUIDid) {\n-                request.put(20488, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME == strChannelUIDid) {\n-                request.put(20545, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21767, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET == strChannelUIDid) {\n-                request.put(20493, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN == strChannelUIDid) {\n-                request.put(20494, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN == strChannelUIDid) {\n-                request.put(20495, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIME == strChannelUIDid) {\n-                request.put(20496, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(21772, intUpdateState);\n-            } else if (ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED == strChannelUIDid) {\n-                request.put(4615, intUpdateState);\n-            } else {\n-                return null;\n+            switch (strChannelUIDid) {\n+                case ValloxMVBindingConstants.CHANNEL_STATE:\n+                    switch (iUpdateState) {\n+                        case ValloxMVBindingConstants.STATE_FIREPLACE:\n+                            // Fireplace (Length 6, Command to set data 249, CYC_BOOST_TIMER (4612) = 0,\n+                            // CYC_FIREPLACE_TIMER (4613) = value from CYC_FIREPLACE_TIME, checksum)\n+                            // CYC_FIREPLACE_TIME is read during READ_TABLES and stored into outer class variable\n+                            if (ValloxMVWebSocket.iFireplaceTime < 1) {\n+                                // use 15 minutes in case not initialized (should never happen)\n+                                ValloxMVWebSocket.iFireplaceTime = 15;\n+                            }\n+                            if (OnOffType.ON.equals(ValloxMVWebSocket.ooFireplaceTimerEnabled)) {\n+                                logger.debug(\"Changing to Fireplace profile, timer {} minutes\",\n+                                    ValloxMVWebSocket.iFireplaceTime);\n+                            } else {\n+                                logger.debug(\"Changing to Fireplace profile, timer not enabled\");\n+                            }\n+                            request.put(4612, 0);\n+                            request.put(4613, ValloxMVWebSocket.iFireplaceTime);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_ATHOME:\n+                            // At Home (Length 8, Command to set data 249, CYC_STATE (4609) = 0,\n+                            // CYC_BOOST_TIMER (4612) = 0, CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            logger.debug(\"Changing to At Home profile\");\n+                            request.put(4609, 0);\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_AWAY:\n+                            // Away (Length 8, Command to set data 249, CYC_STATE (4609) = 1,\n+                            // CYC_BOOST_TIMER (4612) = 0, CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            logger.debug(\"Changing to Away profile\");\n+                            request.put(4609, 1);\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                            break;\n+                        case ValloxMVBindingConstants.STATE_BOOST:\n+                            // Boost (Length 6, Command to set data 249,\n+                            // CYC_BOOST_TIMER (4612) = value from CYC_BOOST_TIME,\n+                            // CYC_FIREPLACE_TIMER (4613) = 0, checksum)\n+                            // CYC_BOOST_TIME is read during READ_TABLES and stored into outer class variable\n+                            if (ValloxMVWebSocket.iBoostTime < 1) {\n+                                // use 30 minutes in case not initialized (should never happen)\n+                                ValloxMVWebSocket.iBoostTime = 30;\n+                            }\n+                            if (OnOffType.ON.equals(ValloxMVWebSocket.ooBoostTimerEnabled)) {\n+                                logger.debug(\"Changing to Boost profile, timer {} minutes\",\n+                                    ValloxMVWebSocket.iBoostTime);\n+                            } else {\n+                                logger.debug(\"Changing to Boost profile, timer not enabled\");\n+                            }\n+                            request.put(4612, ValloxMVWebSocket.iBoostTime);\n+                            request.put(4613, 0);\n+                            break;\n+                        default:\n+                            // This should never happen. Let's get back to basic profile.\n+                            // Clearing boost and fireplace timers.\n+                            request.put(4612, 0);\n+                            request.put(4613, 0);\n+                    }\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_ONOFF:\n+                    request.put(4610, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTR_FAN_BALANCE_BASE:\n+                    request.put(20485, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_SUPP_FAN_BALANCE_BASE:\n+                    request.put(20486, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_HOME_SPEED_SETTING:\n+                    request.put(20507, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_AWAY_SPEED_SETTING:\n+                    request.put(20501, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_SPEED_SETTING:\n+                    request.put(20513, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_HOME_AIR_TEMP_TARGET:\n+                    request.put(20508, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_AWAY_AIR_TEMP_TARGET:\n+                    request.put(20502, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_AIR_TEMP_TARGET:\n+                    request.put(20514, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_TIME:\n+                    request.put(20544, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_BOOST_TIMER_ENABLED:\n+                    request.put(21766, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_EXTR_FAN:\n+                    request.put(20487, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_SUPP_FAN:\n+                    request.put(20488, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIME:\n+                    request.put(20545, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_FIREPLACE_TIMER_ENABLED:\n+                    request.put(21767, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_AIR_TEMP_TARGET:\n+                    request.put(20493, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_EXTR_FAN:\n+                    request.put(20494, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_SUPP_FAN:\n+                    request.put(20495, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_TIME:\n+                    request.put(20496, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_EXTRA_TIMER_ENABLED:\n+                    request.put(21772, iUpdateState);\n+                    break;\n+                case ValloxMVBindingConstants.CHANNEL_WEEKLY_TIMER_ENABLED:\n+                    request.put(4615, iUpdateState);\n+                    break;\n+                default:\n+                    return null;\n             }\n+            iValloxCmd = 249;\n             return generateCustomRequest(249, request);\n         }\n \n"}}, {"oid": "0f5ab478a8b45e864b6759a0eae68b01cd0fa314", "url": "https://github.com/openhab/openhab-addons/commit/0f5ab478a8b45e864b6759a0eae68b01cd0fa314", "message": "Suggestions implemented\n\nSigned-off-by: aisoaho <aisoaho@gmail.com>", "committedDate": "2020-03-08T21:39:58Z", "type": "commit"}, {"oid": "09898acac7ffaca0b7069b9a003e1fab731a72f5", "url": "https://github.com/openhab/openhab-addons/commit/09898acac7ffaca0b7069b9a003e1fab731a72f5", "message": "Fixed readme / on/off types\n\nSigned-off-by: aisoaho <aisoaho@gmail.com>", "committedDate": "2020-03-09T05:59:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjEzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r390032138", "bodyText": "Any reason this couldn't be done asynchronously with a scheduler?", "author": "cpmeister", "createdAt": "2020-03-10T00:26:25Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java", "diffHunk": "@@ -75,48 +75,60 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n                 valloxSendSocket.request(null, null);\n             }\n         } else {\n+            String strUpdateValue = \"\";\n             if (ValloxMVBindingConstants.CHANNEL_STATE.equals(channelUID.getId())) {\n                 try {\n                     int cmd = Integer.parseInt(command.toString());\n                     if ((cmd == ValloxMVBindingConstants.STATE_FIREPLACE)\n                             || (cmd == ValloxMVBindingConstants.STATE_ATHOME)\n                             || (cmd == ValloxMVBindingConstants.STATE_AWAY)\n                             || (cmd == ValloxMVBindingConstants.STATE_BOOST)) {\n-                        logger.debug(\"Changing state to: {}\", command);\n-                        // Open WebSocket\n-                        valloxSendSocket.request(channelUID, command.toString());\n-                        valloxSendSocket.request(null, null);\n+                        //logger.debug(\"Changing state to: {}\", command);\n+                        strUpdateValue = command.toString();\n                     }\n                 } catch (NumberFormatException nfe) {\n                     // Other commands like refresh\n                     return;\n                 }\n-            } else if (ValloxMVBindingConstants.CHANNEL_ONOFF.equals(channelUID.getId())) {\n-                if (OnOffType.ON.equals(command)) {\n-                    valloxSendSocket.request(channelUID, \"0\");\n-                    valloxSendSocket.request(null, null);\n-                } else if (OnOffType.OFF.equals(command)) {\n-                    valloxSendSocket.request(channelUID, \"5\");\n-                    valloxSendSocket.request(null, null);\n+            } else if (ValloxMVBindingConstants.WRITABLE_CHANNELS_SWITCHES.contains(channelUID.getId())) {\n+                if (ValloxMVBindingConstants.CHANNEL_ONOFF.equals(channelUID.getId())) {\n+                    // Vallox MV MODE: Normal mode = 0, Switch off = 5\n+                    strUpdateValue = (OnOffType.ON.equals(command)) ? \"0\" : \"5\";\n+                } else {\n+                    // Switches with ON = 1, OFF = 0\n+                    strUpdateValue = (OnOffType.ON.equals(command)) ? \"1\" : \"0\";\n                 }\n             } else if (ValloxMVBindingConstants.WRITABLE_CHANNELS_DIMENSIONLESS.contains(channelUID.getId())) {\n                 if (command instanceof QuantityType) {\n                     QuantityType<Dimensionless> quantity = (QuantityType<Dimensionless>) command;\n-                    valloxSendSocket.request(channelUID, Integer.toString(quantity.intValue()));\n-                    valloxSendSocket.request(null, null);\n+                    strUpdateValue = Integer.toString(quantity.intValue());\n                 }\n             } else if (ValloxMVBindingConstants.WRITABLE_CHANNELS_TEMPERATURE.contains(channelUID.getId())) {\n                 if (command instanceof QuantityType) {\n-                    // Convert temperature to millidegree Kelvin\n+                    // Convert temperature to centiKelvin (= (Celsius * 100) + 27315 )\n                     QuantityType<Temperature> quantity = ((QuantityType<Temperature>) command)\n                             .toUnit(SmartHomeUnits.KELVIN);\n                     if (quantity == null) {\n                         return;\n                     }\n-                    int milliKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n-                    valloxSendSocket.request(channelUID, Integer.toString(milliKelvin));\n-                    valloxSendSocket.request(null, null);\n+                    int centiKelvin = quantity.multiply(new BigDecimal(100)).intValue();\n+                    strUpdateValue = Integer.toString(centiKelvin);\n                 }\n+            } else {\n+                // Not writable channel\n+                return;\n+            }\n+            if (strUpdateValue != \"\") {\n+                // Open WebSocket\n+                valloxSendSocket.request(channelUID, strUpdateValue);\n+                // We should wait some time to let device process the data\n+                try {\n+                    Thread.sleep(500);\n+                } catch (InterruptedException e) {\n+                    // sleep interrupted, we will get updated values during next data update cycle\n+                    return;\n+                }\n+                valloxSendSocket.request(null, null);", "originalCommit": "09898acac7ffaca0b7069b9a003e1fab731a72f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwODMyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r390108327", "bodyText": "To be honest with you, I'm not sure. @bjoernbrings maybe you can give some light here?  What I did was that I added 500ms sleep in between.", "author": "anttiisoaho", "createdAt": "2020-03-10T05:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MDE0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r391290140", "bodyText": "Not sure why the sleep is required. Idea is to update a state and to make afterwards sure that all channels get some refresh (as a state change in one channel could affect others)", "author": "bjoernbrings", "createdAt": "2020-03-11T21:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQyNzUzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r391427534", "bodyText": "I added sleep because in the Vallox Web GUI code (JavaScript client side code; bundle.js) there are delays in between communicating with device. However, specifically when changing one device value, Web GUI does not request full tables after changing one value - on the other hand Web GUI read tables interval is 20 seconds compared to this binding default 60 seconds. So.. I was first wondering why we need to read tables at all at this point, but on the other hand since in the original code it is made sure that there is some time in between two commands, I thought that at this stage it's better to add delay than removing read tables command. I do agree with Bj\u00f6rn that especially if update interval is set to relatively long time, we should refresh data after modifying any value. In my view refresh should not happen immediately but like 5-10 seconds later (or faster depending what we are changing), reason being that e.g. if changing profile from Away to Boost, it takes some time for fans to adjust. How to do this in practice, I'm not sure yet. If it is possible to either trigger scheduler or modify scheduler countdown timer, that could be possible way to do this.", "author": "anttiisoaho", "createdAt": "2020-03-12T06:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNDE3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r391814176", "bodyText": "You could stop the refresh job and schedule a new one with an initial delay of 5 seconds.", "author": "J-N-K", "createdAt": "2020-03-12T18:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2MDIxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r391860215", "bodyText": "Thank you for the hint. If that is something that can be considered as normal way to do it I can definitely look at that. In high level looks relatively easy to do. But while I was thinking that I was wondering do we actually have bug in ValloxMVHandler.scheduleUpdates() method: is it ok to declare valloxSocket inside the method, and not at instance level?  Currently this anyway works even like this. (This may be stupid question but note that I have never done anything with Java before :) )", "author": "anttiisoaho", "createdAt": "2020-03-12T20:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk1MjAxOA==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r391952018", "bodyText": "You can define valloxSocket inside of a method, just make sure to do it within a try-with-resources statement so that the socket it is properly closed when you are done with it.\nAnother consideration is that you don't want multiple sockets causing collisions on the host device.\nBut speaking of bugs I did notice in ValloxMVWebSocketListener that you aren't using your closeLatch properly; it never counts down so awaitClose hangs indefinitely.", "author": "cpmeister", "createdAt": "2020-03-12T23:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NTIzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r394455237", "bodyText": "This should be now fixed. I have been running the fixed version for few days now without issues. Today I cleaned commented old code away and did some further cleanup. Have a check how does it look to you now. Edit: In fact forgot to mention that in our case closeLatch bug was not so visible as awaitClose was called with 2 seconds timeout.", "author": "anttiisoaho", "createdAt": "2020-03-18T15:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "479ae716c94f3eaac84b730db2b8f863ea04efe8", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\nindex edbdee4557..6777d9771c 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n\n@@ -67,12 +67,12 @@ public class ValloxMVHandler extends BaseThingHandler {\n     @SuppressWarnings({ \"null\", \"unchecked\" })\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n-        if (valloxSendSocket == null) {\n+        if (valloxSocket == null) {\n             return;\n         }\n         if (command instanceof RefreshType) {\n             if (lastUpdate > System.currentTimeMillis() + updateInterval * 1000) {\n-                valloxSendSocket.request(null, null);\n+                valloxSocket.request(null, null);\n             }\n         } else {\n             String strUpdateValue = \"\";\n"}}, {"oid": "190dc1229fa39bc9d48f18138809de4db6ca1168", "url": "https://github.com/openhab/openhab-addons/commit/190dc1229fa39bc9d48f18138809de4db6ca1168", "message": "First letter of every word in the items labels capilalized, some rewording. Readme aligned.\n\nSigned-off-by: Antti Isoaho <aisoaho@gmail.com>", "committedDate": "2020-03-10T22:23:41Z", "type": "commit"}, {"oid": "479ae716c94f3eaac84b730db2b8f863ea04efe8", "url": "https://github.com/openhab/openhab-addons/commit/479ae716c94f3eaac84b730db2b8f863ea04efe8", "message": "Scheduler stopped during data write, and restarted after data written, only one socket used. closeLatch.countDown added to onClose method to fix closeLatch.\n\nSigned-off-by: Antti Isoaho <aisoaho@gmail.com>", "committedDate": "2020-03-18T15:51:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5NzY1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r394697651", "bodyText": "I think calling dispose right here is inappropriate. Sure, right now all it does is cancels the update tasks but dispose could eventually do far more than that, and it is misleading reading the code since it appears you are disposing the entire handler every time you process a command. Refactor the code in your dispose method into a separate method called cancelUpdateTask or disposeUpdateTask or any other name of your choosing then call that method instead.", "author": "cpmeister", "createdAt": "2020-03-18T23:31:14Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java", "diffHunk": "@@ -119,16 +119,13 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n                 return;\n             }\n             if (strUpdateValue != \"\") {\n-                // Open WebSocket\n-                valloxSendSocket.request(channelUID, strUpdateValue);\n-                // We should wait some time to let device process the data\n-                try {\n-                    Thread.sleep(500);\n-                } catch (InterruptedException e) {\n-                    // sleep interrupted, we will get updated values during next data update cycle\n-                    return;\n-                }\n-                valloxSendSocket.request(null, null);\n+                // Stop scheduler while sending command to device\n+                dispose();", "originalCommit": "479ae716c94f3eaac84b730db2b8f863ea04efe8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjExNDI5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r396114296", "bodyText": "Fixed. Renamed job to what it really is. Added more logic using next read data time, that is not 100% accurate but it does not need to be - logic is based on seconds and not milliseconds. Fixed refresh request - with original code it was never run.", "author": "anttiisoaho", "createdAt": "2020-03-22T16:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5NzY1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8bad42948dab407f4a017d9a5e92e3469ee83db7", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\nindex 6777d9771c..d38791cb8d 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n\n@@ -119,20 +123,26 @@ public class ValloxMVHandler extends BaseThingHandler {\n                 return;\n             }\n             if (strUpdateValue != \"\") {\n-                // Stop scheduler while sending command to device\n-                dispose();\n-                logger.debug(\"Scheduled data table requests stopped\");\n+                long timeToRead = nextReadDataTime - System.currentTimeMillis();\n+                // Avoid canceling job several times in case of subsequent data writes\n+                if ((timeToRead > 0) && ((timeToRead < 2000) || (timeToRead > 5000))) {\n+                    // Next read is not within the next 2 to 5 seconds, cancel read data job\n+                    cancelReadDataJob();\n+                }\n                 // Send command and process response\n                 valloxSocket.request(channelUID, strUpdateValue);\n-                // Start scheduler with 5 seconds delay; first data request in 5 seconds\n-                scheduleUpdatesWithDelay(5);\n+                if (nextReadDataTime == 0) {\n+                    // Schedule read data job with 5 seconds initial delay\n+                    scheduleReadDataJob(5);\n+                }\n             }\n         }\n     }\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Start initializing!\");\n+        logger.debug(\"Initializing thing {}\", getThing().getUID());\n+    \n         updateStatus(ThingStatus.UNKNOWN);\n \n         String ip = getConfigAs(ValloxMVConfig.class).getIp();\n"}}, {"oid": "8bad42948dab407f4a017d9a5e92e3469ee83db7", "url": "https://github.com/openhab/openhab-addons/commit/8bad42948dab407f4a017d9a5e92e3469ee83db7", "message": "updateTask renamed to readDataJob. Added more logic to re-schedule readDataJob when needed - fixed the use of dispose (do not use).\n\nSigned-off-by: Antti Isoaho <aisoaho@gmail.com>", "committedDate": "2020-03-22T16:31:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0ODc4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r396148785", "bodyText": "ScheduledFuture includes a method getDelay(TimeUnit) that will tell you how much time until the next execution of a periodic task. Please use that method instead of tracking it manually.", "author": "cpmeister", "createdAt": "2020-03-22T22:29:50Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java", "diffHunk": "@@ -46,15 +46,15 @@\n public class ValloxMVHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(ValloxMVHandler.class);\n-    private @Nullable ScheduledFuture<?> updateTasks;\n-    private @Nullable ValloxMVWebSocket valloxSendSocket;\n+    private @Nullable ScheduledFuture<?> readDataJob;\n+    private @Nullable ValloxMVWebSocket valloxSocket;\n     private @Nullable WebSocketClient webSocketClient;\n \n     /**\n      * Refresh interval in seconds.\n      */\n-    private int updateInterval;\n-    private long lastUpdate;\n+    private int readDataInterval;\n+    private long nextReadDataTime;", "originalCommit": "8bad42948dab407f4a017d9a5e92e3469ee83db7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzODIyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r399838223", "bodyText": "I did not notice this method earlier but indeed this is correct way. Took few iterations to make it working correctly.", "author": "anttiisoaho", "createdAt": "2020-03-29T18:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0ODc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0e9c6a8625e5fc9aade41cf9250aa949eca8416b", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\nindex d38791cb8d..549e7e6a36 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVHandler.java\n\n@@ -54,7 +54,6 @@ public class ValloxMVHandler extends BaseThingHandler {\n      * Refresh interval in seconds.\n      */\n     private int readDataInterval;\n-    private long nextReadDataTime;\n \n     /**\n      * IP of vallox ventilation unit web interface.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE1MDM3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7093#discussion_r396150371", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            OnOffType ooOnOff = (bytes[217] == 5) ? OnOffType.OFF : OnOffType.ON;\n          \n          \n            \n                            OnOffType ooOnOff = OnOffType.from(bytes[217] != 5);", "author": "cpmeister", "createdAt": "2020-03-22T22:38:33Z", "path": "bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java", "diffHunk": "@@ -310,14 +477,10 @@ public void onBinary(InputStream in) {\n                     bdState = new BigDecimal(ValloxMVBindingConstants.STATE_ATHOME);\n                 }\n \n-                OnOffType onoff;\n-                if (bytes[217] != 5) {\n-                    onoff = OnOffType.ON;\n-                } else {\n-                    onoff = OnOffType.OFF;\n-                }\n+                OnOffType ooOnOff = (bytes[217] == 5) ? OnOffType.OFF : OnOffType.ON;", "originalCommit": "8bad42948dab407f4a017d9a5e92e3469ee83db7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e9c6a8625e5fc9aade41cf9250aa949eca8416b", "chunk": "diff --git a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\nindex 32a1b1c2f6..3cee16a3af 100644\n--- a/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n+++ b/bundles/org.openhab.binding.valloxmv/src/main/java/org/openhab/binding/valloxmv/internal/ValloxMVWebSocket.java\n\n@@ -477,7 +477,7 @@ public class ValloxMVWebSocket {\n                     bdState = new BigDecimal(ValloxMVBindingConstants.STATE_ATHOME);\n                 }\n \n-                OnOffType ooOnOff = (bytes[217] == 5) ? OnOffType.OFF : OnOffType.ON;\n+                OnOffType ooOnOff = OnOffType.from(bytes[217] != 5);\n \n                 // Update channels with read values\n                 updateChannel(ValloxMVBindingConstants.CHANNEL_ONOFF, ooOnOff);\n"}}, {"oid": "0e9c6a8625e5fc9aade41cf9250aa949eca8416b", "url": "https://github.com/openhab/openhab-addons/commit/0e9c6a8625e5fc9aade41cf9250aa949eca8416b", "message": "Use getDelay() method of ScheduledFuture to find out delay to reading data from device. Small fix to use OnOffType.from() method similarly with all switches.\n\nSigned-off-by: Antti Isoaho <aisoaho@gmail.com>", "committedDate": "2020-03-29T18:51:27Z", "type": "commit"}]}