{"pr_number": 8715, "pr_title": "[deconz] add group support", "pr_createdAt": "2020-10-10T13:37:39Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8715", "timeline": [{"oid": "dcfb1231e1be9efd80282cff513e629a631182a3", "url": "https://github.com/openhab/openhab-addons/commit/dcfb1231e1be9efd80282cff513e629a631182a3", "message": "documentation\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-13T17:48:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NDcyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r504154720", "bodyText": "Isn't this rather a configuration error, when the user forgets to specify a bridge in textual configuration?", "author": "fwolter", "createdAt": "2020-10-13T18:05:07Z", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java", "diffHunk": "@@ -86,39 +97,38 @@ public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n             return;\n         }\n \n-        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            unregisterListener();\n-            return;\n-        }\n-\n-        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n-            return;\n-        }\n-\n-        Bridge bridge = getBridge();\n-        if (bridge == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n-        DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n-        if (bridgeHandler == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            // the bridge is ONLINE, we can communicate with the gateway, so we update the connection parameters and\n+            // register the listener\n+            Bridge bridge = getBridge();\n+            if (bridge == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);", "originalCommit": "dcfb1231e1be9efd80282cff513e629a631182a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NDE2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r504794160", "bodyText": "A configuration error should prevent the thing from being initialized. But this can also happen if no callback for the bridge is present.", "author": "J-N-K", "createdAt": "2020-10-14T15:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NDcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0MTU4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r505741586", "bodyText": "Just tested it with OH3. The framework isn't preventing the Thing from being initialized when the bridge is missing (text config), although specified in XML.\nEDIT: Which callback are you refering to?", "author": "fwolter", "createdAt": "2020-10-15T18:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NDcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1MTc4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r505751784", "bodyText": "This is a core-bug. @openhab/core-maintainers, WDYT?\nThe thing callback.", "author": "J-N-K", "createdAt": "2020-10-15T18:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NDcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4MjQ1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r512782456", "bodyText": "Hm, Yes. I think it is. It is at least worse to open an issue in OHC for discussion.", "author": "cweitkamp", "createdAt": "2020-10-27T15:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NDcyMA=="}], "type": "inlineReview", "revised_code": {"commit": "9ecb79965e8c1e3561ac8d4a70d5f8e720ad7745", "chunk": "diff --git a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java\nindex 92cfb037b2..4ecf2f27bc 100644\n--- a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java\n+++ b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java\n\n@@ -97,38 +86,39 @@ public abstract class DeconzBaseThingHandler<T extends DeconzBaseMessage> extend\n             return;\n         }\n \n-        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n-            // the bridge is ONLINE, we can communicate with the gateway, so we update the connection parameters and\n-            // register the listener\n-            Bridge bridge = getBridge();\n-            if (bridge == null) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-                return;\n-            }\n-            DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n-            if (bridgeHandler == null) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-                return;\n-            }\n-\n-            final WebSocketConnection webSocketConnection = bridgeHandler.getWebsocketConnection();\n-            this.connection = webSocketConnection;\n-            this.http = bridgeHandler.getHttp();\n-            this.bridgeConfig = bridgeHandler.getBridgeConfig();\n-\n-            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE);\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            unregisterListener();\n+            return;\n+        }\n \n-            // Real-time data\n-            registerListener();\n+        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n+            return;\n+        }\n \n-            // get initial values\n-            requestState();\n-        } else {\n-            // if the bridge is not ONLINE, we assume communication is not possible, so we unregister the listener and\n-            // set the thing status to OFFLINE\n-            unregisterListener();\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n         }\n+        DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n+        if (bridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        final WebSocketConnection webSocketConnection = bridgeHandler.getWebsocketConnection();\n+        this.connection = webSocketConnection;\n+        this.http = bridgeHandler.getHttp();\n+        this.bridgeConfig = bridgeHandler.getBridgeConfig();\n+\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE);\n+\n+        // Real-time data\n+        registerListener();\n+\n+        // get initial values\n+        requestState();\n     }\n \n     protected abstract @Nullable T parseStateResponse(AsyncHttpClient.Result r);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NTI3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r504155278", "bodyText": "If I see correctly this happens when the user configures a Bridge of wrong type.", "author": "fwolter", "createdAt": "2020-10-13T18:06:11Z", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java", "diffHunk": "@@ -86,39 +97,38 @@ public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n             return;\n         }\n \n-        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            unregisterListener();\n-            return;\n-        }\n-\n-        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n-            return;\n-        }\n-\n-        Bridge bridge = getBridge();\n-        if (bridge == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n-        DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n-        if (bridgeHandler == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            // the bridge is ONLINE, we can communicate with the gateway, so we update the connection parameters and\n+            // register the listener\n+            Bridge bridge = getBridge();\n+            if (bridge == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+                return;\n+            }\n+            DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n+            if (bridgeHandler == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);", "originalCommit": "dcfb1231e1be9efd80282cff513e629a631182a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ecb79965e8c1e3561ac8d4a70d5f8e720ad7745", "chunk": "diff --git a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java\nindex 92cfb037b2..4ecf2f27bc 100644\n--- a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java\n+++ b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java\n\n@@ -97,38 +86,39 @@ public abstract class DeconzBaseThingHandler<T extends DeconzBaseMessage> extend\n             return;\n         }\n \n-        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n-            // the bridge is ONLINE, we can communicate with the gateway, so we update the connection parameters and\n-            // register the listener\n-            Bridge bridge = getBridge();\n-            if (bridge == null) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-                return;\n-            }\n-            DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n-            if (bridgeHandler == null) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-                return;\n-            }\n-\n-            final WebSocketConnection webSocketConnection = bridgeHandler.getWebsocketConnection();\n-            this.connection = webSocketConnection;\n-            this.http = bridgeHandler.getHttp();\n-            this.bridgeConfig = bridgeHandler.getBridgeConfig();\n-\n-            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE);\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            unregisterListener();\n+            return;\n+        }\n \n-            // Real-time data\n-            registerListener();\n+        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n+            return;\n+        }\n \n-            // get initial values\n-            requestState();\n-        } else {\n-            // if the bridge is not ONLINE, we assume communication is not possible, so we unregister the listener and\n-            // set the thing status to OFFLINE\n-            unregisterListener();\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n         }\n+        DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n+        if (bridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        final WebSocketConnection webSocketConnection = bridgeHandler.getWebsocketConnection();\n+        this.connection = webSocketConnection;\n+        this.http = bridgeHandler.getHttp();\n+        this.bridgeConfig = bridgeHandler.getBridgeConfig();\n+\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE);\n+\n+        // Real-time data\n+        registerListener();\n+\n+        // get initial values\n+        requestState();\n     }\n \n     protected abstract @Nullable T parseStateResponse(AsyncHttpClient.Result r);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1ODY5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r504158695", "bodyText": "It seems a bit unreasonable to log the stack trace when the network fails.", "author": "fwolter", "createdAt": "2020-10-13T18:11:36Z", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/GroupThingHandler.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.deconz.internal.handler;\n+\n+import static org.openhab.binding.deconz.internal.BindingConstants.*;\n+import static org.openhab.binding.deconz.internal.Util.buildUrl;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.deconz.internal.Util;\n+import org.openhab.binding.deconz.internal.dto.DeconzBaseMessage;\n+import org.openhab.binding.deconz.internal.dto.GroupAction;\n+import org.openhab.binding.deconz.internal.dto.GroupMessage;\n+import org.openhab.binding.deconz.internal.dto.GroupState;\n+import org.openhab.binding.deconz.internal.netutils.AsyncHttpClient;\n+import org.openhab.binding.deconz.internal.types.ResourceType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * This light thing doesn't establish any connections, that is done by the bridge Thing.\n+ *\n+ * It waits for the bridge to come online, grab the websocket connection and bridge configuration\n+ * and registers to the websocket connection as a listener.\n+ *\n+ * A REST API call is made to get the initial light/rollershutter state.\n+ *\n+ * Every light and rollershutter is supported by this Thing, because a unified state is kept\n+ * in {@link #groupStateCache}. Every field that got received by the REST API for this specific\n+ * sensor is published to the framework.\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GroupThingHandler extends DeconzBaseThingHandler<GroupMessage> {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPE_UIDS = Set.of(THING_TYPE_LIGHTGROUP);\n+\n+    private static final double HUE_FACTOR = 65535 / 360.0;\n+    private static final double BRIGHTNESS_FACTOR = 2.54;\n+\n+    private final Logger logger = LoggerFactory.getLogger(GroupThingHandler.class);\n+\n+    private long lastCommandExpireTimestamp = 0;\n+    private boolean needsPropertyUpdate = false;\n+\n+    /**\n+     * The group state.\n+     */\n+    private GroupState groupStateCache = new GroupState();\n+\n+    public GroupThingHandler(Thing thing, Gson gson) {\n+        super(thing, gson, ResourceType.GROUPS);\n+    }\n+\n+    @Override\n+    protected void requestState() {\n+        requestState(\"groups\");\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        GroupAction newGroupAction = new GroupAction();\n+        switch (channelId) {\n+            case CHANNEL_ALL_ON:\n+            case CHANNEL_ANY_ON:\n+                if (command instanceof RefreshType) {\n+                    valueUpdated(channelUID.getId(), groupStateCache);\n+                    return;\n+                }\n+                break;\n+            case CHANNEL_ALERT:\n+                if (command instanceof OnOffType) {\n+                    newGroupAction.alert = command == OnOffType.ON ? \"alert\" : \"none\";\n+                } else {\n+                    return;\n+                }\n+                break;\n+            case CHANNEL_COLOR:\n+                if (command instanceof HSBType) {\n+                    HSBType hsbCommand = (HSBType) command;\n+                    newGroupAction.bri = Util.fromPercentType(hsbCommand.getBrightness());\n+                    if (newGroupAction.bri > 0) {\n+                        newGroupAction.hue = (int) (hsbCommand.getHue().doubleValue() * HUE_FACTOR);\n+                        newGroupAction.sat = Util.fromPercentType(hsbCommand.getSaturation());\n+                    }\n+                } else if (command instanceof PercentType) {\n+                    newGroupAction.bri = Util.fromPercentType((PercentType) command);\n+                } else if (command instanceof DecimalType) {\n+                    newGroupAction.bri = ((DecimalType) command).intValue();\n+                } else if (command instanceof OnOffType) {\n+                    newGroupAction.on = OnOffType.ON.equals(command);\n+                } else {\n+                    return;\n+                }\n+                break;\n+            case CHANNEL_COLOR_TEMPERATURE:\n+                if (command instanceof DecimalType) {\n+                    int miredValue = Util.kelvinToMired(((DecimalType) command).intValue());\n+                    newGroupAction.ct = Util.constrainToRange(miredValue, ZCL_CT_MIN, ZCL_CT_MAX);\n+                } else {\n+                    return;\n+                }\n+                break;\n+            default:\n+                return;\n+        }\n+\n+        if (newGroupAction.bri != null && newGroupAction.bri > 0) {\n+            newGroupAction.on = true;\n+        }\n+\n+        AsyncHttpClient asyncHttpClient = http;\n+        if (asyncHttpClient == null) {\n+            return;\n+        }\n+        String url = buildUrl(bridgeConfig.host, bridgeConfig.httpPort, bridgeConfig.apikey, \"groups\", config.id,\n+                \"action\");\n+\n+        String json = gson.toJson(newGroupAction);\n+        logger.trace(\"Sending {} to group {} via {}\", json, config.id, url);\n+\n+        asyncHttpClient.put(url, json, bridgeConfig.timeout).thenAccept(v -> {\n+            logger.trace(\"Result code={}, body={}\", v.getResponseCode(), v.getBody());\n+        }).exceptionally(e -> {\n+            logger.debug(\"Sending command {} to channel {} failed:\", command, channelUID, e);", "originalCommit": "dcfb1231e1be9efd80282cff513e629a631182a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ecb79965e8c1e3561ac8d4a70d5f8e720ad7745", "chunk": "diff --git a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/GroupThingHandler.java b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/GroupThingHandler.java\ndeleted file mode 100644\nindex 027380f03a..0000000000\n--- a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/GroupThingHandler.java\n+++ /dev/null\n\n@@ -1,200 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.deconz.internal.handler;\n-\n-import static org.openhab.binding.deconz.internal.BindingConstants.*;\n-import static org.openhab.binding.deconz.internal.Util.buildUrl;\n-\n-import java.util.Set;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.openhab.binding.deconz.internal.Util;\n-import org.openhab.binding.deconz.internal.dto.DeconzBaseMessage;\n-import org.openhab.binding.deconz.internal.dto.GroupAction;\n-import org.openhab.binding.deconz.internal.dto.GroupMessage;\n-import org.openhab.binding.deconz.internal.dto.GroupState;\n-import org.openhab.binding.deconz.internal.netutils.AsyncHttpClient;\n-import org.openhab.binding.deconz.internal.types.ResourceType;\n-import org.openhab.core.library.types.DecimalType;\n-import org.openhab.core.library.types.HSBType;\n-import org.openhab.core.library.types.OnOffType;\n-import org.openhab.core.library.types.PercentType;\n-import org.openhab.core.thing.ChannelUID;\n-import org.openhab.core.thing.Thing;\n-import org.openhab.core.thing.ThingStatus;\n-import org.openhab.core.thing.ThingTypeUID;\n-import org.openhab.core.types.Command;\n-import org.openhab.core.types.RefreshType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import com.google.gson.Gson;\n-\n-/**\n- * This light thing doesn't establish any connections, that is done by the bridge Thing.\n- *\n- * It waits for the bridge to come online, grab the websocket connection and bridge configuration\n- * and registers to the websocket connection as a listener.\n- *\n- * A REST API call is made to get the initial light/rollershutter state.\n- *\n- * Every light and rollershutter is supported by this Thing, because a unified state is kept\n- * in {@link #groupStateCache}. Every field that got received by the REST API for this specific\n- * sensor is published to the framework.\n- *\n- * @author Jan N. Klug - Initial contribution\n- */\n-@NonNullByDefault\n-public class GroupThingHandler extends DeconzBaseThingHandler<GroupMessage> {\n-    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPE_UIDS = Set.of(THING_TYPE_LIGHTGROUP);\n-\n-    private static final double HUE_FACTOR = 65535 / 360.0;\n-    private static final double BRIGHTNESS_FACTOR = 2.54;\n-\n-    private final Logger logger = LoggerFactory.getLogger(GroupThingHandler.class);\n-\n-    private long lastCommandExpireTimestamp = 0;\n-    private boolean needsPropertyUpdate = false;\n-\n-    /**\n-     * The group state.\n-     */\n-    private GroupState groupStateCache = new GroupState();\n-\n-    public GroupThingHandler(Thing thing, Gson gson) {\n-        super(thing, gson, ResourceType.GROUPS);\n-    }\n-\n-    @Override\n-    protected void requestState() {\n-        requestState(\"groups\");\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        String channelId = channelUID.getId();\n-\n-        GroupAction newGroupAction = new GroupAction();\n-        switch (channelId) {\n-            case CHANNEL_ALL_ON:\n-            case CHANNEL_ANY_ON:\n-                if (command instanceof RefreshType) {\n-                    valueUpdated(channelUID.getId(), groupStateCache);\n-                    return;\n-                }\n-                break;\n-            case CHANNEL_ALERT:\n-                if (command instanceof OnOffType) {\n-                    newGroupAction.alert = command == OnOffType.ON ? \"alert\" : \"none\";\n-                } else {\n-                    return;\n-                }\n-                break;\n-            case CHANNEL_COLOR:\n-                if (command instanceof HSBType) {\n-                    HSBType hsbCommand = (HSBType) command;\n-                    newGroupAction.bri = Util.fromPercentType(hsbCommand.getBrightness());\n-                    if (newGroupAction.bri > 0) {\n-                        newGroupAction.hue = (int) (hsbCommand.getHue().doubleValue() * HUE_FACTOR);\n-                        newGroupAction.sat = Util.fromPercentType(hsbCommand.getSaturation());\n-                    }\n-                } else if (command instanceof PercentType) {\n-                    newGroupAction.bri = Util.fromPercentType((PercentType) command);\n-                } else if (command instanceof DecimalType) {\n-                    newGroupAction.bri = ((DecimalType) command).intValue();\n-                } else if (command instanceof OnOffType) {\n-                    newGroupAction.on = OnOffType.ON.equals(command);\n-                } else {\n-                    return;\n-                }\n-                break;\n-            case CHANNEL_COLOR_TEMPERATURE:\n-                if (command instanceof DecimalType) {\n-                    int miredValue = Util.kelvinToMired(((DecimalType) command).intValue());\n-                    newGroupAction.ct = Util.constrainToRange(miredValue, ZCL_CT_MIN, ZCL_CT_MAX);\n-                } else {\n-                    return;\n-                }\n-                break;\n-            default:\n-                return;\n-        }\n-\n-        if (newGroupAction.bri != null && newGroupAction.bri > 0) {\n-            newGroupAction.on = true;\n-        }\n-\n-        AsyncHttpClient asyncHttpClient = http;\n-        if (asyncHttpClient == null) {\n-            return;\n-        }\n-        String url = buildUrl(bridgeConfig.host, bridgeConfig.httpPort, bridgeConfig.apikey, \"groups\", config.id,\n-                \"action\");\n-\n-        String json = gson.toJson(newGroupAction);\n-        logger.trace(\"Sending {} to group {} via {}\", json, config.id, url);\n-\n-        asyncHttpClient.put(url, json, bridgeConfig.timeout).thenAccept(v -> {\n-            logger.trace(\"Result code={}, body={}\", v.getResponseCode(), v.getBody());\n-        }).exceptionally(e -> {\n-            logger.debug(\"Sending command {} to channel {} failed:\", command, channelUID, e);\n-            return null;\n-        });\n-    }\n-\n-    @Override\n-    protected @Nullable GroupMessage parseStateResponse(AsyncHttpClient.Result r) {\n-        if (r.getResponseCode() == 403) {\n-            return null;\n-        } else if (r.getResponseCode() == 200) {\n-            GroupMessage groupMessage = gson.fromJson(r.getBody(), GroupMessage.class);\n-            return groupMessage;\n-        } else {\n-            throw new IllegalStateException(\"Unknown status code \" + r.getResponseCode() + \" for full state request\");\n-        }\n-    }\n-\n-    @Override\n-    protected void processStateResponse(@Nullable GroupMessage stateResponse) {\n-        if (stateResponse == null) {\n-            return;\n-        }\n-        messageReceived(config.id, stateResponse);\n-    }\n-\n-    private void valueUpdated(String channelId, GroupState newState) {\n-        switch (channelId) {\n-            case CHANNEL_ALL_ON:\n-                updateState(channelId, OnOffType.from(newState.all_on));\n-                break;\n-            case CHANNEL_ANY_ON:\n-                updateState(channelId, OnOffType.from(newState.any_on));\n-                break;\n-            default:\n-        }\n-    }\n-\n-    @Override\n-    public void messageReceived(String sensorID, DeconzBaseMessage message) {\n-        if (message instanceof GroupMessage) {\n-            GroupMessage groupMessage = (GroupMessage) message;\n-            logger.trace(\"{} received {}\", thing.getUID(), groupMessage);\n-            GroupState groupState = groupMessage.state;\n-            if (groupState != null) {\n-                updateStatus(ThingStatus.ONLINE);\n-                thing.getChannels().stream().map(c -> c.getUID().getId()).forEach(c -> valueUpdated(c, groupState));\n-            }\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYyMDQxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r511620419", "bodyText": "\"id\" should be a constant since you use it in multiple places", "author": "cpmeister", "createdAt": "2020-10-25T16:43:12Z", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java", "diffHunk": "@@ -93,12 +95,53 @@ protected void stopBackgroundDiscovery() {\n     }\n \n     /**\n-     * Add a sensor device to the discovery inbox.\n+     * Add a group to the discovery inbox.\n+     *\n+     * @param groupId The id of the light\n+     * @param group The group description\n+     */\n+    private void addGroup(String groupId, GroupMessage group) {\n+        final ThingUID bridgeUID = this.bridgeUID;\n+        if (bridgeUID == null) {\n+            logger.warn(\"Received a message from non-existent bridge. This most likely is a bug.\");\n+            return;\n+        }\n+\n+        ThingTypeUID thingTypeUID;\n+        GroupType groupType = group.type;\n+\n+        if (groupType == null) {\n+            logger.warn(\"No group type reported for group {} ({})\", group.modelid, group.name);\n+            return;\n+        }\n+\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"id\", groupId);", "originalCommit": "fbdef5d8c5faf1f5026573f7a44e793fe169c07d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ecb79965e8c1e3561ac8d4a70d5f8e720ad7745", "chunk": "diff --git a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java\nindex 2f95ca60a0..28497b70d0 100644\n--- a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java\n+++ b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java\n\n@@ -95,53 +93,12 @@ public class ThingDiscoveryService extends AbstractDiscoveryService implements D\n     }\n \n     /**\n-     * Add a group to the discovery inbox.\n-     *\n-     * @param groupId The id of the light\n-     * @param group The group description\n-     */\n-    private void addGroup(String groupId, GroupMessage group) {\n-        final ThingUID bridgeUID = this.bridgeUID;\n-        if (bridgeUID == null) {\n-            logger.warn(\"Received a message from non-existent bridge. This most likely is a bug.\");\n-            return;\n-        }\n-\n-        ThingTypeUID thingTypeUID;\n-        GroupType groupType = group.type;\n-\n-        if (groupType == null) {\n-            logger.warn(\"No group type reported for group {} ({})\", group.modelid, group.name);\n-            return;\n-        }\n-\n-        Map<String, Object> properties = new HashMap<>();\n-        properties.put(\"id\", groupId);\n-\n-        switch (groupType) {\n-            case LIGHT_GROUP:\n-                thingTypeUID = THING_TYPE_LIGHTGROUP;\n-                break;\n-            default:\n-                logger.debug(\n-                        \"Found group: {} ({}), type {} but no thing type defined for that type. This should be reported.\",\n-                        group.id, group.name, group.type);\n-                return;\n-        }\n-\n-        ThingUID uid = new ThingUID(thingTypeUID, bridgeUID, group.id);\n-        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(uid).withBridge(bridgeUID).withLabel(group.name)\n-                .withProperties(properties).withRepresentationProperty(\"id\").build();\n-        thingDiscovered(discoveryResult);\n-    }\n-\n-    /**\n-     * Add a light device to the discovery inbox.\n+     * Add a sensor device to the discovery inbox.\n      *\n-     * @param lightId The id of the light\n-     * @param light The light description\n+     * @param lightID The id of the light\n+     * @param light The sensor description\n      */\n-    private void addLight(String lightId, LightMessage light) {\n+    private void addLight(String lightID, LightMessage light) {\n         final ThingUID bridgeUID = this.bridgeUID;\n         if (bridgeUID == null) {\n             logger.warn(\"Received a message from non-existent bridge. This most likely is a bug.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MDM2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r513850365", "bodyText": "Maybe add @NonNullByDefault?", "author": "cpmeister", "createdAt": "2020-10-29T01:07:23Z", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/GroupTypeDeserializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.deconz.internal.types;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * Custom deserializer for {@link GroupType}\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+public class GroupTypeDeserializer implements JsonDeserializer<GroupType> {", "originalCommit": "68d3e92c72f13a0877f4bd9316f6d16dba141b2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3fe457a208652caff7f575465f59be41d4dee4e0", "chunk": "diff --git a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/GroupTypeDeserializer.java b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/GroupTypeDeserializer.java\nindex 8c093f022f..3bb2c1db27 100644\n--- a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/GroupTypeDeserializer.java\n+++ b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/GroupTypeDeserializer.java\n\n@@ -14,6 +14,9 @@ package org.openhab.binding.deconz.internal.types;\n \n import java.lang.reflect.Type;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MDQwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r513850409", "bodyText": "Maybe add @NonNullByDefault?", "author": "cpmeister", "createdAt": "2020-10-29T01:07:35Z", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceType.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.deconz.internal.types;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ResourceType} defines an enum for websocket messages\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+public enum ResourceType {", "originalCommit": "68d3e92c72f13a0877f4bd9316f6d16dba141b2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ecb79965e8c1e3561ac8d4a70d5f8e720ad7745", "chunk": "diff --git a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceType.java b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceType.java\ndeleted file mode 100644\nindex 390e5597ca..0000000000\n--- a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceType.java\n+++ /dev/null\n\n@@ -1,76 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.deconz.internal.types;\n-\n-import java.util.Arrays;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link ResourceType} defines an enum for websocket messages\n- *\n- * @author Jan N. Klug - Initial contribution\n- */\n-public enum ResourceType {\n-    GROUPS(\"groups\", \"action\"),\n-    LIGHTS(\"lights\", \"state\"),\n-    SENSORS(\"sensors\", \"\"),\n-    UNKNOWN(\"\", \"\");\n-\n-    private static final Map<String, ResourceType> MAPPING = Arrays.stream(ResourceType.values())\n-            .collect(Collectors.toMap(v -> v.identifier, v -> v));\n-    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceType.class);\n-\n-    private String identifier;\n-    private String commandUrl;\n-\n-    ResourceType(String identifier, String commandUrl) {\n-        this.identifier = identifier;\n-        this.commandUrl = commandUrl;\n-    }\n-\n-    /**\n-     * get the identifier string of this resource type\n-     *\n-     * @return\n-     */\n-    public String getIdentifier() {\n-        return identifier;\n-    }\n-\n-    /**\n-     * get the commandUrl part for this resource type\n-     *\n-     * @return\n-     */\n-    public String getCommandUrl() {\n-        return commandUrl;\n-    }\n-\n-    /**\n-     * get the resource type from a string\n-     *\n-     * @param s the string\n-     * @return the corresponding resource type (or UNKNOWN)\n-     */\n-    public static ResourceType fromString(String s) {\n-        ResourceType lightType = MAPPING.getOrDefault(s, UNKNOWN);\n-        if (lightType == UNKNOWN) {\n-            LOGGER.debug(\"Unknown resource type '{}' found. This should be reported.\", s);\n-        }\n-        return lightType;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MDU0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r513850549", "bodyText": "Maybe add @NonNullByDefault?", "author": "cpmeister", "createdAt": "2020-10-29T01:08:18Z", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceTypeDeserializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.deconz.internal.types;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * Custom deserializer for {@link ResourceType}\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+public class ResourceTypeDeserializer implements JsonDeserializer<ResourceType> {", "originalCommit": "68d3e92c72f13a0877f4bd9316f6d16dba141b2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ecb79965e8c1e3561ac8d4a70d5f8e720ad7745", "chunk": "diff --git a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceTypeDeserializer.java b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceTypeDeserializer.java\ndeleted file mode 100644\nindex 299179bf87..0000000000\n--- a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceTypeDeserializer.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.deconz.internal.types;\n-\n-import java.lang.reflect.Type;\n-\n-import com.google.gson.JsonDeserializationContext;\n-import com.google.gson.JsonDeserializer;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonParseException;\n-\n-/**\n- * Custom deserializer for {@link ResourceType}\n- *\n- * @author Jan N. Klug - Initial contribution\n- */\n-public class ResourceTypeDeserializer implements JsonDeserializer<ResourceType> {\n-    @Override\n-    public ResourceType deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-            throws JsonParseException {\n-        String s = json.getAsString();\n-        return s == null ? ResourceType.UNKNOWN : ResourceType.fromString(s);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyODE5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r514528197", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withProperties(properties).withRepresentationProperty(\"id\").build();\n          \n          \n            \n                            .withProperties(properties).withRepresentationProperty(CONFIG_ID).build();", "author": "cpmeister", "createdAt": "2020-10-29T19:58:38Z", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java", "diffHunk": "@@ -93,12 +95,53 @@ protected void stopBackgroundDiscovery() {\n     }\n \n     /**\n-     * Add a sensor device to the discovery inbox.\n+     * Add a group to the discovery inbox.\n+     *\n+     * @param groupId The id of the light\n+     * @param group The group description\n+     */\n+    private void addGroup(String groupId, GroupMessage group) {\n+        final ThingUID bridgeUID = this.bridgeUID;\n+        if (bridgeUID == null) {\n+            logger.warn(\"Received a message from non-existent bridge. This most likely is a bug.\");\n+            return;\n+        }\n+\n+        ThingTypeUID thingTypeUID;\n+        GroupType groupType = group.type;\n+\n+        if (groupType == null) {\n+            logger.warn(\"No group type reported for group {} ({})\", group.modelid, group.name);\n+            return;\n+        }\n+\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(CONFIG_ID, groupId);\n+\n+        switch (groupType) {\n+            case LIGHT_GROUP:\n+                thingTypeUID = THING_TYPE_LIGHTGROUP;\n+                break;\n+            default:\n+                logger.debug(\n+                        \"Found group: {} ({}), type {} but no thing type defined for that type. This should be reported.\",\n+                        group.id, group.name, group.type);\n+                return;\n+        }\n+\n+        ThingUID uid = new ThingUID(thingTypeUID, bridgeUID, group.id);\n+        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(uid).withBridge(bridgeUID).withLabel(group.name)\n+                .withProperties(properties).withRepresentationProperty(\"id\").build();", "originalCommit": "5ca31f31b8aba118773eab11ce54f654485b7855", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ecb79965e8c1e3561ac8d4a70d5f8e720ad7745", "chunk": "diff --git a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java\nindex 2a39a1a9e1..28497b70d0 100644\n--- a/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java\n+++ b/bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java\n\n@@ -95,53 +93,12 @@ public class ThingDiscoveryService extends AbstractDiscoveryService implements D\n     }\n \n     /**\n-     * Add a group to the discovery inbox.\n-     *\n-     * @param groupId The id of the light\n-     * @param group The group description\n-     */\n-    private void addGroup(String groupId, GroupMessage group) {\n-        final ThingUID bridgeUID = this.bridgeUID;\n-        if (bridgeUID == null) {\n-            logger.warn(\"Received a message from non-existent bridge. This most likely is a bug.\");\n-            return;\n-        }\n-\n-        ThingTypeUID thingTypeUID;\n-        GroupType groupType = group.type;\n-\n-        if (groupType == null) {\n-            logger.warn(\"No group type reported for group {} ({})\", group.modelid, group.name);\n-            return;\n-        }\n-\n-        Map<String, Object> properties = new HashMap<>();\n-        properties.put(CONFIG_ID, groupId);\n-\n-        switch (groupType) {\n-            case LIGHT_GROUP:\n-                thingTypeUID = THING_TYPE_LIGHTGROUP;\n-                break;\n-            default:\n-                logger.debug(\n-                        \"Found group: {} ({}), type {} but no thing type defined for that type. This should be reported.\",\n-                        group.id, group.name, group.type);\n-                return;\n-        }\n-\n-        ThingUID uid = new ThingUID(thingTypeUID, bridgeUID, group.id);\n-        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(uid).withBridge(bridgeUID).withLabel(group.name)\n-                .withProperties(properties).withRepresentationProperty(\"id\").build();\n-        thingDiscovered(discoveryResult);\n-    }\n-\n-    /**\n-     * Add a light device to the discovery inbox.\n+     * Add a sensor device to the discovery inbox.\n      *\n-     * @param lightId The id of the light\n-     * @param light The light description\n+     * @param lightID The id of the light\n+     * @param light The sensor description\n      */\n-    private void addLight(String lightId, LightMessage light) {\n+    private void addLight(String lightID, LightMessage light) {\n         final ThingUID bridgeUID = this.bridgeUID;\n         if (bridgeUID == null) {\n             logger.warn(\"Received a message from non-existent bridge. This most likely is a bug.\");\n"}}, {"oid": "9ecb79965e8c1e3561ac8d4a70d5f8e720ad7745", "url": "https://github.com/openhab/openhab-addons/commit/9ecb79965e8c1e3561ac8d4a70d5f8e720ad7745", "message": "add group message\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:50Z", "type": "commit"}, {"oid": "f54f2403bf125fb8e9c89b96e3234687aaf1fb4d", "url": "https://github.com/openhab/openhab-addons/commit/f54f2403bf125fb8e9c89b96e3234687aaf1fb4d", "message": "add handler\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:50Z", "type": "commit"}, {"oid": "3e7e9c334a2657d8e370e82b78a0547ec50123f4", "url": "https://github.com/openhab/openhab-addons/commit/3e7e9c334a2657d8e370e82b78a0547ec50123f4", "message": "refactoring\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:50Z", "type": "commit"}, {"oid": "2dbda69fd3a8b9838a775de58634e1d45c0f7a92", "url": "https://github.com/openhab/openhab-addons/commit/2dbda69fd3a8b9838a775de58634e1d45c0f7a92", "message": "further refactoring\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:51Z", "type": "commit"}, {"oid": "8d11817b20f3b9c2b94a383ad38f5c976991c755", "url": "https://github.com/openhab/openhab-addons/commit/8d11817b20f3b9c2b94a383ad38f5c976991c755", "message": "fixes\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:51Z", "type": "commit"}, {"oid": "2dd326759c0b4560448cbae2c2dacd93f24d7db0", "url": "https://github.com/openhab/openhab-addons/commit/2dd326759c0b4560448cbae2c2dacd93f24d7db0", "message": "finalize group state\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:52Z", "type": "commit"}, {"oid": "1cafef9f91fd824d35a0597d5ae7e5ad54c5d767", "url": "https://github.com/openhab/openhab-addons/commit/1cafef9f91fd824d35a0597d5ae7e5ad54c5d767", "message": "finalize code\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:52Z", "type": "commit"}, {"oid": "0c80e94672972dc2681a848c1b55c99901376b4b", "url": "https://github.com/openhab/openhab-addons/commit/0c80e94672972dc2681a848c1b55c99901376b4b", "message": "documentation\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:52Z", "type": "commit"}, {"oid": "0ded493c7c6698fb14c7bfb2f7733c47c62e136d", "url": "https://github.com/openhab/openhab-addons/commit/0ded493c7c6698fb14c7bfb2f7733c47c62e136d", "message": "fixes\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:52Z", "type": "commit"}, {"oid": "dd07d1687e49f792148f5fe17d6f5af1f4c0ed24", "url": "https://github.com/openhab/openhab-addons/commit/dd07d1687e49f792148f5fe17d6f5af1f4c0ed24", "message": "simplify command handling\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:53Z", "type": "commit"}, {"oid": "daeccdbc308e37a143ffcc36b9d11326db5600ee", "url": "https://github.com/openhab/openhab-addons/commit/daeccdbc308e37a143ffcc36b9d11326db5600ee", "message": "make sure on is always send\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:18:53Z", "type": "commit"}, {"oid": "3fe457a208652caff7f575465f59be41d4dee4e0", "url": "https://github.com/openhab/openhab-addons/commit/3fe457a208652caff7f575465f59be41d4dee4e0", "message": "address review comments\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:19:42Z", "type": "commit"}, {"oid": "05aa7a41886ff76d9ad07ba42213772204558f06", "url": "https://github.com/openhab/openhab-addons/commit/05aa7a41886ff76d9ad07ba42213772204558f06", "message": "fix\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:19:47Z", "type": "commit"}, {"oid": "05aa7a41886ff76d9ad07ba42213772204558f06", "url": "https://github.com/openhab/openhab-addons/commit/05aa7a41886ff76d9ad07ba42213772204558f06", "message": "fix\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-29T20:19:47Z", "type": "forcePushed"}]}