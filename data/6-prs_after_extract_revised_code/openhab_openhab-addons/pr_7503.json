{"pr_number": 7503, "pr_title": "[vigiecrues] Vigicrues binding : track river level", "pr_createdAt": "2020-04-29T13:04:45Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7503", "timeline": [{"oid": "f04a35108f2a8bebd5e576b67960754531da27b9", "url": "https://github.com/openhab/openhab-addons/commit/f04a35108f2a8bebd5e576b67960754531da27b9", "message": "Starting Vigie Crues binding\n\nSigned-off-by: clinique <gael@lhopital.org>\n\nConflicts:\n\tbundles/org.openhab.binding.glh/src/main/java/org/openhab/binding/glh/internal/GlhBindingConstants.java\n\tbundles/org.openhab.binding.glh/src/main/java/org/openhab/binding/glh/internal/GlhHandlerFactory.java\n\tbundles/org.openhab.binding.glh/src/main/java/org/openhab/binding/glh/internal/handler/ThermostatHandler.java\n\tbundles/org.openhab.binding.glh/src/main/resources/ESH-INF/thing/thing-types.xml", "committedDate": "2020-04-29T09:21:53Z", "type": "commit"}, {"oid": "1a2b28c7db42d3394cf9220d1671462764ce84f9", "url": "https://github.com/openhab/openhab-addons/commit/1a2b28c7db42d3394cf9220d1671462764ce84f9", "message": "Initial commit of VigiCrues binding\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-04-29T13:01:45Z", "type": "commit"}, {"oid": "b79ce3754ad1800737eac34f43bdcc6348c77b52", "url": "https://github.com/openhab/openhab-addons/commit/b79ce3754ad1800737eac34f43bdcc6348c77b52", "message": "Some files forgotten\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-04-29T13:10:56Z", "type": "commit"}, {"oid": "42e2f60d02536f3914d87eed0f63771a1a8f61a7", "url": "https://github.com/openhab/openhab-addons/commit/42e2f60d02536f3914d87eed0f63771a1a8f61a7", "message": "Renaming folder\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-04-29T13:48:14Z", "type": "commit"}, {"oid": "7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb", "url": "https://github.com/openhab/openhab-addons/commit/7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb", "message": "Correcting tabs in xml file\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-04-29T13:57:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg4MjgyOA==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r417882828", "bodyText": "Put the thing OFFLINE with a COMMUNICATION_ERROR.", "author": "lolodomo", "createdAt": "2020-04-30T09:36:59Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} mn\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The VigiCrues binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n+                Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+                    record.getFields().ifPresent(field -> {\n+                        field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n+                        field.getDebit()\n+                                .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n+                        field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    });\n+                });\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to VigiCrues webservice : {}\", e.getMessage());", "originalCommit": "7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8743ad5e062aa3fd741c2a62172833515945d128", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\nindex c343763149..fb99905ee0 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n\n@@ -126,6 +126,7 @@ public class VigiCruesHandler extends BaseThingHandler {\n                 });\n             } catch (IOException e) {\n                 logger.warn(\"Error opening connection to VigiCrues webservice : {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         } catch (MalformedURLException e) {\n             logger.error(\"Malformed URL in VigiCrues request : {}\", queryUrl);\n"}}, {"oid": "8743ad5e062aa3fd741c2a62172833515945d128", "url": "https://github.com/openhab/openhab-addons/commit/8743ad5e062aa3fd741c2a62172833515945d128", "message": "Code review corrections\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-04-30T10:44:12Z", "type": "commit"}, {"oid": "207e18dbb0311917b71d71e10d6b6f6e198f483f", "url": "https://github.com/openhab/openhab-addons/commit/207e18dbb0311917b71d71e10d6b6f6e198f483f", "message": "Simplified sample\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-05-01T14:14:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MjkzNg==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r418952936", "bodyText": "Please reduce to WARN", "author": "lolodomo", "createdAt": "2020-05-02T12:28:04Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} mn\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The VigiCrues binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n+                Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+                    record.getFields().ifPresent(field -> {\n+                        field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n+                        field.getDebit()\n+                                .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n+                        field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    });\n+                });\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to VigiCrues webservice : {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.error(\"Malformed URL in VigiCrues request : {}\", queryUrl);", "originalCommit": "207e18dbb0311917b71d71e10d6b6f6e198f483f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acf2cd5785f0ba72b1f8daec4a42eacf4a03188b", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\nindex fb99905ee0..62ff412138 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n\n@@ -129,7 +129,7 @@ public class VigiCruesHandler extends BaseThingHandler {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         } catch (MalformedURLException e) {\n-            logger.error(\"Malformed URL in VigiCrues request : {}\", queryUrl);\n+            logger.warn(\"Malformed URL in VigiCrues request : {}\", queryUrl);\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n         }\n     }\n"}}, {"oid": "acf2cd5785f0ba72b1f8daec4a42eacf4a03188b", "url": "https://github.com/openhab/openhab-addons/commit/acf2cd5785f0ba72b1f8daec4a42eacf4a03188b", "message": "Code review\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-05-02T14:45:27Z", "type": "commit"}, {"oid": "a7a34c176b59c2e4172360c633b0ffa908df6eb6", "url": "https://github.com/openhab/openhab-addons/commit/a7a34c176b59c2e4172360c633b0ffa908df6eb6", "message": "Code corrections\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-05-22T09:19:38Z", "type": "commit"}, {"oid": "c23f8c56f5b7389e279e171944f2b67737601e2f", "url": "https://github.com/openhab/openhab-addons/commit/c23f8c56f5b7389e279e171944f2b67737601e2f", "message": "Code review enhancement\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-05-24T07:54:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNzc3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r429737774", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n          \n          \n            \n                            record.getFields().ifPresent(field -> {\n          \n          \n            \n                                field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n          \n          \n            \n                                field.getDebit()\n          \n          \n            \n                                        .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n          \n          \n            \n                                field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n          \n          \n            \n                            });\n          \n          \n            \n                        });\n          \n          \n            \n                        Arrays.stream(apiResponse.getRecords()).findFirst()\n          \n          \n            \n                            .flatMap(record -> record.getFields()).ifPresent(field -> {\n          \n          \n            \n                                field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n          \n          \n            \n                                field.getDebit()\n          \n          \n            \n                                        .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n          \n          \n            \n                                field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n          \n          \n            \n                            });", "author": "cpmeister", "createdAt": "2020-05-25T05:32:45Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} mn\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The VigiCrues binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");\n+            }\n+            String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+            updateStatus(ThingStatus.ONLINE);\n+            OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n+            Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+                record.getFields().ifPresent(field -> {\n+                    field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n+                    field.getDebit()\n+                            .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n+                    field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                });\n+            });", "originalCommit": "c23f8c56f5b7389e279e171944f2b67737601e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43f998e1fd0aa6bec04812046721f3a094269d64", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\nindex be5f6ef214..1d40dad28d 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n\n@@ -49,8 +49,8 @@ import com.google.gson.JsonDeserializer;\n import tec.uom.se.unit.Units;\n \n /**\n- * The {@link VigiCruesHandler} is responsible for updating channels\n- * and querying the API\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  */\n"}}, {"oid": "43f998e1fd0aa6bec04812046721f3a094269d64", "url": "https://github.com/openhab/openhab-addons/commit/43f998e1fd0aa6bec04812046721f3a094269d64", "message": "Final review enhancement\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-05-25T06:57:51Z", "type": "commit"}, {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9", "url": "https://github.com/openhab/openhab-addons/commit/672c533160bdf63956d6d17bdc7845af43182bc9", "message": "Precode review enhancements\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-05-27T07:57:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NzcxMg==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435477712", "bodyText": "You could make it an int, make the Non-null way more strict :-)", "author": "martinvw", "createdAt": "2020-06-04T18:47:23Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/VigiCruesConfiguration.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VigiCruesConfiguration} is the class used to match the\n+ * thing configuration.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesConfiguration {\n+    public String id = \"\";\n+    public Integer refresh = 30;", "originalCommit": "672c533160bdf63956d6d17bdc7845af43182bc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/VigiCruesConfiguration.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/VigiCruesConfiguration.java\nindex 5038390994..7148589fe5 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/VigiCruesConfiguration.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/VigiCruesConfiguration.java\n\n@@ -23,5 +23,5 @@ import org.eclipse.jdt.annotation.NonNullByDefault;\n @NonNullByDefault\n public class VigiCruesConfiguration {\n     public String id = \"\";\n-    public Integer refresh = 30;\n+    public int refresh = 30;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3ODQ2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435478469", "bodyText": "This call is actually not that safe it could be another refreshJob by now, could we just leave it set? Instead of null-ing a potential different job.\nI see that we do this very often and it has not much practical benefit imho.\nCC: @openhab/add-ons-maintainers", "author": "martinvw", "createdAt": "2020-06-04T18:48:53Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} min\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        this.refreshJob = null;", "originalCommit": "672c533160bdf63956d6d17bdc7845af43182bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5MzM0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435593349", "bodyText": "The only way it would be a different job is if initialize() was called concurrently with dispose(). And if that was the case then you would also need to take precautions to not overwrite an existing job without cancelling the old one.\nNow if the framework never calls initialize or dispose concurrently then I think nulling the fields in dispose would be needless but harmless to do.", "author": "cpmeister", "createdAt": "2020-06-04T22:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3ODQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0Njk0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435746943", "bodyText": "So as I understand it is a common practice all over bindings, I leave it as it is", "author": "clinique", "createdAt": "2020-06-05T07:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3ODQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\nindex d26b4ac314..0ea2806c58 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n\n@@ -12,7 +12,9 @@\n  */\n package org.openhab.binding.vigicrues.internal.handler;\n \n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.CUBICMETRE_PER_SECOND;\n import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+import static tec.uom.se.unit.Units.METRE;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MjY0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435482643", "bodyText": "Wouldn't it be more pure/clear to just make this field @Nullable and check on that instead of adding a magic meaning to the field being \"\".", "author": "martinvw", "createdAt": "2020-06-04T18:56:24Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";", "originalCommit": "672c533160bdf63956d6d17bdc7845af43182bc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\nindex d26b4ac314..0ea2806c58 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n\n@@ -12,7 +12,9 @@\n  */\n package org.openhab.binding.vigicrues.internal.handler;\n \n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.CUBICMETRE_PER_SECOND;\n import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+import static tec.uom.se.unit.Units.METRE;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MzA4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435483080", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Arrays.stream(apiResponse.getRecords()).findFirst().flatMap(record -> record.getFields())\n          \n          \n            \n                        Arrays.stream(apiResponse.getRecords()).findFirst().flatMap(record ::getFields)", "author": "martinvw", "createdAt": "2020-06-04T18:57:11Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} min\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        this.refreshJob = null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");\n+            }\n+            String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+            updateStatus(ThingStatus.ONLINE);\n+            OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n+            Arrays.stream(apiResponse.getRecords()).findFirst().flatMap(record -> record.getFields())", "originalCommit": "672c533160bdf63956d6d17bdc7845af43182bc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\nindex d26b4ac314..0ea2806c58 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n\n@@ -12,7 +12,9 @@\n  */\n package org.openhab.binding.vigicrues.internal.handler;\n \n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.CUBICMETRE_PER_SECOND;\n import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+import static tec.uom.se.unit.Units.METRE;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4Mzc5OA==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435483798", "bodyText": "Better just handle this instead of throwing an exception which you catch in the same method, exception handling is rather expensive.", "author": "martinvw", "createdAt": "2020-06-04T18:58:26Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} min\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        this.refreshJob = null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");", "originalCommit": "672c533160bdf63956d6d17bdc7845af43182bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NDk4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435484983", "bodyText": "Given its initialized with a constant + something this could never happen so maybe you should just throw an exception which is not even caught or handled.", "author": "martinvw", "createdAt": "2020-06-04T19:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4Mzc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\nindex d26b4ac314..0ea2806c58 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n\n@@ -12,7 +12,9 @@\n  */\n package org.openhab.binding.vigicrues.internal.handler;\n \n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.CUBICMETRE_PER_SECOND;\n import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+import static tec.uom.se.unit.Units.METRE;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NDEzMA==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435484130", "bodyText": "This catch clause would then still be needed.", "author": "martinvw", "createdAt": "2020-06-04T18:59:07Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} min\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        this.refreshJob = null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");\n+            }\n+            String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+            updateStatus(ThingStatus.ONLINE);\n+            OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n+            Arrays.stream(apiResponse.getRecords()).findFirst().flatMap(record -> record.getFields())\n+                    .ifPresent(field -> {\n+                        field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n+                        field.getDebit()\n+                                .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n+                        field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    });\n+        } catch (MalformedURLException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,", "originalCommit": "672c533160bdf63956d6d17bdc7845af43182bc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\nindex d26b4ac314..0ea2806c58 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java\n\n@@ -12,7 +12,9 @@\n  */\n package org.openhab.binding.vigicrues.internal.handler;\n \n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.CUBICMETRE_PER_SECOND;\n import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+import static tec.uom.se.unit.Units.METRE;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NTY4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435485681", "bodyText": "Could it make sense to map it to an understandable name is it just the nominalDepth?", "author": "martinvw", "createdAt": "2020-06-04T19:01:59Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/Refine.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.json;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link Refine} is the Java class used to map the JSON\n+ * response to the webservice request.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Refine {\n+    @SerializedName(\"nom_dept\")\n+    private String nomDept = \"\";", "originalCommit": "672c533160bdf63956d6d17bdc7845af43182bc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/Refine.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/Refine.java\nindex 1092811c18..e98c8d938b 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/Refine.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/Refine.java\n\n@@ -25,9 +25,9 @@ import com.google.gson.annotations.SerializedName;\n @NonNullByDefault\n public class Refine {\n     @SerializedName(\"nom_dept\")\n-    private String nomDept = \"\";\n+    private String departmentName = \"\";\n \n-    public String getNomDept() {\n-        return nomDept;\n+    public String getDepartmentName() {\n+        return departmentName;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NTkyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435485921", "bodyText": "Would it make sense to map these to English names :-D", "author": "martinvw", "createdAt": "2020-06-04T19:02:24Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/VigiCruesFields.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.json;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link VigiCruesFields} is the Java class used to map the JSON\n+ * response to the webservice request.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesFields {\n+    private @Nullable Double debit;\n+    private @Nullable Double hauteur;", "originalCommit": "672c533160bdf63956d6d17bdc7845af43182bc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "chunk": "diff --git a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/VigiCruesFields.java b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/VigiCruesFields.java\nindex 8154083783..35e6964224 100644\n--- a/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/VigiCruesFields.java\n+++ b/bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/VigiCruesFields.java\n\n@@ -18,6 +18,8 @@ import java.util.Optional;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n \n+import com.google.gson.annotations.SerializedName;\n+\n /**\n  * The {@link VigiCruesFields} is the Java class used to map the JSON\n  * response to the webservice request.\n"}}, {"oid": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "url": "https://github.com/openhab/openhab-addons/commit/e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "message": "Code review enhancements\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-06-05T07:47:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NjY2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435766663", "bodyText": "That was not what I expected :-D", "author": "martinvw", "createdAt": "2020-06-05T08:25:02Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/Refine.java", "diffHunk": "@@ -25,9 +25,9 @@\n @NonNullByDefault\n public class Refine {\n     @SerializedName(\"nom_dept\")\n-    private String nomDept = \"\";\n+    private String departmentName = \"\";", "originalCommit": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}