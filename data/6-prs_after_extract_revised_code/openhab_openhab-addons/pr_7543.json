{"pr_number": 7543, "pr_title": "[avmfritz] Refactoring of discovery service and internal event handling", "pr_createdAt": "2020-05-03T20:25:01Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7543", "timeline": [{"oid": "e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "url": "https://github.com/openhab/openhab-addons/commit/e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "message": "Refactoring of discovery service and internal event handling\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-05-03T20:19:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxMzUxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419213510", "bodyText": "device.isSwitchableOutlet seems redundant when device.getSwitch() could be made to return false if it wasn't a switchable outlet.", "author": "cpmeister", "createdAt": "2020-05-04T04:55:44Z", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java", "diffHunk": "@@ -78,15 +94,202 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n     }\n \n+    @Override\n+    public void onDeviceAdded(AVMFritzBaseModel device) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void onDeviceUpdated(AVMFritzBaseModel device) {\n+        updateStatus(ThingStatus.ONLINE);\n+        state = device;\n+\n+        updateProperties(device);\n+\n+        if (device instanceof DeviceModel && device.isTempSensor() && ((DeviceModel) device).getTemperature() != null) {\n+            updateThingChannelState(CHANNEL_TEMPERATURE,\n+                    new QuantityType<>(((DeviceModel) device).getTemperature().getCelsius(), SIUnits.CELSIUS));\n+            updateThingChannelConfiguration(CHANNEL_TEMPERATURE, CONFIG_CHANNEL_TEMP_OFFSET,\n+                    ((DeviceModel) device).getTemperature().getOffset());\n+        }\n+        if (device.isPowermeter() && device.getPowermeter() != null) {\n+            updateThingChannelState(CHANNEL_ENERGY,\n+                    new QuantityType<>(device.getPowermeter().getEnergy(), SmartHomeUnits.WATT_HOUR));\n+            updateThingChannelState(CHANNEL_POWER,\n+                    new QuantityType<>(device.getPowermeter().getPower(), SmartHomeUnits.WATT));\n+            updateThingChannelState(CHANNEL_VOLTAGE,\n+                    new QuantityType<>(device.getPowermeter().getVoltage(), SmartHomeUnits.VOLT));\n+        }\n+        if (device.isSwitchableOutlet() && device.getSwitch() != null) {", "originalCommit": "e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "chunk": "diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\nindex 0c9e2f35bd..b422bd9ddd 100644\n--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n\n@@ -90,8 +91,33 @@ public abstract class AVMFritzBaseThingHandler extends BaseThingHandler implemen\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing handler for {}\", getClass().getName());\n-        updateStatus(ThingStatus.UNKNOWN);\n+        config = getConfigAs(AVMFritzDeviceConfiguration.class);\n+        String newIdentifier = config.ain;\n+        if (newIdentifier == null || newIdentifier.trim().isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"The 'ain' parameter must be configured.\");\n+        } else {\n+            Bridge bridge = getBridge();\n+            if (bridge != null) {\n+                BridgeHandler handler = bridge.getHandler();\n+                if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                    ((AVMFritzBaseBridgeHandler) handler).registerStatusListener(this);\n+                }\n+            }\n+\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler handler = bridge.getHandler();\n+            if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                ((AVMFritzBaseBridgeHandler) handler).unregisterStatusListener(this);\n+            }\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNDA3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419214071", "bodyText": "It might be better to adjust the logic so you only need to check device instanceof DeviceModel and cast to DeviceModel only once. But it might also make the logic less readable so I'm fine if you don't want to change it.", "author": "cpmeister", "createdAt": "2020-05-04T04:59:02Z", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java", "diffHunk": "@@ -78,15 +94,202 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n     }\n \n+    @Override\n+    public void onDeviceAdded(AVMFritzBaseModel device) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void onDeviceUpdated(AVMFritzBaseModel device) {\n+        updateStatus(ThingStatus.ONLINE);\n+        state = device;\n+\n+        updateProperties(device);\n+\n+        if (device instanceof DeviceModel && device.isTempSensor() && ((DeviceModel) device).getTemperature() != null) {", "originalCommit": "e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "chunk": "diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\nindex 0c9e2f35bd..b422bd9ddd 100644\n--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n\n@@ -90,8 +91,33 @@ public abstract class AVMFritzBaseThingHandler extends BaseThingHandler implemen\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing handler for {}\", getClass().getName());\n-        updateStatus(ThingStatus.UNKNOWN);\n+        config = getConfigAs(AVMFritzDeviceConfiguration.class);\n+        String newIdentifier = config.ain;\n+        if (newIdentifier == null || newIdentifier.trim().isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"The 'ain' parameter must be configured.\");\n+        } else {\n+            Bridge bridge = getBridge();\n+            if (bridge != null) {\n+                BridgeHandler handler = bridge.getHandler();\n+                if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                    ((AVMFritzBaseBridgeHandler) handler).registerStatusListener(this);\n+                }\n+            }\n+\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler handler = bridge.getHandler();\n+            if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                ((AVMFritzBaseBridgeHandler) handler).unregisterStatusListener(this);\n+            }\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNDIzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419214239", "bodyText": "device.getHkr() should probably be cached to a local variable", "author": "cpmeister", "createdAt": "2020-05-04T04:59:57Z", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java", "diffHunk": "@@ -78,15 +94,202 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n     }\n \n+    @Override\n+    public void onDeviceAdded(AVMFritzBaseModel device) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void onDeviceUpdated(AVMFritzBaseModel device) {\n+        updateStatus(ThingStatus.ONLINE);\n+        state = device;\n+\n+        updateProperties(device);\n+\n+        if (device instanceof DeviceModel && device.isTempSensor() && ((DeviceModel) device).getTemperature() != null) {\n+            updateThingChannelState(CHANNEL_TEMPERATURE,\n+                    new QuantityType<>(((DeviceModel) device).getTemperature().getCelsius(), SIUnits.CELSIUS));\n+            updateThingChannelConfiguration(CHANNEL_TEMPERATURE, CONFIG_CHANNEL_TEMP_OFFSET,\n+                    ((DeviceModel) device).getTemperature().getOffset());\n+        }\n+        if (device.isPowermeter() && device.getPowermeter() != null) {\n+            updateThingChannelState(CHANNEL_ENERGY,\n+                    new QuantityType<>(device.getPowermeter().getEnergy(), SmartHomeUnits.WATT_HOUR));\n+            updateThingChannelState(CHANNEL_POWER,\n+                    new QuantityType<>(device.getPowermeter().getPower(), SmartHomeUnits.WATT));\n+            updateThingChannelState(CHANNEL_VOLTAGE,\n+                    new QuantityType<>(device.getPowermeter().getVoltage(), SmartHomeUnits.VOLT));\n+        }\n+        if (device.isSwitchableOutlet() && device.getSwitch() != null) {\n+            updateThingChannelState(CHANNEL_MODE, new StringType(device.getSwitch().getMode()));\n+            updateThingChannelState(CHANNEL_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getSwitch().getLock()) ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            updateThingChannelState(CHANNEL_DEVICE_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getSwitch().getDevicelock()) ? OpenClosedType.OPEN\n+                            : OpenClosedType.CLOSED);\n+            if (device.getSwitch().getState() == null) {\n+                updateThingChannelState(CHANNEL_OUTLET, UnDefType.UNDEF);\n+            } else {\n+                updateThingChannelState(CHANNEL_OUTLET,\n+                        SwitchModel.ON.equals(device.getSwitch().getState()) ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+        if (device.isHeatingThermostat() && device.getHkr() != null) {\n+            updateThingChannelState(CHANNEL_MODE, new StringType(device.getHkr().getMode()));", "originalCommit": "e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "chunk": "diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\nindex 0c9e2f35bd..b422bd9ddd 100644\n--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n\n@@ -90,8 +91,33 @@ public abstract class AVMFritzBaseThingHandler extends BaseThingHandler implemen\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing handler for {}\", getClass().getName());\n-        updateStatus(ThingStatus.UNKNOWN);\n+        config = getConfigAs(AVMFritzDeviceConfiguration.class);\n+        String newIdentifier = config.ain;\n+        if (newIdentifier == null || newIdentifier.trim().isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"The 'ain' parameter must be configured.\");\n+        } else {\n+            Bridge bridge = getBridge();\n+            if (bridge != null) {\n+                BridgeHandler handler = bridge.getHandler();\n+                if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                    ((AVMFritzBaseBridgeHandler) handler).registerStatusListener(this);\n+                }\n+            }\n+\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler handler = bridge.getHandler();\n+            if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                ((AVMFritzBaseBridgeHandler) handler).unregisterStatusListener(this);\n+            }\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNjk5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419216992", "bodyText": "This logic could be optimized\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    getThing().getThings().stream().forEach(thing -> {\n          \n          \n            \n                        AVMFritzBaseThingHandler handler = (AVMFritzBaseThingHandler) thing.getHandler();\n          \n          \n            \n                        if (handler != null) {\n          \n          \n            \n                            Optional<AVMFritzBaseModel> optionalDevice = deviceList.stream()\n          \n          \n            \n                                    .filter(it -> it.getIdentifier().equals(handler.getIdentifier())).findFirst();\n          \n          \n            \n                    Map<String, AVMFritzBaseModel> deviceMap = deviceList.stream().collect(Collectors.toMap(it -> it.getIdentifier(), Functions.identity()));\n          \n          \n            \n                    getThing().getThings().forEach(thing -> {\n          \n          \n            \n                        AVMFritzBaseThingHandler handler = (AVMFritzBaseThingHandler) thing.getHandler();\n          \n          \n            \n                        if (handler != null) {\n          \n          \n            \n                            Optional<AVMFritzBaseModel> optionalDevice = Optional.ofNullable(deviceMap.get(handler.getIdentifier());", "author": "cpmeister", "createdAt": "2020-05-04T05:16:29Z", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseBridgeHandler.java", "diffHunk": "@@ -222,208 +223,46 @@ public void addTemplateList(List<TemplateModel> templateList) {\n     }\n \n     /**\n-     * Called from {@link FritzAhaUpdateCallback} to provide new values for things.\n+     * Called from {@link FritzAhaUpdateCallback} to provide new devices.\n      *\n-     * @param deviceList list of device models\n+     * @param deviceList list of devices\n      */\n-    public void addDeviceList(List<AVMFritzBaseModel> deviceList) {\n-        for (Thing thing : getThing().getThings()) {\n+    public void onDeviceListAdded(List<AVMFritzBaseModel> deviceList) {\n+        getThing().getThings().stream().forEach(thing -> {\n             AVMFritzBaseThingHandler handler = (AVMFritzBaseThingHandler) thing.getHandler();\n             if (handler != null) {\n                 Optional<AVMFritzBaseModel> optionalDevice = deviceList.stream()\n                         .filter(it -> it.getIdentifier().equals(handler.getIdentifier())).findFirst();", "originalCommit": "e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "chunk": "diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseBridgeHandler.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseBridgeHandler.java\nindex 8222e12b52..bd35a375c9 100644\n--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseBridgeHandler.java\n+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseBridgeHandler.java\n\n@@ -228,24 +222,18 @@ public abstract class AVMFritzBaseBridgeHandler extends BaseBridgeHandler {\n      * @param deviceList list of devices\n      */\n     public void onDeviceListAdded(List<AVMFritzBaseModel> deviceList) {\n+        Map<String, AVMFritzBaseModel> deviceIdentifierMap = deviceList.stream()\n+                .collect(Collectors.toMap(it -> it.getIdentifier(), Function.identity()));\n         getThing().getThings().stream().forEach(thing -> {\n             AVMFritzBaseThingHandler handler = (AVMFritzBaseThingHandler) thing.getHandler();\n             if (handler != null) {\n-                Optional<AVMFritzBaseModel> optionalDevice = deviceList.stream()\n-                        .filter(it -> it.getIdentifier().equals(handler.getIdentifier())).findFirst();\n+                Optional<AVMFritzBaseModel> optionalDevice = Optional\n+                        .ofNullable(deviceIdentifierMap.get(handler.getIdentifier()));\n                 if (optionalDevice.isPresent()) {\n                     AVMFritzBaseModel device = optionalDevice.get();\n                     deviceList.remove(device);\n-                    logger.debug(\"Update thing '{}' with device model: {}\", thing.getUID(), device);\n-                    if (device.getPresent() == 1) {\n-                        handler.onDeviceUpdated(device);\n-                        listeners.stream().forEach(listener -> listener.onDeviceUpdated(device));\n-                    } else {\n-                        handler.onDeviceRemoved(device);\n-                        listeners.stream().forEach(listener -> listener.onDeviceRemoved(device));\n-                    }\n+                    listeners.stream().forEach(listener -> listener.onDeviceUpdated(thing.getUID(), device));\n                 } else {\n-                    handler.onDeviceGone(thing.getUID());\n                     listeners.stream().forEach(listener -> listener.onDeviceGone(thing.getUID()));\n                 }\n             } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNzI1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419217254", "bodyText": "((GroupModel) device).getGroupinfo() should be cached to a local variable", "author": "cpmeister", "createdAt": "2020-05-04T05:18:11Z", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java", "diffHunk": "@@ -78,15 +94,202 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n     }\n \n+    @Override\n+    public void onDeviceAdded(AVMFritzBaseModel device) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void onDeviceUpdated(AVMFritzBaseModel device) {\n+        updateStatus(ThingStatus.ONLINE);\n+        state = device;\n+\n+        updateProperties(device);\n+\n+        if (device instanceof DeviceModel && device.isTempSensor() && ((DeviceModel) device).getTemperature() != null) {\n+            updateThingChannelState(CHANNEL_TEMPERATURE,\n+                    new QuantityType<>(((DeviceModel) device).getTemperature().getCelsius(), SIUnits.CELSIUS));\n+            updateThingChannelConfiguration(CHANNEL_TEMPERATURE, CONFIG_CHANNEL_TEMP_OFFSET,\n+                    ((DeviceModel) device).getTemperature().getOffset());\n+        }\n+        if (device.isPowermeter() && device.getPowermeter() != null) {\n+            updateThingChannelState(CHANNEL_ENERGY,\n+                    new QuantityType<>(device.getPowermeter().getEnergy(), SmartHomeUnits.WATT_HOUR));\n+            updateThingChannelState(CHANNEL_POWER,\n+                    new QuantityType<>(device.getPowermeter().getPower(), SmartHomeUnits.WATT));\n+            updateThingChannelState(CHANNEL_VOLTAGE,\n+                    new QuantityType<>(device.getPowermeter().getVoltage(), SmartHomeUnits.VOLT));\n+        }\n+        if (device.isSwitchableOutlet() && device.getSwitch() != null) {\n+            updateThingChannelState(CHANNEL_MODE, new StringType(device.getSwitch().getMode()));\n+            updateThingChannelState(CHANNEL_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getSwitch().getLock()) ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            updateThingChannelState(CHANNEL_DEVICE_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getSwitch().getDevicelock()) ? OpenClosedType.OPEN\n+                            : OpenClosedType.CLOSED);\n+            if (device.getSwitch().getState() == null) {\n+                updateThingChannelState(CHANNEL_OUTLET, UnDefType.UNDEF);\n+            } else {\n+                updateThingChannelState(CHANNEL_OUTLET,\n+                        SwitchModel.ON.equals(device.getSwitch().getState()) ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+        if (device.isHeatingThermostat() && device.getHkr() != null) {\n+            updateThingChannelState(CHANNEL_MODE, new StringType(device.getHkr().getMode()));\n+            updateThingChannelState(CHANNEL_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getHkr().getLock()) ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            updateThingChannelState(CHANNEL_DEVICE_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getHkr().getDevicelock()) ? OpenClosedType.OPEN\n+                            : OpenClosedType.CLOSED);\n+            updateThingChannelState(CHANNEL_ACTUALTEMP,\n+                    new QuantityType<>(toCelsius(device.getHkr().getTist()), SIUnits.CELSIUS));\n+            updateThingChannelState(CHANNEL_SETTEMP,\n+                    new QuantityType<>(toCelsius(device.getHkr().getTsoll()), SIUnits.CELSIUS));\n+            updateThingChannelState(CHANNEL_ECOTEMP,\n+                    new QuantityType<>(toCelsius(device.getHkr().getAbsenk()), SIUnits.CELSIUS));\n+            updateThingChannelState(CHANNEL_COMFORTTEMP,\n+                    new QuantityType<>(toCelsius(device.getHkr().getKomfort()), SIUnits.CELSIUS));\n+            updateThingChannelState(CHANNEL_RADIATOR_MODE, new StringType(device.getHkr().getRadiatorMode()));\n+            if (device.getHkr().getNextchange() != null) {\n+                if (device.getHkr().getNextchange().getEndperiod() == 0) {\n+                    updateThingChannelState(CHANNEL_NEXT_CHANGE, UnDefType.UNDEF);\n+                } else {\n+                    updateThingChannelState(CHANNEL_NEXT_CHANGE,\n+                            new DateTimeType(ZonedDateTime.ofInstant(\n+                                    Instant.ofEpochSecond(device.getHkr().getNextchange().getEndperiod()),\n+                                    ZoneId.systemDefault())));\n+                }\n+                if (TEMP_FRITZ_UNDEFINED.equals(device.getHkr().getNextchange().getTchange())) {\n+                    updateThingChannelState(CHANNEL_NEXTTEMP, UnDefType.UNDEF);\n+                } else {\n+                    updateThingChannelState(CHANNEL_NEXTTEMP, new QuantityType<>(\n+                            toCelsius(device.getHkr().getNextchange().getTchange()), SIUnits.CELSIUS));\n+                }\n+            }\n+            if (device.getHkr().getBattery() == null) {\n+                updateThingChannelState(CHANNEL_BATTERY, UnDefType.UNDEF);\n+            } else {\n+                updateThingChannelState(CHANNEL_BATTERY, new DecimalType(device.getHkr().getBattery()));\n+            }\n+            if (device.getHkr().getBatterylow() == null) {\n+                updateThingChannelState(CHANNEL_BATTERY_LOW, UnDefType.UNDEF);\n+            } else {\n+                updateThingChannelState(CHANNEL_BATTERY_LOW,\n+                        BATTERY_ON.equals(device.getHkr().getBatterylow()) ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+        if (device instanceof DeviceModel && device.isAlarmSensor() && ((DeviceModel) device).getAlert() != null) {\n+            updateThingChannelState(CHANNEL_CONTACT_STATE,\n+                    AlertModel.ON.equals(((DeviceModel) device).getAlert().getState()) ? OpenClosedType.OPEN\n+                            : OpenClosedType.CLOSED);\n+        }\n+        if (device instanceof DeviceModel && device.isButton() && ((DeviceModel) device).getButton() != null) {\n+            if (((DeviceModel) device).getButton().getLastpressedtimestamp() == 0) {\n+                updateThingChannelState(CHANNEL_LAST_CHANGE, UnDefType.UNDEF);\n+            } else {\n+                ZoneId zoneId = ZoneId.systemDefault();\n+                ZonedDateTime timestamp = ZonedDateTime.ofInstant(\n+                        Instant.ofEpochSecond(((DeviceModel) device).getButton().getLastpressedtimestamp()), zoneId);\n+                Instant then = timestamp.toInstant();\n+                ZonedDateTime now = ZonedDateTime.now(zoneId);\n+                Instant someSecondsEarlier = now.minusSeconds(15).toInstant();\n+                if (then.isAfter(someSecondsEarlier) && then.isBefore(now.toInstant())) {\n+                    triggerThingChannel(CHANNEL_PRESS, CommonTriggerEvents.PRESSED);\n+                }\n+                updateThingChannelState(CHANNEL_LAST_CHANGE, new DateTimeType(timestamp));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Updates thing properties.\n+     *\n+     * @param device the {@link AVMFritzBaseModel}\n+     */\n+    private void updateProperties(AVMFritzBaseModel device) {\n+        Map<String, String> editProperties = editProperties();\n+        editProperties.put(Thing.PROPERTY_FIRMWARE_VERSION, device.getFirmwareVersion());\n+        if (device instanceof GroupModel && ((GroupModel) device).getGroupinfo() != null) {", "originalCommit": "e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4ODM3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419288378", "bodyText": "Yes, I am aware of all those minor improvements. To be honest, I am not very happy with the current code. My plan is to refactor the binding step by step.", "author": "cweitkamp", "createdAt": "2020-05-04T08:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNzI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "chunk": "diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\nindex 0c9e2f35bd..b422bd9ddd 100644\n--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n\n@@ -90,8 +91,33 @@ public abstract class AVMFritzBaseThingHandler extends BaseThingHandler implemen\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing handler for {}\", getClass().getName());\n-        updateStatus(ThingStatus.UNKNOWN);\n+        config = getConfigAs(AVMFritzDeviceConfiguration.class);\n+        String newIdentifier = config.ain;\n+        if (newIdentifier == null || newIdentifier.trim().isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"The 'ain' parameter must be configured.\");\n+        } else {\n+            Bridge bridge = getBridge();\n+            if (bridge != null) {\n+                BridgeHandler handler = bridge.getHandler();\n+                if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                    ((AVMFritzBaseBridgeHandler) handler).registerStatusListener(this);\n+                }\n+            }\n+\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler handler = bridge.getHandler();\n+            if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                ((AVMFritzBaseBridgeHandler) handler).unregisterStatusListener(this);\n+            }\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxODIzMg==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419218232", "bodyText": "Is there a reason this isn't simplified?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Configuration editConfig = new Configuration(new HashMap<>(config.getProperties()));\n          \n          \n            \n                        editConfig.put(configId, value);\n          \n          \n            \n                        config.setProperties(editConfig.getProperties());\n          \n          \n            \n                        config.put(configId, value);", "author": "cpmeister", "createdAt": "2020-05-04T05:23:48Z", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java", "diffHunk": "@@ -78,15 +94,202 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n     }\n \n+    @Override\n+    public void onDeviceAdded(AVMFritzBaseModel device) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void onDeviceUpdated(AVMFritzBaseModel device) {\n+        updateStatus(ThingStatus.ONLINE);\n+        state = device;\n+\n+        updateProperties(device);\n+\n+        if (device instanceof DeviceModel && device.isTempSensor() && ((DeviceModel) device).getTemperature() != null) {\n+            updateThingChannelState(CHANNEL_TEMPERATURE,\n+                    new QuantityType<>(((DeviceModel) device).getTemperature().getCelsius(), SIUnits.CELSIUS));\n+            updateThingChannelConfiguration(CHANNEL_TEMPERATURE, CONFIG_CHANNEL_TEMP_OFFSET,\n+                    ((DeviceModel) device).getTemperature().getOffset());\n+        }\n+        if (device.isPowermeter() && device.getPowermeter() != null) {\n+            updateThingChannelState(CHANNEL_ENERGY,\n+                    new QuantityType<>(device.getPowermeter().getEnergy(), SmartHomeUnits.WATT_HOUR));\n+            updateThingChannelState(CHANNEL_POWER,\n+                    new QuantityType<>(device.getPowermeter().getPower(), SmartHomeUnits.WATT));\n+            updateThingChannelState(CHANNEL_VOLTAGE,\n+                    new QuantityType<>(device.getPowermeter().getVoltage(), SmartHomeUnits.VOLT));\n+        }\n+        if (device.isSwitchableOutlet() && device.getSwitch() != null) {\n+            updateThingChannelState(CHANNEL_MODE, new StringType(device.getSwitch().getMode()));\n+            updateThingChannelState(CHANNEL_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getSwitch().getLock()) ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            updateThingChannelState(CHANNEL_DEVICE_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getSwitch().getDevicelock()) ? OpenClosedType.OPEN\n+                            : OpenClosedType.CLOSED);\n+            if (device.getSwitch().getState() == null) {\n+                updateThingChannelState(CHANNEL_OUTLET, UnDefType.UNDEF);\n+            } else {\n+                updateThingChannelState(CHANNEL_OUTLET,\n+                        SwitchModel.ON.equals(device.getSwitch().getState()) ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+        if (device.isHeatingThermostat() && device.getHkr() != null) {\n+            updateThingChannelState(CHANNEL_MODE, new StringType(device.getHkr().getMode()));\n+            updateThingChannelState(CHANNEL_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getHkr().getLock()) ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            updateThingChannelState(CHANNEL_DEVICE_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getHkr().getDevicelock()) ? OpenClosedType.OPEN\n+                            : OpenClosedType.CLOSED);\n+            updateThingChannelState(CHANNEL_ACTUALTEMP,\n+                    new QuantityType<>(toCelsius(device.getHkr().getTist()), SIUnits.CELSIUS));\n+            updateThingChannelState(CHANNEL_SETTEMP,\n+                    new QuantityType<>(toCelsius(device.getHkr().getTsoll()), SIUnits.CELSIUS));\n+            updateThingChannelState(CHANNEL_ECOTEMP,\n+                    new QuantityType<>(toCelsius(device.getHkr().getAbsenk()), SIUnits.CELSIUS));\n+            updateThingChannelState(CHANNEL_COMFORTTEMP,\n+                    new QuantityType<>(toCelsius(device.getHkr().getKomfort()), SIUnits.CELSIUS));\n+            updateThingChannelState(CHANNEL_RADIATOR_MODE, new StringType(device.getHkr().getRadiatorMode()));\n+            if (device.getHkr().getNextchange() != null) {\n+                if (device.getHkr().getNextchange().getEndperiod() == 0) {\n+                    updateThingChannelState(CHANNEL_NEXT_CHANGE, UnDefType.UNDEF);\n+                } else {\n+                    updateThingChannelState(CHANNEL_NEXT_CHANGE,\n+                            new DateTimeType(ZonedDateTime.ofInstant(\n+                                    Instant.ofEpochSecond(device.getHkr().getNextchange().getEndperiod()),\n+                                    ZoneId.systemDefault())));\n+                }\n+                if (TEMP_FRITZ_UNDEFINED.equals(device.getHkr().getNextchange().getTchange())) {\n+                    updateThingChannelState(CHANNEL_NEXTTEMP, UnDefType.UNDEF);\n+                } else {\n+                    updateThingChannelState(CHANNEL_NEXTTEMP, new QuantityType<>(\n+                            toCelsius(device.getHkr().getNextchange().getTchange()), SIUnits.CELSIUS));\n+                }\n+            }\n+            if (device.getHkr().getBattery() == null) {\n+                updateThingChannelState(CHANNEL_BATTERY, UnDefType.UNDEF);\n+            } else {\n+                updateThingChannelState(CHANNEL_BATTERY, new DecimalType(device.getHkr().getBattery()));\n+            }\n+            if (device.getHkr().getBatterylow() == null) {\n+                updateThingChannelState(CHANNEL_BATTERY_LOW, UnDefType.UNDEF);\n+            } else {\n+                updateThingChannelState(CHANNEL_BATTERY_LOW,\n+                        BATTERY_ON.equals(device.getHkr().getBatterylow()) ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+        if (device instanceof DeviceModel && device.isAlarmSensor() && ((DeviceModel) device).getAlert() != null) {\n+            updateThingChannelState(CHANNEL_CONTACT_STATE,\n+                    AlertModel.ON.equals(((DeviceModel) device).getAlert().getState()) ? OpenClosedType.OPEN\n+                            : OpenClosedType.CLOSED);\n+        }\n+        if (device instanceof DeviceModel && device.isButton() && ((DeviceModel) device).getButton() != null) {\n+            if (((DeviceModel) device).getButton().getLastpressedtimestamp() == 0) {\n+                updateThingChannelState(CHANNEL_LAST_CHANGE, UnDefType.UNDEF);\n+            } else {\n+                ZoneId zoneId = ZoneId.systemDefault();\n+                ZonedDateTime timestamp = ZonedDateTime.ofInstant(\n+                        Instant.ofEpochSecond(((DeviceModel) device).getButton().getLastpressedtimestamp()), zoneId);\n+                Instant then = timestamp.toInstant();\n+                ZonedDateTime now = ZonedDateTime.now(zoneId);\n+                Instant someSecondsEarlier = now.minusSeconds(15).toInstant();\n+                if (then.isAfter(someSecondsEarlier) && then.isBefore(now.toInstant())) {\n+                    triggerThingChannel(CHANNEL_PRESS, CommonTriggerEvents.PRESSED);\n+                }\n+                updateThingChannelState(CHANNEL_LAST_CHANGE, new DateTimeType(timestamp));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Updates thing properties.\n+     *\n+     * @param device the {@link AVMFritzBaseModel}\n+     */\n+    private void updateProperties(AVMFritzBaseModel device) {\n+        Map<String, String> editProperties = editProperties();\n+        editProperties.put(Thing.PROPERTY_FIRMWARE_VERSION, device.getFirmwareVersion());\n+        if (device instanceof GroupModel && ((GroupModel) device).getGroupinfo() != null) {\n+            editProperties.put(PROPERTY_MASTER, ((GroupModel) device).getGroupinfo().getMasterdeviceid());\n+            editProperties.put(PROPERTY_MEMBERS, ((GroupModel) device).getGroupinfo().getMembers());\n+        }\n+        updateProperties(editProperties);\n+    }\n+\n+    /**\n+     * Updates thing channels.\n+     *\n+     * @param channelId ID of the channel to be updated.\n+     * @param state State to be set.\n+     */\n+    private void updateThingChannelState(String channelId, State state) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            updateState(channel.getUID(), state);\n+        } else {\n+            logger.debug(\"Channel '{}' in thing '{}' does not exist, recreating thing.\", channelId, thing.getUID());\n+            createChannel(channelId);\n+        }\n+    }\n+\n+    /**\n+     * Creates new channels for the thing.\n+     *\n+     * @param channelId ID of the channel to be created.\n+     */\n+    private void createChannel(String channelId) {\n+        ThingHandlerCallback callback = getCallback();\n+        if (callback != null) {\n+            ChannelUID channelUID = new ChannelUID(thing.getUID(), channelId);\n+            ChannelTypeUID channelTypeUID = CHANNEL_BATTERY.equals(channelId)\n+                    ? new ChannelTypeUID(\"system:battery-level\")\n+                    : new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = callback.createChannelBuilder(channelUID, channelTypeUID).build();\n+            updateThing(editThing().withoutChannel(channelUID).withChannel(channel).build());\n+        }\n+    }\n+\n     /**\n-     * Called from {@link AVMFritzBaseBridgeHandler)} to update the thing status because updateStatus is protected.\n+     * Triggers thing channels.\n      *\n-     * @param status Thing status\n-     * @param statusDetail Thing status detail\n-     * @param description Thing status description\n+     * @param channelId ID of the channel to be triggered.\n+     * @param event Event to emit\n      */\n-    public void setStatusInfo(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n-        updateStatus(status, statusDetail, description);\n+    private void triggerThingChannel(String channelId, String event) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            triggerChannel(channel.getUID(), event);\n+        } else {\n+            logger.debug(\"Channel '{}' in thing '{}' does not exist.\", channelId, thing.getUID());\n+        }\n+    }\n+\n+    /**\n+     * Updates thing channel configurations.\n+     *\n+     * @param channelId ID of the channel which configuration to be updated.\n+     * @param configId ID of the configuration to be updated.\n+     * @param value Value to be set.\n+     */\n+    private void updateThingChannelConfiguration(String channelId, String configId, Object value) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            Configuration config = channel.getConfiguration();\n+            Configuration editConfig = new Configuration(new HashMap<>(config.getProperties()));\n+            editConfig.put(configId, value);\n+            config.setProperties(editConfig.getProperties());", "originalCommit": "e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "chunk": "diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\nindex 0c9e2f35bd..b422bd9ddd 100644\n--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n\n@@ -90,8 +91,33 @@ public abstract class AVMFritzBaseThingHandler extends BaseThingHandler implemen\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing handler for {}\", getClass().getName());\n-        updateStatus(ThingStatus.UNKNOWN);\n+        config = getConfigAs(AVMFritzDeviceConfiguration.class);\n+        String newIdentifier = config.ain;\n+        if (newIdentifier == null || newIdentifier.trim().isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"The 'ain' parameter must be configured.\");\n+        } else {\n+            Bridge bridge = getBridge();\n+            if (bridge != null) {\n+                BridgeHandler handler = bridge.getHandler();\n+                if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                    ((AVMFritzBaseBridgeHandler) handler).registerStatusListener(this);\n+                }\n+            }\n+\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler handler = bridge.getHandler();\n+            if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                ((AVMFritzBaseBridgeHandler) handler).unregisterStatusListener(this);\n+            }\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxODg0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419218841", "bodyText": "If onDeviceRemove/onDeviceGone cause the thing to go offline, wouldn't adding the device make the thing go online?", "author": "cpmeister", "createdAt": "2020-05-04T05:26:52Z", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java", "diffHunk": "@@ -78,15 +94,202 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n     }\n \n+    @Override\n+    public void onDeviceAdded(AVMFritzBaseModel device) {\n+        // nothing to do", "originalCommit": "e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4MTM3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419281375", "bodyText": "No, onDeviceAdded() will only be called if no Thing is available.", "author": "cweitkamp", "createdAt": "2020-05-04T08:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxODg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "chunk": "diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\nindex 0c9e2f35bd..b422bd9ddd 100644\n--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseThingHandler.java\n\n@@ -90,8 +91,33 @@ public abstract class AVMFritzBaseThingHandler extends BaseThingHandler implemen\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing handler for {}\", getClass().getName());\n-        updateStatus(ThingStatus.UNKNOWN);\n+        config = getConfigAs(AVMFritzDeviceConfiguration.class);\n+        String newIdentifier = config.ain;\n+        if (newIdentifier == null || newIdentifier.trim().isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"The 'ain' parameter must be configured.\");\n+        } else {\n+            Bridge bridge = getBridge();\n+            if (bridge != null) {\n+                BridgeHandler handler = bridge.getHandler();\n+                if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                    ((AVMFritzBaseBridgeHandler) handler).registerStatusListener(this);\n+                }\n+            }\n+\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler handler = bridge.getHandler();\n+            if (handler instanceof AVMFritzBaseBridgeHandler) {\n+                ((AVMFritzBaseBridgeHandler) handler).unregisterStatusListener(this);\n+            }\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMDIxOA==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419220218", "bodyText": "This logic is also used in AVMFritzBaseThingHandler so it should be refactored into a utility class.", "author": "cpmeister", "createdAt": "2020-05-04T05:34:46Z", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java", "diffHunk": "@@ -74,41 +81,123 @@ public Powerline546EHandler(Bridge bridge, HttpClient httpClient,\n     }\n \n     @Override\n-    public void addDeviceList(List<AVMFritzBaseModel> devicelist) {\n+    public void onDeviceListAdded(List<AVMFritzBaseModel> devicelist) {\n         String identifier = getIdentifier();\n-        Predicate<AVMFritzBaseModel> predicate = identifier == null ? it -> getThing().getUID().equals(getThingUID(it))\n+        Predicate<AVMFritzBaseModel> predicate = identifier == null ? it -> thing.getUID().equals(getThingUID(it))\n                 : it -> it.getIdentifier().equals(identifier);\n         Optional<AVMFritzBaseModel> optionalDevice = devicelist.stream().filter(predicate).findFirst();\n         if (optionalDevice.isPresent()) {\n             AVMFritzBaseModel device = optionalDevice.get();\n             devicelist.remove(device);\n-            logger.debug(\"update self '{}' with device model: {}\", getThing().getUID(), device);\n-            setState(device);\n+            logger.debug(\"Update self '{}' with device model: {}\", thing.getUID(), device);\n             if (device.getPresent() == 1) {\n-                setStatusInfo(ThingStatus.ONLINE, ThingStatusDetail.NONE, null);\n-                updateThingFromDevice(getThing(), device);\n+                onDeviceUpdated(device);\n+                listeners.stream().forEach(listener -> listener.onDeviceUpdated(device));\n             } else {\n-                setStatusInfo(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Device not present\");\n+                onDeviceRemoved(device);\n+                listeners.stream().forEach(listener -> listener.onDeviceRemoved(device));\n             }\n         } else {\n-            setStatusInfo(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"Device not present in response\");\n+            onDeviceGone(thing.getUID());\n+            listeners.stream().forEach(listener -> listener.onDeviceGone(thing.getUID()));\n         }\n-        super.addDeviceList(devicelist);\n+        super.onDeviceListAdded(devicelist);\n     }\n \n-    /**\n-     * Updates things from device model.\n-     *\n-     * @param thing Thing to be updated.\n-     * @param device Device model with new data.\n-     */\n     @Override\n-    protected void updateThingFromDevice(Thing thing, AVMFritzBaseModel device) {\n+    public void onDeviceAdded(AVMFritzBaseModel device) {\n+    }\n+\n+    @Override\n+    public void onDeviceUpdated(AVMFritzBaseModel device) {\n         // save AIN to config for FRITZ!Powerline 546E stand-alone\n         if (thing.getConfiguration().get(CONFIG_AIN) == null) {\n-            thing.getConfiguration().put(CONFIG_AIN, device.getIdentifier());\n+            Configuration editConfig = editConfiguration();\n+            editConfig.put(CONFIG_AIN, device.getIdentifier());\n+            updateConfiguration(editConfig);\n+        }\n+\n+        updateStatus(ThingStatus.ONLINE);\n+        state = device;\n+\n+        updateProperties(device);\n+\n+        if (device.isPowermeter() && device.getPowermeter() != null) {\n+            updateThingChannelState(CHANNEL_ENERGY,\n+                    new QuantityType<>(device.getPowermeter().getEnergy(), SmartHomeUnits.WATT_HOUR));\n+            updateThingChannelState(CHANNEL_POWER,\n+                    new QuantityType<>(device.getPowermeter().getPower(), SmartHomeUnits.WATT));\n+            updateThingChannelState(CHANNEL_VOLTAGE,\n+                    new QuantityType<>(device.getPowermeter().getVoltage(), SmartHomeUnits.VOLT));\n+        }\n+        if (device.isSwitchableOutlet() && device.getSwitch() != null) {\n+            updateThingChannelState(CHANNEL_MODE, new StringType(device.getSwitch().getMode()));\n+            updateThingChannelState(CHANNEL_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getSwitch().getLock()) ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            updateThingChannelState(CHANNEL_DEVICE_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getSwitch().getDevicelock()) ? OpenClosedType.OPEN\n+                            : OpenClosedType.CLOSED);\n+            if (device.getSwitch().getState() == null) {\n+                updateThingChannelState(CHANNEL_OUTLET, UnDefType.UNDEF);\n+            } else {\n+                updateThingChannelState(CHANNEL_OUTLET,\n+                        SwitchModel.ON.equals(device.getSwitch().getState()) ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Updates thing properties.\n+     *\n+     * @param device the {@link AVMFritzBaseModel}\n+     */\n+    private void updateProperties(AVMFritzBaseModel device) {\n+        Map<String, String> editProperties = editProperties();\n+        editProperties.put(Thing.PROPERTY_FIRMWARE_VERSION, device.getFirmwareVersion());\n+        updateProperties(editProperties);\n+    }\n+\n+    /**\n+     * Updates thing channels.\n+     *\n+     * @param channelId ID of the channel to be updated.\n+     * @param state State to be set.\n+     */\n+    private void updateThingChannelState(String channelId, State state) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            updateState(channel.getUID(), state);\n+        } else {\n+            logger.debug(\"Channel '{}' in thing '{}' does not exist, recreating thing.\", channelId, thing.getUID());\n+            createChannel(channelId);\n+        }\n+    }\n+\n+    /**\n+     * Creates new channels for the thing.\n+     *\n+     * @param channelId ID of the channel to be created.\n+     */\n+    private void createChannel(String channelId) {\n+        ThingHandlerCallback callback = getCallback();\n+        if (callback != null) {\n+            ChannelUID channelUID = new ChannelUID(thing.getUID(), channelId);\n+            ChannelTypeUID channelTypeUID = CHANNEL_BATTERY.equals(channelId)\n+                    ? new ChannelTypeUID(\"system:battery-level\")\n+                    : new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = callback.createChannelBuilder(channelUID, channelTypeUID).build();\n+            updateThing(editThing().withoutChannel(channelUID).withChannel(channel).build());\n         }\n-        super.updateThingFromDevice(thing, device);\n+    }", "originalCommit": "e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "chunk": "diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java\nindex f6fc9cd09d..6339ce9cd9 100644\n--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java\n+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java\n\n@@ -80,6 +82,22 @@ public class Powerline546EHandler extends AVMFritzBaseBridgeHandler implements F\n         super(bridge, httpClient, stateDescriptionProvider);\n     }\n \n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(AVMFritzDeviceConfiguration.class);\n+\n+        registerStatusListener(this);\n+\n+        super.initialize();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        unregisterStatusListener(this);\n+\n+        super.dispose();\n+    }\n+\n     @Override\n     public void onDeviceListAdded(List<AVMFritzBaseModel> devicelist) {\n         String identifier = getIdentifier();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMDMyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419220329", "bodyText": "Is there no constant in the core for this channel type?", "author": "cpmeister", "createdAt": "2020-05-04T05:35:27Z", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java", "diffHunk": "@@ -74,41 +81,123 @@ public Powerline546EHandler(Bridge bridge, HttpClient httpClient,\n     }\n \n     @Override\n-    public void addDeviceList(List<AVMFritzBaseModel> devicelist) {\n+    public void onDeviceListAdded(List<AVMFritzBaseModel> devicelist) {\n         String identifier = getIdentifier();\n-        Predicate<AVMFritzBaseModel> predicate = identifier == null ? it -> getThing().getUID().equals(getThingUID(it))\n+        Predicate<AVMFritzBaseModel> predicate = identifier == null ? it -> thing.getUID().equals(getThingUID(it))\n                 : it -> it.getIdentifier().equals(identifier);\n         Optional<AVMFritzBaseModel> optionalDevice = devicelist.stream().filter(predicate).findFirst();\n         if (optionalDevice.isPresent()) {\n             AVMFritzBaseModel device = optionalDevice.get();\n             devicelist.remove(device);\n-            logger.debug(\"update self '{}' with device model: {}\", getThing().getUID(), device);\n-            setState(device);\n+            logger.debug(\"Update self '{}' with device model: {}\", thing.getUID(), device);\n             if (device.getPresent() == 1) {\n-                setStatusInfo(ThingStatus.ONLINE, ThingStatusDetail.NONE, null);\n-                updateThingFromDevice(getThing(), device);\n+                onDeviceUpdated(device);\n+                listeners.stream().forEach(listener -> listener.onDeviceUpdated(device));\n             } else {\n-                setStatusInfo(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Device not present\");\n+                onDeviceRemoved(device);\n+                listeners.stream().forEach(listener -> listener.onDeviceRemoved(device));\n             }\n         } else {\n-            setStatusInfo(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"Device not present in response\");\n+            onDeviceGone(thing.getUID());\n+            listeners.stream().forEach(listener -> listener.onDeviceGone(thing.getUID()));\n         }\n-        super.addDeviceList(devicelist);\n+        super.onDeviceListAdded(devicelist);\n     }\n \n-    /**\n-     * Updates things from device model.\n-     *\n-     * @param thing Thing to be updated.\n-     * @param device Device model with new data.\n-     */\n     @Override\n-    protected void updateThingFromDevice(Thing thing, AVMFritzBaseModel device) {\n+    public void onDeviceAdded(AVMFritzBaseModel device) {\n+    }\n+\n+    @Override\n+    public void onDeviceUpdated(AVMFritzBaseModel device) {\n         // save AIN to config for FRITZ!Powerline 546E stand-alone\n         if (thing.getConfiguration().get(CONFIG_AIN) == null) {\n-            thing.getConfiguration().put(CONFIG_AIN, device.getIdentifier());\n+            Configuration editConfig = editConfiguration();\n+            editConfig.put(CONFIG_AIN, device.getIdentifier());\n+            updateConfiguration(editConfig);\n+        }\n+\n+        updateStatus(ThingStatus.ONLINE);\n+        state = device;\n+\n+        updateProperties(device);\n+\n+        if (device.isPowermeter() && device.getPowermeter() != null) {\n+            updateThingChannelState(CHANNEL_ENERGY,\n+                    new QuantityType<>(device.getPowermeter().getEnergy(), SmartHomeUnits.WATT_HOUR));\n+            updateThingChannelState(CHANNEL_POWER,\n+                    new QuantityType<>(device.getPowermeter().getPower(), SmartHomeUnits.WATT));\n+            updateThingChannelState(CHANNEL_VOLTAGE,\n+                    new QuantityType<>(device.getPowermeter().getVoltage(), SmartHomeUnits.VOLT));\n+        }\n+        if (device.isSwitchableOutlet() && device.getSwitch() != null) {\n+            updateThingChannelState(CHANNEL_MODE, new StringType(device.getSwitch().getMode()));\n+            updateThingChannelState(CHANNEL_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getSwitch().getLock()) ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            updateThingChannelState(CHANNEL_DEVICE_LOCKED,\n+                    BigDecimal.ZERO.equals(device.getSwitch().getDevicelock()) ? OpenClosedType.OPEN\n+                            : OpenClosedType.CLOSED);\n+            if (device.getSwitch().getState() == null) {\n+                updateThingChannelState(CHANNEL_OUTLET, UnDefType.UNDEF);\n+            } else {\n+                updateThingChannelState(CHANNEL_OUTLET,\n+                        SwitchModel.ON.equals(device.getSwitch().getState()) ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Updates thing properties.\n+     *\n+     * @param device the {@link AVMFritzBaseModel}\n+     */\n+    private void updateProperties(AVMFritzBaseModel device) {\n+        Map<String, String> editProperties = editProperties();\n+        editProperties.put(Thing.PROPERTY_FIRMWARE_VERSION, device.getFirmwareVersion());\n+        updateProperties(editProperties);\n+    }\n+\n+    /**\n+     * Updates thing channels.\n+     *\n+     * @param channelId ID of the channel to be updated.\n+     * @param state State to be set.\n+     */\n+    private void updateThingChannelState(String channelId, State state) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            updateState(channel.getUID(), state);\n+        } else {\n+            logger.debug(\"Channel '{}' in thing '{}' does not exist, recreating thing.\", channelId, thing.getUID());\n+            createChannel(channelId);\n+        }\n+    }\n+\n+    /**\n+     * Creates new channels for the thing.\n+     *\n+     * @param channelId ID of the channel to be created.\n+     */\n+    private void createChannel(String channelId) {\n+        ThingHandlerCallback callback = getCallback();\n+        if (callback != null) {\n+            ChannelUID channelUID = new ChannelUID(thing.getUID(), channelId);\n+            ChannelTypeUID channelTypeUID = CHANNEL_BATTERY.equals(channelId)\n+                    ? new ChannelTypeUID(\"system:battery-level\")", "originalCommit": "e7245d59bed82ed0c6f9af5ba0170c7bc1c91412", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4MTMxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r419281310", "bodyText": "No, there are no constants for the channel type uids.", "author": "cweitkamp", "createdAt": "2020-05-04T08:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMDMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "chunk": "diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java\nindex f6fc9cd09d..6339ce9cd9 100644\n--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java\n+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java\n\n@@ -80,6 +82,22 @@ public class Powerline546EHandler extends AVMFritzBaseBridgeHandler implements F\n         super(bridge, httpClient, stateDescriptionProvider);\n     }\n \n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(AVMFritzDeviceConfiguration.class);\n+\n+        registerStatusListener(this);\n+\n+        super.initialize();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        unregisterStatusListener(this);\n+\n+        super.dispose();\n+    }\n+\n     @Override\n     public void onDeviceListAdded(List<AVMFritzBaseModel> devicelist) {\n         String identifier = getIdentifier();\n"}}, {"oid": "4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "url": "https://github.com/openhab/openhab-addons/commit/4c43862b276f4df9fe6c4b4c788b7e302b9acb4c", "message": "Incorporated comments from review and more\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-05-04T08:39:24Z", "type": "commit"}, {"oid": "ecb91c279708b778a978be7d5edd91cda994e9fd", "url": "https://github.com/openhab/openhab-addons/commit/ecb91c279708b778a978be7d5edd91cda994e9fd", "message": "Fixed integration tests\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-05-04T08:54:35Z", "type": "commit"}, {"oid": "8c3385245ee6ae7a7c9c53c8ddd12b30a2fed348", "url": "https://github.com/openhab/openhab-addons/commit/8c3385245ee6ae7a7c9c53c8ddd12b30a2fed348", "message": "NPE robustness\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-05-04T10:52:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5NDEzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r425594134", "bodyText": "I found the constant for this!\nDefaultSystemChannelTypeProvider.SYSTEM_CHANNEL_BATTERY_LEVEL.getUID()", "author": "cpmeister", "createdAt": "2020-05-15T06:33:50Z", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/Powerline546EHandler.java", "diffHunk": "@@ -74,41 +83,137 @@ public Powerline546EHandler(Bridge bridge, HttpClient httpClient,\n     }\n \n     @Override\n-    public void addDeviceList(List<AVMFritzBaseModel> devicelist) {\n-        String identifier = getIdentifier();\n-        Predicate<AVMFritzBaseModel> predicate = identifier == null ? it -> getThing().getUID().equals(getThingUID(it))\n-                : it -> it.getIdentifier().equals(identifier);\n-        Optional<AVMFritzBaseModel> optionalDevice = devicelist.stream().filter(predicate).findFirst();\n+    public void initialize() {\n+        config = getConfigAs(AVMFritzDeviceConfiguration.class);\n+\n+        registerStatusListener(this);\n+\n+        super.initialize();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        unregisterStatusListener(this);\n+\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void onDeviceListAdded(List<AVMFritzBaseModel> devicelist) {\n+        final String identifier = getIdentifier();\n+        final Predicate<AVMFritzBaseModel> predicate = identifier == null ? it -> thing.getUID().equals(getThingUID(it))\n+                : it -> identifier.equals(it.getIdentifier());\n+        final Optional<AVMFritzBaseModel> optionalDevice = devicelist.stream().filter(predicate).findFirst();\n         if (optionalDevice.isPresent()) {\n-            AVMFritzBaseModel device = optionalDevice.get();\n+            final AVMFritzBaseModel device = optionalDevice.get();\n             devicelist.remove(device);\n-            logger.debug(\"update self '{}' with device model: {}\", getThing().getUID(), device);\n-            setState(device);\n+            listeners.stream().forEach(listener -> listener.onDeviceUpdated(thing.getUID(), device));\n+        } else {\n+            listeners.stream().forEach(listener -> listener.onDeviceGone(thing.getUID()));\n+        }\n+        super.onDeviceListAdded(devicelist);\n+    }\n+\n+    @Override\n+    public void onDeviceAdded(AVMFritzBaseModel device) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void onDeviceUpdated(ThingUID thingUID, AVMFritzBaseModel device) {\n+        if (thing.getUID().equals(thingUID)) {\n+            logger.debug(\"Update self '{}' with device model: {}\", thingUID, device);\n+            // save AIN to config for FRITZ!Powerline 546E stand-alone\n+            if (config == null) {\n+                Configuration editConfig = editConfiguration();\n+                editConfig.put(CONFIG_AIN, device.getIdentifier());\n+                updateConfiguration(editConfig);\n+            }\n+\n             if (device.getPresent() == 1) {\n-                setStatusInfo(ThingStatus.ONLINE, ThingStatusDetail.NONE, null);\n-                updateThingFromDevice(getThing(), device);\n+                updateStatus(ThingStatus.ONLINE);\n             } else {\n-                setStatusInfo(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Device not present\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Device not present\");\n+            }\n+            state = device;\n+\n+            updateProperties(device);\n+\n+            if (device.isPowermeter() && device.getPowermeter() != null) {\n+                updateThingChannelState(CHANNEL_ENERGY,\n+                        new QuantityType<>(device.getPowermeter().getEnergy(), SmartHomeUnits.WATT_HOUR));\n+                updateThingChannelState(CHANNEL_POWER,\n+                        new QuantityType<>(device.getPowermeter().getPower(), SmartHomeUnits.WATT));\n+                updateThingChannelState(CHANNEL_VOLTAGE,\n+                        new QuantityType<>(device.getPowermeter().getVoltage(), SmartHomeUnits.VOLT));\n+            }\n+            if (device.isSwitchableOutlet() && device.getSwitch() != null) {\n+                updateThingChannelState(CHANNEL_MODE, new StringType(device.getSwitch().getMode()));\n+                updateThingChannelState(CHANNEL_LOCKED,\n+                        BigDecimal.ZERO.equals(device.getSwitch().getLock()) ? OpenClosedType.OPEN\n+                                : OpenClosedType.CLOSED);\n+                updateThingChannelState(CHANNEL_DEVICE_LOCKED,\n+                        BigDecimal.ZERO.equals(device.getSwitch().getDevicelock()) ? OpenClosedType.OPEN\n+                                : OpenClosedType.CLOSED);\n+                if (device.getSwitch().getState() == null) {\n+                    updateThingChannelState(CHANNEL_OUTLET, UnDefType.UNDEF);\n+                } else {\n+                    updateThingChannelState(CHANNEL_OUTLET,\n+                            SwitchModel.ON.equals(device.getSwitch().getState()) ? OnOffType.ON : OnOffType.OFF);\n+                }\n             }\n+        }\n+    }\n+\n+    /**\n+     * Updates thing properties.\n+     *\n+     * @param device the {@link AVMFritzBaseModel}\n+     */\n+    private void updateProperties(AVMFritzBaseModel device) {\n+        Map<String, String> editProperties = editProperties();\n+        editProperties.put(Thing.PROPERTY_FIRMWARE_VERSION, device.getFirmwareVersion());\n+        updateProperties(editProperties);\n+    }\n+\n+    /**\n+     * Updates thing channels.\n+     *\n+     * @param channelId ID of the channel to be updated.\n+     * @param state State to be set.\n+     */\n+    private void updateThingChannelState(String channelId, State state) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            updateState(channel.getUID(), state);\n         } else {\n-            setStatusInfo(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"Device not present in response\");\n+            logger.debug(\"Channel '{}' in thing '{}' does not exist, recreating thing.\", channelId, thing.getUID());\n+            createChannel(channelId);\n         }\n-        super.addDeviceList(devicelist);\n     }\n \n     /**\n-     * Updates things from device model.\n+     * Creates new channels for the thing.\n      *\n-     * @param thing Thing to be updated.\n-     * @param device Device model with new data.\n+     * @param channelId ID of the channel to be created.\n      */\n+    private void createChannel(String channelId) {\n+        ThingHandlerCallback callback = getCallback();\n+        if (callback != null) {\n+            ChannelUID channelUID = new ChannelUID(thing.getUID(), channelId);\n+            ChannelTypeUID channelTypeUID = CHANNEL_BATTERY.equals(channelId)\n+                    ? new ChannelTypeUID(\"system\", \"battery-level\")", "originalCommit": "8c3385245ee6ae7a7c9c53c8ddd12b30a2fed348", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3MzgxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7543#discussion_r425973819", "bodyText": "Nice \ud83d\ude09\nTo make you happy i submitted #7650.", "author": "cweitkamp", "createdAt": "2020-05-15T18:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5NDEzNA=="}], "type": "inlineReview", "revised_code": null}]}