{"pr_number": 7234, "pr_title": "[rrd4j] use a more fine granular default configuration for persistence", "pr_createdAt": "2020-03-26T22:23:07Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7234", "timeline": [{"oid": "5c2b9043fbed57d52ada862a3638f1c6a1e7da9a", "url": "https://github.com/openhab/openhab-addons/commit/5c2b9043fbed57d52ada862a3638f1c6a1e7da9a", "message": "use a more fine granular default configuration for persistence\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-03-26T22:23:49Z", "type": "commit"}, {"oid": "5c2b9043fbed57d52ada862a3638f1c6a1e7da9a", "url": "https://github.com/openhab/openhab-addons/commit/5c2b9043fbed57d52ada862a3638f1c6a1e7da9a", "message": "use a more fine granular default configuration for persistence\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-03-26T22:23:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzOTU1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7234#discussion_r399239558", "bodyText": "I would like to suggest FIRST or LAST for numerical values too.\nThe reason is, I'm contemplating aggregates series in the UI by hour/day, to make it possible to build calendar or weekly displays like these:\n\nhttps://echarts.apache.org/examples/en/editor.html?c=calendar-heatmap\nhttps://echarts.apache.org/examples/en/editor.html?c=heatmap-cartesian\nhttps://echarts.apache.org/examples/en/editor.html?c=scatter-single-axis\nhttps://echarts.apache.org/examples/en/editor.html?c=scatter-punchCard\nhttps://echarts.apache.org/examples/en/editor.html?c=scatter-polar-punchCard\n\nOne of these aggregations would be the difference to the previous period: it would itself collect points found in that hour or day slice, take the first or last one and subtract the result of the previous period to it. That way if you have for instance an energy consumption metric you could get the hourly/daily consumption more accurately than by processing averaged data.\nDoes that make sense?", "author": "ghys", "createdAt": "2020-03-27T12:48:43Z", "path": "bundles/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jPersistenceService.java", "diffHunk": "@@ -355,15 +355,26 @@ private static String getUserPersistenceDataFolder() {\n     public void activate(final Map<String, Object> config) {\n         // add default configurations\n         RrdDefConfig defaultNumeric = new RrdDefConfig(\"default_numeric\");\n-        defaultNumeric.setDef(\"GAUGE,60,U,U,60\");\n-        defaultNumeric.addArchives(\n-                \"AVERAGE,0.5,1,480:AVERAGE,0.5,4,360:AVERAGE,0.5,14,644:AVERAGE,0.5,60,720:AVERAGE,0.5,720,730:AVERAGE,0.5,10080,520\");\n+        // use 10 seconds as a step size for numeric values and allow a 10 minute silence between updates\n+        defaultNumeric.setDef(\"GAUGE,600,U,U,10\");\n+        // define 5 different boxes:\n+        // 1. granularity of 10s for the last hour\n+        // 2. granularity of 1m for the last week\n+        // 3. granularity of 15m for the last year\n+        // 4. granularity of 1h for the last 5 years\n+        // 5. granularity of 1d for the last 10 years\n+        defaultNumeric.addArchives(\"AVERAGE,0.5,1,360:AVERAGE,0.5,6,10080:AVERAGE,0.5,90,36500:AVERAGE,0.5,8640,3650\");", "originalCommit": "5c2b9043fbed57d52ada862a3638f1c6a1e7da9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxOTUwOA==", "url": "https://github.com/openhab/openhab-addons/pull/7234#discussion_r399519508", "bodyText": "One of these aggregations would be the difference to the previous period\n\nWhich is exactly, what rrd4j is doing with the COUNTER datasource type, correct?\nI actually never used the COUNTER myself and it makes sense to me to rather persist the absolute number and do the diffs only when creating the charts (as it can then be flexible wrt interval).\n\nyou could get the hourly/daily consumption more accurately than by processing averaged data.\n\nYes, it would be more accurate, but I think one could also live with the averages.\nIf you think of sensor values, using FIRST or LAST will in contrast have a negative effect on the accuracy: The whole graph will either be slightly too left or too right, while the average would make sure that the lines represent the value at a given point in time. Also, outliers can have a stronger negative effect, in case they are the first or last value of a given interval.\nI am not sure how bad those effects are and they probably depend on the granularity. I'd be ok to give it a try, if you wish.\nA different strong reason that I see to not use AVERAGE for Number items are items where the states are not sensor values, but merely discrete enumerations - using average will create illegal states for those.", "author": "kaikreuzer", "createdAt": "2020-03-27T20:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzOTU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNTY3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7234#discussion_r399535675", "bodyText": "The whole graph will either be slightly too left or too right, while the average would make sure that the lines represent the value at a given point in time. Also, outliers can have a stronger negative effect, in case they are the first or last value of a given interval.\n\nFair point.\n\nI am not sure how bad those effects are and they probably depend on the granularity.\n\nWith the kind of granularity you're proposing here, you would still have 24 data points per day for the last 5 years, so if we're building an temperature calendar for example, averaging these 24 points would imho give a value rather close to the actual average of the day. If you're aggregating by hour, you'd still have 4 data points for the last year.\nBeyond these periods, it's becoming problematic indeed, like the only value retained for a day would be one close to midnight which is obviously not a good value to get an average, but it's 5 years in the past... I think that's a trade-off we have to take to get good enough results while avoiding users to get into their persistence strategies - which remains an option anyway.", "author": "ghys", "createdAt": "2020-03-27T21:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzOTU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzODU2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7234#discussion_r399538565", "bodyText": "A little bit late to the party, but LAST is IMO a bad choice for sensor values. AVERAGE is not only the better choice for values in the past but also for values which are a bit flaky because of the measurement involved.", "author": "J-N-K", "createdAt": "2020-03-27T21:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzOTU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTQ3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7234#discussion_r399539472", "bodyText": "@J-N-K Did you read through all our discussion? If I understand you correct, your point is the same as what I mentioned about the outliers. I see some risk there, but would nonetheless give it a try.", "author": "kaikreuzer", "createdAt": "2020-03-27T21:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzOTU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MzQ2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7234#discussion_r399543465", "bodyText": "Would it be possible to use the item's dimension? Like a dimensionless number would be LAST, as would e.g. Energy, while other quantity measurements would be averaged.", "author": "ghys", "createdAt": "2020-03-27T21:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzOTU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1MDExMA==", "url": "https://github.com/openhab/openhab-addons/pull/7234#discussion_r399550110", "bodyText": "I also thought about the same, but didn't yet think it through. We could indeed create different defs for \"plain\" Number items and for Number items with a dimension. Anything with a dimension should hopefully be measurable and an average thus makes sense. The \"plain\" items could be anything and LAST is thus the safer option.", "author": "kaikreuzer", "createdAt": "2020-03-27T21:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzOTU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyOTgxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7234#discussion_r399629816", "bodyText": "An energy meter is a perfect example for a COUNTER. If you get 34567.122 kWh, multiply by thousand and store in a COUNTER.\n@kaikreuzer yes. But I was not only thinking of outliers but of values that have a large statistical variance. Imagine someone (not me but I\u2018ve seen people use that) who meters radioactivity. He will for sure not store the total number of counts (That\u2018s a useless value, If total dose matters we have other problems than data storage.), he wants to store \u201eper time\u201c. So his unit would be Bequerel and measure every minute. Each of these values will be very different (because count rate is low in any case). The average is a much better aggregation than last value, and that is true after an hour.\nThis is also true for fast changing temperatures (like central heating boiler temperature). Aggregating over an 15 minutes might lose turn-ons (turns on immediately at the beginning, runs for 5 minutes, temperature is nearly back to normal after 15 minutes, when the next LAST value is taken).", "author": "J-N-K", "createdAt": "2020-03-28T07:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzOTU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "fce14395065b690ab8496d176ec61cbeb4bb2aab", "chunk": "diff --git a/bundles/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jPersistenceService.java b/bundles/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jPersistenceService.java\nindex 341961a97c..e254e8f4bb 100644\n--- a/bundles/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jPersistenceService.java\n+++ b/bundles/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jPersistenceService.java\n\n@@ -363,7 +363,7 @@ public class RRD4jPersistenceService implements QueryablePersistenceService {\n         // 3. granularity of 15m for the last year\n         // 4. granularity of 1h for the last 5 years\n         // 5. granularity of 1d for the last 10 years\n-        defaultNumeric.addArchives(\"AVERAGE,0.5,1,360:AVERAGE,0.5,6,10080:AVERAGE,0.5,90,36500:AVERAGE,0.5,8640,3650\");\n+        defaultNumeric.addArchives(\"LAST,0.5,1,360:LAST,0.5,6,10080:LAST,0.5,90,36500:LAST,0.5,8640,3650\");\n         rrdDefs.put(\"default_numeric\", defaultNumeric);\n \n         RrdDefConfig defaultOther = new RrdDefConfig(\"default_other\");\n"}}, {"oid": "fce14395065b690ab8496d176ec61cbeb4bb2aab", "url": "https://github.com/openhab/openhab-addons/commit/fce14395065b690ab8496d176ec61cbeb4bb2aab", "message": "changed from AVERAGE to LAST\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-03-27T20:25:23Z", "type": "commit"}, {"oid": "5a526a4c0b7cbd242dd9e5385ced803f1bb931d9", "url": "https://github.com/openhab/openhab-addons/commit/5a526a4c0b7cbd242dd9e5385ced803f1bb931d9", "message": "use AVERAGE for quantifiable number items and LAST for others\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-03-29T10:27:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxMDA3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7234#discussion_r401810077", "bodyText": "defaultQuantifiable?", "author": "J-N-K", "createdAt": "2020-04-01T18:07:35Z", "path": "bundles/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jPersistenceService.java", "diffHunk": "@@ -364,9 +374,21 @@ public void activate(final Map<String, Object> config) {\n         // 4. granularity of 1h for the last 5 years\n         // 5. granularity of 1d for the last 10 years\n         defaultNumeric.addArchives(\"LAST,0.5,1,360:LAST,0.5,6,10080:LAST,0.5,90,36500:LAST,0.5,8640,3650\");\n-        rrdDefs.put(\"default_numeric\", defaultNumeric);\n+        rrdDefs.put(DEFAULT_NUMERIC, defaultNumeric);\n+\n+        RrdDefConfig defaultQuantifiable = new RrdDefConfig(DEFAULT_QUANTIFIABLE);\n+        // use 10 seconds as a step size for numeric values and allow a 10 minute silence between updates\n+        defaultNumeric.setDef(\"GAUGE,600,U,U,10\");", "originalCommit": "5a526a4c0b7cbd242dd9e5385ced803f1bb931d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MTk1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7234#discussion_r401841954", "bodyText": "Good catch - fixed it!", "author": "kaikreuzer", "createdAt": "2020-04-01T19:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxMDA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5765181352d3ec1df09900774fbc41ed87657ea4", "chunk": "diff --git a/bundles/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jPersistenceService.java b/bundles/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jPersistenceService.java\nindex ce999fbd0e..d9086f3a60 100644\n--- a/bundles/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jPersistenceService.java\n+++ b/bundles/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jPersistenceService.java\n\n@@ -378,14 +378,15 @@ public class RRD4jPersistenceService implements QueryablePersistenceService {\n \n         RrdDefConfig defaultQuantifiable = new RrdDefConfig(DEFAULT_QUANTIFIABLE);\n         // use 10 seconds as a step size for numeric values and allow a 10 minute silence between updates\n-        defaultNumeric.setDef(\"GAUGE,600,U,U,10\");\n+        defaultQuantifiable.setDef(\"GAUGE,600,U,U,10\");\n         // define 5 different boxes:\n         // 1. granularity of 10s for the last hour\n         // 2. granularity of 1m for the last week\n         // 3. granularity of 15m for the last year\n         // 4. granularity of 1h for the last 5 years\n         // 5. granularity of 1d for the last 10 years\n-        defaultNumeric.addArchives(\"AVERAGE,0.5,1,360:AVERAGE,0.5,6,10080:LAST,0.5,90,36500:AVERAGE,0.5,8640,3650\");\n+        defaultQuantifiable\n+                .addArchives(\"AVERAGE,0.5,1,360:AVERAGE,0.5,6,10080:LAST,0.5,90,36500:AVERAGE,0.5,8640,3650\");\n         rrdDefs.put(DEFAULT_QUANTIFIABLE, defaultQuantifiable);\n \n         RrdDefConfig defaultOther = new RrdDefConfig(DEFAULT_OTHER);\n"}}, {"oid": "5765181352d3ec1df09900774fbc41ed87657ea4", "url": "https://github.com/openhab/openhab-addons/commit/5765181352d3ec1df09900774fbc41ed87657ea4", "message": "fixed variable assignment\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-04-01T19:01:20Z", "type": "commit"}]}