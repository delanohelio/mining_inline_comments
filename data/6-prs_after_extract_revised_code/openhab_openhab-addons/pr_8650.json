{"pr_number": 8650, "pr_title": "[lutron] Add LEAP protocol support", "pr_createdAt": "2020-10-03T20:33:16Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8650", "timeline": [{"oid": "e7234046886f1a65d376940e9d822e57cd9393a3", "url": "https://github.com/openhab/openhab-addons/commit/e7234046886f1a65d376940e9d822e57cd9393a3", "message": "[lutron] Change trusting parameter to certValidate\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-03T23:02:52Z", "type": "forcePushed"}, {"oid": "baa2a503641eef766c3007fec184cb2063f49ee6", "url": "https://github.com/openhab/openhab-addons/commit/baa2a503641eef766c3007fec184cb2063f49ee6", "message": "[lutron] Clean up code and eliminate warnings\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-04T21:00:28Z", "type": "forcePushed"}, {"oid": "0cbeb88290b9591652ad26fea8fbc47a64ba5105", "url": "https://github.com/openhab/openhab-addons/commit/0cbeb88290b9591652ad26fea8fbc47a64ba5105", "message": "[lutron] Add LEAP protocol support\n\n* Add new leapbridge thing for LEAP protocol support\n* Add LEAP discovery service\n* Refactor command handling to support multiple protocols\n* Add ogroup thing to support occupancy groups\n* Add fan thing to better support ceiling fans\n* Updates for OH3.0\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-05T22:03:46Z", "type": "commit"}, {"oid": "63e5aa390fab5bc4402390f35e512a5a6d004490", "url": "https://github.com/openhab/openhab-addons/commit/63e5aa390fab5bc4402390f35e512a5a6d004490", "message": "[lutron] Change trusting parameter to certValidate\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-05T22:03:46Z", "type": "commit"}, {"oid": "6d8c951ea12d52f2be0168bcebcd04e2fc7734c9", "url": "https://github.com/openhab/openhab-addons/commit/6d8c951ea12d52f2be0168bcebcd04e2fc7734c9", "message": "[lutron] Remove all mentions of Paper UI in doc file\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-05T22:03:46Z", "type": "commit"}, {"oid": "9026189d20edbed34223dbfc83efb4c82d258247", "url": "https://github.com/openhab/openhab-addons/commit/9026189d20edbed34223dbfc83efb4c82d258247", "message": "[lutron] Clean up code and eliminate warnings\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-05T22:03:46Z", "type": "commit"}, {"oid": "deb48c1252ee18917f2f9e19cf0158fedb164659", "url": "https://github.com/openhab/openhab-addons/commit/deb48c1252ee18917f2f9e19cf0158fedb164659", "message": "[lutron] Resolve remaining TODO comments\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-06T21:12:27Z", "type": "commit"}, {"oid": "deb48c1252ee18917f2f9e19cf0158fedb164659", "url": "https://github.com/openhab/openhab-addons/commit/deb48c1252ee18917f2f9e19cf0158fedb164659", "message": "[lutron] Resolve remaining TODO comments\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-06T21:12:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NTgyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500665828", "bodyText": "I suggest that you change your discovery service into a ThingHandlerService so that you don't have to manage osgi registration of this class. It is a bit verbose to explain how to make the change but I've found another PR that shows exactly the changes that are required: https://github.com/openhab/openhab-addons/pull/6396/files", "author": "cpmeister", "createdAt": "2020-10-07T00:15:10Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/discovery/LeapDeviceDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.lutron.internal.discovery;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.LutronHandlerFactory;\n+import org.openhab.binding.lutron.internal.handler.LeapBridgeHandler;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link LeapDeviceDiscoveryService} discovers devices paired with Lutron bridges using the LEAP protocol.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapDeviceDiscoveryService extends AbstractDiscoveryService {", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NjUwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500756508", "bodyText": "Yeah, I vaguely remember this change from last year. I\u2019ll take a look at it.", "author": "bobadair", "createdAt": "2020-10-07T06:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NTgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYwMTk0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r502601948", "bodyText": "I ran in to an interesting issue when I was playing around with this. I changed the definition of LeapDeviceDiscoveryService to the following:\npublic class LeapDeviceDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService\n\nBut then I got an error indicating a conflict between AbstractDiscoveryService and the ThingHandlerService interface:\nThe inherited method AbstractDiscoveryService.deactivate() cannot hide the public abstract method in ThingHandlerService\n\nThey do seems to define deactivate() in incompatible ways:\nAbstractDiscoveryService:\n    protected void deactivate() {\n        if (backgroundDiscoveryEnabled) {\n            stopBackgroundDiscovery();\n        }\n    }\n\nThingHandlerService:\n    default void deactivate() {\n    }\n\nAnyway, I'm starting to think that changing this to a ThingHandlerService  may not be worth the effort.", "author": "bobadair", "createdAt": "2020-10-09T18:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NTgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODIzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r502808238", "bodyText": "You would need to redeclare deactivate as a public method in your LeapDeviceDiscoveryService. You can just call super.deactivate inside it. The key is to make it a public method so that it satisfies the ThingHandlerService interface method.", "author": "cpmeister", "createdAt": "2020-10-10T16:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NTgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "71a5b7542f4afd59dccb7c37c5ab19cfcf582ee4", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/discovery/LeapDeviceDiscoveryService.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/discovery/LeapDeviceDiscoveryService.java\nindex 58ddc924e6..45db7dc083 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/discovery/LeapDeviceDiscoveryService.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/discovery/LeapDeviceDiscoveryService.java\n\n@@ -29,8 +29,11 @@ import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n import org.openhab.core.config.discovery.AbstractDiscoveryService;\n import org.openhab.core.config.discovery.DiscoveryResult;\n import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n import org.openhab.core.thing.ThingTypeUID;\n import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2ODc5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500668791", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw (new IllegalArgumentException(\"Invalid command parameter\"));\n          \n          \n            \n                        throw new IllegalArgumentException(\"Invalid command parameter\");", "author": "cpmeister", "createdAt": "2020-10-07T00:25:22Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/LIPCommand.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.protocol;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.handler.LeapBridgeHandler;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronOperation;\n+import org.openhab.binding.lutron.internal.protocol.lip.TargetType;\n+\n+/**\n+ * Generic LIP command for use inside bridge handler\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LIPCommand extends LutronCommandNew {\n+    private final Object[] parameters;\n+\n+    public LIPCommand(TargetType targetType, LutronOperation operation, LutronCommandType CommandType,\n+            @Nullable Integer integrationId, Object... parameters) {\n+        super(targetType, operation, CommandType, integrationId);\n+        this.parameters = parameters;\n+    }\n+\n+    @Override\n+    public String lipCommand() {\n+        StringBuilder builder = new StringBuilder().append(operation).append(commandType);\n+        if (integrationId != null) {\n+            builder.append(',').append(integrationId);\n+        }\n+        if (parameters != null) { // This CAN be null\n+            for (Object parameter : parameters) {\n+                builder.append(',').append(parameter);\n+            }\n+        }\n+\n+        return builder.toString();\n+    }\n+\n+    @Override\n+    public @Nullable LeapCommand leapCommand(LeapBridgeHandler bridgeHandler, @Nullable Integer leapZone) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return lipCommand();\n+    }\n+\n+    public int getNumberParameter(int position) {\n+        if (parameters.length > position && parameters[position] instanceof Number) {\n+            Number num = (Number) parameters[position];\n+            return num.intValue();\n+        } else {\n+            throw (new IllegalArgumentException(\"Invalid command parameter\"));", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/LIPCommand.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/LIPCommand.java\nindex 6783f5144c..6948330caa 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/LIPCommand.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/LIPCommand.java\n\n@@ -65,7 +65,7 @@ public class LIPCommand extends LutronCommandNew {\n             Number num = (Number) parameters[position];\n             return num.intValue();\n         } else {\n-            throw (new IllegalArgumentException(\"Invalid command parameter\"));\n+            throw new IllegalArgumentException(\"Invalid command parameter\");\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MDIwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500670206", "bodyText": "not parsed?", "author": "cpmeister", "createdAt": "2020-10-07T00:30:36Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/leap/LeapMessageParser.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.protocol.leap;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ExceptionDetail;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Header;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroupStatus;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Class responsible for parsing incoming LEAP messages\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapMessageParser {\n+    private final Logger logger = LoggerFactory.getLogger(LeapMessageParser.class);\n+\n+    private final Gson gson;\n+    private final LeapMessageParserCallbacks callback;\n+\n+    /**\n+     * LeapMessageParser Constructor\n+     *\n+     * @param callback Object implementing the LeapMessageParserCallbacks interface\n+     */\n+    public LeapMessageParser(LeapMessageParserCallbacks callback) {\n+        gson = new GsonBuilder().create();\n+        this.callback = callback;\n+    }\n+\n+    /**\n+     * Parse and process a LEAP protocol message\n+     *\n+     * @param msg String containing the LEAP message\n+     */\n+    public void handleMessage(String msg) {\n+        if (msg.trim().equals(\"\")) {\n+            return; // Ignore empty lines\n+        }\n+        logger.trace(\"Received message: {}\", msg);\n+\n+        try {\n+            JsonObject message = (JsonObject) new JsonParser().parse(msg);\n+\n+            if (!message.has(\"CommuniqueType\")) {\n+                logger.debug(\"No CommuniqueType found in message: {}\", msg);\n+                return;\n+            }\n+\n+            String communiqueType = message.get(\"CommuniqueType\").getAsString();\n+            // CommuniqueType type = CommuniqueType.valueOf(communiqueType);\n+            logger.debug(\"Received CommuniqueType: {}\", communiqueType);\n+            callback.validMessageReceived(communiqueType);\n+\n+            switch (communiqueType) {\n+                case \"CreateResponse\":\n+                    return;\n+                case \"ReadResponse\":\n+                    handleReadResponseMessage(message);\n+                    break;\n+                case \"UpdateResponse\":\n+                    break;\n+                case \"SubscribeResponse\":\n+                    // Subscribe responses can contain bodies with data\n+                    handleReadResponseMessage(message);\n+                    return;\n+                case \"UnsubscribeResponse\":\n+                    return;\n+                case \"ExceptionResponse\":\n+                    handleExceptionResponse(message);\n+                    return;\n+                default:\n+                    logger.debug(\"Unknown CommuniqueType received: {}\", communiqueType);\n+                    break;\n+            }\n+        } catch (JsonParseException e) {\n+            logger.debug(\"Error parsing message: {}\", e.getMessage());\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Method called by handleMessage() to handle all LEAP ExceptionResponse messages.\n+     *\n+     * @param message LEAP message\n+     */\n+    private void handleExceptionResponse(JsonObject message) {\n+        String detailMessage = \"\";\n+\n+        try {\n+            JsonObject header = message.get(\"Header\").getAsJsonObject();\n+            Header headerObj = gson.fromJson(header, Header.class);\n+\n+            if (MessageBodyType.ExceptionDetail.toString().equalsIgnoreCase(headerObj.messageBodyType)\n+                    && message.has(\"Body\")) {\n+                JsonObject body = message.get(\"Body\").getAsJsonObject();\n+                ExceptionDetail exceptionDetail = gson.fromJson(body, ExceptionDetail.class);\n+                if (exceptionDetail != null) {\n+                    detailMessage = exceptionDetail.message;\n+                }\n+            }\n+            logger.debug(\"Exception response received. Status: {} URL: {} Message: {}\", headerObj.statusCode,\n+                    headerObj.url, detailMessage);\n+\n+        } catch (JsonParseException | IllegalStateException e) {\n+            logger.debug(\"Exception response received. Error parsing exception message: {}\", e.getMessage());\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Method called by handleMessage() to handle all LEAP ReadResponse and SubscribeResponse messages.\n+     *\n+     * @param message LEAP message\n+     */\n+    private void handleReadResponseMessage(JsonObject message) {\n+        try {\n+            JsonObject header = message.get(\"Header\").getAsJsonObject();\n+            Header headerObj = gson.fromJson(header, Header.class);\n+\n+            // if 204/NoContent response received for buttongroup request, create empty button map\n+            if (Request.BUTTON_GROUP_URL.equals(headerObj.url)\n+                    && Header.STATUS_NO_CONTENT.equalsIgnoreCase(headerObj.statusCode)) {\n+                callback.handleEmptyButtonGroupDefinition();\n+                return;\n+            }\n+\n+            if (!header.has(\"MessageBodyType\")) {\n+                logger.trace(\"No MessageBodyType in header\");\n+                return;\n+            }\n+            String messageBodyType = header.get(\"MessageBodyType\").getAsString();\n+            logger.trace(\"MessageBodyType: {}\", messageBodyType);\n+\n+            if (!message.has(\"Body\")) {\n+                logger.debug(\"No Body found in message\");\n+                return;\n+            }\n+            JsonObject body = message.get(\"Body\").getAsJsonObject();\n+\n+            switch (messageBodyType) {\n+                case \"OnePingResponse\":\n+                    parseOnePingResponse(body);\n+                    break;\n+                case \"OneZoneStatus\":\n+                    parseOneZoneStatus(body);\n+                    break;\n+                case \"MultipleAreaDefinition\":\n+                    parseMultipleAreaDefinition(body);\n+                    break;\n+                case \"MultipleButtonGroupDefinition\":\n+                    parseMultipleButtonGroupDefinition(body);\n+                    break;\n+                case \"MultipleDeviceDefinition\":\n+                    parseMultipleDeviceDefinition(body);\n+                    break;\n+                case \"MultipleOccupancyGroupDefinition\":\n+                    parseMultipleOccupancyGroupDefinition(body);\n+                    break;\n+                case \"MultipleOccupancyGroupStatus\":\n+                    parseMultipleOccupancyGroupStatus(body);\n+                    break;\n+                case \"MultipleVirtualButtonDefinition\":\n+                    break;", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1MzE3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500753178", "bodyText": "No, I haven't added support for that yet.", "author": "bobadair", "createdAt": "2020-10-07T05:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MDIwNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MDgzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500670834", "bodyText": "Please add @NonNullByDefault", "author": "cpmeister", "createdAt": "2020-10-07T00:32:50Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/lip/TargetType.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.protocol.lip;\n+\n+/**\n+ * Target device type enum. Used to annotate LutronCommand objects so the LEAP bridge can translate them.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+public enum TargetType {", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/lip/TargetType.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/lip/TargetType.java\nindex 6884a3de74..7477c3d806 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/lip/TargetType.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/protocol/lip/TargetType.java\n\n@@ -12,11 +12,14 @@\n  */\n package org.openhab.binding.lutron.internal.protocol.lip;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * Target device type enum. Used to annotate LutronCommand objects so the LEAP bridge can translate them.\n  *\n  * @author Bob Adair - Initial contribution\n  */\n+@NonNullByDefault\n public enum TargetType {\n     BLIND,\n     BRIDGE,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5MjI0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500692242", "bodyText": "Since you aren't using any of the atomic functionality of this class, you should just replace it with a volatile boolean instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n          \n          \n            \n                private volatile boolean deviceDataLoaded = false;", "author": "cpmeister", "createdAt": "2020-10-07T01:56:35Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5MjMyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500692326", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);\n          \n          \n            \n                private volatile boolean buttonDataLoaded = false;", "author": "cpmeister", "createdAt": "2020-10-07T01:56:51Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n+    private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NDE5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500694198", "bodyText": "You should make another catch for a InterruptedIOException. You shouldn't attempt a reconnect if you received an interrupt.", "author": "cpmeister", "createdAt": "2020-10-07T02:03:08Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n+    private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);\n+\n+    private final Map<Integer, LutronHandler> childHandlerMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, OGroupHandler> groupHandlerMap = new ConcurrentHashMap<>();\n+\n+    private @Nullable LeapDeviceDiscoveryService discoveryService;\n+\n+    public void setDiscoveryService(LeapDeviceDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public LeapBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+        leapMessageParser = new LeapMessageParser(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        SSLContext sslContext;\n+\n+        childHandlerMap.clear();\n+        groupHandlerMap.clear();\n+\n+        config = getConfigAs(LeapBridgeConfig.class);\n+        String keystorePassword = (config.keystorePassword == null) ? \"\" : config.keystorePassword;\n+\n+        String ipAddress = config.ipAddress;\n+        if (ipAddress == null || ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"bridge address not specified\");\n+            return;\n+        }\n+\n+        reconnectInterval = (config.reconnect > 0) ? config.reconnect : DEFAULT_RECONNECT_MINUTES;\n+        heartbeatInterval = (config.heartbeat > 0) ? config.heartbeat : DEFAULT_HEARTBEAT_MINUTES;\n+        sendDelay = (config.delay < 0) ? 0 : config.delay;\n+\n+        if (config.keystore == null || keystorePassword == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Keystore/keystore password not configured\");\n+            return;\n+        } else {\n+            try (FileInputStream keystoreInputStream = new FileInputStream(config.keystore)) {\n+                logger.trace(\"Initializing keystore\");\n+                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\n+                keystore.load(keystoreInputStream, keystorePassword.toCharArray());\n+\n+                logger.trace(\"Initializing SSL Context\");\n+                KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                kmf.init(keystore, keystorePassword.toCharArray());\n+\n+                TrustManager[] trustManagers;\n+                if (config.certValidate) {\n+                    // Use default trust manager which will attempt to validate server certificate from hub\n+                    TrustManagerFactory tmf = TrustManagerFactory\n+                            .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                    tmf.init(keystore);\n+                    trustManagers = tmf.getTrustManagers();\n+                } else {\n+                    // Use no-op trust manager which will not verify certificates\n+                    trustManagers = defineNoOpTrustManager();\n+                }\n+\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(kmf.getKeyManagers(), trustManagers, null);\n+\n+                sslsocketfactory = sslContext.getSocketFactory();\n+            } catch (FileNotFoundException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Keystore file not found\");\n+                return;\n+            } catch (CertificateException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Certificate exception\");\n+                return;\n+            } catch (UnrecoverableKeyException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Key unrecoverable with supplied password\");\n+                return;\n+            } catch (KeyManagementException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Key management exception\");\n+                logger.debug(\"Key management exception\", e);\n+                return;\n+            } catch (KeyStoreException | NoSuchAlgorithmException | IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Error initializing keystore\");\n+                logger.debug(\"Error initializing keystore\", e);\n+                return;\n+            }\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        scheduler.submit(this::connect); // start the async connect task\n+    }\n+\n+    /**\n+     * Return a no-op SSL trust manager which will not verify server or client certificates.\n+     */\n+    private TrustManager[] defineNoOpTrustManager() {\n+        return new TrustManager[] { new X509TrustManager() {\n+            @Override\n+            public void checkClientTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming client certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number {}:\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void checkServerTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming server certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number: {}\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public X509Certificate @Nullable [] getAcceptedIssuers() {\n+                return null;\n+            }\n+        } };\n+    }\n+\n+    private synchronized void connect() {\n+        deviceDataLoaded.set(false);\n+        buttonDataLoaded.set(false);\n+\n+        try {\n+            logger.debug(\"Opening SSL connection to {}:{}\", config.ipAddress, config.port);\n+            SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(config.ipAddress, config.port);\n+            sslsocket.startHandshake();\n+            writer = new BufferedWriter(new OutputStreamWriter(sslsocket.getOutputStream()));\n+            reader = new BufferedReader(new InputStreamReader(sslsocket.getInputStream()));\n+            this.sslsocket = sslsocket;\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Unknown host\");\n+            return;\n+        } catch (IllegalArgumentException e) {\n+            // port out of valid range\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Invalid port number\");\n+            return;\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error opening SSL connection. Check log.\");\n+            logger.info(\"Error opening SSL connection: {}\", e.getMessage());\n+            disconnect();\n+            scheduleConnectRetry(reconnectInterval); // Possibly a temporary problem. Try again later.\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, STATUS_INITIALIZING);\n+\n+        Thread readerThread = new Thread(this::readerThreadJob, \"Lutron reader\");\n+        readerThread.setDaemon(true);\n+        readerThread.start();\n+        this.readerThread = readerThread;\n+\n+        Thread senderThread = new Thread(this::senderThreadJob, \"Lutron sender\");\n+        senderThread.setDaemon(true);\n+        senderThread.start();\n+        this.senderThread = senderThread;\n+\n+        sendCommand(new LeapCommand(Request.getButtonGroups()));\n+        queryDiscoveryData();\n+        sendCommand(new LeapCommand(Request.subscribeOccupancyGroupStatus()));\n+\n+        logger.debug(\"Starting keepAlive job with interval {}\", heartbeatInterval);\n+        keepAlive = scheduler.scheduleWithFixedDelay(this::sendKeepAlive, heartbeatInterval, heartbeatInterval,\n+                TimeUnit.MINUTES);\n+    }\n+\n+    /**\n+     * Called by connect() and discovery service to request fresh discovery data\n+     */\n+    public void queryDiscoveryData() {\n+        sendCommand(new LeapCommand(Request.getDevices()));\n+        sendCommand(new LeapCommand(Request.getAreas()));\n+        sendCommand(new LeapCommand(Request.getOccupancyGroups()));\n+    }\n+\n+    private void scheduleConnectRetry(long waitMinutes) {\n+        logger.debug(\"Scheduling connection retry in {} minutes\", waitMinutes);\n+        connectRetryJob = scheduler.schedule(this::connect, waitMinutes, TimeUnit.MINUTES);\n+    }\n+\n+    private synchronized void disconnect() {\n+        logger.debug(\"Disconnecting\");\n+\n+        Thread senderThread = this.senderThread;\n+        Thread readerThread = this.readerThread;\n+\n+        if (connectRetryJob != null) {\n+            connectRetryJob.cancel(true);\n+        }\n+        if (keepAlive != null) {\n+            keepAlive.cancel(true);\n+        }\n+\n+        // May be called from keepAliveReconnect thread, so call cancel with false\n+        reconnectTaskCancel(false);\n+\n+        if (senderThread != null && senderThread.isAlive()) {\n+            senderThread.interrupt();\n+        }\n+        if (readerThread != null && readerThread.isAlive()) {\n+            readerThread.interrupt();\n+        }\n+        if (sslsocket != null) {\n+            try {\n+                sslsocket.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing SSL socket: {}\", e.getMessage());\n+            }\n+            sslsocket = null;\n+        }\n+        if (reader != null) {\n+            try {\n+                reader.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing reader: {}\", e.getMessage());\n+            }\n+        }\n+        if (writer != null) {\n+            try {\n+                writer.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing writer: {}\", e.getMessage());\n+            }\n+        }\n+\n+        deviceDataLoaded.set(false);\n+        buttonDataLoaded.set(false);\n+    }\n+\n+    private synchronized void reconnect() {\n+        logger.debug(\"Attempting to reconnect to the bridge\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"reconnecting\");\n+        disconnect();\n+        connect();\n+    }\n+\n+    /**\n+     * Method executed by the message sender thread (senderThread)\n+     */\n+    private void senderThreadJob() {\n+        logger.debug(\"Command sender thread started\");\n+        try {\n+            while (!Thread.currentThread().isInterrupted() && writer != null) {\n+                LeapCommand command = sendQueue.take();\n+                logger.trace(\"Sending command {}\", command);\n+\n+                try {\n+                    BufferedWriter writer = this.writer;\n+                    if (writer != null) {\n+                        writer.write(command.toString() + \"\\n\");\n+                        writer.flush();\n+                    }\n+                } catch (IOException e) {\n+                    logger.warn(\"Communication error, will try to reconnect. Error: {}\", e.getMessage());\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    sendQueue.add(command); // Requeue command\n+                    reconnect();\n+                    break; // reconnect() will start a new thread; terminate this one\n+                }", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ0MzA1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r501443056", "bodyText": "When catching InterruptedIOException, is it best to call Thread.currentThread().interrupt() or just exit?", "author": "bobadair", "createdAt": "2020-10-08T04:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NDE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ0OTg2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r501449868", "bodyText": "It would be best to just exit. Calling Thread.currentThread().interrupt() is only useful if you expect/know that something higher up the call stack is checking for interrupts. Which I don't think is the case here.", "author": "cpmeister", "createdAt": "2020-10-08T05:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NDE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NTY1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r502185656", "bodyText": "Done", "author": "bobadair", "createdAt": "2020-10-09T04:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NDE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NTY1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500695653", "bodyText": "In order to avoid the null checker warnings cache this.sslsocket to a local variable and perform your logic on that local variable instead.", "author": "cpmeister", "createdAt": "2020-10-07T02:08:07Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n+    private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);\n+\n+    private final Map<Integer, LutronHandler> childHandlerMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, OGroupHandler> groupHandlerMap = new ConcurrentHashMap<>();\n+\n+    private @Nullable LeapDeviceDiscoveryService discoveryService;\n+\n+    public void setDiscoveryService(LeapDeviceDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public LeapBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+        leapMessageParser = new LeapMessageParser(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        SSLContext sslContext;\n+\n+        childHandlerMap.clear();\n+        groupHandlerMap.clear();\n+\n+        config = getConfigAs(LeapBridgeConfig.class);\n+        String keystorePassword = (config.keystorePassword == null) ? \"\" : config.keystorePassword;\n+\n+        String ipAddress = config.ipAddress;\n+        if (ipAddress == null || ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"bridge address not specified\");\n+            return;\n+        }\n+\n+        reconnectInterval = (config.reconnect > 0) ? config.reconnect : DEFAULT_RECONNECT_MINUTES;\n+        heartbeatInterval = (config.heartbeat > 0) ? config.heartbeat : DEFAULT_HEARTBEAT_MINUTES;\n+        sendDelay = (config.delay < 0) ? 0 : config.delay;\n+\n+        if (config.keystore == null || keystorePassword == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Keystore/keystore password not configured\");\n+            return;\n+        } else {\n+            try (FileInputStream keystoreInputStream = new FileInputStream(config.keystore)) {\n+                logger.trace(\"Initializing keystore\");\n+                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\n+                keystore.load(keystoreInputStream, keystorePassword.toCharArray());\n+\n+                logger.trace(\"Initializing SSL Context\");\n+                KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                kmf.init(keystore, keystorePassword.toCharArray());\n+\n+                TrustManager[] trustManagers;\n+                if (config.certValidate) {\n+                    // Use default trust manager which will attempt to validate server certificate from hub\n+                    TrustManagerFactory tmf = TrustManagerFactory\n+                            .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                    tmf.init(keystore);\n+                    trustManagers = tmf.getTrustManagers();\n+                } else {\n+                    // Use no-op trust manager which will not verify certificates\n+                    trustManagers = defineNoOpTrustManager();\n+                }\n+\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(kmf.getKeyManagers(), trustManagers, null);\n+\n+                sslsocketfactory = sslContext.getSocketFactory();\n+            } catch (FileNotFoundException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Keystore file not found\");\n+                return;\n+            } catch (CertificateException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Certificate exception\");\n+                return;\n+            } catch (UnrecoverableKeyException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Key unrecoverable with supplied password\");\n+                return;\n+            } catch (KeyManagementException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Key management exception\");\n+                logger.debug(\"Key management exception\", e);\n+                return;\n+            } catch (KeyStoreException | NoSuchAlgorithmException | IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Error initializing keystore\");\n+                logger.debug(\"Error initializing keystore\", e);\n+                return;\n+            }\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        scheduler.submit(this::connect); // start the async connect task\n+    }\n+\n+    /**\n+     * Return a no-op SSL trust manager which will not verify server or client certificates.\n+     */\n+    private TrustManager[] defineNoOpTrustManager() {\n+        return new TrustManager[] { new X509TrustManager() {\n+            @Override\n+            public void checkClientTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming client certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number {}:\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void checkServerTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming server certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number: {}\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public X509Certificate @Nullable [] getAcceptedIssuers() {\n+                return null;\n+            }\n+        } };\n+    }\n+\n+    private synchronized void connect() {\n+        deviceDataLoaded.set(false);\n+        buttonDataLoaded.set(false);\n+\n+        try {\n+            logger.debug(\"Opening SSL connection to {}:{}\", config.ipAddress, config.port);\n+            SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(config.ipAddress, config.port);\n+            sslsocket.startHandshake();\n+            writer = new BufferedWriter(new OutputStreamWriter(sslsocket.getOutputStream()));\n+            reader = new BufferedReader(new InputStreamReader(sslsocket.getInputStream()));\n+            this.sslsocket = sslsocket;\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Unknown host\");\n+            return;\n+        } catch (IllegalArgumentException e) {\n+            // port out of valid range\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Invalid port number\");\n+            return;\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error opening SSL connection. Check log.\");\n+            logger.info(\"Error opening SSL connection: {}\", e.getMessage());\n+            disconnect();\n+            scheduleConnectRetry(reconnectInterval); // Possibly a temporary problem. Try again later.\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, STATUS_INITIALIZING);\n+\n+        Thread readerThread = new Thread(this::readerThreadJob, \"Lutron reader\");\n+        readerThread.setDaemon(true);\n+        readerThread.start();\n+        this.readerThread = readerThread;\n+\n+        Thread senderThread = new Thread(this::senderThreadJob, \"Lutron sender\");\n+        senderThread.setDaemon(true);\n+        senderThread.start();\n+        this.senderThread = senderThread;\n+\n+        sendCommand(new LeapCommand(Request.getButtonGroups()));\n+        queryDiscoveryData();\n+        sendCommand(new LeapCommand(Request.subscribeOccupancyGroupStatus()));\n+\n+        logger.debug(\"Starting keepAlive job with interval {}\", heartbeatInterval);\n+        keepAlive = scheduler.scheduleWithFixedDelay(this::sendKeepAlive, heartbeatInterval, heartbeatInterval,\n+                TimeUnit.MINUTES);\n+    }\n+\n+    /**\n+     * Called by connect() and discovery service to request fresh discovery data\n+     */\n+    public void queryDiscoveryData() {\n+        sendCommand(new LeapCommand(Request.getDevices()));\n+        sendCommand(new LeapCommand(Request.getAreas()));\n+        sendCommand(new LeapCommand(Request.getOccupancyGroups()));\n+    }\n+\n+    private void scheduleConnectRetry(long waitMinutes) {\n+        logger.debug(\"Scheduling connection retry in {} minutes\", waitMinutes);\n+        connectRetryJob = scheduler.schedule(this::connect, waitMinutes, TimeUnit.MINUTES);\n+    }\n+\n+    private synchronized void disconnect() {\n+        logger.debug(\"Disconnecting\");\n+\n+        Thread senderThread = this.senderThread;\n+        Thread readerThread = this.readerThread;\n+\n+        if (connectRetryJob != null) {\n+            connectRetryJob.cancel(true);\n+        }\n+        if (keepAlive != null) {\n+            keepAlive.cancel(true);\n+        }\n+\n+        // May be called from keepAliveReconnect thread, so call cancel with false\n+        reconnectTaskCancel(false);\n+\n+        if (senderThread != null && senderThread.isAlive()) {\n+            senderThread.interrupt();\n+        }\n+        if (readerThread != null && readerThread.isAlive()) {\n+            readerThread.interrupt();\n+        }\n+        if (sslsocket != null) {\n+            try {\n+                sslsocket.close();", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4MjI3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r501182274", "bodyText": "None of these four null checker warnings were showing up in Eclipse.", "author": "bobadair", "createdAt": "2020-10-07T17:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NTY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MDkyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r501350929", "bodyText": "They might not show up in Eclipse but they do show up in the build console:\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java:[588,13] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java:[595,13] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java:[602,13] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java:[659,44] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java:[660,21] Redundant null check: The variable buttonList cannot be null at this location", "author": "cpmeister", "createdAt": "2020-10-07T22:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NTY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxMTQyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r501411422", "bodyText": "Yes, I'm just wondering why they don't show up in Eclipse as well. Should we open a an issue on it? And if so, where?", "author": "bobadair", "createdAt": "2020-10-08T02:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NTY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1MTE5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r501451197", "bodyText": "I'm not really sure.", "author": "cpmeister", "createdAt": "2020-10-08T05:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NTY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4ODM0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r502188342", "bodyText": "These are all fixed.", "author": "bobadair", "createdAt": "2020-10-09T04:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NTY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NTcwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500695702", "bodyText": "same here", "author": "cpmeister", "createdAt": "2020-10-07T02:08:18Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n+    private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);\n+\n+    private final Map<Integer, LutronHandler> childHandlerMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, OGroupHandler> groupHandlerMap = new ConcurrentHashMap<>();\n+\n+    private @Nullable LeapDeviceDiscoveryService discoveryService;\n+\n+    public void setDiscoveryService(LeapDeviceDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public LeapBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+        leapMessageParser = new LeapMessageParser(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        SSLContext sslContext;\n+\n+        childHandlerMap.clear();\n+        groupHandlerMap.clear();\n+\n+        config = getConfigAs(LeapBridgeConfig.class);\n+        String keystorePassword = (config.keystorePassword == null) ? \"\" : config.keystorePassword;\n+\n+        String ipAddress = config.ipAddress;\n+        if (ipAddress == null || ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"bridge address not specified\");\n+            return;\n+        }\n+\n+        reconnectInterval = (config.reconnect > 0) ? config.reconnect : DEFAULT_RECONNECT_MINUTES;\n+        heartbeatInterval = (config.heartbeat > 0) ? config.heartbeat : DEFAULT_HEARTBEAT_MINUTES;\n+        sendDelay = (config.delay < 0) ? 0 : config.delay;\n+\n+        if (config.keystore == null || keystorePassword == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Keystore/keystore password not configured\");\n+            return;\n+        } else {\n+            try (FileInputStream keystoreInputStream = new FileInputStream(config.keystore)) {\n+                logger.trace(\"Initializing keystore\");\n+                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\n+                keystore.load(keystoreInputStream, keystorePassword.toCharArray());\n+\n+                logger.trace(\"Initializing SSL Context\");\n+                KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                kmf.init(keystore, keystorePassword.toCharArray());\n+\n+                TrustManager[] trustManagers;\n+                if (config.certValidate) {\n+                    // Use default trust manager which will attempt to validate server certificate from hub\n+                    TrustManagerFactory tmf = TrustManagerFactory\n+                            .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                    tmf.init(keystore);\n+                    trustManagers = tmf.getTrustManagers();\n+                } else {\n+                    // Use no-op trust manager which will not verify certificates\n+                    trustManagers = defineNoOpTrustManager();\n+                }\n+\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(kmf.getKeyManagers(), trustManagers, null);\n+\n+                sslsocketfactory = sslContext.getSocketFactory();\n+            } catch (FileNotFoundException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Keystore file not found\");\n+                return;\n+            } catch (CertificateException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Certificate exception\");\n+                return;\n+            } catch (UnrecoverableKeyException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Key unrecoverable with supplied password\");\n+                return;\n+            } catch (KeyManagementException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Key management exception\");\n+                logger.debug(\"Key management exception\", e);\n+                return;\n+            } catch (KeyStoreException | NoSuchAlgorithmException | IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Error initializing keystore\");\n+                logger.debug(\"Error initializing keystore\", e);\n+                return;\n+            }\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        scheduler.submit(this::connect); // start the async connect task\n+    }\n+\n+    /**\n+     * Return a no-op SSL trust manager which will not verify server or client certificates.\n+     */\n+    private TrustManager[] defineNoOpTrustManager() {\n+        return new TrustManager[] { new X509TrustManager() {\n+            @Override\n+            public void checkClientTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming client certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number {}:\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void checkServerTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming server certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number: {}\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public X509Certificate @Nullable [] getAcceptedIssuers() {\n+                return null;\n+            }\n+        } };\n+    }\n+\n+    private synchronized void connect() {\n+        deviceDataLoaded.set(false);\n+        buttonDataLoaded.set(false);\n+\n+        try {\n+            logger.debug(\"Opening SSL connection to {}:{}\", config.ipAddress, config.port);\n+            SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(config.ipAddress, config.port);\n+            sslsocket.startHandshake();\n+            writer = new BufferedWriter(new OutputStreamWriter(sslsocket.getOutputStream()));\n+            reader = new BufferedReader(new InputStreamReader(sslsocket.getInputStream()));\n+            this.sslsocket = sslsocket;\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Unknown host\");\n+            return;\n+        } catch (IllegalArgumentException e) {\n+            // port out of valid range\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Invalid port number\");\n+            return;\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error opening SSL connection. Check log.\");\n+            logger.info(\"Error opening SSL connection: {}\", e.getMessage());\n+            disconnect();\n+            scheduleConnectRetry(reconnectInterval); // Possibly a temporary problem. Try again later.\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, STATUS_INITIALIZING);\n+\n+        Thread readerThread = new Thread(this::readerThreadJob, \"Lutron reader\");\n+        readerThread.setDaemon(true);\n+        readerThread.start();\n+        this.readerThread = readerThread;\n+\n+        Thread senderThread = new Thread(this::senderThreadJob, \"Lutron sender\");\n+        senderThread.setDaemon(true);\n+        senderThread.start();\n+        this.senderThread = senderThread;\n+\n+        sendCommand(new LeapCommand(Request.getButtonGroups()));\n+        queryDiscoveryData();\n+        sendCommand(new LeapCommand(Request.subscribeOccupancyGroupStatus()));\n+\n+        logger.debug(\"Starting keepAlive job with interval {}\", heartbeatInterval);\n+        keepAlive = scheduler.scheduleWithFixedDelay(this::sendKeepAlive, heartbeatInterval, heartbeatInterval,\n+                TimeUnit.MINUTES);\n+    }\n+\n+    /**\n+     * Called by connect() and discovery service to request fresh discovery data\n+     */\n+    public void queryDiscoveryData() {\n+        sendCommand(new LeapCommand(Request.getDevices()));\n+        sendCommand(new LeapCommand(Request.getAreas()));\n+        sendCommand(new LeapCommand(Request.getOccupancyGroups()));\n+    }\n+\n+    private void scheduleConnectRetry(long waitMinutes) {\n+        logger.debug(\"Scheduling connection retry in {} minutes\", waitMinutes);\n+        connectRetryJob = scheduler.schedule(this::connect, waitMinutes, TimeUnit.MINUTES);\n+    }\n+\n+    private synchronized void disconnect() {\n+        logger.debug(\"Disconnecting\");\n+\n+        Thread senderThread = this.senderThread;\n+        Thread readerThread = this.readerThread;\n+\n+        if (connectRetryJob != null) {\n+            connectRetryJob.cancel(true);\n+        }\n+        if (keepAlive != null) {\n+            keepAlive.cancel(true);\n+        }\n+\n+        // May be called from keepAliveReconnect thread, so call cancel with false\n+        reconnectTaskCancel(false);\n+\n+        if (senderThread != null && senderThread.isAlive()) {\n+            senderThread.interrupt();\n+        }\n+        if (readerThread != null && readerThread.isAlive()) {\n+            readerThread.interrupt();\n+        }\n+        if (sslsocket != null) {\n+            try {\n+                sslsocket.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing SSL socket: {}\", e.getMessage());\n+            }\n+            sslsocket = null;\n+        }\n+        if (reader != null) {\n+            try {\n+                reader.close();", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NTczOA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500695738", "bodyText": "and here", "author": "cpmeister", "createdAt": "2020-10-07T02:08:24Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n+    private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);\n+\n+    private final Map<Integer, LutronHandler> childHandlerMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, OGroupHandler> groupHandlerMap = new ConcurrentHashMap<>();\n+\n+    private @Nullable LeapDeviceDiscoveryService discoveryService;\n+\n+    public void setDiscoveryService(LeapDeviceDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public LeapBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+        leapMessageParser = new LeapMessageParser(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        SSLContext sslContext;\n+\n+        childHandlerMap.clear();\n+        groupHandlerMap.clear();\n+\n+        config = getConfigAs(LeapBridgeConfig.class);\n+        String keystorePassword = (config.keystorePassword == null) ? \"\" : config.keystorePassword;\n+\n+        String ipAddress = config.ipAddress;\n+        if (ipAddress == null || ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"bridge address not specified\");\n+            return;\n+        }\n+\n+        reconnectInterval = (config.reconnect > 0) ? config.reconnect : DEFAULT_RECONNECT_MINUTES;\n+        heartbeatInterval = (config.heartbeat > 0) ? config.heartbeat : DEFAULT_HEARTBEAT_MINUTES;\n+        sendDelay = (config.delay < 0) ? 0 : config.delay;\n+\n+        if (config.keystore == null || keystorePassword == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Keystore/keystore password not configured\");\n+            return;\n+        } else {\n+            try (FileInputStream keystoreInputStream = new FileInputStream(config.keystore)) {\n+                logger.trace(\"Initializing keystore\");\n+                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\n+                keystore.load(keystoreInputStream, keystorePassword.toCharArray());\n+\n+                logger.trace(\"Initializing SSL Context\");\n+                KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                kmf.init(keystore, keystorePassword.toCharArray());\n+\n+                TrustManager[] trustManagers;\n+                if (config.certValidate) {\n+                    // Use default trust manager which will attempt to validate server certificate from hub\n+                    TrustManagerFactory tmf = TrustManagerFactory\n+                            .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                    tmf.init(keystore);\n+                    trustManagers = tmf.getTrustManagers();\n+                } else {\n+                    // Use no-op trust manager which will not verify certificates\n+                    trustManagers = defineNoOpTrustManager();\n+                }\n+\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(kmf.getKeyManagers(), trustManagers, null);\n+\n+                sslsocketfactory = sslContext.getSocketFactory();\n+            } catch (FileNotFoundException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Keystore file not found\");\n+                return;\n+            } catch (CertificateException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Certificate exception\");\n+                return;\n+            } catch (UnrecoverableKeyException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Key unrecoverable with supplied password\");\n+                return;\n+            } catch (KeyManagementException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Key management exception\");\n+                logger.debug(\"Key management exception\", e);\n+                return;\n+            } catch (KeyStoreException | NoSuchAlgorithmException | IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Error initializing keystore\");\n+                logger.debug(\"Error initializing keystore\", e);\n+                return;\n+            }\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        scheduler.submit(this::connect); // start the async connect task\n+    }\n+\n+    /**\n+     * Return a no-op SSL trust manager which will not verify server or client certificates.\n+     */\n+    private TrustManager[] defineNoOpTrustManager() {\n+        return new TrustManager[] { new X509TrustManager() {\n+            @Override\n+            public void checkClientTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming client certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number {}:\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void checkServerTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming server certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number: {}\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public X509Certificate @Nullable [] getAcceptedIssuers() {\n+                return null;\n+            }\n+        } };\n+    }\n+\n+    private synchronized void connect() {\n+        deviceDataLoaded.set(false);\n+        buttonDataLoaded.set(false);\n+\n+        try {\n+            logger.debug(\"Opening SSL connection to {}:{}\", config.ipAddress, config.port);\n+            SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(config.ipAddress, config.port);\n+            sslsocket.startHandshake();\n+            writer = new BufferedWriter(new OutputStreamWriter(sslsocket.getOutputStream()));\n+            reader = new BufferedReader(new InputStreamReader(sslsocket.getInputStream()));\n+            this.sslsocket = sslsocket;\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Unknown host\");\n+            return;\n+        } catch (IllegalArgumentException e) {\n+            // port out of valid range\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Invalid port number\");\n+            return;\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error opening SSL connection. Check log.\");\n+            logger.info(\"Error opening SSL connection: {}\", e.getMessage());\n+            disconnect();\n+            scheduleConnectRetry(reconnectInterval); // Possibly a temporary problem. Try again later.\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, STATUS_INITIALIZING);\n+\n+        Thread readerThread = new Thread(this::readerThreadJob, \"Lutron reader\");\n+        readerThread.setDaemon(true);\n+        readerThread.start();\n+        this.readerThread = readerThread;\n+\n+        Thread senderThread = new Thread(this::senderThreadJob, \"Lutron sender\");\n+        senderThread.setDaemon(true);\n+        senderThread.start();\n+        this.senderThread = senderThread;\n+\n+        sendCommand(new LeapCommand(Request.getButtonGroups()));\n+        queryDiscoveryData();\n+        sendCommand(new LeapCommand(Request.subscribeOccupancyGroupStatus()));\n+\n+        logger.debug(\"Starting keepAlive job with interval {}\", heartbeatInterval);\n+        keepAlive = scheduler.scheduleWithFixedDelay(this::sendKeepAlive, heartbeatInterval, heartbeatInterval,\n+                TimeUnit.MINUTES);\n+    }\n+\n+    /**\n+     * Called by connect() and discovery service to request fresh discovery data\n+     */\n+    public void queryDiscoveryData() {\n+        sendCommand(new LeapCommand(Request.getDevices()));\n+        sendCommand(new LeapCommand(Request.getAreas()));\n+        sendCommand(new LeapCommand(Request.getOccupancyGroups()));\n+    }\n+\n+    private void scheduleConnectRetry(long waitMinutes) {\n+        logger.debug(\"Scheduling connection retry in {} minutes\", waitMinutes);\n+        connectRetryJob = scheduler.schedule(this::connect, waitMinutes, TimeUnit.MINUTES);\n+    }\n+\n+    private synchronized void disconnect() {\n+        logger.debug(\"Disconnecting\");\n+\n+        Thread senderThread = this.senderThread;\n+        Thread readerThread = this.readerThread;\n+\n+        if (connectRetryJob != null) {\n+            connectRetryJob.cancel(true);\n+        }\n+        if (keepAlive != null) {\n+            keepAlive.cancel(true);\n+        }\n+\n+        // May be called from keepAliveReconnect thread, so call cancel with false\n+        reconnectTaskCancel(false);\n+\n+        if (senderThread != null && senderThread.isAlive()) {\n+            senderThread.interrupt();\n+        }\n+        if (readerThread != null && readerThread.isAlive()) {\n+            readerThread.interrupt();\n+        }\n+        if (sslsocket != null) {\n+            try {\n+                sslsocket.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing SSL socket: {}\", e.getMessage());\n+            }\n+            sslsocket = null;\n+        }\n+        if (reader != null) {\n+            try {\n+                reader.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing reader: {}\", e.getMessage());\n+            }\n+        }\n+        if (writer != null) {\n+            try {\n+                writer.close();", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NTkxNA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500695914", "bodyText": "cache these in a local variable as well.", "author": "cpmeister", "createdAt": "2020-10-07T02:09:04Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n+    private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);\n+\n+    private final Map<Integer, LutronHandler> childHandlerMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, OGroupHandler> groupHandlerMap = new ConcurrentHashMap<>();\n+\n+    private @Nullable LeapDeviceDiscoveryService discoveryService;\n+\n+    public void setDiscoveryService(LeapDeviceDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public LeapBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+        leapMessageParser = new LeapMessageParser(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        SSLContext sslContext;\n+\n+        childHandlerMap.clear();\n+        groupHandlerMap.clear();\n+\n+        config = getConfigAs(LeapBridgeConfig.class);\n+        String keystorePassword = (config.keystorePassword == null) ? \"\" : config.keystorePassword;\n+\n+        String ipAddress = config.ipAddress;\n+        if (ipAddress == null || ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"bridge address not specified\");\n+            return;\n+        }\n+\n+        reconnectInterval = (config.reconnect > 0) ? config.reconnect : DEFAULT_RECONNECT_MINUTES;\n+        heartbeatInterval = (config.heartbeat > 0) ? config.heartbeat : DEFAULT_HEARTBEAT_MINUTES;\n+        sendDelay = (config.delay < 0) ? 0 : config.delay;\n+\n+        if (config.keystore == null || keystorePassword == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Keystore/keystore password not configured\");\n+            return;\n+        } else {\n+            try (FileInputStream keystoreInputStream = new FileInputStream(config.keystore)) {\n+                logger.trace(\"Initializing keystore\");\n+                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\n+                keystore.load(keystoreInputStream, keystorePassword.toCharArray());\n+\n+                logger.trace(\"Initializing SSL Context\");\n+                KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                kmf.init(keystore, keystorePassword.toCharArray());\n+\n+                TrustManager[] trustManagers;\n+                if (config.certValidate) {\n+                    // Use default trust manager which will attempt to validate server certificate from hub\n+                    TrustManagerFactory tmf = TrustManagerFactory\n+                            .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                    tmf.init(keystore);\n+                    trustManagers = tmf.getTrustManagers();\n+                } else {\n+                    // Use no-op trust manager which will not verify certificates\n+                    trustManagers = defineNoOpTrustManager();\n+                }\n+\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(kmf.getKeyManagers(), trustManagers, null);\n+\n+                sslsocketfactory = sslContext.getSocketFactory();\n+            } catch (FileNotFoundException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Keystore file not found\");\n+                return;\n+            } catch (CertificateException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Certificate exception\");\n+                return;\n+            } catch (UnrecoverableKeyException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Key unrecoverable with supplied password\");\n+                return;\n+            } catch (KeyManagementException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Key management exception\");\n+                logger.debug(\"Key management exception\", e);\n+                return;\n+            } catch (KeyStoreException | NoSuchAlgorithmException | IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Error initializing keystore\");\n+                logger.debug(\"Error initializing keystore\", e);\n+                return;\n+            }\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        scheduler.submit(this::connect); // start the async connect task\n+    }\n+\n+    /**\n+     * Return a no-op SSL trust manager which will not verify server or client certificates.\n+     */\n+    private TrustManager[] defineNoOpTrustManager() {\n+        return new TrustManager[] { new X509TrustManager() {\n+            @Override\n+            public void checkClientTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming client certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number {}:\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void checkServerTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming server certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number: {}\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public X509Certificate @Nullable [] getAcceptedIssuers() {\n+                return null;\n+            }\n+        } };\n+    }\n+\n+    private synchronized void connect() {\n+        deviceDataLoaded.set(false);\n+        buttonDataLoaded.set(false);\n+\n+        try {\n+            logger.debug(\"Opening SSL connection to {}:{}\", config.ipAddress, config.port);\n+            SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(config.ipAddress, config.port);\n+            sslsocket.startHandshake();\n+            writer = new BufferedWriter(new OutputStreamWriter(sslsocket.getOutputStream()));\n+            reader = new BufferedReader(new InputStreamReader(sslsocket.getInputStream()));\n+            this.sslsocket = sslsocket;\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Unknown host\");\n+            return;\n+        } catch (IllegalArgumentException e) {\n+            // port out of valid range\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Invalid port number\");\n+            return;\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error opening SSL connection. Check log.\");\n+            logger.info(\"Error opening SSL connection: {}\", e.getMessage());\n+            disconnect();\n+            scheduleConnectRetry(reconnectInterval); // Possibly a temporary problem. Try again later.\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, STATUS_INITIALIZING);\n+\n+        Thread readerThread = new Thread(this::readerThreadJob, \"Lutron reader\");\n+        readerThread.setDaemon(true);\n+        readerThread.start();\n+        this.readerThread = readerThread;\n+\n+        Thread senderThread = new Thread(this::senderThreadJob, \"Lutron sender\");\n+        senderThread.setDaemon(true);\n+        senderThread.start();\n+        this.senderThread = senderThread;\n+\n+        sendCommand(new LeapCommand(Request.getButtonGroups()));\n+        queryDiscoveryData();\n+        sendCommand(new LeapCommand(Request.subscribeOccupancyGroupStatus()));\n+\n+        logger.debug(\"Starting keepAlive job with interval {}\", heartbeatInterval);\n+        keepAlive = scheduler.scheduleWithFixedDelay(this::sendKeepAlive, heartbeatInterval, heartbeatInterval,\n+                TimeUnit.MINUTES);\n+    }\n+\n+    /**\n+     * Called by connect() and discovery service to request fresh discovery data\n+     */\n+    public void queryDiscoveryData() {\n+        sendCommand(new LeapCommand(Request.getDevices()));\n+        sendCommand(new LeapCommand(Request.getAreas()));\n+        sendCommand(new LeapCommand(Request.getOccupancyGroups()));\n+    }\n+\n+    private void scheduleConnectRetry(long waitMinutes) {\n+        logger.debug(\"Scheduling connection retry in {} minutes\", waitMinutes);\n+        connectRetryJob = scheduler.schedule(this::connect, waitMinutes, TimeUnit.MINUTES);\n+    }\n+\n+    private synchronized void disconnect() {\n+        logger.debug(\"Disconnecting\");\n+\n+        Thread senderThread = this.senderThread;\n+        Thread readerThread = this.readerThread;\n+\n+        if (connectRetryJob != null) {\n+            connectRetryJob.cancel(true);\n+        }\n+        if (keepAlive != null) {\n+            keepAlive.cancel(true);\n+        }", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5ODYxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500698619", "bodyText": "Since this is asynchronous, if this handler is disposed immediately after getting initialized there is a chance it could get disposed before the connection finishes which would result in an illegal state.\nThe only slow operation you are performing as part of connect is the creation of the SSLSocket. Perhaps you could focus on just making that asynchronous instead.\nAnother option would be to cancel the future handle interrupt within your connect method.", "author": "cpmeister", "createdAt": "2020-10-07T02:17:47Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n+    private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);\n+\n+    private final Map<Integer, LutronHandler> childHandlerMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, OGroupHandler> groupHandlerMap = new ConcurrentHashMap<>();\n+\n+    private @Nullable LeapDeviceDiscoveryService discoveryService;\n+\n+    public void setDiscoveryService(LeapDeviceDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public LeapBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+        leapMessageParser = new LeapMessageParser(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        SSLContext sslContext;\n+\n+        childHandlerMap.clear();\n+        groupHandlerMap.clear();\n+\n+        config = getConfigAs(LeapBridgeConfig.class);\n+        String keystorePassword = (config.keystorePassword == null) ? \"\" : config.keystorePassword;\n+\n+        String ipAddress = config.ipAddress;\n+        if (ipAddress == null || ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"bridge address not specified\");\n+            return;\n+        }\n+\n+        reconnectInterval = (config.reconnect > 0) ? config.reconnect : DEFAULT_RECONNECT_MINUTES;\n+        heartbeatInterval = (config.heartbeat > 0) ? config.heartbeat : DEFAULT_HEARTBEAT_MINUTES;\n+        sendDelay = (config.delay < 0) ? 0 : config.delay;\n+\n+        if (config.keystore == null || keystorePassword == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Keystore/keystore password not configured\");\n+            return;\n+        } else {\n+            try (FileInputStream keystoreInputStream = new FileInputStream(config.keystore)) {\n+                logger.trace(\"Initializing keystore\");\n+                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\n+                keystore.load(keystoreInputStream, keystorePassword.toCharArray());\n+\n+                logger.trace(\"Initializing SSL Context\");\n+                KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                kmf.init(keystore, keystorePassword.toCharArray());\n+\n+                TrustManager[] trustManagers;\n+                if (config.certValidate) {\n+                    // Use default trust manager which will attempt to validate server certificate from hub\n+                    TrustManagerFactory tmf = TrustManagerFactory\n+                            .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                    tmf.init(keystore);\n+                    trustManagers = tmf.getTrustManagers();\n+                } else {\n+                    // Use no-op trust manager which will not verify certificates\n+                    trustManagers = defineNoOpTrustManager();\n+                }\n+\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(kmf.getKeyManagers(), trustManagers, null);\n+\n+                sslsocketfactory = sslContext.getSocketFactory();\n+            } catch (FileNotFoundException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Keystore file not found\");\n+                return;\n+            } catch (CertificateException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Certificate exception\");\n+                return;\n+            } catch (UnrecoverableKeyException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Key unrecoverable with supplied password\");\n+                return;\n+            } catch (KeyManagementException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Key management exception\");\n+                logger.debug(\"Key management exception\", e);\n+                return;\n+            } catch (KeyStoreException | NoSuchAlgorithmException | IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Error initializing keystore\");\n+                logger.debug(\"Error initializing keystore\", e);\n+                return;\n+            }\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        scheduler.submit(this::connect); // start the async connect task", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwMDU1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r501300554", "bodyText": "Since this is asynchronous, if this handler is disposed immediately after getting initialized there is a chance it could get disposed before the connection finishes which would result in an illegal state.\n\nThat\u2019s a good point. I think most bindings that open some sort of network connection use pretty much the same pattern, though. If there is a real possibility of dispose() being called before the async part of initialization is done, maybe the framework should be modified to keep that from happening, or some recommendation should be made in the docs about how best to deal with it?\n\nThe only slow operation you are performing as part of connect is the creation of the SSLSocket. Perhaps you could focus on just making that asynchronous instead.\n\nWell, connect() doesn\u2019t do much before creating the the SSL socket and starting the handshake, so I don\u2019t think that would help too much. Even after opening the connection, it just starts a couple of threads and queues a few commands for sending.\n\nAnother option would be to cancel the future handle interrupt within your connect method.\n\nI\u2019m not sure what you mean by this. I could save the Future returned by submit and attempt to call cancel on it in dispose(). But are createSocket() and startHandshake() even interruptible? And I assume dispose() would need to wait for connect() to exit before continuing to clean up, but I\u2019m not sure what the best way to do that is.", "author": "bobadair", "createdAt": "2020-10-07T20:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5ODYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1MjMyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r501452326", "bodyText": "But are createSocket() and startHandshake() even interruptible? And I assume dispose() would need to wait for connect() to exit before continuing to clean up, but I\u2019m not sure what the best way to do that is.\n\nYou don't necessarily have to interrupt them so much as make sure that any results are silently discarded. You might have to do some synchronous blocks on your asynchronous stuff to make sure that a dispose() followed by an initialize() wouldn't cause some sort of collision on resource access (if it is even possible for such a collision).", "author": "cpmeister", "createdAt": "2020-10-08T05:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5ODYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNjUwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r502706505", "bodyText": "I just pushed a commit that should take care of this.", "author": "bobadair", "createdAt": "2020-10-09T23:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5ODYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMTQzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500701438", "bodyText": "disconnect is called as part of dispose so it would probably be a really good idea to cancel all tasks with interrupts.", "author": "cpmeister", "createdAt": "2020-10-07T02:27:00Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n+    private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);\n+\n+    private final Map<Integer, LutronHandler> childHandlerMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, OGroupHandler> groupHandlerMap = new ConcurrentHashMap<>();\n+\n+    private @Nullable LeapDeviceDiscoveryService discoveryService;\n+\n+    public void setDiscoveryService(LeapDeviceDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public LeapBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+        leapMessageParser = new LeapMessageParser(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        SSLContext sslContext;\n+\n+        childHandlerMap.clear();\n+        groupHandlerMap.clear();\n+\n+        config = getConfigAs(LeapBridgeConfig.class);\n+        String keystorePassword = (config.keystorePassword == null) ? \"\" : config.keystorePassword;\n+\n+        String ipAddress = config.ipAddress;\n+        if (ipAddress == null || ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"bridge address not specified\");\n+            return;\n+        }\n+\n+        reconnectInterval = (config.reconnect > 0) ? config.reconnect : DEFAULT_RECONNECT_MINUTES;\n+        heartbeatInterval = (config.heartbeat > 0) ? config.heartbeat : DEFAULT_HEARTBEAT_MINUTES;\n+        sendDelay = (config.delay < 0) ? 0 : config.delay;\n+\n+        if (config.keystore == null || keystorePassword == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Keystore/keystore password not configured\");\n+            return;\n+        } else {\n+            try (FileInputStream keystoreInputStream = new FileInputStream(config.keystore)) {\n+                logger.trace(\"Initializing keystore\");\n+                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\n+                keystore.load(keystoreInputStream, keystorePassword.toCharArray());\n+\n+                logger.trace(\"Initializing SSL Context\");\n+                KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                kmf.init(keystore, keystorePassword.toCharArray());\n+\n+                TrustManager[] trustManagers;\n+                if (config.certValidate) {\n+                    // Use default trust manager which will attempt to validate server certificate from hub\n+                    TrustManagerFactory tmf = TrustManagerFactory\n+                            .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                    tmf.init(keystore);\n+                    trustManagers = tmf.getTrustManagers();\n+                } else {\n+                    // Use no-op trust manager which will not verify certificates\n+                    trustManagers = defineNoOpTrustManager();\n+                }\n+\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(kmf.getKeyManagers(), trustManagers, null);\n+\n+                sslsocketfactory = sslContext.getSocketFactory();\n+            } catch (FileNotFoundException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Keystore file not found\");\n+                return;\n+            } catch (CertificateException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Certificate exception\");\n+                return;\n+            } catch (UnrecoverableKeyException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Key unrecoverable with supplied password\");\n+                return;\n+            } catch (KeyManagementException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Key management exception\");\n+                logger.debug(\"Key management exception\", e);\n+                return;\n+            } catch (KeyStoreException | NoSuchAlgorithmException | IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Error initializing keystore\");\n+                logger.debug(\"Error initializing keystore\", e);\n+                return;\n+            }\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        scheduler.submit(this::connect); // start the async connect task\n+    }\n+\n+    /**\n+     * Return a no-op SSL trust manager which will not verify server or client certificates.\n+     */\n+    private TrustManager[] defineNoOpTrustManager() {\n+        return new TrustManager[] { new X509TrustManager() {\n+            @Override\n+            public void checkClientTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming client certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number {}:\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void checkServerTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming server certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number: {}\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public X509Certificate @Nullable [] getAcceptedIssuers() {\n+                return null;\n+            }\n+        } };\n+    }\n+\n+    private synchronized void connect() {\n+        deviceDataLoaded.set(false);\n+        buttonDataLoaded.set(false);\n+\n+        try {\n+            logger.debug(\"Opening SSL connection to {}:{}\", config.ipAddress, config.port);\n+            SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(config.ipAddress, config.port);\n+            sslsocket.startHandshake();\n+            writer = new BufferedWriter(new OutputStreamWriter(sslsocket.getOutputStream()));\n+            reader = new BufferedReader(new InputStreamReader(sslsocket.getInputStream()));\n+            this.sslsocket = sslsocket;\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Unknown host\");\n+            return;\n+        } catch (IllegalArgumentException e) {\n+            // port out of valid range\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Invalid port number\");\n+            return;\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error opening SSL connection. Check log.\");\n+            logger.info(\"Error opening SSL connection: {}\", e.getMessage());\n+            disconnect();\n+            scheduleConnectRetry(reconnectInterval); // Possibly a temporary problem. Try again later.\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, STATUS_INITIALIZING);\n+\n+        Thread readerThread = new Thread(this::readerThreadJob, \"Lutron reader\");\n+        readerThread.setDaemon(true);\n+        readerThread.start();\n+        this.readerThread = readerThread;\n+\n+        Thread senderThread = new Thread(this::senderThreadJob, \"Lutron sender\");\n+        senderThread.setDaemon(true);\n+        senderThread.start();\n+        this.senderThread = senderThread;\n+\n+        sendCommand(new LeapCommand(Request.getButtonGroups()));\n+        queryDiscoveryData();\n+        sendCommand(new LeapCommand(Request.subscribeOccupancyGroupStatus()));\n+\n+        logger.debug(\"Starting keepAlive job with interval {}\", heartbeatInterval);\n+        keepAlive = scheduler.scheduleWithFixedDelay(this::sendKeepAlive, heartbeatInterval, heartbeatInterval,\n+                TimeUnit.MINUTES);\n+    }\n+\n+    /**\n+     * Called by connect() and discovery service to request fresh discovery data\n+     */\n+    public void queryDiscoveryData() {\n+        sendCommand(new LeapCommand(Request.getDevices()));\n+        sendCommand(new LeapCommand(Request.getAreas()));\n+        sendCommand(new LeapCommand(Request.getOccupancyGroups()));\n+    }\n+\n+    private void scheduleConnectRetry(long waitMinutes) {\n+        logger.debug(\"Scheduling connection retry in {} minutes\", waitMinutes);\n+        connectRetryJob = scheduler.schedule(this::connect, waitMinutes, TimeUnit.MINUTES);\n+    }\n+\n+    private synchronized void disconnect() {\n+        logger.debug(\"Disconnecting\");\n+\n+        Thread senderThread = this.senderThread;\n+        Thread readerThread = this.readerThread;\n+\n+        if (connectRetryJob != null) {\n+            connectRetryJob.cancel(true);\n+        }\n+        if (keepAlive != null) {\n+            keepAlive.cancel(true);\n+        }\n+\n+        // May be called from keepAliveReconnect thread, so call cancel with false\n+        reconnectTaskCancel(false);", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxMzI5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r501413294", "bodyText": "Yes. I can't just call cancel with interrupt on the reconnect job all of the time, though. The reconnect job calls disconnect(), so it would shoot itself. I'll have to add a boolean parameter to disconnect() that gets set when called from dispose().", "author": "bobadair", "createdAt": "2020-10-08T02:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMTQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1MjU3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r501452578", "bodyText": "Well interrupts are optional, you just need to make sure that the asynchronous task results are silently discarded.", "author": "cpmeister", "createdAt": "2020-10-08T05:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMTQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYwMjg2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r502602860", "bodyText": "I've changed this to use reconnectTaskCancel(true) when called from dispose().", "author": "bobadair", "createdAt": "2020-10-09T18:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMTQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMTcxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500701716", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (chain != null) {\n          \n          \n            \n                            if (chain != null && logger.isTraceEnabled()) {", "author": "cpmeister", "createdAt": "2020-10-07T02:28:15Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n+    private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);\n+\n+    private final Map<Integer, LutronHandler> childHandlerMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, OGroupHandler> groupHandlerMap = new ConcurrentHashMap<>();\n+\n+    private @Nullable LeapDeviceDiscoveryService discoveryService;\n+\n+    public void setDiscoveryService(LeapDeviceDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public LeapBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+        leapMessageParser = new LeapMessageParser(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        SSLContext sslContext;\n+\n+        childHandlerMap.clear();\n+        groupHandlerMap.clear();\n+\n+        config = getConfigAs(LeapBridgeConfig.class);\n+        String keystorePassword = (config.keystorePassword == null) ? \"\" : config.keystorePassword;\n+\n+        String ipAddress = config.ipAddress;\n+        if (ipAddress == null || ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"bridge address not specified\");\n+            return;\n+        }\n+\n+        reconnectInterval = (config.reconnect > 0) ? config.reconnect : DEFAULT_RECONNECT_MINUTES;\n+        heartbeatInterval = (config.heartbeat > 0) ? config.heartbeat : DEFAULT_HEARTBEAT_MINUTES;\n+        sendDelay = (config.delay < 0) ? 0 : config.delay;\n+\n+        if (config.keystore == null || keystorePassword == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Keystore/keystore password not configured\");\n+            return;\n+        } else {\n+            try (FileInputStream keystoreInputStream = new FileInputStream(config.keystore)) {\n+                logger.trace(\"Initializing keystore\");\n+                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\n+                keystore.load(keystoreInputStream, keystorePassword.toCharArray());\n+\n+                logger.trace(\"Initializing SSL Context\");\n+                KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                kmf.init(keystore, keystorePassword.toCharArray());\n+\n+                TrustManager[] trustManagers;\n+                if (config.certValidate) {\n+                    // Use default trust manager which will attempt to validate server certificate from hub\n+                    TrustManagerFactory tmf = TrustManagerFactory\n+                            .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                    tmf.init(keystore);\n+                    trustManagers = tmf.getTrustManagers();\n+                } else {\n+                    // Use no-op trust manager which will not verify certificates\n+                    trustManagers = defineNoOpTrustManager();\n+                }\n+\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(kmf.getKeyManagers(), trustManagers, null);\n+\n+                sslsocketfactory = sslContext.getSocketFactory();\n+            } catch (FileNotFoundException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Keystore file not found\");\n+                return;\n+            } catch (CertificateException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Certificate exception\");\n+                return;\n+            } catch (UnrecoverableKeyException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Key unrecoverable with supplied password\");\n+                return;\n+            } catch (KeyManagementException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Key management exception\");\n+                logger.debug(\"Key management exception\", e);\n+                return;\n+            } catch (KeyStoreException | NoSuchAlgorithmException | IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Error initializing keystore\");\n+                logger.debug(\"Error initializing keystore\", e);\n+                return;\n+            }\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        scheduler.submit(this::connect); // start the async connect task\n+    }\n+\n+    /**\n+     * Return a no-op SSL trust manager which will not verify server or client certificates.\n+     */\n+    private TrustManager[] defineNoOpTrustManager() {\n+        return new TrustManager[] { new X509TrustManager() {\n+            @Override\n+            public void checkClientTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming client certificate is valid\");\n+                if (chain != null) {", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMTc4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r500701780", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (chain != null) {\n          \n          \n            \n                            if (chain != null && logger.isTraceEnabled()) {", "author": "cpmeister", "createdAt": "2020-10-07T02:28:30Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,763 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAlive;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private final AtomicBoolean deviceDataLoaded = new AtomicBoolean(false);\n+    private final AtomicBoolean buttonDataLoaded = new AtomicBoolean(false);\n+\n+    private final Map<Integer, LutronHandler> childHandlerMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, OGroupHandler> groupHandlerMap = new ConcurrentHashMap<>();\n+\n+    private @Nullable LeapDeviceDiscoveryService discoveryService;\n+\n+    public void setDiscoveryService(LeapDeviceDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public LeapBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+        leapMessageParser = new LeapMessageParser(this);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        SSLContext sslContext;\n+\n+        childHandlerMap.clear();\n+        groupHandlerMap.clear();\n+\n+        config = getConfigAs(LeapBridgeConfig.class);\n+        String keystorePassword = (config.keystorePassword == null) ? \"\" : config.keystorePassword;\n+\n+        String ipAddress = config.ipAddress;\n+        if (ipAddress == null || ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"bridge address not specified\");\n+            return;\n+        }\n+\n+        reconnectInterval = (config.reconnect > 0) ? config.reconnect : DEFAULT_RECONNECT_MINUTES;\n+        heartbeatInterval = (config.heartbeat > 0) ? config.heartbeat : DEFAULT_HEARTBEAT_MINUTES;\n+        sendDelay = (config.delay < 0) ? 0 : config.delay;\n+\n+        if (config.keystore == null || keystorePassword == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Keystore/keystore password not configured\");\n+            return;\n+        } else {\n+            try (FileInputStream keystoreInputStream = new FileInputStream(config.keystore)) {\n+                logger.trace(\"Initializing keystore\");\n+                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\n+                keystore.load(keystoreInputStream, keystorePassword.toCharArray());\n+\n+                logger.trace(\"Initializing SSL Context\");\n+                KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                kmf.init(keystore, keystorePassword.toCharArray());\n+\n+                TrustManager[] trustManagers;\n+                if (config.certValidate) {\n+                    // Use default trust manager which will attempt to validate server certificate from hub\n+                    TrustManagerFactory tmf = TrustManagerFactory\n+                            .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                    tmf.init(keystore);\n+                    trustManagers = tmf.getTrustManagers();\n+                } else {\n+                    // Use no-op trust manager which will not verify certificates\n+                    trustManagers = defineNoOpTrustManager();\n+                }\n+\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(kmf.getKeyManagers(), trustManagers, null);\n+\n+                sslsocketfactory = sslContext.getSocketFactory();\n+            } catch (FileNotFoundException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Keystore file not found\");\n+                return;\n+            } catch (CertificateException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Certificate exception\");\n+                return;\n+            } catch (UnrecoverableKeyException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Key unrecoverable with supplied password\");\n+                return;\n+            } catch (KeyManagementException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Key management exception\");\n+                logger.debug(\"Key management exception\", e);\n+                return;\n+            } catch (KeyStoreException | NoSuchAlgorithmException | IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Error initializing keystore\");\n+                logger.debug(\"Error initializing keystore\", e);\n+                return;\n+            }\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        scheduler.submit(this::connect); // start the async connect task\n+    }\n+\n+    /**\n+     * Return a no-op SSL trust manager which will not verify server or client certificates.\n+     */\n+    private TrustManager[] defineNoOpTrustManager() {\n+        return new TrustManager[] { new X509TrustManager() {\n+            @Override\n+            public void checkClientTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming client certificate is valid\");\n+                if (chain != null) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number {}:\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void checkServerTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming server certificate is valid\");\n+                if (chain != null) {", "originalCommit": "deb48c1252ee18917f2f9e19cf0158fedb164659", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\nindex 246675b8e1..614c5908dd 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java\n\n@@ -110,8 +110,8 @@ public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessag\n     private @Nullable Thread senderThread;\n     private @Nullable Thread readerThread;\n \n-    private @Nullable ScheduledFuture<?> keepAlive;\n-    private @Nullable ScheduledFuture<?> keepAliveReconnect;\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n     private @Nullable ScheduledFuture<?> connectRetryJob;\n     private final Object keepAliveReconnectLock = new Object();\n \n"}}, {"oid": "5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "url": "https://github.com/openhab/openhab-addons/commit/5dc3d31afdcb73a7e4319c3984a1426d50ffd933", "message": "[lutron] Address some review comments\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-07T17:22:50Z", "type": "commit"}, {"oid": "28b945817af6999e9f76f8a88c5603c3d3beab8d", "url": "https://github.com/openhab/openhab-addons/commit/28b945817af6999e9f76f8a88c5603c3d3beab8d", "message": "[lutron] Address more review comments\n\n* Handle InterruptedIOException in reader and writer threads\n* Interrupt running reconnect job from dispose\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-08T05:07:33Z", "type": "commit"}, {"oid": "037acd4500d1842743ac77d2c6fcf09941fd08f4", "url": "https://github.com/openhab/openhab-addons/commit/037acd4500d1842743ac77d2c6fcf09941fd08f4", "message": "[lutron] Address more review comments\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-08T22:18:01Z", "type": "commit"}, {"oid": "b5b90ad4b68c0b4b596bca1462def5dabced98b2", "url": "https://github.com/openhab/openhab-addons/commit/b5b90ad4b68c0b4b596bca1462def5dabced98b2", "message": "[lutron] Interrupt async init task from dispose\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-09T22:15:41Z", "type": "commit"}, {"oid": "306f423cb4b764644ae8f95459894e0d792a052e", "url": "https://github.com/openhab/openhab-addons/commit/306f423cb4b764644ae8f95459894e0d792a052e", "message": "[lutron] Eliminate null checker warnings\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-10T04:58:48Z", "type": "commit"}, {"oid": "71a5b7542f4afd59dccb7c37c5ab19cfcf582ee4", "url": "https://github.com/openhab/openhab-addons/commit/71a5b7542f4afd59dccb7c37c5ab19cfcf582ee4", "message": "[lutron] Convert LeapDeviceDiscoveryService to ThingHandlerService\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-11T04:36:48Z", "type": "commit"}, {"oid": "40d4fc56591c84fbeb9ce05ce90473724e53bf3a", "url": "https://github.com/openhab/openhab-addons/commit/40d4fc56591c84fbeb9ce05ce90473724e53bf3a", "message": "[lutron] Remove comment\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-11T04:59:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3NjEyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r502976126", "bodyText": "the main branch is running on java 11, so perhaps you could get rid of this ugly stuff now?", "author": "cpmeister", "createdAt": "2020-10-11T22:45:31Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/PicoKeypadHandler.java", "diffHunk": "@@ -35,24 +37,69 @@ public PicoKeypadHandler(Thing thing) {\n         kp = new KeypadConfigPico();\n     }\n \n+    @SuppressWarnings(\"serial\")\n     @Override\n     protected void configureComponents(@Nullable String model) {\n         String mod = model == null ? \"Generic\" : model;\n         logger.debug(\"Configuring components for keypad model {}\", mod);\n \n         switch (mod) {\n             case \"2B\":\n+                buttonList = kp.getComponents(mod, ComponentType.BUTTON);\n+                leapButtonMap = new HashMap<Integer, Integer>() {\n+                    {\n+                        put(2, 1);\n+                        put(4, 2);\n+                    }\n+                }; // Note: we can get rid of this ugly stuff with java 9 and above", "originalCommit": "40d4fc56591c84fbeb9ce05ce90473724e53bf3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NDc3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r503554779", "bodyText": "Good catch. I was originally targeting this for 2.5.x with its Java 8 requirement.", "author": "bobadair", "createdAt": "2020-10-12T21:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3NjEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "9b2010b2550770b2afea62c728c995001fd72d8b", "chunk": "diff --git a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/PicoKeypadHandler.java b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/PicoKeypadHandler.java\nindex 79690b1b0c..f8337a3c84 100644\n--- a/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/PicoKeypadHandler.java\n+++ b/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/PicoKeypadHandler.java\n\n@@ -37,7 +35,6 @@ public class PicoKeypadHandler extends BaseKeypadHandler {\n         kp = new KeypadConfigPico();\n     }\n \n-    @SuppressWarnings(\"serial\")\n     @Override\n     protected void configureComponents(@Nullable String model) {\n         String mod = model == null ? \"Generic\" : model;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4MDY0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r502980647", "bodyText": "The spawning of asynchronous tasks inside of other asynchronous tasks can be a real source of problems if you are trying to dispose the handler while it is getting initialized. I suggest wrapping the Thread fields in a CompletableFuture so that you have a way to prevent starting them in the event that dispose it called before your asynchronous task initialized them.\nCompletableFuture<Thread> readThreadFuture;\n\npublic void initialize() {\n  readThreadFuture = new CompletableFuture<>();\n  readThreadFuture.thenAccept(Thread::start);\n\n  Thread readerThread = new Thread(this::readerThreadJob, \"Lutron reader\");\n  readerThread.setDaemon(true);\n\n  executor.submit(() -> {\n    ...\n    readThreadFuture.complete(readerThread);\n  });\n}\n\npublic void dispose(){\n  //if this completes the future the asynchronous 'complete()' will be ignored\n  if(!readThreadFuture.cancel(false)){\n     //failure to cancel means that the future completed first, so lets interrupt the thread then   \n     readThreadFuture.thenAccept(thread -> thread.interrupt());\n  }\n}\n\nIn addition could you initialize your keepAliveJob inside of the initialize() method instead of doing it asynchronously? You could just make the keepAliveJob skip if the socket isn't ready yet.", "author": "cpmeister", "createdAt": "2020-10-11T23:27:24Z", "path": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/handler/LeapBridgeHandler.java", "diffHunk": "@@ -0,0 +1,802 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lutron.internal.handler;\n+\n+import static org.openhab.binding.lutron.internal.LutronBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.InterruptedIOException;\n+import java.io.OutputStreamWriter;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.lutron.internal.config.LeapBridgeConfig;\n+import org.openhab.binding.lutron.internal.discovery.LeapDeviceDiscoveryService;\n+import org.openhab.binding.lutron.internal.protocol.FanSpeedType;\n+import org.openhab.binding.lutron.internal.protocol.GroupCommand;\n+import org.openhab.binding.lutron.internal.protocol.LutronCommandNew;\n+import org.openhab.binding.lutron.internal.protocol.OutputCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapCommand;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParser;\n+import org.openhab.binding.lutron.internal.protocol.leap.LeapMessageParserCallbacks;\n+import org.openhab.binding.lutron.internal.protocol.leap.Request;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Area;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ButtonGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.Device;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.OccupancyGroup;\n+import org.openhab.binding.lutron.internal.protocol.leap.dto.ZoneStatus;\n+import org.openhab.binding.lutron.internal.protocol.lip.LutronCommandType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for communicating with Lutron hubs that support the LEAP protocol, such as Caseta and\n+ * RA2 Select.\n+ *\n+ * @author Bob Adair - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LeapBridgeHandler extends LutronBridgeHandler implements LeapMessageParserCallbacks {\n+    private static final int DEFAULT_RECONNECT_MINUTES = 5;\n+    private static final int DEFAULT_HEARTBEAT_MINUTES = 5;\n+    private static final long KEEPALIVE_TIMEOUT_SECONDS = 30;\n+\n+    private static final String STATUS_INITIALIZING = \"Initializing\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(LeapBridgeHandler.class);\n+\n+    private @NonNullByDefault({}) LeapBridgeConfig config;\n+    private int reconnectInterval;\n+    private int heartbeatInterval;\n+    private int sendDelay;\n+\n+    private @NonNullByDefault({}) SSLSocketFactory sslsocketfactory;\n+    private @Nullable SSLSocket sslsocket;\n+    private @Nullable BufferedWriter writer;\n+    private @Nullable BufferedReader reader;\n+\n+    private @NonNullByDefault({}) LeapMessageParser leapMessageParser;\n+\n+    private final BlockingQueue<LeapCommand> sendQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable Future<?> asyncInitializeTask;\n+\n+    private @Nullable Thread senderThread;\n+    private @Nullable Thread readerThread;\n+\n+    private @Nullable ScheduledFuture<?> keepAliveJob;\n+    private @Nullable ScheduledFuture<?> keepAliveReconnectJob;\n+    private @Nullable ScheduledFuture<?> connectRetryJob;\n+    private final Object keepAliveReconnectLock = new Object();\n+\n+    private final Map<Integer, Integer> zoneToDevice = new HashMap<>();\n+    private final Map<Integer, Integer> deviceToZone = new HashMap<>();\n+    private final Object zoneMapsLock = new Object();\n+\n+    private @Nullable Map<Integer, List<Integer>> deviceButtonMap;\n+    private final Object deviceButtonMapLock = new Object();\n+\n+    private volatile boolean deviceDataLoaded = false;\n+    private volatile boolean buttonDataLoaded = false;\n+\n+    private final Map<Integer, LutronHandler> childHandlerMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, OGroupHandler> groupHandlerMap = new ConcurrentHashMap<>();\n+\n+    private @Nullable LeapDeviceDiscoveryService discoveryService;\n+\n+    public void setDiscoveryService(LeapDeviceDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public LeapBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+        leapMessageParser = new LeapMessageParser(this);\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(LeapDeviceDiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        SSLContext sslContext;\n+\n+        childHandlerMap.clear();\n+        groupHandlerMap.clear();\n+\n+        config = getConfigAs(LeapBridgeConfig.class);\n+        String keystorePassword = (config.keystorePassword == null) ? \"\" : config.keystorePassword;\n+\n+        String ipAddress = config.ipAddress;\n+        if (ipAddress == null || ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"bridge address not specified\");\n+            return;\n+        }\n+\n+        reconnectInterval = (config.reconnect > 0) ? config.reconnect : DEFAULT_RECONNECT_MINUTES;\n+        heartbeatInterval = (config.heartbeat > 0) ? config.heartbeat : DEFAULT_HEARTBEAT_MINUTES;\n+        sendDelay = (config.delay < 0) ? 0 : config.delay;\n+\n+        if (config.keystore == null || keystorePassword == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Keystore/keystore password not configured\");\n+            return;\n+        } else {\n+            try (FileInputStream keystoreInputStream = new FileInputStream(config.keystore)) {\n+                logger.trace(\"Initializing keystore\");\n+                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\n+                keystore.load(keystoreInputStream, keystorePassword.toCharArray());\n+\n+                logger.trace(\"Initializing SSL Context\");\n+                KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                kmf.init(keystore, keystorePassword.toCharArray());\n+\n+                TrustManager[] trustManagers;\n+                if (config.certValidate) {\n+                    // Use default trust manager which will attempt to validate server certificate from hub\n+                    TrustManagerFactory tmf = TrustManagerFactory\n+                            .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                    tmf.init(keystore);\n+                    trustManagers = tmf.getTrustManagers();\n+                } else {\n+                    // Use no-op trust manager which will not verify certificates\n+                    trustManagers = defineNoOpTrustManager();\n+                }\n+\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(kmf.getKeyManagers(), trustManagers, null);\n+\n+                sslsocketfactory = sslContext.getSocketFactory();\n+            } catch (FileNotFoundException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Keystore file not found\");\n+                return;\n+            } catch (CertificateException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Certificate exception\");\n+                return;\n+            } catch (UnrecoverableKeyException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Key unrecoverable with supplied password\");\n+                return;\n+            } catch (KeyManagementException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Key management exception\");\n+                logger.debug(\"Key management exception\", e);\n+                return;\n+            } catch (KeyStoreException | NoSuchAlgorithmException | IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Error initializing keystore\");\n+                logger.debug(\"Error initializing keystore\", e);\n+                return;\n+            }\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        asyncInitializeTask = scheduler.submit(this::connect); // start the async connect task\n+    }\n+\n+    /**\n+     * Return a no-op SSL trust manager which will not verify server or client certificates.\n+     */\n+    private TrustManager[] defineNoOpTrustManager() {\n+        return new TrustManager[] { new X509TrustManager() {\n+            @Override\n+            public void checkClientTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming client certificate is valid\");\n+                if (chain != null && logger.isTraceEnabled()) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number {}:\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void checkServerTrusted(final X509Certificate @Nullable [] chain, final @Nullable String authType) {\n+                logger.debug(\"Assuming server certificate is valid\");\n+                if (chain != null && logger.isTraceEnabled()) {\n+                    for (int cert = 0; cert < chain.length; cert++) {\n+                        logger.trace(\"Subject DN: {}\", chain[cert].getSubjectDN());\n+                        logger.trace(\"Issuer DN: {}\", chain[cert].getIssuerDN());\n+                        logger.trace(\"Serial number: {}\", chain[cert].getSerialNumber());\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public X509Certificate @Nullable [] getAcceptedIssuers() {\n+                return null;\n+            }\n+        } };\n+    }\n+\n+    private synchronized void connect() {\n+        deviceDataLoaded = false;\n+        buttonDataLoaded = false;\n+\n+        try {\n+            logger.debug(\"Opening SSL connection to {}:{}\", config.ipAddress, config.port);\n+            SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(config.ipAddress, config.port);\n+            sslsocket.startHandshake();\n+            writer = new BufferedWriter(new OutputStreamWriter(sslsocket.getOutputStream()));\n+            reader = new BufferedReader(new InputStreamReader(sslsocket.getInputStream()));\n+            this.sslsocket = sslsocket;\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Unknown host\");\n+            return;\n+        } catch (IllegalArgumentException e) {\n+            // port out of valid range\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Invalid port number\");\n+            return;\n+        } catch (InterruptedIOException e) {\n+            Thread.currentThread().interrupt();\n+            logger.debug(\"Interrupted while establishing connection\");\n+            return;\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error opening SSL connection. Check log.\");\n+            logger.info(\"Error opening SSL connection: {}\", e.getMessage());\n+            disconnect(false);\n+            scheduleConnectRetry(reconnectInterval); // Possibly a temporary problem. Try again later.\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, STATUS_INITIALIZING);\n+\n+        Thread readerThread = new Thread(this::readerThreadJob, \"Lutron reader\");\n+        readerThread.setDaemon(true);\n+        readerThread.start();\n+        this.readerThread = readerThread;\n+\n+        Thread senderThread = new Thread(this::senderThreadJob, \"Lutron sender\");\n+        senderThread.setDaemon(true);\n+        senderThread.start();\n+        this.senderThread = senderThread;\n+\n+        sendCommand(new LeapCommand(Request.getButtonGroups()));\n+        queryDiscoveryData();\n+        sendCommand(new LeapCommand(Request.subscribeOccupancyGroupStatus()));\n+\n+        logger.debug(\"Starting keepalive job with interval {}\", heartbeatInterval);\n+        keepAliveJob = scheduler.scheduleWithFixedDelay(this::sendKeepAlive, heartbeatInterval, heartbeatInterval,\n+                TimeUnit.MINUTES);", "originalCommit": "40d4fc56591c84fbeb9ce05ce90473724e53bf3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMjI3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r504322272", "bodyText": "Sorry, I've been kind of tied up lately. I looked through that code again, though, and I don't really see any potential problems. Both connect() and disconnect() are synchronized. The dispose() routine calls cancel(true) on the Future running connect(), if it is still running, and then calls disconnect(). So disconnect() will wait for connect() to exit, and then clean up anything it did, including canceling connectRetryJob, keepAliveJob, and keepAliveReconnectJob, and interrupting senderThread and readerThread. It also closes the SSL socket, which would cause senderThread and readerThread to exit regardless. I should check to see if any of those should be declared as volatile to eliminate any potential inter-thread visibility problems, but other that than I don't really see any potential issues with dispose() whenever it's called. Very similar code is being used in this binding's ipbridge and in the alarm decoder binding's ipbridge.", "author": "bobadair", "createdAt": "2020-10-13T23:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4MDY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwOTY5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8650#discussion_r505909695", "bodyText": "huh, I don't know why I didn't notice that connect and disconnect are synchronized. Yes that would prevent any problems so you can disregard my prior suggestion.", "author": "cpmeister", "createdAt": "2020-10-15T22:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4MDY0Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "9b2010b2550770b2afea62c728c995001fd72d8b", "url": "https://github.com/openhab/openhab-addons/commit/9b2010b2550770b2afea62c728c995001fd72d8b", "message": "[lutron] Define LEAP button maps using Java 9 syntax\n\nSigned-off-by: Bob Adair <bob.github@att.net>", "committedDate": "2020-10-12T21:52:58Z", "type": "commit"}]}