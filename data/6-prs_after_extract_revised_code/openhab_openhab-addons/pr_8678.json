{"pr_number": 8678, "pr_title": "[Linky] Linky issue 7610", "pr_createdAt": "2020-10-06T16:00:18Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8678", "timeline": [{"oid": "8ba6761d3a83bb99fdc42cf1af99a38a5f4b5ed7", "url": "https://github.com/openhab/openhab-addons/commit/8ba6761d3a83bb99fdc42cf1af99a38a5f4b5ed7", "message": "Staging work", "committedDate": "2020-10-02T08:11:37Z", "type": "commit"}, {"oid": "8632d1a09cee7980e099005bee98cbd4d5daa461", "url": "https://github.com/openhab/openhab-addons/commit/8632d1a09cee7980e099005bee98cbd4d5daa461", "message": "Refactoring the binding for OH3\nAdressing Issue #7610\nAdded new channels", "committedDate": "2020-10-06T15:47:55Z", "type": "commit"}, {"oid": "fc60a9a29e6c3d2c5005fd32c195582426729445", "url": "https://github.com/openhab/openhab-addons/commit/fc60a9a29e6c3d2c5005fd32c195582426729445", "message": "spotless apply\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-10-06T15:52:42Z", "type": "commit"}, {"oid": "0ecfe0231c2ae9ad0833062337e6c2ac91c23e4c", "url": "https://github.com/openhab/openhab-addons/commit/0ecfe0231c2ae9ad0833062337e6c2ac91c23e4c", "message": "Pleasing Travis\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-10-06T16:25:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1Mzc5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r501953799", "bodyText": "You don't include the last day?", "author": "cpmeister", "createdAt": "2020-10-08T19:12:58Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/handler/LinkyHandler.java", "diffHunk": "@@ -273,19 +267,16 @@ private void updateKwhChannel(String channelId, double consumption) {\n         List<String> report = new ArrayList<>();\n         if (startDay.getYear() == endDay.getYear() && startDay.getMonthValue() == endDay.getMonthValue()) {\n             // All values in the same month\n-            LinkyConsumptionData result = getConsumptionData(DAILY, startDay, endDay, true);\n-            if (result != null && result.success()) {\n-                LocalDate currentDay = startDay;\n-                int jump = result.getDecalage();\n-                while (jump < result.getData().size() && !currentDay.isAfter(endDay)) {\n-                    double consumption = result.getData().get(jump).valeur;\n-                    String line = currentDay.format(DateTimeFormatter.ISO_LOCAL_DATE) + separator;\n+            Consumption result = getConsumptionData(startDay, endDay);\n+            if (result != null) {\n+                Aggregate days = result.aggregats.days;\n+                for (int i = 0; i < days.datas.size() - 1; i++) {", "originalCommit": "0ecfe0231c2ae9ad0833062337e6c2ac91c23e4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI0MzcwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502243703", "bodyText": "OMG, what an awfull mistake !", "author": "clinique", "createdAt": "2020-10-09T07:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1Mzc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/handler/LinkyHandler.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/handler/LinkyHandler.java\nindex 62f3c677cf..d4cb409b5c 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/handler/LinkyHandler.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/handler/LinkyHandler.java\n\n@@ -270,7 +271,7 @@ public class LinkyHandler extends BaseThingHandler {\n             Consumption result = getConsumptionData(startDay, endDay);\n             if (result != null) {\n                 Aggregate days = result.aggregats.days;\n-                for (int i = 0; i < days.datas.size() - 1; i++) {\n+                for (int i = 0; i < days.datas.size(); i++) {\n                     double consumption = days.datas.get(i);\n                     String line = days.periodes.get(i).dateDebut.format(DateTimeFormatter.ISO_LOCAL_DATE) + separator;\n                     if (consumption >= 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzI2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r501957268", "bodyText": "If dispose() is called immediately after initialize() it might be possible that this field is populated after dispose() finishes running.\nThe refreshJob field should be populated as part of initialize(), not asynchronously. The same could be said of any other field that requires cleanup during dispose (e.g. enedisApi).", "author": "cpmeister", "createdAt": "2020-10-08T19:19:08Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/handler/LinkyHandler.java", "diffHunk": "@@ -68,189 +65,180 @@\n public class LinkyHandler extends BaseThingHandler {\n     private final Logger logger = LoggerFactory.getLogger(LinkyHandler.class);\n \n-    private static final String LOGIN_BASE_URI = \"https://espace-client-connexion.enedis.fr/auth/UI/Login\";\n-    private static final String API_BASE_URI = \"https://espace-client-particuliers.enedis.fr/group/espace-particuliers/suivi-de-consommation\";\n-    private static final DateTimeFormatter API_DATE_FORMAT = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n     private static final int REFRESH_FIRST_HOUR_OF_DAY = 5;\n     private static final int REFRESH_INTERVAL_IN_MIN = 360;\n \n-    private final OkHttpClient client = new OkHttpClient.Builder().followRedirects(false)\n-            .cookieJar(new LinkyCookieJar()).build();\n-    private final Gson gson = new Gson();\n+    private final HttpClient httpClient;\n+    private final Gson gson;\n \n-    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable EnedisHttpApi enedisApi;\n     private final WeekFields weekFields;\n \n-    private final ExpiringDayCache<LinkyConsumptionData> cachedDaylyData;\n-    private final ExpiringDayCache<LinkyConsumptionData> cachedMonthlyData;\n-    private final ExpiringDayCache<LinkyConsumptionData> cachedYearlyData;\n+    private final ExpiringDayCache<Consumption> cachedDaylyData;\n+    private final ExpiringDayCache<Consumption> cachedPowerData;\n+    private final ExpiringDayCache<Consumption> cachedMonthlyData;\n+    private final ExpiringDayCache<Consumption> cachedYearlyData;\n+\n+    private @NonNullByDefault({}) String prmId;\n+    private @NonNullByDefault({}) String userId;\n \n-    public LinkyHandler(Thing thing, LocaleProvider localeProvider) {\n+    public LinkyHandler(Thing thing, LocaleProvider localeProvider, Gson gson, HttpClient httpClient) {\n         super(thing);\n+        this.gson = gson;\n+        this.httpClient = httpClient;\n+\n         this.weekFields = WeekFields.of(localeProvider.getLocale());\n-        this.cachedDaylyData = new ExpiringDayCache<LinkyConsumptionData>(\"daily cache\", REFRESH_FIRST_HOUR_OF_DAY,\n-                () -> {\n-                    final LocalDate today = LocalDate.now();\n-                    return getConsumptionData(DAILY, today.minusDays(13), today, true);\n-                });\n-        this.cachedMonthlyData = new ExpiringDayCache<LinkyConsumptionData>(\"monthly cache\", REFRESH_FIRST_HOUR_OF_DAY,\n-                () -> {\n-                    final LocalDate today = LocalDate.now();\n-                    return getConsumptionData(MONTHLY, today.withDayOfMonth(1).minusMonths(1), today, true);\n-                });\n-        this.cachedYearlyData = new ExpiringDayCache<LinkyConsumptionData>(\"yearly cache\", REFRESH_FIRST_HOUR_OF_DAY,\n-                () -> {\n-                    final LocalDate today = LocalDate.now();\n-                    return getConsumptionData(YEARLY, LocalDate.of(today.getYear() - 1, 1, 1), today, true);\n-                });\n+\n+        this.cachedDaylyData = new ExpiringDayCache<>(\"daily cache\", REFRESH_FIRST_HOUR_OF_DAY, () -> {\n+            LocalDate today = LocalDate.now();\n+            return getConsumptionData(today.minusDays(13), today);\n+        });\n+\n+        this.cachedPowerData = new ExpiringDayCache<>(\"power cache\", REFRESH_FIRST_HOUR_OF_DAY, () -> {\n+            LocalDate to = LocalDate.now().plusDays(1);\n+            LocalDate from = to.minusDays(2);\n+            return getPowerData(from, to);\n+        });\n+\n+        this.cachedMonthlyData = new ExpiringDayCache<>(\"monthly cache\", REFRESH_FIRST_HOUR_OF_DAY, () -> {\n+            LocalDate today = LocalDate.now();\n+            return getConsumptionData(today.withDayOfMonth(1).minusMonths(1), today);\n+        });\n+\n+        this.cachedYearlyData = new ExpiringDayCache<>(\"yearly cache\", REFRESH_FIRST_HOUR_OF_DAY, () -> {\n+            LocalDate today = LocalDate.now();\n+            return getConsumptionData(LocalDate.of(today.getYear() - 1, 1, 1), today);\n+        });\n     }\n \n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing Linky handler.\");\n         updateStatus(ThingStatus.UNKNOWN);\n-        scheduler.submit(this::login);\n-\n-        final LocalDateTime now = LocalDateTime.now();\n-        final LocalDateTime nextDayFirstTimeUpdate = now.plusDays(1).withHour(REFRESH_FIRST_HOUR_OF_DAY)\n-                .truncatedTo(ChronoUnit.HOURS);\n-        refreshJob = scheduler.scheduleWithFixedDelay(this::updateData,\n-                ChronoUnit.MINUTES.between(now, nextDayFirstTimeUpdate) % REFRESH_INTERVAL_IN_MIN + 1,\n-                REFRESH_INTERVAL_IN_MIN, TimeUnit.MINUTES);\n-    }\n \n-    private static Builder getLoginBodyBuilder() {\n-        return new FormBody.Builder().add(\"encoded\", \"true\").add(\"gx_charset\", \"UTF-8\").add(\"SunQueryParamsString\",\n-                Base64.getEncoder().encodeToString(\"realm=particuliers\".getBytes(StandardCharsets.UTF_8)));\n-    }\n+        LinkyConfiguration config = getConfigAs(LinkyConfiguration.class);\n+        scheduler.submit(() -> {\n+            try {\n+                enedisApi = new EnedisHttpApi(config, gson, httpClient);\n \n-    private synchronized boolean login() {\n-        logger.debug(\"login\");\n+                updateStatus(ThingStatus.ONLINE);\n \n-        LinkyConfiguration config = getConfigAs(LinkyConfiguration.class);\n-        Request requestLogin = new Request.Builder().url(LOGIN_BASE_URI)\n-                .post(getLoginBodyBuilder().add(\"IDToken1\", config.username).add(\"IDToken2\", config.password).build())\n-                .build();\n-        try (Response response = client.newCall(requestLogin).execute()) {\n-            if (response.isRedirect()) {\n-                logger.debug(\"Response status {} {} redirects to {}\", response.code(), response.message(),\n-                        response.header(\"Location\"));\n-            } else {\n-                logger.debug(\"Response status {} {}\", response.code(), response.message());\n+                if (thing.getProperties().isEmpty()) {\n+                    Map<String, String> properties = discoverAttributes();\n+                    updateProperties(properties);\n+                }\n+\n+                prmId = thing.getProperties().get(PRM_ID);\n+                userId = thing.getProperties().get(USER_ID);\n+\n+                final LocalDateTime now = LocalDateTime.now();\n+                final LocalDateTime nextDayFirstTimeUpdate = now.plusDays(1).withHour(REFRESH_FIRST_HOUR_OF_DAY)\n+                        .truncatedTo(ChronoUnit.HOURS);\n+\n+                refreshJob = scheduler.scheduleWithFixedDelay(this::updateData,\n+                        ChronoUnit.MINUTES.between(now, nextDayFirstTimeUpdate) % REFRESH_INTERVAL_IN_MIN + 1,\n+                        REFRESH_INTERVAL_IN_MIN, TimeUnit.MINUTES);", "originalCommit": "0ecfe0231c2ae9ad0833062337e6c2ac91c23e4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1MjI4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502252287", "bodyText": "Ok, clear and obvious, I'll apply, but IIRW, I've been asked on some other code review to use scheduler.submit to avoid having initialize() handling a long process.", "author": "clinique", "createdAt": "2020-10-09T07:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNzcyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502817720", "bodyText": "Ok, clear and obvious, I'll apply, but IIRW, I've been asked on some other code review to use scheduler.submit to avoid having initialize() handling a long process.\n\nThat would be the correct thing to do, yes. Https requests should not be done as part of initialization, but as part of an asynchronous task kicked off by initialization. Your original implementation was correct in that regard. My only real concern from your original implementation was that refreshJob was initialized asynchronously, but disposed synchronously. Your new implementation executes everything during initialize() which was not my intention to recommend and would very much like you to make it asynchronous again. I just want the refreshJob task to be created as part of initialize, but keep everything else asynchronous as it was before.", "author": "cpmeister", "createdAt": "2020-10-10T18:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/handler/LinkyHandler.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/handler/LinkyHandler.java\nindex 62f3c677cf..d4cb409b5c 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/handler/LinkyHandler.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/handler/LinkyHandler.java\n\n@@ -118,32 +118,33 @@ public class LinkyHandler extends BaseThingHandler {\n         updateStatus(ThingStatus.UNKNOWN);\n \n         LinkyConfiguration config = getConfigAs(LinkyConfiguration.class);\n-        scheduler.submit(() -> {\n-            try {\n-                enedisApi = new EnedisHttpApi(config, gson, httpClient);\n+        enedisApi = new EnedisHttpApi(config, gson, httpClient);\n \n-                updateStatus(ThingStatus.ONLINE);\n+        try {\n+            enedisApi.initialize();\n+            updateStatus(ThingStatus.ONLINE);\n \n-                if (thing.getProperties().isEmpty()) {\n-                    Map<String, String> properties = discoverAttributes();\n-                    updateProperties(properties);\n-                }\n+            if (thing.getProperties().isEmpty()) {\n+                Map<String, String> properties = discoverAttributes();\n+                updateProperties(properties);\n+            }\n \n-                prmId = thing.getProperties().get(PRM_ID);\n-                userId = thing.getProperties().get(USER_ID);\n+            prmId = thing.getProperties().get(PRM_ID);\n+            userId = thing.getProperties().get(USER_ID);\n \n-                final LocalDateTime now = LocalDateTime.now();\n-                final LocalDateTime nextDayFirstTimeUpdate = now.plusDays(1).withHour(REFRESH_FIRST_HOUR_OF_DAY)\n-                        .truncatedTo(ChronoUnit.HOURS);\n+            final LocalDateTime now = LocalDateTime.now();\n+            final LocalDateTime nextDayFirstTimeUpdate = now.plusDays(1).withHour(REFRESH_FIRST_HOUR_OF_DAY)\n+                    .truncatedTo(ChronoUnit.HOURS);\n \n-                refreshJob = scheduler.scheduleWithFixedDelay(this::updateData,\n-                        ChronoUnit.MINUTES.between(now, nextDayFirstTimeUpdate) % REFRESH_INTERVAL_IN_MIN + 1,\n-                        REFRESH_INTERVAL_IN_MIN, TimeUnit.MINUTES);\n+            updateData();\n \n-            } catch (LinkyException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::updateData,\n+                    ChronoUnit.MINUTES.between(now, nextDayFirstTimeUpdate) % REFRESH_INTERVAL_IN_MIN + 1,\n+                    REFRESH_INTERVAL_IN_MIN, TimeUnit.MINUTES);\n+\n+        } catch (LinkyException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        }\n     }\n \n     private Map<String, String> discoverAttributes() throws LinkyException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MDE2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r501960165", "bodyText": "Consider moving this logic to a separate initialize method for this class. It is good practice to separate construction/configuration logic from initialization logic.", "author": "cpmeister", "createdAt": "2020-10-08T19:24:33Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.linky.internal.api;\n+\n+import java.net.CookieStore;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.util.Fields;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.openhab.binding.linky.internal.LinkyConfiguration;\n+import org.openhab.binding.linky.internal.LinkyException;\n+import org.openhab.binding.linky.internal.dto.AuthData;\n+import org.openhab.binding.linky.internal.dto.AuthResult;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport.Consumption;\n+import org.openhab.binding.linky.internal.dto.PrmInfo;\n+import org.openhab.binding.linky.internal.dto.UserInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * {@link EnedisHttpApi} wraps the Enedis Webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EnedisHttpApi {\n+    private static final DateTimeFormatter API_DATE_FORMAT = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n+    private static final String URL_APPS_LINCS = \"https://apps.lincs.enedis.fr\";\n+    private static final String URL_MON_COMPTE = \"https://mon-compte.enedis.fr\";\n+    private static final String URL_ENEDIS_AUTHENTICATE = URL_APPS_LINCS\n+            + \"/authenticate?target=https://mon-compte-particulier.enedis.fr/suivi-de-mesure/\";\n+    private static final String URL_COOKIE = \"https://mon-compte-particulier.enedis.fr\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(EnedisHttpApi.class);\n+    private final Gson gson;\n+    private final HttpClient httpClient;\n+\n+    public EnedisHttpApi(LinkyConfiguration config, Gson gson, HttpClient httpClient) throws LinkyException {\n+        this.gson = gson;\n+        this.httpClient = httpClient;\n+\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n+\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            throw new LinkyException(\"Unable to start Jetty HttpClient\", e);\n+        }\n+        connect(config);", "originalCommit": "0ecfe0231c2ae9ad0833062337e6c2ac91c23e4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NDU3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502254579", "bodyText": "Done", "author": "clinique", "createdAt": "2020-10-09T08:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MDE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\nindex 3ed94b6f56..88034b14e9 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n\n@@ -62,23 +62,28 @@ public class EnedisHttpApi {\n     private final Logger logger = LoggerFactory.getLogger(EnedisHttpApi.class);\n     private final Gson gson;\n     private final HttpClient httpClient;\n+    private final LinkyConfiguration config;\n+    private boolean connected = false;\n \n-    public EnedisHttpApi(LinkyConfiguration config, Gson gson, HttpClient httpClient) throws LinkyException {\n+    public EnedisHttpApi(LinkyConfiguration config, Gson gson, HttpClient httpClient) {\n         this.gson = gson;\n         this.httpClient = httpClient;\n+        this.config = config;\n \n         httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n         httpClient.setFollowRedirects(false);\n+    }\n \n+    public void initialize() throws LinkyException {\n         try {\n             httpClient.start();\n         } catch (Exception e) {\n             throw new LinkyException(\"Unable to start Jetty HttpClient\", e);\n         }\n-        connect(config);\n+        connect();\n     }\n \n-    private void connect(LinkyConfiguration config) throws LinkyException {\n+    private void connect() throws LinkyException {\n         addCookie(LinkyConfiguration.INTERNAL_AUTH_ID, config.internalAuthId);\n \n         logger.debug(\"Starting login process for user : {}\", config.username);\n"}}, {"oid": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "url": "https://github.com/openhab/openhab-addons/commit/8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "message": "Code review and added disconnection logic.\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-10-09T09:06:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNzkyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502817927", "bodyText": "This code should be in initialize() instead.", "author": "cpmeister", "createdAt": "2020-10-10T18:24:49Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.linky.internal.api;\n+\n+import java.net.CookieStore;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.util.Fields;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.openhab.binding.linky.internal.LinkyConfiguration;\n+import org.openhab.binding.linky.internal.LinkyException;\n+import org.openhab.binding.linky.internal.dto.AuthData;\n+import org.openhab.binding.linky.internal.dto.AuthResult;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport.Consumption;\n+import org.openhab.binding.linky.internal.dto.PrmInfo;\n+import org.openhab.binding.linky.internal.dto.UserInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * {@link EnedisHttpApi} wraps the Enedis Webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EnedisHttpApi {\n+    private static final DateTimeFormatter API_DATE_FORMAT = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n+    private static final String URL_APPS_LINCS = \"https://apps.lincs.enedis.fr\";\n+    private static final String URL_MON_COMPTE = \"https://mon-compte.enedis.fr\";\n+    private static final String URL_ENEDIS_AUTHENTICATE = URL_APPS_LINCS\n+            + \"/authenticate?target=https://mon-compte-particulier.enedis.fr/suivi-de-mesure/\";\n+    private static final String URL_COOKIE = \"https://mon-compte-particulier.enedis.fr\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(EnedisHttpApi.class);\n+    private final Gson gson;\n+    private final HttpClient httpClient;\n+    private final LinkyConfiguration config;\n+    private boolean connected = false;\n+\n+    public EnedisHttpApi(LinkyConfiguration config, Gson gson, HttpClient httpClient) {\n+        this.gson = gson;\n+        this.httpClient = httpClient;\n+        this.config = config;\n+\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);", "originalCommit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d4593103c43b0daf9c98db8978670f6266bcd3c", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\nindex 88034b14e9..ba656ec641 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n\n@@ -69,12 +69,11 @@ public class EnedisHttpApi {\n         this.gson = gson;\n         this.httpClient = httpClient;\n         this.config = config;\n-\n-        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n-        httpClient.setFollowRedirects(false);\n     }\n \n     public void initialize() throws LinkyException {\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n         try {\n             httpClient.start();\n         } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MDUwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502890506", "bodyText": "I hope you are sure about this change ;)\nMaybe the idea was to handle the case of equal times.", "author": "lolodomo", "createdAt": "2020-10-11T09:31:39Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/ExpiringDayCache.java", "diffHunk": "@@ -111,7 +111,7 @@ public final synchronized void invalidateValue() {\n      * @return true if the value is expired\n      */\n     public boolean isExpired() {\n-        return !LocalDateTime.now().isBefore(expiresAt);\n+        return LocalDateTime.now().isAfter(expiresAt);", "originalCommit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MTY1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r503091654", "bodyText": "Reverted", "author": "clinique", "createdAt": "2020-10-12T07:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MDUwNg=="}], "type": "inlineReview", "revised_code": {"commit": "8d4593103c43b0daf9c98db8978670f6266bcd3c", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/ExpiringDayCache.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/ExpiringDayCache.java\nindex e906bc7f41..3d2720a43d 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/ExpiringDayCache.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/ExpiringDayCache.java\n\n@@ -111,7 +111,7 @@ public class ExpiringDayCache<V> {\n      * @return true if the value is expired\n      */\n     public boolean isExpired() {\n-        return LocalDateTime.now().isAfter(expiresAt);\n+        return !LocalDateTime.now().isBefore(expiresAt);\n     }\n \n     private LocalDateTime calcNextExpiresAt() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MTMwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502891300", "bodyText": "Not possible to use the standard naming convention ?", "author": "lolodomo", "createdAt": "2020-10-11T09:39:02Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/dto/UserInfo.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.linky.internal.dto;\n+\n+/**\n+ * The {@link UserInfo} holds informations about the user account\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+\n+public class UserInfo {\n+    public class UserProperties {\n+        public String av2_interne_id;\n+        public String av2_prenom;\n+        public String av2_mail;\n+        public String av2_nom;\n+        public String av2_infos_personnalisees;", "originalCommit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d4593103c43b0daf9c98db8978670f6266bcd3c", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/dto/UserInfo.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/dto/UserInfo.java\nindex d01beabafd..d3c42ee7e1 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/dto/UserInfo.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/dto/UserInfo.java\n\n@@ -12,6 +12,8 @@\n  */\n package org.openhab.binding.linky.internal.dto;\n \n+import com.google.gson.annotations.SerializedName;\n+\n /**\n  * The {@link UserInfo} holds informations about the user account\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MTkwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502891901", "bodyText": "No need to check if the match succeeded ?", "author": "lolodomo", "createdAt": "2020-10-11T09:44:56Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.linky.internal.api;\n+\n+import java.net.CookieStore;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.util.Fields;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.openhab.binding.linky.internal.LinkyConfiguration;\n+import org.openhab.binding.linky.internal.LinkyException;\n+import org.openhab.binding.linky.internal.dto.AuthData;\n+import org.openhab.binding.linky.internal.dto.AuthResult;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport.Consumption;\n+import org.openhab.binding.linky.internal.dto.PrmInfo;\n+import org.openhab.binding.linky.internal.dto.UserInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * {@link EnedisHttpApi} wraps the Enedis Webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EnedisHttpApi {\n+    private static final DateTimeFormatter API_DATE_FORMAT = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n+    private static final String URL_APPS_LINCS = \"https://apps.lincs.enedis.fr\";\n+    private static final String URL_MON_COMPTE = \"https://mon-compte.enedis.fr\";\n+    private static final String URL_ENEDIS_AUTHENTICATE = URL_APPS_LINCS\n+            + \"/authenticate?target=https://mon-compte-particulier.enedis.fr/suivi-de-mesure/\";\n+    private static final String URL_COOKIE = \"https://mon-compte-particulier.enedis.fr\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(EnedisHttpApi.class);\n+    private final Gson gson;\n+    private final HttpClient httpClient;\n+    private final LinkyConfiguration config;\n+    private boolean connected = false;\n+\n+    public EnedisHttpApi(LinkyConfiguration config, Gson gson, HttpClient httpClient) {\n+        this.gson = gson;\n+        this.httpClient = httpClient;\n+        this.config = config;\n+\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n+    }\n+\n+    public void initialize() throws LinkyException {\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            throw new LinkyException(\"Unable to start Jetty HttpClient\", e);\n+        }\n+        connect();\n+    }\n+\n+    private void connect() throws LinkyException {\n+        addCookie(LinkyConfiguration.INTERNAL_AUTH_ID, config.internalAuthId);\n+\n+        logger.debug(\"Starting login process for user : {}\", config.username);\n+\n+        try {\n+            logger.debug(\"Step 1 : getting authentification\");\n+            String data = getData(URL_ENEDIS_AUTHENTICATE);\n+\n+            logger.debug(\"Reception request SAML\");\n+            Document htmlDocument = Jsoup.parse(data);\n+            Element el = htmlDocument.select(\"form\").first();\n+            Element samlInput = el.select(\"input[name=SAMLRequest]\").first();\n+\n+            logger.debug(\"Step 2 : send SSO SAMLRequest\");\n+            ContentResponse result = httpClient.POST(el.attr(\"action\"))\n+                    .content(getFormContent(\"SAMLRequest\", samlInput.attr(\"value\"))).send();\n+            if (result.getStatus() != 302) {\n+                throw new LinkyException(\"Connection failed step 2\");\n+            }\n+\n+            logger.debug(\"Get the location and the reqID\");\n+            Pattern p = Pattern.compile(\"ReqID%(.*?)%26\");\n+            Matcher m = p.matcher(getLocation(result));\n+            m.find();", "originalCommit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d4593103c43b0daf9c98db8978670f6266bcd3c", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\nindex 88034b14e9..ba656ec641 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n\n@@ -69,12 +69,11 @@ public class EnedisHttpApi {\n         this.gson = gson;\n         this.httpClient = httpClient;\n         this.config = config;\n-\n-        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n-        httpClient.setFollowRedirects(false);\n     }\n \n     public void initialize() throws LinkyException {\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n         try {\n             httpClient.start();\n         } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MTk4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502891984", "bodyText": "Risk for NPE in authData", "author": "lolodomo", "createdAt": "2020-10-11T09:45:28Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.linky.internal.api;\n+\n+import java.net.CookieStore;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.util.Fields;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.openhab.binding.linky.internal.LinkyConfiguration;\n+import org.openhab.binding.linky.internal.LinkyException;\n+import org.openhab.binding.linky.internal.dto.AuthData;\n+import org.openhab.binding.linky.internal.dto.AuthResult;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport.Consumption;\n+import org.openhab.binding.linky.internal.dto.PrmInfo;\n+import org.openhab.binding.linky.internal.dto.UserInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * {@link EnedisHttpApi} wraps the Enedis Webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EnedisHttpApi {\n+    private static final DateTimeFormatter API_DATE_FORMAT = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n+    private static final String URL_APPS_LINCS = \"https://apps.lincs.enedis.fr\";\n+    private static final String URL_MON_COMPTE = \"https://mon-compte.enedis.fr\";\n+    private static final String URL_ENEDIS_AUTHENTICATE = URL_APPS_LINCS\n+            + \"/authenticate?target=https://mon-compte-particulier.enedis.fr/suivi-de-mesure/\";\n+    private static final String URL_COOKIE = \"https://mon-compte-particulier.enedis.fr\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(EnedisHttpApi.class);\n+    private final Gson gson;\n+    private final HttpClient httpClient;\n+    private final LinkyConfiguration config;\n+    private boolean connected = false;\n+\n+    public EnedisHttpApi(LinkyConfiguration config, Gson gson, HttpClient httpClient) {\n+        this.gson = gson;\n+        this.httpClient = httpClient;\n+        this.config = config;\n+\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n+    }\n+\n+    public void initialize() throws LinkyException {\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            throw new LinkyException(\"Unable to start Jetty HttpClient\", e);\n+        }\n+        connect();\n+    }\n+\n+    private void connect() throws LinkyException {\n+        addCookie(LinkyConfiguration.INTERNAL_AUTH_ID, config.internalAuthId);\n+\n+        logger.debug(\"Starting login process for user : {}\", config.username);\n+\n+        try {\n+            logger.debug(\"Step 1 : getting authentification\");\n+            String data = getData(URL_ENEDIS_AUTHENTICATE);\n+\n+            logger.debug(\"Reception request SAML\");\n+            Document htmlDocument = Jsoup.parse(data);\n+            Element el = htmlDocument.select(\"form\").first();\n+            Element samlInput = el.select(\"input[name=SAMLRequest]\").first();\n+\n+            logger.debug(\"Step 2 : send SSO SAMLRequest\");\n+            ContentResponse result = httpClient.POST(el.attr(\"action\"))\n+                    .content(getFormContent(\"SAMLRequest\", samlInput.attr(\"value\"))).send();\n+            if (result.getStatus() != 302) {\n+                throw new LinkyException(\"Connection failed step 2\");\n+            }\n+\n+            logger.debug(\"Get the location and the reqID\");\n+            Pattern p = Pattern.compile(\"ReqID%(.*?)%26\");\n+            Matcher m = p.matcher(getLocation(result));\n+            m.find();\n+\n+            String reqId = m.group(1);\n+            String url = URL_MON_COMPTE\n+                    + \"/auth/json/authenticate?realm=/enedis&forward=true&spEntityID=SP-ODW-PROD&goto=/auth/SSOPOST/metaAlias/enedis/providerIDP?ReqID%\"\n+                    + reqId\n+                    + \"%26index%3Dnull%26acsURL%3Dhttps://apps.lincs.enedis.fr/saml/SSO%26spEntityID%3DSP-ODW-PROD%26binding%3Durn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&AMAuthCookie=\";\n+\n+            logger.debug(\n+                    \"Step 3 : auth1 - retrieve the template, thanks to cookie internalAuthId, user is already set\");\n+            result = httpClient.POST(url).send();\n+            if (result.getStatus() != 200) {\n+                throw new LinkyException(\"Connection failed step 3 - auth1 : \" + result.getContentAsString());\n+            }\n+\n+            AuthData authData = gson.fromJson(result.getContentAsString(), AuthData.class);\n+            if (!config.username.contentEquals(authData.callbacks.get(0).input.get(0).valueAsString())) {", "originalCommit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d4593103c43b0daf9c98db8978670f6266bcd3c", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\nindex 88034b14e9..ba656ec641 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n\n@@ -69,12 +69,11 @@ public class EnedisHttpApi {\n         this.gson = gson;\n         this.httpClient = httpClient;\n         this.config = config;\n-\n-        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n-        httpClient.setFollowRedirects(false);\n     }\n \n     public void initialize() throws LinkyException {\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n         try {\n             httpClient.start();\n         } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MjAxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502892012", "bodyText": "Risk for NPE in authData", "author": "lolodomo", "createdAt": "2020-10-11T09:45:48Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.linky.internal.api;\n+\n+import java.net.CookieStore;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.util.Fields;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.openhab.binding.linky.internal.LinkyConfiguration;\n+import org.openhab.binding.linky.internal.LinkyException;\n+import org.openhab.binding.linky.internal.dto.AuthData;\n+import org.openhab.binding.linky.internal.dto.AuthResult;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport.Consumption;\n+import org.openhab.binding.linky.internal.dto.PrmInfo;\n+import org.openhab.binding.linky.internal.dto.UserInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * {@link EnedisHttpApi} wraps the Enedis Webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EnedisHttpApi {\n+    private static final DateTimeFormatter API_DATE_FORMAT = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n+    private static final String URL_APPS_LINCS = \"https://apps.lincs.enedis.fr\";\n+    private static final String URL_MON_COMPTE = \"https://mon-compte.enedis.fr\";\n+    private static final String URL_ENEDIS_AUTHENTICATE = URL_APPS_LINCS\n+            + \"/authenticate?target=https://mon-compte-particulier.enedis.fr/suivi-de-mesure/\";\n+    private static final String URL_COOKIE = \"https://mon-compte-particulier.enedis.fr\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(EnedisHttpApi.class);\n+    private final Gson gson;\n+    private final HttpClient httpClient;\n+    private final LinkyConfiguration config;\n+    private boolean connected = false;\n+\n+    public EnedisHttpApi(LinkyConfiguration config, Gson gson, HttpClient httpClient) {\n+        this.gson = gson;\n+        this.httpClient = httpClient;\n+        this.config = config;\n+\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n+    }\n+\n+    public void initialize() throws LinkyException {\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            throw new LinkyException(\"Unable to start Jetty HttpClient\", e);\n+        }\n+        connect();\n+    }\n+\n+    private void connect() throws LinkyException {\n+        addCookie(LinkyConfiguration.INTERNAL_AUTH_ID, config.internalAuthId);\n+\n+        logger.debug(\"Starting login process for user : {}\", config.username);\n+\n+        try {\n+            logger.debug(\"Step 1 : getting authentification\");\n+            String data = getData(URL_ENEDIS_AUTHENTICATE);\n+\n+            logger.debug(\"Reception request SAML\");\n+            Document htmlDocument = Jsoup.parse(data);\n+            Element el = htmlDocument.select(\"form\").first();\n+            Element samlInput = el.select(\"input[name=SAMLRequest]\").first();\n+\n+            logger.debug(\"Step 2 : send SSO SAMLRequest\");\n+            ContentResponse result = httpClient.POST(el.attr(\"action\"))\n+                    .content(getFormContent(\"SAMLRequest\", samlInput.attr(\"value\"))).send();\n+            if (result.getStatus() != 302) {\n+                throw new LinkyException(\"Connection failed step 2\");\n+            }\n+\n+            logger.debug(\"Get the location and the reqID\");\n+            Pattern p = Pattern.compile(\"ReqID%(.*?)%26\");\n+            Matcher m = p.matcher(getLocation(result));\n+            m.find();\n+\n+            String reqId = m.group(1);\n+            String url = URL_MON_COMPTE\n+                    + \"/auth/json/authenticate?realm=/enedis&forward=true&spEntityID=SP-ODW-PROD&goto=/auth/SSOPOST/metaAlias/enedis/providerIDP?ReqID%\"\n+                    + reqId\n+                    + \"%26index%3Dnull%26acsURL%3Dhttps://apps.lincs.enedis.fr/saml/SSO%26spEntityID%3DSP-ODW-PROD%26binding%3Durn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&AMAuthCookie=\";\n+\n+            logger.debug(\n+                    \"Step 3 : auth1 - retrieve the template, thanks to cookie internalAuthId, user is already set\");\n+            result = httpClient.POST(url).send();\n+            if (result.getStatus() != 200) {\n+                throw new LinkyException(\"Connection failed step 3 - auth1 : \" + result.getContentAsString());\n+            }\n+\n+            AuthData authData = gson.fromJson(result.getContentAsString(), AuthData.class);\n+            if (!config.username.contentEquals(authData.callbacks.get(0).input.get(0).valueAsString())) {\n+                throw new LinkyException(\"Authentication error, the authentication_cookie is probably wrong\");\n+            }\n+\n+            authData.callbacks.get(1).input.get(0).value = config.password;", "originalCommit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d4593103c43b0daf9c98db8978670f6266bcd3c", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\nindex 88034b14e9..ba656ec641 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n\n@@ -69,12 +69,11 @@ public class EnedisHttpApi {\n         this.gson = gson;\n         this.httpClient = httpClient;\n         this.config = config;\n-\n-        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n-        httpClient.setFollowRedirects(false);\n     }\n \n     public void initialize() throws LinkyException {\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n         try {\n             httpClient.start();\n         } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MjI0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502892241", "bodyText": "Line doubled", "author": "lolodomo", "createdAt": "2020-10-11T09:48:10Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.linky.internal.api;\n+\n+import java.net.CookieStore;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.util.Fields;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.openhab.binding.linky.internal.LinkyConfiguration;\n+import org.openhab.binding.linky.internal.LinkyException;\n+import org.openhab.binding.linky.internal.dto.AuthData;\n+import org.openhab.binding.linky.internal.dto.AuthResult;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport.Consumption;\n+import org.openhab.binding.linky.internal.dto.PrmInfo;\n+import org.openhab.binding.linky.internal.dto.UserInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * {@link EnedisHttpApi} wraps the Enedis Webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EnedisHttpApi {\n+    private static final DateTimeFormatter API_DATE_FORMAT = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n+    private static final String URL_APPS_LINCS = \"https://apps.lincs.enedis.fr\";\n+    private static final String URL_MON_COMPTE = \"https://mon-compte.enedis.fr\";\n+    private static final String URL_ENEDIS_AUTHENTICATE = URL_APPS_LINCS\n+            + \"/authenticate?target=https://mon-compte-particulier.enedis.fr/suivi-de-mesure/\";\n+    private static final String URL_COOKIE = \"https://mon-compte-particulier.enedis.fr\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(EnedisHttpApi.class);\n+    private final Gson gson;\n+    private final HttpClient httpClient;\n+    private final LinkyConfiguration config;\n+    private boolean connected = false;\n+\n+    public EnedisHttpApi(LinkyConfiguration config, Gson gson, HttpClient httpClient) {\n+        this.gson = gson;\n+        this.httpClient = httpClient;\n+        this.config = config;\n+\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n+    }\n+\n+    public void initialize() throws LinkyException {\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            throw new LinkyException(\"Unable to start Jetty HttpClient\", e);\n+        }\n+        connect();\n+    }\n+\n+    private void connect() throws LinkyException {\n+        addCookie(LinkyConfiguration.INTERNAL_AUTH_ID, config.internalAuthId);\n+\n+        logger.debug(\"Starting login process for user : {}\", config.username);\n+\n+        try {\n+            logger.debug(\"Step 1 : getting authentification\");\n+            String data = getData(URL_ENEDIS_AUTHENTICATE);\n+\n+            logger.debug(\"Reception request SAML\");\n+            Document htmlDocument = Jsoup.parse(data);\n+            Element el = htmlDocument.select(\"form\").first();\n+            Element samlInput = el.select(\"input[name=SAMLRequest]\").first();\n+\n+            logger.debug(\"Step 2 : send SSO SAMLRequest\");\n+            ContentResponse result = httpClient.POST(el.attr(\"action\"))\n+                    .content(getFormContent(\"SAMLRequest\", samlInput.attr(\"value\"))).send();\n+            if (result.getStatus() != 302) {\n+                throw new LinkyException(\"Connection failed step 2\");\n+            }\n+\n+            logger.debug(\"Get the location and the reqID\");\n+            Pattern p = Pattern.compile(\"ReqID%(.*?)%26\");\n+            Matcher m = p.matcher(getLocation(result));\n+            m.find();\n+\n+            String reqId = m.group(1);\n+            String url = URL_MON_COMPTE\n+                    + \"/auth/json/authenticate?realm=/enedis&forward=true&spEntityID=SP-ODW-PROD&goto=/auth/SSOPOST/metaAlias/enedis/providerIDP?ReqID%\"\n+                    + reqId\n+                    + \"%26index%3Dnull%26acsURL%3Dhttps://apps.lincs.enedis.fr/saml/SSO%26spEntityID%3DSP-ODW-PROD%26binding%3Durn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&AMAuthCookie=\";\n+\n+            logger.debug(\n+                    \"Step 3 : auth1 - retrieve the template, thanks to cookie internalAuthId, user is already set\");\n+            result = httpClient.POST(url).send();\n+            if (result.getStatus() != 200) {\n+                throw new LinkyException(\"Connection failed step 3 - auth1 : \" + result.getContentAsString());\n+            }\n+\n+            AuthData authData = gson.fromJson(result.getContentAsString(), AuthData.class);\n+            if (!config.username.contentEquals(authData.callbacks.get(0).input.get(0).valueAsString())) {\n+                throw new LinkyException(\"Authentication error, the authentication_cookie is probably wrong\");\n+            }\n+\n+            authData.callbacks.get(1).input.get(0).value = config.password;\n+            url = \"https://mon-compte.enedis.fr/auth/json/authenticate?realm=/enedis&spEntityID=SP-ODW-PROD&goto=/auth/SSOPOST/metaAlias/enedis/providerIDP?ReqID%\"\n+                    + reqId\n+                    + \"%26index%3Dnull%26acsURL%3Dhttps://apps.lincs.enedis.fr/saml/SSO%26spEntityID%3DSP-ODW-PROD%26binding%3Durn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&AMAuthCookie=\";\n+\n+            logger.debug(\"Step 3 : auth2 - send the auth data\");\n+            result = httpClient.POST(url).header(HttpHeader.CONTENT_TYPE, \"application/json\")\n+                    .content(new StringContentProvider(gson.toJson(authData))).send();\n+            if (result.getStatus() != 200) {\n+                throw new LinkyException(\"Connection failed step 3 - auth2 : \" + result.getContentAsString());\n+            }\n+\n+            AuthResult authResult = gson.fromJson(result.getContentAsString(), AuthResult.class);\n+            logger.debug(\"Add the tokenId cookie\");\n+            addCookie(\"enedisExt\", authResult.tokenId);\n+\n+            logger.debug(\"Step 4 : retrieve the SAMLresponse\");\n+            data = getData(URL_MON_COMPTE + \"/\" + authResult.successUrl);\n+            htmlDocument = Jsoup.parse(data);\n+            el = htmlDocument.select(\"form\").first();\n+            samlInput = el.select(\"input[name=SAMLResponse]\").first();\n+\n+            logger.debug(\"Step 5 : post the SAMLresponse to finish the authentication\");\n+            result = httpClient.POST(el.attr(\"action\")).content(getFormContent(\"SAMLResponse\", samlInput.attr(\"value\")))\n+                    .send();\n+            if (result.getStatus() != 302) {\n+                throw new LinkyException(\"Connection failed step 5\");\n+            }\n+            connected = true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new LinkyException(\"Error opening connection with Enedis webservice\", e);\n+        }\n+    }\n+\n+    public String getLocation(ContentResponse response) {\n+        return response.getHeaders().get(HttpHeader.LOCATION);\n+    }\n+\n+    public void disconnect() throws LinkyException {\n+        if (connected) {\n+            try { // Three times in a row to get disconnected\n+                String location = getLocation(httpClient.GET(URL_APPS_LINCS + \"/logout\"));\n+                location = getLocation(httpClient.GET(location));\n+                location = getLocation(httpClient.GET(location));", "originalCommit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5ODUwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r503098507", "bodyText": "This is deliberate, Three URLs have to be called to properly log out. A comment is present just above on this.", "author": "clinique", "createdAt": "2020-10-12T07:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MjI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8d4593103c43b0daf9c98db8978670f6266bcd3c", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\nindex 88034b14e9..ba656ec641 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n\n@@ -69,12 +69,11 @@ public class EnedisHttpApi {\n         this.gson = gson;\n         this.httpClient = httpClient;\n         this.config = config;\n-\n-        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n-        httpClient.setFollowRedirects(false);\n     }\n \n     public void initialize() throws LinkyException {\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n         try {\n             httpClient.start();\n         } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MjcxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8678#discussion_r502892710", "bodyText": "The method is apparently not used only for retrieving initial information.", "author": "lolodomo", "createdAt": "2020-10-11T09:52:22Z", "path": "bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.linky.internal.api;\n+\n+import java.net.CookieStore;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.util.Fields;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.openhab.binding.linky.internal.LinkyConfiguration;\n+import org.openhab.binding.linky.internal.LinkyException;\n+import org.openhab.binding.linky.internal.dto.AuthData;\n+import org.openhab.binding.linky.internal.dto.AuthResult;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport;\n+import org.openhab.binding.linky.internal.dto.ConsumptionReport.Consumption;\n+import org.openhab.binding.linky.internal.dto.PrmInfo;\n+import org.openhab.binding.linky.internal.dto.UserInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * {@link EnedisHttpApi} wraps the Enedis Webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EnedisHttpApi {\n+    private static final DateTimeFormatter API_DATE_FORMAT = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n+    private static final String URL_APPS_LINCS = \"https://apps.lincs.enedis.fr\";\n+    private static final String URL_MON_COMPTE = \"https://mon-compte.enedis.fr\";\n+    private static final String URL_ENEDIS_AUTHENTICATE = URL_APPS_LINCS\n+            + \"/authenticate?target=https://mon-compte-particulier.enedis.fr/suivi-de-mesure/\";\n+    private static final String URL_COOKIE = \"https://mon-compte-particulier.enedis.fr\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(EnedisHttpApi.class);\n+    private final Gson gson;\n+    private final HttpClient httpClient;\n+    private final LinkyConfiguration config;\n+    private boolean connected = false;\n+\n+    public EnedisHttpApi(LinkyConfiguration config, Gson gson, HttpClient httpClient) {\n+        this.gson = gson;\n+        this.httpClient = httpClient;\n+        this.config = config;\n+\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n+    }\n+\n+    public void initialize() throws LinkyException {\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            throw new LinkyException(\"Unable to start Jetty HttpClient\", e);\n+        }\n+        connect();\n+    }\n+\n+    private void connect() throws LinkyException {\n+        addCookie(LinkyConfiguration.INTERNAL_AUTH_ID, config.internalAuthId);\n+\n+        logger.debug(\"Starting login process for user : {}\", config.username);\n+\n+        try {\n+            logger.debug(\"Step 1 : getting authentification\");\n+            String data = getData(URL_ENEDIS_AUTHENTICATE);\n+\n+            logger.debug(\"Reception request SAML\");\n+            Document htmlDocument = Jsoup.parse(data);\n+            Element el = htmlDocument.select(\"form\").first();\n+            Element samlInput = el.select(\"input[name=SAMLRequest]\").first();\n+\n+            logger.debug(\"Step 2 : send SSO SAMLRequest\");\n+            ContentResponse result = httpClient.POST(el.attr(\"action\"))\n+                    .content(getFormContent(\"SAMLRequest\", samlInput.attr(\"value\"))).send();\n+            if (result.getStatus() != 302) {\n+                throw new LinkyException(\"Connection failed step 2\");\n+            }\n+\n+            logger.debug(\"Get the location and the reqID\");\n+            Pattern p = Pattern.compile(\"ReqID%(.*?)%26\");\n+            Matcher m = p.matcher(getLocation(result));\n+            m.find();\n+\n+            String reqId = m.group(1);\n+            String url = URL_MON_COMPTE\n+                    + \"/auth/json/authenticate?realm=/enedis&forward=true&spEntityID=SP-ODW-PROD&goto=/auth/SSOPOST/metaAlias/enedis/providerIDP?ReqID%\"\n+                    + reqId\n+                    + \"%26index%3Dnull%26acsURL%3Dhttps://apps.lincs.enedis.fr/saml/SSO%26spEntityID%3DSP-ODW-PROD%26binding%3Durn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&AMAuthCookie=\";\n+\n+            logger.debug(\n+                    \"Step 3 : auth1 - retrieve the template, thanks to cookie internalAuthId, user is already set\");\n+            result = httpClient.POST(url).send();\n+            if (result.getStatus() != 200) {\n+                throw new LinkyException(\"Connection failed step 3 - auth1 : \" + result.getContentAsString());\n+            }\n+\n+            AuthData authData = gson.fromJson(result.getContentAsString(), AuthData.class);\n+            if (!config.username.contentEquals(authData.callbacks.get(0).input.get(0).valueAsString())) {\n+                throw new LinkyException(\"Authentication error, the authentication_cookie is probably wrong\");\n+            }\n+\n+            authData.callbacks.get(1).input.get(0).value = config.password;\n+            url = \"https://mon-compte.enedis.fr/auth/json/authenticate?realm=/enedis&spEntityID=SP-ODW-PROD&goto=/auth/SSOPOST/metaAlias/enedis/providerIDP?ReqID%\"\n+                    + reqId\n+                    + \"%26index%3Dnull%26acsURL%3Dhttps://apps.lincs.enedis.fr/saml/SSO%26spEntityID%3DSP-ODW-PROD%26binding%3Durn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&AMAuthCookie=\";\n+\n+            logger.debug(\"Step 3 : auth2 - send the auth data\");\n+            result = httpClient.POST(url).header(HttpHeader.CONTENT_TYPE, \"application/json\")\n+                    .content(new StringContentProvider(gson.toJson(authData))).send();\n+            if (result.getStatus() != 200) {\n+                throw new LinkyException(\"Connection failed step 3 - auth2 : \" + result.getContentAsString());\n+            }\n+\n+            AuthResult authResult = gson.fromJson(result.getContentAsString(), AuthResult.class);\n+            logger.debug(\"Add the tokenId cookie\");\n+            addCookie(\"enedisExt\", authResult.tokenId);\n+\n+            logger.debug(\"Step 4 : retrieve the SAMLresponse\");\n+            data = getData(URL_MON_COMPTE + \"/\" + authResult.successUrl);\n+            htmlDocument = Jsoup.parse(data);\n+            el = htmlDocument.select(\"form\").first();\n+            samlInput = el.select(\"input[name=SAMLResponse]\").first();\n+\n+            logger.debug(\"Step 5 : post the SAMLresponse to finish the authentication\");\n+            result = httpClient.POST(el.attr(\"action\")).content(getFormContent(\"SAMLResponse\", samlInput.attr(\"value\")))\n+                    .send();\n+            if (result.getStatus() != 302) {\n+                throw new LinkyException(\"Connection failed step 5\");\n+            }\n+            connected = true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new LinkyException(\"Error opening connection with Enedis webservice\", e);\n+        }\n+    }\n+\n+    public String getLocation(ContentResponse response) {\n+        return response.getHeaders().get(HttpHeader.LOCATION);\n+    }\n+\n+    public void disconnect() throws LinkyException {\n+        if (connected) {\n+            try { // Three times in a row to get disconnected\n+                String location = getLocation(httpClient.GET(URL_APPS_LINCS + \"/logout\"));\n+                location = getLocation(httpClient.GET(location));\n+                location = getLocation(httpClient.GET(location));\n+                CookieStore cookieStore = httpClient.getCookieStore();\n+                cookieStore.removeAll();\n+                connected = false;\n+            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                throw new LinkyException(\"Error while disconnecting from Enedis webservice\", e);\n+            }\n+        }\n+    }\n+\n+    public void dispose() throws LinkyException {\n+        try {\n+            disconnect();\n+            httpClient.stop();\n+        } catch (Exception e) {\n+            throw new LinkyException(\"Error stopping Jetty client\", e);\n+        }\n+    }\n+\n+    private void addCookie(String key, String value) {\n+        CookieStore cookieStore = httpClient.getCookieStore();\n+        HttpCookie cookie = new HttpCookie(key, value);\n+        cookie.setDomain(\".enedis.fr\");\n+        cookie.setPath(\"/\");\n+        cookieStore.add(URI.create(URL_COOKIE), cookie);\n+    }\n+\n+    private FormContentProvider getFormContent(String fieldName, String fieldValue) {\n+        Fields fields = new Fields();\n+        fields.put(fieldName, fieldValue);\n+        return new FormContentProvider(fields);\n+    }\n+\n+    private String getData(String url) throws LinkyException {\n+        try {\n+            ContentResponse result = httpClient.GET(url);\n+            if (result.getStatus() != 200) {\n+                throw new LinkyException(String.format(\"Error requesting '%s' : %s\", url, result.getContentAsString()));\n+            }\n+            return result.getContentAsString();\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            throw new LinkyException(\"Error getting initial informations\", e);", "originalCommit": "8e558527cd572f3b5e2962ec2e5f7d677fa0b473", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d4593103c43b0daf9c98db8978670f6266bcd3c", "chunk": "diff --git a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\nindex 88034b14e9..ba656ec641 100644\n--- a/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n+++ b/bundles/org.openhab.binding.linky/src/main/java/org/openhab/binding/linky/internal/api/EnedisHttpApi.java\n\n@@ -69,12 +69,11 @@ public class EnedisHttpApi {\n         this.gson = gson;\n         this.httpClient = httpClient;\n         this.config = config;\n-\n-        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n-        httpClient.setFollowRedirects(false);\n     }\n \n     public void initialize() throws LinkyException {\n+        httpClient.getSslContextFactory().setExcludeCipherSuites(new String[0]);\n+        httpClient.setFollowRedirects(false);\n         try {\n             httpClient.start();\n         } catch (Exception e) {\n"}}, {"oid": "8d4593103c43b0daf9c98db8978670f6266bcd3c", "url": "https://github.com/openhab/openhab-addons/commit/8d4593103c43b0daf9c98db8978670f6266bcd3c", "message": "Adressing code review comments\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-10-12T07:50:01Z", "type": "commit"}]}