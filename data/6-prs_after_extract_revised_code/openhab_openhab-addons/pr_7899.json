{"pr_number": 7899, "pr_title": "[nzwateralerts] New Zealand Water Alerts Binding initial contribution", "pr_createdAt": "2020-06-12T01:26:45Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7899", "timeline": [{"oid": "5a09eb8d46b09af8f3dc60391d65d9181f28fdd5", "url": "https://github.com/openhab/openhab-addons/commit/5a09eb8d46b09af8f3dc60391d65d9181f28fdd5", "message": "Add nz water level alerts binding.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-06-12T01:27:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MzE2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r439163168", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String pattern = \"vc_text_separator.*?<span>(.*?)<\\\\/span>.*?water-level-([0-4]).*?\";\n          \n          \n            \n                private Pattern regex = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n          \n          \n            \n                private static final String pattern = \"vc_text_separator.*?<span>(.*?)<\\\\/span>.*?water-level-([0-4]).*?\";\n          \n          \n            \n                private static final Pattern regex = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);", "author": "cpmeister", "createdAt": "2020-06-12T01:42:56Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/BeWaterWise.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.api;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BeWaterWise} class contains the logic to get data the SmartWater.org.nz website.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BeWaterWise implements WaterWebService {\n+    private final Logger logger = LoggerFactory.getLogger(BeWaterWise.class);\n+\n+    private static final String HOSTNAME = \"https://bewaterwise.org.nz\";\n+    private static final String REGION_FARNORTH = \"/current-water-levels_far-north/\";\n+    private static final String REGION_WHANGAREI = \"/current-water-levels_whangarei/\";\n+    private static final String REGION_KAIPARA = \"/current-water-levels_kaipara/\";\n+\n+    private String pattern = \"vc_text_separator.*?<span>(.*?)<\\\\/span>.*?water-level-([0-4]).*?\";\n+    private Pattern regex = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);", "originalCommit": "5a09eb8d46b09af8f3dc60391d65d9181f28fdd5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58457d6094570d5f8e1b3749861270eb5849989d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/BeWaterWise.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/BeWaterWise.java\nindex 7b6093e832..472ea85f5e 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/BeWaterWise.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/BeWaterWise.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2019 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MzI3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r439163272", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String pattern = \"\\\"waterstat\\\".*?<p>.*?at (.*?) Restrictions.*?</div>\";\n          \n          \n            \n                private Pattern regex = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n          \n          \n            \n                private static final String pattern = \"\\\"waterstat\\\".*?<p>.*?at (.*?) Restrictions.*?</div>\";\n          \n          \n            \n                private static final Pattern regex = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);", "author": "cpmeister", "createdAt": "2020-06-12T01:43:23Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/NapierCityCouncil.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.api;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NapierCityCouncil} class contains the logic to get data the www.napier.govt.nz website.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NapierCityCouncil implements WaterWebService {\n+    private final Logger logger = LoggerFactory.getLogger(NapierCityCouncil.class);\n+\n+    private static final String HOSTNAME = \"https://www.napier.govt.nz\";\n+    private static final String REGION_NAPIER = \"/services/water/water-restrictions/\";\n+\n+    private String pattern = \"\\\"waterstat\\\".*?<p>.*?at (.*?) Restrictions.*?</div>\";\n+    private Pattern regex = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);", "originalCommit": "5a09eb8d46b09af8f3dc60391d65d9181f28fdd5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58457d6094570d5f8e1b3749861270eb5849989d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/NapierCityCouncil.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/NapierCityCouncil.java\nindex b22a5712ee..62ee45b1c5 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/NapierCityCouncil.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/NapierCityCouncil.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2019 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MzM4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r439163382", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String pattern = \"/assets/Alert-Level-Images/water-alert-([1-4]|no)-large.svg.*?\";\n          \n          \n            \n                private Pattern regex = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n          \n          \n            \n                private static final String pattern = \"/assets/Alert-Level-Images/water-alert-([1-4]|no)-large.svg.*?\";\n          \n          \n            \n                private static final Pattern regex = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);", "author": "cpmeister", "createdAt": "2020-06-12T01:43:51Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/SmartWater.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.api;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SmartWater} class contains the logic to get data the SmartWater.org.nz website.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartWater implements WaterWebService {\n+    private final Logger logger = LoggerFactory.getLogger(SmartWater.class);\n+\n+    private static final String HOSTNAME = \"http://www.smartwater.org.nz\";\n+    private static final String REGION_HAMILTON = \"/alert-levels/hamilton-city\";\n+    private static final String REGION_WAIKATO = \"/alert-levels/waikato-district-council\";\n+    private static final String REGION_WAIPA = \"/alert-levels/waipa-district-council\";\n+\n+    private String pattern = \"/assets/Alert-Level-Images/water-alert-([1-4]|no)-large.svg.*?\";\n+    private Pattern regex = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);", "originalCommit": "5a09eb8d46b09af8f3dc60391d65d9181f28fdd5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58457d6094570d5f8e1b3749861270eb5849989d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/SmartWater.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/SmartWater.java\nindex 321650632c..d2a0ee8fd5 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/SmartWater.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/SmartWater.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2019 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MzkyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r439163929", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @Nullable HttpClient httpClient = null;\n          \n          \n            \n                private @Nullable WaterWebService service = null;\n          \n          \n            \n                \n          \n          \n            \n                private String webService = \"\";\n          \n          \n            \n                private String region = \"\";\n          \n          \n            \n                private String area = \"\";\n          \n          \n            \n                private final HttpClient httpClient;\n          \n          \n            \n                private final String webService;\n          \n          \n            \n                private final String region;\n          \n          \n            \n                private final String area;\n          \n          \n            \n                \n          \n          \n            \n                private @Nullable WaterWebService service = null;", "author": "cpmeister", "createdAt": "2020-06-12T01:46:02Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.api;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingConstants.*;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * The {@link WebClient} class contains the logic to get data from a URL.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WaterAlertWebClient {\n+    private final Logger logger = LoggerFactory.getLogger(WaterAlertWebClient.class);\n+\n+    private @Nullable HttpClient httpClient = null;\n+    private @Nullable WaterWebService service = null;\n+    \n+    private String webService = \"\";\n+    private String region = \"\";\n+    private String area = \"\";", "originalCommit": "5a09eb8d46b09af8f3dc60391d65d9181f28fdd5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58457d6094570d5f8e1b3749861270eb5849989d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\nindex ba5c0da6f4..aad4ff9dd6 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2019 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2NTMzMw==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r439165333", "bodyText": "I suggest populating the httpClient field in the NZWaterAlertsHandlerFactory constructor by just passing in HttpClientFactory as a @Reference parameter and adding @Activate above the constructor.\nDoing this would allow you to make the httpClient field non-null and final and thus allow it to be non-null and final in the handler as well.", "author": "cpmeister", "createdAt": "2020-06-12T01:52:09Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.handler;\n+\n+import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link NZWaterAlertsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.nzwateralerts\", service = ThingHandlerFactory.class)\n+public class NZWaterAlertsHandlerFactory extends BaseThingHandlerFactory {\n+    @Nullable HttpClient httpClient = null;\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_WATERALERT);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (THING_TYPE_WATERALERT.equals(thingTypeUID)) {\n+            return new NZWaterAlertsHandler(thing, httpClient);\n+        }\n+\n+        return null;\n+    }\n+\n+    @Reference\n+    protected void setHttpClientFactory(HttpClientFactory httpClientFactory) {", "originalCommit": "5a09eb8d46b09af8f3dc60391d65d9181f28fdd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY1NDIzNg==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r480654236", "bodyText": "Can you give me an example of how to do this please? I only work in Java for openHAB so not sure how to implement this.", "author": "Cossey", "createdAt": "2020-09-01T02:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2NTMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwNTgyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r481505829", "bodyText": "@cpmeister when you are able to. Cheers", "author": "Cossey", "createdAt": "2020-09-02T00:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2NTMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0MzUwNg==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r481543506", "bodyText": "Got it sorted.", "author": "Cossey", "createdAt": "2020-09-02T01:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2NTMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "58457d6094570d5f8e1b3749861270eb5849989d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandlerFactory.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandlerFactory.java\nindex 7e71f00200..9ee2d40f4b 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandlerFactory.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandlerFactory.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2019 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"oid": "58457d6094570d5f8e1b3749861270eb5849989d", "url": "https://github.com/openhab/openhab-addons/commit/58457d6094570d5f8e1b3749861270eb5849989d", "message": "Code tidy up.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-01T02:30:52Z", "type": "forcePushed"}, {"oid": "c2c5e00345b1d5082ccb88377f1898827ba36cfd", "url": "https://github.com/openhab/openhab-addons/commit/c2c5e00345b1d5082ccb88377f1898827ba36cfd", "message": "HttpClient shifted to OSGI bound service.\nCode tidy up based on change requests.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-03T09:01:00Z", "type": "forcePushed"}, {"oid": "267aca36c96b438a9fccf71f5d4b1a0e53050cf6", "url": "https://github.com/openhab/openhab-addons/commit/267aca36c96b438a9fccf71f5d4b1a0e53050cf6", "message": "HttpClient shifted to OSGI bound service.\nCode tidy up based on change requests.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-06T07:07:43Z", "type": "forcePushed"}, {"oid": "7b97fb6d9fd5f9cdd9a0d669356665f534c83c11", "url": "https://github.com/openhab/openhab-addons/commit/7b97fb6d9fd5f9cdd9a0d669356665f534c83c11", "message": "Fix spotless violations.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-06T07:21:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwMDI2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484100268", "bodyText": "Can your remove this?", "author": "fwolter", "createdAt": "2020-09-06T18:28:06Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/NZWaterAlertsConfiguration.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link NZWaterAlertsConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NZWaterAlertsConfiguration {\n+\n+    /**\n+     * Sample configuration parameter. Replace with your own.\n+     */", "originalCommit": "7b97fb6d9fd5f9cdd9a0d669356665f534c83c11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246b07d9e689709b5e98c8566e021c70bbcb529d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/NZWaterAlertsConfiguration.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/NZWaterAlertsConfiguration.java\nindex 812722de11..ef06c87e10 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/NZWaterAlertsConfiguration.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/NZWaterAlertsConfiguration.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwMDU4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484100580", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        future = scheduler.scheduleWithFixedDelay(() -> {\n          \n          \n            \n                            update();\n          \n          \n            \n                        }, 0, refreshInterval, TimeUnit.HOURS);\n          \n          \n            \n                        future = scheduler.scheduleWithFixedDelay(this::update, 0, refreshInterval, TimeUnit.HOURS);", "author": "fwolter", "createdAt": "2020-09-06T18:31:12Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.binder;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.nzwateralerts.internal.NZWaterAlertsConfiguration;\n+import org.openhab.binding.nzwateralerts.internal.api.WaterAlertWebClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NZWaterAlertsController} is responsible for handling the connection\n+ * between the handler and API.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NZWaterAlertsBinder {\n+    private @Nullable WaterAlertWebClient webClient;\n+\n+    private final Logger logger = LoggerFactory.getLogger(NZWaterAlertsBinder.class);\n+\n+    private final Set<NZWaterAlertsBinderListener> listeners = new CopyOnWriteArraySet<>();\n+    private @Nullable ScheduledFuture<?> future;\n+    private @Nullable ScheduledExecutorService scheduler;\n+\n+    private int refreshInterval = 5;\n+\n+    public NZWaterAlertsBinder(final HttpClient httpClient, @Nullable final NZWaterAlertsConfiguration config,\n+            @Nullable final ScheduledExecutorService scheduler) {\n+        if (httpClient != null && config != null && scheduler != null) {\n+            if (config.location == null) {\n+                for (final NZWaterAlertsBinderListener listener : listeners) {\n+                    listener.updateBindingStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                            \"Location is not set.\");\n+                }\n+            } else {\n+                this.webClient = new WaterAlertWebClient(httpClient, config.location);\n+                this.scheduler = scheduler;\n+                refreshInterval = config.refreshInterval;\n+            }\n+        } else {\n+            for (final NZWaterAlertsBinderListener listener : listeners) {\n+                listener.updateBindingStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Could not create webClient, a parameter is null\");\n+            }\n+            logger.debug(\"Create Binder failed due to null item; httpClient {} config {} scheduler {}\",\n+                    httpClient != null, config != null, scheduler != null);\n+        }\n+    }\n+\n+    public void update() {\n+        if (webClient != null) {\n+            final Integer waterLevel = webClient.getLevel();\n+\n+            for (final NZWaterAlertsBinderListener listener : listeners) {\n+                if (waterLevel == null) {\n+                    listener.updateBindingStatus(ThingStatus.OFFLINE);\n+                } else {\n+                    listener.updateBindingStatus(ThingStatus.ONLINE);\n+                    listener.updateWaterLevel(waterLevel);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Registers the given {@link NZWaterAlertsBinderListener}. If it is already\n+     * registered, this method returns immediately.\n+     *\n+     * @param alertsBinderInterface The {@link NZWaterAlertsBinderListener} to be\n+     *            registered.\n+     */\n+    public void registerListener(final NZWaterAlertsBinderListener alertsBinderInterface) {\n+        final boolean isAdded = listeners.add(alertsBinderInterface);\n+        if (isAdded) {\n+            updatePollingState();\n+        }\n+    }\n+\n+    /**\n+     * Unregisters the given {@link NZWaterAlertsBinderListener}. If it is already\n+     * unregistered, this method returns immediately.\n+     *\n+     * @param alertsBinderInterface The {@link NZWaterAlertsBinderListener} to be\n+     *            unregistered.\n+     */\n+    public void unregisterListener(final NZWaterAlertsBinderListener alertsBinderInterface) {\n+        final boolean isRemoved = listeners.remove(alertsBinderInterface);\n+        if (isRemoved) {\n+            updatePollingState();\n+        }\n+    }\n+\n+    private void updatePollingState() {\n+        final boolean isPolling = future != null;\n+        if (isPolling && listeners.isEmpty()) {\n+            if (future != null)\n+                future.cancel(true);\n+            future = null;\n+            return;\n+        }\n+\n+        if (!isPolling && !listeners.isEmpty()) {\n+            future = scheduler.scheduleWithFixedDelay(() -> {\n+                update();\n+            }, 0, refreshInterval, TimeUnit.HOURS);", "originalCommit": "7b97fb6d9fd5f9cdd9a0d669356665f534c83c11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246b07d9e689709b5e98c8566e021c70bbcb529d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\nindex 860da9d80f..65075e8170 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwMDg4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484100889", "bodyText": "Please do a null check on location to fix the compiler warning.", "author": "fwolter", "createdAt": "2020-09-06T18:34:29Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.api;\n+\n+import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingConstants.*;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link WebClient} class contains the logic to get data from a URL.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WaterAlertWebClient {\n+    private final Logger logger = LoggerFactory.getLogger(WaterAlertWebClient.class);\n+\n+    private final HttpClient httpClient;\n+    private final String webService;\n+    private final String region;\n+    private final String area;\n+\n+    private @Nullable WaterWebService service = null;\n+\n+    public WaterAlertWebClient(final HttpClient httpClient, @Nullable final String location) {\n+        this.httpClient = httpClient;\n+\n+        final String[] locationSegmented = location.split(\":\", 3);", "originalCommit": "7b97fb6d9fd5f9cdd9a0d669356665f534c83c11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246b07d9e689709b5e98c8566e021c70bbcb529d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\nindex 745481ddab..ba5c0da6f4 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwMDk4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484100981", "bodyText": "You can store service to a local variable and do the null check on that, to eliminate the compiler warning.", "author": "fwolter", "createdAt": "2020-09-06T18:35:14Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.api;\n+\n+import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingConstants.*;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link WebClient} class contains the logic to get data from a URL.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WaterAlertWebClient {\n+    private final Logger logger = LoggerFactory.getLogger(WaterAlertWebClient.class);\n+\n+    private final HttpClient httpClient;\n+    private final String webService;\n+    private final String region;\n+    private final String area;\n+\n+    private @Nullable WaterWebService service = null;\n+\n+    public WaterAlertWebClient(final HttpClient httpClient, @Nullable final String location) {\n+        this.httpClient = httpClient;\n+\n+        final String[] locationSegmented = location.split(\":\", 3);\n+        webService = locationSegmented[0];\n+        region = locationSegmented[1];\n+        area = locationSegmented[2];\n+\n+        for (final WaterWebService srv : WATER_WEB_SERVICES) {\n+            logger.trace(\"Checking service {}\", srv.service());\n+            if (locationSegmented[0].equalsIgnoreCase(srv.service())) {\n+                logger.trace(\"Found service {}\", srv.service());\n+                service = srv;\n+            }\n+        }\n+\n+        if (service == null) {\n+            logger.debug(\"Service could not be found for {}\", locationSegmented[0]);\n+        }\n+    }\n+\n+    public @Nullable Integer getLevel() {\n+        ContentResponse response;\n+        try {\n+            if (service != null) {\n+                logger.debug(\"Getting Water Level from service {} region {} area {}\", webService, region, area);\n+                final String endpoint = service.endpoint(region);", "originalCommit": "7b97fb6d9fd5f9cdd9a0d669356665f534c83c11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246b07d9e689709b5e98c8566e021c70bbcb529d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\nindex 745481ddab..ba5c0da6f4 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwMTA2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484101066", "bodyText": "httpClient cannot be null at this point.", "author": "fwolter", "createdAt": "2020-09-06T18:36:07Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.binder;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.nzwateralerts.internal.NZWaterAlertsConfiguration;\n+import org.openhab.binding.nzwateralerts.internal.api.WaterAlertWebClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NZWaterAlertsController} is responsible for handling the connection\n+ * between the handler and API.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NZWaterAlertsBinder {\n+    private @Nullable WaterAlertWebClient webClient;\n+\n+    private final Logger logger = LoggerFactory.getLogger(NZWaterAlertsBinder.class);\n+\n+    private final Set<NZWaterAlertsBinderListener> listeners = new CopyOnWriteArraySet<>();\n+    private @Nullable ScheduledFuture<?> future;\n+    private @Nullable ScheduledExecutorService scheduler;\n+\n+    private int refreshInterval = 5;\n+\n+    public NZWaterAlertsBinder(final HttpClient httpClient, @Nullable final NZWaterAlertsConfiguration config,\n+            @Nullable final ScheduledExecutorService scheduler) {\n+        if (httpClient != null && config != null && scheduler != null) {", "originalCommit": "7b97fb6d9fd5f9cdd9a0d669356665f534c83c11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246b07d9e689709b5e98c8566e021c70bbcb529d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\nindex 860da9d80f..65075e8170 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwMTA5OA==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484101098", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-09-06T18:36:27Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.binder;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.nzwateralerts.internal.NZWaterAlertsConfiguration;\n+import org.openhab.binding.nzwateralerts.internal.api.WaterAlertWebClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NZWaterAlertsController} is responsible for handling the connection\n+ * between the handler and API.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NZWaterAlertsBinder {\n+    private @Nullable WaterAlertWebClient webClient;\n+\n+    private final Logger logger = LoggerFactory.getLogger(NZWaterAlertsBinder.class);\n+\n+    private final Set<NZWaterAlertsBinderListener> listeners = new CopyOnWriteArraySet<>();\n+    private @Nullable ScheduledFuture<?> future;\n+    private @Nullable ScheduledExecutorService scheduler;\n+\n+    private int refreshInterval = 5;\n+\n+    public NZWaterAlertsBinder(final HttpClient httpClient, @Nullable final NZWaterAlertsConfiguration config,\n+            @Nullable final ScheduledExecutorService scheduler) {\n+        if (httpClient != null && config != null && scheduler != null) {\n+            if (config.location == null) {\n+                for (final NZWaterAlertsBinderListener listener : listeners) {\n+                    listener.updateBindingStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                            \"Location is not set.\");\n+                }\n+            } else {\n+                this.webClient = new WaterAlertWebClient(httpClient, config.location);\n+                this.scheduler = scheduler;\n+                refreshInterval = config.refreshInterval;\n+            }\n+        } else {\n+            for (final NZWaterAlertsBinderListener listener : listeners) {\n+                listener.updateBindingStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Could not create webClient, a parameter is null\");\n+            }\n+            logger.debug(\"Create Binder failed due to null item; httpClient {} config {} scheduler {}\",\n+                    httpClient != null, config != null, scheduler != null);", "originalCommit": "7b97fb6d9fd5f9cdd9a0d669356665f534c83c11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246b07d9e689709b5e98c8566e021c70bbcb529d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\nindex 860da9d80f..65075e8170 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwMTE4OA==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484101188", "bodyText": "See above. scheduler can be null.", "author": "fwolter", "createdAt": "2020-09-06T18:37:18Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.binder;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.nzwateralerts.internal.NZWaterAlertsConfiguration;\n+import org.openhab.binding.nzwateralerts.internal.api.WaterAlertWebClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NZWaterAlertsController} is responsible for handling the connection\n+ * between the handler and API.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NZWaterAlertsBinder {\n+    private @Nullable WaterAlertWebClient webClient;\n+\n+    private final Logger logger = LoggerFactory.getLogger(NZWaterAlertsBinder.class);\n+\n+    private final Set<NZWaterAlertsBinderListener> listeners = new CopyOnWriteArraySet<>();\n+    private @Nullable ScheduledFuture<?> future;\n+    private @Nullable ScheduledExecutorService scheduler;\n+\n+    private int refreshInterval = 5;\n+\n+    public NZWaterAlertsBinder(final HttpClient httpClient, @Nullable final NZWaterAlertsConfiguration config,\n+            @Nullable final ScheduledExecutorService scheduler) {\n+        if (httpClient != null && config != null && scheduler != null) {\n+            if (config.location == null) {\n+                for (final NZWaterAlertsBinderListener listener : listeners) {\n+                    listener.updateBindingStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                            \"Location is not set.\");\n+                }\n+            } else {\n+                this.webClient = new WaterAlertWebClient(httpClient, config.location);\n+                this.scheduler = scheduler;\n+                refreshInterval = config.refreshInterval;\n+            }\n+        } else {\n+            for (final NZWaterAlertsBinderListener listener : listeners) {\n+                listener.updateBindingStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Could not create webClient, a parameter is null\");\n+            }\n+            logger.debug(\"Create Binder failed due to null item; httpClient {} config {} scheduler {}\",\n+                    httpClient != null, config != null, scheduler != null);\n+        }\n+    }\n+\n+    public void update() {\n+        if (webClient != null) {\n+            final Integer waterLevel = webClient.getLevel();\n+\n+            for (final NZWaterAlertsBinderListener listener : listeners) {\n+                if (waterLevel == null) {\n+                    listener.updateBindingStatus(ThingStatus.OFFLINE);\n+                } else {\n+                    listener.updateBindingStatus(ThingStatus.ONLINE);\n+                    listener.updateWaterLevel(waterLevel);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Registers the given {@link NZWaterAlertsBinderListener}. If it is already\n+     * registered, this method returns immediately.\n+     *\n+     * @param alertsBinderInterface The {@link NZWaterAlertsBinderListener} to be\n+     *            registered.\n+     */\n+    public void registerListener(final NZWaterAlertsBinderListener alertsBinderInterface) {\n+        final boolean isAdded = listeners.add(alertsBinderInterface);\n+        if (isAdded) {\n+            updatePollingState();\n+        }\n+    }\n+\n+    /**\n+     * Unregisters the given {@link NZWaterAlertsBinderListener}. If it is already\n+     * unregistered, this method returns immediately.\n+     *\n+     * @param alertsBinderInterface The {@link NZWaterAlertsBinderListener} to be\n+     *            unregistered.\n+     */\n+    public void unregisterListener(final NZWaterAlertsBinderListener alertsBinderInterface) {\n+        final boolean isRemoved = listeners.remove(alertsBinderInterface);\n+        if (isRemoved) {\n+            updatePollingState();\n+        }\n+    }\n+\n+    private void updatePollingState() {\n+        final boolean isPolling = future != null;\n+        if (isPolling && listeners.isEmpty()) {\n+            if (future != null)\n+                future.cancel(true);\n+            future = null;\n+            return;\n+        }\n+\n+        if (!isPolling && !listeners.isEmpty()) {\n+            future = scheduler.scheduleWithFixedDelay(() -> {", "originalCommit": "7b97fb6d9fd5f9cdd9a0d669356665f534c83c11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246b07d9e689709b5e98c8566e021c70bbcb529d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\nindex 860da9d80f..65075e8170 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwMTI0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484101244", "bodyText": "See above store also to a local variable and work on that. Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    binder = new NZWaterAlertsBinder(httpClient, config, scheduler);\n          \n          \n            \n                    NZWaterAlertsBinder localbinder = binder = new NZWaterAlertsBinder(httpClient, config, scheduler);", "author": "fwolter", "createdAt": "2020-09-06T18:38:13Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.handler;\n+\n+import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.nzwateralerts.internal.NZWaterAlertsConfiguration;\n+import org.openhab.binding.nzwateralerts.internal.binder.NZWaterAlertsBinder;\n+import org.openhab.binding.nzwateralerts.internal.binder.NZWaterAlertsBinderListener;\n+\n+/**\n+ * The {@link NZWaterAlertsHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NZWaterAlertsHandler extends BaseThingHandler implements NZWaterAlertsBinderListener {\n+\n+    private @Nullable NZWaterAlertsConfiguration config = null;\n+    private HttpClient httpClient;\n+    private @Nullable NZWaterAlertsBinder binder = null;\n+\n+    public NZWaterAlertsHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (CHANNEL_ALERTLEVEL.equals(channelUID.getId())) {\n+            if (command instanceof RefreshType) {\n+                if (binder != null)\n+                    binder.update();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(NZWaterAlertsConfiguration.class);\n+\n+        binder = new NZWaterAlertsBinder(httpClient, config, scheduler);", "originalCommit": "7b97fb6d9fd5f9cdd9a0d669356665f534c83c11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "246b07d9e689709b5e98c8566e021c70bbcb529d", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java\nindex 8d65632569..d993fcf88c 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2019 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"oid": "246b07d9e689709b5e98c8566e021c70bbcb529d", "url": "https://github.com/openhab/openhab-addons/commit/246b07d9e689709b5e98c8566e021c70bbcb529d", "message": "Add nz water level alerts binding.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:28Z", "type": "commit"}, {"oid": "00eac90dec426b6e7ea16d0f69f9787a51e35f4d", "url": "https://github.com/openhab/openhab-addons/commit/00eac90dec426b6e7ea16d0f69f9787a51e35f4d", "message": "Update copyright notice year.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:34Z", "type": "commit"}, {"oid": "b5ae296b5eba0c425c1b0dc7036bd9f57f7fa970", "url": "https://github.com/openhab/openhab-addons/commit/b5ae296b5eba0c425c1b0dc7036bd9f57f7fa970", "message": "Update pom and feature xml files.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:34Z", "type": "commit"}, {"oid": "5f7f4bb53df2d7d7221ad47473d9ec20ada782b6", "url": "https://github.com/openhab/openhab-addons/commit/5f7f4bb53df2d7d7221ad47473d9ec20ada782b6", "message": "Code tidy up.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:35Z", "type": "commit"}, {"oid": "75a068742de96415275fe5639d8f309299964b43", "url": "https://github.com/openhab/openhab-addons/commit/75a068742de96415275fe5639d8f309299964b43", "message": "Corrected some comment errors.\nChanged pattern and regex to static final.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:35Z", "type": "commit"}, {"oid": "a33e0a5f98bd92c9fa78aefc641ca6e253923f34", "url": "https://github.com/openhab/openhab-addons/commit/a33e0a5f98bd92c9fa78aefc641ca6e253923f34", "message": "Updated readme.\nUpdated pom file.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:36Z", "type": "commit"}, {"oid": "bdca18d1451aa431ef7d992ea8e2fffa9f78235c", "url": "https://github.com/openhab/openhab-addons/commit/bdca18d1451aa431ef7d992ea8e2fffa9f78235c", "message": "Add Taupo region placeholder.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:36Z", "type": "commit"}, {"oid": "b7202dcf856f2d8891de7e8a42255490901603da", "url": "https://github.com/openhab/openhab-addons/commit/b7202dcf856f2d8891de7e8a42255490901603da", "message": "CheckStyle and other code cleanup.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:37Z", "type": "commit"}, {"oid": "d7ce06701ba12f06e446a1b5c392b29d6c883ffe", "url": "https://github.com/openhab/openhab-addons/commit/d7ce06701ba12f06e446a1b5c392b29d6c883ffe", "message": "HttpClient shifted to OSGI bound service.\nCode tidy up based on change requests.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:37Z", "type": "commit"}, {"oid": "70f142d5d140b603d1dd312071c5ef36f575da27", "url": "https://github.com/openhab/openhab-addons/commit/70f142d5d140b603d1dd312071c5ef36f575da27", "message": "Fix spotless violations.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:38Z", "type": "commit"}, {"oid": "9723db9723dda238e97e08d48fecfcacf715dbcd", "url": "https://github.com/openhab/openhab-addons/commit/9723db9723dda238e97e08d48fecfcacf715dbcd", "message": "Fixed all compiler warnings.\nApplied all recommended changes as per request.\nChange scheduler from nullable.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:38Z", "type": "commit"}, {"oid": "9723db9723dda238e97e08d48fecfcacf715dbcd", "url": "https://github.com/openhab/openhab-addons/commit/9723db9723dda238e97e08d48fecfcacf715dbcd", "message": "Fixed all compiler warnings.\nApplied all recommended changes as per request.\nChange scheduler from nullable.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T09:50:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMyNzUwNw==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484327507", "bodyText": "Since we want to get rid of Apache Commons, can you replace this with native Java code? See #7722.", "author": "fwolter", "createdAt": "2020-09-07T09:58:23Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.api;\n+\n+import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingConstants.*;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.commons.lang.NullArgumentException;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link WebClient} class contains the logic to get data from a URL.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WaterAlertWebClient {\n+    private final Logger logger = LoggerFactory.getLogger(WaterAlertWebClient.class);\n+\n+    private final HttpClient httpClient;\n+    private final String webService;\n+    private final String region;\n+    private final String area;\n+\n+    private @Nullable WaterWebService service = null;\n+\n+    public WaterAlertWebClient(final HttpClient httpClient, @Nullable final String location) {\n+        this.httpClient = httpClient;\n+\n+        if (location != null) {\n+            final String[] locationSegmented = location.split(\":\", 3);\n+            webService = locationSegmented[0];\n+            region = locationSegmented[1];\n+            area = locationSegmented[2];\n+\n+            for (final WaterWebService srv : WATER_WEB_SERVICES) {\n+                logger.trace(\"Checking service {}\", srv.service());\n+                if (locationSegmented[0].equalsIgnoreCase(srv.service())) {\n+                    logger.trace(\"Found service {}\", srv.service());\n+                    service = srv;\n+                }\n+            }\n+\n+            if (service == null) {\n+                logger.debug(\"Service could not be found for {}\", locationSegmented[0]);\n+            }\n+        } else {\n+            throw new NullArgumentException(\"The location is empty.\");", "originalCommit": "9723db9723dda238e97e08d48fecfcacf715dbcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "773d57a9e2aabd6c0cb2f1ba682ee730aa52ff93", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\nindex 5c4e788935..32dbde1569 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\n\n@@ -17,7 +17,6 @@ import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingCon\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeoutException;\n \n-import org.apache.commons.lang.NullArgumentException;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.jetty.client.HttpClient;\n"}}, {"oid": "773d57a9e2aabd6c0cb2f1ba682ee730aa52ff93", "url": "https://github.com/openhab/openhab-addons/commit/773d57a9e2aabd6c0cb2f1ba682ee730aa52ff93", "message": "Change location to being nonnull.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T10:41:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1ODY1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484358659", "bodyText": "Sorry, overlooked it until now. You should specify a timeout.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            response = httpClient.GET(endpoint);\n          \n          \n            \n                            response = httpClient.newRequest(endpoint).timeout(10, TimeUnit.SECONDS).send();", "author": "fwolter", "createdAt": "2020-09-07T10:58:50Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.api;\n+\n+import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingConstants.*;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link WebClient} class contains the logic to get data from a URL.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WaterAlertWebClient {\n+    private final Logger logger = LoggerFactory.getLogger(WaterAlertWebClient.class);\n+\n+    private final HttpClient httpClient;\n+    private final String webService;\n+    private final String region;\n+    private final String area;\n+\n+    private @Nullable WaterWebService service = null;\n+\n+    public WaterAlertWebClient(final HttpClient httpClient, final String location) throws Exception {\n+        this.httpClient = httpClient;\n+\n+        final String[] locationSegmented = location.split(\":\", 3);\n+        webService = locationSegmented[0];\n+        region = locationSegmented[1];\n+        area = locationSegmented[2];\n+\n+        for (final WaterWebService srv : WATER_WEB_SERVICES) {\n+            logger.trace(\"Checking service {}\", srv.service());\n+            if (locationSegmented[0].equalsIgnoreCase(srv.service())) {\n+                logger.trace(\"Found service {}\", srv.service());\n+                service = srv;\n+            }\n+        }\n+\n+        if (service == null) {\n+            logger.debug(\"Service could not be found for {}\", locationSegmented[0]);\n+        }\n+    }\n+\n+    public @Nullable Integer getLevel() {\n+        ContentResponse response;\n+        final WaterWebService localService = service;\n+        try {\n+            if (localService != null) {\n+                logger.debug(\"Getting Water Level from service {} region {} area {}\", webService, region, area);\n+\n+                final String endpoint = localService.endpoint(region);\n+                logger.trace(\"Getting data from endpoint {}\", endpoint);\n+                response = httpClient.GET(endpoint);", "originalCommit": "773d57a9e2aabd6c0cb2f1ba682ee730aa52ff93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86a860f8afe437183cb81054135ee2b65a0a2a91", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\nindex 32dbde1569..1c1fe71c42 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/api/WaterAlertWebClient.java\n\n@@ -15,6 +15,7 @@ package org.openhab.binding.nzwateralerts.internal.api;\n import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingConstants.*;\n \n import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"oid": "86a860f8afe437183cb81054135ee2b65a0a2a91", "url": "https://github.com/openhab/openhab-addons/commit/86a860f8afe437183cb81054135ee2b65a0a2a91", "message": "Removed depreciated tag.\nAdd request timeout.\nRemove redundant 'throws exception' on method.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T11:50:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNzMxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484427319", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void updateWaterLevel(int level);\n          \n          \n            \n            \n          \n          \n            \n                public void updateBindingStatus(ThingStatus thingStatus);\n          \n          \n            \n            \n          \n          \n            \n                public void updateBindingStatus(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail, String description);\n          \n          \n            \n                void updateWaterLevel(int level);\n          \n          \n            \n            \n          \n          \n            \n                void updateBindingStatus(ThingStatus thingStatus);\n          \n          \n            \n            \n          \n          \n            \n                void updateBindingStatus(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail, String description);", "author": "Hilbrand", "createdAt": "2020-09-07T13:18:48Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinderListener.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.binder;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+\n+/**\n+ * The {@link NZWaterAlertsControllerListener} is responsible for handling the events from the WebClient and Handler.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface NZWaterAlertsBinderListener {\n+    public void updateWaterLevel(int level);\n+\n+    public void updateBindingStatus(ThingStatus thingStatus);\n+\n+    public void updateBindingStatus(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail, String description);", "originalCommit": "86a860f8afe437183cb81054135ee2b65a0a2a91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f010d4939e8de4cbe3bce8d8c27bd056d0b20d27", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinderListener.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinderListener.java\nindex 37f602f70d..c686660f68 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinderListener.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinderListener.java\n\n@@ -23,9 +23,9 @@ import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n  */\n @NonNullByDefault\n public interface NZWaterAlertsBinderListener {\n-    public void updateWaterLevel(int level);\n+    void updateWaterLevel(int level);\n \n-    public void updateBindingStatus(ThingStatus thingStatus);\n+    void updateBindingStatus(ThingStatus thingStatus);\n \n-    public void updateBindingStatus(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail, String description);\n+    void updateBindingStatus(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail, String description);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyODU2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484428569", "bodyText": "Can you catch the specific exception.", "author": "Hilbrand", "createdAt": "2020-09-07T13:21:26Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.binder;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.nzwateralerts.internal.NZWaterAlertsConfiguration;\n+import org.openhab.binding.nzwateralerts.internal.api.WaterAlertWebClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NZWaterAlertsController} is responsible for handling the connection\n+ * between the handler and API.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NZWaterAlertsBinder {\n+    private @Nullable WaterAlertWebClient webClient;\n+\n+    private final Logger logger = LoggerFactory.getLogger(NZWaterAlertsBinder.class);\n+\n+    private final Set<NZWaterAlertsBinderListener> listeners = new CopyOnWriteArraySet<>();\n+    private @Nullable ScheduledFuture<?> future;\n+    private final ScheduledExecutorService scheduler;\n+\n+    private int refreshInterval = 5;\n+\n+    public NZWaterAlertsBinder(final HttpClient httpClient, @Nullable final NZWaterAlertsConfiguration config,\n+            final ScheduledExecutorService scheduler) {\n+        this.scheduler = scheduler;\n+\n+        if (config != null) {\n+            final String localLocation = config.location;\n+            if (localLocation == null) {\n+                for (final NZWaterAlertsBinderListener listener : listeners) {\n+                    listener.updateBindingStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                            \"Location is not set.\");\n+                }\n+            } else {\n+                try {\n+                    this.webClient = new WaterAlertWebClient(httpClient, localLocation);\n+                    refreshInterval = config.refreshInterval;\n+                } catch (Exception ex) {", "originalCommit": "86a860f8afe437183cb81054135ee2b65a0a2a91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ0MDgwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484440809", "bodyText": "Whoops, that's old code and not supposed to catch any exceptions.", "author": "Cossey", "createdAt": "2020-09-07T13:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyODU2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f010d4939e8de4cbe3bce8d8c27bd056d0b20d27", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\nindex 092831ea02..9ca10b8aa9 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/binder/NZWaterAlertsBinder.java\n\n@@ -58,15 +58,8 @@ public class NZWaterAlertsBinder {\n                             \"Location is not set.\");\n                 }\n             } else {\n-                try {\n-                    this.webClient = new WaterAlertWebClient(httpClient, localLocation);\n-                    refreshInterval = config.refreshInterval;\n-                } catch (Exception ex) {\n-                    for (final NZWaterAlertsBinderListener listener : listeners) {\n-                        listener.updateBindingStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n-                                \"Location is not valid.\");\n-                    }\n-                }\n+                this.webClient = new WaterAlertWebClient(httpClient, localLocation);\n+                refreshInterval = config.refreshInterval;\n             }\n         } else {\n             for (final NZWaterAlertsBinderListener listener : listeners) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjk0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484432946", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (localBinder != null)\n          \n          \n            \n                        localBinder.unregisterListener(this);\n          \n          \n            \n                    if (localBinder != null) {\n          \n          \n            \n                        localBinder.unregisterListener(this);\n          \n          \n            \n                    }", "author": "Hilbrand", "createdAt": "2020-09-07T13:29:53Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.handler;\n+\n+import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.nzwateralerts.internal.NZWaterAlertsConfiguration;\n+import org.openhab.binding.nzwateralerts.internal.binder.NZWaterAlertsBinder;\n+import org.openhab.binding.nzwateralerts.internal.binder.NZWaterAlertsBinderListener;\n+\n+/**\n+ * The {@link NZWaterAlertsHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NZWaterAlertsHandler extends BaseThingHandler implements NZWaterAlertsBinderListener {\n+\n+    private @Nullable NZWaterAlertsConfiguration config = null;\n+    private HttpClient httpClient;\n+    private @Nullable NZWaterAlertsBinder binder = null;\n+\n+    public NZWaterAlertsHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        final NZWaterAlertsBinder localBinder = binder;\n+        if (CHANNEL_ALERTLEVEL.equals(channelUID.getId())) {\n+            if (command instanceof RefreshType) {\n+                if (localBinder != null)\n+                    localBinder.update();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(NZWaterAlertsConfiguration.class);\n+\n+        NZWaterAlertsBinder localBinder = binder = new NZWaterAlertsBinder(httpClient, config, scheduler);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        localBinder.registerListener(this);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        NZWaterAlertsBinder localBinder = binder;\n+        if (localBinder != null)\n+            localBinder.unregisterListener(this);\n+\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        NZWaterAlertsBinder localBinder = binder;\n+        if (localBinder != null)\n+            localBinder.unregisterListener(this);", "originalCommit": "86a860f8afe437183cb81054135ee2b65a0a2a91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f010d4939e8de4cbe3bce8d8c27bd056d0b20d27", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java\nindex a694df7add..9052d30d2c 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java\n\n@@ -73,8 +73,9 @@ public class NZWaterAlertsHandler extends BaseThingHandler implements NZWaterAle\n     @Override\n     public void dispose() {\n         NZWaterAlertsBinder localBinder = binder;\n-        if (localBinder != null)\n+        if (localBinder != null) {\n             localBinder.unregisterListener(this);\n+        }\n \n         super.dispose();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzA2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7899#discussion_r484433060", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (localBinder != null)\n          \n          \n            \n                        localBinder.unregisterListener(this);\n          \n          \n            \n                    if (localBinder != null) {\n          \n          \n            \n                        localBinder.unregisterListener(this);\n          \n          \n            \n                    }", "author": "Hilbrand", "createdAt": "2020-09-07T13:30:04Z", "path": "bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nzwateralerts.internal.handler;\n+\n+import static org.openhab.binding.nzwateralerts.internal.NZWaterAlertsBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.nzwateralerts.internal.NZWaterAlertsConfiguration;\n+import org.openhab.binding.nzwateralerts.internal.binder.NZWaterAlertsBinder;\n+import org.openhab.binding.nzwateralerts.internal.binder.NZWaterAlertsBinderListener;\n+\n+/**\n+ * The {@link NZWaterAlertsHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Stewart Cossey - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NZWaterAlertsHandler extends BaseThingHandler implements NZWaterAlertsBinderListener {\n+\n+    private @Nullable NZWaterAlertsConfiguration config = null;\n+    private HttpClient httpClient;\n+    private @Nullable NZWaterAlertsBinder binder = null;\n+\n+    public NZWaterAlertsHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        final NZWaterAlertsBinder localBinder = binder;\n+        if (CHANNEL_ALERTLEVEL.equals(channelUID.getId())) {\n+            if (command instanceof RefreshType) {\n+                if (localBinder != null)\n+                    localBinder.update();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(NZWaterAlertsConfiguration.class);\n+\n+        NZWaterAlertsBinder localBinder = binder = new NZWaterAlertsBinder(httpClient, config, scheduler);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        localBinder.registerListener(this);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        NZWaterAlertsBinder localBinder = binder;\n+        if (localBinder != null)\n+            localBinder.unregisterListener(this);", "originalCommit": "86a860f8afe437183cb81054135ee2b65a0a2a91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f010d4939e8de4cbe3bce8d8c27bd056d0b20d27", "chunk": "diff --git a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java\nindex a694df7add..9052d30d2c 100644\n--- a/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java\n+++ b/bundles/org.openhab.binding.nzwateralerts/src/main/java/org/openhab/binding/nzwateralerts/internal/handler/NZWaterAlertsHandler.java\n\n@@ -73,8 +73,9 @@ public class NZWaterAlertsHandler extends BaseThingHandler implements NZWaterAle\n     @Override\n     public void dispose() {\n         NZWaterAlertsBinder localBinder = binder;\n-        if (localBinder != null)\n+        if (localBinder != null) {\n             localBinder.unregisterListener(this);\n+        }\n \n         super.dispose();\n     }\n"}}, {"oid": "f010d4939e8de4cbe3bce8d8c27bd056d0b20d27", "url": "https://github.com/openhab/openhab-addons/commit/f010d4939e8de4cbe3bce8d8c27bd056d0b20d27", "message": "Remove unnecessary catching of exception.\nTidy up Readme.\nChange listener access modifier.\nAdd some curly braces around single line if statements.\n\nSigned-off-by: Stewart Cossey <stewart.cossey@gmail.com>", "committedDate": "2020-09-07T13:48:59Z", "type": "commit"}]}