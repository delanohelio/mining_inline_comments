{"pr_number": 8969, "pr_title": "[telegram] Add support for sendVideo (MP4) and sendAnimation (GIF)", "pr_createdAt": "2020-11-07T05:10:53Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8969", "timeline": [{"oid": "1dc0c2677ac6892f06ce818e05d979e4704a52d5", "url": "https://github.com/openhab/openhab-addons/commit/1dc0c2677ac6892f06ce818e05d979e4704a52d5", "message": "Add sendVideo and sendAnimation features.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-11-07T02:06:03Z", "type": "commit"}, {"oid": "c6f036a68a8b289c4795a8f1053cbfe7b7a774fb", "url": "https://github.com/openhab/openhab-addons/commit/c6f036a68a8b289c4795a8f1053cbfe7b7a774fb", "message": "Re-order functions to keep inline with other functions.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-11-07T04:55:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzODE3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8969#discussion_r519238171", "bodyText": "Do you need to download the url? I thought the telegram api supported sending urls as is.", "author": "cpmeister", "createdAt": "2020-11-08T00:22:43Z", "path": "bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/action/TelegramActions.java", "diffHunk": "@@ -394,6 +396,153 @@ public boolean sendTelegramPhoto(@ActionInput(name = \"photoURL\") @Nullable Strin\n         return sendTelegramPhoto(photoURL, caption, null, null);\n     }\n \n+    @RuleAction(label = \"send animation\", description = \"Send an Animation using the Telegram API.\")\n+    public boolean sendTelegramAnimation(@ActionInput(name = \"animationURL\") @Nullable String animationURL,\n+            @ActionInput(name = \"caption\") @Nullable String caption) {\n+        TelegramHandler localHandler = handler;\n+        if (localHandler != null) {\n+            for (Long chatId : localHandler.getReceiverChatIds()) {\n+                if (!sendTelegramAnimation(chatId, animationURL, caption)) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @RuleAction(label = \"send animation\", description = \"Send an Animation using the Telegram API.\")\n+    public boolean sendTelegramAnimation(@ActionInput(name = \"chatId\") @Nullable Long chatId,\n+            @ActionInput(name = \"animationURL\") @Nullable String animationURL,\n+            @ActionInput(name = \"caption\") @Nullable String caption) {\n+        if (animationURL == null) {\n+            logger.warn(\"Animation URL not defined; unable to retrieve video for sending.\");\n+            return false;\n+        }\n+        if (chatId == null) {\n+            logger.warn(\"chatId not defined; action skipped.\");\n+            return false;\n+        }\n+        TelegramHandler localHandler = handler;\n+        if (localHandler != null) {\n+            final SendAnimation sendAnimation;\n+            if (animationURL.toLowerCase().startsWith(\"http\")) {\n+                // load image from url", "originalCommit": "c6f036a68a8b289c4795a8f1053cbfe7b7a774fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NDg2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8969#discussion_r519254867", "bodyText": "Yes for multiple reasons.\n\nThis is the way it was already done for sendPhoto\nYou get larger file sizes allowed if done this way. 20MB = 14 second long recording on my cameras.\nThe way I feel most people will use this is for sending a PRIVATE recording made from an IP camera that only exists inside a private network. This allows the video/photos and more to be sent out to your mobile phone without needing to open ports in a firewall. If the source file was externally accessible, then I would simply use a normal message and use a link in the text based message.\nIt will work in all use cases and keep code simple.\n\nQuote from API docs....\nSending files\nThere are three ways to send files (photos, stickers, audio, media, etc.):\n\n\nIf the file is already stored somewhere on the Telegram servers, you don't need to reupload it: each file object has a file_id field, simply pass this file_id as a parameter instead of uploading. There are no limits for files sent this way.\n\n\nProvide Telegram with an HTTP URL for the file to be sent. Telegram will download and send the file. 5 MB max size for photos and 20 MB max for other types of content.\n\n\nPost the file using multipart/form-data in the usual way that files are uploaded via the browser. 10 MB max size for photos, 50 MB for other files.", "author": "Skinah", "createdAt": "2020-11-08T04:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzODE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3MjQ0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8969#discussion_r519472448", "bodyText": "sounds good to me.", "author": "cpmeister", "createdAt": "2020-11-08T20:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzODE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e125381b7a80a32a45ff88c15d7c508e683b948a", "chunk": "diff --git a/bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/action/TelegramActions.java b/bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/action/TelegramActions.java\nindex 2dc1ed73a2..701435e2c8 100644\n--- a/bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/action/TelegramActions.java\n+++ b/bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/action/TelegramActions.java\n\n@@ -451,17 +452,22 @@ public class TelegramActions implements ThingActions {\n                     return false;\n                 }\n             } else {\n+                String temp = animationURL;\n+                if (!animationURL.toLowerCase().startsWith(\"file:\")) {\n+                    temp = \"file://\" + animationURL;\n+                }\n                 // Load video from local file system\n                 logger.debug(\"Read file from local file system: {}\", animationURL);\n                 try {\n-                    URL url = new URL(animationURL);\n-                    sendAnimation = new SendAnimation(chatId, Paths.get(url.getPath()).toFile());\n+                    sendAnimation = new SendAnimation(chatId, Paths.get(new URL(temp).getPath()).toFile());\n                 } catch (MalformedURLException e) {\n                     logger.warn(\"Malformed URL, should start with http or file: {}\", animationURL);\n                     return false;\n                 }\n             }\n-            sendAnimation.caption(caption);\n+            if (caption != null) {\n+                sendAnimation.caption(caption);\n+            }\n             if (localHandler.getParseMode() != null) {\n                 sendAnimation.parseMode(localHandler.getParseMode());\n             }\n"}}, {"oid": "237ab1587ae2f229d9e531a0a584723c8cde09b1", "url": "https://github.com/openhab/openhab-addons/commit/237ab1587ae2f229d9e531a0a584723c8cde09b1", "message": "Readme change to trigger new build.\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-11-08T05:31:19Z", "type": "commit"}, {"oid": "e125381b7a80a32a45ff88c15d7c508e683b948a", "url": "https://github.com/openhab/openhab-addons/commit/e125381b7a80a32a45ff88c15d7c508e683b948a", "message": "Add ability to use raw file paths to send video and animations.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-11-09T10:35:27Z", "type": "commit"}, {"oid": "caf64494dae3b0ff14feba5ae22875b4424c2445", "url": "https://github.com/openhab/openhab-addons/commit/caf64494dae3b0ff14feba5ae22875b4424c2445", "message": "Change Paths.get to Path.of as JavaDocs recommend.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-11-09T10:38:48Z", "type": "commit"}, {"oid": "224a7d1fb20f58edb565603df8f94020236dab1c", "url": "https://github.com/openhab/openhab-addons/commit/224a7d1fb20f58edb565603df8f94020236dab1c", "message": "Allow absolute paths in SendPhoto methods and update readme.md\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-11-10T02:28:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTY1OA==", "url": "https://github.com/openhab/openhab-addons/pull/8969#discussion_r520269658", "bodyText": "It should be noted that .jpeg, .jpe, .jif, .jfif, and .jfi are all valid extensions for a file with the image/jpeg mimetype. So either add support for all of those or just simply check if the url contains a period (.) so that you can handle any extension they throw at you.", "author": "cpmeister", "createdAt": "2020-11-10T03:52:42Z", "path": "bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/action/TelegramActions.java", "diffHunk": "@@ -318,19 +317,22 @@ public boolean sendTelegramPhoto(@ActionInput(name = \"chatId\") @Nullable Long ch\n                             \"Basic \" + B64Code.encode(username + \":\" + password, StandardCharsets.ISO_8859_1)));\n                 }\n                 try {\n-                    ContentResponse contentResponse = request.send();\n+                    // API has 10mb limit to jpg file size, without this it can only accept 2mb\n+                    FutureResponseListener listener = new FutureResponseListener(request, 10 * 1024 * 1024);\n+                    request.send(listener);\n+                    ContentResponse contentResponse = listener.get();\n                     if (contentResponse.getStatus() == 200) {\n                         byte[] fileContent = contentResponse.getContent();\n                         sendPhoto = new SendPhoto(chatId, fileContent);\n                     } else {\n                         logger.warn(\"Download from {} failed with status: {}\", photoURL, contentResponse.getStatus());\n                         return false;\n                     }\n-                } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                } catch (InterruptedException | ExecutionException e) {\n                     logger.warn(\"Download from {} failed with exception: {}\", photoURL, e.getMessage());\n                     return false;\n                 }\n-            } else if (photoURL.toLowerCase().startsWith(\"file\")) {\n+            } else if (photoURL.toLowerCase().startsWith(\"file:\") || photoURL.toLowerCase().endsWith(\".jpg\")) {", "originalCommit": "224a7d1fb20f58edb565603df8f94020236dab1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4ODYxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8969#discussion_r520288617", "bodyText": "EDIT: I added support for the mentioned file types plus, .gif, .webp and .png extensions and the latest changes are passing my tests here. Is it is OK to have 10 OR conditions in the if statement? It just feels wrong to have so many, but I would not know if it is OK or not.\nAt some point my stance is that:\na) This is an improvement over what was there before and does not break backwards compatibility nor prevent future changes.\nb) The file:// method already allows anything to be specified that the API supports, so there is an option that works.\nAs for checking if the url contains a period (.) there are file extensions that are 3 and 4 characters long so I would have to check for the period in 2 index positions of the string. Considering it is a valid use case of having raw data in base64 in this string I don't like that as a solution. Perhaps I misunderstood or another way is possible? Thank you for taking the time to help it is appreciated.", "author": "Skinah", "createdAt": "2020-11-10T05:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NjEzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8969#discussion_r520356136", "bodyText": "Yeah, 10 or statements is not ideal. Typically you would put all the extensions into a list/array and then iterate through them to check if any of them is a match.\nAt the very least you should change the code so that you are not calling toLowercase 10 times.\nI suggest doing something like this:\nprivate static final Set<String> PHOTO_EXTENSIONS = Set.of(\".jpg\",\".jpeg\",\".png\",...);\n\nprivate static boolean hasPhotoExt(String str){\n    String lstr = str.toLowercase();\n    return PHOTO_EXTENSIONS.stream().anyMatch(lstr::endsWith);\n}", "author": "cpmeister", "createdAt": "2020-11-10T07:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAyMzIwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8969#discussion_r521023204", "bodyText": "Thanks for suggestion which I used in a tweaked way. Tested and its working at sending a png file here.", "author": "Skinah", "createdAt": "2020-11-11T02:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "f677ead71c4efc5a63036b9ebc10ae921d6569d8", "chunk": "diff --git a/bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/action/TelegramActions.java b/bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/action/TelegramActions.java\nindex 87fb7ef1d9..43d2c289e6 100644\n--- a/bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/action/TelegramActions.java\n+++ b/bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/action/TelegramActions.java\n\n@@ -332,12 +332,16 @@ public class TelegramActions implements ThingActions {\n                     logger.warn(\"Download from {} failed with exception: {}\", photoURL, e.getMessage());\n                     return false;\n                 }\n-            } else if (photoURL.toLowerCase().startsWith(\"file:\") || photoURL.toLowerCase().endsWith(\".jpg\")) {\n+            } else if (photoURL.toLowerCase().startsWith(\"file:\") || photoURL.toLowerCase().endsWith(\".jpg\")\n+                    || photoURL.toLowerCase().endsWith(\".jpeg\")) {\n                 // Load image from local file system\n                 logger.debug(\"Read file from local file system: {}\", photoURL);\n+                String temp = photoURL;\n+                if (!photoURL.toLowerCase().startsWith(\"file:\")) {\n+                    temp = \"file://\" + photoURL;\n+                }\n                 try {\n-                    URL url = new URL(photoURL);\n-                    sendPhoto = new SendPhoto(chatId, Path.of(url.getPath()).toFile());\n+                    sendPhoto = new SendPhoto(chatId, Path.of(new URL(temp).getPath()).toFile());\n                 } catch (MalformedURLException e) {\n                     logger.warn(\"Malformed URL: {}\", photoURL);\n                     return false;\n"}}, {"oid": "f677ead71c4efc5a63036b9ebc10ae921d6569d8", "url": "https://github.com/openhab/openhab-addons/commit/f677ead71c4efc5a63036b9ebc10ae921d6569d8", "message": "Support for no caption with photo.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-11-10T04:23:04Z", "type": "commit"}, {"oid": "852453e9ec18ff8993aab2865aad400368beaada", "url": "https://github.com/openhab/openhab-addons/commit/852453e9ec18ff8993aab2865aad400368beaada", "message": "Add absolute path support for png and webp.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-11-10T05:34:54Z", "type": "commit"}, {"oid": "b03a489c398040478fa47254af755fc991ebcfd1", "url": "https://github.com/openhab/openhab-addons/commit/b03a489c398040478fa47254af755fc991ebcfd1", "message": "Add all file types requested.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-11-10T05:59:15Z", "type": "commit"}, {"oid": "13d055dddacaa0c6be73af37f76d9b9cc2706f37", "url": "https://github.com/openhab/openhab-addons/commit/13d055dddacaa0c6be73af37f76d9b9cc2706f37", "message": "Remove multiple OR and only do lowercase once.\n\n\nSigned-off-by: Matthew Skinner <matt@pcmus.com>", "committedDate": "2020-11-11T02:01:24Z", "type": "commit"}]}