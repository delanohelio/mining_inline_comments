{"pr_number": 8521, "pr_title": "[http] Initial contribution", "pr_createdAt": "2020-09-21T16:40:08Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8521", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NTMxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r493785315", "bodyText": "I don't know if generics would complicate things. But if the compiler will accept StringType::new as a Function<String, State> instance then it should be possible to replace the following without difficulty.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GenericItemConverter<T extends State> extends AbstractTransformingItemConverter {\n          \n          \n            \n                private final Class<T> clazz;\n          \n          \n            \n            \n          \n          \n            \n                public GenericItemConverter(Class<T> clazz, Consumer<State> updateState, Consumer<Command> postCommand,\n          \n          \n            \n                        @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n          \n          \n            \n                        ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n          \n          \n            \n                    super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n          \n          \n            \n                    this.clazz = clazz;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                protected State toState(String value) {\n          \n          \n            \n                    try {\n          \n          \n            \n                        return clazz.getConstructor(String.class).newInstance(value);\n          \n          \n            \n                    } catch (NoSuchMethodException | InvocationTargetException | InstantiationException\n          \n          \n            \n                            | IllegalAccessException e) {\n          \n          \n            \n                        return UnDefType.NULL;\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n            public class GenericItemConverter extends AbstractTransformingItemConverter {\n          \n          \n            \n                private final Function<String, State> toStateFunction;\n          \n          \n            \n            \n          \n          \n            \n                public GenericItemConverter(Function<String, State> toStateFunction, Consumer<State> updateState, Consumer<Command> postCommand,\n          \n          \n            \n                        @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n          \n          \n            \n                        ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n          \n          \n            \n                    super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n          \n          \n            \n                    this.toStateFunction = toStateFunction;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                protected State toState(String value) {\n          \n          \n            \n                    return toStateFunction.apply(value);\n          \n          \n            \n                }", "author": "cpmeister", "createdAt": "2020-09-23T18:00:30Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/GenericItemConverter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link GenericItemConverter} implements simple conversions for different item types\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GenericItemConverter<T extends State> extends AbstractTransformingItemConverter {\n+    private final Class<T> clazz;\n+\n+    public GenericItemConverter(Class<T> clazz, Consumer<State> updateState, Consumer<Command> postCommand,\n+            @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n+            ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n+        super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n+        this.clazz = clazz;\n+    }\n+\n+    protected State toState(String value) {\n+        try {\n+            return clazz.getConstructor(String.class).newInstance(value);\n+        } catch (NoSuchMethodException | InvocationTargetException | InstantiationException\n+                | IllegalAccessException e) {\n+            return UnDefType.NULL;\n+        }\n+    }", "originalCommit": "1f6ed3c2e6396765feda2c572c37fc40cd376b9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ce0d77d0587e68508a528423ef162b1362a07d5", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/GenericItemConverter.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/GenericItemConverter.java\nindex d20fff3732..6828be7b64 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/GenericItemConverter.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/GenericItemConverter.java\n\n@@ -12,8 +12,8 @@\n  */\n package org.openhab.binding.http.internal.converter;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.util.function.Consumer;\n+import java.util.function.Function;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5Mjk3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r493792971", "bodyText": "So result.isFailed() returns false on a 401?", "author": "cpmeister", "createdAt": "2020-09-23T18:13:36Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpResponseListener} is responsible for processing the result of a HTTP request\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpResponseListener extends BufferingResponseListener {\n+    private final Logger logger = LoggerFactory.getLogger(HttpResponseListener.class);\n+    private final CompletableFuture<@Nullable Content> future;\n+    private final String fallbackEncoding;\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future) {\n+        this(future, null);\n+    }\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future, @Nullable String fallbackEncoding) {\n+        this.future = future;\n+        this.fallbackEncoding = fallbackEncoding != null ? fallbackEncoding : StandardCharsets.UTF_8.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void onComplete(@NonNullByDefault({}) Result result) {\n+        Response response = result.getResponse();\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"Received from '{}': {}\", result.getRequest().getURI(), responseToLogString(response));\n+        }\n+        if (!result.isFailed() && response.getStatus() == HttpStatus.OK_200) {\n+            byte[] content = getContent();\n+            String encoding = getEncoding();\n+            if (content != null) {\n+                future.complete(new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n+            } else {\n+                future.complete(null);\n+            }\n+        } else {\n+            Request request = result.getRequest();\n+            if (result.isFailed()) {\n+                logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(),\n+                        request.getMethod(), request.getContent(), result.getFailure().getMessage());\n+                future.complete(null);\n+            } else if (result.getResponse().getStatus() == HttpStatus.UNAUTHORIZED_401) {", "originalCommit": "1f6ed3c2e6396765feda2c572c37fc40cd376b9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ce0d77d0587e68508a528423ef162b1362a07d5", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\nindex 861dc9c06e..27c3e3a5c0 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\n\n@@ -54,24 +54,32 @@ public class HttpResponseListener extends BufferingResponseListener {\n         if (logger.isTraceEnabled()) {\n             logger.trace(\"Received from '{}': {}\", result.getRequest().getURI(), responseToLogString(response));\n         }\n-        if (!result.isFailed() && response.getStatus() == HttpStatus.OK_200) {\n-            byte[] content = getContent();\n-            String encoding = getEncoding();\n-            if (content != null) {\n-                future.complete(new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n-            } else {\n-                future.complete(null);\n-            }\n+        Request request = result.getRequest();\n+        if (result.isFailed()) {\n+            logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(), request.getMethod(),\n+                    request.getContent(), result.getFailure().getMessage());\n+            future.complete(null);\n         } else {\n-            Request request = result.getRequest();\n-            if (result.isFailed()) {\n-                logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(),\n-                        request.getMethod(), request.getContent(), result.getFailure().getMessage());\n-                future.complete(null);\n-            } else if (result.getResponse().getStatus() == HttpStatus.UNAUTHORIZED_401) {\n-                logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n-                        request.getURI(), request.getMethod(), request.getContent());\n-                future.completeExceptionally(new IllegalStateException(\"Auth Error\"));\n+            switch (response.getStatus()) {\n+                case HttpStatus.OK_200:\n+                    byte[] content = getContent();\n+                    String encoding = getEncoding();\n+                    if (content != null) {\n+                        future.complete(\n+                                new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n+                    } else {\n+                        future.complete(null);\n+                    }\n+                    break;\n+                case HttpStatus.UNAUTHORIZED_401:\n+                    logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n+                            request.getURI(), request.getMethod(), request.getContent());\n+                    future.completeExceptionally(new HttpAuthException());\n+                    break;\n+                default:\n+                    logger.info(\"Requesting '{}' (method='{}', content='{}') failed: {} {}\", request.getURI(),\n+                            request.getMethod(), request.getContent(), response.getStatus(), response.getReason());\n+                    future.completeExceptionally(new IllegalStateException(\"Response - Code\" + response.getStatus()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMTU0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r496201541", "bodyText": "I went ahead and rearranged the logic here into something a bit more straight forward. I noticed that you don't handle other response types here which means that future might hang indefinitely if say a 504 occurs. You need a default fallback that completes the future regardless.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!result.isFailed() && response.getStatus() == HttpStatus.OK_200) {\n          \n          \n            \n                        byte[] content = getContent();\n          \n          \n            \n                        String encoding = getEncoding();\n          \n          \n            \n                        if (content != null) {\n          \n          \n            \n                            future.complete(new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            future.complete(null);\n          \n          \n            \n                        }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        Request request = result.getRequest();\n          \n          \n            \n                        if (result.isFailed()) {\n          \n          \n            \n                            logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(),\n          \n          \n            \n                                    request.getMethod(), request.getContent(), result.getFailure().getMessage());\n          \n          \n            \n                            future.complete(null);\n          \n          \n            \n                        } else if (result.getResponse().getStatus() == HttpStatus.UNAUTHORIZED_401) {\n          \n          \n            \n                            logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n          \n          \n            \n                                    request.getURI(), request.getMethod(), request.getContent());\n          \n          \n            \n                            future.completeExceptionally(new IllegalStateException(\"Auth Error\"));\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    if(result.isFailed()){\n          \n          \n            \n                        logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(),\n          \n          \n            \n                                    request.getMethod(), request.getContent(), result.getFailure().getMessage());\n          \n          \n            \n                        future.complete(null);\n          \n          \n            \n                    }else switch(response.getStatus()) {\n          \n          \n            \n                        case HttpStatus.OK_200:\n          \n          \n            \n                            byte[] content = getContent();\n          \n          \n            \n                            String encoding = getEncoding();\n          \n          \n            \n                            if (content != null) {\n          \n          \n            \n                                future.complete(new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n          \n          \n            \n                            } else {\n          \n          \n            \n                                future.complete(null);\n          \n          \n            \n                            }\n          \n          \n            \n                            break;\n          \n          \n            \n                        case HttpStatus.UNAUTHORIZED_401:\n          \n          \n            \n                            logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n          \n          \n            \n                                    request.getURI(), request.getMethod(), request.getContent());\n          \n          \n            \n                            future.completeExceptionally(new IllegalStateException(\"Auth Error\"));\n          \n          \n            \n                            break;\n          \n          \n            \n                    }", "author": "cpmeister", "createdAt": "2020-09-28T20:05:30Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpResponseListener} is responsible for processing the result of a HTTP request\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpResponseListener extends BufferingResponseListener {\n+    private final Logger logger = LoggerFactory.getLogger(HttpResponseListener.class);\n+    private final CompletableFuture<@Nullable Content> future;\n+    private final String fallbackEncoding;\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future) {\n+        this(future, null);\n+    }\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future, @Nullable String fallbackEncoding) {\n+        this.future = future;\n+        this.fallbackEncoding = fallbackEncoding != null ? fallbackEncoding : StandardCharsets.UTF_8.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void onComplete(@NonNullByDefault({}) Result result) {\n+        Response response = result.getResponse();\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"Received from '{}': {}\", result.getRequest().getURI(), responseToLogString(response));\n+        }\n+        if (!result.isFailed() && response.getStatus() == HttpStatus.OK_200) {\n+            byte[] content = getContent();\n+            String encoding = getEncoding();\n+            if (content != null) {\n+                future.complete(new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n+            } else {\n+                future.complete(null);\n+            }\n+        } else {\n+            Request request = result.getRequest();\n+            if (result.isFailed()) {\n+                logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(),\n+                        request.getMethod(), request.getContent(), result.getFailure().getMessage());\n+                future.complete(null);\n+            } else if (result.getResponse().getStatus() == HttpStatus.UNAUTHORIZED_401) {\n+                logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n+                        request.getURI(), request.getMethod(), request.getContent());\n+                future.completeExceptionally(new IllegalStateException(\"Auth Error\"));\n+            }\n+        }", "originalCommit": "a2f0dd0de4dd3c63a8adeb6dc1311a00dd2dcfd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ce0d77d0587e68508a528423ef162b1362a07d5", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\nindex 861dc9c06e..27c3e3a5c0 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\n\n@@ -54,24 +54,32 @@ public class HttpResponseListener extends BufferingResponseListener {\n         if (logger.isTraceEnabled()) {\n             logger.trace(\"Received from '{}': {}\", result.getRequest().getURI(), responseToLogString(response));\n         }\n-        if (!result.isFailed() && response.getStatus() == HttpStatus.OK_200) {\n-            byte[] content = getContent();\n-            String encoding = getEncoding();\n-            if (content != null) {\n-                future.complete(new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n-            } else {\n-                future.complete(null);\n-            }\n+        Request request = result.getRequest();\n+        if (result.isFailed()) {\n+            logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(), request.getMethod(),\n+                    request.getContent(), result.getFailure().getMessage());\n+            future.complete(null);\n         } else {\n-            Request request = result.getRequest();\n-            if (result.isFailed()) {\n-                logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(),\n-                        request.getMethod(), request.getContent(), result.getFailure().getMessage());\n-                future.complete(null);\n-            } else if (result.getResponse().getStatus() == HttpStatus.UNAUTHORIZED_401) {\n-                logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n-                        request.getURI(), request.getMethod(), request.getContent());\n-                future.completeExceptionally(new IllegalStateException(\"Auth Error\"));\n+            switch (response.getStatus()) {\n+                case HttpStatus.OK_200:\n+                    byte[] content = getContent();\n+                    String encoding = getEncoding();\n+                    if (content != null) {\n+                        future.complete(\n+                                new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n+                    } else {\n+                        future.complete(null);\n+                    }\n+                    break;\n+                case HttpStatus.UNAUTHORIZED_401:\n+                    logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n+                            request.getURI(), request.getMethod(), request.getContent());\n+                    future.completeExceptionally(new HttpAuthException());\n+                    break;\n+                default:\n+                    logger.info(\"Requesting '{}' (method='{}', content='{}') failed: {} {}\", request.getURI(),\n+                            request.getMethod(), request.getContent(), response.getStatus(), response.getReason());\n+                    future.completeExceptionally(new IllegalStateException(\"Response - Code\" + response.getStatus()));\n             }\n         }\n     }\n"}}, {"oid": "6ce0d77d0587e68508a528423ef162b1362a07d5", "url": "https://github.com/openhab/openhab-addons/commit/6ce0d77d0587e68508a528423ef162b1362a07d5", "message": "fixes\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-25T15:24:51Z", "type": "forcePushed"}, {"oid": "fe05dc6aef30b0f2f32f885bca81f8c010fb7cf4", "url": "https://github.com/openhab/openhab-addons/commit/fe05dc6aef30b0f2f32f885bca81f8c010fb7cf4", "message": "fix\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-31T15:39:15Z", "type": "forcePushed"}, {"oid": "0e23276dfd1cd0ca97f9125cf9f30919df54083c", "url": "https://github.com/openhab/openhab-addons/commit/0e23276dfd1cd0ca97f9125cf9f30919df54083c", "message": "Initial contribution\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-31T16:45:26Z", "type": "forcePushed"}, {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "url": "https://github.com/openhab/openhab-addons/commit/882fc67afc78d64aee39f1515d70c9e5a18ce97c", "message": "Initial contribution\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-31T20:13:47Z", "type": "commit"}, {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "url": "https://github.com/openhab/openhab-addons/commit/882fc67afc78d64aee39f1515d70c9e5a18ce97c", "message": "Initial contribution\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-10-31T20:13:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxNzE1OA==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519317158", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Character> URL_PART_DELIMITER = Stream.of('/', '?', '&').collect(Collectors.toSet());\n          \n          \n            \n                private static final Set<Character> URL_PART_DELIMITER = Set.of('/', '?', '&');", "author": "fwolter", "createdAt": "2020-11-08T09:30:58Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Authentication;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.BasicAuthentication;\n+import org.eclipse.jetty.client.util.DigestAuthentication;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.config.HttpChannelMode;\n+import org.openhab.binding.http.internal.config.HttpThingConfig;\n+import org.openhab.binding.http.internal.converter.AbstractTransformingItemConverter;\n+import org.openhab.binding.http.internal.converter.ColorItemConverter;\n+import org.openhab.binding.http.internal.converter.DimmerItemConverter;\n+import org.openhab.binding.http.internal.converter.FixedValueMappingItemConverter;\n+import org.openhab.binding.http.internal.converter.GenericItemConverter;\n+import org.openhab.binding.http.internal.converter.ImageItemConverter;\n+import org.openhab.binding.http.internal.converter.ItemValueConverter;\n+import org.openhab.binding.http.internal.converter.PlayerItemConverter;\n+import org.openhab.binding.http.internal.converter.RollershutterItemConverter;\n+import org.openhab.binding.http.internal.http.Content;\n+import org.openhab.binding.http.internal.http.HttpAuthException;\n+import org.openhab.binding.http.internal.http.HttpResponseListener;\n+import org.openhab.binding.http.internal.http.RefreshingUrlCache;\n+import org.openhab.binding.http.internal.transform.ValueTransformationProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.StateDescription;\n+import org.openhab.core.types.StateDescriptionFragmentBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpThingHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpThingHandler extends BaseThingHandler {\n+    private static final Set<Character> URL_PART_DELIMITER = Stream.of('/', '?', '&').collect(Collectors.toSet());", "originalCommit": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "486c49c209303d071921af901c1d19dba27084cb", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java\nindex 717657f895..173baf41e7 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java\n\n@@ -21,8 +21,6 @@ import java.util.Set;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxODczOA==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519318738", "bodyText": "If I see correctly this exception is only raised if the baseURL is incorrect, not the authentication. You might want to include the exceptions message.", "author": "fwolter", "createdAt": "2020-11-08T09:34:52Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Authentication;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.BasicAuthentication;\n+import org.eclipse.jetty.client.util.DigestAuthentication;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.config.HttpChannelMode;\n+import org.openhab.binding.http.internal.config.HttpThingConfig;\n+import org.openhab.binding.http.internal.converter.AbstractTransformingItemConverter;\n+import org.openhab.binding.http.internal.converter.ColorItemConverter;\n+import org.openhab.binding.http.internal.converter.DimmerItemConverter;\n+import org.openhab.binding.http.internal.converter.FixedValueMappingItemConverter;\n+import org.openhab.binding.http.internal.converter.GenericItemConverter;\n+import org.openhab.binding.http.internal.converter.ImageItemConverter;\n+import org.openhab.binding.http.internal.converter.ItemValueConverter;\n+import org.openhab.binding.http.internal.converter.PlayerItemConverter;\n+import org.openhab.binding.http.internal.converter.RollershutterItemConverter;\n+import org.openhab.binding.http.internal.http.Content;\n+import org.openhab.binding.http.internal.http.HttpAuthException;\n+import org.openhab.binding.http.internal.http.HttpResponseListener;\n+import org.openhab.binding.http.internal.http.RefreshingUrlCache;\n+import org.openhab.binding.http.internal.transform.ValueTransformationProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.StateDescription;\n+import org.openhab.core.types.StateDescriptionFragmentBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpThingHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpThingHandler extends BaseThingHandler {\n+    private static final Set<Character> URL_PART_DELIMITER = Stream.of('/', '?', '&').collect(Collectors.toSet());\n+\n+    private final Logger logger = LoggerFactory.getLogger(HttpThingHandler.class);\n+    private final ValueTransformationProvider valueTransformationProvider;\n+    private final HttpClientProvider httpClientProvider;\n+    private HttpClient httpClient;\n+    private final HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider;\n+\n+    private HttpThingConfig config = new HttpThingConfig();\n+    private final Map<String, RefreshingUrlCache> urlHandlers = new HashMap<>();\n+    private final Map<ChannelUID, ItemValueConverter> channels = new HashMap<>();\n+    private final Map<ChannelUID, String> channelUrls = new HashMap<>();\n+    private @Nullable Authentication authentication;\n+\n+    public HttpThingHandler(Thing thing, HttpClientProvider httpClientProvider,\n+            ValueTransformationProvider valueTransformationProvider,\n+            HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider) {\n+        super(thing);\n+        this.httpClientProvider = httpClientProvider;\n+        this.httpClient = httpClientProvider.getSecureClient();\n+        this.valueTransformationProvider = valueTransformationProvider;\n+        this.httpDynamicStateDescriptionProvider = httpDynamicStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ItemValueConverter itemValueConverter = channels.get(channelUID);\n+        if (itemValueConverter == null) {\n+            logger.warn(\"Cannot find channel implementation for channel {}.\", channelUID);\n+            return;\n+        }\n+\n+        if (command instanceof RefreshType) {\n+            String stateUrl = channelUrls.get(channelUID);\n+            if (stateUrl != null) {\n+                RefreshingUrlCache refreshingUrlCache = urlHandlers.get(stateUrl);\n+                if (refreshingUrlCache != null) {\n+                    try {\n+                        refreshingUrlCache.get().ifPresent(itemValueConverter::process);\n+                    } catch (IllegalArgumentException | IllegalStateException e) {\n+                        logger.warn(\"Failed processing REFRESH command for channel {}: {}\", channelUID, e.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            try {\n+                itemValueConverter.send(command);\n+            } catch (IllegalArgumentException e) {\n+                logger.warn(\"Failed to convert command '{}' to channel '{}' for sending\", command, channelUID);\n+            } catch (IllegalStateException e) {\n+                logger.debug(\"Writing to read-only channel {} not permitted\", channelUID);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(HttpThingConfig.class);\n+\n+        if (config.baseURL.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Parameter baseURL must not be empty!\");\n+            return;\n+        }\n+        authentication = null;\n+        if (!config.username.isEmpty()) {\n+            try {\n+                URI uri = new URI(config.baseURL);\n+                switch (config.authMode) {\n+                    case BASIC:\n+                        authentication = new BasicAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Basic Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    case DIGEST:\n+                        authentication = new DigestAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Digest Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    default:\n+                        logger.warn(\"Unknown authentication method '{}' for thing '{}'\", config.authMode,\n+                                thing.getUID());\n+                }\n+                if (authentication != null) {\n+                    AuthenticationStore authStore = httpClient.getAuthenticationStore();\n+                    authStore.addAuthentication(authentication);\n+                }\n+            } catch (URISyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"failed to create authentication\");", "originalCommit": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5NDk4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519394986", "bodyText": "But this only happens when the authentication is constructed. I clarified the message.", "author": "J-N-K", "createdAt": "2020-11-08T13:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxODczOA=="}], "type": "inlineReview", "revised_code": {"commit": "486c49c209303d071921af901c1d19dba27084cb", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java\nindex 717657f895..173baf41e7 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java\n\n@@ -21,8 +21,6 @@ import java.util.Set;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxOTI3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519319270", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.info(\"Using the insecure client for thing '{}'.\", thing.getUID());\n          \n          \n            \n                        logger.debug(\"Using the insecure client for thing '{}'.\", thing.getUID());", "author": "fwolter", "createdAt": "2020-11-08T09:36:15Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Authentication;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.BasicAuthentication;\n+import org.eclipse.jetty.client.util.DigestAuthentication;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.config.HttpChannelMode;\n+import org.openhab.binding.http.internal.config.HttpThingConfig;\n+import org.openhab.binding.http.internal.converter.AbstractTransformingItemConverter;\n+import org.openhab.binding.http.internal.converter.ColorItemConverter;\n+import org.openhab.binding.http.internal.converter.DimmerItemConverter;\n+import org.openhab.binding.http.internal.converter.FixedValueMappingItemConverter;\n+import org.openhab.binding.http.internal.converter.GenericItemConverter;\n+import org.openhab.binding.http.internal.converter.ImageItemConverter;\n+import org.openhab.binding.http.internal.converter.ItemValueConverter;\n+import org.openhab.binding.http.internal.converter.PlayerItemConverter;\n+import org.openhab.binding.http.internal.converter.RollershutterItemConverter;\n+import org.openhab.binding.http.internal.http.Content;\n+import org.openhab.binding.http.internal.http.HttpAuthException;\n+import org.openhab.binding.http.internal.http.HttpResponseListener;\n+import org.openhab.binding.http.internal.http.RefreshingUrlCache;\n+import org.openhab.binding.http.internal.transform.ValueTransformationProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.StateDescription;\n+import org.openhab.core.types.StateDescriptionFragmentBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpThingHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpThingHandler extends BaseThingHandler {\n+    private static final Set<Character> URL_PART_DELIMITER = Stream.of('/', '?', '&').collect(Collectors.toSet());\n+\n+    private final Logger logger = LoggerFactory.getLogger(HttpThingHandler.class);\n+    private final ValueTransformationProvider valueTransformationProvider;\n+    private final HttpClientProvider httpClientProvider;\n+    private HttpClient httpClient;\n+    private final HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider;\n+\n+    private HttpThingConfig config = new HttpThingConfig();\n+    private final Map<String, RefreshingUrlCache> urlHandlers = new HashMap<>();\n+    private final Map<ChannelUID, ItemValueConverter> channels = new HashMap<>();\n+    private final Map<ChannelUID, String> channelUrls = new HashMap<>();\n+    private @Nullable Authentication authentication;\n+\n+    public HttpThingHandler(Thing thing, HttpClientProvider httpClientProvider,\n+            ValueTransformationProvider valueTransformationProvider,\n+            HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider) {\n+        super(thing);\n+        this.httpClientProvider = httpClientProvider;\n+        this.httpClient = httpClientProvider.getSecureClient();\n+        this.valueTransformationProvider = valueTransformationProvider;\n+        this.httpDynamicStateDescriptionProvider = httpDynamicStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ItemValueConverter itemValueConverter = channels.get(channelUID);\n+        if (itemValueConverter == null) {\n+            logger.warn(\"Cannot find channel implementation for channel {}.\", channelUID);\n+            return;\n+        }\n+\n+        if (command instanceof RefreshType) {\n+            String stateUrl = channelUrls.get(channelUID);\n+            if (stateUrl != null) {\n+                RefreshingUrlCache refreshingUrlCache = urlHandlers.get(stateUrl);\n+                if (refreshingUrlCache != null) {\n+                    try {\n+                        refreshingUrlCache.get().ifPresent(itemValueConverter::process);\n+                    } catch (IllegalArgumentException | IllegalStateException e) {\n+                        logger.warn(\"Failed processing REFRESH command for channel {}: {}\", channelUID, e.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            try {\n+                itemValueConverter.send(command);\n+            } catch (IllegalArgumentException e) {\n+                logger.warn(\"Failed to convert command '{}' to channel '{}' for sending\", command, channelUID);\n+            } catch (IllegalStateException e) {\n+                logger.debug(\"Writing to read-only channel {} not permitted\", channelUID);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(HttpThingConfig.class);\n+\n+        if (config.baseURL.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Parameter baseURL must not be empty!\");\n+            return;\n+        }\n+        authentication = null;\n+        if (!config.username.isEmpty()) {\n+            try {\n+                URI uri = new URI(config.baseURL);\n+                switch (config.authMode) {\n+                    case BASIC:\n+                        authentication = new BasicAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Basic Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    case DIGEST:\n+                        authentication = new DigestAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Digest Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    default:\n+                        logger.warn(\"Unknown authentication method '{}' for thing '{}'\", config.authMode,\n+                                thing.getUID());\n+                }\n+                if (authentication != null) {\n+                    AuthenticationStore authStore = httpClient.getAuthenticationStore();\n+                    authStore.addAuthentication(authentication);\n+                }\n+            } catch (URISyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"failed to create authentication\");\n+            }\n+        } else {\n+            logger.debug(\"No authentication configured for thing '{}'\", thing.getUID());\n+        }\n+\n+        if (config.ignoreSSLErrors) {\n+            logger.info(\"Using the insecure client for thing '{}'.\", thing.getUID());", "originalCommit": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5MTM4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519391380", "bodyText": "This is not written very often but an important information. So I think INFO is ok here. I adjusted the other message.", "author": "J-N-K", "createdAt": "2020-11-08T12:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxOTI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "486c49c209303d071921af901c1d19dba27084cb", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java\nindex 717657f895..173baf41e7 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java\n\n@@ -21,8 +21,6 @@ import java.util.Set;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyMzI5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519323292", "bodyText": "You might want to mention in the readme, that these values are case sensitive.", "author": "fwolter", "createdAt": "2020-11-08T09:46:01Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.math.BigDecimal;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link DimmerItemConverter} implements {@link org.openhab.core.library.items.DimmerItem} conversions\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class DimmerItemConverter extends AbstractTransformingItemConverter {\n+    private static final BigDecimal HUNDRED = BigDecimal.valueOf(100);\n+\n+    private State state = UnDefType.UNDEF;\n+\n+    public DimmerItemConverter(Consumer<State> updateState, Consumer<Command> postCommand,\n+            @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n+            ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n+        super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n+        this.channelConfig = channelConfig;\n+    }\n+\n+    @Override\n+    protected @Nullable Command toCommand(String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString(Command command) {\n+        String string = channelConfig.commandToFixedValue(command);\n+        if (string != null) {\n+            return string;\n+        }\n+\n+        if (command instanceof PercentType) {\n+            return ((PercentType) command).toString();\n+        }\n+\n+        throw new IllegalArgumentException(\"Command type '\" + command.toString() + \"' not supported\");\n+    }\n+\n+    @Override\n+    public State toState(String string) {\n+        State newState = UnDefType.UNDEF;\n+\n+        if (string.equals(channelConfig.onValue)) {", "originalCommit": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "486c49c209303d071921af901c1d19dba27084cb", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java\nindex 49d0f14770..7464202bc4 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java\n\n@@ -93,6 +93,7 @@ public class DimmerItemConverter extends AbstractTransformingItemConverter {\n                 }\n                 newState = new PercentType(value);\n             } catch (NumberFormatException e) {\n+                // ignore\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyNDA1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519324053", "bodyText": "What throws a NumberFormatException here?", "author": "fwolter", "createdAt": "2020-11-08T09:47:53Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.math.BigDecimal;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link DimmerItemConverter} implements {@link org.openhab.core.library.items.DimmerItem} conversions\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class DimmerItemConverter extends AbstractTransformingItemConverter {\n+    private static final BigDecimal HUNDRED = BigDecimal.valueOf(100);\n+\n+    private State state = UnDefType.UNDEF;\n+\n+    public DimmerItemConverter(Consumer<State> updateState, Consumer<Command> postCommand,\n+            @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n+            ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n+        super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n+        this.channelConfig = channelConfig;\n+    }\n+\n+    @Override\n+    protected @Nullable Command toCommand(String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString(Command command) {\n+        String string = channelConfig.commandToFixedValue(command);\n+        if (string != null) {\n+            return string;\n+        }\n+\n+        if (command instanceof PercentType) {\n+            return ((PercentType) command).toString();\n+        }\n+\n+        throw new IllegalArgumentException(\"Command type '\" + command.toString() + \"' not supported\");\n+    }\n+\n+    @Override\n+    public State toState(String string) {\n+        State newState = UnDefType.UNDEF;\n+\n+        if (string.equals(channelConfig.onValue)) {\n+            newState = PercentType.HUNDRED;\n+        } else if (string.equals(channelConfig.offValue)) {\n+            newState = PercentType.ZERO;\n+        } else if (string.equals(channelConfig.increaseValue) && state instanceof PercentType) {\n+            BigDecimal newBrightness = ((PercentType) state).toBigDecimal().add(channelConfig.step);\n+            if (HUNDRED.compareTo(newBrightness) < 0) {\n+                newBrightness = HUNDRED;\n+            }\n+            newState = new PercentType(newBrightness);\n+        } else if (string.equals(channelConfig.decreaseValue) && state instanceof PercentType) {\n+            BigDecimal newBrightness = ((PercentType) state).toBigDecimal().subtract(channelConfig.step);\n+            if (BigDecimal.ZERO.compareTo(newBrightness) > 0) {\n+                newBrightness = BigDecimal.ZERO;\n+            }\n+            newState = new PercentType(newBrightness);\n+        } else {\n+            try {\n+                BigDecimal value = new BigDecimal(string);\n+                if (value.compareTo(PercentType.HUNDRED.toBigDecimal()) > 0) {\n+                    value = PercentType.HUNDRED.toBigDecimal();\n+                }\n+                if (value.compareTo(PercentType.ZERO.toBigDecimal()) < 0) {\n+                    value = PercentType.ZERO.toBigDecimal();\n+                }\n+                newState = new PercentType(value);\n+            } catch (NumberFormatException e) {", "originalCommit": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5NDEyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519394121", "bodyText": "BigDecimal(string) throws a NumberFormatException if string is not a number.", "author": "J-N-K", "createdAt": "2020-11-08T13:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyNDA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "486c49c209303d071921af901c1d19dba27084cb", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java\nindex 49d0f14770..7464202bc4 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java\n\n@@ -93,6 +93,7 @@ public class DimmerItemConverter extends AbstractTransformingItemConverter {\n                 }\n                 newState = new PercentType(value);\n             } catch (NumberFormatException e) {\n+                // ignore\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyNTEzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519325137", "bodyText": "This converter is not mentioned in the readme.", "author": "fwolter", "createdAt": "2020-11-08T09:50:41Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/PlayerItemConverter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.library.types.NextPreviousType;\n+import org.openhab.core.library.types.PlayPauseType;\n+import org.openhab.core.library.types.RewindFastforwardType;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link PlayerItemConverter} implements {@link org.openhab.core.library.items.RollershutterItem}\n+ * conversions\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class PlayerItemConverter extends AbstractTransformingItemConverter {", "originalCommit": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyNTQ2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519325467", "bodyText": "Marker", "author": "fwolter", "createdAt": "2020-11-08T09:51:28Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/RollershutterItemConverter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.math.BigDecimal;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StopMoveType;\n+import org.openhab.core.library.types.UpDownType;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link RollershutterItemConverter} implements {@link org.openhab.core.library.items.RollershutterItem}\n+ * conversions\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class RollershutterItemConverter extends AbstractTransformingItemConverter {\n+    private final HttpChannelConfig channelConfig;\n+\n+    public RollershutterItemConverter(Consumer<State> updateState, Consumer<Command> postCommand,\n+            @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n+            ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n+        super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n+        this.channelConfig = channelConfig;\n+    }\n+\n+    @Override\n+    public String toString(Command command) {\n+        String string = channelConfig.commandToFixedValue(command);\n+        if (string != null) {\n+            return string;\n+        }\n+\n+        if (command instanceof PercentType) {\n+            final String downValue = channelConfig.downValue;\n+            final String upValue = channelConfig.upValue;\n+            if (command.equals(PercentType.HUNDRED) && downValue != null) {\n+                return downValue;\n+            } else if (command.equals(PercentType.ZERO) && upValue != null) {\n+                return upValue;\n+            } else {\n+                return ((PercentType) command).toString();\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\"Command type '\" + command.toString() + \"' not supported\");\n+    }\n+\n+    @Override\n+    protected @Nullable Command toCommand(String string) {\n+        if (string.equals(channelConfig.upValue)) {\n+            return UpDownType.UP;\n+        } else if (string.equals(channelConfig.downValue)) {\n+            return UpDownType.DOWN;\n+        } else if (string.equals(channelConfig.moveValue)) {\n+            return StopMoveType.MOVE;\n+        } else if (string.equals(channelConfig.stopValue)) {\n+            return StopMoveType.STOP;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public State toState(String string) {\n+        try {\n+            BigDecimal value = new BigDecimal(string);\n+            if (value.compareTo(PercentType.HUNDRED.toBigDecimal()) > 0) {\n+                return PercentType.HUNDRED;\n+            }\n+            if (value.compareTo(PercentType.ZERO.toBigDecimal()) < 0) {\n+                return PercentType.ZERO;\n+            }\n+        } catch (NumberFormatException e) {", "originalCommit": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "486c49c209303d071921af901c1d19dba27084cb", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/RollershutterItemConverter.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/RollershutterItemConverter.java\nindex 397b918d1b..b77568751e 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/RollershutterItemConverter.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/RollershutterItemConverter.java\n\n@@ -92,6 +92,7 @@ public class RollershutterItemConverter extends AbstractTransformingItemConverte\n                 return PercentType.ZERO;\n             }\n         } catch (NumberFormatException e) {\n+            // ignore\n         }\n \n         return UnDefType.UNDEF;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyODIyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519328227", "bodyText": "encoding can't be null here. Or do you mean this.encoding?\nIllegalArgumentException is only thrown if encoding is null.", "author": "fwolter", "createdAt": "2020-11-08T09:58:07Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/Content.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link Content} defines the pre-processed response\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Content {\n+    private final byte[] rawContent;\n+    private final Charset encoding;\n+    private final @Nullable String mediaType;\n+\n+    public Content(byte[] rawContent, String encoding, @Nullable String mediaType) {\n+        this.rawContent = rawContent;\n+        this.mediaType = mediaType;\n+\n+        Charset finalEncoding = StandardCharsets.UTF_8;\n+        if (encoding != null) {\n+            try {\n+                finalEncoding = Charset.forName(encoding);\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }", "originalCommit": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5MzEwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519393106", "bodyText": "Null-Check is leftover from a previous version where encoding could be null.\nIllegalCharsetNameException is a subset from IllegalArgumentException, so this also catechs an invalid name.", "author": "J-N-K", "createdAt": "2020-11-08T13:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyODIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "486c49c209303d071921af901c1d19dba27084cb", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/Content.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/Content.java\nindex 237831b847..72d19b99fd 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/Content.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/Content.java\n\n@@ -34,11 +34,9 @@ public class Content {\n         this.mediaType = mediaType;\n \n         Charset finalEncoding = StandardCharsets.UTF_8;\n-        if (encoding != null) {\n-            try {\n-                finalEncoding = Charset.forName(encoding);\n-            } catch (IllegalArgumentException e) {\n-            }\n+        try {\n+            finalEncoding = Charset.forName(encoding);\n+        } catch (IllegalArgumentException e) {\n         }\n         this.encoding = finalEncoding;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyOTYyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519329621", "bodyText": "Does this annotation has any effect?", "author": "fwolter", "createdAt": "2020-11-08T10:01:28Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpResponseListener} is responsible for processing the result of a HTTP request\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpResponseListener extends BufferingResponseListener {\n+    private final Logger logger = LoggerFactory.getLogger(HttpResponseListener.class);\n+    private final CompletableFuture<@Nullable Content> future;\n+    private final String fallbackEncoding;\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future) {\n+        this(future, null);\n+    }\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future, @Nullable String fallbackEncoding) {\n+        this.future = future;\n+        this.fallbackEncoding = fallbackEncoding != null ? fallbackEncoding : StandardCharsets.UTF_8.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")", "originalCommit": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "486c49c209303d071921af901c1d19dba27084cb", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\nindex 27c3e3a5c0..09348ed14b 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\n\n@@ -48,7 +48,6 @@ public class HttpResponseListener extends BufferingResponseListener {\n     }\n \n     @Override\n-    @SuppressWarnings(\"null\")\n     public void onComplete(@NonNullByDefault({}) Result result) {\n         Response response = result.getResponse();\n         if (logger.isTraceEnabled()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMzMDE2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519330160", "bodyText": "info is not adequate here. See https://www.openhab.org/docs/developer/guidelines.html#f-logging\n\"info logging should be used sparsely. e.g. a newly started component or a user file that has been loaded.\"", "author": "fwolter", "createdAt": "2020-11-08T10:02:41Z", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpResponseListener} is responsible for processing the result of a HTTP request\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpResponseListener extends BufferingResponseListener {\n+    private final Logger logger = LoggerFactory.getLogger(HttpResponseListener.class);\n+    private final CompletableFuture<@Nullable Content> future;\n+    private final String fallbackEncoding;\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future) {\n+        this(future, null);\n+    }\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future, @Nullable String fallbackEncoding) {\n+        this.future = future;\n+        this.fallbackEncoding = fallbackEncoding != null ? fallbackEncoding : StandardCharsets.UTF_8.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void onComplete(@NonNullByDefault({}) Result result) {\n+        Response response = result.getResponse();\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"Received from '{}': {}\", result.getRequest().getURI(), responseToLogString(response));\n+        }\n+        Request request = result.getRequest();\n+        if (result.isFailed()) {\n+            logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(), request.getMethod(),\n+                    request.getContent(), result.getFailure().getMessage());\n+            future.complete(null);\n+        } else {\n+            switch (response.getStatus()) {\n+                case HttpStatus.OK_200:\n+                    byte[] content = getContent();\n+                    String encoding = getEncoding();\n+                    if (content != null) {\n+                        future.complete(\n+                                new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n+                    } else {\n+                        future.complete(null);\n+                    }\n+                    break;\n+                case HttpStatus.UNAUTHORIZED_401:\n+                    logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n+                            request.getURI(), request.getMethod(), request.getContent());\n+                    future.completeExceptionally(new HttpAuthException());\n+                    break;\n+                default:\n+                    logger.info(\"Requesting '{}' (method='{}', content='{}') failed: {} {}\", request.getURI(),", "originalCommit": "882fc67afc78d64aee39f1515d70c9e5a18ce97c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5MzQ3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519393473", "bodyText": "Since this is an error state, I raised it to warn.", "author": "J-N-K", "createdAt": "2020-11-08T13:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMzMDE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "486c49c209303d071921af901c1d19dba27084cb", "chunk": "diff --git a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\nindex 27c3e3a5c0..09348ed14b 100644\n--- a/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\n+++ b/bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java\n\n@@ -48,7 +48,6 @@ public class HttpResponseListener extends BufferingResponseListener {\n     }\n \n     @Override\n-    @SuppressWarnings(\"null\")\n     public void onComplete(@NonNullByDefault({}) Result result) {\n         Response response = result.getResponse();\n         if (logger.isTraceEnabled()) {\n"}}, {"oid": "486c49c209303d071921af901c1d19dba27084cb", "url": "https://github.com/openhab/openhab-addons/commit/486c49c209303d071921af901c1d19dba27084cb", "message": "address review comments\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-11-08T13:28:22Z", "type": "commit"}, {"oid": "5df8542f6aa204e6609bb6184b5dde29d8ca5802", "url": "https://github.com/openhab/openhab-addons/commit/5df8542f6aa204e6609bb6184b5dde29d8ca5802", "message": "address review comments\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-11-09T15:24:16Z", "type": "commit"}]}