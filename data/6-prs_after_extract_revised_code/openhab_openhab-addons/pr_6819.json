{"pr_number": 6819, "pr_title": "[Exec] Properly split command & pipe support", "pr_createdAt": "2020-01-12T11:16:14Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/6819", "timeline": [{"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "url": "https://github.com/openhab/openhab-addons/commit/0b706ac448b879e1207efe2ec39d951e3f52a7a3", "message": "[Exec] Properly split command\n\n- Implemented @@ manual split (@see https://www.openhab.org/docs/configuration/actions.html#exec-actions)\n- Pass to shell if not manually split (detect shell via https://stackoverflow.com/a/31547504/7508309, permission by author)\nFixes #6729\nAdded benefit: Pass to shell allows for pipes\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>", "committedDate": "2020-01-12T11:02:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDExNw==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584117", "bodyText": "\"pass to system\" ? or \"pass to shell\" ? Not always bash.", "author": "9037568", "createdAt": "2020-01-12T13:42:43Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -52,9 +53,20 @@\n  * sent to one of the channels.\n  *\n  * @author Karel Goderis - Initial contribution\n+ * @author Constantin Piber - Added better argument support (delimiter and pass to bash)", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4Njk1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365586955", "bodyText": "shell, yes. In fact it's never bash, I changed that later and forgot change this header", "author": "cpiber", "createdAt": "2020-01-12T14:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDExNw=="}], "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -53,7 +54,7 @@ import org.slf4j.LoggerFactory;\n  * sent to one of the channels.\n  *\n  * @author Karel Goderis - Initial contribution\n- * @author Constantin Piber - Added better argument support (delimiter and pass to bash)\n+ * @author Constantin Piber - Added better argument support (delimiter and pass to shell)\n  */\n @NonNullByDefault\n public class ExecHandler extends BaseThingHandler {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDI3OA==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584278", "bodyText": "Eliminate the unneeded Object[] and just pass commandLine and e.getMessage().\nThis should also be a WARN instead of an ERROR.", "author": "9037568", "createdAt": "2020-01-12T13:45:42Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NzAzMg==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365587032", "bodyText": "Sorry, I just copied it as it's written below...\nWhy a WARN? It's an exception and nothing gets executed, doesn't seem like \"just a warning\" to me", "author": "cpiber", "createdAt": "2020-01-12T14:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzMTUwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r367231501", "bodyText": "WARN because that is the standard practice for logging in OH.", "author": "9037568", "createdAt": "2020-01-16T05:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDQyMA==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584420", "bodyText": "PatternSyntaxException", "author": "9037568", "createdAt": "2020-01-12T13:48:13Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDU2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584567", "bodyText": "The @@ case above doesn't have a corresponding output. I think this isn't useful.", "author": "9037568", "createdAt": "2020-01-12T13:50:47Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDY2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584666", "bodyText": "Again, no need for Object[] here.", "author": "9037568", "createdAt": "2020-01-12T13:52:35Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDY3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584677", "bodyText": "No need for Object[] here.", "author": "9037568", "createdAt": "2020-01-12T13:52:49Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDY5NA==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584694", "bodyText": "No need for Object[] here.", "author": "9037568", "createdAt": "2020-01-12T13:53:07Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDc3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584779", "bodyText": "commandLine is already a String.", "author": "9037568", "createdAt": "2020-01-12T13:54:02Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4Nzk5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365587995", "bodyText": "I simply wrapped what was there in this array, maybe the original author did this for a reason.", "author": "cpiber", "createdAt": "2020-01-12T14:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzNDM1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r367234352", "bodyText": "Doesn't matter what the reason was, still needs fixing.", "author": "9037568", "createdAt": "2020-01-16T05:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDg0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584845", "bodyText": "commandLine is already a String.", "author": "9037568", "createdAt": "2020-01-12T13:55:26Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDkwMA==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584900", "bodyText": "This should be a WARN instead of an ERROR.", "author": "9037568", "createdAt": "2020-01-12T13:56:08Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4ODAzNA==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365588034", "bodyText": "Again, nothing is executed, why a WARN then?", "author": "cpiber", "createdAt": "2020-01-12T14:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzNDQ0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r367234445", "bodyText": "See previous comment on logging.", "author": "9037568", "createdAt": "2020-01-16T05:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDk0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584947", "bodyText": "This should be a WARN instead of an ERROR.", "author": "9037568", "createdAt": "2020-01-12T13:56:38Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDk2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584965", "bodyText": "No need for Object[] here.", "author": "9037568", "createdAt": "2020-01-12T13:57:01Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",\n-                            new Object[] { commandLine.toString(), e.getMessage() });\n+                            new Object[] { Arrays.asList(cmdArray), e.getMessage() });", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTA0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585046", "bodyText": "Eliminate this block.", "author": "9037568", "createdAt": "2020-01-12T13:58:31Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",\n-                            new Object[] { commandLine.toString(), e.getMessage() });\n+                            new Object[] { Arrays.asList(cmdArray), e.getMessage() });\n+                    if (!didSplit) {", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4ODA2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365588069", "bodyText": "Which block and why?", "author": "cpiber", "createdAt": "2020-01-12T14:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzMjU4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r367232587", "bodyText": "The if block indicated.", "author": "9037568", "createdAt": "2020-01-16T05:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -183,33 +184,31 @@ public class ExecHandler extends BaseThingHandler {\n                 String shell = \"\";\n                 if (commandLine.contains(CMD_LINE_DELIMITER)) {\n                     didSplit = true;\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n-                    } catch (Exception e) {\n+                    } catch (PatternSyntaxException e) {\n                         logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n-                                new Object[] { commandLine.toString(), e.getMessage() });\n+                                commandLine.toString(), e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n                     }\n                 } else {\n                     // Invoke shell with 'c' option and pass string\n-                    logger.debug(\"Sending to shell for parsing command.\");\n-                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n                         shell = SHELL_WINDOWS;\n                         cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n-                        logger.debug(\"OS: WINDOWS ({})\",\n-                                new Object[] { Util.getOSString() });\n-                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n                         // assume sh is present, should all be POSIX-compliant\n                         shell = SHELL_NIX;\n                         cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n-                        logger.debug(\"OS: *NIX ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n                     } else {\n                         String err = \"OS not supported, please manually split commands!\";\n-                        logger.debug(\"OS: Unknown ({})\",\n-                                new Object[] { Util.getOSString() });\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n                         logger.error(err);\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(err));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTU0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585547", "bodyText": "I'd recommend making these methods part of the ExecHandler class directly. If not, this class needs to be in a new file.", "author": "9037568", "createdAt": "2020-01-12T14:07:34Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -353,24 +351,22 @@ public class ExecHandler extends BaseThingHandler {\n         return new String[] { type, pattern };\n     }\n \n-}\n \n \n-/**\n- * Contains information about which operating system openHAB is running on.\n- * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n- *\n- * @author Constantin Piber (for Memin) - Initial contribution\n- */\n-class Util {\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n     public enum OS {\n-        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n-    };// Operating systems.\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n \n-    private static OS os = null;\n+    private static OS os = OS.NOT_SET;\n \n-    public static OS getOS() {\n-        if (os == null) {\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n             String operSys = System.getProperty(\"os.name\").toLowerCase();\n             if (operSys.contains(\"win\")) {\n                 os = OS.WINDOWS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTU2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585569", "bodyText": "\"UNKNOWN\"", "author": "9037568", "createdAt": "2020-01-12T14:07:50Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -353,24 +351,22 @@ public class ExecHandler extends BaseThingHandler {\n         return new String[] { type, pattern };\n     }\n \n-}\n \n \n-/**\n- * Contains information about which operating system openHAB is running on.\n- * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n- *\n- * @author Constantin Piber (for Memin) - Initial contribution\n- */\n-class Util {\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n     public enum OS {\n-        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n-    };// Operating systems.\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n \n-    private static OS os = null;\n+    private static OS os = OS.NOT_SET;\n \n-    public static OS getOS() {\n-        if (os == null) {\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n             String operSys = System.getProperty(\"os.name\").toLowerCase();\n             if (operSys.contains(\"win\")) {\n                 os = OS.WINDOWS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTYzMA==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585630", "bodyText": "Recommend eliminating this comment.", "author": "9037568", "createdAt": "2020-01-12T14:08:39Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n+    };// Operating systems.", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -353,24 +351,22 @@ public class ExecHandler extends BaseThingHandler {\n         return new String[] { type, pattern };\n     }\n \n-}\n \n \n-/**\n- * Contains information about which operating system openHAB is running on.\n- * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n- *\n- * @author Constantin Piber (for Memin) - Initial contribution\n- */\n-class Util {\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n     public enum OS {\n-        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n-    };// Operating systems.\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n \n-    private static OS os = null;\n+    private static OS os = OS.NOT_SET;\n \n-    public static OS getOS() {\n-        if (os == null) {\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n             String operSys = System.getProperty(\"os.name\").toLowerCase();\n             if (operSys.contains(\"win\")) {\n                 os = OS.WINDOWS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTgyMA==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585820", "bodyText": "Recommend renaming this method to getOperatingSystemType()", "author": "9037568", "createdAt": "2020-01-12T14:12:09Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n+    };// Operating systems.\n+\n+    private static OS os = null;\n+\n+    public static OS getOS() {", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -353,24 +351,22 @@ public class ExecHandler extends BaseThingHandler {\n         return new String[] { type, pattern };\n     }\n \n-}\n \n \n-/**\n- * Contains information about which operating system openHAB is running on.\n- * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n- *\n- * @author Constantin Piber (for Memin) - Initial contribution\n- */\n-class Util {\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n     public enum OS {\n-        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n-    };// Operating systems.\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n \n-    private static OS os = null;\n+    private static OS os = OS.NOT_SET;\n \n-    public static OS getOS() {\n-        if (os == null) {\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n             String operSys = System.getProperty(\"os.name\").toLowerCase();\n             if (operSys.contains(\"win\")) {\n                 os = OS.WINDOWS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTgzNg==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585836", "bodyText": "Reommend renaming this method to getOperatingSystemName()", "author": "9037568", "createdAt": "2020-01-12T14:12:35Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n+    };// Operating systems.\n+\n+    private static OS os = null;\n+\n+    public static OS getOS() {\n+        if (os == null) {\n+            String operSys = System.getProperty(\"os.name\").toLowerCase();\n+            if (operSys.contains(\"win\")) {\n+                os = OS.WINDOWS;\n+            } else if (operSys.contains(\"nix\") || operSys.contains(\"nux\")\n+                    || operSys.contains(\"aix\")) {\n+                os = OS.LINUX;\n+            } else if (operSys.contains(\"mac\")) {\n+                os = OS.MAC;\n+            } else if (operSys.contains(\"sunos\")) {\n+                os = OS.SOLARIS;\n+            } else {\n+                os = OS.UNKOWN;\n+            }\n+        }\n+        return os;\n+    }\n+\n+    public static String getOSString() {", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 6696ff0d5b..dd124b27d9 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -353,24 +351,22 @@ public class ExecHandler extends BaseThingHandler {\n         return new String[] { type, pattern };\n     }\n \n-}\n \n \n-/**\n- * Contains information about which operating system openHAB is running on.\n- * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n- *\n- * @author Constantin Piber (for Memin) - Initial contribution\n- */\n-class Util {\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n     public enum OS {\n-        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n-    };// Operating systems.\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n \n-    private static OS os = null;\n+    private static OS os = OS.NOT_SET;\n \n-    public static OS getOS() {\n-        if (os == null) {\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n             String operSys = System.getProperty(\"os.name\").toLowerCase();\n             if (operSys.contains(\"win\")) {\n                 os = OS.WINDOWS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NjM1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365586351", "bodyText": "Don't these changes break the way lastInput is used?", "author": "9037568", "createdAt": "2020-01-12T14:21:18Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -97,9 +109,8 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n                     lastInput = command.toString();\n                     if (lastInput != null && !lastInput.equals(previousInput)) {\n                         if (getConfig().get(AUTORUN) != null && ((Boolean) getConfig().get(AUTORUN)).booleanValue()) {\n-                            lastInput = command.toString();", "originalCommit": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NzU1NA==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365587554", "bodyText": "Here I just removed the duplicate of this lastInput = command.toString();.\nIf you mean as a whole, no. lastInput can still be used as multiple arguments if no quotes are used (in fact it's exactly the same, just that using it as one argument surrounded by quotes now works)", "author": "cpiber", "createdAt": "2020-01-12T14:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NjM1MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "url": "https://github.com/openhab/openhab-addons/commit/4827bc82b91f29d0cb9cb2ccf986d3e210402605", "message": "Incorporate suggested changes\n\nChanges as suggested by @9037568\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>", "committedDate": "2020-01-12T14:58:57Z", "type": "commit"}, {"oid": "51498e1dcf2460f9bee741fa5b9b3ecc9bee27e5", "url": "https://github.com/openhab/openhab-addons/commit/51498e1dcf2460f9bee741fa5b9b3ecc9bee27e5", "message": "Remove remaining `new Object[] {...}`\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>", "committedDate": "2020-01-12T15:04:31Z", "type": "commit"}, {"oid": "518f06826a42eb27d59b2031cc2fc2dc8eebdb2b", "url": "https://github.com/openhab/openhab-addons/commit/518f06826a42eb27d59b2031cc2fc2dc8eebdb2b", "message": "Fixed logging levels error to warn per standard\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>", "committedDate": "2020-01-16T06:17:45Z", "type": "commit"}, {"oid": "d2767d7105978ed0f0f3c2e82052a1cdd393959c", "url": "https://github.com/openhab/openhab-addons/commit/d2767d7105978ed0f0f3c2e82052a1cdd393959c", "message": "Removed redundant .toString() and log\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>", "committedDate": "2020-01-16T06:21:04Z", "type": "commit"}, {"oid": "4b9a0434e1875df5109aca1393f08819c0fe51cb", "url": "https://github.com/openhab/openhab-addons/commit/4b9a0434e1875df5109aca1393f08819c0fe51cb", "message": "Commands starting with any shell split by spaces\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>", "committedDate": "2020-01-21T07:50:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5NDIwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r368994205", "bodyText": "The commandLine has already been determined to be longer than 0, up at line 156, so this statement is not needed.", "author": "9037568", "createdAt": "2020-01-21T13:18:47Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -345,6 +350,45 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = (shell.length == 0);\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh)) {\n+                startsWithShell = true;\n+                break;\n+            }\n+        }\n+\n+        if (!startsWithShell) {\n+            if (commandLine.length() != 0) {", "originalCommit": "4b9a0434e1875df5109aca1393f08819c0fe51cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44cc86811d333b92299db8acbdf5c5bc27b68bf4", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 544d71f399..1cf7e4b35d 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -361,20 +361,16 @@ public class ExecHandler extends BaseThingHandler {\n      * @return command array\n      */\n     protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n-        boolean startsWithShell = (shell.length == 0);\n+        boolean startsWithShell = false;\n         for (String sh : shell) {\n-            if (commandLine.startsWith(sh)) {\n+            if (commandLine.startsWith(sh+\" \")) {\n                 startsWithShell = true;\n                 break;\n             }\n         }\n \n         if (!startsWithShell) {\n-            if (commandLine.length() != 0) {\n-                return new String[]{shell[0], cOption, commandLine};\n-            } else {\n-                return new String[] {};\n-            }\n+            return new String[]{shell[0], cOption, commandLine};\n         } else {\n             logger.debug(\"Splitting by spaces\");\n             try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5NjMxMg==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r368996312", "bodyText": "boolean startsWithShell = false;", "author": "9037568", "createdAt": "2020-01-21T13:23:06Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -345,6 +350,45 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = (shell.length == 0);", "originalCommit": "4b9a0434e1875df5109aca1393f08819c0fe51cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44cc86811d333b92299db8acbdf5c5bc27b68bf4", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 544d71f399..1cf7e4b35d 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -361,20 +361,16 @@ public class ExecHandler extends BaseThingHandler {\n      * @return command array\n      */\n     protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n-        boolean startsWithShell = (shell.length == 0);\n+        boolean startsWithShell = false;\n         for (String sh : shell) {\n-            if (commandLine.startsWith(sh)) {\n+            if (commandLine.startsWith(sh+\" \")) {\n                 startsWithShell = true;\n                 break;\n             }\n         }\n \n         if (!startsWithShell) {\n-            if (commandLine.length() != 0) {\n-                return new String[]{shell[0], cOption, commandLine};\n-            } else {\n-                return new String[] {};\n-            }\n+            return new String[]{shell[0], cOption, commandLine};\n         } else {\n             logger.debug(\"Splitting by spaces\");\n             try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5NzQ5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r368997497", "bodyText": "This will fail for commands like \"shout\", \"show\", etc. Need to have a space after the shell string.", "author": "9037568", "createdAt": "2020-01-21T13:25:42Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -345,6 +350,45 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = (shell.length == 0);\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh)) {", "originalCommit": "4b9a0434e1875df5109aca1393f08819c0fe51cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44cc86811d333b92299db8acbdf5c5bc27b68bf4", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 544d71f399..1cf7e4b35d 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -361,20 +361,16 @@ public class ExecHandler extends BaseThingHandler {\n      * @return command array\n      */\n     protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n-        boolean startsWithShell = (shell.length == 0);\n+        boolean startsWithShell = false;\n         for (String sh : shell) {\n-            if (commandLine.startsWith(sh)) {\n+            if (commandLine.startsWith(sh+\" \")) {\n                 startsWithShell = true;\n                 break;\n             }\n         }\n \n         if (!startsWithShell) {\n-            if (commandLine.length() != 0) {\n-                return new String[]{shell[0], cOption, commandLine};\n-            } else {\n-                return new String[] {};\n-            }\n+            return new String[]{shell[0], cOption, commandLine};\n         } else {\n             logger.debug(\"Splitting by spaces\");\n             try {\n"}}, {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4", "url": "https://github.com/openhab/openhab-addons/commit/44cc86811d333b92299db8acbdf5c5bc27b68bf4", "message": "Remove redundant checks, better shell checks\n\nonly invoke shell if the first WORD is a shell-program, not just the\nbeginning of the string (ex. shout shouldn't match)\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>", "committedDate": "2020-01-22T06:35:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NTAwMg==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370245002", "bodyText": "I have a question here: Why don't you get the operating system type once and then use the local variable in a switch-statement. Are your sure that everything other than OS.WINDOWS and OS.UNKNOWN is a supported *nix? And please add the unsupported OS-name to the warn-message logger.warn(\"OS '{}' not supported, please split commands manually!\", getOperatingSystemName());).\nEdit: I found it below. But the if-else is not very intuitive here. Please use a switch-statement.", "author": "J-N-K", "createdAt": "2020-01-23T17:08:23Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -160,21 +172,61 @@ public void run() {\n                         commandLine = String.format(commandLine, Calendar.getInstance().getTime());\n                     }\n                 } catch (IllegalFormatException e) {\n-                    logger.error(\n+                    logger.warn(\n                             \"An exception occurred while formatting the command line with the current time and input values : '{}'\",\n                             e.getMessage());\n                     updateState(RUN, OnOffType.OFF);\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                String[] shell;\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (PatternSyntaxException e) {\n+                        logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                                commandLine, e.getMessage());\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {", "originalCommit": "44cc86811d333b92299db8acbdf5c5bc27b68bf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1dad1337fa0c9cbdc7be159689f55a19b520e56", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 1cf7e4b35d..fca7fb05e6 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -186,8 +186,7 @@ public class ExecHandler extends BaseThingHandler {\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n                     } catch (PatternSyntaxException e) {\n-                        logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n-                                commandLine, e.getMessage());\n+                        logger.warn(\"An exception occurred while splitting '{}' : '{}'\", commandLine, e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NzE0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370247146", "bodyText": "Is it necessary to catch Exception here? According to the docs there is a limited number of exceptions, I think we can omit the NPE if we make sure that none of the commands is null (which should be done anyway).", "author": "J-N-K", "createdAt": "2020-01-23T17:12:44Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -160,21 +172,61 @@ public void run() {\n                         commandLine = String.format(commandLine, Calendar.getInstance().getTime());\n                     }\n                 } catch (IllegalFormatException e) {\n-                    logger.error(\n+                    logger.warn(\n                             \"An exception occurred while formatting the command line with the current time and input values : '{}'\",\n                             e.getMessage());\n                     updateState(RUN, OnOffType.OFF);\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                String[] shell;\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (PatternSyntaxException e) {\n+                        logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                                commandLine, e.getMessage());\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                        cmdArray = createCmdArray(shell, \"/c\", commandLine);\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n+                        cmdArray = createCmdArray(shell, \"-c\", commandLine);\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n+                        logger.warn(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                if (cmdArray.length == 0) {\n+                    logger.trace(\"Empty command received, not executing\");\n+                    return;\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {", "originalCommit": "44cc86811d333b92299db8acbdf5c5bc27b68bf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1dad1337fa0c9cbdc7be159689f55a19b520e56", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 1cf7e4b35d..fca7fb05e6 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -186,8 +186,7 @@ public class ExecHandler extends BaseThingHandler {\n                     try {\n                         cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n                     } catch (PatternSyntaxException e) {\n-                        logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n-                                commandLine, e.getMessage());\n+                        logger.warn(\"An exception occurred while splitting '{}' : '{}'\", commandLine, e.getMessage());\n                         updateState(RUN, OnOffType.OFF);\n                         updateState(OUTPUT, new StringType(e.getMessage()));\n                         return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NzU4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370247581", "bodyText": "And this should be warn, also below. error is reserved for the framework of occasions where the stability of the system may be affected.", "author": "J-N-K", "createdAt": "2020-01-23T17:13:35Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -193,7 +245,7 @@ public void run() {\n                     isr.close();\n                 } catch (IOException e) {\n                     logger.error(\"An exception occurred while reading the stdout when executing '{}' : '{}'\",", "originalCommit": "44cc86811d333b92299db8acbdf5c5bc27b68bf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1dad1337fa0c9cbdc7be159689f55a19b520e56", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 1cf7e4b35d..fca7fb05e6 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -244,7 +249,7 @@ public class ExecHandler extends BaseThingHandler {\n                     }\n                     isr.close();\n                 } catch (IOException e) {\n-                    logger.error(\"An exception occurred while reading the stdout when executing '{}' : '{}'\",\n+                    logger.warn(\"An exception occurred while reading the stdout when executing '{}' : '{}'\",\n                             commandLine, e.getMessage());\n                 }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370248533", "bodyText": "Please run mvn spotless:apply after the code issues are done.", "author": "J-N-K", "createdAt": "2020-01-23T17:15:31Z", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -298,4 +350,76 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n-}\n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = false;\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh+\" \")) {\n+                startsWithShell = true;\n+                break;\n+            }\n+        }\n+\n+        if (!startsWithShell) {\n+            return new String[]{shell[0], cOption, commandLine};\n+        } else {\n+            logger.debug(\"Splitting by spaces\");\n+            try {\n+                return commandLine.split(\" \");\n+            } catch (PatternSyntaxException e) {\n+                logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                        commandLine, e.getMessage());\n+                updateState(RUN, OnOffType.OFF);\n+                updateState(OUTPUT, new StringType(e.getMessage()));\n+                return new String[] {};\n+            }\n+        }\n+    }\n+\n+\n+\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n+\n+    private static OS os = OS.NOT_SET;\n+\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n+            String operSys = System.getProperty(\"os.name\").toLowerCase();\n+            if (operSys.contains(\"win\")) {\n+                os = OS.WINDOWS;\n+            } else if (operSys.contains(\"nix\") || operSys.contains(\"nux\")\n+                    || operSys.contains(\"aix\")) {\n+                os = OS.LINUX;\n+            } else if (operSys.contains(\"mac\")) {\n+                os = OS.MAC;\n+            } else if (operSys.contains(\"sunos\")) {\n+                os = OS.SOLARIS;\n+            } else {\n+                os = OS.UNKNOWN;\n+            }\n+        }\n+        return os;\n+    }\n+\n+    public static String getOperatingSystemName() {\n+        return System.getProperty(\"os.name\");\n+    }\n+\n+}", "originalCommit": "44cc86811d333b92299db8acbdf5c5bc27b68bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDI4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370324283", "bodyText": "What exactly does that do?", "author": "cpiber", "createdAt": "2020-01-23T19:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyODM3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370328376", "bodyText": "Okay so it runs some more tests, I get\n[ERROR] Failed to execute goal com.diffplug.spotless:spotless-maven-plugin:1.24.3:apply (default-cli) on project org.openhab.binding.feed.tests: Execution default-cli of goal com.diffplug.spotless:spotless-maven-plugin:1.24.3:apply failed: Overlapping text edits -> [Help 1]\nWhat do I do? Can't find any info on that.\nAlso doesn't seem to by because of my changes (I didn't touch feed binding, at least I don't think)", "author": "cpiber", "createdAt": "2020-01-23T20:05:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyMjczMA==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370922730", "bodyText": "@J-N-K", "author": "cpiber", "createdAt": "2020-01-25T08:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0MDUzMw==", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370940533", "bodyText": "Reset the changes in other bindings and use mvn spotless:apply -pl bundles\\org.openhab.binding.exec to only re-format the exec binding.", "author": "J-N-K", "createdAt": "2020-01-25T15:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "f1dad1337fa0c9cbdc7be159689f55a19b520e56", "chunk": "diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\nindex 1cf7e4b35d..fca7fb05e6 100644\n--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java\n\n@@ -363,21 +368,20 @@ public class ExecHandler extends BaseThingHandler {\n     protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n         boolean startsWithShell = false;\n         for (String sh : shell) {\n-            if (commandLine.startsWith(sh+\" \")) {\n+            if (commandLine.startsWith(sh + \" \")) {\n                 startsWithShell = true;\n                 break;\n             }\n         }\n \n         if (!startsWithShell) {\n-            return new String[]{shell[0], cOption, commandLine};\n+            return new String[] { shell[0], cOption, commandLine };\n         } else {\n             logger.debug(\"Splitting by spaces\");\n             try {\n                 return commandLine.split(\" \");\n             } catch (PatternSyntaxException e) {\n-                logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n-                        commandLine, e.getMessage());\n+                logger.warn(\"An exception occurred while splitting '{}' : '{}'\", commandLine, e.getMessage());\n                 updateState(RUN, OnOffType.OFF);\n                 updateState(OUTPUT, new StringType(e.getMessage()));\n                 return new String[] {};\n"}}, {"oid": "f1dad1337fa0c9cbdc7be159689f55a19b520e56", "url": "https://github.com/openhab/openhab-addons/commit/f1dad1337fa0c9cbdc7be159689f55a19b520e56", "message": "Cosmetic changes, cleanup, spotless\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>", "committedDate": "2020-01-25T17:26:49Z", "type": "commit"}]}