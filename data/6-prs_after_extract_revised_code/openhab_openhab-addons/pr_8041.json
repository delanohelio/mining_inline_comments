{"pr_number": 8041, "pr_title": "[homekit] some cleanups", "pr_createdAt": "2020-06-29T14:46:12Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8041", "timeline": [{"oid": "6a2f3cffec8135cc5e6ff0b0dd703e94d0e65dc6", "url": "https://github.com/openhab/openhab-addons/commit/6a2f3cffec8135cc5e6ff0b0dd703e94d0e65dc6", "message": "some cleanups\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-06-28T15:01:29Z", "type": "commit"}, {"oid": "8317aba960f27f9d36cc6244d853457375326953", "url": "https://github.com/openhab/openhab-addons/commit/8317aba960f27f9d36cc6244d853457375326953", "message": "add some cleanups\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-06-28T20:26:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNjU2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447126563", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (java.lang.NumberFormatException e) {\n          \n          \n            \n                    } catch (NumberFormatException e) {", "author": "cpmeister", "createdAt": "2020-06-29T17:13:41Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitChangeListener.java", "diffHunk": "@@ -83,21 +84,21 @@\n                 Clock.systemUTC(), this::applyUpdates);\n \n         itemRegistry.addRegistryChangeListener(this);\n-        itemRegistry.getItems().stream().forEach(this::createRootAccessories);\n+        itemRegistry.getItems().forEach(this::createRootAccessories);\n         initialiseRevision();\n         logger.info(\"Created {} HomeKit items.\", accessoryRegistry.getAllAccessories().size());\n     }\n \n     private void initialiseRevision() {\n         int revision;\n         try {\n-            revision = Integer.valueOf(storage.get(REVISION_CONFIG));\n+            revision = Integer.parseInt(storage.get(REVISION_CONFIG));\n         } catch (java.lang.NumberFormatException e) {", "originalCommit": "8317aba960f27f9d36cc6244d853457375326953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07b57c23bed0c8aa5dd4cdd1556e4eac6ceef2e9", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitChangeListener.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitChangeListener.java\nindex ca4e834444..8df12e49a6 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitChangeListener.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitChangeListener.java\n\n@@ -93,13 +93,13 @@ public class HomekitChangeListener implements ItemRegistryChangeListener {\n         int revision;\n         try {\n             revision = Integer.parseInt(storage.get(REVISION_CONFIG));\n-        } catch (java.lang.NumberFormatException e) {\n+        } catch (NumberFormatException e) {\n             revision = 1;\n             storage.put(REVISION_CONFIG, \"\" + revision);\n         }\n         try {\n             lastAccessoryCount = Integer.parseInt(storage.get(ACCESSORY_COUNT));\n-        } catch (java.lang.NumberFormatException e) {\n+        } catch (NumberFormatException e) {\n             lastAccessoryCount = 0;\n             storage.put(ACCESSORY_COUNT, \"\" + accessoryRegistry.getAllAccessories().size());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNjY0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447126640", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (java.lang.NumberFormatException e) {\n          \n          \n            \n                    } catch (NumberFormatException e) {", "author": "cpmeister", "createdAt": "2020-06-29T17:13:51Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitChangeListener.java", "diffHunk": "@@ -83,21 +84,21 @@\n                 Clock.systemUTC(), this::applyUpdates);\n \n         itemRegistry.addRegistryChangeListener(this);\n-        itemRegistry.getItems().stream().forEach(this::createRootAccessories);\n+        itemRegistry.getItems().forEach(this::createRootAccessories);\n         initialiseRevision();\n         logger.info(\"Created {} HomeKit items.\", accessoryRegistry.getAllAccessories().size());\n     }\n \n     private void initialiseRevision() {\n         int revision;\n         try {\n-            revision = Integer.valueOf(storage.get(REVISION_CONFIG));\n+            revision = Integer.parseInt(storage.get(REVISION_CONFIG));\n         } catch (java.lang.NumberFormatException e) {\n             revision = 1;\n             storage.put(REVISION_CONFIG, \"\" + revision);\n         }\n         try {\n-            lastAccessoryCount = Integer.valueOf(storage.get(ACCESSORY_COUNT));\n+            lastAccessoryCount = Integer.parseInt(storage.get(ACCESSORY_COUNT));\n         } catch (java.lang.NumberFormatException e) {", "originalCommit": "8317aba960f27f9d36cc6244d853457375326953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07b57c23bed0c8aa5dd4cdd1556e4eac6ceef2e9", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitChangeListener.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitChangeListener.java\nindex ca4e834444..8df12e49a6 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitChangeListener.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitChangeListener.java\n\n@@ -93,13 +93,13 @@ public class HomekitChangeListener implements ItemRegistryChangeListener {\n         int revision;\n         try {\n             revision = Integer.parseInt(storage.get(REVISION_CONFIG));\n-        } catch (java.lang.NumberFormatException e) {\n+        } catch (NumberFormatException e) {\n             revision = 1;\n             storage.put(REVISION_CONFIG, \"\" + revision);\n         }\n         try {\n             lastAccessoryCount = Integer.parseInt(storage.get(ACCESSORY_COUNT));\n-        } catch (java.lang.NumberFormatException e) {\n+        } catch (NumberFormatException e) {\n             lastAccessoryCount = 0;\n             storage.put(ACCESSORY_COUNT, \"\" + accessoryRegistry.getAllAccessories().size());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNzQxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447127410", "bodyText": "Please remove the @NotNull here.", "author": "cpmeister", "createdAt": "2020-06-29T17:15:08Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java", "diffHunk": "@@ -96,7 +101,7 @@ public void execute(String[] args, Console console) {\n     }\n \n     @Override\n-    public List<String> getUsages() {\n+    public @NotNull List<String> getUsages() {", "originalCommit": "8317aba960f27f9d36cc6244d853457375326953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07b57c23bed0c8aa5dd4cdd1556e4eac6ceef2e9", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\nindex 281cb69d76..4be5f17017 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\n\n@@ -101,7 +99,7 @@ public class HomekitCommandExtension extends AbstractConsoleCommandExtension {\n     }\n \n     @Override\n-    public @NotNull List<String> getUsages() {\n+    public List<String> getUsages() {\n         return Arrays.asList(buildCommandUsage(SUBCMD_LIST_ACCESSORIES, \"list all HomeKit accessories\"),\n                 buildCommandUsage(SUBCMD_PRINT_ACCESSORY + \" <accessory id | accessory name>\",\n                         \"print additional details of the accessories which partially match provided ID or name.\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyODU0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447128545", "bodyText": "Rather than suppressing warnings everywhere I would rather you just disable null checks for this field.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private Homekit homekit;\n          \n          \n            \n                @NonNullByDefault({})\n          \n          \n            \n                private Homekit homekit;", "author": "cpmeister", "createdAt": "2020-06-29T17:17:00Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java", "diffHunk": "@@ -42,6 +46,7 @@\n     private static final String LEGACY_SUBCMD_PRINT_ACCESSORY = \"printAccessory\";\n \n     private final Logger logger = LoggerFactory.getLogger(HomekitCommandExtension.class);\n+    @Nullable\n     private Homekit homekit;", "originalCommit": "8317aba960f27f9d36cc6244d853457375326953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzNTg3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447535870", "bodyText": "@NonNullByDefault({}) - cool trick. removing @nonnull without adding explizit @nullable. nice. i was not aware of that one.", "author": "yfre", "createdAt": "2020-06-30T09:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyODU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "07b57c23bed0c8aa5dd4cdd1556e4eac6ceef2e9", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\nindex 281cb69d76..4be5f17017 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\n\n@@ -46,8 +44,8 @@ public class HomekitCommandExtension extends AbstractConsoleCommandExtension {\n     private static final String LEGACY_SUBCMD_PRINT_ACCESSORY = \"printAccessory\";\n \n     private final Logger logger = LoggerFactory.getLogger(HomekitCommandExtension.class);\n-    @Nullable\n-    private Homekit homekit;\n+\n+    private @NonNullByDefault({}) Homekit homekit;\n \n     public HomekitCommandExtension() {\n         super(\"homekit\", \"Interact with the HomeKit integration.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMDAyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447130023", "bodyText": "You should really use constants instead of literals when accessing storage.", "author": "cpmeister", "createdAt": "2020-06-29T17:19:38Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitImpl.java", "diffHunk": "@@ -78,14 +74,14 @@\n     public HomekitImpl(@Reference StorageService storageService, @Reference ItemRegistry itemRegistry,\n             @Reference NetworkAddressService networkAddressService, Map<String, Object> config,\n             @Reference MetadataRegistry metadataRegistry) throws IOException, InvalidAlgorithmParameterException {\n-        this.storage = storageService.getStorage(\"homekit\");\n         this.networkAddressService = networkAddressService;\n         this.settings = processConfig(config);\n         this.changeListener = new HomekitChangeListener(itemRegistry, settings, metadataRegistry, storageService);\n+        authInfo = new HomekitAuthInfoImpl(storageService.getStorage(\"homekit\"), settings.pin);", "originalCommit": "8317aba960f27f9d36cc6244d853457375326953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxNzQ4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447517482", "bodyText": "good point. change it also in HomekitAuthInfoImpl to constants.", "author": "yfre", "createdAt": "2020-06-30T08:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMDAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "07b57c23bed0c8aa5dd4cdd1556e4eac6ceef2e9", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitImpl.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitImpl.java\nindex 303617a4bf..e8f81fc94c 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitImpl.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitImpl.java\n\n@@ -77,7 +78,7 @@ public class HomekitImpl implements Homekit {\n         this.networkAddressService = networkAddressService;\n         this.settings = processConfig(config);\n         this.changeListener = new HomekitChangeListener(itemRegistry, settings, metadataRegistry, storageService);\n-        authInfo = new HomekitAuthInfoImpl(storageService.getStorage(\"homekit\"), settings.pin);\n+        authInfo = new HomekitAuthInfoImpl(storageService.getStorage(STORAGE_KEY), settings.pin);\n         startHomekitServer();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjE2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447132166", "bodyText": "Why not make this primitive?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Boolean getValue() {\n          \n          \n            \n                boolean getValue() {", "author": "cpmeister", "createdAt": "2020-06-29T17:23:31Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/BooleanItemReader.java", "diffHunk": "@@ -54,23 +55,30 @@\n     }\n \n     Boolean getValue() {", "originalCommit": "8317aba960f27f9d36cc6244d853457375326953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07b57c23bed0c8aa5dd4cdd1556e4eac6ceef2e9", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/BooleanItemReader.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/BooleanItemReader.java\nindex 174eb0c6bd..2bdc5cd0a9 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/BooleanItemReader.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/BooleanItemReader.java\n\n@@ -54,7 +54,7 @@ public class BooleanItemReader {\n         }\n     }\n \n-    Boolean getValue() {\n+    boolean getValue() {\n         final State state = item.getState();\n         if (state instanceof OnOffType) {\n             return state.equals(trueOnOffValue);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNzQ0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447137449", "bodyText": "Making the configuration final doesn't solve this warning?", "author": "cpmeister", "createdAt": "2020-06-29T17:32:26Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java", "diffHunk": "@@ -214,12 +213,15 @@ public double getConfigurationAsDouble(String key, double defaultValue) {\n     /**\n      * parse and apply item configuration.\n      */\n+    @SuppressWarnings(\"null\")", "originalCommit": "8317aba960f27f9d36cc6244d853457375326953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyNTExNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447525115", "bodyText": "yes, still get this warning\n[WARNING] /Users/efreiter/projects/knx/oh_addon/openhab-addons/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java:[217,7459] Potential null pointer access: this expression has a '@Nullable' type\nthe issue is the configuration.\n    private final @Nullable Map<String, Object> configuration;\n...\n  if (configuration != null) {\n            final @Nullable Object dimmerModeConfig = configuration.get(DIMMER_MODE);\n\neven though it is checked before it complains about potential NPE. and configuration can be and is \"null\" for many items. i considered to create an empty configuration for every item but it is imho too much to just get rid of nullable.\npersonally, i would remove all \"suppress\" as it could hide real issue introduced later but many false NPE warnings also makes difficult to see real NPEs. so, not sure what is the best approach here.\nsuggestions are welcome - should i remove/reduce suppression?", "author": "yfre", "createdAt": "2020-06-30T08:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNzQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "07b57c23bed0c8aa5dd4cdd1556e4eac6ceef2e9", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java\nindex 74b077c86a..3082f68c20 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java\n\n@@ -213,16 +212,13 @@ public class HomekitTaggedItem {\n     /**\n      * parse and apply item configuration.\n      */\n-    @SuppressWarnings(\"null\")\n     private void parseConfiguration() {\n         if (configuration != null) {\n-            @Nullable\n-            Object dimmerModeConfig = configuration.get(DIMMER_MODE);\n+            final @Nullable Object dimmerModeConfig = configuration.get(DIMMER_MODE);\n             if (dimmerModeConfig instanceof String) {\n                 HomekitDimmerMode.valueOfTag((String) dimmerModeConfig).ifPresent(proxyItem::setDimmerMode);\n             }\n-            @Nullable\n-            Object delayConfig = configuration.get(DELAY);\n+            final @Nullable Object delayConfig = configuration.get(DELAY);\n             if (delayConfig instanceof Number) {\n                 proxyItem.setDelay(((Number) delayConfig).intValue());\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5NTM1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447495351", "bodyText": "We use the convention to inline the Non null annotations:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Homekit homekit;\n          \n          \n            \n                private @NonNullByDefault({}) Homekit homekit;", "author": "Hilbrand", "createdAt": "2020-06-30T08:12:19Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java", "diffHunk": "@@ -42,6 +46,7 @@\n     private static final String LEGACY_SUBCMD_PRINT_ACCESSORY = \"printAccessory\";\n \n     private final Logger logger = LoggerFactory.getLogger(HomekitCommandExtension.class);\n+    @Nullable\n     private Homekit homekit;", "originalCommit": "8317aba960f27f9d36cc6244d853457375326953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0NDAyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r447544021", "bodyText": "good point. i have not paid attention to this until now.\nso, made all nullable and nonNull annotation inline.", "author": "yfre", "createdAt": "2020-06-30T09:27:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5NTM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "07b57c23bed0c8aa5dd4cdd1556e4eac6ceef2e9", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\nindex 281cb69d76..4be5f17017 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\n\n@@ -46,8 +44,8 @@ public class HomekitCommandExtension extends AbstractConsoleCommandExtension {\n     private static final String LEGACY_SUBCMD_PRINT_ACCESSORY = \"printAccessory\";\n \n     private final Logger logger = LoggerFactory.getLogger(HomekitCommandExtension.class);\n-    @Nullable\n-    private Homekit homekit;\n+\n+    private @NonNullByDefault({}) Homekit homekit;\n \n     public HomekitCommandExtension() {\n         super(\"homekit\", \"Interact with the HomeKit integration.\");\n"}}, {"oid": "07b57c23bed0c8aa5dd4cdd1556e4eac6ceef2e9", "url": "https://github.com/openhab/openhab-addons/commit/07b57c23bed0c8aa5dd4cdd1556e4eac6ceef2e9", "message": "address feedback\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-06-30T09:35:18Z", "type": "commit"}, {"oid": "780bc382bc60faec4ea0ecbcc8f4c265a59de04d", "url": "https://github.com/openhab/openhab-addons/commit/780bc382bc60faec4ea0ecbcc8f4c265a59de04d", "message": "remove final for parameters\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-07-02T06:20:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NTEyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r451085123", "bodyText": "If you are going to remove the stack trace from the logs, then you should make sure that the exception is included as a cause exception when throwing.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new HomekitException(\"Cannot instantiate accessory implementation for accessory \" + accessoryType);\n          \n          \n            \n                        throw new HomekitException(\"Cannot instantiate accessory implementation for accessory \" + accessoryType, e);", "author": "cpmeister", "createdAt": "2020-07-07T19:12:38Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitAccessoryFactory.java", "diffHunk": "@@ -196,7 +194,7 @@ public static HomekitAccessory create(HomekitTaggedItem taggedItem, MetadataRegi\n             }\n         } catch (NoSuchMethodException | IllegalAccessException | InstantiationException\n                 | InvocationTargetException e) {\n-            logger.warn(\"Cannot instantiate accessory implementation for accessory {}\", accessoryType.getTag(), e);\n+            logger.warn(\"Cannot instantiate accessory implementation for accessory {}\", accessoryType.getTag());\n             throw new HomekitException(\"Cannot instantiate accessory implementation for accessory \" + accessoryType);", "originalCommit": "780bc382bc60faec4ea0ecbcc8f4c265a59de04d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0ODY3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8041#discussion_r451648676", "bodyText": "you are right.. to much clean up. better to keep stack trace. reverted back the change", "author": "yfre", "createdAt": "2020-07-08T15:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NTEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "f61db4a5aff0f6ba1a77ad9c3d8097d293599456", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitAccessoryFactory.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitAccessoryFactory.java\nindex fdd1c99426..2d30d8d3fb 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitAccessoryFactory.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitAccessoryFactory.java\n\n@@ -194,7 +194,7 @@ public class HomekitAccessoryFactory {\n             }\n         } catch (NoSuchMethodException | IllegalAccessException | InstantiationException\n                 | InvocationTargetException e) {\n-            logger.warn(\"Cannot instantiate accessory implementation for accessory {}\", accessoryType.getTag());\n+            logger.warn(\"Cannot instantiate accessory implementation for accessory {}\", accessoryType.getTag(), e);\n             throw new HomekitException(\"Cannot instantiate accessory implementation for accessory \" + accessoryType);\n         }\n     }\n"}}, {"oid": "f61db4a5aff0f6ba1a77ad9c3d8097d293599456", "url": "https://github.com/openhab/openhab-addons/commit/f61db4a5aff0f6ba1a77ad9c3d8097d293599456", "message": "revert changes on logging\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-07-08T15:50:25Z", "type": "commit"}]}