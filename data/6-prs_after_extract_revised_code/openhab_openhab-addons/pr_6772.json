{"pr_number": 6772, "pr_title": "[satel] Fixes for arming in mode 1", "pr_createdAt": "2020-01-06T09:59:18Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/6772", "timeline": [{"oid": "57efaf8db99a51617bc6d3f7377ba076683ad949", "url": "https://github.com/openhab/openhab-addons/commit/57efaf8db99a51617bc6d3f7377ba076683ad949", "message": "[satel] Fixes for arming in mode 1\n\nSigned-off-by: Krzysztof Goworek <krzysztof.goworek@gmail.com>", "committedDate": "2020-01-06T09:52:29Z", "type": "commit"}, {"oid": "880b4ee423938364ff4ef03c3ea9d6feedd11c84", "url": "https://github.com/openhab/openhab-addons/commit/880b4ee423938364ff4ef03c3ea9d6feedd11c84", "message": "Copyright year updated in new files\n\nSigned-off-by: Krzysztof Goworek krzysztof.goworek@gmail.com", "committedDate": "2020-01-06T10:55:38Z", "type": "forcePushed"}, {"oid": "05fc5eaefa7a58af4376955a99c8364d16158379", "url": "https://github.com/openhab/openhab-addons/commit/05fc5eaefa7a58af4376955a99c8364d16158379", "message": "Copyright year updated in new files\n\nSigned-off-by: Krzysztof Goworek <krzysztof.goworek@gmail.com>", "committedDate": "2020-01-06T10:57:33Z", "type": "commit"}, {"oid": "05fc5eaefa7a58af4376955a99c8364d16158379", "url": "https://github.com/openhab/openhab-addons/commit/05fc5eaefa7a58af4376955a99c8364d16158379", "message": "Copyright year updated in new files\n\nSigned-off-by: Krzysztof Goworek <krzysztof.goworek@gmail.com>", "committedDate": "2020-01-06T10:57:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxODA4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6772#discussion_r363918081", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean isExtPayloadSupported() {\n          \n          \n            \n                public boolean hasExtPayloadSupport() {", "author": "J-N-K", "createdAt": "2020-01-07T19:43:24Z", "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/command/ModuleVersionCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.satel.internal.command;\n+\n+import org.openhab.binding.satel.internal.event.EventDispatcher;\n+import org.openhab.binding.satel.internal.event.ModuleVersionEvent;\n+import org.openhab.binding.satel.internal.protocol.SatelMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Command class for command that returns communication module version.\n+ *\n+ * @author Krzysztof Goworek - Initial contribution\n+ */\n+public class ModuleVersionCommand extends SatelCommandBase {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ModuleVersionCommand.class);\n+\n+    public static final byte COMMAND_CODE = 0x7c;\n+\n+    /**\n+     * Creates new command class instance.\n+     */\n+    public ModuleVersionCommand() {\n+        super(COMMAND_CODE, false);\n+    }\n+\n+    /**\n+     * @return communication module firmware version and release date\n+     */\n+    public String getVersion() {\n+        return getVersion(0);\n+    }\n+\n+    /**\n+     * @return <code>true</code> if the module supports extended (32-bit) payload for zones/outputs\n+     */\n+    public boolean isExtPayloadSupported() {", "originalCommit": "05fc5eaefa7a58af4376955a99c8364d16158379", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzNzkxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6772#discussion_r363937915", "bodyText": "Done.", "author": "druciak", "createdAt": "2020-01-07T20:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxODA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4bbca4d94889dd2561f41f2673b615e7bed15867", "chunk": "diff --git a/bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/command/ModuleVersionCommand.java b/bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/command/ModuleVersionCommand.java\nindex 5725419ed6..36bfc7da58 100644\n--- a/bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/command/ModuleVersionCommand.java\n+++ b/bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/command/ModuleVersionCommand.java\n\n@@ -46,7 +46,7 @@ public class ModuleVersionCommand extends SatelCommandBase {\n     /**\n      * @return <code>true</code> if the module supports extended (32-bit) payload for zones/outputs\n      */\n-    public boolean isExtPayloadSupported() {\n+    public boolean hasExtPayloadSupport() {\n         return (response.getPayload()[11] & 0x01) != 0;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyNjYwOA==", "url": "https://github.com/openhab/openhab-addons/pull/6772#discussion_r363926608", "bodyText": "I think you need the lock to protect the channel from disconnecting two times. Wouldn't be a Lock be better? If tryLock() fails the thread would not be blocked. Or is blocking until disconnect what you want to achieve?", "author": "J-N-K", "createdAt": "2020-01-07T20:03:20Z", "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/SatelModule.java", "diffHunk": "@@ -52,11 +54,12 @@\n \n     private final BlockingQueue<SatelCommand> sendQueue = new LinkedBlockingQueue<SatelCommand>();\n \n-    private IntegraType integraType;\n-    private int timeout;\n-    private String integraVersion;\n+    private final int timeout;\n+    private volatile IntegraType integraType;\n+    private volatile String integraVersion;\n+    private volatile boolean extPayloadSupport;\n     private CommunicationChannel channel;\n-    private Object channelLock;\n+    private final Object channelLock = new Object();", "originalCommit": "05fc5eaefa7a58af4376955a99c8364d16158379", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0MDQ1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6772#discussion_r363940451", "bodyText": "Good question. :-)\nThis is very old code and I don't remember what was the purpose. It seems to be useless as the whole disconnect method is synchronized. I think I was about to remove synchronization from the method and use this channelLock to not lock the whole object, but just disconnect method.\nBut now I am not sure whether or not it is safe to remove this lock from the code and I would't do this in this PR.", "author": "druciak", "createdAt": "2020-01-07T20:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyNjYwOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4bbca4d94889dd2561f41f2673b615e7bed15867", "url": "https://github.com/openhab/openhab-addons/commit/4bbca4d94889dd2561f41f2673b615e7bed15867", "message": "[satel] Fixes for arming in mode 1 - requested changes\n\nSigned-off-by: Krzysztof Goworek <krzysztof.goworek@gmail.com>", "committedDate": "2020-01-07T20:42:11Z", "type": "commit"}]}