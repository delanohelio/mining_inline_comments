{"pr_number": 7138, "pr_title": "[ojelectronics] Initial contribution", "pr_createdAt": "2020-03-09T20:53:45Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7138", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDQxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160416", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging\nSame for below.", "author": "fwolter", "createdAt": "2020-06-20T21:14:24Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDcyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160720", "bodyText": "Are you sure this needs to be started?", "author": "fwolter", "createdAt": "2020-06-20T21:19:58Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDc0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160749", "bodyText": "You should call the base class destructor at the end of the method.", "author": "fwolter", "createdAt": "2020-06-20T21:20:32Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDgwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160801", "bodyText": "Does the state matter, when the Thing is disposed? Can this be removed?", "author": "fwolter", "createdAt": "2020-06-20T21:21:16Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTMxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443161315", "bodyText": "Bindings should only log to error, when something really severe happened. In this case you could put the message as an argument to the updateStatus() invocation. This is logged by the framework and shown in the UI.", "author": "fwolter", "createdAt": "2020-06-20T21:30:31Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTUwMg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443161502", "bodyText": "You could give the user a hint what went wrong. See above.", "author": "fwolter", "createdAt": "2020-06-20T21:33:36Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(getConfiguration(), httpClient);\n+        }\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n+                    () -> handleUnauthorized());\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private void handleUnauthorized() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorized()\");\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(1);\n+    }\n+\n+    private void handleUnauthorizedWhileSignIn() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorizedWhileSignIn()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443161645", "bodyText": "You could use the framework's thread pool (and syntactical sugar)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Executors.newScheduledThreadPool(1).schedule(new Runnable() {\n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void run() {\n          \n          \n            \n                            ensureSignIn();\n          \n          \n            \n                        }\n          \n          \n            \n                    }, delayInSeconds, TimeUnit.SECONDS);\n          \n          \n            \n                    scheduler.schedule(this::ensureSignIn, delayInSeconds, TimeUnit.SECONDS);", "author": "fwolter", "createdAt": "2020-06-20T21:35:58Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(getConfiguration(), httpClient);\n+        }\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n+                    () -> handleUnauthorized());\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private void handleUnauthorized() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorized()\");\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(1);\n+    }\n+\n+    private void handleUnauthorizedWhileSignIn() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorizedWhileSignIn()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+    }\n+\n+    private void handleConnectionLost() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleConnectionLost()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(getConfiguration().refreshDelayInSeconds);\n+    }\n+\n+    private void restartRefreshServiceAsync(long delayInSeconds) {\n+        logger.trace(\"OJElectronicsBridgeHandler.restartRefreshServiceAsync({})\", delayInSeconds);\n+        Executors.newScheduledThreadPool(1).schedule(new Runnable() {\n+            @Override\n+            public void run() {\n+                ensureSignIn();\n+            }\n+        }, delayInSeconds, TimeUnit.SECONDS);", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTY5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443161693", "bodyText": "You could cache the config in initialize(), since this invocation is quite expensive.", "author": "fwolter", "createdAt": "2020-06-20T21:37:08Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(getConfiguration(), httpClient);\n+        }\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n+                    () -> handleUnauthorized());\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private void handleUnauthorized() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorized()\");\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(1);\n+    }\n+\n+    private void handleUnauthorizedWhileSignIn() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorizedWhileSignIn()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+    }\n+\n+    private void handleConnectionLost() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleConnectionLost()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(getConfiguration().refreshDelayInSeconds);\n+    }\n+\n+    private void restartRefreshServiceAsync(long delayInSeconds) {\n+        logger.trace(\"OJElectronicsBridgeHandler.restartRefreshServiceAsync({})\", delayInSeconds);\n+        Executors.newScheduledThreadPool(1).schedule(new Runnable() {\n+            @Override\n+            public void run() {\n+                ensureSignIn();\n+            }\n+        }, delayInSeconds, TimeUnit.SECONDS);\n+    }\n+\n+    private OJElectronicsBridgeConfiguration getConfiguration() {\n+        return getConfigAs(OJElectronicsBridgeConfiguration.class);\n+    }", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjA1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162052", "bodyText": "Are you sure this method is needed? If the config is updated dispose()/initialize() are called.", "author": "fwolter", "createdAt": "2020-06-20T21:43:03Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(getConfiguration(), httpClient);\n+        }\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n+                    () -> handleUnauthorized());\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private void handleUnauthorized() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorized()\");\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(1);\n+    }\n+\n+    private void handleUnauthorizedWhileSignIn() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorizedWhileSignIn()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+    }\n+\n+    private void handleConnectionLost() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleConnectionLost()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(getConfiguration().refreshDelayInSeconds);\n+    }\n+\n+    private void restartRefreshServiceAsync(long delayInSeconds) {\n+        logger.trace(\"OJElectronicsBridgeHandler.restartRefreshServiceAsync({})\", delayInSeconds);\n+        Executors.newScheduledThreadPool(1).schedule(new Runnable() {\n+            @Override\n+            public void run() {\n+                ensureSignIn();\n+            }\n+        }, delayInSeconds, TimeUnit.SECONDS);\n+    }\n+\n+    private OJElectronicsBridgeConfiguration getConfiguration() {\n+        return getConfigAs(OJElectronicsBridgeConfiguration.class);\n+    }\n+\n+    @Override\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjI3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162271", "bodyText": "Are you sure this method is needed? If the bridge goes offline, its child Things are updated, too.", "author": "fwolter", "createdAt": "2020-06-20T21:46:53Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsThermostatHandler.class);\n+\n+    private String serialNumber;\n+\n+    /**\n+     * Creates a new instance of {@link OJElectronicsThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public OJElectronicsThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles changes of the state of the bridge of this thing.\n+     */\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\nindex 85c282255c..4ef2f9b691 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n\n@@ -15,22 +15,22 @@ package org.openhab.binding.ojelectronics.internal;\n import java.time.ZoneId;\n import java.time.ZonedDateTime;\n \n+import javax.measure.quantity.Temperature;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.types.DateTimeType;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n-import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n import org.eclipse.smarthome.core.types.Command;\n import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjMyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162320", "bodyText": "You might want to handle the refresh command.", "author": "fwolter", "createdAt": "2020-06-20T21:47:35Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsThermostatHandler.class);\n+\n+    private String serialNumber;\n+\n+    /**\n+     * Creates a new instance of {@link OJElectronicsThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public OJElectronicsThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles changes of the state of the bridge of this thing.\n+     */\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        super.bridgeStatusChanged(bridgeStatusInfo);\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+        }\n+    }\n+\n+    /**\n+     * Handles commands to this thing.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing do here", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxODIwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443218205", "bodyText": "Yes i want but not an the moment. Handle command is the next step", "author": "EvilPingu", "createdAt": "2020-06-21T13:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\nindex 85c282255c..4ef2f9b691 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n\n@@ -15,22 +15,22 @@ package org.openhab.binding.ojelectronics.internal;\n import java.time.ZoneId;\n import java.time.ZonedDateTime;\n \n+import javax.measure.quantity.Temperature;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.types.DateTimeType;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n-import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n import org.eclipse.smarthome.core.types.Command;\n import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjQwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162404", "bodyText": "Is this key public?", "author": "fwolter", "createdAt": "2020-06-20T21:48:45Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The configuration for {@link org.openhab.binding.ojelectronics.internal.OJElectronicsBridgeHandler}\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeConfiguration {\n+\n+    /**\n+     * Password\n+     */\n+    public String password = \"\";\n+\n+    /**\n+     * Customer-ID\n+     */\n+    public Integer customerId = 1;\n+\n+    /**\n+     * User Name\n+     */\n+    public String userName = \"\";\n+\n+    /**\n+     * Url for API\n+     */\n+    public String apiUrl = \"https://OWD5-OJ001-App.ojelectronics.com/api\";\n+\n+    /**\n+     * API-Key\n+     */\n+    public String APIKEY = \"f219aab4-9ac0-4343-8422-b72203e2fac9\";", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxODU2NA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443218564", "bodyText": "It's not public. Should i remove the bridge parameter?", "author": "EvilPingu", "createdAt": "2020-06-21T13:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNzY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443237672", "bodyText": "It depends on the license of the vendor. If you are allowed to distribute the key to third parties, it's ok. By signing the commit messages you take responsibility.", "author": "fwolter", "createdAt": "2020-06-21T16:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NDEyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443244125", "bodyText": "I think it's complicated. I'm not the vendor so i'm not allowed to distrubute. So i'm deleting the Key and every one have to set it to a thing property.", "author": "EvilPingu", "createdAt": "2020-06-21T18:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java\nindex 838e0b2845..74da75e29b 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java\n\n@@ -15,7 +15,7 @@ package org.openhab.binding.ojelectronics.internal.config;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n \n /**\n- * The configuration for {@link org.openhab.binding.ojelectronics.internal.OJElectronicsBridgeHandler}\n+ * The configuration for {@link org.openhab.binding.ojelectronics.internal.OJElectronicsCloudHandler}\n  *\n  * @author Christian Kittel - Initial contribution\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjQzNg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162436", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<Event> events = new ArrayList<Event>();\n          \n          \n            \n                public List<Event> events = new ArrayList<>();", "author": "fwolter", "createdAt": "2020-06-20T21:49:20Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a day\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Day {\n+\n+    @SerializedName(\"WeekDayGrpNo\")\n+    @Expose\n+    public Integer weekDayGrpNo = 0;\n+    @SerializedName(\"Events\")\n+    @Expose\n+    public List<Event> events = new ArrayList<Event>();", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java\nindex 51ec04e5f8..7d177f59f6 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java\n\n@@ -33,6 +33,5 @@ public class Day {\n     public Integer weekDayGrpNo = 0;\n     @SerializedName(\"Events\")\n     @Expose\n-    public List<Event> events = new ArrayList<Event>();\n-\n+    public List<Event> events = new ArrayList<>();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjUwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162500", "bodyText": "How about apikey?", "author": "fwolter", "createdAt": "2020-06-20T21:50:41Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.userprofile;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for signing sin\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PostSignInQueryModel {\n+\n+    @SerializedName(\"APIKEY\")\n+    @Expose\n+    public String aPIKEY = \"\";", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java\nindex c8197a283f..c08fc356dc 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java\n\n@@ -27,7 +27,7 @@ public class PostSignInQueryModel {\n \n     @SerializedName(\"APIKEY\")\n     @Expose\n-    public String aPIKEY = \"\";\n+    public String apikey = \"\";\n \n     @SerializedName(\"UserName\")\n     @Expose\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjU4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162586", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    groupContentList.stream().flatMap(entry -> entry.thermostats.stream())\n          \n          \n            \n                            .forEach(thermostat -> HandleThermostat(thermostat));\n          \n          \n            \n                    groupContentList.stream().flatMap(entry -> entry.thermostats.stream()).forEach(this::HandleThermostat);", "author": "fwolter", "createdAt": "2020-06-20T21:52:10Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.ojelectronics.internal.OJElectronicsThermostatHandler;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContent;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * Refreshes values of {@link OJElectronicsThermostatHandler}\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class RefreshGroupContentService {\n+\n+    private final List<GroupContent> groupContentList;\n+    private List<Thing> things;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshGroupContentService}\n+     *\n+     * @param groupContents {@link GroupContent}\n+     * @param things Things\n+     */\n+    public RefreshGroupContentService(List<GroupContent> groupContents, List<Thing> things) {\n+        this.groupContentList = groupContents;\n+        this.things = things;\n+    }\n+\n+    /**\n+     * Handles the changes to all things.\n+     */\n+    public void Handle() {\n+        groupContentList.stream().flatMap(entry -> entry.thermostats.stream())\n+                .forEach(thermostat -> HandleThermostat(thermostat));", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java\nindex 17ced4e6ea..9e4adc18a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java\n\n@@ -46,13 +46,11 @@ public class RefreshGroupContentService {\n     /**\n      * Handles the changes to all things.\n      */\n-    public void Handle() {\n-        groupContentList.stream().flatMap(entry -> entry.thermostats.stream())\n-                .forEach(thermostat -> HandleThermostat(thermostat));\n-\n+    public void handle() {\n+        groupContentList.stream().flatMap(entry -> entry.thermostats.stream()).forEach(this::handleThermostat);\n     }\n \n-    private void HandleThermostat(Thermostat thermostat) {\n+    private void handleThermostat(Thermostat thermostat) {\n         Optional<OJElectronicsThermostatHandler> handler = things.stream()\n                 .filter(thing -> thing.getHandler() instanceof OJElectronicsThermostatHandler)\n                 .map(thing -> (OJElectronicsThermostatHandler) thing.getHandler())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjYzMg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162632", "bodyText": "Can you use camel case? Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void Handle() {\n          \n          \n            \n                public void handle() {", "author": "fwolter", "createdAt": "2020-06-20T21:53:01Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.ojelectronics.internal.OJElectronicsThermostatHandler;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContent;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * Refreshes values of {@link OJElectronicsThermostatHandler}\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class RefreshGroupContentService {\n+\n+    private final List<GroupContent> groupContentList;\n+    private List<Thing> things;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshGroupContentService}\n+     *\n+     * @param groupContents {@link GroupContent}\n+     * @param things Things\n+     */\n+    public RefreshGroupContentService(List<GroupContent> groupContents, List<Thing> things) {\n+        this.groupContentList = groupContents;\n+        this.things = things;\n+    }\n+\n+    /**\n+     * Handles the changes to all things.\n+     */\n+    public void Handle() {", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java\nindex 17ced4e6ea..9e4adc18a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java\n\n@@ -46,13 +46,11 @@ public class RefreshGroupContentService {\n     /**\n      * Handles the changes to all things.\n      */\n-    public void Handle() {\n-        groupContentList.stream().flatMap(entry -> entry.thermostats.stream())\n-                .forEach(thermostat -> HandleThermostat(thermostat));\n-\n+    public void handle() {\n+        groupContentList.stream().flatMap(entry -> entry.thermostats.stream()).forEach(this::handleThermostat);\n     }\n \n-    private void HandleThermostat(Thermostat thermostat) {\n+    private void handleThermostat(Thermostat thermostat) {\n         Optional<OJElectronicsThermostatHandler> handler = things.stream()\n                 .filter(thing -> thing.getHandler() instanceof OJElectronicsThermostatHandler)\n                 .map(thing -> (OJElectronicsThermostatHandler) thing.getHandler())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2Mjc1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162754", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @Nullable Runnable connectionLosed;\n          \n          \n            \n                private @Nullable Runnable connectionLost;", "author": "fwolter", "createdAt": "2020-06-20T21:55:29Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+\n+    private @Nullable Runnable connectionLosed;", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\nindex 3936ebc27c..8bc0a65153 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n\n@@ -12,7 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal.services;\n \n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Consumer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjgwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162800", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-06-20T21:56:11Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+\n+    private @Nullable Runnable connectionLosed;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static Boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLosed, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLosed = connectionLosed;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = Executors.newScheduledThreadPool(1).scheduleWithFixedDelay(() -> refresh(), refreshTime,\n+                refreshTime, TimeUnit.SECONDS);", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\nindex 3936ebc27c..8bc0a65153 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n\n@@ -12,7 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal.services;\n \n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Consumer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjkyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162924", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n          \n          \n            \n                                () -> handleUnauthorized());\n          \n          \n            \n                        refreshService.start(sessionId, this::handleRefreshDone, this::handleConnectionLost,\n          \n          \n            \n                                this::handleUnauthorized);", "author": "fwolter", "createdAt": "2020-06-20T21:58:03Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(getConfiguration(), httpClient);\n+        }\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n+                    () -> handleUnauthorized());", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzIyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163224", "bodyText": "You might want to log the exception's message.", "author": "fwolter", "createdAt": "2020-06-20T22:03:17Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+\n+    private @Nullable Runnable connectionLosed;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static Boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLosed, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLosed = connectionLosed;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = Executors.newScheduledThreadPool(1).scheduleWithFixedDelay(() -> refresh(), refreshTime,\n+                refreshTime, TimeUnit.SECONDS);\n+        destroyed = false;\n+    }\n+\n+    /**\n+     * Stops refreshing.\n+     */\n+    public void stop() {\n+        logger.trace(\"RefreshService.stopService({})\", this);\n+        destroyed = true;\n+        if (scheduler != null) {\n+            scheduler.cancel(false);\n+            scheduler = null;\n+        }\n+    }\n+\n+    private void refresh() {\n+        logger.trace(\"RefreshService.refresh({})\", this);\n+\n+        if (sessionId.equals(\"\")) {\n+            handleConnectionLosed();\n+            return;\n+        }\n+        CreateRequest().send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (!destroyed) {\n+                    if (result == null || result.isFailed()) {\n+                        handleConnectionLosed();\n+                    } else if (result.getResponse().getStatus() == HttpStatus.FORBIDDEN_403) {\n+                        if (unauthorized != null) {\n+                            unauthorized.run();\n+                        }\n+                    } else {\n+                        handleRefreshDone(getContentAsString());\n+                    }\n+                }\n+            }\n+\n+        });\n+    }\n+\n+    private Request CreateRequest() {\n+        Request request = httpClient.newRequest(config.apiUrl + \"/Group/GroupContents\").param(\"sessionid\", sessionId)\n+                .param(\"APIKEY\", config.APIKEY).method(HttpMethod.GET);\n+        return request;\n+    }\n+\n+    private void handleRefreshDone(String responseBody) {\n+        if (refreshDone != null) {\n+            logger.trace(\"refresh {}\", responseBody);\n+\n+            try {\n+                GroupContentResponseModel content = gson.fromJson(responseBody, GroupContentResponseModel.class);\n+                if (refreshDone != null) {\n+                    refreshDone.accept(content);\n+                }\n+            } catch (JsonSyntaxException exception) {\n+                handleConnectionLosed();", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\nindex 3936ebc27c..8bc0a65153 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n\n@@ -12,7 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal.services;\n \n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Consumer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzI2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163268", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private PostSignInQueryModel getpostSignInQueryModel() {\n          \n          \n            \n                private PostSignInQueryModel getPostSignInQueryModel() {", "author": "fwolter", "createdAt": "2020-06-20T22:04:37Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInQueryModel;\n+import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * Handles the sign in process.\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class SignInService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SignInService.class);\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+\n+    private final HttpClient httpClient;\n+    private final OJElectronicsBridgeConfiguration config;\n+\n+    /**\n+     * Creates a new instance of {@link SignInService}\n+     *\n+     * @param config configuration {@link OJElectronicsBridgeConfiguration}\n+     * @param httpClient HTTP client\n+     */\n+    public SignInService(OJElectronicsBridgeConfiguration config, HttpClient httpClient) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Signing in\n+     *\n+     * @param signInDone This method is called if sign in process was successful.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void SignIn(Consumer<String> signInDone, Runnable connectionLosed, Runnable unauthorized) {\n+        logger.trace(\"SignInService.SignIn ({})\", this);\n+        Request request = httpClient.POST(config.apiUrl + \"/UserProfile/SignIn\")\n+                .header(HttpHeader.CONTENT_TYPE, \"application/json\")\n+                .content(new StringContentProvider(gson.toJson(getpostSignInQueryModel())));\n+\n+        request.send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (result == null || result.isFailed()) {\n+                    connectionLosed.run();\n+                    return;\n+                }\n+                if (result != null && result.getResponse().getStatus() != 200) {\n+                    unauthorized.run();\n+                    return;\n+                }\n+                PostSignInResponseModel signInModel = gson.fromJson(getContentAsString(),\n+                        PostSignInResponseModel.class);\n+                if (signInModel.errorCode != 0 || signInModel.sessionId.equals(\"\")) {\n+                    unauthorized.run();\n+                    return;\n+                }\n+                signInDone.accept(signInModel.sessionId);\n+            }\n+        });\n+    }\n+\n+    private PostSignInQueryModel getpostSignInQueryModel() {", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java\nindex 137c330cac..6dab2b903f 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java\n\n@@ -25,8 +25,6 @@ import org.eclipse.jetty.http.HttpHeader;\n import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInQueryModel;\n import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInResponseModel;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2NDAyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443164024", "bodyText": "This is not used.", "author": "fwolter", "createdAt": "2020-06-20T22:17:46Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 58%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex a5fca09abd..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,8 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n-import java.util.Map;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2NDA1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443164051", "bodyText": "This null check is not needed.", "author": "fwolter", "createdAt": "2020-06-20T22:18:36Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInQueryModel;\n+import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * Handles the sign in process.\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class SignInService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SignInService.class);\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+\n+    private final HttpClient httpClient;\n+    private final OJElectronicsBridgeConfiguration config;\n+\n+    /**\n+     * Creates a new instance of {@link SignInService}\n+     *\n+     * @param config configuration {@link OJElectronicsBridgeConfiguration}\n+     * @param httpClient HTTP client\n+     */\n+    public SignInService(OJElectronicsBridgeConfiguration config, HttpClient httpClient) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Signing in\n+     *\n+     * @param signInDone This method is called if sign in process was successful.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void SignIn(Consumer<String> signInDone, Runnable connectionLosed, Runnable unauthorized) {\n+        logger.trace(\"SignInService.SignIn ({})\", this);\n+        Request request = httpClient.POST(config.apiUrl + \"/UserProfile/SignIn\")\n+                .header(HttpHeader.CONTENT_TYPE, \"application/json\")\n+                .content(new StringContentProvider(gson.toJson(getpostSignInQueryModel())));\n+\n+        request.send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (result == null || result.isFailed()) {\n+                    connectionLosed.run();\n+                    return;\n+                }\n+                if (result != null && result.getResponse().getStatus() != 200) {", "originalCommit": "2f6825ed37a2d831875e1e062fd02fbc08a781d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java\nindex 137c330cac..6dab2b903f 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java\n\n@@ -25,8 +25,6 @@ import org.eclipse.jetty.http.HttpHeader;\n import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInQueryModel;\n import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInResponseModel;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4MzE4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446683189", "bodyText": "What exception do you want to catch here? Can you sepcify the concrete type or can this be removed?", "author": "fwolter", "createdAt": "2020-06-28T18:35:10Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+    private OJElectronicsBridgeConfiguration configuration;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        this.configuration = new OJElectronicsBridgeConfiguration();\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(OJElectronicsBridgeConfiguration.class);\n+        try {\n+            ensureSignIn();\n+        } catch (Exception e) {", "originalCommit": "28bfcc274d491586ac61468eb3e8f8576284eb3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 78%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex fe577a0136..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,6 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4MzMwOA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446683308", "bodyText": "No harm in setting a null field to null. You could remove the if.", "author": "fwolter", "createdAt": "2020-06-28T18:36:03Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+    private OJElectronicsBridgeConfiguration configuration;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        this.configuration = new OJElectronicsBridgeConfiguration();\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(OJElectronicsBridgeConfiguration.class);\n+        try {\n+            ensureSignIn();\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        if (refreshService != null) {\n+            refreshService.stop();\n+            refreshService = null;\n+        }\n+        if (signInService != null) {\n+            signInService = null;\n+        }", "originalCommit": "28bfcc274d491586ac61468eb3e8f8576284eb3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nsimilarity index 78%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex fe577a0136..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,6 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NTAzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446685037", "bodyText": "Units of Measure, to be able to specify Number:Temperature in the XML file.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new DecimalType(thermostat.comfortSetpoint / (double) 100));\n          \n          \n            \n                            new QuantityType<Temperature>(thermostat.floorTemperature / (double) 100, SIUnits.CELSIUS));", "author": "fwolter", "createdAt": "2020-06-28T18:53:58Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private String serialNumber;\n+\n+    /**\n+     * Creates a new instance of {@link OJElectronicsThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public OJElectronicsThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles commands to this thing.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing do here\n+    }\n+\n+    /**\n+     * Initializes the thing handler.\n+     */\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    /**\n+     * Sets the values after refreshing the thermostats values\n+     *\n+     * @param thermostat thermostat values\n+     */\n+    public void handleThermostatRefresh(Thermostat thermostat) {\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_GROUPNAME, StringType.valueOf(thermostat.groupName));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_GROUPID, new DecimalType(thermostat.groupId));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_ONLINE,\n+                thermostat.online ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_HEATING,\n+                thermostat.heating ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_ROOMTEMPERATURE,\n+                new DecimalType(thermostat.roomTemperature / (double) 100));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_FLOORTEMPERATURE,\n+                new DecimalType(thermostat.floorTemperature / (double) 100));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_THERMOSTATNAME,\n+                StringType.valueOf(thermostat.thermostatName));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_REGULATIONMODE,\n+                StringType.valueOf(thermostat.regulationMode.toString()));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_COMFORTSETPOINT,\n+                new DecimalType(thermostat.comfortSetpoint / (double) 100));", "originalCommit": "28bfcc274d491586ac61468eb3e8f8576284eb3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\nindex 86ea7e69a9..4ef2f9b691 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n\n@@ -15,11 +15,15 @@ package org.openhab.binding.ojelectronics.internal;\n import java.time.ZoneId;\n import java.time.ZonedDateTime;\n \n+import javax.measure.quantity.Temperature;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.types.DateTimeType;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.thing.ThingStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5OTI4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r449199280", "bodyText": "Didn't notice this can't be final. In this case this should be lower case. Sorry.\nYou could use the primitve type: boolean", "author": "fwolter", "createdAt": "2020-07-02T18:31:27Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+    private final ScheduledExecutorService schedulerService;\n+\n+    private @Nullable Runnable connectionLost;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static Boolean DESTROYED = false;", "originalCommit": "520dff5a82286ab4ff8a02305da7a2459f1b94fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\nindex ab41a9d1a8..8bc0a65153 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n\n@@ -53,7 +53,7 @@ public final class RefreshService implements AutoCloseable {\n     private @Nullable ScheduledFuture<?> scheduler;\n     private @Nullable Runnable unauthorized;\n     private String sessionId = \"\";\n-    private static Boolean DESTROYED = false;\n+    private static boolean destroyed = false;\n \n     /**\n      * Creates a new instance of {@link RefreshService}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDcxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r449200710", "bodyText": "Can you cancel this task when dispose() is invoked?", "author": "fwolter", "createdAt": "2020-07-02T18:34:32Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsCloudHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsCloudHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+    private OJElectronicsBridgeConfiguration configuration;\n+\n+    public OJElectronicsCloudHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        this.configuration = new OJElectronicsBridgeConfiguration();\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(OJElectronicsBridgeConfiguration.class);\n+        ensureSignIn();\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        this.refreshService = null;\n+        signInService = null;\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(configuration, httpClient);\n+        }\n+        final SignInService signInService = this.signInService;\n+        if (signInService != null) {\n+            signInService.signIn(this::handleSignInDone, this::handleConnectionLost,\n+                    this::handleUnauthorizedWhileSignIn);\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsCloudHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).handle();\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Wrong or no result model; Refreshing stoppped\");\n+            final RefreshService refreshService = this.refreshService;\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsCloudHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(configuration, httpClient, scheduler);\n+        }\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, this::handleRefreshDone, this::handleConnectionLost,\n+                    this::handleUnauthorized);\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private void handleUnauthorized() {\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(1);\n+    }\n+\n+    private void handleUnauthorizedWhileSignIn() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                \"Could not sign in. Check user name and password.\");\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+    }\n+\n+    private void handleConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(configuration.refreshDelayInSeconds);\n+    }\n+\n+    private void restartRefreshServiceAsync(long delayInSeconds) {\n+        scheduler.schedule(this::ensureSignIn, delayInSeconds, TimeUnit.SECONDS);", "originalCommit": "520dff5a82286ab4ff8a02305da7a2459f1b94fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c32544558ac0d087f903fda744f0cdc89a04a2", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nindex b4740967a9..b2fe45f4a8 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n\n@@ -12,6 +12,7 @@\n  */\n package org.openhab.binding.ojelectronics.internal;\n \n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMjMyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452222327", "bodyText": "Please handle the REFRESH-command directly or indirectly via some cache. It prevents situations were people link an additional channel after the binding was already started. It will make sure that they don't have to wait until the next cycle for the data to be populated.", "author": "martinvw", "createdAt": "2020-07-09T13:36:18Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsCloudHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsCloudHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+    private OJElectronicsBridgeConfiguration configuration;\n+    private @Nullable ScheduledFuture<?> signTask;\n+\n+    public OJElectronicsCloudHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        this.configuration = new OJElectronicsBridgeConfiguration();\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(OJElectronicsBridgeConfiguration.class);\n+        ensureSignIn();\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        final ScheduledFuture<?> signTask = this.signTask;\n+        if (signTask != null) {\n+            signTask.cancel(true);\n+        }\n+        this.refreshService = null;\n+        signInService = null;\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMDk1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453220950", "bodyText": "Done.", "author": "EvilPingu", "createdAt": "2020-07-11T18:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMjMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "04d5e8c37b25d049762214106cbc062639f71256", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJCloudHandler.java\nsimilarity index 95%\nrename from bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\nrename to bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJCloudHandler.java\nindex b2fe45f4a8..de9a48d89f 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJCloudHandler.java\n\n@@ -39,9 +39,9 @@ import org.slf4j.LoggerFactory;\n  * @author Christian Kittel - Initial Contribution\n  */\n @NonNullByDefault\n-public class OJElectronicsCloudHandler extends BaseBridgeHandler implements BridgeHandler {\n+public class OJCloudHandler extends BaseBridgeHandler implements BridgeHandler {\n \n-    private final Logger logger = LoggerFactory.getLogger(OJElectronicsCloudHandler.class);\n+    private final Logger logger = LoggerFactory.getLogger(OJCloudHandler.class);\n     private final HttpClient httpClient;\n \n     private @Nullable RefreshService refreshService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzEzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452223134", "bodyText": "It seems that this field can be final.", "author": "martinvw", "createdAt": "2020-07-09T13:37:23Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private String serialNumber;", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMDEyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452410124", "bodyText": "That's true.", "author": "EvilPingu", "createdAt": "2020-07-09T18:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\nindex 4ef2f9b691..05d5faf2dc 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n\n@@ -36,12 +36,12 @@ import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n  * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n  * sent to one of the channels.\n  *\n- * @author EvilPingu - Initial contribution\n+ * @author Christian Kittel - Initial contribution\n  */\n @NonNullByDefault\n public class OJElectronicsThermostatHandler extends BaseThingHandler {\n \n-    private String serialNumber;\n+    private final String serialNumber;\n \n     /**\n      * Creates a new instance of {@link OJElectronicsThermostatHandler}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzI3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452223276", "bodyText": "Please use your real name and check all.", "author": "martinvw", "createdAt": "2020-07-09T13:37:36Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMDY0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452410643", "bodyText": "Done", "author": "EvilPingu", "createdAt": "2020-07-09T18:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\nindex 4ef2f9b691..05d5faf2dc 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n\n@@ -36,12 +36,12 @@ import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n  * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n  * sent to one of the channels.\n  *\n- * @author EvilPingu - Initial contribution\n+ * @author Christian Kittel - Initial contribution\n  */\n @NonNullByDefault\n public class OJElectronicsThermostatHandler extends BaseThingHandler {\n \n-    private String serialNumber;\n+    private final String serialNumber;\n \n     /**\n      * Creates a new instance of {@link OJElectronicsThermostatHandler}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzYzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452223638", "bodyText": "Are you sure that this guaranteed to be non-null?", "author": "martinvw", "createdAt": "2020-07-09T13:38:09Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private String serialNumber;\n+\n+    /**\n+     * Creates a new instance of {@link OJElectronicsThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public OJElectronicsThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMTQ2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452411467", "bodyText": "I think yes because it is required in thing-types.xml", "author": "EvilPingu", "createdAt": "2020-07-09T18:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\nindex 4ef2f9b691..05d5faf2dc 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java\n\n@@ -36,12 +36,12 @@ import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n  * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n  * sent to one of the channels.\n  *\n- * @author EvilPingu - Initial contribution\n+ * @author Christian Kittel - Initial contribution\n  */\n @NonNullByDefault\n public class OJElectronicsThermostatHandler extends BaseThingHandler {\n \n-    private String serialNumber;\n+    private final String serialNumber;\n \n     /**\n      * Creates a new instance of {@link OJElectronicsThermostatHandler}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNDQxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452224411", "bodyText": "You could consider making this an int it will ensure that its non-null :-)", "author": "martinvw", "createdAt": "2020-07-09T13:39:19Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The configuration for {@link org.openhab.binding.ojelectronics.internal.OJElectronicsCloudHandler}\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeConfiguration {\n+\n+    /**\n+     * Password\n+     */\n+    public String password = \"\";\n+\n+    /**\n+     * Customer-ID\n+     */\n+    public Integer customerId = 1;\n+\n+    /**\n+     * User Name\n+     */\n+    public String userName = \"\";\n+\n+    /**\n+     * Url for API\n+     */\n+    public String apiUrl = \"https://OWD5-OJ001-App.ojelectronics.com/api\";\n+\n+    /**\n+     * API-Key\n+     */\n+    public String apiKey = \"\";\n+\n+    /**\n+     * Software Version\n+     */\n+    public Integer softwareVersion = 1060;", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMzUzMw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452413533", "bodyText": "Done", "author": "EvilPingu", "createdAt": "2020-07-09T18:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNDQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java\nindex 74da75e29b..0dd114ad70 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java\n\n@@ -50,7 +50,7 @@ public class OJElectronicsBridgeConfiguration {\n     /**\n      * Software Version\n      */\n-    public Integer softwareVersion = 1060;\n+    public int softwareVersion = 1060;\n \n     /**\n      * Refresh-Delay\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNjc5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452226792", "bodyText": "Consider using the consistent apiKey", "author": "martinvw", "createdAt": "2020-07-09T13:42:40Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.userprofile;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for signing sin\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PostSignInQueryModel {\n+\n+    @SerializedName(\"APIKEY\")\n+    @Expose\n+    public String apikey = \"\";", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNzkxNA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452417914", "bodyText": "Done", "author": "EvilPingu", "createdAt": "2020-07-09T18:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNjc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java\nindex c08fc356dc..788969a2c5 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java\n\n@@ -27,7 +27,7 @@ public class PostSignInQueryModel {\n \n     @SerializedName(\"APIKEY\")\n     @Expose\n-    public String apikey = \"\";\n+    public String apiKey = \"\";\n \n     @SerializedName(\"UserName\")\n     @Expose\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzNzA2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452237065", "bodyText": "Is the expose needed, or would it work fine without it?", "author": "martinvw", "createdAt": "2020-07-09T13:56:59Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a day\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Day {\n+\n+    @SerializedName(\"WeekDayGrpNo\")\n+    @Expose", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTc1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453169752", "bodyText": "Of course it works without it. I generated this models with http://www.jsonschema2pojo.org/. I remove this explicit expose. No problem", "author": "EvilPingu", "createdAt": "2020-07-11T07:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzNzA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "96b98dead80842e488b98c2164f726674dda7678", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java\nindex 7d177f59f6..6b91f19d48 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java\n\n@@ -17,7 +17,6 @@ import java.util.List;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n \n-import com.google.gson.annotations.Expose;\n import com.google.gson.annotations.SerializedName;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzODM1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452238353", "bodyText": "What about using FieldNamingPolicy.UPPER_CAMEL_CASE it makes the mapping less verbose and you only have to document what is actually interesting.", "author": "martinvw", "createdAt": "2020-07-09T13:58:44Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a day\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Day {\n+\n+    @SerializedName(\"WeekDayGrpNo\")", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5NjAwNw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453196007", "bodyText": "I changed this in all models", "author": "EvilPingu", "createdAt": "2020-07-11T13:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzODM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "96b98dead80842e488b98c2164f726674dda7678", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java\nindex 7d177f59f6..6b91f19d48 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java\n\n@@ -17,7 +17,6 @@ import java.util.List;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n \n-import com.google.gson.annotations.Expose;\n import com.google.gson.annotations.SerializedName;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDEyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452240127", "bodyText": "I think it might be dangerous to annotate your JSON classes like this, it gives a false sense of security. GSON will not validate the null-ness of the fields. And I don't know whether your bases it on some documentation but even that is not guaranteed to remain as is.\n@cpmeister what do you think of this?", "author": "martinvw", "createdAt": "2020-07-09T14:01:05Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a schedule\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzNTc0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452435744", "bodyText": "If i do so, i think i got a warning.", "author": "EvilPingu", "createdAt": "2020-07-09T19:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNTgyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453215824", "bodyText": "I think it might be dangerous to annotate your JSON classes like this, it gives a false sense of security. GSON will not validate the null-ness of the fields. And I don't know whether your bases it on some documentation but even that is not guaranteed to remain as is.\n\n@openhab/add-ons-maintainers your opinions are greatly appreciated here :-)", "author": "martinvw", "createdAt": "2020-07-11T17:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMjIxMg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453222212", "bodyText": "@EvilPingu if no one veto's this (about nullable and json-mapping) one tonight and you looked into the latest remarks it should be ready to be merged! Thanks for your quick responses.", "author": "martinvw", "createdAt": "2020-07-11T18:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyNjc3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453226777", "bodyText": "@martinvw Afaik, our guidelines say that @NonNullByDefault must be used on classes and I do not recall any exception for JSON pojos. I'd hence say, it is fine (while not saying that your remark that it gives a false sense of security is wrong).", "author": "kaikreuzer", "createdAt": "2020-07-11T19:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java\nindex c338b4e325..6d537354bf 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java\n\n@@ -33,5 +33,5 @@ public class Schedule {\n     public List<Day> days = new ArrayList<Day>();\n     @SerializedName(\"ModifiedDueToVerification\")\n     @Expose\n-    public Boolean modifiedDueToVerification = false;\n+    public boolean modifiedDueToVerification = false;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDQ5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452240497", "bodyText": "If you do believe fields will not be null, then better use the primitive types.", "author": "martinvw", "createdAt": "2020-07-09T14:01:34Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a schedule\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Schedule {\n+\n+    @SerializedName(\"Days\")\n+    @Expose\n+    public List<Day> days = new ArrayList<Day>();\n+    @SerializedName(\"ModifiedDueToVerification\")\n+    @Expose\n+    public Boolean modifiedDueToVerification = false;", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5NjA4OA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453196088", "bodyText": "I changed this too. I always use primitive types in models now", "author": "EvilPingu", "createdAt": "2020-07-11T13:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java\nindex c338b4e325..6d537354bf 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java\n\n@@ -33,5 +33,5 @@ public class Schedule {\n     public List<Day> days = new ArrayList<Day>();\n     @SerializedName(\"ModifiedDueToVerification\")\n     @Expose\n-    public Boolean modifiedDueToVerification = false;\n+    public boolean modifiedDueToVerification = false;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDg1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452240856", "bodyText": "See above", "author": "martinvw", "createdAt": "2020-07-09T14:02:02Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.userprofile;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for signing sin\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PostSignInQueryModel {\n+\n+    @SerializedName(\"APIKEY\")\n+    @Expose\n+    public String apikey = \"\";\n+\n+    @SerializedName(\"UserName\")\n+    @Expose\n+    public String userName = \"\";\n+\n+    @SerializedName(\"Password\")\n+    @Expose\n+    public String password = \"\";\n+\n+    @SerializedName(\"CustomerId\")\n+    @Expose\n+    public Integer customerId = 0;\n+\n+    @SerializedName(\"ClientSWVersion\")\n+    @Expose\n+    public Integer clientSWVersion = 0;\n+\n+    /**\n+     * Add API-Key\n+     *\n+     * @param aPIKEY API-Key\n+     * @return Model\n+     */\n+    public PostSignInQueryModel withAPIKEY(String apikey) {", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODk0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452418946", "bodyText": "Done", "author": "EvilPingu", "createdAt": "2020-07-09T18:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDg1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java\nindex c08fc356dc..788969a2c5 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java\n\n@@ -27,7 +27,7 @@ public class PostSignInQueryModel {\n \n     @SerializedName(\"APIKEY\")\n     @Expose\n-    public String apikey = \"\";\n+    public String apiKey = \"\";\n \n     @SerializedName(\"UserName\")\n     @Expose\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MjQ5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452242492", "bodyText": "Would something terrible happen if you would support a duplicated device with the same serial number? It would simplify the code:\nyou could then just skip the findFirst and replace it by a forEach", "author": "martinvw", "createdAt": "2020-07-09T14:04:24Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.ojelectronics.internal.OJElectronicsThermostatHandler;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContent;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * Refreshes values of {@link OJElectronicsThermostatHandler}\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class RefreshGroupContentService {\n+\n+    private final List<GroupContent> groupContentList;\n+    private List<Thing> things;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshGroupContentService}\n+     *\n+     * @param groupContents {@link GroupContent}\n+     * @param things Things\n+     */\n+    public RefreshGroupContentService(List<GroupContent> groupContents, List<Thing> things) {\n+        this.groupContentList = groupContents;\n+        this.things = things;\n+    }\n+\n+    /**\n+     * Handles the changes to all things.\n+     */\n+    public void handle() {\n+        groupContentList.stream().flatMap(entry -> entry.thermostats.stream()).forEach(this::handleThermostat);\n+    }\n+\n+    private void handleThermostat(Thermostat thermostat) {\n+        Optional<OJElectronicsThermostatHandler> handler = things.stream()", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNzIzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453217237", "bodyText": "Done", "author": "EvilPingu", "createdAt": "2020-07-11T17:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MjQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "04d5e8c37b25d049762214106cbc062639f71256", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java\nindex 9e4adc18a8..41be1376f6 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java\n\n@@ -17,12 +17,12 @@ import java.util.Optional;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.thing.Thing;\n-import org.openhab.binding.ojelectronics.internal.OJElectronicsThermostatHandler;\n+import org.openhab.binding.ojelectronics.internal.ThermostatHandler;\n import org.openhab.binding.ojelectronics.internal.models.groups.GroupContent;\n import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n \n /**\n- * Refreshes values of {@link OJElectronicsThermostatHandler}\n+ * Refreshes values of {@link ThermostatHandler}\n  *\n  * @author Christian Kittel - Initial Contribution\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MzA4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452243085", "bodyText": "See remark above about using a naming strategy, given the size of the statement you might also consider creating some static method to initialize it.", "author": "martinvw", "createdAt": "2020-07-09T14:05:19Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5NzA5NA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453197094", "bodyText": "I shorten the class names and extracts some methods", "author": "EvilPingu", "createdAt": "2020-07-11T13:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MzA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\nindex 8bc0a65153..b58bf325f6 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n\n@@ -126,7 +126,7 @@ public final class RefreshService implements AutoCloseable {\n \n     private Request createRequest() {\n         Request request = httpClient.newRequest(config.apiUrl + \"/Group/GroupContents\").param(\"sessionid\", sessionId)\n-                .param(\"APIKEY\", config.apiKey).method(HttpMethod.GET);\n+                .param(\"apiKey\", config.apiKey).method(HttpMethod.GET);\n         return request;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MDQ3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452250479", "bodyText": "It might make more sense to just make this fields nullable, it seems you have \"\" a magical meaning instead.\nIf you want to leave, then position the literal first in String comparisons - that way if the String is null you won't get a NullPointerException, it'll just return false. source: PMD", "author": "martinvw", "createdAt": "2020-07-09T14:15:38Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+    private final ScheduledExecutorService schedulerService;\n+\n+    private @Nullable Runnable connectionLost;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient,\n+            ScheduledExecutorService schedulerService) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+        this.schedulerService = schedulerService;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLost, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLost = connectionLost;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = schedulerService.scheduleWithFixedDelay(this::refresh, refreshTime, refreshTime, TimeUnit.SECONDS);\n+        destroyed = false;\n+    }\n+\n+    /**\n+     * Stops refreshing.\n+     */\n+    public void stop() {\n+        destroyed = true;\n+        final ScheduledFuture<?> scheduler = this.scheduler;\n+        if (scheduler != null) {\n+            scheduler.cancel(false);\n+        }\n+        this.scheduler = null;\n+    }\n+\n+    private void refresh() {\n+        if (sessionId.equals(\"\")) {", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNzIyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453217223", "bodyText": "Done", "author": "EvilPingu", "createdAt": "2020-07-11T17:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MDQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\nindex 8bc0a65153..b58bf325f6 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n\n@@ -126,7 +126,7 @@ public final class RefreshService implements AutoCloseable {\n \n     private Request createRequest() {\n         Request request = httpClient.newRequest(config.apiUrl + \"/Group/GroupContents\").param(\"sessionid\", sessionId)\n-                .param(\"APIKEY\", config.apiKey).method(HttpMethod.GET);\n+                .param(\"apiKey\", config.apiKey).method(HttpMethod.GET);\n         return request;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MTMzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452251338", "bodyText": "In E.4 of the coding guidelines we listed what kind of logging level should be used when. Error should only be used:\n\nerror logging should only be used to inform the user that something is tremendously wrong in his setup, the system cannot function normally anymore, and there is a need for immediate action.\n\nPlease change this to use the correct logging levels.", "author": "martinvw", "createdAt": "2020-07-09T14:16:51Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+    private final ScheduledExecutorService schedulerService;\n+\n+    private @Nullable Runnable connectionLost;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient,\n+            ScheduledExecutorService schedulerService) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+        this.schedulerService = schedulerService;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLost, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLost = connectionLost;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = schedulerService.scheduleWithFixedDelay(this::refresh, refreshTime, refreshTime, TimeUnit.SECONDS);\n+        destroyed = false;\n+    }\n+\n+    /**\n+     * Stops refreshing.\n+     */\n+    public void stop() {\n+        destroyed = true;\n+        final ScheduledFuture<?> scheduler = this.scheduler;\n+        if (scheduler != null) {\n+            scheduler.cancel(false);\n+        }\n+        this.scheduler = null;\n+    }\n+\n+    private void refresh() {\n+        if (sessionId.equals(\"\")) {\n+            handleConnectionLost();\n+            return;\n+        }\n+        final Runnable unauthorized = this.unauthorized;\n+        createRequest().send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (!destroyed) {\n+                    if (result == null || result.isFailed()) {\n+                        handleConnectionLost();\n+                    } else if (result.getResponse().getStatus() == HttpStatus.FORBIDDEN_403) {\n+                        if (unauthorized != null) {\n+                            unauthorized.run();\n+                        }\n+                    } else {\n+                        handleRefreshDone(getContentAsString());\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    private Request createRequest() {\n+        Request request = httpClient.newRequest(config.apiUrl + \"/Group/GroupContents\").param(\"sessionid\", sessionId)\n+                .param(\"APIKEY\", config.apiKey).method(HttpMethod.GET);\n+        return request;\n+    }\n+\n+    private void handleRefreshDone(String responseBody) {\n+        final Consumer<@Nullable GroupContentResponseModel> refreshDone = this.refreshDone;\n+        if (refreshDone != null) {\n+            logger.trace(\"refresh {}\", responseBody);\n+            try {\n+                GroupContentResponseModel content = gson.fromJson(responseBody, GroupContentResponseModel.class);\n+                refreshDone.accept(content);\n+            } catch (JsonSyntaxException exception) {\n+                logger.error(\"Error mapping Result to model\", exception);", "originalCommit": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ0MDY2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452440667", "bodyText": "I think the correct way is to remove the logging and disable the thing. Is this correct?", "author": "EvilPingu", "createdAt": "2020-07-09T19:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MTMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTY1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452485659", "bodyText": "Not really disabling, updating the thing status, calling updateStatus and I would see that this indicates a communication error, you could log the full stack trace to debug, but the most important is reporting to the user that something is wrong and passing the exception.getMessage() to the updateStatus could help for that.", "author": "martinvw", "createdAt": "2020-07-09T20:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MTMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNzI1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453217257", "bodyText": "Done", "author": "EvilPingu", "createdAt": "2020-07-11T17:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MTMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\nindex 8bc0a65153..b58bf325f6 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java\n\n@@ -126,7 +126,7 @@ public final class RefreshService implements AutoCloseable {\n \n     private Request createRequest() {\n         Request request = httpClient.newRequest(config.apiUrl + \"/Group/GroupContents\").param(\"sessionid\", sessionId)\n-                .param(\"APIKEY\", config.apiKey).method(HttpMethod.GET);\n+                .param(\"apiKey\", config.apiKey).method(HttpMethod.GET);\n         return request;\n     }\n \n"}}, {"oid": "98c32544558ac0d087f903fda744f0cdc89a04a2", "url": "https://github.com/openhab/openhab-addons/commit/98c32544558ac0d087f903fda744f0cdc89a04a2", "message": "[ojelectronics] Initial contribution\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-09T18:18:14Z", "type": "commit"}, {"oid": "88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "url": "https://github.com/openhab/openhab-addons/commit/88eb790e9c3205b9556b9e15b5cf07ef3152f6cb", "message": "remove file; correct README.md; correct some minor issues\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-09T19:14:51Z", "type": "commit"}, {"oid": "96b98dead80842e488b98c2164f726674dda7678", "url": "https://github.com/openhab/openhab-addons/commit/96b98dead80842e488b98c2164f726674dda7678", "message": "remove explicit expose in models\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-11T07:55:54Z", "type": "commit"}, {"oid": "a6642dc68c9db29d2f00f26967124b89421b9be1", "url": "https://github.com/openhab/openhab-addons/commit/a6642dc68c9db29d2f00f26967124b89421b9be1", "message": "simplify models; change regulation mode\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-11T13:37:00Z", "type": "commit"}, {"oid": "04d5e8c37b25d049762214106cbc062639f71256", "url": "https://github.com/openhab/openhab-addons/commit/04d5e8c37b25d049762214106cbc062639f71256", "message": "shorten classnames\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-11T13:49:52Z", "type": "commit"}, {"oid": "6400457a1e14d5a7a9ed5a937be53f61375dfa1f", "url": "https://github.com/openhab/openhab-addons/commit/6400457a1e14d5a7a9ed5a937be53f61375dfa1f", "message": "support multiple devices with same serial\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-11T15:30:21Z", "type": "commit"}, {"oid": "1b0a765e0325f5c346073b078208532398104629", "url": "https://github.com/openhab/openhab-addons/commit/1b0a765e0325f5c346073b078208532398104629", "message": "better handling for wrong result\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-11T15:50:51Z", "type": "commit"}, {"oid": "02d14193a234337372a2093a7871edd9ee0ed4b2", "url": "https://github.com/openhab/openhab-addons/commit/02d14193a234337372a2093a7871edd9ee0ed4b2", "message": "better handling for wrong result\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-11T15:57:51Z", "type": "commit"}, {"oid": "04b6369348011d9fdebcbdb0a957f350c0d94775", "url": "https://github.com/openhab/openhab-addons/commit/04b6369348011d9fdebcbdb0a957f350c0d94775", "message": "change options value; refactor refresh of thermostat\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-11T18:21:37Z", "type": "commit"}, {"oid": "7040b63cae57c31533d80b24a50b9e10b7c26ba7", "url": "https://github.com/openhab/openhab-addons/commit/7040b63cae57c31533d80b24a50b9e10b7c26ba7", "message": "fixed warnings\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-11T18:24:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMTk3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453221978", "bodyText": "Declare vars with their interface for the Collection types, so this should rather be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static HashMap<Integer, String> createRegulationMap() {\n          \n          \n            \n                private static Map<Integer, String> createRegulationMap() {", "author": "martinvw", "createdAt": "2020-07-11T18:32:30Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link ThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ThermostatHandler extends BaseThingHandler {\n+\n+    private final String serialNumber;\n+    private @Nullable Thermostat currentThermostat;\n+    private static final Map<Integer, String> REGULATION_MODES = createRegulationMap();\n+    private final Map<String, Consumer<Thermostat>> channelrefreshActions = createChannelRefreshActionMap();\n+\n+    /**\n+     * Creates a new instance of {@link ThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public ThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles commands to this thing.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            final Thermostat thermostat = currentThermostat;\n+            if (thermostat != null && channelrefreshActions.containsKey(channelUID.getId())) {\n+                channelrefreshActions.get(channelUID.getId()).accept(thermostat);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initializes the thing handler.\n+     */\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    /**\n+     * Sets the values after refreshing the thermostats values\n+     *\n+     * @param thermostat thermostat values\n+     */\n+    public void handleThermostatRefresh(Thermostat thermostat) {\n+        currentThermostat = thermostat;\n+        channelrefreshActions.forEach((channelUID, action) -> action.accept(thermostat));\n+    }\n+\n+    private void updateManualSetpoint(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_MANUALSETPOINT,\n+                new QuantityType<Temperature>(thermostat.manualModeSetpoint / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateBoostEndTime(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_BOOSTENDTIME,\n+                new DateTimeType(ZonedDateTime.ofInstant(thermostat.boostEndTime.toInstant(), ZoneId.systemDefault())));\n+    }\n+\n+    private void updateComfortEndTime(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_COMFORTENDTIME, new DateTimeType(\n+                ZonedDateTime.ofInstant(thermostat.comfortEndTime.toInstant(), ZoneId.systemDefault())));\n+    }\n+\n+    private void updateComfortSetpoint(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_COMFORTSETPOINT,\n+                new QuantityType<Temperature>(thermostat.comfortSetpoint / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateRegulationMode(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_REGULATIONMODE,\n+                StringType.valueOf(getRegulationMode(thermostat.regulationMode)));\n+    }\n+\n+    private void updateThermostatName(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_THERMOSTATNAME, StringType.valueOf(thermostat.thermostatName));\n+    }\n+\n+    private void updateFloorTemperature(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_FLOORTEMPERATURE,\n+                new QuantityType<Temperature>(thermostat.floorTemperature / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateRoomTemperature(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_ROOMTEMPERATURE,\n+                new QuantityType<Temperature>(thermostat.roomTemperature / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateHeating(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_HEATING,\n+                thermostat.heating ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+    }\n+\n+    private void updateOnline(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_ONLINE,\n+                thermostat.online ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+    }\n+\n+    private void updateGroupId(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_GROUPID, new DecimalType(thermostat.groupId));\n+    }\n+\n+    private void updateGroupName(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_GROUPNAME, StringType.valueOf(thermostat.groupName));\n+    }\n+\n+    private String getRegulationMode(int regulationMode) {\n+        return REGULATION_MODES.get(regulationMode);\n+    }\n+\n+    private static HashMap<Integer, String> createRegulationMap() {", "originalCommit": "7040b63cae57c31533d80b24a50b9e10b7c26ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f2fb17f34bcb9628ce6e7b72bac66adb6c37823", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java\nindex b9bddec37f..56553d7b66 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java\n\n@@ -162,20 +162,20 @@ public class ThermostatHandler extends BaseThingHandler {\n         return REGULATION_MODES.get(regulationMode);\n     }\n \n-    private static HashMap<Integer, String> createRegulationMap() {\n-        HashMap<Integer, String> map = new HashMap<Integer, String>();\n-        map.put(1, \"Auto\");\n-        map.put(2, \"Comfort\");\n-        map.put(3, \"Manual\");\n-        map.put(4, \"Vacation\");\n-        map.put(6, \"Frost Protection\");\n-        map.put(8, \"Boost\");\n-        map.put(9, \"Eco\");\n+    private static Map<Integer, String> createRegulationMap() {\n+        HashMap<Integer, String> map = new HashMap<>();\n+        map.put(1, \"auto\");\n+        map.put(2, \"comfort\");\n+        map.put(3, \"manual\");\n+        map.put(4, \"vacation\");\n+        map.put(6, \"frostProtection\");\n+        map.put(8, \"boost\");\n+        map.put(9, \"eco\");\n         return map;\n     };\n \n-    private HashMap<String, Consumer<Thermostat>> createChannelRefreshActionMap() {\n-        HashMap<String, Consumer<Thermostat>> map = new HashMap<String, Consumer<Thermostat>>();\n+    private Map<String, Consumer<Thermostat>> createChannelRefreshActionMap() {\n+        HashMap<String, Consumer<Thermostat>> map = new HashMap<>();\n         map.put(BindingConstants.CHANNEL_OWD5_GROUPNAME, this::updateGroupName);\n         map.put(BindingConstants.CHANNEL_OWD5_GROUPID, this::updateGroupId);\n         map.put(BindingConstants.CHANNEL_OWD5_ONLINE, this::updateOnline);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMjAzNg==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453222036", "bodyText": "Please use the diamond operator, ie replace the second occurrence of the same generic by <>\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HashMap<Integer, String> map = new HashMap<Integer, String>();\n          \n          \n            \n                    Map<Integer, String> map = new HashMap<>();", "author": "martinvw", "createdAt": "2020-07-11T18:32:59Z", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link ThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ThermostatHandler extends BaseThingHandler {\n+\n+    private final String serialNumber;\n+    private @Nullable Thermostat currentThermostat;\n+    private static final Map<Integer, String> REGULATION_MODES = createRegulationMap();\n+    private final Map<String, Consumer<Thermostat>> channelrefreshActions = createChannelRefreshActionMap();\n+\n+    /**\n+     * Creates a new instance of {@link ThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public ThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles commands to this thing.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            final Thermostat thermostat = currentThermostat;\n+            if (thermostat != null && channelrefreshActions.containsKey(channelUID.getId())) {\n+                channelrefreshActions.get(channelUID.getId()).accept(thermostat);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initializes the thing handler.\n+     */\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    /**\n+     * Sets the values after refreshing the thermostats values\n+     *\n+     * @param thermostat thermostat values\n+     */\n+    public void handleThermostatRefresh(Thermostat thermostat) {\n+        currentThermostat = thermostat;\n+        channelrefreshActions.forEach((channelUID, action) -> action.accept(thermostat));\n+    }\n+\n+    private void updateManualSetpoint(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_MANUALSETPOINT,\n+                new QuantityType<Temperature>(thermostat.manualModeSetpoint / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateBoostEndTime(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_BOOSTENDTIME,\n+                new DateTimeType(ZonedDateTime.ofInstant(thermostat.boostEndTime.toInstant(), ZoneId.systemDefault())));\n+    }\n+\n+    private void updateComfortEndTime(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_COMFORTENDTIME, new DateTimeType(\n+                ZonedDateTime.ofInstant(thermostat.comfortEndTime.toInstant(), ZoneId.systemDefault())));\n+    }\n+\n+    private void updateComfortSetpoint(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_COMFORTSETPOINT,\n+                new QuantityType<Temperature>(thermostat.comfortSetpoint / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateRegulationMode(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_REGULATIONMODE,\n+                StringType.valueOf(getRegulationMode(thermostat.regulationMode)));\n+    }\n+\n+    private void updateThermostatName(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_THERMOSTATNAME, StringType.valueOf(thermostat.thermostatName));\n+    }\n+\n+    private void updateFloorTemperature(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_FLOORTEMPERATURE,\n+                new QuantityType<Temperature>(thermostat.floorTemperature / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateRoomTemperature(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_ROOMTEMPERATURE,\n+                new QuantityType<Temperature>(thermostat.roomTemperature / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateHeating(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_HEATING,\n+                thermostat.heating ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+    }\n+\n+    private void updateOnline(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_ONLINE,\n+                thermostat.online ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+    }\n+\n+    private void updateGroupId(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_GROUPID, new DecimalType(thermostat.groupId));\n+    }\n+\n+    private void updateGroupName(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_GROUPNAME, StringType.valueOf(thermostat.groupName));\n+    }\n+\n+    private String getRegulationMode(int regulationMode) {\n+        return REGULATION_MODES.get(regulationMode);\n+    }\n+\n+    private static HashMap<Integer, String> createRegulationMap() {\n+        HashMap<Integer, String> map = new HashMap<Integer, String>();", "originalCommit": "7040b63cae57c31533d80b24a50b9e10b7c26ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyNTQyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453225427", "bodyText": "Done.", "author": "EvilPingu", "createdAt": "2020-07-11T19:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMjAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8f2fb17f34bcb9628ce6e7b72bac66adb6c37823", "chunk": "diff --git a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java\nindex b9bddec37f..56553d7b66 100644\n--- a/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java\n+++ b/bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java\n\n@@ -162,20 +162,20 @@ public class ThermostatHandler extends BaseThingHandler {\n         return REGULATION_MODES.get(regulationMode);\n     }\n \n-    private static HashMap<Integer, String> createRegulationMap() {\n-        HashMap<Integer, String> map = new HashMap<Integer, String>();\n-        map.put(1, \"Auto\");\n-        map.put(2, \"Comfort\");\n-        map.put(3, \"Manual\");\n-        map.put(4, \"Vacation\");\n-        map.put(6, \"Frost Protection\");\n-        map.put(8, \"Boost\");\n-        map.put(9, \"Eco\");\n+    private static Map<Integer, String> createRegulationMap() {\n+        HashMap<Integer, String> map = new HashMap<>();\n+        map.put(1, \"auto\");\n+        map.put(2, \"comfort\");\n+        map.put(3, \"manual\");\n+        map.put(4, \"vacation\");\n+        map.put(6, \"frostProtection\");\n+        map.put(8, \"boost\");\n+        map.put(9, \"eco\");\n         return map;\n     };\n \n-    private HashMap<String, Consumer<Thermostat>> createChannelRefreshActionMap() {\n-        HashMap<String, Consumer<Thermostat>> map = new HashMap<String, Consumer<Thermostat>>();\n+    private Map<String, Consumer<Thermostat>> createChannelRefreshActionMap() {\n+        HashMap<String, Consumer<Thermostat>> map = new HashMap<>();\n         map.put(BindingConstants.CHANNEL_OWD5_GROUPNAME, this::updateGroupName);\n         map.put(BindingConstants.CHANNEL_OWD5_GROUPID, this::updateGroupId);\n         map.put(BindingConstants.CHANNEL_OWD5_ONLINE, this::updateOnline);\n"}}, {"oid": "8f2fb17f34bcb9628ce6e7b72bac66adb6c37823", "url": "https://github.com/openhab/openhab-addons/commit/8f2fb17f34bcb9628ce6e7b72bac66adb6c37823", "message": "documentation completed; fixed some issues\n\nSigned-off-by: EvilPingu <ckittel@gmx.de>", "committedDate": "2020-07-11T19:48:50Z", "type": "commit"}]}