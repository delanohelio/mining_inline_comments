{"pr_number": 7396, "pr_title": "[squeezebox] Implement like/unlike for remote streaming services", "pr_createdAt": "2020-04-16T22:07:18Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7396", "timeline": [{"oid": "5f37700428e75a15e20d38c8acbb975f796166db", "url": "https://github.com/openhab/openhab-addons/commit/5f37700428e75a15e20d38c8acbb975f796166db", "message": "Implement like/unlike for remote streaming services\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-04-27T22:04:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMjI4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418412286", "bodyText": "Do you really need to add another author tag each time?", "author": "cpmeister", "createdAt": "2020-05-01T04:32:17Z", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java", "diffHunk": "@@ -68,6 +68,7 @@\n  * @author Patrik Gfeller - Timeout for TTS messages increased from 30 to 90s.\n  * @author Mark Hilbush - Get favorites from server and play favorite\n  * @author Mark Hilbush - Convert sound notification volume from channel to config parameter\n+ * @author Mark Hilbush - Add like/unlike functionality", "originalCommit": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwNzE5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418507193", "bodyText": "No. I typically do it only for changes of some significance.", "author": "mhilbush", "createdAt": "2020-05-01T11:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMjI4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMjYyMg==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418412622", "bodyText": "So the command param isn't used? Shouldn't you confirm that the ON command was sent?", "author": "cpmeister", "createdAt": "2020-05-01T04:34:00Z", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java", "diffHunk": "@@ -289,6 +296,16 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             case CHANNEL_FAVORITES_PLAY:\n                 squeezeBoxServerHandler.playFavorite(mac, command.toString());\n                 break;\n+            case CHANNEL_LIKE:\n+                if (likeCommand != null) {\n+                    squeezeBoxServerHandler.like(mac, likeCommand);\n+                }", "originalCommit": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwNzk2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418507965", "bodyText": "Yeah, I thought about that, and I probably should check for ON. OTOH, I was trying to be flexible in allowing any command to trigger the operation. I'll add the check.", "author": "mhilbush", "createdAt": "2020-05-01T11:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMjYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "1365cf02a7e2b5eb1455d430e17c678118965874", "chunk": "diff --git a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java\nindex bd18aa8127..60da16a2ec 100644\n--- a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java\n+++ b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java\n\n@@ -297,12 +297,12 @@ public class SqueezeBoxPlayerHandler extends BaseThingHandler implements Squeeze\n                 squeezeBoxServerHandler.playFavorite(mac, command.toString());\n                 break;\n             case CHANNEL_LIKE:\n-                if (likeCommand != null) {\n+                if (likeCommand != null && command.equals(OnOffType.ON)) {\n                     squeezeBoxServerHandler.like(mac, likeCommand);\n                 }\n                 break;\n             case CHANNEL_UNLIKE:\n-                if (unlikeCommand != null) {\n+                if (unlikeCommand != null && command.equals(OnOffType.ON)) {\n                     squeezeBoxServerHandler.unlike(mac, unlikeCommand);\n                 }\n                 break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzI5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413292", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            scheduler.execute(() -> {\n          \n          \n            \n                                updateCustomButtons(mac);\n          \n          \n            \n                            });\n          \n          \n            \n                            scheduler.execute(() -> updateCustomButtons(mac));", "author": "cpmeister", "createdAt": "2020-05-01T04:37:25Z", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -836,6 +865,10 @@ private void handlePlaylistMessage(final String mac, String[] messageParts) {\n             String mode;\n             if (action.equals(\"newsong\")) {\n                 mode = \"play\";\n+                // Execute in separate thread to avoid delaying listener\n+                scheduler.execute(() -> {\n+                    updateCustomButtons(mac);\n+                });", "originalCommit": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwODg0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418508849", "bodyText": "Sure. I forgot you can do that.", "author": "mhilbush", "createdAt": "2020-05-01T11:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1365cf02a7e2b5eb1455d430e17c678118965874", "chunk": "diff --git a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\nindex 380ee5b88f..720d4f5455 100644\n--- a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\n+++ b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\n\n@@ -866,9 +866,7 @@ public class SqueezeBoxServerHandler extends BaseBridgeHandler {\n             if (action.equals(\"newsong\")) {\n                 mode = \"play\";\n                 // Execute in separate thread to avoid delaying listener\n-                scheduler.execute(() -> {\n-                    updateCustomButtons(mac);\n-                });\n+                scheduler.execute(() -> updateCustomButtons(mac));\n                 // Set the track duration to 0\n                 updatePlayer(new PlayerUpdateEvent() {\n                     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzQ2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413463", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        scheduler.schedule(() -> {\n          \n          \n            \n                            requestFavorites();\n          \n          \n            \n                        }, 3L, TimeUnit.SECONDS);\n          \n          \n            \n                        scheduler.schedule(this::requestFavorites, 3L, TimeUnit.SECONDS);", "author": "cpmeister", "createdAt": "2020-05-01T04:38:25Z", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -998,6 +1023,64 @@ private void updateChannelFavoritesList(List<Favorite> favorites) {\n                 updateState(CHANNEL_FAVORITES_LIST, new StringType(favoritesList));\n             }\n         }\n+\n+        private void scheduleRequestFavorites() {\n+            // Delay the execution to give the player thing handlers a chance to initialize\n+            scheduler.schedule(() -> {\n+                requestFavorites();\n+            }, 3L, TimeUnit.SECONDS);", "originalCommit": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMTU3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418511578", "bodyText": "I had actually tried to do it this way initially. Because the requestFavorites method is in SqueezeBoxServerHandler, not the inner class SqueezeServerListener it generates a compiler error. Is there a better way to handle this?", "author": "mhilbush", "createdAt": "2020-05-01T11:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxMTQ5MA==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r437011490", "bodyText": "Here's how you can do it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        scheduler.schedule(() -> {\n          \n          \n            \n                            requestFavorites();\n          \n          \n            \n                        }, 3L, TimeUnit.SECONDS);\n          \n          \n            \n                        scheduler.schedule(SqueezeBoxServerHandler.this::requestFavorites, 3L, TimeUnit.SECONDS);", "author": "cpmeister", "createdAt": "2020-06-08T21:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MDg1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r437050852", "bodyText": "Ah, thanks.", "author": "mhilbush", "createdAt": "2020-06-08T23:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d0587d5047e6142bee4001ec71b7b961f6568fbf", "chunk": "diff --git a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\nindex 380ee5b88f..b6c40e0436 100644\n--- a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\n+++ b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\n\n@@ -1026,9 +1022,7 @@ public class SqueezeBoxServerHandler extends BaseBridgeHandler {\n \n         private void scheduleRequestFavorites() {\n             // Delay the execution to give the player thing handlers a chance to initialize\n-            scheduler.schedule(() -> {\n-                requestFavorites();\n-            }, 3L, TimeUnit.SECONDS);\n+            scheduler.schedule(SqueezeBoxServerHandler.this::requestFavorites, 3L, TimeUnit.SECONDS);\n         }\n \n         private void updateCustomButtons(final String mac) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzY4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413680", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n          \n          \n            \n                        button.enabled = value != 0;", "author": "cpmeister", "createdAt": "2020-05-01T04:39:26Z", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;", "originalCommit": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMjM1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418512358", "bodyText": "Yep, simpler.", "author": "mhilbush", "createdAt": "2020-05-01T11:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1365cf02a7e2b5eb1455d430e17c678118965874", "chunk": "diff --git a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java\nindex 41266065a3..0e235edb85 100644\n--- a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java\n+++ b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java\n\n@@ -13,12 +13,9 @@\n package org.openhab.binding.squeezebox.internal.dto;\n \n import java.lang.reflect.Type;\n-import java.util.List;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n \n-import org.apache.commons.lang.StringUtils;\n-\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzcwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413705", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        button.custom = Boolean.TRUE;\n          \n          \n            \n                        button.custom = true;", "author": "cpmeister", "createdAt": "2020-05-01T04:39:38Z", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n+        } else if (jsonElement.isJsonObject()) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.TRUE;", "originalCommit": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMjUwNg==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418512506", "bodyText": "Changed above, as well.", "author": "mhilbush", "createdAt": "2020-05-01T11:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1365cf02a7e2b5eb1455d430e17c678118965874", "chunk": "diff --git a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java\nindex 41266065a3..0e235edb85 100644\n--- a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java\n+++ b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java\n\n@@ -13,12 +13,9 @@\n package org.openhab.binding.squeezebox.internal.dto;\n \n import java.lang.reflect.Type;\n-import java.util.List;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n \n-import org.apache.commons.lang.StringUtils;\n-\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNDQ0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418414440", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<String> commandList = StreamSupport.stream(jsonObject.getAsJsonArray(\"command\").spliterator(), false)\n          \n          \n            \n                                .map(JsonElement::getAsString).collect(Collectors.toList());\n          \n          \n            \n                        button.command = StringUtils.join(commandList, \" \");\n          \n          \n            \n                        button.command = StreamSupport.stream(jsonObject.getAsJsonArray(\"command\").spliterator(), false)\n          \n          \n            \n                                .map(JsonElement::getAsString).collect(Collectors.joining(\" \"));", "author": "cpmeister", "createdAt": "2020-05-01T04:43:49Z", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n+        } else if (jsonElement.isJsonObject()) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.TRUE;\n+            button.icon = jsonObject.get(\"icon\").getAsString();\n+            button.jiveStyle = jsonObject.get(\"jiveStyle\").getAsString();\n+            button.toolTip = jsonObject.get(\"tooltip\").getAsString();\n+            List<String> commandList = StreamSupport.stream(jsonObject.getAsJsonArray(\"command\").spliterator(), false)\n+                    .map(JsonElement::getAsString).collect(Collectors.toList());\n+            button.command = StringUtils.join(commandList, \" \");", "originalCommit": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMjkxNA==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418512914", "bodyText": "Yeah. Wish I had thought of that. \ud83d\ude09", "author": "mhilbush", "createdAt": "2020-05-01T11:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNDQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "1365cf02a7e2b5eb1455d430e17c678118965874", "chunk": "diff --git a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java\nindex 41266065a3..0e235edb85 100644\n--- a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java\n+++ b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java\n\n@@ -13,12 +13,9 @@\n package org.openhab.binding.squeezebox.internal.dto;\n \n import java.lang.reflect.Type;\n-import java.util.List;\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n \n-import org.apache.commons.lang.StringUtils;\n-\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n"}}, {"oid": "1365cf02a7e2b5eb1455d430e17c678118965874", "url": "https://github.com/openhab/openhab-addons/commit/1365cf02a7e2b5eb1455d430e17c678118965874", "message": "Address review feedback\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-05-18T19:26:52Z", "type": "forcePushed"}, {"oid": "4f4e816faf9bd9c2e27254516e83d3d10d2aeec8", "url": "https://github.com/openhab/openhab-addons/commit/4f4e816faf9bd9c2e27254516e83d3d10d2aeec8", "message": "Implement like/unlike for remote streaming services\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-06-18T18:01:50Z", "type": "commit"}, {"oid": "cbd93b5e2d30b664e93cac72984ece90cbdba13d", "url": "https://github.com/openhab/openhab-addons/commit/cbd93b5e2d30b664e93cac72984ece90cbdba13d", "message": "Fix formatting\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-06-18T18:01:51Z", "type": "commit"}, {"oid": "c59477862564e247282f33427d8322aa5f73f5c8", "url": "https://github.com/openhab/openhab-addons/commit/c59477862564e247282f33427d8322aa5f73f5c8", "message": "Address review feedback\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-06-18T18:01:51Z", "type": "commit"}, {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf", "url": "https://github.com/openhab/openhab-addons/commit/d0587d5047e6142bee4001ec71b7b961f6568fbf", "message": "Combine like/unlike to single rate channel\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-06-18T18:01:51Z", "type": "commit"}, {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf", "url": "https://github.com/openhab/openhab-addons/commit/d0587d5047e6142bee4001ec71b7b961f6568fbf", "message": "Combine like/unlike to single rate channel\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-06-18T18:01:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMTIyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r447121229", "bodyText": "You should cancel the future this produces in case this handler gets disposed.", "author": "cpmeister", "createdAt": "2020-06-29T17:03:56Z", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -998,6 +1019,62 @@ private void updateChannelFavoritesList(List<Favorite> favorites) {\n                 updateState(CHANNEL_FAVORITES_LIST, new StringType(favoritesList));\n             }\n         }\n+\n+        private void scheduleRequestFavorites() {\n+            // Delay the execution to give the player thing handlers a chance to initialize\n+            scheduler.schedule(SqueezeBoxServerHandler.this::requestFavorites, 3L, TimeUnit.SECONDS);", "originalCommit": "d0587d5047e6142bee4001ec71b7b961f6568fbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0Nzc3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r448347778", "bodyText": "Ok, done. The isDone may not be necessary, but I added it for completeness.", "author": "mhilbush", "createdAt": "2020-07-01T13:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMTIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "32d148a350517679ed72ca38ee4ec063af8b0a98", "chunk": "diff --git a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\nindex b6c40e0436..9a8080435f 100644\n--- a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\n+++ b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\n\n@@ -1020,9 +1027,9 @@ public class SqueezeBoxServerHandler extends BaseBridgeHandler {\n             }\n         }\n \n-        private void scheduleRequestFavorites() {\n+        private ScheduledFuture<?> scheduleRequestFavorites() {\n             // Delay the execution to give the player thing handlers a chance to initialize\n-            scheduler.schedule(SqueezeBoxServerHandler.this::requestFavorites, 3L, TimeUnit.SECONDS);\n+            return scheduler.schedule(SqueezeBoxServerHandler.this::requestFavorites, 3L, TimeUnit.SECONDS);\n         }\n \n         private void updateCustomButtons(final String mac) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMjA4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r447122081", "bodyText": "You should specify the charset used here.", "author": "cpmeister", "createdAt": "2020-06-29T17:05:24Z", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -306,6 +331,8 @@ public void login() {\n         if (StringUtils.isEmpty(userId)) {\n             return;\n         }\n+        // Create basic auth string for jsonrpc interface\n+        basicAuthorization = new String(Base64.getEncoder().encode((userId + \":\" + password).getBytes()));", "originalCommit": "d0587d5047e6142bee4001ec71b7b961f6568fbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMjM0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r448322343", "bodyText": "Ok. Done. BTW there are quite a few places in the code base that don't specify the charset.", "author": "mhilbush", "createdAt": "2020-07-01T12:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMjA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "32d148a350517679ed72ca38ee4ec063af8b0a98", "chunk": "diff --git a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\nindex b6c40e0436..9a8080435f 100644\n--- a/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\n+++ b/bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java\n\n@@ -332,7 +333,8 @@ public class SqueezeBoxServerHandler extends BaseBridgeHandler {\n             return;\n         }\n         // Create basic auth string for jsonrpc interface\n-        basicAuthorization = new String(Base64.getEncoder().encode((userId + \":\" + password).getBytes()));\n+        basicAuthorization = new String(\n+                Base64.getEncoder().encode((userId + \":\" + password).getBytes(StandardCharsets.UTF_8)));\n         logger.debug(\"Logging into Squeeze Server using userId={}\", userId);\n         sendCommand(\"login \" + userId + \" \" + password);\n     }\n"}}, {"oid": "32d148a350517679ed72ca38ee4ec063af8b0a98", "url": "https://github.com/openhab/openhab-addons/commit/32d148a350517679ed72ca38ee4ec063af8b0a98", "message": "Address review comments\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>", "committedDate": "2020-07-01T13:03:10Z", "type": "commit"}]}