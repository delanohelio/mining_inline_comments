{"pr_number": 8610, "pr_title": "[bluetooth.govee] Govee Bluetooth Binding initial contribution", "pr_createdAt": "2020-09-30T00:05:33Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8610", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3MzY2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r502673665", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(immediate = true, service = BluetoothDiscoveryParticipant.class)\n          \n          \n            \n            @Component(service = BluetoothDiscoveryParticipant.class)", "author": "fwolter", "createdAt": "2020-10-09T21:13:14Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryDevice;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryParticipant;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link GoveeDiscoveryParticipant} handles discovery of Govee bluetooth devices\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true, service = BluetoothDiscoveryParticipant.class)", "originalCommit": "2a7f008461ccc90e3cd66c773ca0dc1ee6c55f67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fddbb7d849d42057e3d931ff30b4c981d83072f", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeDiscoveryParticipant.java b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeDiscoveryParticipant.java\nindex 27d8063df1..7d1ff20e4c 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeDiscoveryParticipant.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeDiscoveryParticipant.java\n\n@@ -12,7 +12,7 @@\n  */\n package org.openhab.binding.bluetooth.govee.internal;\n \n-import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.*;\n+import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.SUPPORTED_THING_TYPES_UIDS;\n \n import java.util.HashMap;\n import java.util.Map;\n"}}, {"oid": "9fddbb7d849d42057e3d931ff30b4c981d83072f", "url": "https://github.com/openhab/openhab-addons/commit/9fddbb7d849d42057e3d931ff30b4c981d83072f", "message": "Rebase against main branch\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-11-27T21:17:24Z", "type": "commit"}, {"oid": "87176b9d8c66e36f3dd530915757e71b121d38a8", "url": "https://github.com/openhab/openhab-addons/commit/87176b9d8c66e36f3dd530915757e71b121d38a8", "message": "Finish readme\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-11-28T04:50:26Z", "type": "commit"}, {"oid": "87176b9d8c66e36f3dd530915757e71b121d38a8", "url": "https://github.com/openhab/openhab-addons/commit/87176b9d8c66e36f3dd530915757e71b121d38a8", "message": "Finish readme\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-11-28T04:50:26Z", "type": "forcePushed"}, {"oid": "8b431f4c43f7d375a70affbab4f8939993f4a4f9", "url": "https://github.com/openhab/openhab-addons/commit/8b431f4c43f7d375a70affbab4f8939993f4a4f9", "message": "Fix stuff missed during rebase.\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-11-28T05:00:58Z", "type": "commit"}, {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52", "url": "https://github.com/openhab/openhab-addons/commit/b495c26f2b594e45ddf3f12c23316a46605bbc52", "message": "Really fix rebase mistake.\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-11-28T05:05:15Z", "type": "commit"}, {"oid": "34dc14d2381dd8754fb43f3475a1f26a9ea976ec", "url": "https://github.com/openhab/openhab-addons/commit/34dc14d2381dd8754fb43f3475a1f26a9ea976ec", "message": "code cleanup\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-11-30T05:23:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwODYzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536308632", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int idleDisconnectDelay = 1000;\n          \n          \n            \n                private int idleDisconnectDelayMs = 1000;", "author": "fwolter", "createdAt": "2020-12-04T18:52:58Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Condition;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a base implementation for more specific thing handlers that require constant connection to bluetooth devices.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @deprecated once CompletableFutures are supported in the actual ConnectedBluetoothHandler, this class can be deleted\n+ */\n+@Deprecated\n+@NonNullByDefault\n+public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ConnectedBluetoothHandler.class);\n+\n+    private final Condition connectionCondition = deviceLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = deviceLock.newCondition();\n+    private final Condition charCompleteCondition = deviceLock.newCondition();\n+\n+    private @Nullable Future<?> reconnectJob;\n+    private @Nullable Future<?> pendingDisconnect;\n+    private @Nullable BluetoothCharacteristic ongoingCharacteristic;\n+    private @Nullable BluetoothCompletionStatus completeStatus;\n+\n+    private boolean connectOnDemand;\n+    private int idleDisconnectDelay = 1000;", "originalCommit": "b495c26f2b594e45ddf3f12c23316a46605bbc52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjM5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536442398", "bodyText": "done", "author": "cpmeister", "createdAt": "2020-12-04T23:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwODYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "6b79f5d6d735f4aa761c4238ffa1781a158b7ab8", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java\nindex 430b3088a4..9051b61d98 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java\n\n@@ -60,7 +60,7 @@ public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n     private @Nullable BluetoothCompletionStatus completeStatus;\n \n     private boolean connectOnDemand;\n-    private int idleDisconnectDelay = 1000;\n+    private int idleDisconnectDelayMs = 1000;\n \n     protected @Nullable ScheduledExecutorService connectionTaskExecutor;\n     private volatile boolean servicesDiscovered;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwOTExNw==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536309117", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-12-04T18:53:45Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Condition;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a base implementation for more specific thing handlers that require constant connection to bluetooth devices.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @deprecated once CompletableFutures are supported in the actual ConnectedBluetoothHandler, this class can be deleted\n+ */\n+@Deprecated\n+@NonNullByDefault\n+public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ConnectedBluetoothHandler.class);\n+\n+    private final Condition connectionCondition = deviceLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = deviceLock.newCondition();\n+    private final Condition charCompleteCondition = deviceLock.newCondition();\n+\n+    private @Nullable Future<?> reconnectJob;\n+    private @Nullable Future<?> pendingDisconnect;\n+    private @Nullable BluetoothCharacteristic ongoingCharacteristic;\n+    private @Nullable BluetoothCompletionStatus completeStatus;\n+\n+    private boolean connectOnDemand;\n+    private int idleDisconnectDelay = 1000;\n+\n+    protected @Nullable ScheduledExecutorService connectionTaskExecutor;\n+    private volatile boolean servicesDiscovered;\n+\n+    public ConnectedBluetoothHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+\n+        // super.initialize adds callbacks that might require the connectionTaskExecutor to be present, so we initialize\n+        // the connectionTaskExecutor first\n+        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1,\n+                new NamedThreadFactory(\"bluetooth-connection-\" + thing.getThingTypeUID(), true));\n+        executor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        executor.setRemoveOnCancelPolicy(true);\n+        connectionTaskExecutor = executor;\n+\n+        super.initialize();\n+\n+        // Object connectOnDemandRaw = getConfig().get(BluetoothBindingConstants.CONFIGURATION_CONNECT_ON_DEMAND);", "originalCommit": "b495c26f2b594e45ddf3f12c23316a46605bbc52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjQ5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536442497", "bodyText": "done", "author": "cpmeister", "createdAt": "2020-12-04T23:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwOTExNw=="}], "type": "inlineReview", "revised_code": {"commit": "6b79f5d6d735f4aa761c4238ffa1781a158b7ab8", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java\nindex 430b3088a4..9051b61d98 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java\n\n@@ -60,7 +60,7 @@ public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n     private @Nullable BluetoothCompletionStatus completeStatus;\n \n     private boolean connectOnDemand;\n-    private int idleDisconnectDelay = 1000;\n+    private int idleDisconnectDelayMs = 1000;\n \n     protected @Nullable ScheduledExecutorService connectionTaskExecutor;\n     private volatile boolean servicesDiscovered;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMTYyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536311624", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-12-04T18:57:58Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Condition;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a base implementation for more specific thing handlers that require constant connection to bluetooth devices.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @deprecated once CompletableFutures are supported in the actual ConnectedBluetoothHandler, this class can be deleted\n+ */\n+@Deprecated\n+@NonNullByDefault\n+public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ConnectedBluetoothHandler.class);\n+\n+    private final Condition connectionCondition = deviceLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = deviceLock.newCondition();\n+    private final Condition charCompleteCondition = deviceLock.newCondition();\n+\n+    private @Nullable Future<?> reconnectJob;\n+    private @Nullable Future<?> pendingDisconnect;\n+    private @Nullable BluetoothCharacteristic ongoingCharacteristic;\n+    private @Nullable BluetoothCompletionStatus completeStatus;\n+\n+    private boolean connectOnDemand;\n+    private int idleDisconnectDelay = 1000;\n+\n+    protected @Nullable ScheduledExecutorService connectionTaskExecutor;\n+    private volatile boolean servicesDiscovered;\n+\n+    public ConnectedBluetoothHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+\n+        // super.initialize adds callbacks that might require the connectionTaskExecutor to be present, so we initialize\n+        // the connectionTaskExecutor first\n+        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1,\n+                new NamedThreadFactory(\"bluetooth-connection-\" + thing.getThingTypeUID(), true));\n+        executor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        executor.setRemoveOnCancelPolicy(true);\n+        connectionTaskExecutor = executor;\n+\n+        super.initialize();\n+\n+        // Object connectOnDemandRaw = getConfig().get(BluetoothBindingConstants.CONFIGURATION_CONNECT_ON_DEMAND);\n+        connectOnDemand = true;\n+\n+        Object idleDisconnectDelayRaw = getConfig().get(\"idleDisconnectDelay\");\n+        idleDisconnectDelay = 1000;\n+        if (idleDisconnectDelayRaw instanceof Number) {\n+            idleDisconnectDelay = ((Number) idleDisconnectDelayRaw).intValue();\n+        }\n+\n+        if (!connectOnDemand) {\n+            reconnectJob = executor.scheduleWithFixedDelay(() -> {\n+                try {\n+                    if (device.getConnectionState() != ConnectionState.CONNECTED) {\n+                        device.connect();\n+                        // we do not set the Thing status here, because we will anyhow receive a call to\n+                        // onConnectionStateChange\n+                    } else {\n+                        // just in case it was already connected to begin with\n+                        updateStatus(ThingStatus.ONLINE);\n+                        if (!servicesDiscovered && !device.discoverServices()) {\n+                            logger.debug(\"Error while discovering services\");\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    logger.warn(\"Unexpected error occurred\", ex);\n+                }\n+            }, 0, 30, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancel(reconnectJob);\n+        reconnectJob = null;\n+        cancel(pendingDisconnect);\n+        pendingDisconnect = null;\n+\n+        super.dispose();\n+\n+        shutdown(connectionTaskExecutor);\n+        connectionTaskExecutor = null;\n+    }\n+\n+    private static void cancel(@Nullable Future<?> future) {\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+    }\n+\n+    private void shutdown(@Nullable ScheduledExecutorService executor) {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    private ScheduledExecutorService getConnectionTaskExecutor() {\n+        var executor = connectionTaskExecutor;\n+        if (executor == null) {\n+            throw new IllegalStateException(\"characteristicScheduler has not been initialized\");\n+        }\n+        return executor;\n+    }\n+\n+    private void scheduleDisconnect() {\n+        cancel(pendingDisconnect);\n+        pendingDisconnect = getConnectionTaskExecutor().schedule(device::disconnect, idleDisconnectDelay,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void connectAndWait() throws ConnectionException, TimeoutException, InterruptedException {\n+        if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+            return;\n+        }\n+        if (device.getConnectionState() != ConnectionState.CONNECTING) {\n+            if (!device.connect()) {\n+                throw new ConnectionException(\"Failed to start connecting\");\n+            }\n+        }\n+        logger.debug(\"waiting for connection\");\n+        if (!awaitConnection(1, TimeUnit.SECONDS)) {\n+            throw new TimeoutException(\"Connection attempt timeout.\");\n+        }\n+        logger.debug(\"connection successful\");\n+        if (!servicesDiscovered) {\n+            logger.debug(\"discovering services\");\n+            device.discoverServices();\n+            if (!awaitServiceDiscovery(20, TimeUnit.SECONDS)) {\n+                throw new TimeoutException(\"Service discovery timeout\");\n+            }\n+            logger.debug(\"service discovery successful\");\n+        }\n+    }\n+\n+    private boolean awaitConnection(long timeout, TimeUnit unit) throws InterruptedException {\n+        deviceLock.lock();\n+        try {\n+            long nanosTimeout = unit.toNanos(timeout);\n+            while (device.getConnectionState() != ConnectionState.CONNECTED) {\n+                if (nanosTimeout <= 0L) {\n+                    return false;\n+                }\n+                nanosTimeout = connectionCondition.awaitNanos(nanosTimeout);\n+            }\n+        } finally {\n+            deviceLock.unlock();\n+        }\n+        return true;\n+    }\n+\n+    private boolean awaitCharacteristicComplete(long timeout, TimeUnit unit) throws InterruptedException {\n+        deviceLock.lock();\n+        try {\n+            long nanosTimeout = unit.toNanos(timeout);\n+            while (ongoingCharacteristic != null) {\n+                if (nanosTimeout <= 0L) {\n+                    return false;\n+                }\n+                nanosTimeout = charCompleteCondition.awaitNanos(nanosTimeout);\n+            }\n+        } finally {\n+            deviceLock.unlock();\n+        }\n+        return true;\n+    }\n+\n+    private boolean awaitServiceDiscovery(long timeout, TimeUnit unit) throws InterruptedException {\n+        deviceLock.lock();\n+        try {\n+            long nanosTimeout = unit.toNanos(timeout);\n+            while (!servicesDiscovered) {\n+                if (nanosTimeout <= 0L) {\n+                    return false;\n+                }\n+                nanosTimeout = serviceDiscoveryCondition.awaitNanos(nanosTimeout);\n+            }\n+        } finally {\n+            deviceLock.unlock();\n+        }\n+        return true;\n+    }\n+\n+    private BluetoothCharacteristic connectAndGetCharacteristic(UUID serviceUUID, UUID characteristicUUID)\n+            throws BluetoothException, TimeoutException, InterruptedException {\n+        connectAndWait();\n+        BluetoothService service = device.getServices(serviceUUID);\n+        if (service == null) {\n+            throw new BluetoothException(\"Service with uuid \" + serviceUUID + \" could not be found\");\n+        }\n+        BluetoothCharacteristic characteristic = service.getCharacteristic(characteristicUUID);\n+        if (characteristic == null) {\n+            throw new BluetoothException(\"Characteristic with uuid \" + characteristicUUID + \" could not be found\");\n+        }\n+        return characteristic;\n+    }\n+\n+    private <T> CompletableFuture<T> executeWithConnection(UUID serviceUUID, UUID characteristicUUID,\n+            CallableFunction<BluetoothCharacteristic, T> callable) {\n+        CompletableFuture<T> future = new CompletableFuture<>();\n+        var executor = connectionTaskExecutor;\n+        if (executor != null) {\n+            executor.execute(() -> {\n+                cancel(pendingDisconnect);\n+                try {\n+                    BluetoothCharacteristic characteristic = connectAndGetCharacteristic(serviceUUID,\n+                            characteristicUUID);\n+                    future.complete(callable.call(characteristic));\n+                } catch (InterruptedException e) {\n+                    future.completeExceptionally(e);\n+                    return;// we don't want to schedule anything if we receive an interrupt\n+                } catch (TimeoutException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                    future.completeExceptionally(e);\n+                } catch (Exception e) {\n+                    future.completeExceptionally(e);\n+                }\n+                if (connectOnDemand) {\n+                    scheduleDisconnect();\n+                }\n+            });\n+        } else {\n+            future.completeExceptionally(new IllegalStateException(\"characteristicScheduler has not been initialized\"));\n+        }\n+        return future;\n+    }\n+\n+    public CompletableFuture<@Nullable Void> enableNotifications(UUID serviceUUID, UUID characteristicUUID) {\n+        return executeWithConnection(serviceUUID, characteristicUUID, characteristic -> {\n+            if (!device.enableNotifications(characteristic)) {\n+                throw new BluetoothException(\n+                        \"Failed to start notifications for characteristic: \" + characteristic.getUuid());\n+            }\n+            return null;\n+        });\n+    }\n+\n+    public CompletableFuture<@Nullable Void> writeCharacteristic(UUID serviceUUID, UUID characteristicUUID, byte[] data,\n+            boolean enableNotification) {\n+        return executeWithConnection(serviceUUID, characteristicUUID, characteristic -> {\n+            if (enableNotification) {\n+                if (!device.enableNotifications(characteristic)) {\n+                    // logger.debug(\"Failed to enable notifications for characteristic {}\", characteristic.getUuid());", "originalCommit": "b495c26f2b594e45ddf3f12c23316a46605bbc52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjUzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536442530", "bodyText": "done", "author": "cpmeister", "createdAt": "2020-12-04T23:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMTYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "6b79f5d6d735f4aa761c4238ffa1781a158b7ab8", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java\nindex 430b3088a4..9051b61d98 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java\n\n@@ -60,7 +60,7 @@ public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n     private @Nullable BluetoothCompletionStatus completeStatus;\n \n     private boolean connectOnDemand;\n-    private int idleDisconnectDelay = 1000;\n+    private int idleDisconnectDelayMs = 1000;\n \n     protected @Nullable ScheduledExecutorService connectionTaskExecutor;\n     private volatile boolean servicesDiscovered;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNjIyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536316226", "bodyText": "What's the purpose of this?", "author": "fwolter", "createdAt": "2020-12-04T19:06:26Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java", "diffHunk": "@@ -0,0 +1,429 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.*;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import javax.measure.Quantity;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.gattserial.MessageServicer;\n+import org.openhab.binding.bluetooth.gattserial.SimpleGattSocket;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetBatteryCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetTemHumCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GoveeMessage;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.TemHumDTO;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.WarningSettingsDTO;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.openhab.binding.bluetooth.util.HeritableFuture;\n+import org.openhab.binding.bluetooth.util.RetryException;\n+import org.openhab.binding.bluetooth.util.RetryFuture;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GoveeHygrometerHandler extends ConnectedBluetoothHandler {\n+\n+    private static final UUID SERVICE_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f4857\");\n+    private static final UUID PROTOCOL_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2011\");\n+    private static final UUID KEEP_ALIVE_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2012\");\n+\n+    private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoveeHygrometerHandler.class);\n+\n+    private final CommandSocket commandSocket = new CommandSocket();\n+\n+    private GoveeHygrometerConfiguration config = new GoveeHygrometerConfiguration();\n+    private GoveeModel model = GoveeModel.H5074;// we use this as our default model\n+\n+    private CompletableFuture<?> initializeJob = CompletableFuture.completedFuture(null);// initially set to a dummy\n+                                                                                         // future\n+    private Future<?> scanJob = CompletableFuture.completedFuture(null);\n+    private Future<?> keepAliveJob = CompletableFuture.completedFuture(null);\n+\n+    public GoveeHygrometerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(GoveeHygrometerConfiguration.class);\n+\n+        Map<String, String> properties = thing.getProperties();\n+        String modelProp = properties.get(Thing.PROPERTY_MODEL_ID);\n+        model = GoveeModel.H5074;\n+        if (modelProp != null) {\n+            try {\n+                model = GoveeModel.valueOf(modelProp);\n+            } catch (IllegalArgumentException ex) {\n+                // ignore\n+            }\n+        }\n+\n+        logger.debug(\"Initializing Govee Hygrometer {} model: {}\", address, model);\n+        initializeJob = RetryFuture.composeWithRetry(this::createInitSettingsJob, scheduler)//\n+                .thenRun(() -> {\n+                    updateStatus(ThingStatus.ONLINE);\n+                });\n+        scanJob = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                if (initializeJob.isDone() && !initializeJob.isCompletedExceptionally()) {\n+                    logger.debug(\"refreshing temperature, humidity, and battery\");\n+                    refreshBattery().join();\n+                    refreshTemperatureAndHumidity().join();\n+                    connectionTaskExecutor.execute(device::disconnect);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (RuntimeException ex) {\n+                logger.warn(\"unable to refresh\", ex);\n+            }\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+        keepAliveJob = connectionTaskExecutor.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                try {\n+                    GoveeMessage message = new GoveeMessage((byte) 0xAA, (byte) 1, null);\n+                    writeCharacteristic(SERVICE_UUID, KEEP_ALIVE_CHAR_UUID, message.getPayload(), false);\n+                } catch (RuntimeException ex) {\n+                    logger.warn(\"unable to send keep alive\", ex);\n+                }\n+            }\n+        }, 1, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            throw new Exception();\n+        } catch (Exception ex) {\n+            logger.debug(\"Disposing Govee Hygrometer {} model: {}\", address, model, ex);\n+        }", "originalCommit": "b495c26f2b594e45ddf3f12c23316a46605bbc52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNTE5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536425196", "bodyText": "wow, I totally forgot to remove that. It was strictly for debugging.", "author": "cpmeister", "createdAt": "2020-12-04T22:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNjIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDI5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536444290", "bodyText": "done", "author": "cpmeister", "createdAt": "2020-12-04T23:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNjIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "6b79f5d6d735f4aa761c4238ffa1781a158b7ab8", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java\nindex 3ba13e3c77..f0d9225578 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java\n\n@@ -72,7 +72,7 @@ public class GoveeHygrometerHandler extends ConnectedBluetoothHandler {\n     private static final UUID PROTOCOL_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2011\");\n     private static final UUID KEEP_ALIVE_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2012\");\n \n-    private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };\n+    private static final byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };\n \n     private final Logger logger = LoggerFactory.getLogger(GoveeHygrometerHandler.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxOTE1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536319154", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-12-04T19:11:56Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetTemHumCommand.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GetTemHumCommand extends GetCommand {\n+\n+    private CompletableFuture<@Nullable TemHumDTO> resultHandler;\n+    // private BiConsumer<@Nullable QuantityType<Temperature>, @Nullable QuantityType<Dimensionless>> resultHandler;", "originalCommit": "b495c26f2b594e45ddf3f12c23316a46605bbc52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NTIzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536445237", "bodyText": "done", "author": "cpmeister", "createdAt": "2020-12-04T23:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxOTE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "6b79f5d6d735f4aa761c4238ffa1781a158b7ab8", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetTemHumCommand.java b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetTemHumCommand.java\nindex 426390406e..3090e0af3a 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetTemHumCommand.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetTemHumCommand.java\n\n@@ -30,7 +30,6 @@ import org.openhab.core.library.unit.SmartHomeUnits;\n public class GetTemHumCommand extends GetCommand {\n \n     private CompletableFuture<@Nullable TemHumDTO> resultHandler;\n-    // private BiConsumer<@Nullable QuantityType<Temperature>, @Nullable QuantityType<Dimensionless>> resultHandler;\n \n     public GetTemHumCommand(CompletableFuture<@Nullable TemHumDTO> resultHandler) {\n         this.resultHandler = resultHandler;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNjAyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536326029", "bodyText": "I like this. Love to see this at some more prominent location.", "author": "fwolter", "createdAt": "2020-12-04T19:20:53Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.readme;\n+\n+import java.io.FileInputStream;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.openhab.binding.bluetooth.govee.internal.GoveeModel;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+public class ThingTypeTableGenerator {", "originalCommit": "b495c26f2b594e45ddf3f12c23316a46605bbc52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a122eee05a3d8db8959fe5532516282a7ddd11f", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java b/bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java\nindex de980561d8..2eff5bd22a 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMDQ0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536330442", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };\n          \n          \n            \n                private static final byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };", "author": "fwolter", "createdAt": "2020-12-04T19:29:05Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java", "diffHunk": "@@ -0,0 +1,429 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.*;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import javax.measure.Quantity;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.gattserial.MessageServicer;\n+import org.openhab.binding.bluetooth.gattserial.SimpleGattSocket;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetBatteryCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetTemHumCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GoveeMessage;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.TemHumDTO;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.WarningSettingsDTO;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.openhab.binding.bluetooth.util.HeritableFuture;\n+import org.openhab.binding.bluetooth.util.RetryException;\n+import org.openhab.binding.bluetooth.util.RetryFuture;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GoveeHygrometerHandler extends ConnectedBluetoothHandler {\n+\n+    private static final UUID SERVICE_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f4857\");\n+    private static final UUID PROTOCOL_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2011\");\n+    private static final UUID KEEP_ALIVE_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2012\");\n+\n+    private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };", "originalCommit": "b495c26f2b594e45ddf3f12c23316a46605bbc52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDU5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536444598", "bodyText": "done", "author": "cpmeister", "createdAt": "2020-12-04T23:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMDQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6b79f5d6d735f4aa761c4238ffa1781a158b7ab8", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java\nindex 3ba13e3c77..f0d9225578 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java\n\n@@ -72,7 +72,7 @@ public class GoveeHygrometerHandler extends ConnectedBluetoothHandler {\n     private static final UUID PROTOCOL_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2011\");\n     private static final UUID KEEP_ALIVE_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2012\");\n \n-    private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };\n+    private static final byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };\n \n     private final Logger logger = LoggerFactory.getLogger(GoveeHygrometerHandler.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMTc5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536331799", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class GetCommand extends GoveeCommand {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public abstract class GetCommand extends GoveeCommand {", "author": "fwolter", "createdAt": "2020-12-04T19:31:32Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetCommand.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+public abstract class GetCommand extends GoveeCommand {", "originalCommit": "b495c26f2b594e45ddf3f12c23316a46605bbc52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDc3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536444773", "bodyText": "done", "author": "cpmeister", "createdAt": "2020-12-04T23:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMTc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6b79f5d6d735f4aa761c4238ffa1781a158b7ab8", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetCommand.java b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetCommand.java\nindex e8fa8f2f75..4aa8715e6e 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetCommand.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetCommand.java\n\n@@ -12,12 +12,14 @@\n  */\n package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n \n /**\n  * @author Connor Petty - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public abstract class GetCommand extends GoveeCommand {\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMTkxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536331912", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class SetCommand extends GoveeCommand {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public abstract class SetCommand extends GoveeCommand {", "author": "fwolter", "createdAt": "2020-12-04T19:31:45Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/SetCommand.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+public abstract class SetCommand extends GoveeCommand {", "originalCommit": "b495c26f2b594e45ddf3f12c23316a46605bbc52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDc5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536444797", "bodyText": "done", "author": "cpmeister", "createdAt": "2020-12-04T23:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMTkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "6b79f5d6d735f4aa761c4238ffa1781a158b7ab8", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/SetCommand.java b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/SetCommand.java\nindex dcffb91b35..7436fc4573 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/SetCommand.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/SetCommand.java\n\n@@ -12,10 +12,13 @@\n  */\n package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * @author Connor Petty - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public abstract class SetCommand extends GoveeCommand {\n \n     @Override\n"}}, {"oid": "6b79f5d6d735f4aa761c4238ffa1781a158b7ab8", "url": "https://github.com/openhab/openhab-addons/commit/6b79f5d6d735f4aa761c4238ffa1781a158b7ab8", "message": "Address review comments\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-12-04T23:22:57Z", "type": "commit"}, {"oid": "6c61d995049b34ec9ae391e55214a5d2402bb974", "url": "https://github.com/openhab/openhab-addons/commit/6c61d995049b34ec9ae391e55214a5d2402bb974", "message": "More readme adjustments\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2020-12-04T23:32:51Z", "type": "commit"}, {"oid": "28ce71b3fa360dacb6951b5cd1b42306b8230397", "url": "https://github.com/openhab/openhab-addons/commit/28ce71b3fa360dacb6951b5cd1b42306b8230397", "message": "Merge branch 'main' of https://github.com/openhab/openhab-addons into\nbluetooth.govee\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2021-01-15T19:46:03Z", "type": "commit"}, {"oid": "d5060d0a43080d6ea5710ee3da1a39153b8601aa", "url": "https://github.com/openhab/openhab-addons/commit/d5060d0a43080d6ea5710ee3da1a39153b8601aa", "message": "Fix unit changes.\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2021-01-15T19:54:45Z", "type": "commit"}, {"oid": "5d9d53c89808197f779f86d6467fff3aba8ced32", "url": "https://github.com/openhab/openhab-addons/commit/5d9d53c89808197f779f86d6467fff3aba8ced32", "message": "Fix project version.\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2021-01-15T19:57:04Z", "type": "commit"}, {"oid": "5a122eee05a3d8db8959fe5532516282a7ddd11f", "url": "https://github.com/openhab/openhab-addons/commit/5a122eee05a3d8db8959fe5532516282a7ddd11f", "message": "Fix license header dates\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2021-01-15T20:08:00Z", "type": "commit"}, {"oid": "e07a1b1ae694c0cdc3c4d2c897954356481f41a9", "url": "https://github.com/openhab/openhab-addons/commit/e07a1b1ae694c0cdc3c4d2c897954356481f41a9", "message": "Fix version override warning\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2021-01-15T20:08:22Z", "type": "commit"}, {"oid": "5cd88ae90220b2453d8c85704066128cb5f1d267", "url": "https://github.com/openhab/openhab-addons/commit/5cd88ae90220b2453d8c85704066128cb5f1d267", "message": "Fix author tag.\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2021-01-15T20:26:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg3NjQ3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r562876472", "bodyText": "Left over commented out code.", "author": "Hilbrand", "createdAt": "2021-01-22T20:01:07Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetOrSetHumCaliCommand.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.measure.quantity.Dimensionless;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.Units;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GetOrSetHumCaliCommand extends GoveeCommand {\n+\n+    private final CompletableFuture<@Nullable QuantityType<Dimensionless>> resultHandler;\n+    private final @Nullable QuantityType<Dimensionless> value;\n+\n+    // private @Nullable Integer value;", "originalCommit": "5cd88ae90220b2453d8c85704066128cb5f1d267", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI1MTg5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r563251899", "bodyText": "Thanks for finding that. Removed.", "author": "cpmeister", "createdAt": "2021-01-24T07:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg3NjQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "17784109500393001436305e18668380b451fac1", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetOrSetHumCaliCommand.java b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetOrSetHumCaliCommand.java\nindex 4e50815812..1c097d9a88 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetOrSetHumCaliCommand.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetOrSetHumCaliCommand.java\n\n@@ -33,8 +33,6 @@ public class GetOrSetHumCaliCommand extends GoveeCommand {\n     private final CompletableFuture<@Nullable QuantityType<Dimensionless>> resultHandler;\n     private final @Nullable QuantityType<Dimensionless> value;\n \n-    // private @Nullable Integer value;\n-\n     public GetOrSetHumCaliCommand(CompletableFuture<@Nullable QuantityType<Dimensionless>> resultHandler) {\n         this.value = null;\n         this.resultHandler = resultHandler;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwOTQwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r563209404", "bodyText": "Maybe not use apache StringUtils as we want to get ride of it.", "author": "Hilbrand", "createdAt": "2021-01-23T22:54:07Z", "path": "bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.readme;\n+\n+import java.io.FileInputStream;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.openhab.binding.bluetooth.govee.internal.GoveeModel;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+public class ThingTypeTableGenerator {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        FileInputStream fileIS = new FileInputStream(\"src/main/resources/OH-INF/thing/thing-types.xml\");\n+        DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder builder = builderFactory.newDocumentBuilder();\n+        Document xmlDocument = builder.parse(fileIS);\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        String expression = \"/*[local-name()='thing-descriptions']/thing-type\";\n+        XPathExpression labelExpression = xPath.compile(\"label/text()\");\n+        XPathExpression descriptionExpression = xPath.compile(\"description/text()\");\n+\n+        NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);\n+\n+        List<ThingTypeData> thingTypeDataList = new ArrayList<>();\n+\n+        for (int i = 0; i < nodeList.getLength(); i++) {\n+            Node node = nodeList.item(i);\n+            ThingTypeData data = new ThingTypeData();\n+\n+            data.id = node.getAttributes().getNamedItem(\"id\").getTextContent();\n+            data.label = (String) labelExpression.evaluate(node, XPathConstants.STRING);\n+            data.description = (String) descriptionExpression.evaluate(node, XPathConstants.STRING);\n+\n+            thingTypeDataList.add(data);\n+        }\n+\n+        String[] headerRow = new String[] { \"Thing Type ID\", \"Description\", \"Supported Models\" };\n+\n+        List<String[]> rows = new ArrayList<>();\n+        rows.add(headerRow);\n+        rows.addAll(thingTypeDataList.stream().map(ThingTypeTableGenerator::toRow).collect(Collectors.toList()));\n+\n+        int[] maxColumns = { maxColumnSize(rows, 0), maxColumnSize(rows, 1), maxColumnSize(rows, 2) };\n+\n+        StringWriter writer = new StringWriter();\n+\n+        // write actual rows\n+        rows.forEach(row -> {\n+            writer.append(writeRow(maxColumns, row, ' ')).append('\\n');\n+            if (row == headerRow) {\n+                writer.append(writeRow(maxColumns, new String[] { \"\", \"\", \"\" }, '-')).append('\\n');\n+            }\n+        });\n+\n+        System.out.println(writer.toString());\n+    }\n+\n+    private static String writeRow(int[] maxColumns, String[] row, char paddingChar) {\n+        String prefix = \"|\" + paddingChar;\n+        String infix = paddingChar + \"|\" + paddingChar;\n+        String suffix = paddingChar + \"|\";\n+\n+        return Stream.of(0, 1, 2).map(i -> StringUtils.rightPad(row[i], maxColumns[i], paddingChar))", "originalCommit": "5cd88ae90220b2453d8c85704066128cb5f1d267", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI1MTkzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r563251931", "bodyText": "done", "author": "cpmeister", "createdAt": "2021-01-24T07:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwOTQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "17784109500393001436305e18668380b451fac1", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java b/bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java\nindex 2eff5bd22a..f28c07e279 100644\n--- a/bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java\n+++ b/bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java\n\n@@ -27,7 +27,6 @@ import javax.xml.xpath.XPathConstants;\n import javax.xml.xpath.XPathExpression;\n import javax.xml.xpath.XPathFactory;\n \n-import org.apache.commons.lang.StringUtils;\n import org.openhab.binding.bluetooth.govee.internal.GoveeModel;\n import org.w3c.dom.Document;\n import org.w3c.dom.Node;\n"}}, {"oid": "17784109500393001436305e18668380b451fac1", "url": "https://github.com/openhab/openhab-addons/commit/17784109500393001436305e18668380b451fac1", "message": "Address review comments\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2021-01-24T07:36:43Z", "type": "commit"}, {"oid": "63ecb6d126a74ddd428411bed02c54bc781052ba", "url": "https://github.com/openhab/openhab-addons/commit/63ecb6d126a74ddd428411bed02c54bc781052ba", "message": "Properly label required parameters\n\nSigned-off-by: Connor Petty <mistercpp2000+gitsignoff@gmail.com>", "committedDate": "2021-01-24T19:36:42Z", "type": "commit"}]}