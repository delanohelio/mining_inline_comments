{"pr_number": 7673, "pr_title": "[homekit] add support for internal Valve timer", "pr_createdAt": "2020-05-18T15:59:11Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7673", "timeline": [{"oid": "aea5a1f87a9e89510ad8144d99c611e51df8818f", "url": "https://github.com/openhab/openhab-addons/commit/aea5a1f87a9e89510ad8144d99c611e51df8818f", "message": "add support for internal Valve timer\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-05-18T15:42:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMTQ4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r426931481", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            remainingTime = java.lang.Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n          \n          \n            \n                            remainingTime = Math.toIntExact(future.getDelay(TimeUnit.SECONDS));", "author": "cpmeister", "createdAt": "2020-05-18T22:43:34Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java", "diffHunk": "@@ -73,6 +78,73 @@ public HomekitValveImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> ma\n         this.activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n                 OnOffType.ON, OpenClosedType.OPEN);\n         getServices().add(new ValveService(this));\n+        final String timerConfig = getAccessoryConfiguration(CONFIG_TIMER, \"\");\n+        homekitTimer = timerConfig.equalsIgnoreCase(\"yes\") || timerConfig.equalsIgnoreCase(\"true\");\n+        if (homekitTimer) {\n+            addRemainingDurationCharacteristic(taggedItem, updater);\n+        }\n+    }\n+\n+    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater) {\n+        logger.trace(\"addRemainingDurationCharacteristic for {}\", taggedItem);\n+        ((ValveService) getPrimaryService()).addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n+            int remainingTime = 0;\n+            ScheduledFuture<?> future = valveTimer;\n+            if (future != null && !future.isDone()) {\n+                remainingTime = java.lang.Math.toIntExact(future.getDelay(TimeUnit.SECONDS));", "originalCommit": "aea5a1f87a9e89510ad8144d99c611e51df8818f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fad26bc6d994af35d079d0da04361c02c7fb76d4", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\nindex b4b06ab467..4433778241 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\n\n@@ -77,27 +77,27 @@ public class HomekitValveImpl extends AbstractHomekitAccessoryImpl implements Va\n                 OnOffType.ON, OpenClosedType.OPEN);\n         this.activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n                 OnOffType.ON, OpenClosedType.OPEN);\n-        getServices().add(new ValveService(this));\n+        ValveService service = new ValveService(this);\n+        getServices().add(service);\n         final String timerConfig = getAccessoryConfiguration(CONFIG_TIMER, \"\");\n         homekitTimer = timerConfig.equalsIgnoreCase(\"yes\") || timerConfig.equalsIgnoreCase(\"true\");\n         if (homekitTimer) {\n-            addRemainingDurationCharacteristic(taggedItem, updater);\n+            addRemainingDurationCharacteristic(taggedItem, updater, service);\n         }\n     }\n \n-    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater) {\n+    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater,\n+            ValveService service) {\n         logger.trace(\"addRemainingDurationCharacteristic for {}\", taggedItem);\n-        ((ValveService) getPrimaryService()).addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n+        service.addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n             int remainingTime = 0;\n             ScheduledFuture<?> future = valveTimer;\n             if (future != null && !future.isDone()) {\n-                remainingTime = java.lang.Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n+                remainingTime = Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n             }\n             return CompletableFuture.completedFuture(remainingTime);\n-        }, (callback) -> updater.subscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag(), callback),\n-                () -> updater.unsubscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag())\n-\n-        ));\n+        }, HomekitCharacteristicFactory.getSubscriber(taggedItem, REMAINING_DURATION, updater),\n+                HomekitCharacteristicFactory.getUnsubscriber(taggedItem, REMAINING_DURATION, updater)));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNzgzMA==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r426937830", "bodyText": "Couldn't getSubscriber and getUnsubscriber be used here?", "author": "cpmeister", "createdAt": "2020-05-18T23:01:46Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java", "diffHunk": "@@ -73,6 +78,73 @@ public HomekitValveImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> ma\n         this.activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n                 OnOffType.ON, OpenClosedType.OPEN);\n         getServices().add(new ValveService(this));\n+        final String timerConfig = getAccessoryConfiguration(CONFIG_TIMER, \"\");\n+        homekitTimer = timerConfig.equalsIgnoreCase(\"yes\") || timerConfig.equalsIgnoreCase(\"true\");\n+        if (homekitTimer) {\n+            addRemainingDurationCharacteristic(taggedItem, updater);\n+        }\n+    }\n+\n+    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater) {\n+        logger.trace(\"addRemainingDurationCharacteristic for {}\", taggedItem);\n+        ((ValveService) getPrimaryService()).addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n+            int remainingTime = 0;\n+            ScheduledFuture<?> future = valveTimer;\n+            if (future != null && !future.isDone()) {\n+                remainingTime = java.lang.Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n+            }\n+            return CompletableFuture.completedFuture(remainingTime);\n+        }, (callback) -> updater.subscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag(), callback),\n+                () -> updater.unsubscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag())", "originalCommit": "aea5a1f87a9e89510ad8144d99c611e51df8818f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwMjAxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r427102019", "bodyText": "good one. missed that one.", "author": "yfre", "createdAt": "2020-05-19T07:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNzgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "fad26bc6d994af35d079d0da04361c02c7fb76d4", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\nindex b4b06ab467..4433778241 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\n\n@@ -77,27 +77,27 @@ public class HomekitValveImpl extends AbstractHomekitAccessoryImpl implements Va\n                 OnOffType.ON, OpenClosedType.OPEN);\n         this.activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n                 OnOffType.ON, OpenClosedType.OPEN);\n-        getServices().add(new ValveService(this));\n+        ValveService service = new ValveService(this);\n+        getServices().add(service);\n         final String timerConfig = getAccessoryConfiguration(CONFIG_TIMER, \"\");\n         homekitTimer = timerConfig.equalsIgnoreCase(\"yes\") || timerConfig.equalsIgnoreCase(\"true\");\n         if (homekitTimer) {\n-            addRemainingDurationCharacteristic(taggedItem, updater);\n+            addRemainingDurationCharacteristic(taggedItem, updater, service);\n         }\n     }\n \n-    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater) {\n+    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater,\n+            ValveService service) {\n         logger.trace(\"addRemainingDurationCharacteristic for {}\", taggedItem);\n-        ((ValveService) getPrimaryService()).addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n+        service.addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n             int remainingTime = 0;\n             ScheduledFuture<?> future = valveTimer;\n             if (future != null && !future.isDone()) {\n-                remainingTime = java.lang.Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n+                remainingTime = Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n             }\n             return CompletableFuture.completedFuture(remainingTime);\n-        }, (callback) -> updater.subscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag(), callback),\n-                () -> updater.unsubscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag())\n-\n-        ));\n+        }, HomekitCharacteristicFactory.getSubscriber(taggedItem, REMAINING_DURATION, updater),\n+                HomekitCharacteristicFactory.getUnsubscriber(taggedItem, REMAINING_DURATION, updater)));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTY4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r426939681", "bodyText": "Why not have ValveService be passed in as a parameter to the addRemainingDurationCharacteristic function instead of having to lookup and cast it here?", "author": "cpmeister", "createdAt": "2020-05-18T23:07:04Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java", "diffHunk": "@@ -73,6 +78,73 @@ public HomekitValveImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> ma\n         this.activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n                 OnOffType.ON, OpenClosedType.OPEN);\n         getServices().add(new ValveService(this));\n+        final String timerConfig = getAccessoryConfiguration(CONFIG_TIMER, \"\");\n+        homekitTimer = timerConfig.equalsIgnoreCase(\"yes\") || timerConfig.equalsIgnoreCase(\"true\");\n+        if (homekitTimer) {\n+            addRemainingDurationCharacteristic(taggedItem, updater);\n+        }\n+    }\n+\n+    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater) {\n+        logger.trace(\"addRemainingDurationCharacteristic for {}\", taggedItem);\n+        ((ValveService) getPrimaryService()).addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {", "originalCommit": "aea5a1f87a9e89510ad8144d99c611e51df8818f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA5NzMyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r427097327", "bodyText": "right. good point", "author": "yfre", "createdAt": "2020-05-19T07:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTY4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fad26bc6d994af35d079d0da04361c02c7fb76d4", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\nindex b4b06ab467..4433778241 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\n\n@@ -77,27 +77,27 @@ public class HomekitValveImpl extends AbstractHomekitAccessoryImpl implements Va\n                 OnOffType.ON, OpenClosedType.OPEN);\n         this.activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n                 OnOffType.ON, OpenClosedType.OPEN);\n-        getServices().add(new ValveService(this));\n+        ValveService service = new ValveService(this);\n+        getServices().add(service);\n         final String timerConfig = getAccessoryConfiguration(CONFIG_TIMER, \"\");\n         homekitTimer = timerConfig.equalsIgnoreCase(\"yes\") || timerConfig.equalsIgnoreCase(\"true\");\n         if (homekitTimer) {\n-            addRemainingDurationCharacteristic(taggedItem, updater);\n+            addRemainingDurationCharacteristic(taggedItem, updater, service);\n         }\n     }\n \n-    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater) {\n+    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater,\n+            ValveService service) {\n         logger.trace(\"addRemainingDurationCharacteristic for {}\", taggedItem);\n-        ((ValveService) getPrimaryService()).addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n+        service.addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n             int remainingTime = 0;\n             ScheduledFuture<?> future = valveTimer;\n             if (future != null && !future.isDone()) {\n-                remainingTime = java.lang.Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n+                remainingTime = Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n             }\n             return CompletableFuture.completedFuture(remainingTime);\n-        }, (callback) -> updater.subscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag(), callback),\n-                () -> updater.unsubscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag())\n-\n-        ));\n+        }, HomekitCharacteristicFactory.getSubscriber(taggedItem, REMAINING_DURATION, updater),\n+                HomekitCharacteristicFactory.getUnsubscriber(taggedItem, REMAINING_DURATION, updater)));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MTI2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r426941260", "bodyText": "This should be equivalent unless you really need the valveTimer to be assigned before the refresh command is sent.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ScheduledFuture<?> future = valveTimer;\n          \n          \n            \n                        if (future != null && !future.isDone()) {\n          \n          \n            \n                            future.cancel(true);\n          \n          \n            \n                        }\n          \n          \n            \n                        valveTimer = timerService.schedule(() -> {\n          \n          \n            \n                            logger.trace(\"valve timer is over. switching off the valve\");\n          \n          \n            \n                            switchOffValve();\n          \n          \n            \n                            // let home app refresh the remaining duration, which is 0\n          \n          \n            \n                            ((GenericItem) getRootAccessory().getItem()).send(RefreshType.REFRESH);\n          \n          \n            \n                        }, duration, TimeUnit.SECONDS);\n          \n          \n            \n            \n          \n          \n            \n                        // let home app refresh the remaining duration, which is 0\n          \n          \n            \n                        ((GenericItem) getRootAccessory().getItem()).send(RefreshType.REFRESH);\n          \n          \n            \n                        stopTimer();\n          \n          \n            \n                        valveTimer = timerService.schedule(() -> {\n          \n          \n            \n                            logger.trace(\"valve timer is over. switching off the valve\");\n          \n          \n            \n                            switchOffValve();\n          \n          \n            \n                            // let home app refresh the remaining duration, which is 0\n          \n          \n            \n                            ((GenericItem) getRootAccessory().getItem()).send(RefreshType.REFRESH);\n          \n          \n            \n                        }, duration, TimeUnit.SECONDS);", "author": "cpmeister", "createdAt": "2020-05-18T23:12:27Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java", "diffHunk": "@@ -73,6 +78,73 @@ public HomekitValveImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> ma\n         this.activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n                 OnOffType.ON, OpenClosedType.OPEN);\n         getServices().add(new ValveService(this));\n+        final String timerConfig = getAccessoryConfiguration(CONFIG_TIMER, \"\");\n+        homekitTimer = timerConfig.equalsIgnoreCase(\"yes\") || timerConfig.equalsIgnoreCase(\"true\");\n+        if (homekitTimer) {\n+            addRemainingDurationCharacteristic(taggedItem, updater);\n+        }\n+    }\n+\n+    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater) {\n+        logger.trace(\"addRemainingDurationCharacteristic for {}\", taggedItem);\n+        ((ValveService) getPrimaryService()).addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n+            int remainingTime = 0;\n+            ScheduledFuture<?> future = valveTimer;\n+            if (future != null && !future.isDone()) {\n+                remainingTime = java.lang.Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n+            }\n+            return CompletableFuture.completedFuture(remainingTime);\n+        }, (callback) -> updater.subscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag(), callback),\n+                () -> updater.unsubscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag())\n+\n+        ));\n+    }\n+\n+    /**\n+     * return duration set by home app at corresponding OH items. if ot set, then return the default duration from\n+     * configuration.\n+     * \n+     * @return duraion\n+     */\n+    private int getDuration() {\n+        int duration = 0;\n+        final @Nullable DecimalType durationState = getStateAs(HomekitCharacteristicType.DURATION, DecimalType.class);\n+        if (durationState != null) {\n+            duration = durationState.intValue();\n+        }\n+        return duration;\n+    }\n+\n+    private void startTimer() {\n+        int duration = getDuration();\n+        logger.trace(\"start timer for duration {}\", duration);\n+        if (duration > 0) {\n+            ScheduledFuture<?> future = valveTimer;\n+            if (future != null && !future.isDone()) {\n+                future.cancel(true);\n+            }\n+            valveTimer = timerService.schedule(() -> {\n+                logger.trace(\"valve timer is over. switching off the valve\");\n+                switchOffValve();\n+                // let home app refresh the remaining duration, which is 0\n+                ((GenericItem) getRootAccessory().getItem()).send(RefreshType.REFRESH);\n+            }, duration, TimeUnit.SECONDS);\n+\n+            // let home app refresh the remaining duration, which is 0\n+            ((GenericItem) getRootAccessory().getItem()).send(RefreshType.REFRESH);", "originalCommit": "aea5a1f87a9e89510ad8144d99c611e51df8818f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNTk0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r427105948", "bodyText": "good one.\ni will also move REFRESH to the caller method so that we have it once, after the timer is set or stopped.", "author": "yfre", "createdAt": "2020-05-19T08:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MTI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "fad26bc6d994af35d079d0da04361c02c7fb76d4", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\nindex b4b06ab467..4433778241 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java\n\n@@ -77,27 +77,27 @@ public class HomekitValveImpl extends AbstractHomekitAccessoryImpl implements Va\n                 OnOffType.ON, OpenClosedType.OPEN);\n         this.activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n                 OnOffType.ON, OpenClosedType.OPEN);\n-        getServices().add(new ValveService(this));\n+        ValveService service = new ValveService(this);\n+        getServices().add(service);\n         final String timerConfig = getAccessoryConfiguration(CONFIG_TIMER, \"\");\n         homekitTimer = timerConfig.equalsIgnoreCase(\"yes\") || timerConfig.equalsIgnoreCase(\"true\");\n         if (homekitTimer) {\n-            addRemainingDurationCharacteristic(taggedItem, updater);\n+            addRemainingDurationCharacteristic(taggedItem, updater, service);\n         }\n     }\n \n-    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater) {\n+    private void addRemainingDurationCharacteristic(HomekitTaggedItem taggedItem, HomekitAccessoryUpdater updater,\n+            ValveService service) {\n         logger.trace(\"addRemainingDurationCharacteristic for {}\", taggedItem);\n-        ((ValveService) getPrimaryService()).addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n+        service.addOptionalCharacteristic(new RemainingDurationCharacteristic(() -> {\n             int remainingTime = 0;\n             ScheduledFuture<?> future = valveTimer;\n             if (future != null && !future.isDone()) {\n-                remainingTime = java.lang.Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n+                remainingTime = Math.toIntExact(future.getDelay(TimeUnit.SECONDS));\n             }\n             return CompletableFuture.completedFuture(remainingTime);\n-        }, (callback) -> updater.subscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag(), callback),\n-                () -> updater.unsubscribe((GenericItem) taggedItem.getItem(), REMAINING_DURATION.getTag())\n-\n-        ));\n+        }, HomekitCharacteristicFactory.getSubscriber(taggedItem, REMAINING_DURATION, updater),\n+                HomekitCharacteristicFactory.getUnsubscriber(taggedItem, REMAINING_DURATION, updater)));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0NDY3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r426944670", "bodyText": "I don't like that all this code is duplicated from getIntSupplier. Can you refactor it?", "author": "cpmeister", "createdAt": "2020-05-18T23:23:36Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java", "diffHunk": "@@ -195,315 +200,330 @@ private static void setValueFromEnum(GenericItem item, CharacteristicEnum value,\n                         \"Item state {} is not supported for {}. Only PercentType and DecimalType (0/100) are supported.\",\n                         state, item.getName());\n             }\n-            logger.trace(\" Get Int for {} value {}\", item.getLabel(), value);\n+            logger.trace(\" Get Int for {} value {}\", item.getName(), value);\n             return CompletableFuture.completedFuture(value);\n         };\n     }\n \n-    private static ExceptionalConsumer<Integer> setIntConsumer(final GenericItem item) {\n+    private static ExceptionalConsumer<Integer> setIntConsumer(final HomekitTaggedItem item) {\n         return (value) -> {\n-            if (item instanceof NumberItem) {\n-                ((NumberItem) item).send(new DecimalType(value));\n+            if (item.getItem() instanceof NumberItem) {\n+                ((NumberItem) item.getItem()).send(new DecimalType(value));\n             } else {\n-                logger.warn(\"Item type {} is not supported for {}. Only Number type is supported.\", item.getType(),\n-                        item.getName());\n+                logger.warn(\"Item type {} is not supported for {}. Only Number type is supported.\",\n+                        item.getItem().getType(), item.getName());\n             }\n         };\n     }\n \n-    private static Supplier<CompletableFuture<Double>> getDoubleSupplier(Item item) {\n+    private static Supplier<CompletableFuture<Double>> getDoubleSupplier(final HomekitTaggedItem item) {\n         return () -> {\n-            final DecimalType value = item.getStateAs(DecimalType.class);\n+            final DecimalType value = item.getItem().getStateAs(DecimalType.class);\n             return CompletableFuture.completedFuture(value != null ? value.doubleValue() : 0.0);\n         };\n     }\n \n+    private static Consumer<HomekitCharacteristicChangeCallback> getSubscriber(final HomekitTaggedItem item,\n+            final HomekitCharacteristicType key, final HomekitAccessoryUpdater updater) {\n+        return (callback) -> updater.subscribe((GenericItem) item.getItem(), key.getTag(), callback);\n+    }\n+\n+    private static Runnable getUnsubscriber(final HomekitTaggedItem item, final HomekitCharacteristicType key,\n+            final HomekitAccessoryUpdater updater) {\n+        return () -> updater.unsubscribe((GenericItem) item.getItem(), key.getTag());\n+    }\n+\n     // create method for characteristic\n-    private static StatusLowBatteryCharacteristic createStatusLowBatteryCharacteristic(final GenericItem item,\n-            HomekitAccessoryUpdater updater) {\n+    private static StatusLowBatteryCharacteristic createStatusLowBatteryCharacteristic(final HomekitTaggedItem item,\n+            final HomekitAccessoryUpdater updater) {\n         return new StatusLowBatteryCharacteristic(\n                 () -> getEnumFromItem(item, StatusLowBatteryEnum.NORMAL, StatusLowBatteryEnum.LOW,\n                         StatusLowBatteryEnum.NORMAL),\n-                (callback) -> updater.subscribe(item, BATTERY_LOW_STATUS.getTag(), callback),\n-                () -> updater.unsubscribe(item, BATTERY_LOW_STATUS.getTag()));\n+                getSubscriber(item, BATTERY_LOW_STATUS, updater), getUnsubscriber(item, BATTERY_LOW_STATUS, updater));\n     }\n \n-    private static StatusFaultCharacteristic createStatusFaultCharacteristic(final GenericItem item,\n-            HomekitAccessoryUpdater updater) {\n+    private static StatusFaultCharacteristic createStatusFaultCharacteristic(final HomekitTaggedItem item,\n+            final HomekitAccessoryUpdater updater) {\n         return new StatusFaultCharacteristic(\n                 () -> getEnumFromItem(item, StatusFaultEnum.NO_FAULT, StatusFaultEnum.GENERAL_FAULT,\n                         StatusFaultEnum.NO_FAULT),\n-                (callback) -> updater.subscribe(item, FAULT_STATUS.getTag(), callback),\n-                () -> updater.unsubscribe(item, FAULT_STATUS.getTag()));\n+                getSubscriber(item, FAULT_STATUS, updater), getUnsubscriber(item, FAULT_STATUS, updater));\n     }\n \n-    private static StatusTamperedCharacteristic createStatusTamperedCharacteristic(final GenericItem item,\n-            HomekitAccessoryUpdater updater) {\n+    private static StatusTamperedCharacteristic createStatusTamperedCharacteristic(final HomekitTaggedItem item,\n+            final HomekitAccessoryUpdater updater) {\n         return new StatusTamperedCharacteristic(\n                 () -> getEnumFromItem(item, StatusTamperedEnum.NOT_TAMPERED, StatusTamperedEnum.TAMPERED,\n                         StatusTamperedEnum.NOT_TAMPERED),\n-                (callback) -> updater.subscribe(item, TAMPERED_STATUS.getTag(), callback),\n-                () -> updater.unsubscribe(item, TAMPERED_STATUS.getTag()));\n+                getSubscriber(item, TAMPERED_STATUS, updater), getUnsubscriber(item, TAMPERED_STATUS, updater));\n     }\n \n-    private static ObstructionDetectedCharacteristic createObstructionDetectedCharacteristic(final GenericItem item,\n-            HomekitAccessoryUpdater updater) {\n+    private static ObstructionDetectedCharacteristic createObstructionDetectedCharacteristic(\n+            final HomekitTaggedItem item, HomekitAccessoryUpdater updater) {\n         return new ObstructionDetectedCharacteristic(\n-                () -> CompletableFuture\n-                        .completedFuture(item.getState() == OnOffType.ON || item.getState() == OpenClosedType.OPEN),\n-                (callback) -> updater.subscribe(item, OBSTRUCTION_STATUS.getTag(), callback),\n-                () -> updater.unsubscribe(item, OBSTRUCTION_STATUS.getTag()));\n+                () -> CompletableFuture.completedFuture(\n+                        item.getItem().getState() == OnOffType.ON || item.getItem().getState() == OpenClosedType.OPEN),\n+                getSubscriber(item, OBSTRUCTION_STATUS, updater), getUnsubscriber(item, OBSTRUCTION_STATUS, updater));\n     }\n \n-    private static StatusActiveCharacteristic createStatusActiveCharacteristic(final GenericItem item,\n+    private static StatusActiveCharacteristic createStatusActiveCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new StatusActiveCharacteristic(\n-                () -> CompletableFuture\n-                        .completedFuture(item.getState() == OnOffType.ON || item.getState() == OpenClosedType.OPEN),\n-                (callback) -> updater.subscribe(item, ACTIVE_STATUS.getTag(), callback),\n-                () -> updater.unsubscribe(item, ACTIVE_STATUS.getTag()));\n+                () -> CompletableFuture.completedFuture(\n+                        item.getItem().getState() == OnOffType.ON || item.getItem().getState() == OpenClosedType.OPEN),\n+                getSubscriber(item, ACTIVE_STATUS, updater), getUnsubscriber(item, ACTIVE_STATUS, updater));\n     }\n \n-    private static NameCharacteristic createNameCharacteristic(final GenericItem item,\n+    private static NameCharacteristic createNameCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new NameCharacteristic(() -> {\n-            final State state = item.getState();\n+            final State state = item.getItem().getState();\n             return CompletableFuture.completedFuture(state instanceof UnDefType ? \"\" : state.toString());\n         });\n     }\n \n-    private static HoldPositionCharacteristic createHoldPositionCharacteristic(final GenericItem item,\n+    private static HoldPositionCharacteristic createHoldPositionCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new HoldPositionCharacteristic(OnOffType::from);\n     }\n \n-    private static CarbonMonoxideLevelCharacteristic createCarbonMonoxideLevelCharacteristic(final GenericItem item,\n-            HomekitAccessoryUpdater updater) {\n+    private static CarbonMonoxideLevelCharacteristic createCarbonMonoxideLevelCharacteristic(\n+            final HomekitTaggedItem item, HomekitAccessoryUpdater updater) {\n         return new CarbonMonoxideLevelCharacteristic(getDoubleSupplier(item),\n-                (callback) -> updater.subscribe(item, CARBON_DIOXIDE_LEVEL.getTag(), callback),\n-                () -> updater.unsubscribe(item, CARBON_DIOXIDE_LEVEL.getTag()));\n+                getSubscriber(item, CARBON_DIOXIDE_LEVEL, updater),\n+                getUnsubscriber(item, CARBON_DIOXIDE_LEVEL, updater));\n     }\n \n     private static CarbonMonoxidePeakLevelCharacteristic createCarbonMonoxidePeakLevelCharacteristic(\n-            final GenericItem item, HomekitAccessoryUpdater updater) {\n+            final HomekitTaggedItem item, HomekitAccessoryUpdater updater) {\n         return new CarbonMonoxidePeakLevelCharacteristic(getDoubleSupplier(item),\n-                (callback) -> updater.subscribe(item, CARBON_DIOXIDE_PEAK_LEVEL.getTag(), callback),\n-                () -> updater.unsubscribe(item, CARBON_DIOXIDE_PEAK_LEVEL.getTag()));\n+                getSubscriber(item, CARBON_DIOXIDE_PEAK_LEVEL, updater),\n+                getUnsubscriber(item, CARBON_DIOXIDE_PEAK_LEVEL, updater));\n     }\n \n-    private static CarbonDioxideLevelCharacteristic createCarbonDioxideLevelCharacteristic(final GenericItem item,\n+    private static CarbonDioxideLevelCharacteristic createCarbonDioxideLevelCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new CarbonDioxideLevelCharacteristic(getDoubleSupplier(item),\n-                (callback) -> updater.subscribe(item, CARBON_MONOXIDE_LEVEL.getTag(), callback),\n-                () -> updater.unsubscribe(item, CARBON_MONOXIDE_LEVEL.getTag()));\n+                getSubscriber(item, CARBON_MONOXIDE_LEVEL, updater),\n+                getUnsubscriber(item, CARBON_MONOXIDE_LEVEL, updater));\n     }\n \n     private static CarbonDioxidePeakLevelCharacteristic createCarbonDioxidePeakLevelCharacteristic(\n-            final GenericItem item, HomekitAccessoryUpdater updater) {\n+            final HomekitTaggedItem item, HomekitAccessoryUpdater updater) {\n         return new CarbonDioxidePeakLevelCharacteristic(getDoubleSupplier(item),\n-                (callback) -> updater.subscribe(item, CARBON_MONOXIDE_PEAK_LEVEL.getTag(), callback),\n-                () -> updater.unsubscribe(item, CARBON_MONOXIDE_PEAK_LEVEL.getTag()));\n+                getSubscriber(item, CARBON_MONOXIDE_PEAK_LEVEL, updater),\n+                getUnsubscriber(item, CARBON_MONOXIDE_PEAK_LEVEL, updater));\n     }\n \n     private static CurrentHorizontalTiltAngleCharacteristic createCurrentHorizontalTiltAngleCharacteristic(\n-            final GenericItem item, HomekitAccessoryUpdater updater) {\n+            final HomekitTaggedItem item, HomekitAccessoryUpdater updater) {\n         return new CurrentHorizontalTiltAngleCharacteristic(getIntSupplier(item),\n-                (callback) -> updater.subscribe(item, CURRENT_HORIZONTAL_TILT_ANGLE.getTag(), callback),\n-                () -> updater.unsubscribe(item, CURRENT_HORIZONTAL_TILT_ANGLE.getTag()));\n+                getSubscriber(item, CURRENT_HORIZONTAL_TILT_ANGLE, updater),\n+                getUnsubscriber(item, CURRENT_HORIZONTAL_TILT_ANGLE, updater));\n     }\n \n     private static CurrentVerticalTiltAngleCharacteristic createCurrentVerticalTiltAngleCharacteristic(\n-            final GenericItem item, HomekitAccessoryUpdater updater) {\n+            final HomekitTaggedItem item, HomekitAccessoryUpdater updater) {\n         return new CurrentVerticalTiltAngleCharacteristic(getIntSupplier(item),\n-                (callback) -> updater.subscribe(item, CURRENT_VERTICAL_TILT_ANGLE.getTag(), callback),\n-                () -> updater.unsubscribe(item, CURRENT_VERTICAL_TILT_ANGLE.getTag()));\n+                getSubscriber(item, CURRENT_VERTICAL_TILT_ANGLE, updater),\n+                getUnsubscriber(item, CURRENT_VERTICAL_TILT_ANGLE, updater));\n     }\n \n     private static TargetHorizontalTiltAngleCharacteristic createTargetHorizontalTiltAngleCharacteristic(\n-            final GenericItem item, HomekitAccessoryUpdater updater) {\n+            final HomekitTaggedItem item, HomekitAccessoryUpdater updater) {\n         return new TargetHorizontalTiltAngleCharacteristic(getIntSupplier(item), setIntConsumer(item),\n-                (callback) -> updater.subscribe(item, TARGET_HORIZONTAL_TILT_ANGLE.getTag(), callback),\n-                () -> updater.unsubscribe(item, TARGET_HORIZONTAL_TILT_ANGLE.getTag()));\n+                getSubscriber(item, TARGET_HORIZONTAL_TILT_ANGLE, updater),\n+                getUnsubscriber(item, TARGET_HORIZONTAL_TILT_ANGLE, updater));\n     }\n \n     private static TargetVerticalTiltAngleCharacteristic createTargetVerticalTiltAngleCharacteristic(\n-            final GenericItem item, HomekitAccessoryUpdater updater) {\n+            final HomekitTaggedItem item, HomekitAccessoryUpdater updater) {\n         return new TargetVerticalTiltAngleCharacteristic(getIntSupplier(item), setIntConsumer(item),\n-                (callback) -> updater.subscribe(item, TARGET_VERTICAL_TILT_ANGLE.getTag(), callback),\n-                () -> updater.unsubscribe(item, TARGET_VERTICAL_TILT_ANGLE.getTag()));\n+                getSubscriber(item, TARGET_HORIZONTAL_TILT_ANGLE, updater),\n+                getUnsubscriber(item, TARGET_HORIZONTAL_TILT_ANGLE, updater));\n     }\n \n-    private static HueCharacteristic createHueCharacteristic(final GenericItem item, HomekitAccessoryUpdater updater) {\n+    private static HueCharacteristic createHueCharacteristic(final HomekitTaggedItem item,\n+            HomekitAccessoryUpdater updater) {\n         return new HueCharacteristic(() -> {\n             Double value = 0.0;\n-            State state = item.getState();\n+            State state = item.getItem().getState();\n             if (state instanceof HSBType) {\n                 value = ((HSBType) state).getHue().doubleValue();\n             }\n             return CompletableFuture.completedFuture(value);\n         }, (hue) -> {\n-            State state = item.getState();\n-            if (item instanceof ColorItem) {\n-                ((ColorItem) item).send(new HSBType(new DecimalType(hue), ((HSBType) state).getSaturation(),\n+            State state = item.getItem().getState();\n+            if (item.getItem() instanceof ColorItem) {\n+                ((ColorItem) item.getItem()).send(new HSBType(new DecimalType(hue), ((HSBType) state).getSaturation(),\n                         ((HSBType) state).getBrightness()));\n             } else {\n-                logger.warn(\"Item type {} is not supported for {}. Only Color type is supported.\", item.getType(),\n-                        item.getName());\n+                logger.warn(\"Item type {} is not supported for {}. Only Color type is supported.\",\n+                        item.getItem().getType(), item.getName());\n             }\n-        }, (callback) -> updater.subscribe(item, HUE.getTag(), callback),\n-                () -> updater.unsubscribe(item, HUE.getTag()));\n+        }, getSubscriber(item, HUE, updater), getUnsubscriber(item, HUE, updater));\n     }\n \n-    private static BrightnessCharacteristic createBrightnessCharacteristic(final GenericItem item,\n+    private static BrightnessCharacteristic createBrightnessCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new BrightnessCharacteristic(() -> {\n             int value = 0;\n-            final State state = item.getState();\n+            final State state = item.getItem().getState();\n             if (state instanceof HSBType) {\n                 value = ((HSBType) state).getBrightness().intValue();\n             } else if (state instanceof PercentType) {\n                 value = ((PercentType) state).intValue();\n             }\n             return CompletableFuture.completedFuture(value);\n         }, (brightness) -> {\n-            final State state = item.getState();\n-            if (item instanceof ColorItem) {\n-                ((ColorItem) item).send(new HSBType(((HSBType) state).getHue(), ((HSBType) state).getSaturation(),\n+            final Item oItem = item.getItem();\n+            final State state = oItem.getState();\n+            if (oItem instanceof ColorItem) {\n+                ((ColorItem) oItem).send(new HSBType(((HSBType) state).getHue(), ((HSBType) state).getSaturation(),\n                         new PercentType(brightness)));\n-            } else if (item instanceof DimmerItem) {\n-                ((DimmerItem) item).send(new PercentType(brightness));\n+            } else if (oItem instanceof DimmerItem) {\n+                ((DimmerItem) oItem).send(new PercentType(brightness));\n             } else {\n-                logger.warn(\"Item type {} is not supported for {}. Only ColorItem and DimmerIterm are supported.\",\n-                        item.getType(), item.getName());\n+                logger.warn(\"Item type {} is not supported for {}. Only Color type is supported.\", oItem.getType(),\n+                        item.getName());\n             }\n-        }, (callback) -> updater.subscribe(item, BRIGHTNESS.getTag(), callback),\n-                () -> updater.unsubscribe(item, BRIGHTNESS.getTag()));\n+        }, getSubscriber(item, BRIGHTNESS, updater), getUnsubscriber(item, BRIGHTNESS, updater));\n     }\n \n-    private static SaturationCharacteristic createSaturationCharacteristic(final GenericItem item,\n+    private static SaturationCharacteristic createSaturationCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new SaturationCharacteristic(() -> {\n             Double value = 0.0;\n-            State state = item.getState();\n+            State state = item.getItem().getState();\n             if (state instanceof HSBType) {\n                 value = ((HSBType) state).getSaturation().doubleValue();\n             } else if (state instanceof PercentType) {\n                 value = ((PercentType) state).doubleValue();\n             }\n             return CompletableFuture.completedFuture(value);\n         }, (saturation) -> {\n-            final State state = item.getState();\n-            if (item instanceof ColorItem) {\n-                ((ColorItem) item).send(new HSBType(((HSBType) state).getHue(), new PercentType(saturation.intValue()),\n-                        ((HSBType) state).getBrightness()));\n+            final State state = item.getItem().getState();\n+            if (item.getItem() instanceof ColorItem) {\n+                ((ColorItem) item.getItem()).send(new HSBType(((HSBType) state).getHue(),\n+                        new PercentType(saturation.intValue()), ((HSBType) state).getBrightness()));\n             } else {\n-                logger.warn(\"Item type {} is not supported for {}. Only Color type is supported.\", item.getType(),\n-                        item.getName());\n+                logger.warn(\"Item type {} is not supported for {}. Only Color type is supported.\",\n+                        item.getItem().getType(), item.getName());\n             }\n-        }, (callback) -> updater.subscribe(item, SATURATION.getTag(), callback),\n-                () -> updater.unsubscribe(item, SATURATION.getTag()));\n+        }, getSubscriber(item, SATURATION, updater), getUnsubscriber(item, SATURATION, updater));\n     }\n \n-    private static ColorTemperatureCharacteristic createColorTemperatureCharacteristic(final GenericItem item,\n+    private static ColorTemperatureCharacteristic createColorTemperatureCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new ColorTemperatureCharacteristic(getIntSupplier(item), setIntConsumer(item),\n-                (callback) -> updater.subscribe(item, COLOR_TEMPERATURE.getTag(), callback),\n-                () -> updater.unsubscribe(item, COLOR_TEMPERATURE.getTag()));\n+                getSubscriber(item, COLOR_TEMPERATURE, updater), getUnsubscriber(item, COLOR_TEMPERATURE, updater));\n     }\n \n-    private static CurrentFanStateCharacteristic createCurrentFanStateCharacteristic(final GenericItem item,\n+    private static CurrentFanStateCharacteristic createCurrentFanStateCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new CurrentFanStateCharacteristic(() -> {\n-            final DecimalType value = item.getStateAs(DecimalType.class);\n+            final DecimalType value = item.getItem().getStateAs(DecimalType.class);\n             CurrentFanStateEnum currentFanStateEnum = value != null ? CurrentFanStateEnum.fromCode(value.intValue())\n                     : null;\n             if (currentFanStateEnum == null) {\n                 currentFanStateEnum = CurrentFanStateEnum.INACTIVE;\n             }\n             return CompletableFuture.completedFuture(currentFanStateEnum);\n-        }, (callback) -> updater.subscribe(item, CURRENT_FAN_STATE.getTag(), callback),\n-                () -> updater.unsubscribe(item, CURRENT_FAN_STATE.getTag()));\n+        }, getSubscriber(item, CURRENT_FAN_STATE, updater), getUnsubscriber(item, CURRENT_FAN_STATE, updater));\n     }\n \n-    private static TargetFanStateCharacteristic createTargetFanStateCharacteristic(final GenericItem item,\n+    private static TargetFanStateCharacteristic createTargetFanStateCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new TargetFanStateCharacteristic(() -> {\n-            final DecimalType value = item.getStateAs(DecimalType.class);\n+            final DecimalType value = item.getItem().getStateAs(DecimalType.class);\n             TargetFanStateEnum targetFanStateEnum = value != null ? TargetFanStateEnum.fromCode(value.intValue())\n                     : null;\n             if (targetFanStateEnum == null) {\n                 targetFanStateEnum = TargetFanStateEnum.AUTO;\n             }\n             return CompletableFuture.completedFuture(targetFanStateEnum);\n         }, (targetState) -> {\n-            if (item instanceof NumberItem) {\n-                ((NumberItem) item).send(new DecimalType(targetState.getCode()));\n+            if (item.getItem() instanceof NumberItem) {\n+                ((NumberItem) item.getItem()).send(new DecimalType(targetState.getCode()));\n             } else {\n-                logger.warn(\"Item type {} is not supported for {}. Only Number type is supported.\", item.getType(),\n-                        item.getName());\n+                logger.warn(\"Item type {} is not supported for {}. Only Number type is supported.\",\n+                        item.getItem().getType(), item.getName());\n             }\n-        }, (callback) -> updater.subscribe(item, TARGET_FAN_STATE.getTag(), callback),\n-                () -> updater.unsubscribe(item, TARGET_FAN_STATE.getTag()));\n+        }, getSubscriber(item, TARGET_FAN_STATE, updater), getUnsubscriber(item, TARGET_FAN_STATE, updater));\n     }\n \n-    private static RotationDirectionCharacteristic createRotationDirectionCharacteristic(final GenericItem item,\n+    private static RotationDirectionCharacteristic createRotationDirectionCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new RotationDirectionCharacteristic(\n                 () -> getEnumFromItem(item, RotationDirectionEnum.CLOCKWISE, RotationDirectionEnum.COUNTER_CLOCKWISE,\n                         RotationDirectionEnum.CLOCKWISE),\n                 (value) -> setValueFromEnum(item, value, RotationDirectionEnum.CLOCKWISE,\n                         RotationDirectionEnum.COUNTER_CLOCKWISE),\n-                (callback) -> updater.subscribe(item, ROTATION_DIRECTION.getTag(), callback),\n-                () -> updater.unsubscribe(item, ROTATION_DIRECTION.getTag()));\n+                getSubscriber(item, ROTATION_DIRECTION, updater), getUnsubscriber(item, ROTATION_DIRECTION, updater));\n     }\n \n-    private static SwingModeCharacteristic createSwingModeCharacteristic(final GenericItem item,\n+    private static SwingModeCharacteristic createSwingModeCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new SwingModeCharacteristic(\n                 () -> getEnumFromItem(item, SwingModeEnum.SWING_DISABLED, SwingModeEnum.SWING_ENABLED,\n                         SwingModeEnum.SWING_DISABLED),\n                 (value) -> setValueFromEnum(item, value, SwingModeEnum.SWING_DISABLED, SwingModeEnum.SWING_ENABLED),\n-                (callback) -> updater.subscribe(item, SWING_MODE.getTag(), callback),\n-                () -> updater.unsubscribe(item, SWING_MODE.getTag()));\n+                getSubscriber(item, SWING_MODE, updater), getUnsubscriber(item, SWING_MODE, updater));\n     }\n \n-    private static LockPhysicalControlsCharacteristic createLockPhysicalControlsCharacteristic(final GenericItem item,\n-            HomekitAccessoryUpdater updater) {\n+    private static LockPhysicalControlsCharacteristic createLockPhysicalControlsCharacteristic(\n+            final HomekitTaggedItem item, HomekitAccessoryUpdater updater) {\n         return new LockPhysicalControlsCharacteristic(\n                 () -> getEnumFromItem(item, LockPhysicalControlsEnum.CONTROL_LOCK_DISABLED,\n                         LockPhysicalControlsEnum.CONTROL_LOCK_ENABLED, LockPhysicalControlsEnum.CONTROL_LOCK_DISABLED),\n                 (value) -> setValueFromEnum(item, value, LockPhysicalControlsEnum.CONTROL_LOCK_DISABLED,\n                         LockPhysicalControlsEnum.CONTROL_LOCK_ENABLED),\n-                (callback) -> updater.subscribe(item, LOCK_CONTROL.getTag(), callback),\n-                () -> updater.unsubscribe(item, LOCK_CONTROL.getTag()));\n+                getSubscriber(item, LOCK_CONTROL, updater), getUnsubscriber(item, LOCK_CONTROL, updater));\n     }\n \n-    private static RotationSpeedCharacteristic createRotationSpeedCharacteristic(final GenericItem item,\n+    private static RotationSpeedCharacteristic createRotationSpeedCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n         return new RotationSpeedCharacteristic(getIntSupplier(item), setIntConsumer(item),\n-                (callback) -> updater.subscribe(item, ROTATION_SPEED.getTag(), callback),\n-                () -> updater.unsubscribe(item, ROTATION_SPEED.getTag()));\n+                getSubscriber(item, ROTATION_SPEED, updater), getUnsubscriber(item, ROTATION_SPEED, updater));\n     }\n \n-    private static SetDurationCharacteristic createDurationCharacteristic(final GenericItem item,\n+    private static SetDurationCharacteristic createDurationCharacteristic(final HomekitTaggedItem item,\n             HomekitAccessoryUpdater updater) {\n-        return new SetDurationCharacteristic(getIntSupplier(item), setIntConsumer(item),\n-                (callback) -> updater.subscribe(item, DURATION.getTag(), callback),\n-                () -> updater.unsubscribe(item, DURATION.getTag()));\n+        return new SetDurationCharacteristic(() -> {\n+            int value = 0;\n+            final State state = item.getItem().getState();\n+            if (state instanceof PercentType) {\n+                value = state.as(PercentType.class).intValue();\n+            } else if (state instanceof DecimalType) {\n+                value = state.as(DecimalType.class).intValue();\n+            } else if (state instanceof UnDefType) {\n+                logger.debug(\"Item state {} is UNDEF {}.\", state, item.getName());\n+            } else {\n+                logger.warn(\n+                        \"Item state {} is not supported for {}. Only PercentType and DecimalType (0/100) are supported.\",\n+                        state, item.getName());\n+            }", "originalCommit": "aea5a1f87a9e89510ad8144d99c611e51df8818f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwMDMxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r427100317", "bodyText": "yes, i had to add few lines to getIntSupplier. but indeed, it can be solved much better than copy-paste.\ni will split getIntSupplier in 2 parts - getInt and getSupplier so that i can use getInt here and add  required lines.", "author": "yfre", "createdAt": "2020-05-19T07:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0NDY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "fad26bc6d994af35d079d0da04361c02c7fb76d4", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\nindex a50f1d66ff..87e1eedc87 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\n\n@@ -185,24 +185,25 @@ public class HomekitCharacteristicFactory {\n     }\n \n     @SuppressWarnings(\"null\")\n+    private static int getIntFromItem(final HomekitTaggedItem item) {\n+        int value = 0;\n+        final State state = item.getItem().getState();\n+        if (state instanceof PercentType) {\n+            value = state.as(PercentType.class).intValue();\n+        } else if (state instanceof DecimalType) {\n+            value = state.as(DecimalType.class).intValue();\n+        } else if (state instanceof UnDefType) {\n+            logger.debug(\"Item state {} is UNDEF {}.\", state, item.getName());\n+        } else {\n+            logger.warn(\n+                    \"Item state {} is not supported for {}. Only PercentType and DecimalType (0/100) are supported.\",\n+                    state, item.getName());\n+        }\n+        return value;\n+    }\n+\n     private static Supplier<CompletableFuture<Integer>> getIntSupplier(final HomekitTaggedItem item) {\n-        return () -> {\n-            int value = 0;\n-            final State state = item.getItem().getState();\n-            if (state instanceof PercentType) {\n-                value = state.as(PercentType.class).intValue();\n-            } else if (state instanceof DecimalType) {\n-                value = state.as(DecimalType.class).intValue();\n-            } else if (state instanceof UnDefType) {\n-                logger.debug(\"Item state {} is UNDEF {}.\", state, item.getName());\n-            } else {\n-                logger.warn(\n-                        \"Item state {} is not supported for {}. Only PercentType and DecimalType (0/100) are supported.\",\n-                        state, item.getName());\n-            }\n-            logger.trace(\" Get Int for {} value {}\", item.getName(), value);\n-            return CompletableFuture.completedFuture(value);\n-        };\n+        return () -> CompletableFuture.completedFuture(getIntFromItem(item));\n     }\n \n     private static ExceptionalConsumer<Integer> setIntConsumer(final HomekitTaggedItem item) {\n"}}, {"oid": "fad26bc6d994af35d079d0da04361c02c7fb76d4", "url": "https://github.com/openhab/openhab-addons/commit/fad26bc6d994af35d079d0da04361c02c7fb76d4", "message": "incorporate feedback from cpmeister\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-05-19T08:08:08Z", "type": "commit"}, {"oid": "3ec450f3b9650637fabcfcfcd571273e5830e8ee", "url": "https://github.com/openhab/openhab-addons/commit/3ec450f3b9650637fabcfcfcd571273e5830e8ee", "message": "update item state if default is used\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-05-19T09:54:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxMjMxMw==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r427412313", "bodyText": "Wouldn't you still need this since you removed it from stopTimer?", "author": "cpmeister", "createdAt": "2020-05-19T15:54:00Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitValveImpl.java", "diffHunk": "@@ -119,19 +119,13 @@ private void startTimer() {\n         int duration = getDuration();\n         logger.trace(\"start timer for duration {}\", duration);\n         if (duration > 0) {\n-            ScheduledFuture<?> future = valveTimer;\n-            if (future != null && !future.isDone()) {\n-                future.cancel(true);\n-            }\n+            stopTimer();\n             valveTimer = timerService.schedule(() -> {\n                 logger.trace(\"valve timer is over. switching off the valve\");\n                 switchOffValve();\n                 // let home app refresh the remaining duration, which is 0\n                 ((GenericItem) getRootAccessory().getItem()).send(RefreshType.REFRESH);\n             }, duration, TimeUnit.SECONDS);\n-\n-            // let home app refresh the remaining duration, which is 0\n-            ((GenericItem) getRootAccessory().getItem()).send(RefreshType.REFRESH);", "originalCommit": "fad26bc6d994af35d079d0da04361c02c7fb76d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1MjkxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r427552910", "bodyText": "i have added to the caller method, setValveActive. it will call REFRESH in both cases - start and stop timer.\n if (homekitTimer) {\n                if ((state == ActiveEnum.ACTIVE)) {\n                    startTimer();\n                } else {\n                    stopTimer();\n                }\n                // let home app refresh the remaining duration\n                ((GenericItem) getRootAccessory().getItem()).send(RefreshType.REFRESH);", "author": "yfre", "createdAt": "2020-05-19T19:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxMjMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NDMwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r427564301", "bodyText": "Ah, didn't notice that. Looks good to me then.", "author": "cpmeister", "createdAt": "2020-05-19T19:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxMjMxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1OTI2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r427559268", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"Unsupported optional characteristic. Characteristic type \\\"\" + item.getCharacteristicType());\n          \n          \n            \n                            \"Unsupported optional characteristic. Characteristic type \\\"\" + item.getCharacteristicType()+\"\\\"\");", "author": "cpmeister", "createdAt": "2020-05-19T19:50:16Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java", "diffHunk": "@@ -123,28 +127,29 @@\n     /**\n      * create optional HomeKit characteristic\n      *\n-     * @param type type of characteristic\n      * @param item corresponding OH item\n      * @param updater update to keep OH item and HomeKit characteristic in sync\n      * @return HomeKit characteristic\n      */\n-    public static Characteristic createCharacteristic(HomekitCharacteristicType type, GenericItem item,\n-            HomekitAccessoryUpdater updater) throws HomekitException {\n-        logger.trace(\"createCharacteristic, type {} item {}\", type, item);\n-        if (optional.containsKey(type)) {\n-            return optional.get(type).apply(item, updater);\n+    public static Characteristic createCharacteristic(final HomekitTaggedItem item, HomekitAccessoryUpdater updater)\n+            throws HomekitException {\n+        logger.trace(\"createCharacteristic, type {} item {}\", item.getCharacteristicType(), item);\n+        if (optional.containsKey(item.getCharacteristicType())) {\n+            return optional.get(item.getCharacteristicType()).apply(item, updater);\n         }\n-        logger.warn(\"Unsupported optional characteristic. Item type {}, characteristic type {}\", item.getType(), type);\n-        throw new HomekitException(\"Unsupported optional characteristic. Characteristic type \\\"\" + item.getType());\n+        logger.warn(\"Unsupported optional characteristic. Item type {}, characteristic type {}\",\n+                item.getAccessoryType(), item.getCharacteristicType());\n+        throw new HomekitException(\n+                \"Unsupported optional characteristic. Characteristic type \\\"\" + item.getCharacteristicType());", "originalCommit": "3ec450f3b9650637fabcfcfcd571273e5830e8ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9db355b2b17e3f26f429f5740e9876a61779c4a0", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\nindex 2fe681aba7..a738af55f7 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\n\n@@ -133,14 +134,14 @@ public class HomekitCharacteristicFactory {\n      */\n     public static Characteristic createCharacteristic(final HomekitTaggedItem item, HomekitAccessoryUpdater updater)\n             throws HomekitException {\n-        logger.trace(\"createCharacteristic, type {} item {}\", item.getCharacteristicType(), item);\n-        if (optional.containsKey(item.getCharacteristicType())) {\n-            return optional.get(item.getCharacteristicType()).apply(item, updater);\n+        final @Nullable HomekitCharacteristicType type = item.getCharacteristicType();\n+        logger.trace(\"createCharacteristic, type {} item {}\", type, item);\n+        if (optional.containsKey(type)) {\n+            return optional.get(type).apply(item, updater);\n         }\n-        logger.warn(\"Unsupported optional characteristic. Item type {}, characteristic type {}\",\n-                item.getAccessoryType(), item.getCharacteristicType());\n-        throw new HomekitException(\n-                \"Unsupported optional characteristic. Characteristic type \\\"\" + item.getCharacteristicType());\n+        logger.warn(\"Unsupported optional characteristic. Accessory type {}, characteristic type {}\",\n+                item.getAccessoryType(), type);\n+        throw new HomekitException(\"Unsupported optional characteristic. Characteristic type \\\"\" + type);\n     }\n \n     // METHODS TO CREATE SINGLE CHARACTERISTIC FROM OH ITEM\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1OTY2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r427559668", "bodyText": "Please cache item.getCharacteristicType() in a local variable for reuse.", "author": "cpmeister", "createdAt": "2020-05-19T19:50:59Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java", "diffHunk": "@@ -123,28 +127,29 @@\n     /**\n      * create optional HomeKit characteristic\n      *\n-     * @param type type of characteristic\n      * @param item corresponding OH item\n      * @param updater update to keep OH item and HomeKit characteristic in sync\n      * @return HomeKit characteristic\n      */\n-    public static Characteristic createCharacteristic(HomekitCharacteristicType type, GenericItem item,\n-            HomekitAccessoryUpdater updater) throws HomekitException {\n-        logger.trace(\"createCharacteristic, type {} item {}\", type, item);\n-        if (optional.containsKey(type)) {\n-            return optional.get(type).apply(item, updater);\n+    public static Characteristic createCharacteristic(final HomekitTaggedItem item, HomekitAccessoryUpdater updater)\n+            throws HomekitException {\n+        logger.trace(\"createCharacteristic, type {} item {}\", item.getCharacteristicType(), item);", "originalCommit": "3ec450f3b9650637fabcfcfcd571273e5830e8ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNDM1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r427814352", "bodyText": "good one. need to pay more attention to this.", "author": "yfre", "createdAt": "2020-05-20T08:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1OTY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "9db355b2b17e3f26f429f5740e9876a61779c4a0", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\nindex 2fe681aba7..a738af55f7 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\n\n@@ -133,14 +134,14 @@ public class HomekitCharacteristicFactory {\n      */\n     public static Characteristic createCharacteristic(final HomekitTaggedItem item, HomekitAccessoryUpdater updater)\n             throws HomekitException {\n-        logger.trace(\"createCharacteristic, type {} item {}\", item.getCharacteristicType(), item);\n-        if (optional.containsKey(item.getCharacteristicType())) {\n-            return optional.get(item.getCharacteristicType()).apply(item, updater);\n+        final @Nullable HomekitCharacteristicType type = item.getCharacteristicType();\n+        logger.trace(\"createCharacteristic, type {} item {}\", type, item);\n+        if (optional.containsKey(type)) {\n+            return optional.get(type).apply(item, updater);\n         }\n-        logger.warn(\"Unsupported optional characteristic. Item type {}, characteristic type {}\",\n-                item.getAccessoryType(), item.getCharacteristicType());\n-        throw new HomekitException(\n-                \"Unsupported optional characteristic. Characteristic type \\\"\" + item.getCharacteristicType());\n+        logger.warn(\"Unsupported optional characteristic. Accessory type {}, characteristic type {}\",\n+                item.getAccessoryType(), type);\n+        throw new HomekitException(\"Unsupported optional characteristic. Characteristic type \\\"\" + type);\n     }\n \n     // METHODS TO CREATE SINGLE CHARACTERISTIC FROM OH ITEM\n"}}, {"oid": "9db355b2b17e3f26f429f5740e9876a61779c4a0", "url": "https://github.com/openhab/openhab-addons/commit/9db355b2b17e3f26f429f5740e9876a61779c4a0", "message": "incorporate feedback from cpmeister\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-05-20T08:04:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3MTM0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r428271344", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new HomekitException(\"Unsupported optional characteristic. Characteristic type \\\"\" + type);\n          \n          \n            \n                    throw new HomekitException(\"Unsupported optional characteristic. Characteristic type \\\"\" + type + \"\\\"\");", "author": "cpmeister", "createdAt": "2020-05-20T19:55:39Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java", "diffHunk": "@@ -123,28 +128,29 @@\n     /**\n      * create optional HomeKit characteristic\n      *\n-     * @param type type of characteristic\n      * @param item corresponding OH item\n      * @param updater update to keep OH item and HomeKit characteristic in sync\n      * @return HomeKit characteristic\n      */\n-    public static Characteristic createCharacteristic(HomekitCharacteristicType type, GenericItem item,\n-            HomekitAccessoryUpdater updater) throws HomekitException {\n+    public static Characteristic createCharacteristic(final HomekitTaggedItem item, HomekitAccessoryUpdater updater)\n+            throws HomekitException {\n+        final @Nullable HomekitCharacteristicType type = item.getCharacteristicType();\n         logger.trace(\"createCharacteristic, type {} item {}\", type, item);\n         if (optional.containsKey(type)) {\n             return optional.get(type).apply(item, updater);\n         }\n-        logger.warn(\"Unsupported optional characteristic. Item type {}, characteristic type {}\", item.getType(), type);\n-        throw new HomekitException(\"Unsupported optional characteristic. Characteristic type \\\"\" + item.getType());\n+        logger.warn(\"Unsupported optional characteristic. Accessory type {}, characteristic type {}\",\n+                item.getAccessoryType(), type);\n+        throw new HomekitException(\"Unsupported optional characteristic. Characteristic type \\\"\" + type);", "originalCommit": "9db355b2b17e3f26f429f5740e9876a61779c4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1MTc0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7673#discussion_r428551742", "bodyText": "sorry, missed that one", "author": "yfre", "createdAt": "2020-05-21T09:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3MTM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "426525aa34d9fa6b47384f0192747998bf0d42b4", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\nindex a738af55f7..77b5f16645 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java\n\n@@ -141,7 +141,7 @@ public class HomekitCharacteristicFactory {\n         }\n         logger.warn(\"Unsupported optional characteristic. Accessory type {}, characteristic type {}\",\n                 item.getAccessoryType(), type);\n-        throw new HomekitException(\"Unsupported optional characteristic. Characteristic type \\\"\" + type);\n+        throw new HomekitException(\"Unsupported optional characteristic. Characteristic type \\\"\" + type + \"\\\"\");\n     }\n \n     // METHODS TO CREATE SINGLE CHARACTERISTIC FROM OH ITEM\n"}}, {"oid": "426525aa34d9fa6b47384f0192747998bf0d42b4", "url": "https://github.com/openhab/openhab-addons/commit/426525aa34d9fa6b47384f0192747998bf0d42b4", "message": "incorporate feedback from cpmeister\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-05-21T09:45:31Z", "type": "commit"}, {"oid": "db03872593de8c5c44e9d4069e497d471fb3b85f", "url": "https://github.com/openhab/openhab-addons/commit/db03872593de8c5c44e9d4069e497d471fb3b85f", "message": "Merge branch '2.5.x' into valve_timer", "committedDate": "2020-05-21T21:12:26Z", "type": "commit"}]}