{"pr_number": 7940, "pr_title": "[homekit] fix corrupt storage ", "pr_createdAt": "2020-06-18T20:13:17Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7940", "timeline": [{"oid": "1d3723180cd7fc6ba4df6df15d75a38c5b0570e4", "url": "https://github.com/openhab/openhab-addons/commit/1d3723180cd7fc6ba4df6df15d75a38c5b0570e4", "message": "fix for race conditions\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-06-18T16:28:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4MzE4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r442583180", "bodyText": "You should be able to remove this try/catch now", "author": "cpmeister", "createdAt": "2020-06-19T01:25:59Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java", "diffHunk": "@@ -127,8 +116,7 @@ public void unsetHomekit(Homekit homekit) {\n \n     private void clearHomekitPairings(Console console) {\n         try {\n-            new HomekitAuthInfoImpl(storageService, null).clear();\n-            homekit.refreshAuthInfo();\n+            homekit.clearHomekitPairings();\n             console.println(\"Cleared HomeKit pairings\");\n         } catch (Exception e) {", "originalCommit": "1d3723180cd7fc6ba4df6df15d75a38c5b0570e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY2MDMxMw==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r442660313", "bodyText": "right. removed.", "author": "yfre", "createdAt": "2020-06-19T06:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4MzE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "ff141b3a363802c630a9be9319d68d7e146ed817", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\nindex db880447d5..aca6126863 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandExtension.java\n\n@@ -115,12 +115,8 @@ public class HomekitCommandExtension extends AbstractConsoleCommandExtension {\n     }\n \n     private void clearHomekitPairings(Console console) {\n-        try {\n-            homekit.clearHomekitPairings();\n-            console.println(\"Cleared HomeKit pairings\");\n-        } catch (Exception e) {\n-            logger.warn(\"Could not clear HomeKit pairings\", e);\n-        }\n+        homekit.clearHomekitPairings();\n+        console.println(\"Cleared HomeKit pairings\");\n     }\n \n     private void allowUnauthenticatedHomekitRequests(boolean allow, Console console) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4NDM3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r442584370", "bodyText": "Instead of this constantly rescheduling itself why not just have it called with a fixed delay.\nThen you can have the future canceled inside of tryActionOrPostpone if it doesn't want to be called again?", "author": "cpmeister", "createdAt": "2020-06-19T01:30:58Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/Debouncer.java", "diffHunk": "@@ -74,7 +76,14 @@ void call() {\n         lastCallAttempt = clock.millis();\n         calls.incrementAndGet();\n         if (pending.compareAndSet(false, true)) {\n-            scheduler.schedule(this::tryActionOrPostpone, delayMs, TimeUnit.MILLISECONDS);\n+            feature = scheduler.schedule(this::tryActionOrPostpone, delayMs, TimeUnit.MILLISECONDS);", "originalCommit": "1d3723180cd7fc6ba4df6df15d75a38c5b0570e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY2Mjk0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r442662943", "bodyText": "im just afraid to touch this working logic. it must be a reason why it was done in this rather complex way.", "author": "yfre", "createdAt": "2020-06-19T06:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4NDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3MDE3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r442970173", "bodyText": "Yeah, you are right, it is doing some funky logic. Doesn't look like it can really be changed either. After looking more closely I actually kinda like the way it was designed, so yeah, don't change it.", "author": "cpmeister", "createdAt": "2020-06-19T17:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4NDM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "ff141b3a363802c630a9be9319d68d7e146ed817", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/Debouncer.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/Debouncer.java\nindex 65f902603d..380d539cf6 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/Debouncer.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/Debouncer.java\n\n@@ -84,6 +84,8 @@ class Debouncer {\n         logger.trace(\"stop debouncer\");\n         if (feature != null) {\n             feature.cancel(true);\n+            calls.set(0);\n+            pending.set(false);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4NDg1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r442584855", "bodyText": "should this also change your pending AtomicBoolean here to allow future call attempts?", "author": "cpmeister", "createdAt": "2020-06-19T01:32:52Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/Debouncer.java", "diffHunk": "@@ -74,7 +76,14 @@ void call() {\n         lastCallAttempt = clock.millis();\n         calls.incrementAndGet();\n         if (pending.compareAndSet(false, true)) {\n-            scheduler.schedule(this::tryActionOrPostpone, delayMs, TimeUnit.MILLISECONDS);\n+            feature = scheduler.schedule(this::tryActionOrPostpone, delayMs, TimeUnit.MILLISECONDS);\n+        }\n+    }\n+\n+    public void stop() {\n+        logger.trace(\"stop debouncer\");\n+        if (feature != null) {\n+            feature.cancel(true);", "originalCommit": "1d3723180cd7fc6ba4df6df15d75a38c5b0570e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY2NjcyOA==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r442666728", "bodyText": "i was thinking of shutdown use cases, so that Debouncer instance will not get re-started anymore.. but probably it can be the case for bundle stop/start. so, i have added reset of pending and calls.", "author": "yfre", "createdAt": "2020-06-19T07:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4NDg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff141b3a363802c630a9be9319d68d7e146ed817", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/Debouncer.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/Debouncer.java\nindex 65f902603d..380d539cf6 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/Debouncer.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/Debouncer.java\n\n@@ -84,6 +84,8 @@ class Debouncer {\n         logger.trace(\"stop debouncer\");\n         if (feature != null) {\n             feature.cancel(true);\n+            calls.set(0);\n+            pending.set(false);\n         }\n     }\n \n"}}, {"oid": "ff141b3a363802c630a9be9319d68d7e146ed817", "url": "https://github.com/openhab/openhab-addons/commit/ff141b3a363802c630a9be9319d68d7e146ed817", "message": "incorporate feedback\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-06-19T07:03:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2NDg3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r442964877", "bodyText": "shouldn't this have an override annotation?", "author": "cpmeister", "createdAt": "2020-06-19T17:32:08Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitImpl.java", "diffHunk": "@@ -203,4 +206,15 @@ public void allowUnauthenticatedRequests(boolean allow) {\n     public List<HomekitAccessory> getAccessories() {\n         return new ArrayList<HomekitAccessory>(this.changeListener.getAccessories().values());\n     }\n+\n+    public void clearHomekitPairings() {", "originalCommit": "ff141b3a363802c630a9be9319d68d7e146ed817", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTYyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r443135621", "bodyText": "right. done", "author": "yfre", "createdAt": "2020-06-20T14:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2NDg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6877248f603bb5b2a1992d9d6e744b6503840eb7", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitImpl.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitImpl.java\nindex 272f766c60..85478165a9 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitImpl.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitImpl.java\n\n@@ -207,6 +207,7 @@ public class HomekitImpl implements Homekit {\n         return new ArrayList<HomekitAccessory>(this.changeListener.getAccessories().values());\n     }\n \n+    @Override\n     public void clearHomekitPairings() {\n         try {\n             if (authInfo != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3MjEwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r442972101", "bodyText": "Seems wasteful to make multiple calls to storage.get during initialization. You have no idea what kind of storage is used nor how performant that storage is. Please try to minimize interactions with storage as much as possible.", "author": "cpmeister", "createdAt": "2020-06-19T17:49:09Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitAuthInfoImpl.java", "diffHunk": "@@ -41,13 +40,13 @@\n     private final byte[] privateKey;\n     private final String pin;\n \n-    public HomekitAuthInfoImpl(StorageService storageService, String pin) throws InvalidAlgorithmParameterException {\n-        storage = storageService.getStorage(\"homekit\");\n-        initializeStorage();\n+    public HomekitAuthInfoImpl(final Storage storage, final String pin) throws InvalidAlgorithmParameterException {\n+        this.storage = storage;\n         this.pin = pin;\n-        mac = storage.get(\"mac\");\n-        salt = new BigInteger(storage.get(\"salt\"));\n-        privateKey = Base64.getDecoder().decode(storage.get(\"privateKey\"));\n+        initializeStorage();\n+        mac = this.storage.get(\"mac\");\n+        salt = new BigInteger(this.storage.get(\"salt\"));\n+        privateKey = Base64.getDecoder().decode(this.storage.get(\"privateKey\"));", "originalCommit": "ff141b3a363802c630a9be9319d68d7e146ed817", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjM1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7940#discussion_r443136358", "bodyText": "i dont think we can really delay the gets and make kind of lazy loading. homekit need mac, salt and private key to start the server.\nbut i could reduce number of gets by moving them to initializeStorage. please take a look.", "author": "yfre", "createdAt": "2020-06-20T14:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3MjEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6877248f603bb5b2a1992d9d6e744b6503840eb7", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitAuthInfoImpl.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitAuthInfoImpl.java\nindex 60d18aa8c0..6b741ea874 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitAuthInfoImpl.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitAuthInfoImpl.java\n\n@@ -35,18 +37,15 @@ public class HomekitAuthInfoImpl implements HomekitAuthInfo {\n     private final Logger logger = LoggerFactory.getLogger(HomekitAuthInfoImpl.class);\n \n     private final Storage<String> storage;\n-    private final String mac;\n-    private final BigInteger salt;\n-    private final byte[] privateKey;\n+    private String mac;\n+    private BigInteger salt;\n+    private byte[] privateKey;\n     private final String pin;\n \n     public HomekitAuthInfoImpl(final Storage storage, final String pin) throws InvalidAlgorithmParameterException {\n         this.storage = storage;\n         this.pin = pin;\n         initializeStorage();\n-        mac = this.storage.get(\"mac\");\n-        salt = new BigInteger(this.storage.get(\"salt\"));\n-        privateKey = Base64.getDecoder().decode(this.storage.get(\"privateKey\"));\n     }\n \n     @Override\n"}}, {"oid": "6877248f603bb5b2a1992d9d6e744b6503840eb7", "url": "https://github.com/openhab/openhab-addons/commit/6877248f603bb5b2a1992d9d6e744b6503840eb7", "message": "reduce number of interactions with the storage. fix bug in clear method\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-06-20T14:46:24Z", "type": "commit"}]}