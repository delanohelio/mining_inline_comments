{"pr_number": 8685, "pr_title": "[haywardomnilogic] Replacement for Hayward Omnilogic Pool Automation Binding", "pr_createdAt": "2020-10-07T17:24:12Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8685", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk3NjEwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r505976104", "bodyText": "Please add @NonNullByDefault", "author": "cpmeister", "createdAt": "2020-10-16T01:51:41Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardTypeToRequest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+/**\n+ * The type to request.\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+public enum HaywardTypeToRequest {", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77dac20ebeac07fb17222dc7a1105f46587c8ca8", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardTypeToRequest.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardTypeToRequest.java\nindex 2be09ff56b..02e8914af7 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardTypeToRequest.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardTypeToRequest.java\n\n@@ -12,11 +12,14 @@\n  */\n package org.openhab.binding.haywardomnilogic.internal;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * The type to request.\n  *\n  * @author Matt Myers - Initial Contribution\n  */\n+@NonNullByDefault\n public enum HaywardTypeToRequest {\n     BACKYARD,\n     BOW,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk3NjIyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r505976227", "bodyText": "Please add @NonNullByDefault", "author": "cpmeister", "createdAt": "2020-10-16T01:51:54Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+\n+/**\n+ * The {@link HaywarThingHandler} is a subclass of the BaseThingHandler and a Super\n+ * Class to each Hayward Thing Handler\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+public class HaywardThingHandler extends BaseThingHandler {", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84cf350583be1f2f8015eef34b328fa48f8945ce", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\nindex ebc876b7e4..03b4955faa 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n\n@@ -14,6 +14,7 @@\n package org.openhab.binding.haywardomnilogic.internal;\n \n import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.core.library.types.DecimalType;\n import org.openhab.core.library.types.OnOffType;\n import org.openhab.core.library.types.QuantityType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMzMzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514623334", "bodyText": "Why are you retrieving this from the properties instead of from the thing configuration?", "author": "cpmeister", "createdAt": "2020-10-29T23:24:35Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardSensorHandler.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.core.thing.Thing;\n+\n+/**\n+ * The Sensor Handler\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardSensorHandler extends HaywardThingHandler {\n+\n+    public HaywardSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void getTelemetry(String xmlResponse) throws Exception {\n+        List<String> data = new ArrayList<>();\n+        List<String> systemIDs = new ArrayList<>();\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            systemIDs = bridgehandler.evaluateXPath(\"//Sensor/@systemId\", xmlResponse);\n+            data = bridgehandler.evaluateXPath(\"//Sensor/@relayState\", xmlResponse);\n+            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d612a6f712983d933a0f5c47aac31ed29b023bf", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardSensorHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardSensorHandler.java\nindex edf3ba3065..50ccd08404 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardSensorHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardSensorHandler.java\n\n@@ -34,15 +34,15 @@ public class HaywardSensorHandler extends HaywardThingHandler {\n \n     @Override\n     public void getTelemetry(String xmlResponse) throws Exception {\n-        List<String> data = new ArrayList<>();\n         List<String> systemIDs = new ArrayList<>();\n+        List<String> data = new ArrayList<>();\n \n         @SuppressWarnings(\"null\")\n         HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n         if (bridgehandler != null) {\n             systemIDs = bridgehandler.evaluateXPath(\"//Sensor/@systemId\", xmlResponse);\n             data = bridgehandler.evaluateXPath(\"//Sensor/@relayState\", xmlResponse);\n-            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+            String thingSystemID = getThing().getUID().getId();\n             for (int i = 0; i < systemIDs.size(); i++) {\n                 if (systemIDs.get(i).equals(thingSystemID)) {\n                     updateData(HaywardBindingConstants.CHANNEL_RELAY_STATE, data.get(i));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMzQwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514623405", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.\nMy general rule for logging levels is:\n\ntrace - used for normal expected execution paths\ndebug - used for unexepected execution paths, but well within normal operation\ninfo - used for notable points in an execution path, like a milestone. (in openhab we try reserve this logging level for the core, so bindings should rarely ever call this.)\nwarn - used for notable unexpected execution paths that a regular user (not just a developer) should be notified of. Warnings should be used to indicate that something not-normal occurred and user intervention is required to resolve. Warnings do not indicate a failure to operate merely an abnormal condition of operation that can still be handled by the binding. Failures in binding operation should be indicated by changing the thing status to offline.\nerror - used to indicate catastrophic program failure. This should be used to indicate a catastrophic failure in openhab's ability to operate. A failure in a binding would never cause openhab as a whole to fail so a failure in a bindings should never log an error. Instead that failure should be indicated by changing the thing status.", "author": "cpmeister", "createdAt": "2020-10-29T23:24:48Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardRelayHandler.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingProperties;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The Relay Handler\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardRelayHandler extends HaywardThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardRelayHandler.class);\n+\n+    HaywardThingProperties prop = getConfig().as(HaywardThingProperties.class);\n+\n+    public HaywardRelayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void getTelemetry(String xmlResponse) throws Exception {\n+        List<String> data = new ArrayList<>();\n+        List<String> systemIDs = new ArrayList<>();\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            systemIDs = bridgehandler.evaluateXPath(\"//Relay/@systemId\", xmlResponse);\n+            data = bridgehandler.evaluateXPath(\"//Relay/@relayState\", xmlResponse);\n+            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                if (systemIDs.get(i).equals(thingSystemID)) {\n+                    updateData(HaywardBindingConstants.CHANNEL_RELAY_STATE, data.get(i));\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if ((command instanceof RefreshType)) {\n+            return;\n+        }\n+\n+        prop.systemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+        prop.poolID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_BOWID);\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            String cmdString = this.cmdToString(command);\n+            String cmdURL = null;\n+            try {\n+                switch (channelUID.getId()) {\n+                    case HaywardBindingConstants.CHANNEL_RELAY_STATE:\n+                        cmdURL = HaywardBindingConstants.COMMAND_PARAMETERS\n+                                + \"<Name>SetUIEquipmentCmd</Name><Parameters>\"\n+                                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + bridgehandler.account.token\n+                                + \"</Parameter>\" + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\"\n+                                + bridgehandler.account.mspSystemID + \"</Parameter>\"\n+                                + \"<Parameter name=\\\"PoolID\\\" dataType=\\\"int\\\">\" + prop.poolID + \"</Parameter>\"\n+                                + \"<Parameter name=\\\"EquipmentID\\\" dataType=\\\"int\\\">\" + prop.systemID + \"</Parameter>\"\n+                                + \"<Parameter name=\\\"IsOn\\\" dataType=\\\"int\\\">\" + cmdString + \"</Parameter>\"\n+                                + HaywardBindingConstants.COMMAND_SCHEDULE + \"</Parameters></Request>\";\n+                        break;\n+                    default:\n+                        logger.error(\"haywardCommand Unsupported type {}\", channelUID);\n+                        return;\n+                }\n+\n+                // *****Send Command to Hayward server\n+                String xmlResponse = bridgehandler.httpXmlResponse(cmdURL);\n+                String status = bridgehandler.evaluateXPath(\"//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+                if (!(status.equals(\"0\"))) {\n+                    logger.error(\"haywardCommand XML response: {}\", xmlResponse);", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTkzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r520505934", "bodyText": "Thanks for the explanation!", "author": "matchews", "createdAt": "2020-11-10T11:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMzQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d12af5a6c98563506b1cef9fbac780bd11521187", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardRelayHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardRelayHandler.java\nindex 5be182aee4..d635416e02 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardRelayHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardRelayHandler.java\n\n@@ -101,7 +101,7 @@ public class HaywardRelayHandler extends HaywardThingHandler {\n                     return;\n                 }\n             } catch (Exception e) {\n-                logger.debug(\"Unable to send command to Hayward's server {}:{}\", bridgehandler.config.hostname,\n+                logger.debug(\"Unable to send command to Hayward's server {}:{}\", bridgehandler.config.endpointUrl,\n                         bridgehandler.config.username);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNTY4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514625687", "bodyText": "Can you ever have more than one heater with the same systemId? Or are systemIds unique for every device on the network?", "author": "cpmeister", "createdAt": "2020-10-29T23:32:04Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.core.thing.Thing;\n+\n+/**\n+ * The Heater Handler\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardHeaterHandler extends HaywardThingHandler {\n+\n+    HaywardConfig config = getConfig().as(HaywardConfig.class);\n+\n+    public HaywardHeaterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void getTelemetry(String xmlResponse) throws Exception {\n+        List<String> data = new ArrayList<>();\n+        List<String> systemIDs = new ArrayList<>();\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater/@systemId\", xmlResponse);\n+            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                if (systemIDs.get(i).equals(thingSystemID)) {", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI5Njg5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r516296899", "bodyText": "systemID's are unique for every device controlled by the OmniLogix controller.", "author": "matchews", "createdAt": "2020-11-02T22:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNTY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5d612a6f712983d933a0f5c47aac31ed29b023bf", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java\nindex b5d9cb90e6..fc3d186f65 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java\n\n@@ -37,27 +37,27 @@ public class HaywardHeaterHandler extends HaywardThingHandler {\n \n     @Override\n     public void getTelemetry(String xmlResponse) throws Exception {\n-        List<String> data = new ArrayList<>();\n         List<String> systemIDs = new ArrayList<>();\n+        List<String> data = new ArrayList<>();\n \n         @SuppressWarnings(\"null\")\n         HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n         if (bridgehandler != null) {\n             systemIDs = bridgehandler.evaluateXPath(\"//Heater/@systemId\", xmlResponse);\n-            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+            String thingSystemID = getThing().getUID().getId();\n             for (int i = 0; i < systemIDs.size(); i++) {\n                 if (systemIDs.get(i).equals(thingSystemID)) {\n                     // Operating Mode\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@operatingMode\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(0));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(i));\n \n                     // State\n                     data = bridgehandler.evaluateXPath(\"//Heater/@heaterState\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_HEATER_STATE, data.get(0));\n+                    updateData(HaywardBindingConstants.CHANNEL_HEATER_STATE, data.get(i));\n \n                     // Enable\n                     data = bridgehandler.evaluateXPath(\"//Heater/@enable\", xmlResponse);\n-                    if (data.get(0).equals(\"0\")) {\n+                    if (data.get(i).equals(\"0\")) {\n                         updateData(HaywardBindingConstants.CHANNEL_HEATER_ENABLE, \"0\");\n                     } else {\n                         updateData(HaywardBindingConstants.CHANNEL_HEATER_ENABLE, \"1\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNTk2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514625960", "bodyText": "Heater doesn't have a chlorinator channel listed in the xml.", "author": "cpmeister", "createdAt": "2020-10-29T23:32:57Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.core.thing.Thing;\n+\n+/**\n+ * The Heater Handler\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardHeaterHandler extends HaywardThingHandler {\n+\n+    HaywardConfig config = getConfig().as(HaywardConfig.class);\n+\n+    public HaywardHeaterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void getTelemetry(String xmlResponse) throws Exception {\n+        List<String> data = new ArrayList<>();\n+        List<String> systemIDs = new ArrayList<>();\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater/@systemId\", xmlResponse);\n+            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                if (systemIDs.get(i).equals(thingSystemID)) {\n+                    // Operating Mode\n+                    data = bridgehandler.evaluateXPath(\"//Chlorinator/@operatingMode\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(0));", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d612a6f712983d933a0f5c47aac31ed29b023bf", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java\nindex b5d9cb90e6..fc3d186f65 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java\n\n@@ -37,27 +37,27 @@ public class HaywardHeaterHandler extends HaywardThingHandler {\n \n     @Override\n     public void getTelemetry(String xmlResponse) throws Exception {\n-        List<String> data = new ArrayList<>();\n         List<String> systemIDs = new ArrayList<>();\n+        List<String> data = new ArrayList<>();\n \n         @SuppressWarnings(\"null\")\n         HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n         if (bridgehandler != null) {\n             systemIDs = bridgehandler.evaluateXPath(\"//Heater/@systemId\", xmlResponse);\n-            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+            String thingSystemID = getThing().getUID().getId();\n             for (int i = 0; i < systemIDs.size(); i++) {\n                 if (systemIDs.get(i).equals(thingSystemID)) {\n                     // Operating Mode\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@operatingMode\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(0));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(i));\n \n                     // State\n                     data = bridgehandler.evaluateXPath(\"//Heater/@heaterState\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_HEATER_STATE, data.get(0));\n+                    updateData(HaywardBindingConstants.CHANNEL_HEATER_STATE, data.get(i));\n \n                     // Enable\n                     data = bridgehandler.evaluateXPath(\"//Heater/@enable\", xmlResponse);\n-                    if (data.get(0).equals(\"0\")) {\n+                    if (data.get(i).equals(\"0\")) {\n                         updateData(HaywardBindingConstants.CHANNEL_HEATER_ENABLE, \"0\");\n                     } else {\n                         updateData(HaywardBindingConstants.CHANNEL_HEATER_ENABLE, \"1\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNjQ1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514626459", "bodyText": "How do you know you are parsing the data for the correct heater at this point? You seem to always choose the one at index 0.", "author": "cpmeister", "createdAt": "2020-10-29T23:34:34Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.core.thing.Thing;\n+\n+/**\n+ * The Heater Handler\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardHeaterHandler extends HaywardThingHandler {\n+\n+    HaywardConfig config = getConfig().as(HaywardConfig.class);\n+\n+    public HaywardHeaterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void getTelemetry(String xmlResponse) throws Exception {\n+        List<String> data = new ArrayList<>();\n+        List<String> systemIDs = new ArrayList<>();\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater/@systemId\", xmlResponse);\n+            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                if (systemIDs.get(i).equals(thingSystemID)) {\n+                    // Operating Mode\n+                    data = bridgehandler.evaluateXPath(\"//Chlorinator/@operatingMode\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(0));\n+\n+                    // State\n+                    data = bridgehandler.evaluateXPath(\"//Heater/@heaterState\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_HEATER_STATE, data.get(0));", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNjEzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r520016132", "bodyText": "Good point!  Fixed.", "author": "matchews", "createdAt": "2020-11-09T18:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNjQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5d612a6f712983d933a0f5c47aac31ed29b023bf", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java\nindex b5d9cb90e6..fc3d186f65 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardHeaterHandler.java\n\n@@ -37,27 +37,27 @@ public class HaywardHeaterHandler extends HaywardThingHandler {\n \n     @Override\n     public void getTelemetry(String xmlResponse) throws Exception {\n-        List<String> data = new ArrayList<>();\n         List<String> systemIDs = new ArrayList<>();\n+        List<String> data = new ArrayList<>();\n \n         @SuppressWarnings(\"null\")\n         HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n         if (bridgehandler != null) {\n             systemIDs = bridgehandler.evaluateXPath(\"//Heater/@systemId\", xmlResponse);\n-            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+            String thingSystemID = getThing().getUID().getId();\n             for (int i = 0; i < systemIDs.size(); i++) {\n                 if (systemIDs.get(i).equals(thingSystemID)) {\n                     // Operating Mode\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@operatingMode\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(0));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(i));\n \n                     // State\n                     data = bridgehandler.evaluateXPath(\"//Heater/@heaterState\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_HEATER_STATE, data.get(0));\n+                    updateData(HaywardBindingConstants.CHANNEL_HEATER_STATE, data.get(i));\n \n                     // Enable\n                     data = bridgehandler.evaluateXPath(\"//Heater/@enable\", xmlResponse);\n-                    if (data.get(0).equals(\"0\")) {\n+                    if (data.get(i).equals(\"0\")) {\n                         updateData(HaywardBindingConstants.CHANNEL_HEATER_ENABLE, \"0\");\n                     } else {\n                         updateData(HaywardBindingConstants.CHANNEL_HEATER_ENABLE, \"1\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzA1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514627052", "bodyText": "You should be returning a QuantityType here instead.", "author": "cpmeister", "createdAt": "2020-10-29T23:36:28Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+\n+/**\n+ * The {@link HaywarThingHandler} is a subclass of the BaseThingHandler and a Super\n+ * Class to each Hayward Thing Handler\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+public class HaywardThingHandler extends BaseThingHandler {\n+    protected Thing thing;\n+\n+    public HaywardThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public void getTelemetry(@NonNull String xmlResponse) throws Exception {\n+    }\n+\n+    public State toState(String type, String value) throws NumberFormatException {\n+        if (\"Number\".equals(type)) {\n+            return new DecimalType(value);\n+        } else if (\"Switch\".equals(type)) {\n+            return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+        } else if (\"system.power\".equals(type)) {\n+            return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+        } else if (\"Number:Dimensionless\".equals(type)) {\n+            return new DecimalType(value);\n+        } else if (\"Number:Temperature\".equals(type)) {\n+            return new DecimalType(value);", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84cf350583be1f2f8015eef34b328fa48f8945ce", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\nindex ebc876b7e4..03b4955faa 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n\n@@ -14,6 +14,7 @@\n package org.openhab.binding.haywardomnilogic.internal;\n \n import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.core.library.types.DecimalType;\n import org.openhab.core.library.types.OnOffType;\n import org.openhab.core.library.types.QuantityType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzA5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514627098", "bodyText": "Same here. But since you don't really know what type of Dimensionless unit you should be using here, you need to either pass that in to your function as well or make sure that you are only using Dimensionless for a certain type of unit (i.e. Percentage).", "author": "cpmeister", "createdAt": "2020-10-29T23:36:37Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+\n+/**\n+ * The {@link HaywarThingHandler} is a subclass of the BaseThingHandler and a Super\n+ * Class to each Hayward Thing Handler\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+public class HaywardThingHandler extends BaseThingHandler {\n+    protected Thing thing;\n+\n+    public HaywardThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public void getTelemetry(@NonNull String xmlResponse) throws Exception {\n+    }\n+\n+    public State toState(String type, String value) throws NumberFormatException {\n+        if (\"Number\".equals(type)) {\n+            return new DecimalType(value);\n+        } else if (\"Switch\".equals(type)) {\n+            return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+        } else if (\"system.power\".equals(type)) {\n+            return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+        } else if (\"Number:Dimensionless\".equals(type)) {\n+            return new DecimalType(value);", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84cf350583be1f2f8015eef34b328fa48f8945ce", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\nindex ebc876b7e4..03b4955faa 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n\n@@ -14,6 +14,7 @@\n package org.openhab.binding.haywardomnilogic.internal;\n \n import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.core.library.types.DecimalType;\n import org.openhab.core.library.types.OnOffType;\n import org.openhab.core.library.types.QuantityType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMDk5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514630998", "bodyText": "If pumps, heaters, relays, etc. are implicitly mapped to bodies of water, why not just make bodies of water a bridge type as well? That way you can more naturally represent the thing hierarchy as well as make it closer to how the omnilogic system represents them.", "author": "cpmeister", "createdAt": "2020-10-29T23:49:40Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+\n+// public class HaywardDiscoveryService extends AbstractDiscoveryService implements HaywardHandlerListener {\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler handler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+        // this.bridge = bridge;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        try {\n+            String xmlResults = handler.getMspConfig();\n+            mspConfigDiscovery(xmlResults);\n+        } catch (Exception e) {\n+            logger.debug(\"Exception during discovery scan\", e);\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) throws Exception {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+\n+        // Find Backyard\n+        names = handler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+        for (String name : names) {\n+            onBackyardDiscovered(Integer.parseInt(handler.account.mspSystemID), name);\n+        }\n+\n+        // Find Bodies of Water\n+        systemIDs = handler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            onBOWDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i));\n+        }\n+\n+        // Find Chlorinators\n+        systemIDs = handler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onChlorinatorDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n+\n+        // Find ColorLogic Lights\n+        systemIDs = handler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onColorLogicDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n+\n+        // Find Filters\n+        systemIDs = handler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+        property1 = handler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        property2 = handler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        property3 = handler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        property4 = handler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onFilterDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0),\n+                    property1.get(i), property2.get(i), property3.get(i), property4.get(i));\n+        }\n+\n+        // Find Heaters\n+        systemIDs = handler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+            onHeaterDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n+\n+        // Find Pumps\n+        systemIDs = handler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+        property1 = handler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        property2 = handler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        property3 = handler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        property4 = handler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+            onPumpDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0),\n+                    property1.get(i), property2.get(i), property3.get(i), property4.get(i));\n+        }", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NDk0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r520064943", "bodyText": "Some of these devices can be shared between two bodies of water.  For example a single heater is typically plumbed with valves to heat both the pool and spa.  The pump can be plumbed with valves to circulate the pool and/or the spa.", "author": "matchews", "createdAt": "2020-11-09T19:26:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMDk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex d0e2c14700..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -237,7 +237,7 @@ public class HaywardDiscoveryService extends AbstractDiscoveryService implements\n         ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BACKYARD, handler.getThing().getUID(),\n                 Integer.toString(systemID));\n         Map<String, Object> properties = new HashMap<>();\n-        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n         properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n         DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n                 .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMzU4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514633580", "bodyText": "remove this", "author": "cpmeister", "createdAt": "2020-10-29T23:58:30Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+\n+// public class HaywardDiscoveryService extends AbstractDiscoveryService implements HaywardHandlerListener {\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler handler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+        // this.bridge = bridge;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        try {\n+            String xmlResults = handler.getMspConfig();\n+            mspConfigDiscovery(xmlResults);\n+        } catch (Exception e) {\n+            logger.debug(\"Exception during discovery scan\", e);\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) throws Exception {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+\n+        // Find Backyard\n+        names = handler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+        for (String name : names) {\n+            onBackyardDiscovered(Integer.parseInt(handler.account.mspSystemID), name);\n+        }\n+\n+        // Find Bodies of Water\n+        systemIDs = handler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            onBOWDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i));\n+        }\n+\n+        // Find Chlorinators\n+        systemIDs = handler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onChlorinatorDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n+\n+        // Find ColorLogic Lights\n+        systemIDs = handler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onColorLogicDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n+\n+        // Find Filters\n+        systemIDs = handler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+        property1 = handler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        property2 = handler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        property3 = handler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        property4 = handler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onFilterDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0),\n+                    property1.get(i), property2.get(i), property3.get(i), property4.get(i));\n+        }\n+\n+        // Find Heaters\n+        systemIDs = handler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+            onHeaterDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n+\n+        // Find Pumps\n+        systemIDs = handler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+        property1 = handler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        property2 = handler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        property3 = handler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        property4 = handler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+            onPumpDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0),\n+                    property1.get(i), property2.get(i), property3.get(i), property4.get(i));\n+        }\n+\n+        // Find Relays\n+        systemIDs = handler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            if (!(bowID.isEmpty())) {\n+                onRelayDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+            } else {\n+                onRelayDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), \"\", \"\");\n+            }\n+\n+        }\n+\n+        // Find Virtual Heaters\n+        systemIDs = handler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onVirtualHeaterDiscovered(Integer.parseInt(systemIDs.get(i)), \"Virtual Heater\", bowID.get(0),\n+                    bowName.get(0));\n+        }\n+\n+        // Find Sensors\n+        // Flow and water temp sensor aren't showing up in telemetry. Need example to determine how to differentiate\n+        // \"system\" sensors\n+        // that are reported in the BOW water temp, Filter flow switch, ORP, etc.\n+        systemIDs = handler.evaluateXPath(\"//Sensor/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Sensor/Name/text()\", xmlResponse);\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            // Do not add backyard sensors that do not exist in the BOW thus bowID is null\n+            if (!(bowID.isEmpty())) {\n+                onSensorDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public void onBackyardDiscovered(int systemID, String label) {\n+        logger.debug(\"Hayward Backyard {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BACKYARD, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n+\n+    public void onBOWDiscovered(int systemID, String label) {\n+        logger.debug(\"Hayward BOW {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BOW, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n+\n+    public void onChlorinatorDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Chlorinator {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_CHLORINATOR, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n+\n+    public void onColorLogicDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Color Logic Light {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_COLORLOGIC, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n+\n+    public void onFilterDiscovered(int systemID, String label, String bowID, String bowName, String minPumpSpeed,\n+            String maxPumpSpeed, String minPumpRpm, String maxPumpRpm) {\n+        logger.debug(\"Hayward Filter {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_FILTER, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, minPumpSpeed);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, maxPumpSpeed);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, minPumpRpm);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, maxPumpRpm);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n+\n+    public void onHeaterDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Heater {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_HEATER, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n+\n+    public void onPumpDiscovered(int systemID, String label, String bowID, String bowName, String property1,\n+            String property2, String property3, String property4) {\n+        logger.debug(\"Hayward Pump {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_PUMP, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MINPUMPSPEED, property1);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MAXPUMPSPEED, property2);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MINPUMPRPM, property3);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MAXPUMPRPM, property4);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n+\n+    public void onRelayDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Relay {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_RELAY, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n+\n+    public void onSensorDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Sensor {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_SENSOR, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.SENSOR);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n+\n+    public void onVirtualHeaterDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Virtual Heater {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER.toString());\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof HaywardBridgeHandler) {\n+            this.handler = (HaywardBridgeHandler) handler;\n+            this.handler.setHaywardDiscoveryService(this);\n+        }\n+    }\n+\n+    // @Override\n+    // public void setThingHandler(@Nullable ThingHandler handler) {\n+    // if (handler instanceof YamahaBridgeHandler) {\n+    // this.handler = (YamahaBridgeHandler) handler;\n+    // this.handler.setZoneDiscoveryService(this);\n+    // }\n+    // }", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex d0e2c14700..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -237,7 +237,7 @@ public class HaywardDiscoveryService extends AbstractDiscoveryService implements\n         ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BACKYARD, handler.getThing().getUID(),\n                 Integer.toString(systemID));\n         Map<String, Object> properties = new HashMap<>();\n-        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n         properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n         DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n                 .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMzYzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514633635", "bodyText": "remove this line", "author": "cpmeister", "createdAt": "2020-10-29T23:58:43Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+\n+// public class HaywardDiscoveryService extends AbstractDiscoveryService implements HaywardHandlerListener {", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex d0e2c14700..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -237,7 +237,7 @@ public class HaywardDiscoveryService extends AbstractDiscoveryService implements\n         ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BACKYARD, handler.getThing().getUID(),\n                 Integer.toString(systemID));\n         Map<String, Object> properties = new HashMap<>();\n-        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n         properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n         DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n                 .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDAyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r514634023", "bodyText": "use it or lose it", "author": "cpmeister", "createdAt": "2020-10-30T00:00:02Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link HaywardBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardBindingConstants {\n+\n+    private static final String BINDING_ID = \"haywardomnilogic\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_BACKYARD = new ThingTypeUID(BINDING_ID, \"backyard\");\n+    public static final ThingTypeUID THING_TYPE_BOW = new ThingTypeUID(BINDING_ID, \"bow\");\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"bridge\");\n+    public static final ThingTypeUID THING_TYPE_CHLORINATOR = new ThingTypeUID(BINDING_ID, \"chlorinator\");\n+    public static final ThingTypeUID THING_TYPE_COLORLOGIC = new ThingTypeUID(BINDING_ID, \"colorlogic\");\n+    public static final ThingTypeUID THING_TYPE_FILTER = new ThingTypeUID(BINDING_ID, \"filter\");\n+    public static final ThingTypeUID THING_TYPE_HEATER = new ThingTypeUID(BINDING_ID, \"heater\");\n+    public static final ThingTypeUID THING_TYPE_PUMP = new ThingTypeUID(BINDING_ID, \"pump\");\n+    public static final ThingTypeUID THING_TYPE_RELAY = new ThingTypeUID(BINDING_ID, \"relay\");\n+    public static final ThingTypeUID THING_TYPE_SENSOR = new ThingTypeUID(BINDING_ID, \"sensor\");\n+    public static final ThingTypeUID THING_TYPE_VIRTUALHEATER = new ThingTypeUID(BINDING_ID, \"virtualHeater\");\n+\n+    public static final Set<ThingTypeUID> BRIDGE_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    // public static final Set<ThingTypeUID> ZONE_THING_TYPES_UIDS = Collections.singleton(ZONE_THING_TYPE);", "originalCommit": "37ddd0c1b2b24734272871f168bed6cb9fb77fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0359f0e74de8089c2906c1b00e06dc0d95a5e6a7", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\nindex 777cee96f9..0d7f28192c 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\n\n@@ -47,8 +47,6 @@ public class HaywardBindingConstants {\n \n     public static final Set<ThingTypeUID> BRIDGE_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    // public static final Set<ThingTypeUID> ZONE_THING_TYPES_UIDS = Collections.singleton(ZONE_THING_TYPE);\n-\n     public static final Set<ThingTypeUID> THING_TYPES_UIDS = new HashSet<ThingTypeUID>(\n             Arrays.asList(HaywardBindingConstants.THING_TYPE_BACKYARD, HaywardBindingConstants.THING_TYPE_BOW,\n                     HaywardBindingConstants.THING_TYPE_BRIDGE, HaywardBindingConstants.THING_TYPE_CHLORINATOR,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzMzkxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r530633912", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> THING_TYPES_UIDS = new HashSet<ThingTypeUID>(\n          \n          \n            \n                        Arrays.asList(HaywardBindingConstants.THING_TYPE_BACKYARD, HaywardBindingConstants.THING_TYPE_BOW,\n          \n          \n            \n                                HaywardBindingConstants.THING_TYPE_BRIDGE, HaywardBindingConstants.THING_TYPE_CHLORINATOR,\n          \n          \n            \n                                HaywardBindingConstants.THING_TYPE_COLORLOGIC, HaywardBindingConstants.THING_TYPE_FILTER,\n          \n          \n            \n                                HaywardBindingConstants.THING_TYPE_HEATER, HaywardBindingConstants.THING_TYPE_PUMP,\n          \n          \n            \n                                HaywardBindingConstants.THING_TYPE_RELAY, HaywardBindingConstants.THING_TYPE_SENSOR,\n          \n          \n            \n                                HaywardBindingConstants.THING_TYPE_VIRTUALHEATER));\n          \n          \n            \n                public static final Set<ThingTypeUID> THING_TYPES_UIDS = Set.of(HaywardBindingConstants.THING_TYPE_BACKYARD, HaywardBindingConstants.THING_TYPE_BOW,\n          \n          \n            \n                                HaywardBindingConstants.THING_TYPE_BRIDGE, HaywardBindingConstants.THING_TYPE_CHLORINATOR,\n          \n          \n            \n                                HaywardBindingConstants.THING_TYPE_COLORLOGIC, HaywardBindingConstants.THING_TYPE_FILTER,\n          \n          \n            \n                                HaywardBindingConstants.THING_TYPE_HEATER, HaywardBindingConstants.THING_TYPE_PUMP,\n          \n          \n            \n                                HaywardBindingConstants.THING_TYPE_RELAY, HaywardBindingConstants.THING_TYPE_SENSOR,\n          \n          \n            \n                                HaywardBindingConstants.THING_TYPE_VIRTUALHEATER);", "author": "cpmeister", "createdAt": "2020-11-25T20:44:40Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link HaywardBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardBindingConstants {\n+\n+    private static final String BINDING_ID = \"haywardomnilogic\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_BACKYARD = new ThingTypeUID(BINDING_ID, \"backyard\");\n+    public static final ThingTypeUID THING_TYPE_BOW = new ThingTypeUID(BINDING_ID, \"bow\");\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"bridge\");\n+    public static final ThingTypeUID THING_TYPE_CHLORINATOR = new ThingTypeUID(BINDING_ID, \"chlorinator\");\n+    public static final ThingTypeUID THING_TYPE_COLORLOGIC = new ThingTypeUID(BINDING_ID, \"colorlogic\");\n+    public static final ThingTypeUID THING_TYPE_FILTER = new ThingTypeUID(BINDING_ID, \"filter\");\n+    public static final ThingTypeUID THING_TYPE_HEATER = new ThingTypeUID(BINDING_ID, \"heater\");\n+    public static final ThingTypeUID THING_TYPE_PUMP = new ThingTypeUID(BINDING_ID, \"pump\");\n+    public static final ThingTypeUID THING_TYPE_RELAY = new ThingTypeUID(BINDING_ID, \"relay\");\n+    public static final ThingTypeUID THING_TYPE_SENSOR = new ThingTypeUID(BINDING_ID, \"sensor\");\n+    public static final ThingTypeUID THING_TYPE_VIRTUALHEATER = new ThingTypeUID(BINDING_ID, \"virtualHeater\");\n+\n+    public static final Set<ThingTypeUID> BRIDGE_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    public static final Set<ThingTypeUID> THING_TYPES_UIDS = new HashSet<ThingTypeUID>(\n+            Arrays.asList(HaywardBindingConstants.THING_TYPE_BACKYARD, HaywardBindingConstants.THING_TYPE_BOW,\n+                    HaywardBindingConstants.THING_TYPE_BRIDGE, HaywardBindingConstants.THING_TYPE_CHLORINATOR,\n+                    HaywardBindingConstants.THING_TYPE_COLORLOGIC, HaywardBindingConstants.THING_TYPE_FILTER,\n+                    HaywardBindingConstants.THING_TYPE_HEATER, HaywardBindingConstants.THING_TYPE_PUMP,\n+                    HaywardBindingConstants.THING_TYPE_RELAY, HaywardBindingConstants.THING_TYPE_SENSOR,\n+                    HaywardBindingConstants.THING_TYPE_VIRTUALHEATER));", "originalCommit": "d57d0a19025e25837b033566436cc5d865a7bb54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\nindex b36f90f598..777cee96f9 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\n\n@@ -47,6 +47,8 @@ public class HaywardBindingConstants {\n \n     public static final Set<ThingTypeUID> BRIDGE_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_BRIDGE);\n \n+    // public static final Set<ThingTypeUID> ZONE_THING_TYPES_UIDS = Collections.singleton(ZONE_THING_TYPE);\n+\n     public static final Set<ThingTypeUID> THING_TYPES_UIDS = new HashSet<ThingTypeUID>(\n             Arrays.asList(HaywardBindingConstants.THING_TYPE_BACKYARD, HaywardBindingConstants.THING_TYPE_BOW,\n                     HaywardBindingConstants.THING_TYPE_BRIDGE, HaywardBindingConstants.THING_TYPE_CHLORINATOR,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzNDAwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r530634008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> BRIDGE_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_BRIDGE);\n          \n          \n            \n                public static final Set<ThingTypeUID> BRIDGE_THING_TYPES_UIDS = Set.of(THING_TYPE_BRIDGE);", "author": "cpmeister", "createdAt": "2020-11-25T20:44:54Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link HaywardBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardBindingConstants {\n+\n+    private static final String BINDING_ID = \"haywardomnilogic\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_BACKYARD = new ThingTypeUID(BINDING_ID, \"backyard\");\n+    public static final ThingTypeUID THING_TYPE_BOW = new ThingTypeUID(BINDING_ID, \"bow\");\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"bridge\");\n+    public static final ThingTypeUID THING_TYPE_CHLORINATOR = new ThingTypeUID(BINDING_ID, \"chlorinator\");\n+    public static final ThingTypeUID THING_TYPE_COLORLOGIC = new ThingTypeUID(BINDING_ID, \"colorlogic\");\n+    public static final ThingTypeUID THING_TYPE_FILTER = new ThingTypeUID(BINDING_ID, \"filter\");\n+    public static final ThingTypeUID THING_TYPE_HEATER = new ThingTypeUID(BINDING_ID, \"heater\");\n+    public static final ThingTypeUID THING_TYPE_PUMP = new ThingTypeUID(BINDING_ID, \"pump\");\n+    public static final ThingTypeUID THING_TYPE_RELAY = new ThingTypeUID(BINDING_ID, \"relay\");\n+    public static final ThingTypeUID THING_TYPE_SENSOR = new ThingTypeUID(BINDING_ID, \"sensor\");\n+    public static final ThingTypeUID THING_TYPE_VIRTUALHEATER = new ThingTypeUID(BINDING_ID, \"virtualHeater\");\n+\n+    public static final Set<ThingTypeUID> BRIDGE_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_BRIDGE);", "originalCommit": "d57d0a19025e25837b033566436cc5d865a7bb54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\nindex b36f90f598..777cee96f9 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\n\n@@ -47,6 +47,8 @@ public class HaywardBindingConstants {\n \n     public static final Set<ThingTypeUID> BRIDGE_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_BRIDGE);\n \n+    // public static final Set<ThingTypeUID> ZONE_THING_TYPES_UIDS = Collections.singleton(ZONE_THING_TYPE);\n+\n     public static final Set<ThingTypeUID> THING_TYPES_UIDS = new HashSet<ThingTypeUID>(\n             Arrays.asList(HaywardBindingConstants.THING_TYPE_BACKYARD, HaywardBindingConstants.THING_TYPE_BOW,\n                     HaywardBindingConstants.THING_TYPE_BRIDGE, HaywardBindingConstants.THING_TYPE_CHLORINATOR,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3NDE2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r535774169", "bodyText": "Please include the exception message in the log.", "author": "cpmeister", "createdAt": "2020-12-04T01:44:19Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardVirtualHeaterHandler.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingProperties;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The Virtual Heater Handler\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardVirtualHeaterHandler extends HaywardThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardVirtualHeaterHandler.class);\n+\n+    HaywardThingProperties prop = getConfig().as(HaywardThingProperties.class);\n+\n+    public HaywardVirtualHeaterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void getTelemetry(String xmlResponse) throws Exception {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> data = new ArrayList<>();\n+        List<String> currentSetpoint = new ArrayList<>();\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            systemIDs = bridgehandler.evaluateXPath(\"//VirtualHeater/@systemId\", xmlResponse);\n+            String thingSystemID = getThing().getUID().getId();\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                if (systemIDs.get(i).equals(thingSystemID)) {\n+                    data = bridgehandler.evaluateXPath(\"//VirtualHeater/@Current-Set-Point\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_VIRTUALHEATER_CURRENTSETPOINT, data.get(i));\n+\n+                    data = bridgehandler.evaluateXPath(\"//VirtualHeater/@enable\", xmlResponse);\n+                    if (data.get(i).equals(\"yes\")) {\n+                        updateData(HaywardBindingConstants.CHANNEL_VIRTUALHEATER_ENABLE, \"1\");\n+                    } else if (data.get(i).equals(\"no\")) {\n+                        updateData(HaywardBindingConstants.CHANNEL_VIRTUALHEATER_ENABLE, \"0\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if ((command instanceof RefreshType)) {\n+            return;\n+        }\n+\n+        prop.systemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+        prop.poolID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_BOWID);\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            String cmdString = this.cmdToString(command);\n+            String cmdURL = null;\n+\n+            if (command == OnOffType.ON) {\n+                cmdString = \"True\";\n+            } else if (command == OnOffType.OFF) {\n+                cmdString = \"False\";\n+            }\n+\n+            try {\n+                switch (channelUID.getId()) {\n+                    case HaywardBindingConstants.CHANNEL_VIRTUALHEATER_ENABLE:\n+                        cmdURL = HaywardBindingConstants.COMMAND_PARAMETERS + \"<Name>SetHeaterEnable</Name><Parameters>\"\n+                                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + bridgehandler.account.token\n+                                + \"</Parameter>\" + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\"\n+                                + bridgehandler.account.mspSystemID + \"</Parameter>\"\n+                                + \"<Parameter name=\\\"PoolID\\\" dataType=\\\"int\\\">\" + prop.poolID + \"</Parameter>\"\n+                                + \"<Parameter name=\\\"HeaterID\\\" dataType=\\\"int\\\">\" + prop.systemID + \"</Parameter>\"\n+                                + \"<Parameter name=\\\"Enabled\\\" dataType=\\\"bool\\\">\" + cmdString + \"</Parameter>\"\n+                                + \"</Parameters></Request>\";\n+                        break;\n+\n+                    case HaywardBindingConstants.CHANNEL_VIRTUALHEATER_CURRENTSETPOINT:\n+                        cmdURL = HaywardBindingConstants.COMMAND_PARAMETERS + \"<Name>SetUIHeaterCmd</Name><Parameters>\"\n+                                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + bridgehandler.account.token\n+                                + \"</Parameter>\" + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\"\n+                                + bridgehandler.account.mspSystemID + \"</Parameter>\"\n+                                + \"<Parameter name=\\\"PoolID\\\" dataType=\\\"int\\\">\" + prop.poolID + \"</Parameter>\"\n+                                + \"<Parameter name=\\\"HeaterID\\\" dataType=\\\"int\\\">\" + prop.systemID + \"</Parameter>\"\n+                                + \"<Parameter name=\\\"Temp\\\" dataType=\\\"int\\\">\" + cmdString + \"</Parameter>\"\n+                                + \"</Parameters></Request>\";\n+                        break;\n+                    default:\n+                        logger.warn(\"haywardCommand Unsupported type {}\", channelUID);\n+                        return;\n+                }\n+\n+                // *****Send Command to Hayward server\n+                String xmlResponse = bridgehandler.httpXmlResponse(cmdURL);\n+                String status = bridgehandler.evaluateXPath(\"//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+                if (!(status.equals(\"0\"))) {\n+                    logger.debug(\"haywardCommand XML response: {}\", xmlResponse);\n+                    return;\n+                }\n+            } catch (Exception e) {\n+                logger.debug(\"Unable to send command to Hayward's server {}:{}\", bridgehandler.config.endpointUrl,\n+                        bridgehandler.config.username);\n+            }", "originalCommit": "d57d0a19025e25837b033566436cc5d865a7bb54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardVirtualHeaterHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardVirtualHeaterHandler.java\nindex 15dd5490da..4a6411ae94 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardVirtualHeaterHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardVirtualHeaterHandler.java\n\n@@ -44,27 +44,23 @@ public class HaywardVirtualHeaterHandler extends HaywardThingHandler {\n \n     @Override\n     public void getTelemetry(String xmlResponse) throws Exception {\n-        List<String> systemIDs = new ArrayList<>();\n         List<String> data = new ArrayList<>();\n-        List<String> currentSetpoint = new ArrayList<>();\n \n         @SuppressWarnings(\"null\")\n         HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+\n         if (bridgehandler != null) {\n-            systemIDs = bridgehandler.evaluateXPath(\"//VirtualHeater/@systemId\", xmlResponse);\n-            String thingSystemID = getThing().getUID().getId();\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                if (systemIDs.get(i).equals(thingSystemID)) {\n-                    data = bridgehandler.evaluateXPath(\"//VirtualHeater/@Current-Set-Point\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_VIRTUALHEATER_CURRENTSETPOINT, data.get(i));\n-\n-                    data = bridgehandler.evaluateXPath(\"//VirtualHeater/@enable\", xmlResponse);\n-                    if (data.get(i).equals(\"yes\")) {\n-                        updateData(HaywardBindingConstants.CHANNEL_VIRTUALHEATER_ENABLE, \"1\");\n-                    } else if (data.get(i).equals(\"no\")) {\n-                        updateData(HaywardBindingConstants.CHANNEL_VIRTUALHEATER_ENABLE, \"0\");\n-                    }\n-                }\n+            // Current Setpoint\n+            data = bridgehandler.evaluateXPath(\"//VirtualHeater/@Current-Set-Point\", xmlResponse);\n+            updateData(HaywardBindingConstants.CHANNEL_VIRTUALHEATER_CURRENTSETPOINT, data.get(0));\n+\n+            // Enable\n+            data = bridgehandler.evaluateXPath(\"//VirtualHeater/@enable\", xmlResponse);\n+\n+            if (data.get(0).equals(\"yes\")) {\n+                updateData(HaywardBindingConstants.CHANNEL_VIRTUALHEATER_ENABLE, \"1\");\n+            } else if (data.get(0).equals(\"no\")) {\n+                updateData(HaywardBindingConstants.CHANNEL_VIRTUALHEATER_ENABLE, \"0\");\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3NTExNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r535775115", "bodyText": "Are these used?", "author": "cpmeister", "createdAt": "2020-12-04T01:46:55Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link HaywardBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardBindingConstants {\n+\n+    private static final String BINDING_ID = \"haywardomnilogic\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_BACKYARD = new ThingTypeUID(BINDING_ID, \"backyard\");\n+    public static final ThingTypeUID THING_TYPE_BOW = new ThingTypeUID(BINDING_ID, \"bow\");\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"bridge\");\n+    public static final ThingTypeUID THING_TYPE_CHLORINATOR = new ThingTypeUID(BINDING_ID, \"chlorinator\");\n+    public static final ThingTypeUID THING_TYPE_COLORLOGIC = new ThingTypeUID(BINDING_ID, \"colorlogic\");\n+    public static final ThingTypeUID THING_TYPE_FILTER = new ThingTypeUID(BINDING_ID, \"filter\");\n+    public static final ThingTypeUID THING_TYPE_HEATER = new ThingTypeUID(BINDING_ID, \"heater\");\n+    public static final ThingTypeUID THING_TYPE_PUMP = new ThingTypeUID(BINDING_ID, \"pump\");\n+    public static final ThingTypeUID THING_TYPE_RELAY = new ThingTypeUID(BINDING_ID, \"relay\");\n+    public static final ThingTypeUID THING_TYPE_SENSOR = new ThingTypeUID(BINDING_ID, \"sensor\");\n+    public static final ThingTypeUID THING_TYPE_VIRTUALHEATER = new ThingTypeUID(BINDING_ID, \"virtualHeater\");\n+\n+    public static final Set<ThingTypeUID> BRIDGE_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    public static final Set<ThingTypeUID> THING_TYPES_UIDS = new HashSet<ThingTypeUID>(\n+            Arrays.asList(HaywardBindingConstants.THING_TYPE_BACKYARD, HaywardBindingConstants.THING_TYPE_BOW,\n+                    HaywardBindingConstants.THING_TYPE_BRIDGE, HaywardBindingConstants.THING_TYPE_CHLORINATOR,\n+                    HaywardBindingConstants.THING_TYPE_COLORLOGIC, HaywardBindingConstants.THING_TYPE_FILTER,\n+                    HaywardBindingConstants.THING_TYPE_HEATER, HaywardBindingConstants.THING_TYPE_PUMP,\n+                    HaywardBindingConstants.THING_TYPE_RELAY, HaywardBindingConstants.THING_TYPE_SENSOR,\n+                    HaywardBindingConstants.THING_TYPE_VIRTUALHEATER));\n+\n+    // List of all Channel ids (bridge)\n+    // No Channels\n+\n+    // List of all Channel ids (backyard)\n+    public static final String CHANNEL_BACKYARD_AIRTEMP = \"backyardAirTemp\";\n+    public static final String CHANNEL_BACKYARD_STATUS = \"backyardStatus\";\n+    public static final String CHANNEL_BACKYARD_STATE = \"backyardState\";\n+    public static final String CHANNEL_BACKYARD_ALARM1 = \"backyardAlarm1\";\n+    public static final String CHANNEL_BACKYARD_ALARM2 = \"backyardAlarm2\";\n+    public static final String CHANNEL_BACKYARD_ALARM3 = \"backyardAlarm3\";\n+    public static final String CHANNEL_BACKYARD_ALARM4 = \"backyardAlarm4\";\n+    public static final String CHANNEL_BACKYARD_ALARM5 = \"backyardAlarm5\";", "originalCommit": "d57d0a19025e25837b033566436cc5d865a7bb54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1MDY5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r542550693", "bodyText": "They are programmatically generated.  I deleted the constants.  Thx.\n\n  \n    \n      openhab-addons/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBackyardHandler.java\n    \n    \n         Line 109\n      in\n      d57d0a1\n    \n    \n    \n    \n\n        \n          \n           updateData(\"backyardAlarm\" + String.format(\"%01d\", i + 1), alarmStr);", "author": "matchews", "createdAt": "2020-12-14T17:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3NTExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\nindex b36f90f598..777cee96f9 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardBindingConstants.java\n\n@@ -47,6 +47,8 @@ public class HaywardBindingConstants {\n \n     public static final Set<ThingTypeUID> BRIDGE_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_BRIDGE);\n \n+    // public static final Set<ThingTypeUID> ZONE_THING_TYPES_UIDS = Collections.singleton(ZONE_THING_TYPE);\n+\n     public static final Set<ThingTypeUID> THING_TYPES_UIDS = new HashSet<ThingTypeUID>(\n             Arrays.asList(HaywardBindingConstants.THING_TYPE_BACKYARD, HaywardBindingConstants.THING_TYPE_BOW,\n                     HaywardBindingConstants.THING_TYPE_BRIDGE, HaywardBindingConstants.THING_TYPE_CHLORINATOR,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3NjIxNA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r535776214", "bodyText": "This if statement is redundant since the code above would return if !(status.equals(\"0\")", "author": "cpmeister", "createdAt": "2020-12-04T01:49:59Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBackyardHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.core.thing.Thing;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The Backyard Handler\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardBackyardHandler extends HaywardThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBackyardHandler.class);\n+\n+    public HaywardBackyardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void getTelemetry(String xmlResponse) throws Exception {\n+        List<String> data = new ArrayList<>();\n+        List<String> systemIDs = new ArrayList<>();\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            systemIDs = bridgehandler.evaluateXPath(\"//Backyard/@systemId\", xmlResponse);\n+            String thingSystemID = getThing().getUID().getId();\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                if (systemIDs.get(i).equals(thingSystemID)) {\n+                    // Air temp\n+                    data = bridgehandler.evaluateXPath(\"//Backyard/@airTemp\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_BACKYARD_AIRTEMP, data.get(0));\n+\n+                    // Status\n+                    data = bridgehandler.evaluateXPath(\"//Backyard/@status\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_BACKYARD_STATUS, data.get(0));\n+\n+                    // State\n+                    data = bridgehandler.evaluateXPath(\"//Backyard/@state\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_BACKYARD_STATE, data.get(0));\n+                }\n+            }\n+        }\n+    }\n+\n+    public boolean getAlarmList(String systemID) throws Exception {\n+        List<String> bowID = new ArrayList<>();\n+        List<String> parameter1 = new ArrayList<>();\n+        List<String> message = new ArrayList<>();\n+        String alarmStr;\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+\n+        // *****Request Alarm List from Hayward server\n+        @SuppressWarnings(\"null\")\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetAlarmList</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + bridgehandler.account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + bridgehandler.account.mspSystemID\n+                + \"</Parameter>\"\n+                + \"<Parameter name=\\\"CultureInfoName\\\" dataType=\\\"String\\\">en-us</Parameter></Parameters></Request>\";\n+\n+        String xmlResponse = bridgehandler.httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward getAlarmList XML response was empty\");\n+            return false;\n+        }\n+\n+        String status = bridgehandler\n+                .evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.trace(\"Hayward getAlarm XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        if (status.equals(\"0\")) {", "originalCommit": "d57d0a19025e25837b033566436cc5d865a7bb54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBackyardHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBackyardHandler.java\nindex 6b57b6cc86..9ee83cd50f 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBackyardHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBackyardHandler.java\n\n@@ -44,7 +44,7 @@ public class HaywardBackyardHandler extends HaywardThingHandler {\n         HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n         if (bridgehandler != null) {\n             systemIDs = bridgehandler.evaluateXPath(\"//Backyard/@systemId\", xmlResponse);\n-            String thingSystemID = getThing().getUID().getId();\n+            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n             for (int i = 0; i < systemIDs.size(); i++) {\n                 if (systemIDs.get(i).equals(thingSystemID)) {\n                     // Air temp\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NzY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546257672", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-12-19T16:40:16Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler handler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+        // this.bridge = bridge;", "originalCommit": "1a3e02205380a2b0ab8d6862592f8ad84944c448", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 5075667f80..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -40,6 +40,7 @@ import org.slf4j.LoggerFactory;\n  * @author Matt Myers - Initial Contribution\n  */\n \n+// public class HaywardDiscoveryService extends AbstractDiscoveryService implements HaywardHandlerListener {\n @NonNullByDefault\n public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1Nzc0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546257743", "bodyText": "Can you fix the compiler warning about null value?", "author": "fwolter", "createdAt": "2020-12-19T16:41:17Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler handler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+        // this.bridge = bridge;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        try {\n+            String xmlResults = handler.getMspConfig();", "originalCommit": "1a3e02205380a2b0ab8d6862592f8ad84944c448", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 5075667f80..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -40,6 +40,7 @@ import org.slf4j.LoggerFactory;\n  * @author Matt Myers - Initial Contribution\n  */\n \n+// public class HaywardDiscoveryService extends AbstractDiscoveryService implements HaywardHandlerListener {\n @NonNullByDefault\n public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NzgyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546257829", "bodyText": "Better create a custom exception for this as Exception catches also all RuntimeExceptions. Please check all try-catch blocks.", "author": "fwolter", "createdAt": "2020-12-19T16:42:29Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler handler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+        // this.bridge = bridge;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        try {\n+            String xmlResults = handler.getMspConfig();\n+            mspConfigDiscovery(xmlResults);\n+        } catch (Exception e) {", "originalCommit": "1a3e02205380a2b0ab8d6862592f8ad84944c448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDA5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546470098", "bodyText": "Without the Exception catch, I get unhandled exception type exception compile errors.  Can you please elaborate on how to handle this?", "author": "matchews", "createdAt": "2020-12-21T01:39:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NzgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxNTI0NA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546915244", "bodyText": "You can create a custom exception by defining a new class extending Exception. This new exception needs to be thrown by getMspConfig() and mspConfigDiscovery().", "author": "fwolter", "createdAt": "2020-12-21T20:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NzgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 5075667f80..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -40,6 +40,7 @@ import org.slf4j.LoggerFactory;\n  * @author Matt Myers - Initial Contribution\n  */\n \n+// public class HaywardDiscoveryService extends AbstractDiscoveryService implements HaywardHandlerListener {\n @NonNullByDefault\n public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1Nzg2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546257868", "bodyText": "Are you logging the stack trace by intention? Please check all.", "author": "fwolter", "createdAt": "2020-12-19T16:42:48Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler handler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+        // this.bridge = bridge;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        try {\n+            String xmlResults = handler.getMspConfig();\n+            mspConfigDiscovery(xmlResults);\n+        } catch (Exception e) {\n+            logger.warn(\"Exception during discovery scan\", e);", "originalCommit": "1a3e02205380a2b0ab8d6862592f8ad84944c448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDE5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546470190", "bodyText": "Can you please elaborate on what the preferred solution is here?  Thx.", "author": "matchews", "createdAt": "2020-12-21T01:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1Nzg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxNTc4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546915780", "bodyText": "This will only log the exception's message, which should be sufficient in most cases.\nlogger.warn(\"Exception during discovery scan: \", e.getMessage());", "author": "fwolter", "createdAt": "2020-12-21T20:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1Nzg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 5075667f80..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -40,6 +40,7 @@ import org.slf4j.LoggerFactory;\n  * @author Matt Myers - Initial Contribution\n  */\n \n+// public class HaywardDiscoveryService extends AbstractDiscoveryService implements HaywardHandlerListener {\n @NonNullByDefault\n public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1ODE0NA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546258144", "bodyText": "You might want to include the exception's message in the details message.", "author": "fwolter", "createdAt": "2020-12-19T16:45:23Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;\n+\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Called by the zone discovery service to let this handler have a reference.\n+     */\n+    public void setHaywardDiscoveryService(HaywardDiscoveryService s) {\n+        this.haywardDiscoveryService = s;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        clearPolling(initializeFuture);\n+        clearPolling(pollTelemetryFuture);\n+        clearPolling(pollAlarmsFuture);\n+        logger.trace(\"Hayward polling cancelled\");\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        initializeFuture = scheduler.schedule(this::scheduledInitialize, 1, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    public void scheduledInitialize() {\n+        config = getConfigAs(HaywardConfig.class);\n+\n+        try {\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+\n+            if (!(login())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to Login to Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(getSiteList())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSP from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+                    config.username);\n+\n+            initPolling(0);\n+            logger.trace(\"Hayward Telemetry polling scheduled\");\n+\n+            if (config.alarmPollTime > 0) {\n+                initAlarmPolling(1);\n+                logger.trace(\"Hayward Alarm polling scheduled\");\n+            } else {\n+                logger.trace(\"Hayward Alarm polling disabled\");\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR,\n+                    \"scheduledInitialize exception\");", "originalCommit": "1a3e02205380a2b0ab8d6862592f8ad84944c448", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 6906f4410e..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -141,7 +141,7 @@ public class HaywardBridgeHandler extends BaseBridgeHandler {\n             }\n \n             updateStatus(ThingStatus.ONLINE);\n-            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+            logger.trace(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.hostname,\n                     config.username);\n \n             initPolling(0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1ODE2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546258166", "bodyText": "The log message could be removed, as the status update is already logged by the framework.\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "author": "fwolter", "createdAt": "2020-12-19T16:45:32Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;\n+\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Called by the zone discovery service to let this handler have a reference.\n+     */\n+    public void setHaywardDiscoveryService(HaywardDiscoveryService s) {\n+        this.haywardDiscoveryService = s;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        clearPolling(initializeFuture);\n+        clearPolling(pollTelemetryFuture);\n+        clearPolling(pollAlarmsFuture);\n+        logger.trace(\"Hayward polling cancelled\");\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        initializeFuture = scheduler.schedule(this::scheduledInitialize, 1, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    public void scheduledInitialize() {\n+        config = getConfigAs(HaywardConfig.class);\n+\n+        try {\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+\n+            if (!(login())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to Login to Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(getSiteList())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSP from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+                    config.username);\n+\n+            initPolling(0);\n+            logger.trace(\"Hayward Telemetry polling scheduled\");\n+\n+            if (config.alarmPollTime > 0) {\n+                initAlarmPolling(1);\n+                logger.trace(\"Hayward Alarm polling scheduled\");\n+            } else {\n+                logger.trace(\"Hayward Alarm polling disabled\");\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR,\n+                    \"scheduledInitialize exception\");\n+            logger.debug(\"Hayward Connection thing: Unable to open connection to Hayward Server: {} Username: {}\",\n+                    config.endpointUrl, config.username, e);", "originalCommit": "1a3e02205380a2b0ab8d6862592f8ad84944c448", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 6906f4410e..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -141,7 +141,7 @@ public class HaywardBridgeHandler extends BaseBridgeHandler {\n             }\n \n             updateStatus(ThingStatus.ONLINE);\n-            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+            logger.trace(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.hostname,\n                     config.username);\n \n             initPolling(0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1ODM5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r546258395", "bodyText": "getBridge() returns null if the user configured the Thing via textual configuration and forgot to specify the bridge. You could set the Thing OFFLINE with an appropriate error message in this case. Please check all.", "author": "fwolter", "createdAt": "2020-12-19T16:47:36Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardChlorinatorHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingProperties;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The Chlorinator Handler\n+ *\n+ * @author Matt Myers - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class HaywardChlorinatorHandler extends HaywardThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardChlorinatorHandler.class);\n+    public String chlorTimedPercent = \"\";\n+    public String chlorState = \"\";\n+\n+    HaywardThingProperties prop = getConfig().as(HaywardThingProperties.class);\n+\n+    public HaywardChlorinatorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void getTelemetry(String xmlResponse) throws Exception {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> data = new ArrayList<>();\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();", "originalCommit": "1a3e02205380a2b0ab8d6862592f8ad84944c448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NzE4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549877187", "bodyText": "Please do a null check instead of suppressing the compiler warning. Please check all.", "author": "fwolter", "createdAt": "2020-12-29T22:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1ODM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardChlorinatorHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardChlorinatorHandler.java\nindex e965cec8ed..f9e5438459 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardChlorinatorHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardChlorinatorHandler.java\n\n@@ -45,50 +45,50 @@ public class HaywardChlorinatorHandler extends HaywardThingHandler {\n \n     @Override\n     public void getTelemetry(String xmlResponse) throws Exception {\n-        List<String> systemIDs = new ArrayList<>();\n         List<String> data = new ArrayList<>();\n+        List<String> systemIDs = new ArrayList<>();\n \n         @SuppressWarnings(\"null\")\n         HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n         if (bridgehandler != null) {\n             systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/@systemId\", xmlResponse);\n-            String thingSystemID = getThing().getUID().getId();\n+            String thingSystemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n             for (int i = 0; i < systemIDs.size(); i++) {\n                 if (systemIDs.get(i).equals(thingSystemID)) {\n                     // Operating Mode\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@operatingMode\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(i));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(0));\n \n                     // Timed Percent\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@Timed-Percent\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_TIMEDPERCENT, data.get(i));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_TIMEDPERCENT, data.get(0));\n                     this.chlorTimedPercent = data.get(0);\n \n                     // scMode\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@scMode\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_SCMODE, data.get(i));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_SCMODE, data.get(0));\n \n                     // Error\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@chlrError\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_ERROR, data.get(i));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_ERROR, data.get(0));\n \n                     // Alert\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@chlrAlert\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_ALERT, data.get(i));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_ALERT, data.get(0));\n \n                     // Average Salt Level\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@avgSaltLevel\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_AVGSALTLEVEL, data.get(i));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_AVGSALTLEVEL, data.get(0));\n \n                     // Instant Salt Level\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@instantSaltLevel\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_INSTANTSALTLEVEL, data.get(i));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_INSTANTSALTLEVEL, data.get(0));\n \n                     // Status\n                     data = bridgehandler.evaluateXPath(\"//Chlorinator/@status\", xmlResponse);\n-                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_STATUS, data.get(i));\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_STATUS, data.get(0));\n \n-                    if (data.get(i).equals(\"0\")) {\n+                    if (data.get(0).equals(\"0\")) {\n                         updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_ENABLE, \"0\");\n                         // chlorState is used to set the chlorinator cfgState in the timedPercent command\n                         this.chlorState = \"2\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg2Mzk1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549863957", "bodyText": "Please put all fields at the top of the class.", "author": "fwolter", "createdAt": "2020-12-29T21:59:59Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardHandlerFactory.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBackyardHandler;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBowHandler;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardChlorinatorHandler;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardColorLogicHandler;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardFilterHandler;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardHeaterHandler;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardRelayHandler;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardSensorHandler;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardVirtualHeaterHandler;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link HaywardHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ */\n+\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.haywardomnilogic\")\n+@NonNullByDefault\n+public class HaywardHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(\n+            Stream.concat(BRIDGE_THING_TYPES_UIDS.stream(), THING_TYPES_UIDS.stream()).collect(Collectors.toSet()));\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    private final HttpClient httpClient;", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardHandlerFactory.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardHandlerFactory.java\nindex 43a52ec03c..ab2213aa5b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardHandlerFactory.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardHandlerFactory.java\n\n@@ -46,6 +46,8 @@ import org.osgi.service.component.annotations.Reference;\n /**\n  * The {@link HaywardHandlerFactory} is responsible for creating things and thing\n  * handlers.\n+ *\n+ * @author Matt Myers - Initial Contribution\n  */\n \n @Component(service = ThingHandlerFactory.class, configurationPid = \"binding.haywardomnilogic\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MzY5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549873692", "bodyText": "You could make this method abstract to avoid confusion why there's an empty method. By declaring it abstract everybody knows that it's supposed to be overriden.", "author": "fwolter", "createdAt": "2020-12-29T22:26:17Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+\n+/**\n+ * The {@link HaywarThingHandler} is a subclass of the BaseThingHandler and a Super\n+ * Class to each Hayward Thing Handler\n+ */\n+\n+@NonNullByDefault\n+public class HaywardThingHandler extends BaseThingHandler {\n+\n+    public HaywardThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public void getTelemetry(String xmlResponse) throws HaywardException {\n+    }", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\nindex c1a5a31949..ebc876b7e4 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n\n@@ -13,15 +13,11 @@\n \n package org.openhab.binding.haywardomnilogic.internal;\n \n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.eclipse.jdt.annotation.NonNull;\n import org.openhab.core.library.types.DecimalType;\n import org.openhab.core.library.types.OnOffType;\n import org.openhab.core.library.types.QuantityType;\n import org.openhab.core.library.types.StringType;\n-import org.openhab.core.library.unit.ImperialUnits;\n-import org.openhab.core.library.unit.SIUnits;\n-import org.openhab.core.library.unit.Units;\n import org.openhab.core.thing.Channel;\n import org.openhab.core.thing.ChannelUID;\n import org.openhab.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3Mzk1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549873951", "bodyText": "You could store a local reference (variable) to getBridge() and do a null check on that to get rid of the compiler warning.", "author": "fwolter", "createdAt": "2020-12-29T22:27:26Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+\n+/**\n+ * The {@link HaywarThingHandler} is a subclass of the BaseThingHandler and a Super\n+ * Class to each Hayward Thing Handler\n+ */\n+\n+@NonNullByDefault\n+public class HaywardThingHandler extends BaseThingHandler {\n+\n+    public HaywardThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public void getTelemetry(String xmlResponse) throws HaywardException {\n+    }\n+\n+    public State toState(String type, String channelID, String value) throws NumberFormatException {\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\nindex c1a5a31949..ebc876b7e4 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n\n@@ -13,15 +13,11 @@\n \n package org.openhab.binding.haywardomnilogic.internal;\n \n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.eclipse.jdt.annotation.NonNull;\n import org.openhab.core.library.types.DecimalType;\n import org.openhab.core.library.types.OnOffType;\n import org.openhab.core.library.types.QuantityType;\n import org.openhab.core.library.types.StringType;\n-import org.openhab.core.library.unit.ImperialUnits;\n-import org.openhab.core.library.unit.SIUnits;\n-import org.openhab.core.library.unit.Units;\n import org.openhab.core.thing.Channel;\n import org.openhab.core.thing.ChannelUID;\n import org.openhab.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NDEyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549874121", "bodyText": "You could do a null check on bridgehandler to get rid of the compiler warning.", "author": "fwolter", "createdAt": "2020-12-29T22:28:12Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+\n+/**\n+ * The {@link HaywarThingHandler} is a subclass of the BaseThingHandler and a Super\n+ * Class to each Hayward Thing Handler\n+ */\n+\n+@NonNullByDefault\n+public class HaywardThingHandler extends BaseThingHandler {\n+\n+    public HaywardThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public void getTelemetry(String xmlResponse) throws HaywardException {\n+    }\n+\n+    public State toState(String type, String channelID, String value) throws NumberFormatException {\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+\n+        switch (type) {\n+            case \"Number\":\n+                return new DecimalType(value);\n+            case \"Switch\":\n+                return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+            case \"system.power\":\n+                return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+            case \"Number:Dimensionless\":\n+                switch (channelID) {\n+                    case \"chlorTimedPercent\":\n+                    case \"filterSpeed\":\n+                    case \"pumpSpeed\":\n+                        return new QuantityType<>(Integer.parseInt(value), Units.PERCENT);\n+                    case \"chlorAvgSaltLevel\":\n+                    case \"chlorInstantSaltLevel\":\n+                        return new QuantityType<>(Integer.parseInt(value), Units.PARTS_PER_MILLION);\n+                }\n+            case \"Number:Temperature\":\n+                if (bridgehandler.account.units.equals(\"Standard\")) {", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\nindex c1a5a31949..ebc876b7e4 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n\n@@ -13,15 +13,11 @@\n \n package org.openhab.binding.haywardomnilogic.internal;\n \n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.eclipse.jdt.annotation.NonNull;\n import org.openhab.core.library.types.DecimalType;\n import org.openhab.core.library.types.OnOffType;\n import org.openhab.core.library.types.QuantityType;\n import org.openhab.core.library.types.StringType;\n-import org.openhab.core.library.unit.ImperialUnits;\n-import org.openhab.core.library.unit.SIUnits;\n-import org.openhab.core.library.unit.Units;\n import org.openhab.core.thing.Channel;\n import org.openhab.core.thing.ChannelUID;\n import org.openhab.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NDQwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549874400", "bodyText": "You could store bridgeHandler to a local variable and do the null check on that. Then, you can remove the null suppression on the class. Same for below.", "author": "fwolter", "createdAt": "2020-12-29T22:29:30Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,418 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ */\n+\n+@NonNullByDefault\n+@SuppressWarnings(\"null\")\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler bridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        try {\n+            if (bridgehandler != null) {", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 4a3f5510e6..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -22,7 +22,6 @@ import java.util.Map;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n-import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n import org.openhab.core.config.discovery.AbstractDiscoveryService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NDYwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549874608", "bodyText": "Can these messages be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "fwolter", "createdAt": "2020-12-29T22:30:31Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;\n+\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Called by the zone discovery service to let this handler have a reference.\n+     */\n+    public void setHaywardDiscoveryService(HaywardDiscoveryService s) {\n+        this.haywardDiscoveryService = s;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        clearPolling(initializeFuture);\n+        clearPolling(pollTelemetryFuture);\n+        clearPolling(pollAlarmsFuture);\n+        logger.trace(\"Hayward polling cancelled\");\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        initializeFuture = scheduler.schedule(this::scheduledInitialize, 1, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    public void scheduledInitialize() {\n+        config = getConfigAs(HaywardConfig.class);\n+\n+        try {\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+\n+            if (!(login())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to Login to Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(getSiteList())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSP from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+                    config.username);\n+\n+            initPolling(0);\n+            logger.trace(\"Hayward Telemetry polling scheduled\");\n+\n+            if (config.alarmPollTime > 0) {\n+                initAlarmPolling(1);\n+                logger.trace(\"Hayward Alarm polling scheduled\");\n+            } else {\n+                logger.trace(\"Hayward Alarm polling disabled\");\n+            }", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 1926132995..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -18,7 +18,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NDkzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549874931", "bodyText": "If you make login() and getSiteList() throw HaywardException instead of Exception, you could catch HaywardException here. Catching only Exception would catch also all RuntimeExceptions.\nPlease check all.", "author": "fwolter", "createdAt": "2020-12-29T22:32:14Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;\n+\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Called by the zone discovery service to let this handler have a reference.\n+     */\n+    public void setHaywardDiscoveryService(HaywardDiscoveryService s) {\n+        this.haywardDiscoveryService = s;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        clearPolling(initializeFuture);\n+        clearPolling(pollTelemetryFuture);\n+        clearPolling(pollAlarmsFuture);\n+        logger.trace(\"Hayward polling cancelled\");\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        initializeFuture = scheduler.schedule(this::scheduledInitialize, 1, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    public void scheduledInitialize() {\n+        config = getConfigAs(HaywardConfig.class);\n+\n+        try {\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+\n+            if (!(login())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to Login to Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(getSiteList())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSP from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+                    config.username);\n+\n+            initPolling(0);\n+            logger.trace(\"Hayward Telemetry polling scheduled\");\n+\n+            if (config.alarmPollTime > 0) {\n+                initAlarmPolling(1);\n+                logger.trace(\"Hayward Alarm polling scheduled\");\n+            } else {\n+                logger.trace(\"Hayward Alarm polling disabled\");\n+            }\n+        } catch (Exception e) {", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 1926132995..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -18,7 +18,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NTU0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549875549", "bodyText": "If you swap these, you avoid any null error.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (properties.get(HaywardBindingConstants.PROPERTY_TYPE).equals(\"BACKYARD\")) {\n          \n          \n            \n                        if (\"BACKYARD\".equals(properties.get(HaywardBindingConstants.PROPERTY_TYPE))) {", "author": "fwolter", "createdAt": "2020-12-29T22:35:14Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;\n+\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Called by the zone discovery service to let this handler have a reference.\n+     */\n+    public void setHaywardDiscoveryService(HaywardDiscoveryService s) {\n+        this.haywardDiscoveryService = s;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        clearPolling(initializeFuture);\n+        clearPolling(pollTelemetryFuture);\n+        clearPolling(pollAlarmsFuture);\n+        logger.trace(\"Hayward polling cancelled\");\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        initializeFuture = scheduler.schedule(this::scheduledInitialize, 1, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    public void scheduledInitialize() {\n+        config = getConfigAs(HaywardConfig.class);\n+\n+        try {\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+\n+            if (!(login())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to Login to Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(getSiteList())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSP from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+                    config.username);\n+\n+            initPolling(0);\n+            logger.trace(\"Hayward Telemetry polling scheduled\");\n+\n+            if (config.alarmPollTime > 0) {\n+                initAlarmPolling(1);\n+                logger.trace(\"Hayward Alarm polling scheduled\");\n+            } else {\n+                logger.trace(\"Hayward Alarm polling disabled\");\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR,\n+                    \"scheduledInitialize exception: \" + e.getMessage());\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+            commFailureCount = 50;\n+            initPolling(60);\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean login() throws Exception {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Login to Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request>\" + \"<Name>Login</Name><Parameters>\"\n+                + \"<Parameter name=\\\"UserName\\\" dataType=\\\"String\\\">\" + config.username + \"</Parameter>\"\n+                + \"<Parameter name=\\\"Password\\\" dataType=\\\"String\\\">\" + config.password + \"</Parameter>\"\n+                + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: Login XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.token = evaluateXPath(\"/Response/Parameters//Parameter[@name='Token']/text()\", xmlResponse).get(0);\n+        account.userID = evaluateXPath(\"/Response/Parameters//Parameter[@name='UserID']/text()\", xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized boolean getApiDef() throws Exception {\n+        String xmlResponse;\n+\n+        // *****getConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetAPIDef</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID + \"</Parameter>;\"\n+                + \"<Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0.4</Parameter >\\r\\n\"\n+                + \"<Parameter name=\\\"Language\\\" dataType=\\\"string\\\">en</Parameter >\\r\\n\" + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: Login XML response was null\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getSiteList() throws Exception {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Get MSP\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetSiteList</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token\n+                + \"</Parameter><Parameter name=\\\"UserID\\\" dataType=\\\"String\\\">\" + account.userID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response was null\");\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.mspSystemID = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='MspSystemID']/text()\",\n+                xmlResponse).get(0);\n+        account.backyardName = evaluateXPath(\n+                \"/Response/Parameters/Parameter/Item//Property[@name='BackyardName']/text()\", xmlResponse).get(0);\n+        account.address = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='Address']/text()\",\n+                xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized String getMspConfig() throws HaywardException {\n+        // *****getMspConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetMspConfigFile</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter><Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0</Parameter>\\r\\n\"\n+                + \"</Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        // Debug: Inject xml file for testing\n+        // String path =\n+        // \"C:/Users/Controls/openhab-2-5-x/git/openhab-addons/bundles/org.openhab.binding.haywardomnilogic/getConfig.xml\";\n+        // xmlResponse = new String(Files.readAllBytes(Paths.get(path)));\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfig XML response was null\");\n+            return \"Fail\";\n+        }\n+\n+        if (evaluateXPath(\"//Backyard/Name/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfiguration XML response: {}\", xmlResponse);\n+            return \"Fail\";\n+        }\n+        return xmlResponse;\n+    }\n+\n+    public synchronized boolean getTelemetryData() throws HaywardException {\n+        // *****getTelemetry from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetTelemetryData</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response was null\");\n+            return false;\n+        }\n+\n+        if (!evaluateXPath(\"/Response/Parameters//Parameter[@name='StatusMessage']/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        for (Thing thing : getThing().getThings()) {\n+            if (thing.getHandler() instanceof HaywardThingHandler) {\n+                HaywardThingHandler handler = (HaywardThingHandler) thing.getHandler();\n+                if (handler != null) {\n+                    handler.getTelemetry(xmlResponse);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getAlarmList() throws Exception {\n+        for (Thing thing : getThing().getThings()) {\n+            Map<String, String> properties = thing.getProperties();\n+            if (properties.get(HaywardBindingConstants.PROPERTY_TYPE).equals(\"BACKYARD\")) {", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 1926132995..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -18,7 +18,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NTczMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549875731", "bodyText": "You could add a null suppression to this class to prevent this null warning.", "author": "fwolter", "createdAt": "2020-12-29T22:35:57Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;\n+\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Called by the zone discovery service to let this handler have a reference.\n+     */\n+    public void setHaywardDiscoveryService(HaywardDiscoveryService s) {\n+        this.haywardDiscoveryService = s;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        clearPolling(initializeFuture);\n+        clearPolling(pollTelemetryFuture);\n+        clearPolling(pollAlarmsFuture);\n+        logger.trace(\"Hayward polling cancelled\");\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        initializeFuture = scheduler.schedule(this::scheduledInitialize, 1, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    public void scheduledInitialize() {\n+        config = getConfigAs(HaywardConfig.class);\n+\n+        try {\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+\n+            if (!(login())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to Login to Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(getSiteList())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSP from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+                    config.username);\n+\n+            initPolling(0);\n+            logger.trace(\"Hayward Telemetry polling scheduled\");\n+\n+            if (config.alarmPollTime > 0) {\n+                initAlarmPolling(1);\n+                logger.trace(\"Hayward Alarm polling scheduled\");\n+            } else {\n+                logger.trace(\"Hayward Alarm polling disabled\");\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR,\n+                    \"scheduledInitialize exception: \" + e.getMessage());\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+            commFailureCount = 50;\n+            initPolling(60);\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean login() throws Exception {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Login to Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request>\" + \"<Name>Login</Name><Parameters>\"\n+                + \"<Parameter name=\\\"UserName\\\" dataType=\\\"String\\\">\" + config.username + \"</Parameter>\"\n+                + \"<Parameter name=\\\"Password\\\" dataType=\\\"String\\\">\" + config.password + \"</Parameter>\"\n+                + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: Login XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.token = evaluateXPath(\"/Response/Parameters//Parameter[@name='Token']/text()\", xmlResponse).get(0);\n+        account.userID = evaluateXPath(\"/Response/Parameters//Parameter[@name='UserID']/text()\", xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized boolean getApiDef() throws Exception {\n+        String xmlResponse;\n+\n+        // *****getConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetAPIDef</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID + \"</Parameter>;\"\n+                + \"<Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0.4</Parameter >\\r\\n\"\n+                + \"<Parameter name=\\\"Language\\\" dataType=\\\"string\\\">en</Parameter >\\r\\n\" + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: Login XML response was null\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getSiteList() throws Exception {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Get MSP\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetSiteList</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token\n+                + \"</Parameter><Parameter name=\\\"UserID\\\" dataType=\\\"String\\\">\" + account.userID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response was null\");\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.mspSystemID = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='MspSystemID']/text()\",\n+                xmlResponse).get(0);\n+        account.backyardName = evaluateXPath(\n+                \"/Response/Parameters/Parameter/Item//Property[@name='BackyardName']/text()\", xmlResponse).get(0);\n+        account.address = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='Address']/text()\",\n+                xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized String getMspConfig() throws HaywardException {\n+        // *****getMspConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetMspConfigFile</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter><Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0</Parameter>\\r\\n\"\n+                + \"</Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        // Debug: Inject xml file for testing\n+        // String path =\n+        // \"C:/Users/Controls/openhab-2-5-x/git/openhab-addons/bundles/org.openhab.binding.haywardomnilogic/getConfig.xml\";\n+        // xmlResponse = new String(Files.readAllBytes(Paths.get(path)));\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfig XML response was null\");\n+            return \"Fail\";\n+        }\n+\n+        if (evaluateXPath(\"//Backyard/Name/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfiguration XML response: {}\", xmlResponse);\n+            return \"Fail\";\n+        }\n+        return xmlResponse;\n+    }\n+\n+    public synchronized boolean getTelemetryData() throws HaywardException {\n+        // *****getTelemetry from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetTelemetryData</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response was null\");\n+            return false;\n+        }\n+\n+        if (!evaluateXPath(\"/Response/Parameters//Parameter[@name='StatusMessage']/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        for (Thing thing : getThing().getThings()) {\n+            if (thing.getHandler() instanceof HaywardThingHandler) {\n+                HaywardThingHandler handler = (HaywardThingHandler) thing.getHandler();\n+                if (handler != null) {\n+                    handler.getTelemetry(xmlResponse);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getAlarmList() throws Exception {\n+        for (Thing thing : getThing().getThings()) {\n+            Map<String, String> properties = thing.getProperties();\n+            if (properties.get(HaywardBindingConstants.PROPERTY_TYPE).equals(\"BACKYARD\")) {\n+                HaywardBackyardHandler handler = (HaywardBackyardHandler) thing.getHandler();\n+                if (handler != null) {\n+                    String systemID = properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+                    if (systemID != null) {", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 1926132995..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -18,7 +18,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NjAyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549876026", "bodyText": "Are you sure these properties are always set? What happens if the user adds the Thing manually?", "author": "fwolter", "createdAt": "2020-12-29T22:37:17Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;\n+\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Called by the zone discovery service to let this handler have a reference.\n+     */\n+    public void setHaywardDiscoveryService(HaywardDiscoveryService s) {\n+        this.haywardDiscoveryService = s;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        clearPolling(initializeFuture);\n+        clearPolling(pollTelemetryFuture);\n+        clearPolling(pollAlarmsFuture);\n+        logger.trace(\"Hayward polling cancelled\");\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        initializeFuture = scheduler.schedule(this::scheduledInitialize, 1, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    public void scheduledInitialize() {\n+        config = getConfigAs(HaywardConfig.class);\n+\n+        try {\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+\n+            if (!(login())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to Login to Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(getSiteList())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSP from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+                    config.username);\n+\n+            initPolling(0);\n+            logger.trace(\"Hayward Telemetry polling scheduled\");\n+\n+            if (config.alarmPollTime > 0) {\n+                initAlarmPolling(1);\n+                logger.trace(\"Hayward Alarm polling scheduled\");\n+            } else {\n+                logger.trace(\"Hayward Alarm polling disabled\");\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR,\n+                    \"scheduledInitialize exception: \" + e.getMessage());\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+            commFailureCount = 50;\n+            initPolling(60);\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean login() throws Exception {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Login to Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request>\" + \"<Name>Login</Name><Parameters>\"\n+                + \"<Parameter name=\\\"UserName\\\" dataType=\\\"String\\\">\" + config.username + \"</Parameter>\"\n+                + \"<Parameter name=\\\"Password\\\" dataType=\\\"String\\\">\" + config.password + \"</Parameter>\"\n+                + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: Login XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.token = evaluateXPath(\"/Response/Parameters//Parameter[@name='Token']/text()\", xmlResponse).get(0);\n+        account.userID = evaluateXPath(\"/Response/Parameters//Parameter[@name='UserID']/text()\", xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized boolean getApiDef() throws Exception {\n+        String xmlResponse;\n+\n+        // *****getConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetAPIDef</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID + \"</Parameter>;\"\n+                + \"<Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0.4</Parameter >\\r\\n\"\n+                + \"<Parameter name=\\\"Language\\\" dataType=\\\"string\\\">en</Parameter >\\r\\n\" + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: Login XML response was null\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getSiteList() throws Exception {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Get MSP\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetSiteList</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token\n+                + \"</Parameter><Parameter name=\\\"UserID\\\" dataType=\\\"String\\\">\" + account.userID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response was null\");\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.mspSystemID = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='MspSystemID']/text()\",\n+                xmlResponse).get(0);\n+        account.backyardName = evaluateXPath(\n+                \"/Response/Parameters/Parameter/Item//Property[@name='BackyardName']/text()\", xmlResponse).get(0);\n+        account.address = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='Address']/text()\",\n+                xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized String getMspConfig() throws HaywardException {\n+        // *****getMspConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetMspConfigFile</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter><Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0</Parameter>\\r\\n\"\n+                + \"</Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        // Debug: Inject xml file for testing\n+        // String path =\n+        // \"C:/Users/Controls/openhab-2-5-x/git/openhab-addons/bundles/org.openhab.binding.haywardomnilogic/getConfig.xml\";\n+        // xmlResponse = new String(Files.readAllBytes(Paths.get(path)));\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfig XML response was null\");\n+            return \"Fail\";\n+        }\n+\n+        if (evaluateXPath(\"//Backyard/Name/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfiguration XML response: {}\", xmlResponse);\n+            return \"Fail\";\n+        }\n+        return xmlResponse;\n+    }\n+\n+    public synchronized boolean getTelemetryData() throws HaywardException {\n+        // *****getTelemetry from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetTelemetryData</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response was null\");\n+            return false;\n+        }\n+\n+        if (!evaluateXPath(\"/Response/Parameters//Parameter[@name='StatusMessage']/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        for (Thing thing : getThing().getThings()) {\n+            if (thing.getHandler() instanceof HaywardThingHandler) {\n+                HaywardThingHandler handler = (HaywardThingHandler) thing.getHandler();\n+                if (handler != null) {\n+                    handler.getTelemetry(xmlResponse);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getAlarmList() throws Exception {\n+        for (Thing thing : getThing().getThings()) {\n+            Map<String, String> properties = thing.getProperties();\n+            if (properties.get(HaywardBindingConstants.PROPERTY_TYPE).equals(\"BACKYARD\")) {\n+                HaywardBackyardHandler handler = (HaywardBackyardHandler) thing.getHandler();\n+                if (handler != null) {\n+                    String systemID = properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+                    if (systemID != null) {\n+                        return handler.getAlarmList(systemID);\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void initPolling(int initalDelay) {\n+        pollTelemetryFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                if (commFailureCount >= 5) {\n+                    commFailureCount = 0;\n+                    clearPolling(pollTelemetryFuture);\n+                    clearPolling(pollAlarmsFuture);\n+                    initialize();\n+                    return;\n+                }\n+                if (!(getTelemetryData())) {\n+                    commFailureCount++;\n+                    return;\n+                }\n+            } catch (Exception e) {\n+                logger.debug(\"Hayward Connection thing: Exception during poll: {}\", e.getMessage());\n+            }\n+        }, initalDelay, config.telemetryPollTime, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    private synchronized void initAlarmPolling(int initalDelay) {\n+        pollAlarmsFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                getAlarmList();\n+            } catch (Exception e) {\n+                logger.debug(\"Hayward Connection thing: Exception during poll: {}\", e.getMessage());\n+            }\n+        }, initalDelay, config.alarmPollTime, TimeUnit.SECONDS);\n+    }\n+\n+    private void clearPolling(@Nullable ScheduledFuture<?> pollJob) {\n+        if (pollJob != null) {\n+            pollJob.cancel(false);\n+        }\n+    }\n+\n+    @Nullable\n+    Thing getThingForType(HaywardTypeToRequest type, int num) {\n+        for (Thing thing : getThing().getThings()) {\n+            Map<String, String> properties = thing.getProperties();\n+            if (properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID).equals(Integer.toString(num))) {\n+                if (properties.get(HaywardBindingConstants.PROPERTY_TYPE).equals(type.toString())) {", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 1926132995..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -18,7 +18,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3Njc5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549876796", "bodyText": "This exception is thrown when OH is shut-down. That means the current operation should be finished as fast as possible and no further operations should be done. You can achieve this by not catching the exception here but throw the InterruptedException and catch it at the highest level you can.", "author": "fwolter", "createdAt": "2020-12-29T22:41:27Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;\n+\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Called by the zone discovery service to let this handler have a reference.\n+     */\n+    public void setHaywardDiscoveryService(HaywardDiscoveryService s) {\n+        this.haywardDiscoveryService = s;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        clearPolling(initializeFuture);\n+        clearPolling(pollTelemetryFuture);\n+        clearPolling(pollAlarmsFuture);\n+        logger.trace(\"Hayward polling cancelled\");\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        initializeFuture = scheduler.schedule(this::scheduledInitialize, 1, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    public void scheduledInitialize() {\n+        config = getConfigAs(HaywardConfig.class);\n+\n+        try {\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+\n+            if (!(login())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to Login to Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(getSiteList())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSP from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+                    config.username);\n+\n+            initPolling(0);\n+            logger.trace(\"Hayward Telemetry polling scheduled\");\n+\n+            if (config.alarmPollTime > 0) {\n+                initAlarmPolling(1);\n+                logger.trace(\"Hayward Alarm polling scheduled\");\n+            } else {\n+                logger.trace(\"Hayward Alarm polling disabled\");\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR,\n+                    \"scheduledInitialize exception: \" + e.getMessage());\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+            commFailureCount = 50;\n+            initPolling(60);\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean login() throws Exception {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Login to Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request>\" + \"<Name>Login</Name><Parameters>\"\n+                + \"<Parameter name=\\\"UserName\\\" dataType=\\\"String\\\">\" + config.username + \"</Parameter>\"\n+                + \"<Parameter name=\\\"Password\\\" dataType=\\\"String\\\">\" + config.password + \"</Parameter>\"\n+                + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: Login XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.token = evaluateXPath(\"/Response/Parameters//Parameter[@name='Token']/text()\", xmlResponse).get(0);\n+        account.userID = evaluateXPath(\"/Response/Parameters//Parameter[@name='UserID']/text()\", xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized boolean getApiDef() throws Exception {\n+        String xmlResponse;\n+\n+        // *****getConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetAPIDef</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID + \"</Parameter>;\"\n+                + \"<Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0.4</Parameter >\\r\\n\"\n+                + \"<Parameter name=\\\"Language\\\" dataType=\\\"string\\\">en</Parameter >\\r\\n\" + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: Login XML response was null\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getSiteList() throws Exception {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Get MSP\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetSiteList</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token\n+                + \"</Parameter><Parameter name=\\\"UserID\\\" dataType=\\\"String\\\">\" + account.userID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response was null\");\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.mspSystemID = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='MspSystemID']/text()\",\n+                xmlResponse).get(0);\n+        account.backyardName = evaluateXPath(\n+                \"/Response/Parameters/Parameter/Item//Property[@name='BackyardName']/text()\", xmlResponse).get(0);\n+        account.address = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='Address']/text()\",\n+                xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized String getMspConfig() throws HaywardException {\n+        // *****getMspConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetMspConfigFile</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter><Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0</Parameter>\\r\\n\"\n+                + \"</Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        // Debug: Inject xml file for testing\n+        // String path =\n+        // \"C:/Users/Controls/openhab-2-5-x/git/openhab-addons/bundles/org.openhab.binding.haywardomnilogic/getConfig.xml\";\n+        // xmlResponse = new String(Files.readAllBytes(Paths.get(path)));\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfig XML response was null\");\n+            return \"Fail\";\n+        }\n+\n+        if (evaluateXPath(\"//Backyard/Name/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfiguration XML response: {}\", xmlResponse);\n+            return \"Fail\";\n+        }\n+        return xmlResponse;\n+    }\n+\n+    public synchronized boolean getTelemetryData() throws HaywardException {\n+        // *****getTelemetry from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetTelemetryData</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response was null\");\n+            return false;\n+        }\n+\n+        if (!evaluateXPath(\"/Response/Parameters//Parameter[@name='StatusMessage']/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        for (Thing thing : getThing().getThings()) {\n+            if (thing.getHandler() instanceof HaywardThingHandler) {\n+                HaywardThingHandler handler = (HaywardThingHandler) thing.getHandler();\n+                if (handler != null) {\n+                    handler.getTelemetry(xmlResponse);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getAlarmList() throws Exception {\n+        for (Thing thing : getThing().getThings()) {\n+            Map<String, String> properties = thing.getProperties();\n+            if (properties.get(HaywardBindingConstants.PROPERTY_TYPE).equals(\"BACKYARD\")) {\n+                HaywardBackyardHandler handler = (HaywardBackyardHandler) thing.getHandler();\n+                if (handler != null) {\n+                    String systemID = properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+                    if (systemID != null) {\n+                        return handler.getAlarmList(systemID);\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void initPolling(int initalDelay) {\n+        pollTelemetryFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                if (commFailureCount >= 5) {\n+                    commFailureCount = 0;\n+                    clearPolling(pollTelemetryFuture);\n+                    clearPolling(pollAlarmsFuture);\n+                    initialize();\n+                    return;\n+                }\n+                if (!(getTelemetryData())) {\n+                    commFailureCount++;\n+                    return;\n+                }\n+            } catch (Exception e) {\n+                logger.debug(\"Hayward Connection thing: Exception during poll: {}\", e.getMessage());\n+            }\n+        }, initalDelay, config.telemetryPollTime, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    private synchronized void initAlarmPolling(int initalDelay) {\n+        pollAlarmsFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                getAlarmList();\n+            } catch (Exception e) {\n+                logger.debug(\"Hayward Connection thing: Exception during poll: {}\", e.getMessage());\n+            }\n+        }, initalDelay, config.alarmPollTime, TimeUnit.SECONDS);\n+    }\n+\n+    private void clearPolling(@Nullable ScheduledFuture<?> pollJob) {\n+        if (pollJob != null) {\n+            pollJob.cancel(false);\n+        }\n+    }\n+\n+    @Nullable\n+    Thing getThingForType(HaywardTypeToRequest type, int num) {\n+        for (Thing thing : getThing().getThings()) {\n+            Map<String, String> properties = thing.getProperties();\n+            if (properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID).equals(Integer.toString(num))) {\n+                if (properties.get(HaywardBindingConstants.PROPERTY_TYPE).equals(type.toString())) {\n+                    return thing;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public List<String> evaluateXPath(String xpathExp, String xmlResponse) throws HaywardException {\n+        List<String> values = new ArrayList<>();\n+        try {\n+            InputSource inputXML = new InputSource(new StringReader(xmlResponse));\n+            XPath xPath = XPathFactory.newInstance().newXPath();\n+            NodeList nodes = (NodeList) xPath.evaluate(xpathExp, inputXML, XPathConstants.NODESET);\n+\n+            for (int i = 0; i < nodes.getLength(); i++) {\n+                values.add(nodes.item(i).getNodeValue());\n+            }\n+        } catch (XPathExpressionException e) {\n+            logger.warn(\"XPathExpression exception: {}\", e.getMessage());\n+        }\n+        return values;\n+    }\n+\n+    private Request sendRequestBuilder(String url, HttpMethod method) {\n+        return this.httpClient.newRequest(url).agent(\"NextGenForIPhone/16565 CFNetwork/887 Darwin/17.0.0\")\n+                .method(method).header(HttpHeader.ACCEPT_LANGUAGE, \"en-us\").header(HttpHeader.ACCEPT, \"*/*\")\n+                .header(HttpHeader.ACCEPT_ENCODING, \"gzip, deflate\").version(HttpVersion.HTTP_1_1)\n+                .header(HttpHeader.CONNECTION, \"keep-alive\").header(HttpHeader.HOST, \"www.haywardomnilogic.com:80\")\n+                .timeout(10, TimeUnit.SECONDS);\n+    }\n+\n+    public synchronized String httpXmlResponse(String urlParameters) throws HaywardException {\n+        String urlParameterslength = Integer.toString(urlParameters.length());\n+        String statusMessage;\n+\n+        try {\n+            ContentResponse httpResponse = sendRequestBuilder(config.endpointUrl, HttpMethod.POST)\n+                    .content(new StringContentProvider(urlParameters), \"text/xml; charset=utf-8\")\n+                    .header(HttpHeader.CONTENT_LENGTH, urlParameterslength).send();\n+\n+            int status = httpResponse.getStatus();\n+            String xmlResponse = httpResponse.getContentAsString();\n+\n+            List<String> statusMessages = evaluateXPath(\"/Response/Parameters//Parameter[@name='StatusMessage']/text()\",\n+                    xmlResponse);\n+            if (!(statusMessages.isEmpty())) {\n+                statusMessage = statusMessages.get(0);\n+            } else {\n+                statusMessage = httpResponse.getReason();\n+            }\n+\n+            if (status == 200) {\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"Hayward Connection thing:  {} Hayward http command: {}\", getCallingMethod(),\n+                            urlParameters);\n+                    logger.trace(\"Hayward Connection thing:  {} Hayward http response: {} {}\", getCallingMethod(),\n+                            statusMessage, xmlResponse);\n+                }\n+                return xmlResponse;\n+            } else {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Hayward Connection thing:  {} Hayward http command: {}\", getCallingMethod(),\n+                            urlParameters);\n+                    logger.debug(\"Hayward Connection thing:  {} Hayward http response: {}\", getCallingMethod(), status);\n+                }\n+                return \"\";\n+            }\n+        } catch (ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Unable to resolve host.  Check Hayward hostname and your internet connection.\");\n+            return \"\";\n+        } catch (TimeoutException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Connection Timeout.  Check Hayward hostname and your internet connection.\");\n+            return \"\";\n+        } catch (InterruptedException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Connection Timeout.  Check Hayward hostname and your internet connection.\");\n+            return \"\";\n+        }", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM4MDM0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r550380340", "bodyText": "Most of the Hayward Thing Handlers handleCommand methods call the bridge.httpXmlResponse.  The handleCommand methods all ultimately override the ThingHandler.handleCommand method.  I'm not seeing a way to throw an exception on an override which means I can only throw this up one level, but then would need to catch it in most of the thing handler handle command methods.  Let me know if I'm missing something obvious.  Thanks.", "author": "matchews", "createdAt": "2020-12-31T02:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3Njc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzNzQzMw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r550437433", "bodyText": "You're right, the exception can't be thrown any higher than in handleCommand(). That should be sufficient in your case as you can exit handlerCommand() immediately if you catch InterruptedException there.", "author": "fwolter", "createdAt": "2020-12-31T09:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3Njc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 1926132995..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -18,7 +18,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3Njg5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549876894", "bodyText": "This exception is never thrown.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<String> evaluateXPath(String xpathExp, String xmlResponse) throws HaywardException {\n          \n          \n            \n                public List<String> evaluateXPath(String xpathExp, String xmlResponse) {", "author": "fwolter", "createdAt": "2020-12-29T22:41:57Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;\n+\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Called by the zone discovery service to let this handler have a reference.\n+     */\n+    public void setHaywardDiscoveryService(HaywardDiscoveryService s) {\n+        this.haywardDiscoveryService = s;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        clearPolling(initializeFuture);\n+        clearPolling(pollTelemetryFuture);\n+        clearPolling(pollAlarmsFuture);\n+        logger.trace(\"Hayward polling cancelled\");\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        initializeFuture = scheduler.schedule(this::scheduledInitialize, 1, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    public void scheduledInitialize() {\n+        config = getConfigAs(HaywardConfig.class);\n+\n+        try {\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+\n+            if (!(login())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to Login to Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(getSiteList())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSP from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+                    config.username);\n+\n+            initPolling(0);\n+            logger.trace(\"Hayward Telemetry polling scheduled\");\n+\n+            if (config.alarmPollTime > 0) {\n+                initAlarmPolling(1);\n+                logger.trace(\"Hayward Alarm polling scheduled\");\n+            } else {\n+                logger.trace(\"Hayward Alarm polling disabled\");\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR,\n+                    \"scheduledInitialize exception: \" + e.getMessage());\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+            commFailureCount = 50;\n+            initPolling(60);\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean login() throws Exception {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Login to Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request>\" + \"<Name>Login</Name><Parameters>\"\n+                + \"<Parameter name=\\\"UserName\\\" dataType=\\\"String\\\">\" + config.username + \"</Parameter>\"\n+                + \"<Parameter name=\\\"Password\\\" dataType=\\\"String\\\">\" + config.password + \"</Parameter>\"\n+                + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: Login XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.token = evaluateXPath(\"/Response/Parameters//Parameter[@name='Token']/text()\", xmlResponse).get(0);\n+        account.userID = evaluateXPath(\"/Response/Parameters//Parameter[@name='UserID']/text()\", xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized boolean getApiDef() throws Exception {\n+        String xmlResponse;\n+\n+        // *****getConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetAPIDef</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID + \"</Parameter>;\"\n+                + \"<Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0.4</Parameter >\\r\\n\"\n+                + \"<Parameter name=\\\"Language\\\" dataType=\\\"string\\\">en</Parameter >\\r\\n\" + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: Login XML response was null\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getSiteList() throws Exception {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Get MSP\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetSiteList</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token\n+                + \"</Parameter><Parameter name=\\\"UserID\\\" dataType=\\\"String\\\">\" + account.userID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response was null\");\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.mspSystemID = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='MspSystemID']/text()\",\n+                xmlResponse).get(0);\n+        account.backyardName = evaluateXPath(\n+                \"/Response/Parameters/Parameter/Item//Property[@name='BackyardName']/text()\", xmlResponse).get(0);\n+        account.address = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='Address']/text()\",\n+                xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized String getMspConfig() throws HaywardException {\n+        // *****getMspConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetMspConfigFile</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter><Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0</Parameter>\\r\\n\"\n+                + \"</Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        // Debug: Inject xml file for testing\n+        // String path =\n+        // \"C:/Users/Controls/openhab-2-5-x/git/openhab-addons/bundles/org.openhab.binding.haywardomnilogic/getConfig.xml\";\n+        // xmlResponse = new String(Files.readAllBytes(Paths.get(path)));\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfig XML response was null\");\n+            return \"Fail\";\n+        }\n+\n+        if (evaluateXPath(\"//Backyard/Name/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfiguration XML response: {}\", xmlResponse);\n+            return \"Fail\";\n+        }\n+        return xmlResponse;\n+    }\n+\n+    public synchronized boolean getTelemetryData() throws HaywardException {\n+        // *****getTelemetry from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetTelemetryData</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response was null\");\n+            return false;\n+        }\n+\n+        if (!evaluateXPath(\"/Response/Parameters//Parameter[@name='StatusMessage']/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        for (Thing thing : getThing().getThings()) {\n+            if (thing.getHandler() instanceof HaywardThingHandler) {\n+                HaywardThingHandler handler = (HaywardThingHandler) thing.getHandler();\n+                if (handler != null) {\n+                    handler.getTelemetry(xmlResponse);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getAlarmList() throws Exception {\n+        for (Thing thing : getThing().getThings()) {\n+            Map<String, String> properties = thing.getProperties();\n+            if (properties.get(HaywardBindingConstants.PROPERTY_TYPE).equals(\"BACKYARD\")) {\n+                HaywardBackyardHandler handler = (HaywardBackyardHandler) thing.getHandler();\n+                if (handler != null) {\n+                    String systemID = properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+                    if (systemID != null) {\n+                        return handler.getAlarmList(systemID);\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void initPolling(int initalDelay) {\n+        pollTelemetryFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                if (commFailureCount >= 5) {\n+                    commFailureCount = 0;\n+                    clearPolling(pollTelemetryFuture);\n+                    clearPolling(pollAlarmsFuture);\n+                    initialize();\n+                    return;\n+                }\n+                if (!(getTelemetryData())) {\n+                    commFailureCount++;\n+                    return;\n+                }\n+            } catch (Exception e) {\n+                logger.debug(\"Hayward Connection thing: Exception during poll: {}\", e.getMessage());\n+            }\n+        }, initalDelay, config.telemetryPollTime, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    private synchronized void initAlarmPolling(int initalDelay) {\n+        pollAlarmsFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                getAlarmList();\n+            } catch (Exception e) {\n+                logger.debug(\"Hayward Connection thing: Exception during poll: {}\", e.getMessage());\n+            }\n+        }, initalDelay, config.alarmPollTime, TimeUnit.SECONDS);\n+    }\n+\n+    private void clearPolling(@Nullable ScheduledFuture<?> pollJob) {\n+        if (pollJob != null) {\n+            pollJob.cancel(false);\n+        }\n+    }\n+\n+    @Nullable\n+    Thing getThingForType(HaywardTypeToRequest type, int num) {\n+        for (Thing thing : getThing().getThings()) {\n+            Map<String, String> properties = thing.getProperties();\n+            if (properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID).equals(Integer.toString(num))) {\n+                if (properties.get(HaywardBindingConstants.PROPERTY_TYPE).equals(type.toString())) {\n+                    return thing;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public List<String> evaluateXPath(String xpathExp, String xmlResponse) throws HaywardException {", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 1926132995..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -18,7 +18,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NzM1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r549877356", "bodyText": "See above. Catching HaywardException. Please check all.", "author": "fwolter", "createdAt": "2020-12-29T22:44:22Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardChlorinatorHandler.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingProperties;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The Chlorinator Handler\n+ */\n+@NonNullByDefault\n+public class HaywardChlorinatorHandler extends HaywardThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardChlorinatorHandler.class);\n+    public String chlorTimedPercent = \"\";\n+    public String chlorState = \"\";\n+\n+    HaywardThingProperties prop = getConfig().as(HaywardThingProperties.class);\n+\n+    public HaywardChlorinatorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void getTelemetry(String xmlResponse) throws HaywardException {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> data = new ArrayList<>();\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/@systemId\", xmlResponse);\n+            String thingSystemID = getThing().getUID().getId();\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                if (systemIDs.get(i).equals(thingSystemID)) {\n+                    // Operating Mode\n+                    data = bridgehandler.evaluateXPath(\"//Chlorinator/@operatingMode\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_OPERATINGMODE, data.get(i));\n+\n+                    // Timed Percent\n+                    data = bridgehandler.evaluateXPath(\"//Chlorinator/@Timed-Percent\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_TIMEDPERCENT, data.get(i));\n+                    this.chlorTimedPercent = data.get(0);\n+\n+                    // scMode\n+                    data = bridgehandler.evaluateXPath(\"//Chlorinator/@scMode\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_SCMODE, data.get(i));\n+\n+                    // Error\n+                    data = bridgehandler.evaluateXPath(\"//Chlorinator/@chlrError\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_ERROR, data.get(i));\n+\n+                    // Alert\n+                    data = bridgehandler.evaluateXPath(\"//Chlorinator/@chlrAlert\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_ALERT, data.get(i));\n+\n+                    // Average Salt Level\n+                    data = bridgehandler.evaluateXPath(\"//Chlorinator/@avgSaltLevel\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_AVGSALTLEVEL, data.get(i));\n+\n+                    // Instant Salt Level\n+                    data = bridgehandler.evaluateXPath(\"//Chlorinator/@instantSaltLevel\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_INSTANTSALTLEVEL, data.get(i));\n+\n+                    // Status\n+                    data = bridgehandler.evaluateXPath(\"//Chlorinator/@status\", xmlResponse);\n+                    updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_STATUS, data.get(i));\n+\n+                    if (data.get(i).equals(\"0\")) {\n+                        updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_ENABLE, \"0\");\n+                        // chlorState is used to set the chlorinator cfgState in the timedPercent command\n+                        this.chlorState = \"2\";\n+                    } else {\n+                        updateData(HaywardBindingConstants.CHANNEL_CHLORINATOR_ENABLE, \"1\");\n+                        // chlorState is used to set the chlorinator cfgState in the timedPercent command\n+                        this.chlorState = \"3\";\n+                    }\n+                }\n+            }\n+            this.updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if ((command instanceof RefreshType)) {\n+            return;\n+        }\n+\n+        String chlorCfgState = null;\n+        String chlorTimedPercent = \"0\";\n+\n+        String systemID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+        if (systemID != null) {\n+            prop.systemID = systemID;\n+        }\n+\n+        String poolID = getThing().getProperties().get(HaywardBindingConstants.PROPERTY_BOWID);\n+        if (poolID != null) {\n+            prop.poolID = poolID;\n+        }\n+\n+        @SuppressWarnings(\"null\")\n+        HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) getBridge().getHandler();\n+        if (bridgehandler != null) {\n+            String cmdString = this.cmdToString(command);\n+            try {\n+                switch (channelUID.getId()) {\n+                    case HaywardBindingConstants.CHANNEL_CHLORINATOR_ENABLE:\n+                        if (cmdString.equals(\"1\")) {\n+                            chlorCfgState = \"3\";\n+                            chlorTimedPercent = this.chlorTimedPercent;\n+                        } else {\n+                            chlorCfgState = \"2\";\n+                            chlorTimedPercent = this.chlorTimedPercent;\n+                        }\n+                        break;\n+                    case HaywardBindingConstants.CHANNEL_CHLORINATOR_TIMEDPERCENT:\n+                        chlorCfgState = this.chlorState;\n+                        chlorTimedPercent = cmdString;\n+                        break;\n+                    default:\n+                        logger.warn(\"haywardCommand Unsupported type {}\", channelUID);\n+                        return;\n+                }\n+\n+                String cmdURL = HaywardBindingConstants.COMMAND_PARAMETERS + \"<Name>SetCHLORParams</Name><Parameters>\"\n+                        + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + bridgehandler.account.token\n+                        + \"</Parameter>\" + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\"\n+                        + bridgehandler.account.mspSystemID + \"</Parameter>\"\n+                        + \"<Parameter name=\\\"PoolID\\\" dataType=\\\"int\\\">\" + prop.poolID + \"</Parameter>\"\n+                        + \"<Parameter name=\\\"ChlorID\\\" dataType=\\\"int\\\" alias=\\\"EquipmentID\\\">\" + prop.systemID\n+                        + \"</Parameter>\" + \"<Parameter name=\\\"CfgState\\\" dataType=\\\"byte\\\" alias=\\\"Data1\\\">\"\n+                        + chlorCfgState + \"</Parameter>\"\n+                        + \"<Parameter name=\\\"OpMode\\\" dataType=\\\"byte\\\" alias=\\\"Data2\\\">1</Parameter>\"\n+                        + \"<Parameter name=\\\"BOWType\\\" dataType=\\\"byte\\\" alias=\\\"Data3\\\">1</Parameter>\"\n+                        + \"<Parameter name=\\\"CellType\\\" dataType=\\\"byte\\\" alias=\\\"Data4\\\">4</Parameter>\"\n+                        + \"<Parameter name=\\\"TimedPercent\\\" dataType=\\\"byte\\\" alias=\\\"Data5\\\">\" + chlorTimedPercent\n+                        + \"</Parameter>\"\n+                        + \"<Parameter name=\\\"SCTimeout\\\" dataType=\\\"byte\\\" unit=\\\"hour\\\" alias=\\\"Data6\\\">24</Parameter>\"\n+                        + \"<Parameter name=\\\"ORPTimout\\\" dataType=\\\"byte\\\" unit=\\\"hour\\\" alias=\\\"Data7\\\">24</Parameter>\"\n+                        + \"</Parameters></Request>\";\n+\n+                // *****Send Command to Hayward server\n+                String xmlResponse = bridgehandler.httpXmlResponse(cmdURL);\n+                String status = bridgehandler.evaluateXPath(\"//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+                if (!(status.equals(\"0\"))) {\n+                    logger.debug(\"haywardCommand XML response: {}\", xmlResponse);\n+                    return;\n+                }\n+            } catch (Exception e) {", "originalCommit": "c49b10f7fe3c218245d11ec9b290562da810a7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardChlorinatorHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardChlorinatorHandler.java\nindex 55e701c335..f9e5438459 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardChlorinatorHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardChlorinatorHandler.java\n\n@@ -17,13 +17,10 @@ import java.util.List;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n-import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n import org.openhab.binding.haywardomnilogic.internal.HaywardThingProperties;\n import org.openhab.core.thing.ChannelUID;\n import org.openhab.core.thing.Thing;\n-import org.openhab.core.thing.ThingStatus;\n-import org.openhab.core.thing.ThingStatusDetail;\n import org.openhab.core.types.Command;\n import org.openhab.core.types.RefreshType;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU4Nzc3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r551587770", "bodyText": "This is never used.", "author": "fwolter", "createdAt": "2021-01-04T21:48:00Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,456 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;", "originalCommit": "6e6a0143bb8561ddabc46d3dbbddb041e68919f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU5Nzk1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r551597955", "bodyText": "It is used on line 94.  Is there a way to let the compiler know this?", "author": "matchews", "createdAt": "2021-01-04T22:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU4Nzc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 3af39d6398..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -18,7 +18,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxODU0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r552918548", "bodyText": "This exception is never thrown.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public synchronized boolean mspConfigDiscovery(String xmlResponse) throws HaywardException {\n          \n          \n            \n                public synchronized boolean mspConfigDiscovery(String xmlResponse) {", "author": "fwolter", "createdAt": "2021-01-06T19:27:34Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,454 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) throws HaywardException {", "originalCommit": "a51cf9e006c05da2f88d901304ae05f5ad3d930b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 9810dfcc91..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -22,7 +22,6 @@ import java.util.Map;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n-import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n import org.openhab.core.config.discovery.AbstractDiscoveryService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkyMjU4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r552922587", "bodyText": "This assignment doesn't have any effect as haywardDiscoveryService is never read.", "author": "fwolter", "createdAt": "2021-01-06T19:36:16Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,483 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    private @Nullable HaywardDiscoveryService haywardDiscoveryService;\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Called by the zone discovery service to let this handler have a reference.\n+     */\n+    public void setHaywardDiscoveryService(HaywardDiscoveryService s) {\n+        haywardDiscoveryService = s;", "originalCommit": "a51cf9e006c05da2f88d901304ae05f5ad3d930b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 6cb745350a..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -18,7 +18,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0MjgzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r559242832", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        case \"Switch\":\n          \n          \n            \n                            return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n          \n          \n            \n                        case \"system.power\":\n          \n          \n            \n                            return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n          \n          \n            \n                        case \"Switch\":\n          \n          \n            \n                        case \"system.power\":\n          \n          \n            \n                            return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;", "author": "cpmeister", "createdAt": "2021-01-17T21:44:50Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+\n+/**\n+ * The {@link HaywarThingHandler} is a subclass of the BaseThingHandler and a Super\n+ * Class to each Hayward Thing Handler\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public abstract class HaywardThingHandler extends BaseThingHandler {\n+\n+    public HaywardThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public abstract void getTelemetry(String xmlResponse) throws HaywardException;\n+\n+    public State toState(String type, String channelID, String value) throws NumberFormatException {\n+        switch (type) {\n+            case \"Number\":\n+                return new DecimalType(value);\n+            case \"Switch\":\n+                return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+            case \"system.power\":\n+                return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;", "originalCommit": "ad68cd938c3737c40854faf9111c4dec6cf34376", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\nindex a8ba6a3634..ebc876b7e4 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0Mjg3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r559242879", "bodyText": "Is this fall-through intentional?", "author": "cpmeister", "createdAt": "2021-01-17T21:45:18Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+\n+/**\n+ * The {@link HaywarThingHandler} is a subclass of the BaseThingHandler and a Super\n+ * Class to each Hayward Thing Handler\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public abstract class HaywardThingHandler extends BaseThingHandler {\n+\n+    public HaywardThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public abstract void getTelemetry(String xmlResponse) throws HaywardException;\n+\n+    public State toState(String type, String channelID, String value) throws NumberFormatException {\n+        switch (type) {\n+            case \"Number\":\n+                return new DecimalType(value);\n+            case \"Switch\":\n+                return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+            case \"system.power\":\n+                return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+            case \"Number:Dimensionless\":\n+                switch (channelID) {\n+                    case \"chlorTimedPercent\":\n+                    case \"filterSpeed\":\n+                    case \"pumpSpeed\":\n+                    case \"filterLastSpeed\":\n+                        return new QuantityType<>(Integer.parseInt(value), Units.PERCENT);\n+                    case \"chlorAvgSaltLevel\":\n+                    case \"chlorInstantSaltLevel\":\n+                        return new QuantityType<>(Integer.parseInt(value), Units.PARTS_PER_MILLION);\n+                }\n+            case \"Number:Temperature\":", "originalCommit": "ad68cd938c3737c40854faf9111c4dec6cf34376", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI1NzQ0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r559257448", "bodyText": "No.  Good catch.", "author": "matchews", "createdAt": "2021-01-17T23:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0Mjg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\nindex a8ba6a3634..ebc876b7e4 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0MzY5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r559243691", "bodyText": "This should be initialized during initialize() since the config may not be available at the time the handler is constructor.\nBut more importantly, the prop field don't seem to be needed since you can always pull the data from getThing().getProperties() as needed. There is no reason to cache it.", "author": "cpmeister", "createdAt": "2021-01-17T21:51:16Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardRelayHandler.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingProperties;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The Relay Handler\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HaywardRelayHandler extends HaywardThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardRelayHandler.class);\n+\n+    HaywardThingProperties prop = getConfig().as(HaywardThingProperties.class);", "originalCommit": "ad68cd938c3737c40854faf9111c4dec6cf34376", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardRelayHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardRelayHandler.java\nindex 8ef19d0b1e..5be182aee4 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardRelayHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardRelayHandler.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0Mzc0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r559243743", "bodyText": "see earlier comment.", "author": "cpmeister", "createdAt": "2021-01-17T21:51:58Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardFilterHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingProperties;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The Filter Handler\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HaywardFilterHandler extends HaywardThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardFilterHandler.class);\n+\n+    HaywardThingProperties prop = getConfig().as(HaywardThingProperties.class);", "originalCommit": "ad68cd938c3737c40854faf9111c4dec6cf34376", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardFilterHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardFilterHandler.java\nindex dec09195c5..71b477febb 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardFilterHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardFilterHandler.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0Mzc4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r559243783", "bodyText": "Please fix this wherever else it occurs.", "author": "cpmeister", "createdAt": "2021-01-17T21:52:14Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardColorLogicHandler.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingProperties;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The ColorLogic Handler\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HaywardColorLogicHandler extends HaywardThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardColorLogicHandler.class);\n+\n+    HaywardThingProperties prop = getConfig().as(HaywardThingProperties.class);", "originalCommit": "ad68cd938c3737c40854faf9111c4dec6cf34376", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardColorLogicHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardColorLogicHandler.java\nindex d6046ba403..13d249b32e 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardColorLogicHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardColorLogicHandler.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0NDM4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r559244382", "bodyText": "You should also include the exception message with the offline status so that users have better idea as to what went wrong.", "author": "cpmeister", "createdAt": "2021-01-17T21:57:28Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java", "diffHunk": "@@ -0,0 +1,475 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.handler;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpVersion;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardAccount;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardThingHandler;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.config.HaywardConfig;\n+import org.openhab.binding.haywardomnilogic.internal.discovery.HaywardDiscoveryService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+/**\n+ * The {@link HaywardBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardBridgeHandler.class);\n+    private final HttpClient httpClient;\n+    private @Nullable ScheduledFuture<?> initializeFuture;\n+    private @Nullable ScheduledFuture<?> pollTelemetryFuture;\n+    private @Nullable ScheduledFuture<?> pollAlarmsFuture;\n+    private int commFailureCount;\n+    public HaywardConfig config = getConfig().as(HaywardConfig.class);\n+    public HaywardAccount account = getConfig().as(HaywardAccount.class);\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HaywardDiscoveryService.class);\n+    }\n+\n+    public HaywardBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        clearPolling(initializeFuture);\n+        clearPolling(pollTelemetryFuture);\n+        clearPolling(pollAlarmsFuture);\n+        logger.trace(\"Hayward polling cancelled\");\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        initializeFuture = scheduler.schedule(this::scheduledInitialize, 1, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    public void scheduledInitialize() {\n+        config = getConfigAs(HaywardConfig.class);\n+\n+        try {\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+\n+            if (!(login())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to Login to Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(getSiteList())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSP from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            if (!(mspConfigUnits())) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Unable to getMSPConfigUnits from Hayward's server\");\n+                clearPolling(pollTelemetryFuture);\n+                clearPolling(pollAlarmsFuture);\n+                commFailureCount = 50;\n+                initPolling(60);\n+                return;\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            logger.debug(\"Succesfully opened connection to Hayward's server: {} Username:{}\", config.endpointUrl,\n+                    config.username);\n+\n+            initPolling(0);\n+            logger.trace(\"Hayward Telemetry polling scheduled\");\n+\n+            if (config.alarmPollTime > 0) {\n+                initAlarmPolling(1);\n+            }\n+        } catch (HaywardException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR,\n+                    \"scheduledInitialize exception: \" + e.getMessage());\n+            clearPolling(pollTelemetryFuture);\n+            clearPolling(pollAlarmsFuture);\n+            commFailureCount = 50;\n+            initPolling(60);\n+            return;\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean login() throws HaywardException, InterruptedException {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Login to Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request>\" + \"<Name>Login</Name><Parameters>\"\n+                + \"<Parameter name=\\\"UserName\\\" dataType=\\\"String\\\">\" + config.username + \"</Parameter>\"\n+                + \"<Parameter name=\\\"Password\\\" dataType=\\\"String\\\">\" + config.password + \"</Parameter>\"\n+                + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: Login XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.token = evaluateXPath(\"/Response/Parameters//Parameter[@name='Token']/text()\", xmlResponse).get(0);\n+        account.userID = evaluateXPath(\"/Response/Parameters//Parameter[@name='UserID']/text()\", xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized boolean getApiDef() throws HaywardException, InterruptedException {\n+        String xmlResponse;\n+\n+        // *****getConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetAPIDef</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID + \"</Parameter>;\"\n+                + \"<Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0.4</Parameter >\\r\\n\"\n+                + \"<Parameter name=\\\"Language\\\" dataType=\\\"string\\\">en</Parameter >\\r\\n\" + \"</Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: Login XML response was null\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getSiteList() throws HaywardException, InterruptedException {\n+        String xmlResponse;\n+        String status;\n+\n+        // *****Get MSP\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetSiteList</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token\n+                + \"</Parameter><Parameter name=\\\"UserID\\\" dataType=\\\"String\\\">\" + account.userID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response was null\");\n+            return false;\n+        }\n+\n+        status = evaluateXPath(\"/Response/Parameters//Parameter[@name='Status']/text()\", xmlResponse).get(0);\n+\n+        if (!(status.equals(\"0\"))) {\n+            logger.debug(\"Hayward Connection thing: getSiteList XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        account.mspSystemID = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='MspSystemID']/text()\",\n+                xmlResponse).get(0);\n+        account.backyardName = evaluateXPath(\n+                \"/Response/Parameters/Parameter/Item//Property[@name='BackyardName']/text()\", xmlResponse).get(0);\n+        account.address = evaluateXPath(\"/Response/Parameters/Parameter/Item//Property[@name='Address']/text()\",\n+                xmlResponse).get(0);\n+        return true;\n+    }\n+\n+    public synchronized String getMspConfig() throws HaywardException, InterruptedException {\n+        // *****getMspConfig from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetMspConfigFile</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter><Parameter name=\\\"Version\\\" dataType=\\\"string\\\">0</Parameter>\\r\\n\"\n+                + \"</Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        // Debug: Inject xml file for testing\n+        // String path =\n+        // \"C:/Users/Controls/openhab-2-5-x/git/openhab-addons/bundles/org.openhab.binding.haywardomnilogic/getConfig.xml\";\n+        // xmlResponse = new String(Files.readAllBytes(Paths.get(path)));\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfig XML response was null\");\n+            return \"Fail\";\n+        }\n+\n+        if (evaluateXPath(\"//Backyard/Name/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: requestConfiguration XML response: {}\", xmlResponse);\n+            return \"Fail\";\n+        }\n+        return xmlResponse;\n+    }\n+\n+    public synchronized boolean mspConfigUnits() throws HaywardException, InterruptedException {\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+\n+        String xmlResponse = getMspConfig();\n+\n+        // Get Units (Standard, Metric)\n+        property1 = evaluateXPath(\"//System/Units/text()\", xmlResponse);\n+        account.units = property1.get(0);\n+\n+        // Get Variable Speed Pump Units (percent, RPM)\n+        property2 = evaluateXPath(\"//System/Msp-Vsp-Speed-Format/text()\", xmlResponse);\n+        account.vspSpeedFormat = property2.get(0);\n+\n+        return true;\n+    }\n+\n+    public synchronized boolean getTelemetryData() throws HaywardException, InterruptedException {\n+        // *****getTelemetry from Hayward server\n+        String urlParameters = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Request><Name>GetTelemetryData</Name><Parameters>\"\n+                + \"<Parameter name=\\\"Token\\\" dataType=\\\"String\\\">\" + account.token + \"</Parameter>\"\n+                + \"<Parameter name=\\\"MspSystemID\\\" dataType=\\\"int\\\">\" + account.mspSystemID\n+                + \"</Parameter></Parameters></Request>\";\n+\n+        String xmlResponse = httpXmlResponse(urlParameters);\n+\n+        if (xmlResponse.isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response was null\");\n+            return false;\n+        }\n+\n+        if (!evaluateXPath(\"/Response/Parameters//Parameter[@name='StatusMessage']/text()\", xmlResponse).isEmpty()) {\n+            logger.debug(\"Hayward Connection thing: getTelemetry XML response: {}\", xmlResponse);\n+            return false;\n+        }\n+\n+        for (Thing thing : getThing().getThings()) {\n+            if (thing.getHandler() instanceof HaywardThingHandler) {\n+                HaywardThingHandler handler = (HaywardThingHandler) thing.getHandler();\n+                if (handler != null) {\n+                    handler.getTelemetry(xmlResponse);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public synchronized boolean getAlarmList() throws HaywardException {\n+        for (Thing thing : getThing().getThings()) {\n+            Map<String, String> properties = thing.getProperties();\n+            if (\"BACKYARD\".equals(properties.get(HaywardBindingConstants.PROPERTY_TYPE))) {\n+                HaywardBackyardHandler handler = (HaywardBackyardHandler) thing.getHandler();\n+                if (handler != null) {\n+                    String systemID = properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+                    if (systemID != null) {\n+                        return handler.getAlarmList(systemID);\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void initPolling(int initalDelay) {\n+        pollTelemetryFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                if (commFailureCount >= 5) {\n+                    commFailureCount = 0;\n+                    clearPolling(pollTelemetryFuture);\n+                    clearPolling(pollAlarmsFuture);\n+                    initialize();\n+                    return;\n+                }\n+                if (!(getTelemetryData())) {\n+                    commFailureCount++;\n+                    return;\n+                }\n+            } catch (HaywardException e) {\n+                logger.debug(\"Hayward Connection thing: Exception during poll: {}\", e.getMessage());\n+            } catch (InterruptedException e) {\n+                return;\n+            }\n+        }, initalDelay, config.telemetryPollTime, TimeUnit.SECONDS);\n+        return;\n+    }\n+\n+    private synchronized void initAlarmPolling(int initalDelay) {\n+        pollAlarmsFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                getAlarmList();\n+            } catch (HaywardException e) {\n+                logger.debug(\"Hayward Connection thing: Exception during poll: {}\", e.getMessage());\n+            }\n+        }, initalDelay, config.alarmPollTime, TimeUnit.SECONDS);\n+    }\n+\n+    private void clearPolling(@Nullable ScheduledFuture<?> pollJob) {\n+        if (pollJob != null) {\n+            pollJob.cancel(false);\n+        }\n+    }\n+\n+    @Nullable\n+    Thing getThingForType(HaywardTypeToRequest type, int num) {\n+        for (Thing thing : getThing().getThings()) {\n+            Map<String, String> properties = thing.getProperties();\n+            if (Integer.toString(num).equals(properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID))) {\n+                if (type.toString().equals(properties.get(HaywardBindingConstants.PROPERTY_TYPE))) {\n+                    return thing;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public List<String> evaluateXPath(String xpathExp, String xmlResponse) {\n+        List<String> values = new ArrayList<>();\n+        try {\n+            InputSource inputXML = new InputSource(new StringReader(xmlResponse));\n+            XPath xPath = XPathFactory.newInstance().newXPath();\n+            NodeList nodes = (NodeList) xPath.evaluate(xpathExp, inputXML, XPathConstants.NODESET);\n+\n+            for (int i = 0; i < nodes.getLength(); i++) {\n+                values.add(nodes.item(i).getNodeValue());\n+            }\n+        } catch (XPathExpressionException e) {\n+            logger.warn(\"XPathExpression exception: {}\", e.getMessage());\n+        }\n+        return values;\n+    }\n+\n+    private Request sendRequestBuilder(String url, HttpMethod method) {\n+        return this.httpClient.newRequest(url).agent(\"NextGenForIPhone/16565 CFNetwork/887 Darwin/17.0.0\")\n+                .method(method).header(HttpHeader.ACCEPT_LANGUAGE, \"en-us\").header(HttpHeader.ACCEPT, \"*/*\")\n+                .header(HttpHeader.ACCEPT_ENCODING, \"gzip, deflate\").version(HttpVersion.HTTP_1_1)\n+                .header(HttpHeader.CONNECTION, \"keep-alive\").header(HttpHeader.HOST, \"www.haywardomnilogic.com:80\")\n+                .timeout(10, TimeUnit.SECONDS);\n+    }\n+\n+    public synchronized String httpXmlResponse(String urlParameters) throws HaywardException, InterruptedException {\n+        String urlParameterslength = Integer.toString(urlParameters.length());\n+        String statusMessage;\n+\n+        try {\n+            ContentResponse httpResponse = sendRequestBuilder(config.endpointUrl, HttpMethod.POST)\n+                    .content(new StringContentProvider(urlParameters), \"text/xml; charset=utf-8\")\n+                    .header(HttpHeader.CONTENT_LENGTH, urlParameterslength).send();\n+\n+            int status = httpResponse.getStatus();\n+            String xmlResponse = httpResponse.getContentAsString();\n+\n+            List<String> statusMessages = evaluateXPath(\"/Response/Parameters//Parameter[@name='StatusMessage']/text()\",\n+                    xmlResponse);\n+            if (!(statusMessages.isEmpty())) {\n+                statusMessage = statusMessages.get(0);\n+            } else {\n+                statusMessage = httpResponse.getReason();\n+            }\n+\n+            if (status == 200) {\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"Hayward Connection thing:  {} Hayward http command: {}\", getCallingMethod(),\n+                            urlParameters);\n+                    logger.trace(\"Hayward Connection thing:  {} Hayward http response: {} {}\", getCallingMethod(),\n+                            statusMessage, xmlResponse);\n+                }\n+                return xmlResponse;\n+            } else {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Hayward Connection thing:  {} Hayward http command: {}\", getCallingMethod(),\n+                            urlParameters);\n+                    logger.debug(\"Hayward Connection thing:  {} Hayward http response: {}\", getCallingMethod(), status);\n+                }\n+                return \"\";\n+            }\n+        } catch (ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Unable to resolve host.  Check Hayward hostname and your internet connection.\");\n+            return \"\";", "originalCommit": "ad68cd938c3737c40854faf9111c4dec6cf34376", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\nindex 5cdfe3be07..e306fa7851 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/handler/HaywardBridgeHandler.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0NDcxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r559244715", "bodyText": "You don't need to cast to call toString().\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return ((StringType) command).toString();\n          \n          \n            \n                        return command.toString();", "author": "cpmeister", "createdAt": "2021-01-17T22:00:07Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.haywardomnilogic.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+\n+/**\n+ * The {@link HaywarThingHandler} is a subclass of the BaseThingHandler and a Super\n+ * Class to each Hayward Thing Handler\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public abstract class HaywardThingHandler extends BaseThingHandler {\n+\n+    public HaywardThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public abstract void getTelemetry(String xmlResponse) throws HaywardException;\n+\n+    public State toState(String type, String channelID, String value) throws NumberFormatException {\n+        switch (type) {\n+            case \"Number\":\n+                return new DecimalType(value);\n+            case \"Switch\":\n+                return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+            case \"system.power\":\n+                return Integer.parseInt(value) > 0 ? OnOffType.ON : OnOffType.OFF;\n+            case \"Number:Dimensionless\":\n+                switch (channelID) {\n+                    case \"chlorTimedPercent\":\n+                    case \"filterSpeed\":\n+                    case \"pumpSpeed\":\n+                    case \"filterLastSpeed\":\n+                        return new QuantityType<>(Integer.parseInt(value), Units.PERCENT);\n+                    case \"chlorAvgSaltLevel\":\n+                    case \"chlorInstantSaltLevel\":\n+                        return new QuantityType<>(Integer.parseInt(value), Units.PARTS_PER_MILLION);\n+                }\n+            case \"Number:Temperature\":\n+                Bridge bridge = getBridge();\n+                if (bridge != null) {\n+                    HaywardBridgeHandler bridgehandler = (HaywardBridgeHandler) bridge.getHandler();\n+                    if (bridgehandler != null) {\n+                        if (bridgehandler.account.units.equals(\"Standard\")) {\n+                            return new QuantityType<>(Integer.parseInt(value), ImperialUnits.FAHRENHEIT);\n+                        } else {\n+                            return new QuantityType<>(Integer.parseInt(value), SIUnits.CELSIUS);\n+                        }\n+                    } else {\n+                        // default to imperial if no bridge\n+                        return new QuantityType<>(Integer.parseInt(value), ImperialUnits.FAHRENHEIT);\n+                    }\n+                }\n+            default:\n+                return StringType.valueOf(value);\n+        }\n+    }\n+\n+    public String cmdToString(Command command) {\n+        if (command == OnOffType.OFF) {\n+            return \"0\";\n+        } else if (command == OnOffType.ON) {\n+            return \"1\";\n+        } else if (command instanceof DecimalType) {\n+            return ((DecimalType) command).toString();\n+        } else if (command instanceof QuantityType) {\n+            return ((QuantityType<?>) command).format(\"%1.0f\");\n+        } else {\n+            return ((StringType) command).toString();", "originalCommit": "ad68cd938c3737c40854faf9111c4dec6cf34376", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\nindex a8ba6a3634..ebc876b7e4 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/HaywardThingHandler.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc3NzQ1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r559777454", "bodyText": "Similar code appears in many other places in this class. Please refactor the code into a separate function.", "author": "cpmeister", "createdAt": "2021-01-18T20:13:46Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,452 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                onBackyardDiscovered(Integer.parseInt(bridgehandler.account.mspSystemID), names.get(i));\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                onBOWDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i));\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+                onChlorinatorDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+                onColorLogicDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+            }\n+\n+            // Find Filters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+                onFilterDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0),\n+                        property1.get(i), property2.get(i), property3.get(i), property4.get(i));\n+            }\n+\n+            // Find Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+                onHeaterDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+            }\n+\n+            // Find Pumps\n+            systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+                onPumpDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0),\n+                        property1.get(i), property2.get(i), property3.get(i), property4.get(i));\n+            }\n+\n+            // Find Relays\n+            systemIDs = bridgehandler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+                if (!(bowID.isEmpty())) {\n+                    onRelayDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+                } else {\n+                    onRelayDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), \"\", \"\");\n+                }\n+\n+            }\n+\n+            // Find Virtual Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+                onVirtualHeaterDiscovered(Integer.parseInt(systemIDs.get(i)), \"Virtual Heater\", bowID.get(0),\n+                        bowName.get(0));\n+            }\n+\n+            // Find Sensors\n+            // Flow and water temp sensor aren't showing up in telemetry. Need example to determine how to differentiate\n+            // \"system\" sensors\n+            // that are reported in the BOW water temp, Filter flow switch, ORP, etc.\n+            systemIDs = bridgehandler.evaluateXPath(\"//Sensor/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Sensor/Name/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+                // Do not add backyard sensors that do not exist in the BOW thus bowID is null\n+                if (!(bowID.isEmpty())) {\n+                    onSensorDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public void onBackyardDiscovered(int systemID, String label) {\n+        logger.trace(\"Hayward Backyard {} Discovered: {}\", systemID, label);\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        if (bridgehandler != null) {\n+            ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BACKYARD,\n+                    bridgehandler.getThing().getUID(), Integer.toString(systemID));\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+            DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                    .withBridge(bridgehandler.getThing().getUID())\n+                    .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                    .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+            thingDiscovered(result);\n+        }\n+    }\n+\n+    public void onBOWDiscovered(int systemID, String label) {\n+        logger.trace(\"Hayward BOW {} Discovered: {}\", systemID, label);\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        if (bridgehandler != null) {\n+            ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BOW, bridgehandler.getThing().getUID(),\n+                    Integer.toString(systemID));\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+            DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                    .withBridge(bridgehandler.getThing().getUID())\n+                    .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                    .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+            thingDiscovered(result);\n+        }\n+    }\n+\n+    public void onChlorinatorDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.trace(\"Hayward Chlorinator {} Discovered: {}\", systemID, label);\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        if (bridgehandler != null) {\n+            ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_CHLORINATOR,\n+                    bridgehandler.getThing().getUID(), Integer.toString(systemID));\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+            DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                    .withBridge(bridgehandler.getThing().getUID())\n+                    .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                    .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+            thingDiscovered(result);\n+        }\n+    }\n+\n+    public void onColorLogicDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.trace(\"Hayward Color Logic Light {} Discovered: {}\", systemID, label);\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        if (bridgehandler != null) {\n+            ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_COLORLOGIC,\n+                    bridgehandler.getThing().getUID(), Integer.toString(systemID));\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+            DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                    .withBridge(bridgehandler.getThing().getUID())\n+                    .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                    .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+            thingDiscovered(result);\n+        }\n+    }\n+\n+    public void onFilterDiscovered(int systemID, String label, String bowID, String bowName, String minPumpSpeed,\n+            String maxPumpSpeed, String minPumpRpm, String maxPumpRpm) {\n+        logger.trace(\"Hayward Filter {} Discovered: {}\", systemID, label);\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        if (bridgehandler != null) {\n+            ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_FILTER,\n+                    bridgehandler.getThing().getUID(), Integer.toString(systemID));\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+            properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, minPumpSpeed);\n+            properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, maxPumpSpeed);\n+            properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, minPumpRpm);\n+            properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, maxPumpRpm);\n+            DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                    .withBridge(bridgehandler.getThing().getUID())\n+                    .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                    .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+            thingDiscovered(result);\n+        }\n+    }\n+\n+    public void onHeaterDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.trace(\"Hayward Heater {} Discovered: {}\", systemID, label);\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        if (bridgehandler != null) {\n+            ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_HEATER,\n+                    bridgehandler.getThing().getUID(), Integer.toString(systemID));\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+            DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                    .withBridge(bridgehandler.getThing().getUID())\n+                    .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                    .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+            thingDiscovered(result);\n+        }\n+    }\n+\n+    public void onPumpDiscovered(int systemID, String label, String bowID, String bowName, String property1,\n+            String property2, String property3, String property4) {\n+        logger.trace(\"Hayward Pump {} Discovered: {}\", systemID, label);\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        if (bridgehandler != null) {\n+            ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_PUMP, bridgehandler.getThing().getUID(),\n+                    Integer.toString(systemID));\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+            properties.put(HaywardBindingConstants.PROPERTY_PUMP_MINPUMPSPEED, property1);\n+            properties.put(HaywardBindingConstants.PROPERTY_PUMP_MAXPUMPSPEED, property2);\n+            properties.put(HaywardBindingConstants.PROPERTY_PUMP_MINPUMPRPM, property3);\n+            properties.put(HaywardBindingConstants.PROPERTY_PUMP_MAXPUMPRPM, property4);\n+            DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                    .withBridge(bridgehandler.getThing().getUID())\n+                    .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                    .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+            thingDiscovered(result);\n+        }\n+    }\n+\n+    public void onRelayDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.trace(\"Hayward Relay {} Discovered: {}\", systemID, label);\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        if (bridgehandler != null) {\n+            ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_RELAY,\n+                    bridgehandler.getThing().getUID(), Integer.toString(systemID));\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+            DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                    .withBridge(bridgehandler.getThing().getUID())\n+                    .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                    .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+            thingDiscovered(result);\n+        }\n+    }\n+\n+    public void onSensorDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.trace(\"Hayward Sensor {} Discovered: {}\", systemID, label);\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        if (bridgehandler != null) {\n+            ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_SENSOR,\n+                    bridgehandler.getThing().getUID(), Integer.toString(systemID));\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.SENSOR);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+            DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                    .withBridge(bridgehandler.getThing().getUID())\n+                    .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                    .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+            thingDiscovered(result);\n+        }\n+    }\n+\n+    public void onVirtualHeaterDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.trace(\"Hayward Virtual Heater {} Discovered: {}\", systemID, label);\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        if (bridgehandler != null) {\n+            ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_VIRTUALHEATER,\n+                    bridgehandler.getThing().getUID(), Integer.toString(systemID));\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, String.valueOf(systemID));\n+            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER.toString());\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+            DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                    .withBridge(bridgehandler.getThing().getUID())\n+                    .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                    .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+            thingDiscovered(result);\n+        }", "originalCommit": "fdec9c4b0288ca02d1867f833b8ed7667bd110f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex c77acb4fd3..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIyMTc1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561221755", "bodyText": "I'm not sure if the core makes a copy of the properties each time you create a discovery result. So rather than making assumptions I think it would be safer to create a new HashMap each time instead of reusing it.", "author": "cpmeister", "createdAt": "2021-01-20T19:28:45Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -93,6 +94,7 @@ public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n         List<String> property2 = new ArrayList<>();\n         List<String> property3 = new ArrayList<>();\n         List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -94,239 +90,322 @@ public class HaywardDiscoveryService extends AbstractDiscoveryService implements\n         List<String> property2 = new ArrayList<>();\n         List<String> property3 = new ArrayList<>();\n         List<String> property4 = new ArrayList<>();\n-        Map<String, Object> properties = new HashMap<>();\n-\n-        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n \n-        if (bridgehandler != null) {\n-            // Find Backyard\n-            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n-\n-            for (int i = 0; i < names.size(); i++) {\n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n-\n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n-            }\n+        // Find Backyard\n+        names = handler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n \n-            // Find Bodies of Water\n-            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n-\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-\n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n-            }\n+        for (String name : names) {\n+            onBackyardDiscovered(Integer.parseInt(handler.account.mspSystemID), name);\n+        }\n \n-            // Find Chlorinators\n-            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+        // Find Bodies of Water\n+        systemIDs = handler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n \n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            onBOWDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i));\n+        }\n \n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+        // Find Chlorinators\n+        systemIDs = handler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onChlorinatorDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n \n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n-            }\n+        // Find ColorLogic Lights\n+        systemIDs = handler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onColorLogicDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n \n-            // Find ColorLogic Lights\n-            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+        // Find Filters\n+        systemIDs = handler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+        property1 = handler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        property2 = handler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        property3 = handler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        property4 = handler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onFilterDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0),\n+                    property1.get(i), property2.get(i), property3.get(i), property4.get(i));\n+        }\n \n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+        // Find Heaters\n+        systemIDs = handler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+            onHeaterDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n \n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+        // Find Pumps\n+        systemIDs = handler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+        property1 = handler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        property2 = handler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        property3 = handler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        property4 = handler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+            onPumpDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0),\n+                    property1.get(i), property2.get(i), property3.get(i), property4.get(i));\n+        }\n \n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+        // Find Relays\n+        systemIDs = handler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            if (!(bowID.isEmpty())) {\n+                onRelayDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+            } else {\n+                onRelayDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), \"\", \"\");\n             }\n \n-            // Find Filters\n-            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n-            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n-            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n-            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n-            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n-\n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n-\n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n-            }\n+        }\n \n-            // Find Heaters\n-            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n-\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n-                        xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n-\n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n-\n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n-            }\n+        // Find Virtual Heaters\n+        systemIDs = handler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onVirtualHeaterDiscovered(Integer.parseInt(systemIDs.get(i)), \"Virtual Heater\", bowID.get(0),\n+                    bowName.get(0));\n+        }\n \n-            // Find Pumps\n-            systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n-            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n-            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n-            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n-            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n-\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n-                        xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n-\n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n-\n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_PUMP, names.get(i), properties);\n+        // Find Sensors\n+        // Flow and water temp sensor aren't showing up in telemetry. Need example to determine how to differentiate\n+        // \"system\" sensors\n+        // that are reported in the BOW water temp, Filter flow switch, ORP, etc.\n+        systemIDs = handler.evaluateXPath(\"//Sensor/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Sensor/Name/text()\", xmlResponse);\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            // Do not add backyard sensors that do not exist in the BOW thus bowID is null\n+            if (!(bowID.isEmpty())) {\n+                onSensorDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n             }\n+        }\n+        return true;\n+    }\n \n-            // Find Relays\n-            systemIDs = bridgehandler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+    public void onBackyardDiscovered(int systemID, String label) {\n+        logger.debug(\"Hayward Backyard {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BACKYARD, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+    public void onBOWDiscovered(int systemID, String label) {\n+        logger.debug(\"Hayward BOW {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BOW, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n+    public void onChlorinatorDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Chlorinator {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_CHLORINATOR, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_RELAY, names.get(i), properties);\n-            }\n+    public void onColorLogicDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Color Logic Light {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_COLORLOGIC, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-            // Find Virtual Heaters\n-            systemIDs = bridgehandler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n+    public void onFilterDiscovered(int systemID, String label, String bowID, String bowName, String minPumpSpeed,\n+            String maxPumpSpeed, String minPumpRpm, String maxPumpRpm) {\n+        logger.debug(\"Hayward Filter {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_FILTER, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, minPumpSpeed);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, maxPumpSpeed);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, minPumpRpm);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, maxPumpRpm);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+    public void onHeaterDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Heater {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_HEATER, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+    public void onPumpDiscovered(int systemID, String label, String bowID, String bowName, String property1,\n+            String property2, String property3, String property4) {\n+        logger.debug(\"Hayward Pump {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_PUMP, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MINPUMPSPEED, property1);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MAXPUMPSPEED, property2);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MINPUMPRPM, property3);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MAXPUMPRPM, property4);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, \"Heater\", properties);\n-            }\n+    public void onRelayDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Relay {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_RELAY, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-            // Find Sensors\n-            // Flow and water temp sensor aren't showing up in telemetry. Need example to determine how to differentiate\n-            // \"system\" sensors\n-            // that are reported in the BOW water temp, Filter flow switch, ORP, etc.\n-            systemIDs = bridgehandler.evaluateXPath(\"//Sensor/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Sensor/Name/text()\", xmlResponse);\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n-                // Do not add backyard sensors that do not exist in the BOW thus bowID is null\n-                if (!(bowID.isEmpty())) {\n-                    properties.clear();\n-                    properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.SENSOR);\n-                    properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                    properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n-                    properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n-\n-                    onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_SENSOR, names.get(i), properties);\n-                }\n-            }\n-        }\n-        return true;\n+    public void onSensorDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Sensor {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_SENSOR, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.SENSOR);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n     }\n \n-    public void onDeviceDiscovered(ThingTypeUID thingType, String label, Map<String, Object> properties) {\n-        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n-        String systemID = (String) properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n-        if (bridgehandler != null) {\n-            if (systemID != null) {\n-                ThingUID thingUID = new ThingUID(thingType, bridgehandler.getThing().getUID(), systemID);\n-                DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n-                        .withBridge(bridgehandler.getThing().getUID())\n-                        .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n-                        .withLabel(\"Hayward \" + label).withProperties(properties).build();\n-                thingDiscovered(result);\n-            }\n-        }\n+    public void onVirtualHeaterDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Virtual Heater {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER.toString());\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n     }\n \n     @Override\n     public void setThingHandler(@Nullable ThingHandler handler) {\n         if (handler instanceof HaywardBridgeHandler) {\n-            this.discoveryBridgehandler = (HaywardBridgeHandler) handler;\n+            this.handler = (HaywardBridgeHandler) handler;\n+            this.handler.setHaywardDiscoveryService(this);\n         }\n     }\n \n+    // @Override\n+    // public void setThingHandler(@Nullable ThingHandler handler) {\n+    // if (handler instanceof YamahaBridgeHandler) {\n+    // this.handler = (YamahaBridgeHandler) handler;\n+    // this.handler.setZoneDiscoveryService(this);\n+    // }\n+    // }\n+\n     @Override\n     public @Nullable ThingHandler getThingHandler() {\n-        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n-        return bridgehandler;\n+        return handler;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIyMzMxNA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561223314", "bodyText": "The previous code used to always get the values from index 0. Is getting the values from index i now a fix?", "author": "cpmeister", "createdAt": "2021-01-20T19:31:24Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -216,8 +265,14 @@ public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n                         \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n                 bowName = bridgehandler.evaluateXPath(\n                         \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n-                onVirtualHeaterDiscovered(Integer.parseInt(systemIDs.get(i)), \"Virtual Heater\", bowID.get(0),\n-                        bowName.get(0));\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwNzg0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561307842", "bodyText": "No typo.  Good catch.", "author": "matchews", "createdAt": "2021-01-20T21:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIyMzMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -94,239 +90,322 @@ public class HaywardDiscoveryService extends AbstractDiscoveryService implements\n         List<String> property2 = new ArrayList<>();\n         List<String> property3 = new ArrayList<>();\n         List<String> property4 = new ArrayList<>();\n-        Map<String, Object> properties = new HashMap<>();\n-\n-        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n \n-        if (bridgehandler != null) {\n-            // Find Backyard\n-            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n-\n-            for (int i = 0; i < names.size(); i++) {\n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n-\n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n-            }\n+        // Find Backyard\n+        names = handler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n \n-            // Find Bodies of Water\n-            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n-\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-\n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n-            }\n+        for (String name : names) {\n+            onBackyardDiscovered(Integer.parseInt(handler.account.mspSystemID), name);\n+        }\n \n-            // Find Chlorinators\n-            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+        // Find Bodies of Water\n+        systemIDs = handler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n \n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            onBOWDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i));\n+        }\n \n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+        // Find Chlorinators\n+        systemIDs = handler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onChlorinatorDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n \n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n-            }\n+        // Find ColorLogic Lights\n+        systemIDs = handler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onColorLogicDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n \n-            // Find ColorLogic Lights\n-            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+        // Find Filters\n+        systemIDs = handler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+        property1 = handler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        property2 = handler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        property3 = handler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        property4 = handler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onFilterDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0),\n+                    property1.get(i), property2.get(i), property3.get(i), property4.get(i));\n+        }\n \n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+        // Find Heaters\n+        systemIDs = handler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+            onHeaterDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+        }\n \n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+        // Find Pumps\n+        systemIDs = handler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+        property1 = handler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        property2 = handler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        property3 = handler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        property4 = handler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+            onPumpDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0),\n+                    property1.get(i), property2.get(i), property3.get(i), property4.get(i));\n+        }\n \n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+        // Find Relays\n+        systemIDs = handler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            if (!(bowID.isEmpty())) {\n+                onRelayDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n+            } else {\n+                onRelayDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), \"\", \"\");\n             }\n \n-            // Find Filters\n-            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n-            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n-            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n-            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n-            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n-\n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n-\n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n-            }\n+        }\n \n-            // Find Heaters\n-            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n-\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n-                        xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n-\n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n-\n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n-            }\n+        // Find Virtual Heaters\n+        systemIDs = handler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            onVirtualHeaterDiscovered(Integer.parseInt(systemIDs.get(i)), \"Virtual Heater\", bowID.get(0),\n+                    bowName.get(0));\n+        }\n \n-            // Find Pumps\n-            systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n-            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n-            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n-            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n-            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n-\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n-                        xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n-\n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n-\n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_PUMP, names.get(i), properties);\n+        // Find Sensors\n+        // Flow and water temp sensor aren't showing up in telemetry. Need example to determine how to differentiate\n+        // \"system\" sensors\n+        // that are reported in the BOW water temp, Filter flow switch, ORP, etc.\n+        systemIDs = handler.evaluateXPath(\"//Sensor/System-Id/text()\", xmlResponse);\n+        names = handler.evaluateXPath(\"//Sensor/Name/text()\", xmlResponse);\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            // get Body of Water for each item\n+            bowID = handler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = handler.evaluateXPath(\"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\",\n+                    xmlResponse);\n+            // Do not add backyard sensors that do not exist in the BOW thus bowID is null\n+            if (!(bowID.isEmpty())) {\n+                onSensorDiscovered(Integer.parseInt(systemIDs.get(i)), names.get(i), bowID.get(0), bowName.get(0));\n             }\n+        }\n+        return true;\n+    }\n \n-            // Find Relays\n-            systemIDs = bridgehandler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+    public void onBackyardDiscovered(int systemID, String label) {\n+        logger.debug(\"Hayward Backyard {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BACKYARD, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+    public void onBOWDiscovered(int systemID, String label) {\n+        logger.debug(\"Hayward BOW {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_BOW, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n+    public void onChlorinatorDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Chlorinator {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_CHLORINATOR, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_RELAY, names.get(i), properties);\n-            }\n+    public void onColorLogicDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Color Logic Light {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_COLORLOGIC, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-            // Find Virtual Heaters\n-            systemIDs = bridgehandler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n+    public void onFilterDiscovered(int systemID, String label, String bowID, String bowName, String minPumpSpeed,\n+            String maxPumpSpeed, String minPumpRpm, String maxPumpRpm) {\n+        logger.debug(\"Hayward Filter {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_FILTER, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, minPumpSpeed);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, maxPumpSpeed);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, minPumpRpm);\n+        properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, maxPumpRpm);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+    public void onHeaterDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Heater {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_HEATER, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-                properties.clear();\n-                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER);\n-                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n-                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+    public void onPumpDiscovered(int systemID, String label, String bowID, String bowName, String property1,\n+            String property2, String property3, String property4) {\n+        logger.debug(\"Hayward Pump {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_PUMP, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MINPUMPSPEED, property1);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MAXPUMPSPEED, property2);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MINPUMPRPM, property3);\n+        properties.put(HaywardBindingConstants.PROPERTY_PUMP_MAXPUMPRPM, property4);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, \"Heater\", properties);\n-            }\n+    public void onRelayDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Relay {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_RELAY, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n+    }\n \n-            // Find Sensors\n-            // Flow and water temp sensor aren't showing up in telemetry. Need example to determine how to differentiate\n-            // \"system\" sensors\n-            // that are reported in the BOW water temp, Filter flow switch, ORP, etc.\n-            systemIDs = bridgehandler.evaluateXPath(\"//Sensor/System-Id/text()\", xmlResponse);\n-            names = bridgehandler.evaluateXPath(\"//Sensor/Name/text()\", xmlResponse);\n-            for (int i = 0; i < systemIDs.size(); i++) {\n-                // get Body of Water for each item\n-                bowID = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n-                bowName = bridgehandler.evaluateXPath(\n-                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n-                // Do not add backyard sensors that do not exist in the BOW thus bowID is null\n-                if (!(bowID.isEmpty())) {\n-                    properties.clear();\n-                    properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.SENSOR);\n-                    properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n-                    properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n-                    properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n-\n-                    onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_SENSOR, names.get(i), properties);\n-                }\n-            }\n-        }\n-        return true;\n+    public void onSensorDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Sensor {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_SENSOR, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.SENSOR);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n     }\n \n-    public void onDeviceDiscovered(ThingTypeUID thingType, String label, Map<String, Object> properties) {\n-        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n-        String systemID = (String) properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n-        if (bridgehandler != null) {\n-            if (systemID != null) {\n-                ThingUID thingUID = new ThingUID(thingType, bridgehandler.getThing().getUID(), systemID);\n-                DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n-                        .withBridge(bridgehandler.getThing().getUID())\n-                        .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n-                        .withLabel(\"Hayward \" + label).withProperties(properties).build();\n-                thingDiscovered(result);\n-            }\n-        }\n+    public void onVirtualHeaterDiscovered(int systemID, String label, String bowID, String bowName) {\n+        logger.debug(\"Hayward Virtual Heater {} Discovered: {}\", systemID, label);\n+        ThingUID thingUID = new ThingUID(HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, handler.getThing().getUID(),\n+                Integer.toString(systemID));\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemID);\n+        properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER.toString());\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID);\n+        properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName);\n+        DiscoveryResult result = DiscoveryResultBuilder.create(thingUID).withBridge(handler.getThing().getUID())\n+                .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID).withLabel(\"Hayward \" + label)\n+                .withProperties(properties).build();\n+        thingDiscovered(result);\n     }\n \n     @Override\n     public void setThingHandler(@Nullable ThingHandler handler) {\n         if (handler instanceof HaywardBridgeHandler) {\n-            this.discoveryBridgehandler = (HaywardBridgeHandler) handler;\n+            this.handler = (HaywardBridgeHandler) handler;\n+            this.handler.setHaywardDiscoveryService(this);\n         }\n     }\n \n+    // @Override\n+    // public void setThingHandler(@Nullable ThingHandler handler) {\n+    // if (handler instanceof YamahaBridgeHandler) {\n+    // this.handler = (YamahaBridgeHandler) handler;\n+    // this.handler.setZoneDiscoveryService(this);\n+    // }\n+    // }\n+\n     @Override\n     public @Nullable ThingHandler getThingHandler() {\n-        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n-        return bridgehandler;\n+        return handler;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIzNzY5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561237691", "bodyText": "Most of your devices seem to use the same discovery logic. I suggest refactoring the logic into a single configurable utility method.\nprivate void discoverDevices(HaywardBridgeHandler bridgehandler, String xmlResponse, List<String> names, List<String> systemIDs, String type, ThingTypeUID thingType, boolean useZeroForBowIndex, @Nullable BiConsumer<Map<String, Object>,Integer> additionalPropertyConsumer){\n           for (int i = 0; i < systemIDs.size(); i++) {\n                // get Body of Water for each item\n                bowID = bridgehandler.evaluateXPath(\n                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n                bowName = bridgehandler.evaluateXPath(\n                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n\n                Map<String, Object> properties = new HashMap<>();\n                properties.put(HaywardBindingConstants.PROPERTY_TYPE, type);\n                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n                int bowIndex = useZeroForBowIndex ? 0 : i;\n                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(bowIndex));\n                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(bowIndex));\n                if(additionalPropertyConsumer != null){\n                    additionalPropertyConsumer.accept(properties, i);\n                }\n                onDeviceDiscovered(thingType, names.get(i), properties);\n            }\n}\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < systemIDs.size(); i++) {\n          \n          \n            \n                            // get Body of Water for each item\n          \n          \n            \n                            bowID = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n          \n          \n            \n                            bowName = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n          \n          \n            \n            \n          \n          \n            \n                            properties.clear();\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n          \n          \n            \n            \n          \n          \n            \n                            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n          \n          \n            \n                        }\n          \n          \n            \n                        discoverDevices(bridgehandler, xmlResponse, names, systemIDs, HaywardTypeToRequest.CHLORINATOR, HaywardBindingConstants.THING_TYPE_CHLORINATOR, false, null);\n          \n      \n    \n    \n  \n\nI did notice that some of other xpath searches use parent instead of ancestor so I'll leave it up to you to make corrections and adjustments.", "author": "cpmeister", "createdAt": "2021-01-20T19:55:54Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ4NDA4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561484085", "bodyText": "Nice approach!  This really cleaned up the discovery class.", "author": "matchews", "createdAt": "2021-01-21T02:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIzNzY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIzOTAwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561239000", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < systemIDs.size(); i++) {\n          \n          \n            \n                            // get Body of Water for each item\n          \n          \n            \n                            bowID = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n          \n          \n            \n                            bowName = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n          \n          \n            \n            \n          \n          \n            \n                            properties.clear();\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n          \n          \n            \n            \n          \n          \n            \n                            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n          \n          \n            \n                        }\n          \n          \n            \n                        discoverDevices(bridgehandler, xmlResponse, names, systemIDs, HaywardTypeToRequest.COLORLOGIC, HaywardBindingConstants.THING_TYPE_COLORLOGIC, false, null);", "author": "cpmeister", "createdAt": "2021-01-20T19:58:01Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIzOTk0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561239948", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < systemIDs.size(); i++) {\n          \n          \n            \n                            // get Body of Water for each item\n          \n          \n            \n                            bowID = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n          \n          \n            \n                            bowName = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n          \n          \n            \n            \n          \n          \n            \n                            properties.clear();\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n          \n          \n            \n            \n          \n          \n            \n                            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n          \n          \n            \n                        }\n          \n          \n            \n                        discoverDevices(bridgehandler, xmlResponse, names, systemIDs, HaywardTypeToRequest.FILTER, HaywardBindingConstants.THING_TYPE_FILTER, false, (props, i) -> {\n          \n          \n            \n                            props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n          \n          \n            \n                            props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n          \n          \n            \n                            props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n          \n          \n            \n                            props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n          \n          \n            \n                        });", "author": "cpmeister", "createdAt": "2021-01-20T19:59:43Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find Filters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n+            }", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0MDY1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561240650", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < systemIDs.size(); i++) {\n          \n          \n            \n                            // get Body of Water for each item\n          \n          \n            \n                            bowID = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n          \n          \n            \n                                    xmlResponse);\n          \n          \n            \n                            bowName = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n          \n          \n            \n            \n          \n          \n            \n                            properties.clear();\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n          \n          \n            \n            \n          \n          \n            \n                            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n          \n          \n            \n                        }\n          \n          \n            \n                        discoverDevices(bridgehandler, xmlResponse, names, systemIDs, HaywardTypeToRequest.HEATER, HaywardBindingConstants.THING_TYPE_HEATER, false, null);", "author": "cpmeister", "createdAt": "2021-01-20T20:00:45Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find Filters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n+            }\n+\n+            // Find Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n+            }", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0MTI2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561241261", "bodyText": "I assume this code was left accidentally.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n          \n          \n            \n                        property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n          \n          \n            \n                        property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n          \n          \n            \n                        property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n          \n          \n            \n                        property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);", "author": "cpmeister", "createdAt": "2021-01-20T20:01:50Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find Filters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n+            }\n+\n+            // Find Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n+            }\n+\n+            // Find Pumps\n+            systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMxNjc0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561316748", "bodyText": "Those are actually needed, but weren't put into the properties.  I don't have some of these devices in my backyard so some are untested.", "author": "matchews", "createdAt": "2021-01-20T21:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0MTI2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0MTU5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561241590", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < systemIDs.size(); i++) {\n          \n          \n            \n                            // get Body of Water for each item\n          \n          \n            \n                            bowID = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n          \n          \n            \n                                    xmlResponse);\n          \n          \n            \n                            bowName = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n          \n          \n            \n            \n          \n          \n            \n                            properties.clear();\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n          \n          \n            \n            \n          \n          \n            \n                            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_PUMP, names.get(i), properties);\n          \n          \n            \n                        }\n          \n          \n            \n                        discoverDevices(bridgehandler, xmlResponse, names, systemIDs, HaywardTypeToRequest.PUMP, HaywardBindingConstants.THING_TYPE_PUMP, false, null);", "author": "cpmeister", "createdAt": "2021-01-20T20:02:27Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find Filters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n+            }\n+\n+            // Find Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n+            }\n+\n+            // Find Pumps\n+            systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_PUMP, names.get(i), properties);\n+            }", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0MjAzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561242037", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < systemIDs.size(); i++) {\n          \n          \n            \n                            // get Body of Water for each item\n          \n          \n            \n                            bowID = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n          \n          \n            \n                            bowName = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n          \n          \n            \n            \n          \n          \n            \n                            properties.clear();\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n          \n          \n            \n            \n          \n          \n            \n                            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_RELAY, names.get(i), properties);\n          \n          \n            \n                        }\n          \n          \n            \n                        discoverDevices(bridgehandler, xmlResponse, names, systemIDs, HaywardTypeToRequest.RELAY, HaywardBindingConstants.THING_TYPE_RELAY, true, null);", "author": "cpmeister", "createdAt": "2021-01-20T20:03:18Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find Filters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n+            }\n+\n+            // Find Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n+            }\n+\n+            // Find Pumps\n+            systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_PUMP, names.get(i), properties);\n+            }\n+\n+            // Find Relays\n+            systemIDs = bridgehandler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_RELAY, names.get(i), properties);\n+            }", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0NTQ2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561245460", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        systemIDs = bridgehandler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n          \n          \n            \n                        systemIDs = bridgehandler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n          \n          \n            \n                        //all virtual heaters have the same name.\n          \n          \n            \n                        names = new ArrayList<>(systemIDs);\n          \n          \n            \n                        Collections.fill(names, \"Heater\");", "author": "cpmeister", "createdAt": "2021-01-20T20:09:16Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find Filters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n+            }\n+\n+            // Find Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n+            }\n+\n+            // Find Pumps\n+            systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_PUMP, names.get(i), properties);\n+            }\n+\n+            // Find Relays\n+            systemIDs = bridgehandler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_RELAY, names.get(i), properties);\n+            }\n+\n+            // Find Virtual Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n+", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0Njk2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561246960", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < systemIDs.size(); i++) {\n          \n          \n            \n                            // get Body of Water for each item\n          \n          \n            \n                            bowID = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n          \n          \n            \n                            bowName = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n          \n          \n            \n            \n          \n          \n            \n                            properties.clear();\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER);\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n          \n          \n            \n                            properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n          \n          \n            \n            \n          \n          \n            \n                            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, \"Heater\", properties);\n          \n          \n            \n                        }\n          \n          \n            \n                        discoverDevices(bridgehandler, xmlResponse, names, systemIDs, HaywardTypeToRequest.VIRTUALHEATER, HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, false, null);", "author": "cpmeister", "createdAt": "2021-01-20T20:10:59Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find Filters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n+            }\n+\n+            // Find Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n+            }\n+\n+            // Find Pumps\n+            systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_PUMP, names.get(i), properties);\n+            }\n+\n+            // Find Relays\n+            systemIDs = bridgehandler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_RELAY, names.get(i), properties);\n+            }\n+\n+            // Find Virtual Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, \"Heater\", properties);\n+            }", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0ODIzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561248232", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < systemIDs.size(); i++) {\n          \n          \n            \n                            // get Body of Water for each item\n          \n          \n            \n                            bowID = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n          \n          \n            \n                            bowName = bridgehandler.evaluateXPath(\n          \n          \n            \n                                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n          \n          \n            \n                            // Do not add backyard sensors that do not exist in the BOW thus bowID is null\n          \n          \n            \n                            if (!(bowID.isEmpty())) {\n          \n          \n            \n                                properties.clear();\n          \n          \n            \n                                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.SENSOR);\n          \n          \n            \n                                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n          \n          \n            \n                                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n          \n          \n            \n                                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n          \n          \n            \n            \n          \n          \n            \n                                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_SENSOR, names.get(i), properties);\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        discoverDevices(bridgehandler, xmlResponse, names, systemIDs, HaywardTypeToRequest.SENSOR, HaywardBindingConstants.THING_TYPE_SENSOR, true, null);", "author": "cpmeister", "createdAt": "2021-01-20T20:12:02Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find Filters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n+            }\n+\n+            // Find Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n+            }\n+\n+            // Find Pumps\n+            systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_PUMP, names.get(i), properties);\n+            }\n+\n+            // Find Relays\n+            systemIDs = bridgehandler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_RELAY, names.get(i), properties);\n+            }\n+\n+            // Find Virtual Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, \"Heater\", properties);\n+            }\n+\n+            // Find Sensors\n+            // Flow and water temp sensor aren't showing up in telemetry. Need example to determine how to differentiate\n+            // \"system\" sensors\n+            // that are reported in the BOW water temp, Filter flow switch, ORP, etc.\n+            systemIDs = bridgehandler.evaluateXPath(\"//Sensor/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Sensor/Name/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+                // Do not add backyard sensors that do not exist in the BOW thus bowID is null\n+                if (!(bowID.isEmpty())) {\n+                    properties.clear();\n+                    properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.SENSOR);\n+                    properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                    properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n+                    properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n+\n+                    onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_SENSOR, names.get(i), properties);\n+                }\n+            }", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI1NDg4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561254880", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n          \n          \n            \n                    return bridgehandler;\n          \n          \n            \n                    return discoveryBridgehandler;", "author": "cpmeister", "createdAt": "2021-01-20T20:17:22Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);\n+            }\n+\n+            // Find Bodies of Water\n+            systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), properties);\n+            }\n+\n+            // Find Chlorinators\n+            systemIDs = bridgehandler.evaluateXPath(\"//Chlorinator/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Chlorinator/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.CHLORINATOR);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find ColorLogic Lights\n+            systemIDs = bridgehandler.evaluateXPath(\"//ColorLogic-Light/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//ColorLogic-Light/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.COLORLOGIC);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_CHLORINATOR, names.get(i), properties);\n+            }\n+\n+            // Find Filters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Filter/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.FILTER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, property1.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, property2.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, property3.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, property4.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_FILTER, names.get(i), properties);\n+            }\n+\n+            // Find Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater-Equipment/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Heater-Equipment/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.HEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_HEATER, names.get(i), properties);\n+            }\n+\n+            // Find Pumps\n+            systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Filter/Name/text()\", xmlResponse);\n+            property1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+            property2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+            property3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+            property4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\",\n+                        xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.PUMP);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_PUMP, names.get(i), properties);\n+            }\n+\n+            // Find Relays\n+            systemIDs = bridgehandler.evaluateXPath(\"//Relay/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Relay/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.RELAY);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_RELAY, names.get(i), properties);\n+            }\n+\n+            // Find Virtual Heaters\n+            systemIDs = bridgehandler.evaluateXPath(\"//Heater/System-Id/text()\", xmlResponse);\n+\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.VIRTUALHEATER);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(i));\n+                properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(i));\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, \"Heater\", properties);\n+            }\n+\n+            // Find Sensors\n+            // Flow and water temp sensor aren't showing up in telemetry. Need example to determine how to differentiate\n+            // \"system\" sensors\n+            // that are reported in the BOW water temp, Filter flow switch, ORP, etc.\n+            systemIDs = bridgehandler.evaluateXPath(\"//Sensor/System-Id/text()\", xmlResponse);\n+            names = bridgehandler.evaluateXPath(\"//Sensor/Name/text()\", xmlResponse);\n+            for (int i = 0; i < systemIDs.size(); i++) {\n+                // get Body of Water for each item\n+                bowID = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/System-Id/text()\", xmlResponse);\n+                bowName = bridgehandler.evaluateXPath(\n+                        \"//*[System-Id=\" + systemIDs.get(i) + \"]/parent::Body-of-water/Name/text()\", xmlResponse);\n+                // Do not add backyard sensors that do not exist in the BOW thus bowID is null\n+                if (!(bowID.isEmpty())) {\n+                    properties.clear();\n+                    properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.SENSOR);\n+                    properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+                    properties.put(HaywardBindingConstants.PROPERTY_BOWID, bowID.get(0));\n+                    properties.put(HaywardBindingConstants.PROPERTY_BOWNAME, bowName.get(0));\n+\n+                    onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_SENSOR, names.get(i), properties);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public void onDeviceDiscovered(ThingTypeUID thingType, String label, Map<String, Object> properties) {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        String systemID = (String) properties.get(HaywardBindingConstants.PROPERTY_SYSTEM_ID);\n+        if (bridgehandler != null) {\n+            if (systemID != null) {\n+                ThingUID thingUID = new ThingUID(thingType, bridgehandler.getThing().getUID(), systemID);\n+                DiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n+                        .withBridge(bridgehandler.getThing().getUID())\n+                        .withRepresentationProperty(HaywardBindingConstants.PROPERTY_SYSTEM_ID)\n+                        .withLabel(\"Hayward \" + label).withProperties(properties).build();\n+                thingDiscovered(result);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof HaywardBridgeHandler) {\n+            this.discoveryBridgehandler = (HaywardBridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        return bridgehandler;", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI1ODI2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561258260", "bodyText": "If system id is your representation property for a backyard, then this code would only be able to discover a single backyard since all backyard things would be assigned the same system id.", "author": "cpmeister", "createdAt": "2021-01-20T20:20:06Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard\n+            names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+            for (int i = 0; i < names.size(); i++) {\n+                properties.clear();\n+                properties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+                properties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+                onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), properties);", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMyNDE3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561324177", "bodyText": "Correct.  There is only one backyard per MSP account.", "author": "matchews", "createdAt": "2021-01-20T21:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI1ODI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI2MDM2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561260365", "bodyText": "Rather than have all of your code get nested in an if block, you might consider just returning early instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n          \n          \n            \n            \n          \n          \n            \n                    if (bridgehandler != null) {\n          \n          \n            \n                        // Find Backyard\n          \n          \n            \n                    HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n          \n          \n            \n            \n          \n          \n            \n                    if (bridgehandler == null) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }", "author": "cpmeister", "createdAt": "2021-01-20T20:21:51Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized boolean mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        List<String> bowName = new ArrayList<>();\n+        List<String> bowID = new ArrayList<>();\n+        List<String> property1 = new ArrayList<>();\n+        List<String> property2 = new ArrayList<>();\n+        List<String> property3 = new ArrayList<>();\n+        List<String> property4 = new ArrayList<>();\n+        Map<String, Object> properties = new HashMap<>();\n+\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler != null) {\n+            // Find Backyard", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI2MjA0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r561262045", "bodyText": "Is this constructor used? It doesn't seem you are using the parameter that is passed in.", "author": "cpmeister", "createdAt": "2021-01-20T20:23:12Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    /**\n+     * Constructs a zone discovery service.\n+     * Registers this zone discovery service programmatically.\n+     * Call {@link ZoneDiscoveryService#destroy()} to unregister the service after use.\n+     */\n+    public HaywardDiscoveryService(HaywardBridgeHandler bridge) throws IllegalArgumentException {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }", "originalCommit": "d9bd8cd567e43404322b13b7ca7ee0ab5a3f8c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 907feb135c..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMxNzkxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r562317916", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<String> bowName = new ArrayList<>();\n          \n          \n            \n                        List<String> bowID = new ArrayList<>();\n          \n          \n            \n            \n          \n          \n            \n                        // get Body of Water for each item\n          \n          \n            \n                        bowID = bridgehandler.evaluateXPath(\n          \n          \n            \n                                \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n          \n          \n            \n                        bowName = bridgehandler.evaluateXPath(\n          \n          \n            \n                                \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);\n          \n          \n            \n                        // get Body of Water for each item\n          \n          \n            \n                        List<String> bowID = bridgehandler.evaluateXPath(\n          \n          \n            \n                                \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n          \n          \n            \n                        List<String> bowName = bridgehandler.evaluateXPath(\n          \n          \n            \n                                \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);", "author": "cpmeister", "createdAt": "2021-01-22T01:55:50Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized void mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        Map<String, Object> backyardProperties = new HashMap<>();\n+        Map<String, Object> bowProperties = new HashMap<>();\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler == null) {\n+            return;\n+        }\n+\n+        // Find Backyard\n+        names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < names.size(); i++) {\n+            backyardProperties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+            backyardProperties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), backyardProperties);\n+        }\n+\n+        // Find Bodies of Water\n+        systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+        names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            bowProperties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+            bowProperties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), bowProperties);\n+        }\n+\n+        // Find Chlorinators\n+        discoverDevices(bridgehandler, xmlResponse, \"Chlorinator\", HaywardTypeToRequest.CHLORINATOR,\n+                HaywardBindingConstants.THING_TYPE_CHLORINATOR, null);\n+\n+        // Find ColorLogic Lights\n+        discoverDevices(bridgehandler, xmlResponse, \"ColorLogic-Light\", HaywardTypeToRequest.COLORLOGIC,\n+                HaywardBindingConstants.THING_TYPE_COLORLOGIC, null);\n+\n+        // Find Filters\n+        final List<String> filterProperty1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        final List<String> filterProperty2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        final List<String> filterProperty3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        final List<String> filterProperty4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        discoverDevices(bridgehandler, xmlResponse, \"Filter\", HaywardTypeToRequest.FILTER,\n+                HaywardBindingConstants.THING_TYPE_FILTER, (props, i) -> {\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, filterProperty1.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, filterProperty2.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, filterProperty3.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, filterProperty4.get(i));\n+                });\n+\n+        // Find Heaters\n+        discoverDevices(bridgehandler, xmlResponse, \"Heater-Equipment\", HaywardTypeToRequest.HEATER,\n+                HaywardBindingConstants.THING_TYPE_HEATER, null);\n+\n+        // Find Pumps\n+        systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+        names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+        final List<String> pumpProperty1 = bridgehandler.evaluateXPath(\"//Pump/Min-Pump-Speed/text()\", xmlResponse);\n+        final List<String> pumpProperty2 = bridgehandler.evaluateXPath(\"//Pump/Max-Pump-Speed/text()\", xmlResponse);\n+        final List<String> pumpProperty3 = bridgehandler.evaluateXPath(\"//Pump/Min-Pump-RPM/text()\", xmlResponse);\n+        final List<String> pumpProperty4 = bridgehandler.evaluateXPath(\"//Pump/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        discoverDevices(bridgehandler, xmlResponse, \"Pump\", HaywardTypeToRequest.PUMP,\n+                HaywardBindingConstants.THING_TYPE_FILTER, (props, i) -> {\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, pumpProperty1.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, pumpProperty2.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, pumpProperty3.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, pumpProperty4.get(i));\n+                });\n+\n+        // Find Relays\n+        discoverDevices(bridgehandler, xmlResponse, \"Relay\", HaywardTypeToRequest.RELAY,\n+                HaywardBindingConstants.THING_TYPE_RELAY, null);\n+\n+        // Find Virtual Heaters\n+        discoverDevices(bridgehandler, xmlResponse, \"Heater\", HaywardTypeToRequest.VIRTUALHEATER,\n+                HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, null);\n+\n+        // Find Sensors\n+        discoverDevices(bridgehandler, xmlResponse, \"Sensor\", HaywardTypeToRequest.SENSOR,\n+                HaywardBindingConstants.THING_TYPE_SENSOR, null);\n+        return;\n+    }\n+\n+    private void discoverDevices(HaywardBridgeHandler bridgehandler, String xmlResponse, String xmlSearchTerm,\n+            HaywardTypeToRequest type, ThingTypeUID thingType,\n+            @Nullable BiConsumer<Map<String, Object>, Integer> additionalPropertyConsumer) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+\n+        systemIDs = bridgehandler.evaluateXPath(\"//\" + xmlSearchTerm + \"/System-Id/text()\", xmlResponse);\n+\n+        // Set Virtual Heater Name\n+        if (thingType == HaywardBindingConstants.THING_TYPE_VIRTUALHEATER) {\n+            names = new ArrayList<>(systemIDs);\n+            Collections.fill(names, \"Heater\");\n+        } else {\n+            names = bridgehandler.evaluateXPath(\"//\" + xmlSearchTerm + \"/Name/text()\", xmlResponse);\n+        }\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            List<String> bowName = new ArrayList<>();\n+            List<String> bowID = new ArrayList<>();\n+\n+            // get Body of Water for each item\n+            bowID = bridgehandler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/System-Id/text()\", xmlResponse);\n+            bowName = bridgehandler.evaluateXPath(\n+                    \"//*[System-Id=\" + systemIDs.get(i) + \"]/ancestor::Body-of-water/Name/text()\", xmlResponse);", "originalCommit": "1ac14b0332ed101f0a7e571414ce466fe1aa63bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 41ca32f0c3..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMxODE1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r562318153", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> systemIDs = new ArrayList<>();\n          \n          \n            \n                    List<String> names = new ArrayList<>();\n          \n          \n            \n            \n          \n          \n            \n                    systemIDs = bridgehandler.evaluateXPath(\"//\" + xmlSearchTerm + \"/System-Id/text()\", xmlResponse);\n          \n          \n            \n                    List<String> systemIDs = bridgehandler.evaluateXPath(\"//\" + xmlSearchTerm + \"/System-Id/text()\", xmlResponse);\n          \n          \n            \n                    List<String> names;", "author": "cpmeister", "createdAt": "2021-01-22T01:56:31Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized void mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        Map<String, Object> backyardProperties = new HashMap<>();\n+        Map<String, Object> bowProperties = new HashMap<>();\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler == null) {\n+            return;\n+        }\n+\n+        // Find Backyard\n+        names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < names.size(); i++) {\n+            backyardProperties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+            backyardProperties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), backyardProperties);\n+        }\n+\n+        // Find Bodies of Water\n+        systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+        names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            bowProperties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+            bowProperties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), bowProperties);\n+        }\n+\n+        // Find Chlorinators\n+        discoverDevices(bridgehandler, xmlResponse, \"Chlorinator\", HaywardTypeToRequest.CHLORINATOR,\n+                HaywardBindingConstants.THING_TYPE_CHLORINATOR, null);\n+\n+        // Find ColorLogic Lights\n+        discoverDevices(bridgehandler, xmlResponse, \"ColorLogic-Light\", HaywardTypeToRequest.COLORLOGIC,\n+                HaywardBindingConstants.THING_TYPE_COLORLOGIC, null);\n+\n+        // Find Filters\n+        final List<String> filterProperty1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        final List<String> filterProperty2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        final List<String> filterProperty3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        final List<String> filterProperty4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        discoverDevices(bridgehandler, xmlResponse, \"Filter\", HaywardTypeToRequest.FILTER,\n+                HaywardBindingConstants.THING_TYPE_FILTER, (props, i) -> {\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, filterProperty1.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, filterProperty2.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, filterProperty3.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, filterProperty4.get(i));\n+                });\n+\n+        // Find Heaters\n+        discoverDevices(bridgehandler, xmlResponse, \"Heater-Equipment\", HaywardTypeToRequest.HEATER,\n+                HaywardBindingConstants.THING_TYPE_HEATER, null);\n+\n+        // Find Pumps\n+        systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+        names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+        final List<String> pumpProperty1 = bridgehandler.evaluateXPath(\"//Pump/Min-Pump-Speed/text()\", xmlResponse);\n+        final List<String> pumpProperty2 = bridgehandler.evaluateXPath(\"//Pump/Max-Pump-Speed/text()\", xmlResponse);\n+        final List<String> pumpProperty3 = bridgehandler.evaluateXPath(\"//Pump/Min-Pump-RPM/text()\", xmlResponse);\n+        final List<String> pumpProperty4 = bridgehandler.evaluateXPath(\"//Pump/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        discoverDevices(bridgehandler, xmlResponse, \"Pump\", HaywardTypeToRequest.PUMP,\n+                HaywardBindingConstants.THING_TYPE_FILTER, (props, i) -> {\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, pumpProperty1.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, pumpProperty2.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, pumpProperty3.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, pumpProperty4.get(i));\n+                });\n+\n+        // Find Relays\n+        discoverDevices(bridgehandler, xmlResponse, \"Relay\", HaywardTypeToRequest.RELAY,\n+                HaywardBindingConstants.THING_TYPE_RELAY, null);\n+\n+        // Find Virtual Heaters\n+        discoverDevices(bridgehandler, xmlResponse, \"Heater\", HaywardTypeToRequest.VIRTUALHEATER,\n+                HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, null);\n+\n+        // Find Sensors\n+        discoverDevices(bridgehandler, xmlResponse, \"Sensor\", HaywardTypeToRequest.SENSOR,\n+                HaywardBindingConstants.THING_TYPE_SENSOR, null);\n+        return;\n+    }\n+\n+    private void discoverDevices(HaywardBridgeHandler bridgehandler, String xmlResponse, String xmlSearchTerm,\n+            HaywardTypeToRequest type, ThingTypeUID thingType,\n+            @Nullable BiConsumer<Map<String, Object>, Integer> additionalPropertyConsumer) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+\n+        systemIDs = bridgehandler.evaluateXPath(\"//\" + xmlSearchTerm + \"/System-Id/text()\", xmlResponse);", "originalCommit": "1ac14b0332ed101f0a7e571414ce466fe1aa63bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 41ca32f0c3..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMxODMxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r562318316", "bodyText": "These variable assignments are not used in the rest of the method, so it is safe to remove them.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n          \n          \n            \n                    names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);", "author": "cpmeister", "createdAt": "2021-01-22T01:57:04Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized void mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        Map<String, Object> backyardProperties = new HashMap<>();\n+        Map<String, Object> bowProperties = new HashMap<>();\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler == null) {\n+            return;\n+        }\n+\n+        // Find Backyard\n+        names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < names.size(); i++) {\n+            backyardProperties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+            backyardProperties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), backyardProperties);\n+        }\n+\n+        // Find Bodies of Water\n+        systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+        names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            bowProperties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+            bowProperties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), bowProperties);\n+        }\n+\n+        // Find Chlorinators\n+        discoverDevices(bridgehandler, xmlResponse, \"Chlorinator\", HaywardTypeToRequest.CHLORINATOR,\n+                HaywardBindingConstants.THING_TYPE_CHLORINATOR, null);\n+\n+        // Find ColorLogic Lights\n+        discoverDevices(bridgehandler, xmlResponse, \"ColorLogic-Light\", HaywardTypeToRequest.COLORLOGIC,\n+                HaywardBindingConstants.THING_TYPE_COLORLOGIC, null);\n+\n+        // Find Filters\n+        final List<String> filterProperty1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        final List<String> filterProperty2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        final List<String> filterProperty3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        final List<String> filterProperty4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        discoverDevices(bridgehandler, xmlResponse, \"Filter\", HaywardTypeToRequest.FILTER,\n+                HaywardBindingConstants.THING_TYPE_FILTER, (props, i) -> {\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, filterProperty1.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, filterProperty2.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, filterProperty3.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, filterProperty4.get(i));\n+                });\n+\n+        // Find Heaters\n+        discoverDevices(bridgehandler, xmlResponse, \"Heater-Equipment\", HaywardTypeToRequest.HEATER,\n+                HaywardBindingConstants.THING_TYPE_HEATER, null);\n+\n+        // Find Pumps\n+        systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+        names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);", "originalCommit": "1ac14b0332ed101f0a7e571414ce466fe1aa63bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 41ca32f0c3..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMxODQzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8685#discussion_r562318432", "bodyText": "This return isn't necessary.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return;", "author": "cpmeister", "createdAt": "2021-01-22T01:57:26Z", "path": "bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.haywardomnilogic.internal.discovery;\n+\n+import static org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants.THING_TYPES_UIDS;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardBindingConstants;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardException;\n+import org.openhab.binding.haywardomnilogic.internal.HaywardTypeToRequest;\n+import org.openhab.binding.haywardomnilogic.internal.handler.HaywardBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Sets up the discovery results and details\n+ *\n+ * @author Matt Myers - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class HaywardDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(HaywardDiscoveryService.class);\n+    private @Nullable HaywardBridgeHandler discoveryBridgehandler;\n+\n+    public HaywardDiscoveryService() {\n+        super(THING_TYPES_UIDS, 0, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+        try {\n+            if (bridgehandler != null) {\n+                String xmlResults = bridgehandler.getMspConfig();\n+                mspConfigDiscovery(xmlResults);\n+            }\n+        } catch (HaywardException e) {\n+            logger.warn(\"Exception during discovery scan: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            return;\n+        }\n+    }\n+\n+    public synchronized void mspConfigDiscovery(String xmlResponse) {\n+        List<String> systemIDs = new ArrayList<>();\n+        List<String> names = new ArrayList<>();\n+        Map<String, Object> backyardProperties = new HashMap<>();\n+        Map<String, Object> bowProperties = new HashMap<>();\n+        HaywardBridgeHandler bridgehandler = discoveryBridgehandler;\n+\n+        if (bridgehandler == null) {\n+            return;\n+        }\n+\n+        // Find Backyard\n+        names = bridgehandler.evaluateXPath(\"//Backyard/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < names.size(); i++) {\n+            backyardProperties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BACKYARD);\n+            backyardProperties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, bridgehandler.account.mspSystemID);\n+\n+            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BACKYARD, names.get(i), backyardProperties);\n+        }\n+\n+        // Find Bodies of Water\n+        systemIDs = bridgehandler.evaluateXPath(\"//Body-of-water/System-Id/text()\", xmlResponse);\n+        names = bridgehandler.evaluateXPath(\"//Body-of-water/Name/text()\", xmlResponse);\n+\n+        for (int i = 0; i < systemIDs.size(); i++) {\n+            bowProperties.put(HaywardBindingConstants.PROPERTY_TYPE, HaywardTypeToRequest.BOW);\n+            bowProperties.put(HaywardBindingConstants.PROPERTY_SYSTEM_ID, systemIDs.get(i));\n+\n+            onDeviceDiscovered(HaywardBindingConstants.THING_TYPE_BOW, names.get(i), bowProperties);\n+        }\n+\n+        // Find Chlorinators\n+        discoverDevices(bridgehandler, xmlResponse, \"Chlorinator\", HaywardTypeToRequest.CHLORINATOR,\n+                HaywardBindingConstants.THING_TYPE_CHLORINATOR, null);\n+\n+        // Find ColorLogic Lights\n+        discoverDevices(bridgehandler, xmlResponse, \"ColorLogic-Light\", HaywardTypeToRequest.COLORLOGIC,\n+                HaywardBindingConstants.THING_TYPE_COLORLOGIC, null);\n+\n+        // Find Filters\n+        final List<String> filterProperty1 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-Speed/text()\", xmlResponse);\n+        final List<String> filterProperty2 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-Speed/text()\", xmlResponse);\n+        final List<String> filterProperty3 = bridgehandler.evaluateXPath(\"//Filter/Min-Pump-RPM/text()\", xmlResponse);\n+        final List<String> filterProperty4 = bridgehandler.evaluateXPath(\"//Filter/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        discoverDevices(bridgehandler, xmlResponse, \"Filter\", HaywardTypeToRequest.FILTER,\n+                HaywardBindingConstants.THING_TYPE_FILTER, (props, i) -> {\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, filterProperty1.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, filterProperty2.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, filterProperty3.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, filterProperty4.get(i));\n+                });\n+\n+        // Find Heaters\n+        discoverDevices(bridgehandler, xmlResponse, \"Heater-Equipment\", HaywardTypeToRequest.HEATER,\n+                HaywardBindingConstants.THING_TYPE_HEATER, null);\n+\n+        // Find Pumps\n+        systemIDs = bridgehandler.evaluateXPath(\"//Pump/System-Id/text()\", xmlResponse);\n+        names = bridgehandler.evaluateXPath(\"//Pump/Name/text()\", xmlResponse);\n+        final List<String> pumpProperty1 = bridgehandler.evaluateXPath(\"//Pump/Min-Pump-Speed/text()\", xmlResponse);\n+        final List<String> pumpProperty2 = bridgehandler.evaluateXPath(\"//Pump/Max-Pump-Speed/text()\", xmlResponse);\n+        final List<String> pumpProperty3 = bridgehandler.evaluateXPath(\"//Pump/Min-Pump-RPM/text()\", xmlResponse);\n+        final List<String> pumpProperty4 = bridgehandler.evaluateXPath(\"//Pump/Max-Pump-RPM/text()\", xmlResponse);\n+\n+        discoverDevices(bridgehandler, xmlResponse, \"Pump\", HaywardTypeToRequest.PUMP,\n+                HaywardBindingConstants.THING_TYPE_FILTER, (props, i) -> {\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPSPEED, pumpProperty1.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPSPEED, pumpProperty2.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MINPUMPRPM, pumpProperty3.get(i));\n+                    props.put(HaywardBindingConstants.PROPERTY_FILTER_MAXPUMPRPM, pumpProperty4.get(i));\n+                });\n+\n+        // Find Relays\n+        discoverDevices(bridgehandler, xmlResponse, \"Relay\", HaywardTypeToRequest.RELAY,\n+                HaywardBindingConstants.THING_TYPE_RELAY, null);\n+\n+        // Find Virtual Heaters\n+        discoverDevices(bridgehandler, xmlResponse, \"Heater\", HaywardTypeToRequest.VIRTUALHEATER,\n+                HaywardBindingConstants.THING_TYPE_VIRTUALHEATER, null);\n+\n+        // Find Sensors\n+        discoverDevices(bridgehandler, xmlResponse, \"Sensor\", HaywardTypeToRequest.SENSOR,\n+                HaywardBindingConstants.THING_TYPE_SENSOR, null);\n+        return;", "originalCommit": "1ac14b0332ed101f0a7e571414ce466fe1aa63bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "chunk": "diff --git a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\nindex 41ca32f0c3..0799479c1b 100644\n--- a/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n+++ b/bundles/org.openhab.binding.haywardomnilogic/src/main/java/org/openhab/binding/haywardomnilogic/internal/discovery/HaywardDiscoveryService.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"oid": "7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "url": "https://github.com/openhab/openhab-addons/commit/7ad7d6c40f640e72795c52e20f60d1e0cfa806d3", "message": "Converted to OH3\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "c729ec60eae32f0c83ada7c488d436e929ba91e8", "url": "https://github.com/openhab/openhab-addons/commit/c729ec60eae32f0c83ada7c488d436e929ba91e8", "message": "Signing\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "c4a818f49ac38a400514bce3be64a254989dd04c", "url": "https://github.com/openhab/openhab-addons/commit/c4a818f49ac38a400514bce3be64a254989dd04c", "message": "Added backyardsate option value 0 = \"Powered Off\"\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "77dac20ebeac07fb17222dc7a1105f46587c8ca8", "url": "https://github.com/openhab/openhab-addons/commit/77dac20ebeac07fb17222dc7a1105f46587c8ca8", "message": "Add @NonNullByDefault to HaywardTypeToRequest\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "84cf350583be1f2f8015eef34b328fa48f8945ce", "url": "https://github.com/openhab/openhab-addons/commit/84cf350583be1f2f8015eef34b328fa48f8945ce", "message": "Add @NonNullByDefault to HaywardThingHandler\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "34411b48f9c278f9e950b2ec17df16dc6188f544", "url": "https://github.com/openhab/openhab-addons/commit/34411b48f9c278f9e950b2ec17df16dc6188f544", "message": "Fix formatting in bom/openhab-addons/pom.xml\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "a8335a0bd4b827b1d0cb3fbee5947ebd796fb5e2", "url": "https://github.com/openhab/openhab-addons/commit/a8335a0bd4b827b1d0cb3fbee5947ebd796fb5e2", "message": "shorter line lengths in readme file to make more readable in text editor\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "19855a25f45cdc821776e51a127a42a3d8d51fb9", "url": "https://github.com/openhab/openhab-addons/commit/19855a25f45cdc821776e51a127a42a3d8d51fb9", "message": "Fixed pump.xml typo\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "0359f0e74de8089c2906c1b00e06dc0d95a5e6a7", "url": "https://github.com/openhab/openhab-addons/commit/0359f0e74de8089c2906c1b00e06dc0d95a5e6a7", "message": "Updating units on a number of things\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "8d3e6f3724ea0fd193a306fd5a43bbdd07f32e03", "url": "https://github.com/openhab/openhab-addons/commit/8d3e6f3724ea0fd193a306fd5a43bbdd07f32e03", "message": "remove commented/unused code\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "4225e47fbc56aa13bfd92dd34a19ff5c44debce8", "url": "https://github.com/openhab/openhab-addons/commit/4225e47fbc56aa13bfd92dd34a19ff5c44debce8", "message": "Update sensor.xml BOW description\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "4eebbbb399e26a304db177dc9b354f8733337d58", "url": "https://github.com/openhab/openhab-addons/commit/4eebbbb399e26a304db177dc9b354f8733337d58", "message": "remove PPM units from description\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "d12af5a6c98563506b1cef9fbac780bd11521187", "url": "https://github.com/openhab/openhab-addons/commit/d12af5a6c98563506b1cef9fbac780bd11521187", "message": "Update API config.hostname to config.endpointUrl\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "5d612a6f712983d933a0f5c47aac31ed29b023bf", "url": "https://github.com/openhab/openhab-addons/commit/5d612a6f712983d933a0f5c47aac31ed29b023bf", "message": "Updated handlers to parse data for multiple things\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:05Z", "type": "commit"}, {"oid": "db231df270b27d82d423123ae17d273426917d16", "url": "https://github.com/openhab/openhab-addons/commit/db231df270b27d82d423123ae17d273426917d16", "message": "Removed eroneous chlorinator code from heater handler\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "1b067d589c9988fd0dba47404717e4c939eea3e0", "url": "https://github.com/openhab/openhab-addons/commit/1b067d589c9988fd0dba47404717e4c939eea3e0", "message": "Update logging levels\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "7ba7d126869af1e4c2d08b7af4d66f3d7ede014f", "url": "https://github.com/openhab/openhab-addons/commit/7ba7d126869af1e4c2d08b7af4d66f3d7ede014f", "message": "Sign off\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "855b77fe1f488b338f0a5e8f4ca98a0195e8be38", "url": "https://github.com/openhab/openhab-addons/commit/855b77fe1f488b338f0a5e8f4ca98a0195e8be38", "message": "Updating units on a number of things\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "1659b9a382188ae7f6d3879a7a0954396b76c02e", "url": "https://github.com/openhab/openhab-addons/commit/1659b9a382188ae7f6d3879a7a0954396b76c02e", "message": "remove PPM units from description\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "638ff822a8770b50f22d5099f92fc4536cc0233e", "url": "https://github.com/openhab/openhab-addons/commit/638ff822a8770b50f22d5099f92fc4536cc0233e", "message": "Sign off\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "de0f4292a06ff8b24fef8941638a5d87c68669e2", "url": "https://github.com/openhab/openhab-addons/commit/de0f4292a06ff8b24fef8941638a5d87c68669e2", "message": "Added support for metric units. Cleaned up thing.xml's\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "93d50f32fc50c7c13983d0e38b491e34f4e11e2f", "url": "https://github.com/openhab/openhab-addons/commit/93d50f32fc50c7c13983d0e38b491e34f4e11e2f", "message": "Corrected all items except parsing from last review\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "bd1d1646acdf503981a7dc8043cb91578c60bb17", "url": "https://github.com/openhab/openhab-addons/commit/bd1d1646acdf503981a7dc8043cb91578c60bb17", "message": "Misc changes requested by fwolter\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "19e13612d36e2e6843398700564039b4d5c15193", "url": "https://github.com/openhab/openhab-addons/commit/19e13612d36e2e6843398700564039b4d5c15193", "message": "Add online status update to all things\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "8c91e907feffca5df0a1b9e48069d9250d7b4dd1", "url": "https://github.com/openhab/openhab-addons/commit/8c91e907feffca5df0a1b9e48069d9250d7b4dd1", "message": "Clean up exception handling\n\nSigned-off-by: Matt Myers <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "4a909d5d8363ee4b31f87de323e31d9b5bd9a3f9", "url": "https://github.com/openhab/openhab-addons/commit/4a909d5d8363ee4b31f87de323e31d9b5bd9a3f9", "message": "added null handling\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:06Z", "type": "commit"}, {"oid": "5d0d6d3c70518f96807649ef8c95c1e3cdfef706", "url": "https://github.com/openhab/openhab-addons/commit/5d0d6d3c70518f96807649ef8c95c1e3cdfef706", "message": "Add backyard properties (units, VSP SPeed Format)\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "ede044e6fc1a941d875a39af1cf15d34411bd991", "url": "https://github.com/openhab/openhab-addons/commit/ede044e6fc1a941d875a39af1cf15d34411bd991", "message": "Removed unused constants\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "2140885f3e4d9a66b737004c6b9f127fb66b3112", "url": "https://github.com/openhab/openhab-addons/commit/2140885f3e4d9a66b737004c6b9f127fb66b3112", "message": "Move fields to top of classes\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "fb99b871c328accaab23d74dfd702d05c9468a13", "url": "https://github.com/openhab/openhab-addons/commit/fb99b871c328accaab23d74dfd702d05c9468a13", "message": "Added Author tags back in\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "94e2d43f94960252a640db5fa897246261343eea", "url": "https://github.com/openhab/openhab-addons/commit/94e2d43f94960252a640db5fa897246261343eea", "message": "ThingHandler & getTelemetry are now abstract\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "cf62cb2a658d6e2cc183fe7390915f568125e1a6", "url": "https://github.com/openhab/openhab-addons/commit/cf62cb2a658d6e2cc183fe7390915f568125e1a6", "message": "Adding Null Checks\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "58518ffe68108fe93fa6a1a7ce92b2b8d1802aea", "url": "https://github.com/openhab/openhab-addons/commit/58518ffe68108fe93fa6a1a7ce92b2b8d1802aea", "message": "Clean up exception handling\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "f5e32688c99b0c13a1dd0037b72bd2467db9dec0", "url": "https://github.com/openhab/openhab-addons/commit/f5e32688c99b0c13a1dd0037b72bd2467db9dec0", "message": "Updated InterruptedException handling\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "e94b556fa0aea87780f79d07b3135fc719d7d769", "url": "https://github.com/openhab/openhab-addons/commit/e94b556fa0aea87780f79d07b3135fc719d7d769", "message": "Removed compiler warning\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "1aeffd7ae2641f8722a3dd67bf707e0e5cebe478", "url": "https://github.com/openhab/openhab-addons/commit/1aeffd7ae2641f8722a3dd67bf707e0e5cebe478", "message": "Added mspConfigUnits to pull units from Hayward, updated xml unit definitions\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "43a76222d46a6f2ecd09977d280951d39646384e", "url": "https://github.com/openhab/openhab-addons/commit/43a76222d46a6f2ecd09977d280951d39646384e", "message": "Removed unused haywardDiscoveryService assignment from bridgehandler and HaywardException from mspConfigDiscovery\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "2fe9147d05f204e843e3bd59f2f3d4e84e444ef8", "url": "https://github.com/openhab/openhab-addons/commit/2fe9147d05f204e843e3bd59f2f3d4e84e444ef8", "message": "updated readme\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "7af05395c5b9166e9a314baf63648267d9878d61", "url": "https://github.com/openhab/openhab-addons/commit/7af05395c5b9166e9a314baf63648267d9878d61", "message": "update headers 2021\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:07Z", "type": "commit"}, {"oid": "8f66754263671a3082371a81d9286ffa52a350bf", "url": "https://github.com/openhab/openhab-addons/commit/8f66754263671a3082371a81d9286ffa52a350bf", "message": "cpmeister requested changes 1/17/21\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:08Z", "type": "commit"}, {"oid": "792a1fd908ce2c9b8d40cdb387a6d297a9fc7a76", "url": "https://github.com/openhab/openhab-addons/commit/792a1fd908ce2c9b8d40cdb387a6d297a9fc7a76", "message": "Refactor DiscoveryHandler\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:08Z", "type": "commit"}, {"oid": "38204b1b5ab3fd1b0f212e7c43f9999932d9cceb", "url": "https://github.com/openhab/openhab-addons/commit/38204b1b5ab3fd1b0f212e7c43f9999932d9cceb", "message": "Refactor DiscoveryService\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:08Z", "type": "commit"}, {"oid": "01a107b9509e2f843ddf24968bd8703b3570e199", "url": "https://github.com/openhab/openhab-addons/commit/01a107b9509e2f843ddf24968bd8703b3570e199", "message": "Eliminated HawardDiscoveryService.discoverDevices useZeroForBowIndex parameter\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:08Z", "type": "commit"}, {"oid": "d48f64bf2b285f8d99716a48cb034e6a37cfe41f", "url": "https://github.com/openhab/openhab-addons/commit/d48f64bf2b285f8d99716a48cb034e6a37cfe41f", "message": "Final cleanup\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:43:08Z", "type": "commit"}, {"oid": "6b99461f86d7c1ccb3efb327707ab954babb5328", "url": "https://github.com/openhab/openhab-addons/commit/6b99461f86d7c1ccb3efb327707ab954babb5328", "message": "Code check fix\n\nSigned-off-by: matchews <mmyers75@icloud.com>", "committedDate": "2021-01-22T02:46:20Z", "type": "commit"}]}