{"pr_number": 8252, "pr_title": "[iammeter] Iammeter Binding initial contribution", "pr_createdAt": "2020-08-04T07:10:26Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8252", "timeline": [{"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "url": "https://github.com/openhab/openhab-addons/commit/19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "message": "First commit for iammeter devices.\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-08-04T07:11:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODQwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467018408", "bodyText": "What type of exception do you expect here? Can you specify the concrete type?", "author": "fwolter", "createdAt": "2020-08-07T12:48:15Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {", "originalCommit": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NjMwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468386302", "bodyText": "changed.", "author": "lewei50", "createdAt": "2020-08-11T07:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 50913e84fd..8527c7a815 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -15,14 +15,16 @@ package org.openhab.binding.iammeter.internal;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.math.BigDecimal;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTA4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467019086", "bodyText": "You should store the ScheduledFuture returned by scheduleWithFixedDelay() to a field, to be able to cancel it in dispose().", "author": "fwolter", "createdAt": "2020-08-07T12:49:40Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);", "originalCommit": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NjYyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468386627", "bodyText": "add cancel parts in dispose().", "author": "lewei50", "createdAt": "2020-08-11T07:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 50913e84fd..8527c7a815 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -15,14 +15,16 @@ package org.openhab.binding.iammeter.internal;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.math.BigDecimal;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTg0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467019847", "bodyText": "Since you specified a delay of 0 sec. when scheduling the runnable above, refresh() is invoked instantly. So, this is invocation of refresh() is redundant and could be removed.", "author": "fwolter", "createdAt": "2020-08-07T12:51:06Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });", "originalCommit": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4Njc1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468386759", "bodyText": "removed.", "author": "lewei50", "createdAt": "2020-08-11T07:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTg0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 50913e84fd..8527c7a815 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -15,14 +15,16 @@ package org.openhab.binding.iammeter.internal;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.math.BigDecimal;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMTIzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467021237", "bodyText": "As getConfigAs() is an expensive operation, can you move it to initialize()?", "author": "fwolter", "createdAt": "2020-08-07T12:53:48Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();", "originalCommit": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NzIyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468387223", "bodyText": "codes moved.", "author": "lewei50", "createdAt": "2020-08-11T07:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMTIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 50913e84fd..8527c7a815 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -15,14 +15,16 @@ package org.openhab.binding.iammeter.internal;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.math.BigDecimal;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMzUyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467023523", "bodyText": "I think the stream must be closed after using it.", "author": "fwolter", "createdAt": "2020-08-07T12:57:55Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));", "originalCommit": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4Njk5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468386998", "bodyText": "stream close code added.", "author": "lewei50", "createdAt": "2020-08-11T07:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMzUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MDc0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479650746", "bodyText": "To close a stream you should use try-with-resources:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n          \n          \n            \n                        try (InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8))) {\n          \n      \n    \n    \n  \n\nThan you can omit the call to close and it will also be closed in case an exception happens.", "author": "Hilbrand", "createdAt": "2020-08-29T13:37:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMzUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 50913e84fd..8527c7a815 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -15,14 +15,16 @@ package org.openhab.binding.iammeter.internal;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.math.BigDecimal;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjUwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467026508", "bodyText": "You should specify the concrete exception you want to catch, since catching Exception catches also all runtime exceptions.", "author": "fwolter", "createdAt": "2020-08-07T13:03:49Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            updateStatus(ThingStatus.ONLINE);\n+        // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        } catch (Exception e) {", "originalCommit": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NzM3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468387375", "bodyText": "edited.", "author": "lewei50", "createdAt": "2020-08-11T07:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 50913e84fd..8527c7a815 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -15,14 +15,16 @@ package org.openhab.binding.iammeter.internal;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.math.BigDecimal;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjg4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467026881", "bodyText": "Do you log the stack trace by intention?", "author": "fwolter", "createdAt": "2020-08-07T13:04:34Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            updateStatus(ThingStatus.ONLINE);\n+        // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        } catch (Exception e) {\n+            logger.warn(\"Error refreshing source {}: {}\", getThing().getUID(), e.getMessage(), e);", "originalCommit": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NzUyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468387525", "bodyText": "logger removed.", "author": "lewei50", "createdAt": "2020-08-11T07:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 50913e84fd..8527c7a815 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -15,14 +15,16 @@ package org.openhab.binding.iammeter.internal;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.math.BigDecimal;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzMTcwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467031706", "bodyText": "You need to use QuantityType to make use of Units of Measure. You could store the unit type in IammeterWEM3080Channel.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return new DecimalType(new BigDecimal(value));\n          \n          \n            \n                        return QuantityType.valueOf(Float.parseFloat(value), SmartHomeUnits.VOLT);", "author": "fwolter", "createdAt": "2020-08-07T13:13:42Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            updateStatus(ThingStatus.ONLINE);\n+        // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        } catch (Exception e) {\n+            logger.warn(\"Error refreshing source {}: {}\", getThing().getUID(), e.getMessage(), e);\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {\n+        List<ChannelUID> noUsedItems = new ArrayList<>();\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_c\"));\n+        ThingBuilder thingBuilder = editThing();\n+        for (ChannelUID chl : noUsedItems) {\n+            thingBuilder.withoutChannel(chl);\n+        }\n+        updateThing(thingBuilder.build());\n+        bExtraChannelRemoved = true;\n+    }\n+\n+    private State getDecimal(String value) {\n+        try {\n+            return new DecimalType(new BigDecimal(value));", "originalCommit": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4ODIyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468388226", "bodyText": "code changed.", "author": "lewei50", "createdAt": "2020-08-11T07:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzMTcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 50913e84fd..8527c7a815 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -15,14 +15,16 @@ package org.openhab.binding.iammeter.internal;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.math.BigDecimal;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzMzAyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467033024", "bodyText": "Can you add the @NonNullByDefault annotation?", "author": "fwolter", "createdAt": "2020-08-07T13:16:06Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+/**\n+ * The {@link IammeterConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+public class IammeterConfiguration {", "originalCommit": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4ODMxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468388316", "bodyText": "added.", "author": "lewei50", "createdAt": "2020-08-11T07:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzMzAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterConfiguration.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterConfiguration.java\nindex 39f2c72efa..3bbfd3e646 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterConfiguration.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterConfiguration.java\n\n@@ -12,14 +12,17 @@\n  */\n package org.openhab.binding.iammeter.internal;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * The {@link IammeterConfiguration} class contains fields mapping thing configuration parameters.\n  *\n- * @author yang bo - Initial contribution\n+ * @author Yang Bo - Initial contribution\n  */\n \n+@NonNullByDefault\n public class IammeterConfiguration {\n-    public String host;\n-    public int port;\n-    public int refreshInterval;\n+    public String host = \"127.0.0.1\";\n+    public int port = 80;\n+    public int refreshInterval = 30;\n }\n"}}, {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "url": "https://github.com/openhab/openhab-addons/commit/30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "message": "code formating and justify.\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-08-11T07:38:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzIxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468713212", "bodyText": "This can be made static. Also it's good practice to append the unit to the field name e.g. TIMEOUT_MS. Please move it to the other fields.", "author": "fwolter", "createdAt": "2020-08-11T16:33:33Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;", "originalCommit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDUxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469040512", "bodyText": "changed.", "author": "lewei50", "createdAt": "2020-08-12T06:47:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "afe0135f89ece0b1d118d45b618191a001515d92", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 8527c7a815..7132299932 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -21,10 +21,11 @@ import java.util.List;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import javax.measure.Unit;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDI5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468714291", "bodyText": "The configuration is only assigned to the local variable. You might want to assign it to the class field.", "author": "fwolter", "createdAt": "2020-08-11T16:35:23Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();", "originalCommit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDYwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469040606", "bodyText": "changed.", "author": "lewei50", "createdAt": "2020-08-12T06:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "afe0135f89ece0b1d118d45b618191a001515d92", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 8527c7a815..7132299932 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -21,10 +21,11 @@ import java.util.List;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import javax.measure.Unit;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNTIyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468715227", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void thingStructureChanged(String channelProfix) {\n          \n          \n            \n                protected void thingStructureChanged(String channelPrefix) {", "author": "fwolter", "createdAt": "2020-08-11T16:36:55Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {", "originalCommit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDcyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469040727", "bodyText": "fixed.", "author": "lewei50", "createdAt": "2020-08-12T06:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNTIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "afe0135f89ece0b1d118d45b618191a001515d92", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 8527c7a815..7132299932 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -21,10 +21,11 @@ import java.util.List;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import javax.measure.Unit;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNTY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468715645", "bodyText": "No harm in canceling a task that is already cancelled.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (refreshJob != null && !refreshJob.isCancelled()) {\n          \n          \n            \n                    if (refreshJob != null) {", "author": "fwolter", "createdAt": "2020-08-11T16:37:39Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {\n+        List<ChannelUID> noUsedItems = new ArrayList<>();\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_c\"));\n+        ThingBuilder thingBuilder = editThing();\n+        for (ChannelUID chl : noUsedItems) {\n+            thingBuilder.withoutChannel(chl);\n+        }\n+        updateThing(thingBuilder.build());\n+        bExtraChannelRemoved = true;\n+    }\n+\n+    private State getDecimal(String value) {\n+        try {\n+            return QuantityType.valueOf(Float.parseFloat(value), SmartHomeUnits.VOLT);\n+        } catch (NumberFormatException e) {\n+            return UnDefType.UNDEF;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {", "originalCommit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDgxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469040815", "bodyText": "removed.", "author": "lewei50", "createdAt": "2020-08-12T06:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNTY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "afe0135f89ece0b1d118d45b618191a001515d92", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 8527c7a815..7132299932 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -21,10 +21,11 @@ import java.util.List;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import javax.measure.Unit;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNjIxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468716215", "bodyText": "Is there some implementation missing?", "author": "fwolter", "createdAt": "2020-08-11T16:38:34Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080Channel.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import javax.measure.Unit;\n+\n+/**\n+ * The {@link IammeterWEM3080Channel} Enum defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+public enum IammeterWEM3080Channel {\n+\n+    CHANNEL_VOLTAGE(\"voltage_a\", 0),\n+    CHANNEL_CURRENT(\"current_a\", 1),\n+    CHANNEL_POWER(\"power_a\", 2),\n+    CHANNEL_IMPORTENERGY(\"importenergy_a\", 3),\n+    CHANNEL_EXPORTGRID(\"exportgrid_a\", 4);\n+\n+    private final String id;\n+    private final int index;\n+    private final Unit<?> unit;\n+\n+    IammeterWEM3080Channel(String id, int index) {\n+        this.id = id;\n+        this.index = index;\n+        this.unit = null;", "originalCommit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDkyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469040927", "bodyText": "codes added.", "author": "lewei50", "createdAt": "2020-08-12T06:48:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNjIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "afe0135f89ece0b1d118d45b618191a001515d92", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080Channel.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080Channel.java\nindex 14df844626..a0a1d01352 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080Channel.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080Channel.java\n\n@@ -11,31 +11,31 @@\n  * SPDX-License-Identifier: EPL-2.0\n  */\n package org.openhab.binding.iammeter.internal;\n-\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import javax.measure.Unit;\n \n /**\n  * The {@link IammeterWEM3080Channel} Enum defines common constants, which are\n  * used across the whole binding.\n  *\n- * @author yang bo - Initial contribution\n+ * @author Yang Bo - Initial contribution\n  */\n public enum IammeterWEM3080Channel {\n \n-    CHANNEL_VOLTAGE(\"voltage_a\", 0),\n-    CHANNEL_CURRENT(\"current_a\", 1),\n-    CHANNEL_POWER(\"power_a\", 2),\n-    CHANNEL_IMPORTENERGY(\"importenergy_a\", 3),\n-    CHANNEL_EXPORTGRID(\"exportgrid_a\", 4);\n+    CHANNEL_VOLTAGE(\"voltage_a\", 0, SmartHomeUnits.VOLT),\n+    CHANNEL_CURRENT(\"current_a\", 1, SmartHomeUnits.AMPERE),\n+    CHANNEL_POWER(\"power_a\", 2, SmartHomeUnits.WATT),\n+    CHANNEL_IMPORTENERGY(\"importenergy_a\", 3, SmartHomeUnits.KILOWATT_HOUR),\n+    CHANNEL_EXPORTGRID(\"exportgrid_a\", 4, SmartHomeUnits.KILOWATT_HOUR);\n \n     private final String id;\n     private final int index;\n     private final Unit<?> unit;\n \n-    IammeterWEM3080Channel(String id, int index) {\n+    IammeterWEM3080Channel(String id, int index, Unit<?> unit) {\n         this.id = id;\n         this.index = index;\n-        this.unit = null;\n+        this.unit = unit;\n     }\n \n     public String getId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzI2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468717265", "bodyText": "As you catch these exceptions, the throws delcaration can be removed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void refresh() throws IOException, JsonSyntaxException {\n          \n          \n            \n                private void refresh() {", "author": "fwolter", "createdAt": "2020-08-11T16:40:15Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {", "originalCommit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTAyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041023", "bodyText": "changed.", "author": "lewei50", "createdAt": "2020-08-12T06:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "afe0135f89ece0b1d118d45b618191a001515d92", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 8527c7a815..7132299932 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -21,10 +21,11 @@ import java.util.List;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import javax.measure.Unit;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzg4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468717889", "bodyText": "After removing the throws declaration from refresh(), this can be reduced:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Runnable runnable = new Runnable() {\n          \n          \n            \n                            @Override\n          \n          \n            \n                            public void run() {\n          \n          \n            \n                                try {\n          \n          \n            \n                                    refresh();\n          \n          \n            \n                                } catch (IOException | JsonSyntaxException ex) {\n          \n          \n            \n                                    logger.warn(\"refresh error {}\", ex.getMessage());\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                        };\n          \n          \n            \n                        refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n          \n          \n            \n                        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);", "author": "fwolter", "createdAt": "2020-08-11T16:41:17Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);", "originalCommit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTE0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041147", "bodyText": "changed.", "author": "lewei50", "createdAt": "2020-08-12T06:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "afe0135f89ece0b1d118d45b618191a001515d92", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 8527c7a815..7132299932 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -21,10 +21,11 @@ import java.util.List;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import javax.measure.Unit;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTIwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468719209", "bodyText": "The annotation has no effect since getConfigAs() always returns NonNull and can therefore removed.", "author": "fwolter", "createdAt": "2020-08-11T16:43:27Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {\n+        List<ChannelUID> noUsedItems = new ArrayList<>();\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_c\"));\n+        ThingBuilder thingBuilder = editThing();\n+        for (ChannelUID chl : noUsedItems) {\n+            thingBuilder.withoutChannel(chl);\n+        }\n+        updateThing(thingBuilder.build());\n+        bExtraChannelRemoved = true;\n+    }\n+\n+    private State getDecimal(String value) {\n+        try {\n+            return QuantityType.valueOf(Float.parseFloat(value), SmartHomeUnits.VOLT);\n+        } catch (NumberFormatException e) {\n+            return UnDefType.UNDEF;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+        super.dispose();\n+    }\n+\n+    @NonNullByDefault", "originalCommit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTY3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041676", "bodyText": "removed.", "author": "lewei50", "createdAt": "2020-08-12T06:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "afe0135f89ece0b1d118d45b618191a001515d92", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 8527c7a815..7132299932 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -21,10 +21,11 @@ import java.util.List;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import javax.measure.Unit;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTY3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468719674", "bodyText": "See above.", "author": "fwolter", "createdAt": "2020-08-11T16:44:17Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080TChannel.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import javax.measure.Unit;\n+\n+/**\n+ * The {@link IammeterWEM3080TChannel} Enum defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Johann Richard - Initial contribution\n+ */\n+public enum IammeterWEM3080TChannel {\n+\n+    CHANNEL_VOLTAGE_A(\"voltage_a\", 0, 0),\n+    CHANNEL_CURRENT_A(\"current_a\", 0, 1),\n+    CHANNEL_POWER_A(\"power_a\", 0, 2),\n+    CHANNEL_IMPORTENERGY_A(\"importenergy_a\", 0, 3),\n+    CHANNEL_EXPORTGRID_A(\"exportgrid_a\", 0, 4),\n+    CHANNEL_FREQUENCY_A(\"frequency_a\", 0, 5),\n+    CHANNEL_PF_A(\"pf_a\", 0, 6),\n+    CHANNEL_VOLTAGE_B(\"voltage_b\", 1, 0),\n+    CHANNEL_CURRENT_B(\"current_b\", 1, 1),\n+    CHANNEL_POWER_B(\"power_b\", 1, 2),\n+    CHANNEL_IMPORTENERGY_B(\"importenergy_b\", 1, 3),\n+    CHANNEL_EXPORTGRID_B(\"exportgrid_b\", 1, 4),\n+    CHANNEL_FREQUENCY_B(\"frequency_b\", 1, 5),\n+    CHANNEL_PF_B(\"pf_b\", 1, 6),\n+    CHANNEL_VOLTAGE_C(\"voltage_c\", 2, 0),\n+    CHANNEL_CURRENT_C(\"current_c\", 2, 1),\n+    CHANNEL_POWER_C(\"power_c\", 2, 2),\n+    CHANNEL_IMPORTENERGY_C(\"importenergy_c\", 2, 3),\n+    CHANNEL_EXPORTGRID_C(\"exportgrid_c\", 2, 4),\n+    CHANNEL_FREQUENCY_C(\"frequency_c\", 2, 5),\n+    CHANNEL_PF_C(\"pf_c\", 2, 6);\n+\n+    private final String id;\n+    private final int row;\n+    private final int col;\n+    private final Unit<?> unit;\n+\n+    IammeterWEM3080TChannel(String id, int r, int c) {\n+        this.id = id;\n+        this.row = r;\n+        this.col = c;\n+        this.unit = null;", "originalCommit": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTU1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041557", "bodyText": "code added.", "author": "lewei50", "createdAt": "2020-08-12T06:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "afe0135f89ece0b1d118d45b618191a001515d92", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080TChannel.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080TChannel.java\nindex 2500c2e798..18ddd3ec85 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080TChannel.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080TChannel.java\n\n@@ -14,46 +14,48 @@ package org.openhab.binding.iammeter.internal;\n \n import javax.measure.Unit;\n \n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+\n /**\n  * The {@link IammeterWEM3080TChannel} Enum defines common constants, which are\n  * used across the whole binding.\n  *\n- * @author Johann Richard - Initial contribution\n+ * @author Yang Bo - Initial contribution\n  */\n public enum IammeterWEM3080TChannel {\n \n-    CHANNEL_VOLTAGE_A(\"voltage_a\", 0, 0),\n-    CHANNEL_CURRENT_A(\"current_a\", 0, 1),\n-    CHANNEL_POWER_A(\"power_a\", 0, 2),\n-    CHANNEL_IMPORTENERGY_A(\"importenergy_a\", 0, 3),\n-    CHANNEL_EXPORTGRID_A(\"exportgrid_a\", 0, 4),\n-    CHANNEL_FREQUENCY_A(\"frequency_a\", 0, 5),\n-    CHANNEL_PF_A(\"pf_a\", 0, 6),\n-    CHANNEL_VOLTAGE_B(\"voltage_b\", 1, 0),\n-    CHANNEL_CURRENT_B(\"current_b\", 1, 1),\n-    CHANNEL_POWER_B(\"power_b\", 1, 2),\n-    CHANNEL_IMPORTENERGY_B(\"importenergy_b\", 1, 3),\n-    CHANNEL_EXPORTGRID_B(\"exportgrid_b\", 1, 4),\n-    CHANNEL_FREQUENCY_B(\"frequency_b\", 1, 5),\n-    CHANNEL_PF_B(\"pf_b\", 1, 6),\n-    CHANNEL_VOLTAGE_C(\"voltage_c\", 2, 0),\n-    CHANNEL_CURRENT_C(\"current_c\", 2, 1),\n-    CHANNEL_POWER_C(\"power_c\", 2, 2),\n-    CHANNEL_IMPORTENERGY_C(\"importenergy_c\", 2, 3),\n-    CHANNEL_EXPORTGRID_C(\"exportgrid_c\", 2, 4),\n-    CHANNEL_FREQUENCY_C(\"frequency_c\", 2, 5),\n-    CHANNEL_PF_C(\"pf_c\", 2, 6);\n+    CHANNEL_VOLTAGE_A(\"voltage_a\", 0, 0, SmartHomeUnits.VOLT),\n+    CHANNEL_CURRENT_A(\"current_a\", 0, 1, SmartHomeUnits.AMPERE),\n+    CHANNEL_POWER_A(\"power_a\", 0, 2, SmartHomeUnits.WATT),\n+    CHANNEL_IMPORTENERGY_A(\"importenergy_a\", 0, 3, SmartHomeUnits.KILOWATT_HOUR),\n+    CHANNEL_EXPORTGRID_A(\"exportgrid_a\", 0, 4, SmartHomeUnits.KILOWATT_HOUR),\n+    CHANNEL_FREQUENCY_A(\"frequency_a\", 0, 5, SmartHomeUnits.HERTZ),\n+    CHANNEL_PF_A(\"pf_a\", 0, 6, SmartHomeUnits.HERTZ),\n+    CHANNEL_VOLTAGE_B(\"voltage_b\", 1, 0, SmartHomeUnits.VOLT),\n+    CHANNEL_CURRENT_B(\"current_b\", 1, 1, SmartHomeUnits.AMPERE),\n+    CHANNEL_POWER_B(\"power_b\", 1, 2, SmartHomeUnits.WATT),\n+    CHANNEL_IMPORTENERGY_B(\"importenergy_b\", 1, 3, SmartHomeUnits.KILOWATT_HOUR),\n+    CHANNEL_EXPORTGRID_B(\"exportgrid_b\", 1, 4, SmartHomeUnits.KILOWATT_HOUR),\n+    CHANNEL_FREQUENCY_B(\"frequency_b\", 1, 5, SmartHomeUnits.HERTZ),\n+    CHANNEL_PF_B(\"pf_b\", 1, 6, SmartHomeUnits.HERTZ),\n+    CHANNEL_VOLTAGE_C(\"voltage_c\", 2, 0, SmartHomeUnits.VOLT),\n+    CHANNEL_CURRENT_C(\"current_c\", 2, 1, SmartHomeUnits.AMPERE),\n+    CHANNEL_POWER_C(\"power_c\", 2, 2, SmartHomeUnits.WATT),\n+    CHANNEL_IMPORTENERGY_C(\"importenergy_c\", 2, 3, SmartHomeUnits.KILOWATT_HOUR),\n+    CHANNEL_EXPORTGRID_C(\"exportgrid_c\", 2, 4, SmartHomeUnits.KILOWATT_HOUR),\n+    CHANNEL_FREQUENCY_C(\"frequency_c\", 2, 5, SmartHomeUnits.HERTZ),\n+    CHANNEL_PF_C(\"pf_c\", 2, 6, SmartHomeUnits.HERTZ);\n \n     private final String id;\n     private final int row;\n     private final int col;\n     private final Unit<?> unit;\n \n-    IammeterWEM3080TChannel(String id, int r, int c) {\n+    IammeterWEM3080TChannel(String id, int r, int c, Unit<?> unit) {\n         this.id = id;\n         this.row = r;\n         this.col = c;\n-        this.unit = null;\n+        this.unit = unit;\n     }\n \n     public String getId() {\n"}}, {"oid": "afe0135f89ece0b1d118d45b618191a001515d92", "url": "https://github.com/openhab/openhab-addons/commit/afe0135f89ece0b1d118d45b618191a001515d92", "message": "fix unit display.\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-08-12T06:50:45Z", "type": "forcePushed"}, {"oid": "b3b4c85b932c238dbc445fb69e5caba580f3d7bf", "url": "https://github.com/openhab/openhab-addons/commit/b3b4c85b932c238dbc445fb69e5caba580f3d7bf", "message": "fix format\n\nSigned-off-by: Yang Bo<service@lewei50.com>", "committedDate": "2020-08-13T00:56:36Z", "type": "forcePushed"}, {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17", "url": "https://github.com/openhab/openhab-addons/commit/a906d2babeae254dbc4fecf7848545dfd3acca17", "message": "fix format\n\nAlso-by: Yang Bo<service@lewei50.com>\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-08-13T00:58:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MDU3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479650575", "bodyText": "This method is called for every channel linked. So if you have 5 items this method is called 5 times. That doesn't seem right. Better to cache the data. You can use the openHAB ExpiringCache. You call the object and if the time has exceeded it will retreive the data. For example I've used it with a 3 seconds timeout.", "author": "Hilbrand", "createdAt": "2020-08-29T13:36:10Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();", "originalCommit": "a906d2babeae254dbc4fecf7848545dfd3acca17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMzMyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483633329", "bodyText": "codes changed to use ExpiringCache now.", "author": "yangbo1979", "createdAt": "2020-09-04T13:58:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MDU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex e27e4d6afe..6904af7347 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -16,8 +16,7 @@ import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.time.Duration;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1Njg5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479656899", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @author yangbo - Initial contribution\n          \n          \n            \n             * @author Yang Bo - Initial contribution", "author": "Hilbrand", "createdAt": "2020-08-29T14:50:48Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandlerFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import static org.openhab.binding.iammeter.internal.IammeterBindingConstants.THING_TYPE_POWERMETER;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link IammeterHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author yangbo - Initial contribution", "originalCommit": "a906d2babeae254dbc4fecf7848545dfd3acca17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMzQ2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483633461", "bodyText": "changed.", "author": "yangbo1979", "createdAt": "2020-09-04T13:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1Njg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandlerFactory.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandlerFactory.java\nindex 448ddd0204..9ea60428de 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandlerFactory.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandlerFactory.java\n\n@@ -12,9 +12,9 @@\n  */\n package org.openhab.binding.iammeter.internal;\n \n-import static org.openhab.binding.iammeter.internal.IammeterBindingConstants.THING_TYPE_POWERMETER;\n+import static org.openhab.binding.iammeter.internal.IammeterBindingConstants.*;\n \n-import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Set;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1ODIzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479658232", "bodyText": "This is not right. You should model the different types as different things. So in the xml you would see 2 things, 1 with all channels and 1 with the limited set of channels. You can then create 2 different classes, or maybe create 2 classes that each parse the specific data. and in the handler factory you can than pass that specific class to this handler based on the specific thing created.", "author": "Hilbrand", "createdAt": "2020-08-29T15:06:38Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelPrefix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelPrefix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString(),\n+                                channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString(), channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelPrefix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelPrefix) {", "originalCommit": "a906d2babeae254dbc4fecf7848545dfd3acca17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzNDYyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483634621", "bodyText": "thanks for your advice,I have separated those into 2 thingHandler now.", "author": "yangbo1979", "createdAt": "2020-09-04T14:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1ODIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex e27e4d6afe..6904af7347 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -16,8 +16,7 @@ import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.time.Duration;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1OTE0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479659147", "bodyText": "Is the user/password configurable? In that case it should be a thing parameter. Also it's better to pass it as a header parameter instead of putting in the url.", "author": "Hilbrand", "createdAt": "2020-08-29T15:16:25Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";", "originalCommit": "a906d2babeae254dbc4fecf7848545dfd3acca17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzNTE0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483635143", "bodyText": "it's configurable now.", "author": "yangbo1979", "createdAt": "2020-09-04T14:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1OTE0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex e27e4d6afe..6904af7347 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -16,8 +16,7 @@ import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.time.Duration;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1OTI0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479659240", "bodyText": "In this case the status should probaly also be set to OFFLINE.", "author": "Hilbrand", "createdAt": "2020-08-29T15:17:10Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelPrefix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelPrefix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString(),\n+                                channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString(), channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelPrefix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());", "originalCommit": "a906d2babeae254dbc4fecf7848545dfd3acca17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzNTMzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483635338", "bodyText": "status set.", "author": "yangbo1979", "createdAt": "2020-09-04T14:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1OTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4MDY4OA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483680688", "bodyText": "I don't see the updateStatus here. Is it done somewhere else?", "author": "Hilbrand", "createdAt": "2020-09-04T15:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1OTI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex e27e4d6afe..6904af7347 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -16,8 +16,7 @@ import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.time.Duration;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n"}}, {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed", "url": "https://github.com/openhab/openhab-addons/commit/c8d53011af0031e25c6619a26b9e384a0a1ad9ed", "message": "Update pom.xml\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-04T13:55:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NzQ4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483677485", "bodyText": "The stream is an empty String. Do you need to send something or does it also work to use:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n          \n          \n            \n                        String response = HttpUtil.executeUrl(httpMethod, url, TIMEOUT_MS);\n          \n      \n    \n    \n  \n\nSame applies to the other handler", "author": "Hilbrand", "createdAt": "2020-09-04T15:06:21Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);", "originalCommit": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTY3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905677", "bodyText": "both changed.", "author": "lewei50", "createdAt": "2020-09-05T03:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NzQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a01c9b74700f2c446beeb5e2c9e944e7d628c97", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\nindex 6904af7347..50913e84fd 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java\n\n@@ -15,23 +15,21 @@ package org.openhab.binding.iammeter.internal;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.math.BigDecimal;\n import java.nio.charset.StandardCharsets;\n-import java.time.Duration;\n-import java.util.concurrent.ScheduledFuture;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n-import javax.measure.Unit;\n-\n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.cache.ExpiringCache;\n-import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n import org.eclipse.smarthome.core.thing.Channel;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.thing.ThingStatus;\n import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n import org.eclipse.smarthome.core.types.Command;\n import org.eclipse.smarthome.core.types.RefreshType;\n import org.eclipse.smarthome.core.types.State;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NDQwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483684406", "bodyText": "Related to the class splitting. I didn't intend for you to completely copy paste the code as it duplicates a lot of code. Better make an abstract base class with all the logic and let it call methods to do the specific code. The code I selected here would be in the sub class. The method would get the response as parameter. You can make the method getDecimal  protected (better rename it getQuantityState probably`.", "author": "Hilbrand", "createdAt": "2020-09-04T15:18:44Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class Iammeter3080THandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Iammeter3080THandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public Iammeter3080THandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Datas\";\n+            if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                String groups[] = { \"powerPhaseA\", \"powerPhaseB\", \"powerPhaseC\" };\n+                for (int row = 0; row < groups.length; row++) {\n+                    String gpName = groups[row];\n+                    List<Channel> chnList = getThing().getChannelsOfGroup(gpName);\n+                    for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                        Channel chnl = chnList.get(channelConfig.ordinal());\n+                        if (chnl != null) {\n+                            State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(row)\n+                                    .getAsJsonArray().get(channelConfig.ordinal()).toString(), channelConfig.getUnit());\n+                            updateState(chnl.getUID(), state);\n+                        }\n+                    }", "originalCommit": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTU3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905574", "bodyText": "abstract class made.", "author": "lewei50", "createdAt": "2020-09-05T03:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NDQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTcyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905725", "bodyText": "abstract class made.", "author": "lewei50", "createdAt": "2020-09-05T03:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NDQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "4a01c9b74700f2c446beeb5e2c9e944e7d628c97", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java\ndeleted file mode 100644\nindex 7817b3e18d..0000000000\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java\n+++ /dev/null\n\n@@ -1,153 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.iammeter.internal;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n-import java.time.Duration;\n-import java.util.List;\n-import java.util.concurrent.ScheduledFuture;\n-import java.util.concurrent.TimeUnit;\n-\n-import javax.measure.Unit;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.cache.ExpiringCache;\n-import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.thing.Channel;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.Thing;\n-import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n-import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.eclipse.smarthome.core.types.RefreshType;\n-import org.eclipse.smarthome.core.types.State;\n-import org.eclipse.smarthome.core.types.UnDefType;\n-import org.eclipse.smarthome.io.net.http.HttpUtil;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonParser;\n-import com.google.gson.JsonSyntaxException;\n-\n-/**\n- * The {@link IammeterHandler} is responsible for handling commands, which are\n- * sent to one of the channels.\n- *\n- * @author Yang Bo - Initial contribution\n- */\n-\n-@NonNullByDefault\n-public class Iammeter3080THandler extends BaseThingHandler {\n-\n-    private final Logger logger = LoggerFactory.getLogger(Iammeter3080THandler.class);\n-    private @Nullable ScheduledFuture<?> refreshJob;\n-    private IammeterConfiguration config;\n-    private static final int TIMEOUT_MS = 5000;\n-    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n-\n-    public Iammeter3080THandler(Thing thing) {\n-        super(thing);\n-        config = getConfiguration();\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        if (command instanceof RefreshType) {\n-            refreshCache.getValue();\n-        }\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        ScheduledFuture<?> refreshJob = this.refreshJob;\n-        config = getConfiguration();\n-        if (refreshJob == null) {\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n-            this.refreshJob = refreshJob;\n-            updateStatus(ThingStatus.UNKNOWN);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"null\")\n-    private boolean refresh() {\n-        refreshCache.invalidateValue();\n-        IammeterConfiguration config = this.config;\n-        try {\n-            String httpMethod = \"GET\";\n-            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n-                    + \"/monitorjson\";\n-            String content = \"\";\n-            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n-\n-            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n-            JsonElement iammeterDataElement = new JsonParser().parse(response);\n-            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n-            String keyWord = \"Datas\";\n-            if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n-                String groups[] = { \"powerPhaseA\", \"powerPhaseB\", \"powerPhaseC\" };\n-                for (int row = 0; row < groups.length; row++) {\n-                    String gpName = groups[row];\n-                    List<Channel> chnList = getThing().getChannelsOfGroup(gpName);\n-                    for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n-                        Channel chnl = chnList.get(channelConfig.ordinal());\n-                        if (chnl != null) {\n-                            State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(row)\n-                                    .getAsJsonArray().get(channelConfig.ordinal()).toString(), channelConfig.getUnit());\n-                            updateState(chnl.getUID(), state);\n-                        }\n-                    }\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n-            stream.close();\n-            updateStatus(ThingStatus.ONLINE);\n-            return true;\n-            // Very rudimentary Exception differentiation\n-        } catch (IOException e) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                    \"Communication error with the device: \" + e.getMessage());\n-        } catch (JsonSyntaxException je) {\n-            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n-        }\n-        return false;\n-    }\n-\n-    private State getDecimal(String value, Unit<?> unit) {\n-        try {\n-            return QuantityType.valueOf(Float.parseFloat(value), unit);\n-        } catch (NumberFormatException e) {\n-            return UnDefType.UNDEF;\n-        }\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        ScheduledFuture<?> refreshJob = this.refreshJob;\n-        if (refreshJob != null && !refreshJob.isCancelled()) {\n-            refreshJob.cancel(true);\n-            refreshJob = null;\n-        }\n-        super.dispose();\n-    }\n-\n-    public IammeterConfiguration getConfiguration() {\n-        return this.getConfigAs(IammeterConfiguration.class);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NDg0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483684841", "bodyText": "You need to set the field to null:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        refreshJob = null;\n          \n          \n            \n                        this.refreshJob = null;", "author": "Hilbrand", "createdAt": "2020-09-04T15:19:31Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class Iammeter3080THandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Iammeter3080THandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public Iammeter3080THandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Datas\";\n+            if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                String groups[] = { \"powerPhaseA\", \"powerPhaseB\", \"powerPhaseC\" };\n+                for (int row = 0; row < groups.length; row++) {\n+                    String gpName = groups[row];\n+                    List<Channel> chnList = getThing().getChannelsOfGroup(gpName);\n+                    for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                        Channel chnl = chnList.get(channelConfig.ordinal());\n+                        if (chnl != null) {\n+                            State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(row)\n+                                    .getAsJsonArray().get(channelConfig.ordinal()).toString(), channelConfig.getUnit());\n+                            updateState(chnl.getUID(), state);\n+                        }\n+                    }\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            return true;\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    private State getDecimal(String value, Unit<?> unit) {\n+        try {\n+            return QuantityType.valueOf(Float.parseFloat(value), unit);\n+        } catch (NumberFormatException e) {\n+            return UnDefType.UNDEF;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;", "originalCommit": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTU0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905548", "bodyText": "changed.", "author": "lewei50", "createdAt": "2020-09-05T03:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NDg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a01c9b74700f2c446beeb5e2c9e944e7d628c97", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java\ndeleted file mode 100644\nindex 7817b3e18d..0000000000\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java\n+++ /dev/null\n\n@@ -1,153 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.iammeter.internal;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n-import java.time.Duration;\n-import java.util.List;\n-import java.util.concurrent.ScheduledFuture;\n-import java.util.concurrent.TimeUnit;\n-\n-import javax.measure.Unit;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.cache.ExpiringCache;\n-import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.thing.Channel;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.Thing;\n-import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n-import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.eclipse.smarthome.core.types.RefreshType;\n-import org.eclipse.smarthome.core.types.State;\n-import org.eclipse.smarthome.core.types.UnDefType;\n-import org.eclipse.smarthome.io.net.http.HttpUtil;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonParser;\n-import com.google.gson.JsonSyntaxException;\n-\n-/**\n- * The {@link IammeterHandler} is responsible for handling commands, which are\n- * sent to one of the channels.\n- *\n- * @author Yang Bo - Initial contribution\n- */\n-\n-@NonNullByDefault\n-public class Iammeter3080THandler extends BaseThingHandler {\n-\n-    private final Logger logger = LoggerFactory.getLogger(Iammeter3080THandler.class);\n-    private @Nullable ScheduledFuture<?> refreshJob;\n-    private IammeterConfiguration config;\n-    private static final int TIMEOUT_MS = 5000;\n-    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n-\n-    public Iammeter3080THandler(Thing thing) {\n-        super(thing);\n-        config = getConfiguration();\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        if (command instanceof RefreshType) {\n-            refreshCache.getValue();\n-        }\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        ScheduledFuture<?> refreshJob = this.refreshJob;\n-        config = getConfiguration();\n-        if (refreshJob == null) {\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n-            this.refreshJob = refreshJob;\n-            updateStatus(ThingStatus.UNKNOWN);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"null\")\n-    private boolean refresh() {\n-        refreshCache.invalidateValue();\n-        IammeterConfiguration config = this.config;\n-        try {\n-            String httpMethod = \"GET\";\n-            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n-                    + \"/monitorjson\";\n-            String content = \"\";\n-            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n-\n-            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n-            JsonElement iammeterDataElement = new JsonParser().parse(response);\n-            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n-            String keyWord = \"Datas\";\n-            if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n-                String groups[] = { \"powerPhaseA\", \"powerPhaseB\", \"powerPhaseC\" };\n-                for (int row = 0; row < groups.length; row++) {\n-                    String gpName = groups[row];\n-                    List<Channel> chnList = getThing().getChannelsOfGroup(gpName);\n-                    for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n-                        Channel chnl = chnList.get(channelConfig.ordinal());\n-                        if (chnl != null) {\n-                            State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(row)\n-                                    .getAsJsonArray().get(channelConfig.ordinal()).toString(), channelConfig.getUnit());\n-                            updateState(chnl.getUID(), state);\n-                        }\n-                    }\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n-            stream.close();\n-            updateStatus(ThingStatus.ONLINE);\n-            return true;\n-            // Very rudimentary Exception differentiation\n-        } catch (IOException e) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                    \"Communication error with the device: \" + e.getMessage());\n-        } catch (JsonSyntaxException je) {\n-            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n-        }\n-        return false;\n-    }\n-\n-    private State getDecimal(String value, Unit<?> unit) {\n-        try {\n-            return QuantityType.valueOf(Float.parseFloat(value), unit);\n-        } catch (NumberFormatException e) {\n-            return UnDefType.UNDEF;\n-        }\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        ScheduledFuture<?> refreshJob = this.refreshJob;\n-        if (refreshJob != null && !refreshJob.isCancelled()) {\n-            refreshJob.cancel(true);\n-            refreshJob = null;\n-        }\n-        super.dispose();\n-    }\n-\n-    public IammeterConfiguration getConfiguration() {\n-        return this.getConfigAs(IammeterConfiguration.class);\n-    }\n-}\n"}}, {"oid": "4a01c9b74700f2c446beeb5e2c9e944e7d628c97", "url": "https://github.com/openhab/openhab-addons/commit/4a01c9b74700f2c446beeb5e2c9e944e7d628c97", "message": "First commit for iammeter devices.\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:36:59Z", "type": "commit"}, {"oid": "ecf6ed9318b3f7f28cc82474eecf77a2073b7506", "url": "https://github.com/openhab/openhab-addons/commit/ecf6ed9318b3f7f28cc82474eecf77a2073b7506", "message": "code formating and justify.\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:36:59Z", "type": "commit"}, {"oid": "c54eaba65afb642701de3c1bd112aae49c6aed41", "url": "https://github.com/openhab/openhab-addons/commit/c54eaba65afb642701de3c1bd112aae49c6aed41", "message": "fix unit display.\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:36:59Z", "type": "commit"}, {"oid": "4be2e7d409757864e2eb75a4710ae3c9cf17e872", "url": "https://github.com/openhab/openhab-addons/commit/4be2e7d409757864e2eb75a4710ae3c9cf17e872", "message": "fix format\n\nAlso-by: Yang Bo<service@lewei50.com>\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:37:00Z", "type": "commit"}, {"oid": "12d94448417fc579d8c8c019e273f8e577540ef8", "url": "https://github.com/openhab/openhab-addons/commit/12d94448417fc579d8c8c019e273f8e577540ef8", "message": "separate thingHandler\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:37:00Z", "type": "commit"}, {"oid": "1380025780503ea83623779b7dce95896d3b4283", "url": "https://github.com/openhab/openhab-addons/commit/1380025780503ea83623779b7dce95896d3b4283", "message": "Update pom.xml\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:37:00Z", "type": "commit"}, {"oid": "8dc054b19a26817f52b56b78303c5c69982c0eb2", "url": "https://github.com/openhab/openhab-addons/commit/8dc054b19a26817f52b56b78303c5c69982c0eb2", "message": "Delete .project\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:37:00Z", "type": "commit"}, {"oid": "54f4771661e91fa167ad484a5c1eeb96c63b3aab", "url": "https://github.com/openhab/openhab-addons/commit/54f4771661e91fa167ad484a5c1eeb96c63b3aab", "message": "abstract iammeterBaseHandler\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:37:00Z", "type": "commit"}, {"oid": "31f281fa38608bf2b47b08bf2ab059c76301d658", "url": "https://github.com/openhab/openhab-addons/commit/31f281fa38608bf2b47b08bf2ab059c76301d658", "message": "Create .project\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:37:01Z", "type": "commit"}, {"oid": "31f281fa38608bf2b47b08bf2ab059c76301d658", "url": "https://github.com/openhab/openhab-addons/commit/31f281fa38608bf2b47b08bf2ab059c76301d658", "message": "Create .project\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:37:01Z", "type": "forcePushed"}, {"oid": "e59269aba0c217e462afb7f6b7a535166c43c952", "url": "https://github.com/openhab/openhab-addons/commit/e59269aba0c217e462afb7f6b7a535166c43c952", "message": "edit pom.xml\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-05T03:43:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MTg3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483981872", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class IammeterBaseHandler extends BaseThingHandler {\n          \n          \n            \n            public abstract class IammeterBaseHandler extends BaseThingHandler {", "author": "Hilbrand", "createdAt": "2020-09-05T19:45:55Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {", "originalCommit": "e59269aba0c217e462afb7f6b7a535166c43c952", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxODQwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r484018405", "bodyText": "added.", "author": "lewei50", "createdAt": "2020-09-06T04:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MTg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxODQxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r484018415", "bodyText": "codes reformated using mvn spotless:apply.", "author": "lewei50", "createdAt": "2020-09-06T04:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MTg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b49258b7ec642724296916696559be08eb4d62b6", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\nindex 43fbfc4055..c488ecc677 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\n\n@@ -12,10 +12,7 @@\n  */\n package org.openhab.binding.iammeter.internal;\n \n-import java.io.ByteArrayInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n import java.time.Duration;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MTk3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483981970", "bodyText": "This is not used anymore and can be removed.", "author": "Hilbrand", "createdAt": "2020-09-05T19:46:57Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterBaseHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterBaseHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    protected void resolveData(String response) {\n+\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));", "originalCommit": "e59269aba0c217e462afb7f6b7a535166c43c952", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxODM4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r484018389", "bodyText": "removed.", "author": "lewei50", "createdAt": "2020-09-06T04:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MTk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "b49258b7ec642724296916696559be08eb4d62b6", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\nindex 43fbfc4055..c488ecc677 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\n\n@@ -12,10 +12,7 @@\n  */\n package org.openhab.binding.iammeter.internal;\n \n-import java.io.ByteArrayInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n import java.time.Duration;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MjAwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483982001", "bodyText": "Can you remove this commented out code.", "author": "Hilbrand", "createdAt": "2020-09-05T19:47:20Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterBaseHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterBaseHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    protected void resolveData(String response) {\n+\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, TIMEOUT_MS);\n+\n+            resolveData(response);\n+\n+            // JsonElement iammeterDataElement = new JsonParser().parse(response);", "originalCommit": "e59269aba0c217e462afb7f6b7a535166c43c952", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxODM3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r484018370", "bodyText": "removed.", "author": "lewei50", "createdAt": "2020-09-06T04:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MjAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b49258b7ec642724296916696559be08eb4d62b6", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\nindex 43fbfc4055..c488ecc677 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\n\n@@ -12,10 +12,7 @@\n  */\n package org.openhab.binding.iammeter.internal;\n \n-import java.io.ByteArrayInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n import java.time.Duration;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MjA5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483982099", "bodyText": "By maing this class abstract you can also make this method abstract:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void resolveData(String response) {\n          \n          \n            \n                protected abstract void resolveData(String response);", "author": "Hilbrand", "createdAt": "2020-09-05T19:48:40Z", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterBaseHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterBaseHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    protected void resolveData(String response) {", "originalCommit": "e59269aba0c217e462afb7f6b7a535166c43c952", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxODM2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r484018369", "bodyText": "changed.", "author": "lewei50", "createdAt": "2020-09-06T04:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MjA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b49258b7ec642724296916696559be08eb4d62b6", "chunk": "diff --git a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\nindex 43fbfc4055..c488ecc677 100644\n--- a/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\n+++ b/bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java\n\n@@ -12,10 +12,7 @@\n  */\n package org.openhab.binding.iammeter.internal;\n \n-import java.io.ByteArrayInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n import java.time.Duration;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n"}}, {"oid": "b49258b7ec642724296916696559be08eb4d62b6", "url": "https://github.com/openhab/openhab-addons/commit/b49258b7ec642724296916696559be08eb4d62b6", "message": "update format\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-06T04:02:06Z", "type": "commit"}, {"oid": "b49258b7ec642724296916696559be08eb4d62b6", "url": "https://github.com/openhab/openhab-addons/commit/b49258b7ec642724296916696559be08eb4d62b6", "message": "update format\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-06T04:02:06Z", "type": "forcePushed"}, {"oid": "9ba9046864883612b3a6976ea5fc6d8b07e732cc", "url": "https://github.com/openhab/openhab-addons/commit/9ba9046864883612b3a6976ea5fc6d8b07e732cc", "message": "format code.\n\nSigned-off-by: lewei50 <service@lewei50.com>", "committedDate": "2020-09-06T04:05:55Z", "type": "commit"}]}