{"pr_number": 7147, "pr_title": "[bluetooth] Read device information during discovery process", "pr_createdAt": "2020-03-11T17:27:42Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7147", "timeline": [{"oid": "d558c5625a806492e6ad0d96c0c3d400b3378c87", "url": "https://github.com/openhab/openhab-addons/commit/d558c5625a806492e6ad0d96c0c3d400b3378c87", "message": "[bluetooth] Read device information during discovery process\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-11T17:25:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNDY1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391214657", "bodyText": "Please don't use abbreviations for these.", "author": "cpmeister", "createdAt": "2020-03-11T19:36:48Z", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/BluetoothDevice.java", "diffHunk": "@@ -245,6 +296,51 @@ public void setName(String name) {\n         this.name = name;\n     }\n \n+    /**\n+     * Set the model of the device\n+     *\n+     * @param model a {@link String} defining the device model\n+     */\n+    public void setModel(String model) {\n+        this.model = model;\n+    }\n+\n+    /**\n+     * Set the serial number of the device\n+     *\n+     * @param model a {@link String} defining the serial number\n+     */\n+    public void setSerialNumberl(String serialNumber) {\n+        this.serialNumber = serialNumber;\n+    }\n+\n+    /**\n+     * Set the HW revision of the device\n+     *\n+     * @param model a {@link String} defining the HW revision\n+     */\n+    public void setHwRevision(String hwRevision) {\n+        this.hwRevision = hwRevision;\n+    }\n+\n+    /**\n+     * Set the FW revision of the device\n+     *\n+     * @param model a {@link String} defining the FW revision\n+     */\n+    public void setFwRevision(String fwRevision) {", "originalCommit": "d558c5625a806492e6ad0d96c0c3d400b3378c87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2139f8dc0f0e196f9b87bc8a01298a2890b51e1f", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/BluetoothDevice.java b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/BluetoothDevice.java\nindex 8190c5dc08..8b13d8581b 100644\n--- a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/BluetoothDevice.java\n+++ b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/BluetoothDevice.java\n\n@@ -315,30 +315,30 @@ public abstract class BluetoothDevice {\n     }\n \n     /**\n-     * Set the HW revision of the device\n+     * Set the hardware revision of the device\n      *\n-     * @param model a {@link String} defining the HW revision\n+     * @param model a {@link String} defining the hardware revision\n      */\n-    public void setHwRevision(String hwRevision) {\n-        this.hwRevision = hwRevision;\n+    public void setHardwareRevision(String hardwareRevision) {\n+        this.hardwareRevision = hardwareRevision;\n     }\n \n     /**\n-     * Set the FW revision of the device\n+     * Set the firmware revision of the device\n      *\n-     * @param model a {@link String} defining the FW revision\n+     * @param model a {@link String} defining the firmware revision\n      */\n-    public void setFwRevision(String fwRevision) {\n-        this.fwRevision = fwRevision;\n+    public void setFirmwareRevision(String firmwareRevision) {\n+        this.firmwareRevision = firmwareRevision;\n     }\n \n     /**\n-     * Set the SW revision of the device\n+     * Set the software revision of the device\n      *\n-     * @param model a {@link String} defining the SW revision\n+     * @param model a {@link String} defining the software revision\n      */\n-    public void setSwRevision(String swRevision) {\n-        this.swRevision = swRevision;\n+    public void setSoftwareRevision(String softwareRevision) {\n+        this.softwareRevision = softwareRevision;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNTI0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391215245", "bodyText": "Don't catch the InterruptedException", "author": "cpmeister", "createdAt": "2020-03-11T19:38:00Z", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -227,18 +245,60 @@ public void onConnectionStateChange(BluetoothConnectionStatusNotification connec\n         }\n     }\n \n-    private void tryToDiscoverNameIfMissing() throws InterruptedException {\n-        BluetoothCharacteristic characteristic = device.getCharacteristic(GattCharacteristic.DEVICE_NAME.getUUID());\n-        if (characteristic == null || device.getName() != null) {\n-            return;\n-        }\n-        if (!device.readCharacteristic(characteristic)) {\n-            logger.debug(\"Failed to aquire name for device {}\", device.getAddress());\n-            return;\n-        }\n-        if (!awaitNameDiscovery(1, TimeUnit.SECONDS)) {\n-            logger.debug(\"Name discovery for device {} timed out\", device.getAddress());\n-        }\n+    private void readDeviceInformationIfMissing() {\n+        deviceInformationUUIDs.forEach(uuid -> {\n+            BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+            if (characteristic == null) {\n+                logger.debug(\"Device '{}' doesn't support uuid '{}'\", device.getAddress(), uuid);\n+                return;\n+            }\n+            switch (characteristic.getGattCharacteristic()) {\n+                case DEVICE_NAME:\n+                    if (device.getName() != null) {\n+                        return;\n+                    }\n+                    break;\n+                case MODEL_NUMBER_STRING:\n+                    if (device.getModel() != null) {\n+                        return;\n+                    }\n+                    break;\n+                case SERIAL_NUMBER_STRING:\n+                    if (device.getSerialNumber() != null) {\n+                        return;\n+                    }\n+                    break;\n+                case HARDWARE_REVISION_STRING:\n+                    if (device.getHwRevision() != null) {\n+                        return;\n+                    }\n+                    break;\n+                case FIRMWARE_REVISION_STRING:\n+                    if (device.getFwRevision() != null) {\n+                        return;\n+                    }\n+                    break;\n+                case SOFTWARE_REVISION_STRING:\n+                    if (device.getSwRevision() != null) {\n+                        return;\n+                    }\n+                    break;\n+                default:\n+                    return;\n+            }\n+            if (!device.readCharacteristic(characteristic)) {\n+                logger.debug(\"Failed to aquire uuid {} from device {}\", uuid, device.getAddress());\n+                return;\n+            }\n+            ongoingDevInfoUUID = Optional.of(uuid);\n+            try {\n+                if (!awaitInfoResponse(2, TimeUnit.SECONDS)) {\n+                    logger.debug(\"Device info (uuid {}) for device {} timed out\", uuid, device.getAddress());\n+                }\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(\"InterruptedException caught when reading device info \" + uuid, e);", "originalCommit": "d558c5625a806492e6ad0d96c0c3d400b3378c87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2139f8dc0f0e196f9b87bc8a01298a2890b51e1f", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\nindex cf66323460..608b693033 100644\n--- a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n+++ b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n\n@@ -245,60 +235,41 @@ public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, Blu\n         }\n     }\n \n-    private void readDeviceInformationIfMissing() {\n-        deviceInformationUUIDs.forEach(uuid -> {\n-            BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n-            if (characteristic == null) {\n-                logger.debug(\"Device '{}' doesn't support uuid '{}'\", device.getAddress(), uuid);\n-                return;\n-            }\n-            switch (characteristic.getGattCharacteristic()) {\n-                case DEVICE_NAME:\n-                    if (device.getName() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case MODEL_NUMBER_STRING:\n-                    if (device.getModel() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case SERIAL_NUMBER_STRING:\n-                    if (device.getSerialNumber() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case HARDWARE_REVISION_STRING:\n-                    if (device.getHwRevision() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case FIRMWARE_REVISION_STRING:\n-                    if (device.getFwRevision() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case SOFTWARE_REVISION_STRING:\n-                    if (device.getSwRevision() != null) {\n-                        return;\n-                    }\n-                    break;\n-                default:\n-                    return;\n-            }\n-            if (!device.readCharacteristic(characteristic)) {\n-                logger.debug(\"Failed to aquire uuid {} from device {}\", uuid, device.getAddress());\n-                return;\n-            }\n-            ongoingDevInfoUUID = Optional.of(uuid);\n-            try {\n-                if (!awaitInfoResponse(2, TimeUnit.SECONDS)) {\n-                    logger.debug(\"Device info (uuid {}) for device {} timed out\", uuid, device.getAddress());\n-                }\n-            } catch (InterruptedException e) {\n-                throw new RuntimeException(\"InterruptedException caught when reading device info \" + uuid, e);\n-            }\n-        });\n+    private void readDeviceInformationIfMissing() throws InterruptedException {\n+        if (device.getName() == null) {\n+            fecthUUID(GattCharacteristic.DEVICE_NAME.getUUID());\n+        }\n+        if (device.getModel() == null) {\n+            fecthUUID(GattCharacteristic.MODEL_NUMBER_STRING.getUUID());\n+        }\n+        if (device.getSerialNumber() == null) {\n+            fecthUUID(GattCharacteristic.SERIAL_NUMBER_STRING.getUUID());\n+        }\n+        if (device.getHardwareRevision() == null) {\n+            fecthUUID(GattCharacteristic.HARDWARE_REVISION_STRING.getUUID());\n+        }\n+        if (device.getFirmwareRevision() == null) {\n+            fecthUUID(GattCharacteristic.FIRMWARE_REVISION_STRING.getUUID());\n+        }\n+        if (device.getSoftwareRevision() == null) {\n+            fecthUUID(GattCharacteristic.SOFTWARE_REVISION_STRING.getUUID());\n+        }\n+    }\n+\n+    private void fecthUUID(UUID uuid) throws InterruptedException {\n+        BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+        if (characteristic == null) {\n+            logger.debug(\"Device '{}' doesn't support uuid '{}'\", device.getAddress(), uuid);\n+            return;\n+        }\n+        if (!device.readCharacteristic(characteristic)) {\n+            logger.debug(\"Failed to aquire uuid {} from device {}\", uuid, device.getAddress());\n+            return;\n+        }\n+        ongoingDevInfoUUID = Optional.of(uuid);\n+        if (!awaitInfoResponse(1, TimeUnit.SECONDS)) {\n+            logger.debug(\"Device info (uuid {}) for device {} timed out\", uuid, device.getAddress());\n+        }\n     }\n \n     private boolean awaitConnection(long timeout, TimeUnit unit) throws InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNzQ4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391217482", "bodyText": "Why was the timeout increased to 2 seconds? It should never take longer than a split second to communicate to a connected device. My use of 1 second was already excessive.", "author": "cpmeister", "createdAt": "2020-03-11T19:42:14Z", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -227,18 +245,60 @@ public void onConnectionStateChange(BluetoothConnectionStatusNotification connec\n         }\n     }\n \n-    private void tryToDiscoverNameIfMissing() throws InterruptedException {\n-        BluetoothCharacteristic characteristic = device.getCharacteristic(GattCharacteristic.DEVICE_NAME.getUUID());\n-        if (characteristic == null || device.getName() != null) {\n-            return;\n-        }\n-        if (!device.readCharacteristic(characteristic)) {\n-            logger.debug(\"Failed to aquire name for device {}\", device.getAddress());\n-            return;\n-        }\n-        if (!awaitNameDiscovery(1, TimeUnit.SECONDS)) {\n-            logger.debug(\"Name discovery for device {} timed out\", device.getAddress());\n-        }\n+    private void readDeviceInformationIfMissing() {\n+        deviceInformationUUIDs.forEach(uuid -> {\n+            BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+            if (characteristic == null) {\n+                logger.debug(\"Device '{}' doesn't support uuid '{}'\", device.getAddress(), uuid);\n+                return;\n+            }\n+            switch (characteristic.getGattCharacteristic()) {\n+                case DEVICE_NAME:\n+                    if (device.getName() != null) {\n+                        return;\n+                    }\n+                    break;\n+                case MODEL_NUMBER_STRING:\n+                    if (device.getModel() != null) {\n+                        return;\n+                    }\n+                    break;\n+                case SERIAL_NUMBER_STRING:\n+                    if (device.getSerialNumber() != null) {\n+                        return;\n+                    }\n+                    break;\n+                case HARDWARE_REVISION_STRING:\n+                    if (device.getHwRevision() != null) {\n+                        return;\n+                    }\n+                    break;\n+                case FIRMWARE_REVISION_STRING:\n+                    if (device.getFwRevision() != null) {\n+                        return;\n+                    }\n+                    break;\n+                case SOFTWARE_REVISION_STRING:\n+                    if (device.getSwRevision() != null) {\n+                        return;\n+                    }\n+                    break;\n+                default:\n+                    return;\n+            }\n+            if (!device.readCharacteristic(characteristic)) {\n+                logger.debug(\"Failed to aquire uuid {} from device {}\", uuid, device.getAddress());\n+                return;\n+            }\n+            ongoingDevInfoUUID = Optional.of(uuid);\n+            try {\n+                if (!awaitInfoResponse(2, TimeUnit.SECONDS)) {", "originalCommit": "d558c5625a806492e6ad0d96c0c3d400b3378c87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI2NzI3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391267277", "bodyText": "There could be many request on the queue, so even 2 seconds might not be enough. Anyhow, I changed it back to 1 second.", "author": "paulianttila", "createdAt": "2020-03-11T21:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNzQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3NzQ4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391277487", "bodyText": "How many requests at once are you trying to take into account? I think that 10 requests at once would be the max to reasonably expect.", "author": "cpmeister", "createdAt": "2020-03-11T21:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNzQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMjIyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391702229", "bodyText": "Don't know, but example one airthings device service discovery take around 5 seconds (47 characteristics). I increased that time from 1 sec to 5 and it seems work rather well, but still some times I saw timeout (service discovery fails). Not sure what happens if there would be more than one airthings devices.", "author": "paulianttila", "createdAt": "2020-03-12T15:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNzQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyNDA3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391824073", "bodyText": "I think that the double service discovery calls might be causing the timeout issues. I'm ok with you increasing the service discovery timeout to whatever value works for you. But the characteristic read/write timeouts should remain low.", "author": "cpmeister", "createdAt": "2020-03-12T18:49:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNzQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2139f8dc0f0e196f9b87bc8a01298a2890b51e1f", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\nindex cf66323460..608b693033 100644\n--- a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n+++ b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n\n@@ -245,60 +235,41 @@ public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, Blu\n         }\n     }\n \n-    private void readDeviceInformationIfMissing() {\n-        deviceInformationUUIDs.forEach(uuid -> {\n-            BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n-            if (characteristic == null) {\n-                logger.debug(\"Device '{}' doesn't support uuid '{}'\", device.getAddress(), uuid);\n-                return;\n-            }\n-            switch (characteristic.getGattCharacteristic()) {\n-                case DEVICE_NAME:\n-                    if (device.getName() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case MODEL_NUMBER_STRING:\n-                    if (device.getModel() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case SERIAL_NUMBER_STRING:\n-                    if (device.getSerialNumber() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case HARDWARE_REVISION_STRING:\n-                    if (device.getHwRevision() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case FIRMWARE_REVISION_STRING:\n-                    if (device.getFwRevision() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case SOFTWARE_REVISION_STRING:\n-                    if (device.getSwRevision() != null) {\n-                        return;\n-                    }\n-                    break;\n-                default:\n-                    return;\n-            }\n-            if (!device.readCharacteristic(characteristic)) {\n-                logger.debug(\"Failed to aquire uuid {} from device {}\", uuid, device.getAddress());\n-                return;\n-            }\n-            ongoingDevInfoUUID = Optional.of(uuid);\n-            try {\n-                if (!awaitInfoResponse(2, TimeUnit.SECONDS)) {\n-                    logger.debug(\"Device info (uuid {}) for device {} timed out\", uuid, device.getAddress());\n-                }\n-            } catch (InterruptedException e) {\n-                throw new RuntimeException(\"InterruptedException caught when reading device info \" + uuid, e);\n-            }\n-        });\n+    private void readDeviceInformationIfMissing() throws InterruptedException {\n+        if (device.getName() == null) {\n+            fecthUUID(GattCharacteristic.DEVICE_NAME.getUUID());\n+        }\n+        if (device.getModel() == null) {\n+            fecthUUID(GattCharacteristic.MODEL_NUMBER_STRING.getUUID());\n+        }\n+        if (device.getSerialNumber() == null) {\n+            fecthUUID(GattCharacteristic.SERIAL_NUMBER_STRING.getUUID());\n+        }\n+        if (device.getHardwareRevision() == null) {\n+            fecthUUID(GattCharacteristic.HARDWARE_REVISION_STRING.getUUID());\n+        }\n+        if (device.getFirmwareRevision() == null) {\n+            fecthUUID(GattCharacteristic.FIRMWARE_REVISION_STRING.getUUID());\n+        }\n+        if (device.getSoftwareRevision() == null) {\n+            fecthUUID(GattCharacteristic.SOFTWARE_REVISION_STRING.getUUID());\n+        }\n+    }\n+\n+    private void fecthUUID(UUID uuid) throws InterruptedException {\n+        BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+        if (characteristic == null) {\n+            logger.debug(\"Device '{}' doesn't support uuid '{}'\", device.getAddress(), uuid);\n+            return;\n+        }\n+        if (!device.readCharacteristic(characteristic)) {\n+            logger.debug(\"Failed to aquire uuid {} from device {}\", uuid, device.getAddress());\n+            return;\n+        }\n+        ongoingDevInfoUUID = Optional.of(uuid);\n+        if (!awaitInfoResponse(1, TimeUnit.SECONDS)) {\n+            logger.debug(\"Device info (uuid {}) for device {} timed out\", uuid, device.getAddress());\n+        }\n     }\n \n     private boolean awaitConnection(long timeout, TimeUnit unit) throws InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxOTg4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391219887", "bodyText": "I don't see the benefit of putting this in a list if you have to do a switch statement on each of them anyway.\nI think a better way would be to have a helper function that takes a characteristic as parameter instead and you conditionally call the helper function based on the presence or absence of the device field of interest.", "author": "cpmeister", "createdAt": "2020-03-11T19:47:00Z", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -63,14 +66,28 @@\n     private final Lock serviceDiscoveryLock = new ReentrantLock();\n     private final Condition connectionCondition = serviceDiscoveryLock.newCondition();\n     private final Condition serviceDiscoveryCondition = serviceDiscoveryLock.newCondition();\n-    private final Condition nameDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition infoDiscoveryCondition = serviceDiscoveryLock.newCondition();\n \n     private final BluetoothDevice device;\n     private final Collection<BluetoothDiscoveryParticipant> participants;\n     private final Set<BluetoothAdapter> adapters;\n \n     private volatile boolean servicesDiscovered = false;\n \n+    /**\n+     * List of UUID's which will be fetched from the device when connection based discovery is required.\n+     */\n+    private final List<UUID> deviceInformationUUIDs = new ArrayList<UUID>(Arrays.asList(\n+            GattCharacteristic.DEVICE_NAME.getUUID(), GattCharacteristic.MODEL_NUMBER_STRING.getUUID(),\n+            GattCharacteristic.SERIAL_NUMBER_STRING.getUUID(), GattCharacteristic.HARDWARE_REVISION_STRING.getUUID(),\n+            GattCharacteristic.FIRMWARE_REVISION_STRING.getUUID(),\n+            GattCharacteristic.SOFTWARE_REVISION_STRING.getUUID()));", "originalCommit": "d558c5625a806492e6ad0d96c0c3d400b3378c87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2139f8dc0f0e196f9b87bc8a01298a2890b51e1f", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\nindex cf66323460..608b693033 100644\n--- a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n+++ b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n\n@@ -74,15 +73,6 @@ public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, Blu\n \n     private volatile boolean servicesDiscovered = false;\n \n-    /**\n-     * List of UUID's which will be fetched from the device when connection based discovery is required.\n-     */\n-    private final List<UUID> deviceInformationUUIDs = new ArrayList<UUID>(Arrays.asList(\n-            GattCharacteristic.DEVICE_NAME.getUUID(), GattCharacteristic.MODEL_NUMBER_STRING.getUUID(),\n-            GattCharacteristic.SERIAL_NUMBER_STRING.getUUID(), GattCharacteristic.HARDWARE_REVISION_STRING.getUUID(),\n-            GattCharacteristic.FIRMWARE_REVISION_STRING.getUUID(),\n-            GattCharacteristic.SOFTWARE_REVISION_STRING.getUUID()));\n-\n     /**\n      * Contains UUID which reading is ongoing or empty if no ongoing readings.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyMzg2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391223868", "bodyText": "I wouldn't use lambdas here so that you can properly throw checked exceptions", "author": "cpmeister", "createdAt": "2020-03-11T19:53:46Z", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -227,18 +245,60 @@ public void onConnectionStateChange(BluetoothConnectionStatusNotification connec\n         }\n     }\n \n-    private void tryToDiscoverNameIfMissing() throws InterruptedException {\n-        BluetoothCharacteristic characteristic = device.getCharacteristic(GattCharacteristic.DEVICE_NAME.getUUID());\n-        if (characteristic == null || device.getName() != null) {\n-            return;\n-        }\n-        if (!device.readCharacteristic(characteristic)) {\n-            logger.debug(\"Failed to aquire name for device {}\", device.getAddress());\n-            return;\n-        }\n-        if (!awaitNameDiscovery(1, TimeUnit.SECONDS)) {\n-            logger.debug(\"Name discovery for device {} timed out\", device.getAddress());\n-        }\n+    private void readDeviceInformationIfMissing() {\n+        deviceInformationUUIDs.forEach(uuid -> {", "originalCommit": "d558c5625a806492e6ad0d96c0c3d400b3378c87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2139f8dc0f0e196f9b87bc8a01298a2890b51e1f", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\nindex cf66323460..608b693033 100644\n--- a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n+++ b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n\n@@ -245,60 +235,41 @@ public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, Blu\n         }\n     }\n \n-    private void readDeviceInformationIfMissing() {\n-        deviceInformationUUIDs.forEach(uuid -> {\n-            BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n-            if (characteristic == null) {\n-                logger.debug(\"Device '{}' doesn't support uuid '{}'\", device.getAddress(), uuid);\n-                return;\n-            }\n-            switch (characteristic.getGattCharacteristic()) {\n-                case DEVICE_NAME:\n-                    if (device.getName() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case MODEL_NUMBER_STRING:\n-                    if (device.getModel() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case SERIAL_NUMBER_STRING:\n-                    if (device.getSerialNumber() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case HARDWARE_REVISION_STRING:\n-                    if (device.getHwRevision() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case FIRMWARE_REVISION_STRING:\n-                    if (device.getFwRevision() != null) {\n-                        return;\n-                    }\n-                    break;\n-                case SOFTWARE_REVISION_STRING:\n-                    if (device.getSwRevision() != null) {\n-                        return;\n-                    }\n-                    break;\n-                default:\n-                    return;\n-            }\n-            if (!device.readCharacteristic(characteristic)) {\n-                logger.debug(\"Failed to aquire uuid {} from device {}\", uuid, device.getAddress());\n-                return;\n-            }\n-            ongoingDevInfoUUID = Optional.of(uuid);\n-            try {\n-                if (!awaitInfoResponse(2, TimeUnit.SECONDS)) {\n-                    logger.debug(\"Device info (uuid {}) for device {} timed out\", uuid, device.getAddress());\n-                }\n-            } catch (InterruptedException e) {\n-                throw new RuntimeException(\"InterruptedException caught when reading device info \" + uuid, e);\n-            }\n-        });\n+    private void readDeviceInformationIfMissing() throws InterruptedException {\n+        if (device.getName() == null) {\n+            fecthUUID(GattCharacteristic.DEVICE_NAME.getUUID());\n+        }\n+        if (device.getModel() == null) {\n+            fecthUUID(GattCharacteristic.MODEL_NUMBER_STRING.getUUID());\n+        }\n+        if (device.getSerialNumber() == null) {\n+            fecthUUID(GattCharacteristic.SERIAL_NUMBER_STRING.getUUID());\n+        }\n+        if (device.getHardwareRevision() == null) {\n+            fecthUUID(GattCharacteristic.HARDWARE_REVISION_STRING.getUUID());\n+        }\n+        if (device.getFirmwareRevision() == null) {\n+            fecthUUID(GattCharacteristic.FIRMWARE_REVISION_STRING.getUUID());\n+        }\n+        if (device.getSoftwareRevision() == null) {\n+            fecthUUID(GattCharacteristic.SOFTWARE_REVISION_STRING.getUUID());\n+        }\n+    }\n+\n+    private void fecthUUID(UUID uuid) throws InterruptedException {\n+        BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+        if (characteristic == null) {\n+            logger.debug(\"Device '{}' doesn't support uuid '{}'\", device.getAddress(), uuid);\n+            return;\n+        }\n+        if (!device.readCharacteristic(characteristic)) {\n+            logger.debug(\"Failed to aquire uuid {} from device {}\", uuid, device.getAddress());\n+            return;\n+        }\n+        ongoingDevInfoUUID = Optional.of(uuid);\n+        if (!awaitInfoResponse(1, TimeUnit.SECONDS)) {\n+            logger.debug(\"Device info (uuid {}) for device {} timed out\", uuid, device.getAddress());\n+        }\n     }\n \n     private boolean awaitConnection(long timeout, TimeUnit unit) throws InterruptedException {\n"}}, {"oid": "2139f8dc0f0e196f9b87bc8a01298a2890b51e1f", "url": "https://github.com/openhab/openhab-addons/commit/2139f8dc0f0e196f9b87bc8a01298a2890b51e1f", "message": "Review fixes\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-11T20:51:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3MDUxNA==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391270514", "bodyText": "I think you can implement this without using Optional. Would be simpler to just use a GattCharacteristic instead of a UUID.", "author": "cpmeister", "createdAt": "2020-03-11T21:11:32Z", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -304,10 +335,38 @@ public void onServicesDiscovered() {\n     public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n         serviceDiscoveryLock.lock();\n         try {\n-            if (characteristic.getGattCharacteristic() == GattCharacteristic.DEVICE_NAME) {\n-                device.setName(characteristic.getStringValue(0));\n-                nameDiscoveryCondition.signal();\n+            if (status == BluetoothCompletionStatus.SUCCESS) {\n+                switch (characteristic.getGattCharacteristic()) {\n+                    case DEVICE_NAME:\n+                        device.setName(characteristic.getStringValue(0));\n+                        break;\n+                    case MODEL_NUMBER_STRING:\n+                        device.setModel(characteristic.getStringValue(0));\n+                        break;\n+                    case SERIAL_NUMBER_STRING:\n+                        device.setSerialNumberl(characteristic.getStringValue(0));\n+                        break;\n+                    case HARDWARE_REVISION_STRING:\n+                        device.setHardwareRevision(characteristic.getStringValue(0));\n+                        break;\n+                    case FIRMWARE_REVISION_STRING:\n+                        device.setFirmwareRevision(characteristic.getStringValue(0));\n+                        break;\n+                    case SOFTWARE_REVISION_STRING:\n+                        device.setSoftwareRevision(characteristic.getStringValue(0));\n+                        break;\n+                    default:\n+                        break;\n+                }\n             }\n+\n+            ongoingDevInfoUUID.ifPresent(uuid -> {\n+                if (uuid == characteristic.getGattCharacteristic().getUUID()) {\n+                    ongoingDevInfoUUID = Optional.empty();\n+                    infoDiscoveryCondition.signal();\n+                }\n+            });", "originalCommit": "2139f8dc0f0e196f9b87bc8a01298a2890b51e1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxODMxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391718319", "bodyText": "Not sure if it's simpler, but not agains it either. I have understood that Optional should be used rather than nullable variables.", "author": "paulianttila", "createdAt": "2020-03-12T15:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3MDUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0NDM0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391744348", "bodyText": "I don't think there is anything wrong with nullable variables per se, just that it can become a pain to constantly do null checks when it would be reasonably expected to be non-null at the time.", "author": "cpmeister", "createdAt": "2020-03-12T16:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3MDUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "78ced3a0c3bbb6035aa44d7d207f508156111764", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\nindex 608b693033..4e0c55615e 100644\n--- a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n+++ b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n\n@@ -360,13 +361,12 @@ public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, Blu\n                 }\n             }\n \n-            ongoingDevInfoUUID.ifPresent(uuid -> {\n-                if (uuid == characteristic.getGattCharacteristic().getUUID()) {\n-                    ongoingDevInfoUUID = Optional.empty();\n+            if (ongoingCharacteristic != null) {\n+                if (ongoingCharacteristic.getUuid() == characteristic.getUuid()) {\n+                    ongoingCharacteristic = null;\n                     infoDiscoveryCondition.signal();\n                 }\n-            });\n-\n+            }\n         } finally {\n             serviceDiscoveryLock.unlock();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3Mjg0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391272848", "bodyText": "Could you also add these fields to BluetoothDeviceSnapshot? Please? \ud83d\ude04", "author": "cpmeister", "createdAt": "2020-03-11T21:16:24Z", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/BluetoothDevice.java", "diffHunk": "@@ -102,6 +102,12 @@\n      */\n     protected String name;\n \n+    protected String model;\n+    protected String serialNumber;\n+    protected String hardwareRevision;\n+    protected String firmwareRevision;\n+    protected String softwareRevision;", "originalCommit": "2139f8dc0f0e196f9b87bc8a01298a2890b51e1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNDE2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391704165", "bodyText": "Didn't notice that you have introduced new snapshot device. What's the idea behind it?", "author": "paulianttila", "createdAt": "2020-03-12T15:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3Mjg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MjA4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391742085", "bodyText": "It is basically there to keep track of data that was available to discovery participants at the time of discovery. So if new data became available the discovery service would know to rerun the discovery process since discovery participants which were previously unable to discover anything may now be able to discover something.\nBut on second thought you can skip adding the fields to BluetoothDeviceSnapshot since that should be reserved for data coming from advertising packets.", "author": "cpmeister", "createdAt": "2020-03-12T16:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3Mjg0OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "78ced3a0c3bbb6035aa44d7d207f508156111764", "url": "https://github.com/openhab/openhab-addons/commit/78ced3a0c3bbb6035aa44d7d207f508156111764", "message": "Removed optional\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-12T17:39:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyNjM1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7147#discussion_r391826352", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (ongoingCharacteristic != null) {\n          \n          \n            \n                            if (ongoingCharacteristic.getUuid() == characteristic.getUuid()) {\n          \n          \n            \n                                ongoingCharacteristic = null;\n          \n          \n            \n                                infoDiscoveryCondition.signal();\n          \n          \n            \n                            }\n          \n          \n            \n                        if (ongoingCharacteristic == characteristic.getGattCharacteristic()) {\n          \n          \n            \n                            ongoingCharacteristic = null;\n          \n          \n            \n                            infoDiscoveryCondition.signal();", "author": "cpmeister", "createdAt": "2020-03-12T18:53:33Z", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -304,9 +336,36 @@ public void onServicesDiscovered() {\n     public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n         serviceDiscoveryLock.lock();\n         try {\n-            if (characteristic.getGattCharacteristic() == GattCharacteristic.DEVICE_NAME) {\n-                device.setName(characteristic.getStringValue(0));\n-                nameDiscoveryCondition.signal();\n+            if (status == BluetoothCompletionStatus.SUCCESS) {\n+                switch (characteristic.getGattCharacteristic()) {\n+                    case DEVICE_NAME:\n+                        device.setName(characteristic.getStringValue(0));\n+                        break;\n+                    case MODEL_NUMBER_STRING:\n+                        device.setModel(characteristic.getStringValue(0));\n+                        break;\n+                    case SERIAL_NUMBER_STRING:\n+                        device.setSerialNumberl(characteristic.getStringValue(0));\n+                        break;\n+                    case HARDWARE_REVISION_STRING:\n+                        device.setHardwareRevision(characteristic.getStringValue(0));\n+                        break;\n+                    case FIRMWARE_REVISION_STRING:\n+                        device.setFirmwareRevision(characteristic.getStringValue(0));\n+                        break;\n+                    case SOFTWARE_REVISION_STRING:\n+                        device.setSoftwareRevision(characteristic.getStringValue(0));\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+\n+            if (ongoingCharacteristic != null) {\n+                if (ongoingCharacteristic.getUuid() == characteristic.getUuid()) {\n+                    ongoingCharacteristic = null;\n+                    infoDiscoveryCondition.signal();\n+                }", "originalCommit": "78ced3a0c3bbb6035aa44d7d207f508156111764", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ec70a2ba24678bd7feaea1d6b0fa1282fdd798c", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\nindex 4e0c55615e..e72f8ff920 100644\n--- a/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n+++ b/bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java\n\n@@ -361,11 +361,9 @@ public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, Blu\n                 }\n             }\n \n-            if (ongoingCharacteristic != null) {\n-                if (ongoingCharacteristic.getUuid() == characteristic.getUuid()) {\n-                    ongoingCharacteristic = null;\n-                    infoDiscoveryCondition.signal();\n-                }\n+            if (ongoingGattCharacteristic == characteristic.getGattCharacteristic()) {\n+                ongoingGattCharacteristic = null;\n+                infoDiscoveryCondition.signal();\n             }\n         } finally {\n             serviceDiscoveryLock.unlock();\n"}}, {"oid": "3ec70a2ba24678bd7feaea1d6b0fa1282fdd798c", "url": "https://github.com/openhab/openhab-addons/commit/3ec70a2ba24678bd7feaea1d6b0fa1282fdd798c", "message": "Suggested change\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-12T20:56:39Z", "type": "commit"}]}