{"pr_number": 9468, "pr_title": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)", "pr_createdAt": "2020-12-22T08:50:06Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9468", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5NjY3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r548896675", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_DEVICE_THING_TYPES_UIDS = new HashSet<>(\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_DEVICE_THING_TYPES_UIDS = Set.of(", "author": "J-N-K", "createdAt": "2020-12-25T17:45:15Z", "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java", "diffHunk": "@@ -78,13 +79,17 @@\n     public static final ThingTypeUID THING_TYPE_MULTFUNCTIONSMOKEDETECTOR = new ThingTypeUID(BINDING_ID,\n             \"multiFunctionSmokeDetector\");\n \n-    public static final Set<ThingTypeUID> SUPPORTED_DEVICE_THING_TYPES_UIDS = new HashSet<>(Arrays.asList(\n-            THING_TYPE_PUSHBUTTON, THING_TYPE_ROCKERSWITCH, THING_TYPE_CLASSICDEVICE, THING_TYPE_CENTRALCOMMAND,\n-            THING_TYPE_ROOMOPERATINGPANEL, THING_TYPE_MECHANICALHANDLE, THING_TYPE_CONTACT,\n-            THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_TEMPERATURESENSOR, THING_TYPE_TEMPERATUREHUMIDITYSENSOR,\n-            THING_TYPE_GENERICTHING, THING_TYPE_ROLLERSHUTTER, THING_TYPE_OCCUPANCYSENSOR,\n-            THING_TYPE_LIGHTTEMPERATUREOCCUPANCYSENSOR, THING_TYPE_LIGHTSENSOR, THING_TYPE_ENVIRONMENTALSENSOR,\n-            THING_TYPE_AUTOMATEDMETERSENSOR, THING_TYPE_THERMOSTAT, THING_TYPE_MULTFUNCTIONSMOKEDETECTOR));\n+    public static final ThingTypeUID THING_TYPE_HEATRECOVERYVENTILATION = new ThingTypeUID(BINDING_ID,\n+            \"heatRecoveryVentilation\");\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_DEVICE_THING_TYPES_UIDS = new HashSet<>(", "originalCommit": "08b01b0d85bfc595e370fdbfd21c39d5bb063eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2561d521422034049c675523b89bc1b24049206", "chunk": "diff --git a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java\nindex 961efdc1f4..4ae4bf2240 100644\n--- a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java\n+++ b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java\n\n@@ -82,14 +78,13 @@ public class EnOceanBindingConstants {\n     public static final ThingTypeUID THING_TYPE_HEATRECOVERYVENTILATION = new ThingTypeUID(BINDING_ID,\n             \"heatRecoveryVentilation\");\n \n-    public static final Set<ThingTypeUID> SUPPORTED_DEVICE_THING_TYPES_UIDS = new HashSet<>(\n-            Arrays.asList(THING_TYPE_PUSHBUTTON, THING_TYPE_ROCKERSWITCH, THING_TYPE_CLASSICDEVICE,\n-                    THING_TYPE_CENTRALCOMMAND, THING_TYPE_ROOMOPERATINGPANEL, THING_TYPE_MECHANICALHANDLE,\n-                    THING_TYPE_CONTACT, THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_TEMPERATURESENSOR,\n-                    THING_TYPE_TEMPERATUREHUMIDITYSENSOR, THING_TYPE_GENERICTHING, THING_TYPE_ROLLERSHUTTER,\n-                    THING_TYPE_OCCUPANCYSENSOR, THING_TYPE_LIGHTTEMPERATUREOCCUPANCYSENSOR, THING_TYPE_LIGHTSENSOR,\n-                    THING_TYPE_ENVIRONMENTALSENSOR, THING_TYPE_AUTOMATEDMETERSENSOR, THING_TYPE_THERMOSTAT,\n-                    THING_TYPE_MULTFUNCTIONSMOKEDETECTOR, THING_TYPE_HEATRECOVERYVENTILATION));\n+    public static final Set<ThingTypeUID> SUPPORTED_DEVICE_THING_TYPES_UIDS = Set.of(THING_TYPE_PUSHBUTTON,\n+            THING_TYPE_ROCKERSWITCH, THING_TYPE_CLASSICDEVICE, THING_TYPE_CENTRALCOMMAND, THING_TYPE_ROOMOPERATINGPANEL,\n+            THING_TYPE_MECHANICALHANDLE, THING_TYPE_CONTACT, THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_TEMPERATURESENSOR,\n+            THING_TYPE_TEMPERATUREHUMIDITYSENSOR, THING_TYPE_GENERICTHING, THING_TYPE_ROLLERSHUTTER,\n+            THING_TYPE_OCCUPANCYSENSOR, THING_TYPE_LIGHTTEMPERATUREOCCUPANCYSENSOR, THING_TYPE_LIGHTSENSOR,\n+            THING_TYPE_ENVIRONMENTALSENSOR, THING_TYPE_AUTOMATEDMETERSENSOR, THING_TYPE_THERMOSTAT,\n+            THING_TYPE_MULTFUNCTIONSMOKEDETECTOR, THING_TYPE_HEATRECOVERYVENTILATION);\n \n     // List of all Channel Type Ids, these type ids are also used as channel ids during dynamic creation of channels\n     // this makes it a lot easier as we do not have to manage a type id and an id, drawback long channel names\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5Njc5MA==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r548896790", "bodyText": "Use Map.of here", "author": "J-N-K", "createdAt": "2020-12-25T17:46:15Z", "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java", "diffHunk": "@@ -179,6 +184,30 @@\n     public static final String CHANNEL_STATUS_REQUEST_EVENT = \"statusRequestEvent\";\n     public static final String CHANNEL_SEND_COMMAND = \"sendCommand\";\n \n+    public static final String CHANNEL_VENTILATIONOPERATIONMODE = \"ventilationOperationMode\";\n+    public static final String CHANNEL_FIREPLACESAFETYMODE = \"fireplaceSafetyMode\";\n+    public static final String CHANNEL_HEATEXCHANGERBYPASSSTATUS = \"heatExchangerBypassStatus\";\n+    public static final String CHANNEL_SUPPLYAIRFLAPSTATUS = \"supplyAirFlapStatus\";\n+    public static final String CHANNEL_EXHAUSTAIRFLAPSTATUS = \"exhaustAirFlapStatus\";\n+    public static final String CHANNEL_DEFROSTMODE = \"defrostMode\";\n+    public static final String CHANNEL_COOLINGPROTECTIONMODE = \"coolingProtectionMode\";\n+    public static final String CHANNEL_OUTDOORAIRHEATERSTATUS = \"outdoorAirHeaterStatus\";\n+    public static final String CHANNEL_SUPPLYAIRHEATERSTATUS = \"supplyAirHeaterStatus\";\n+    public static final String CHANNEL_DRAINHEATERSTATUS = \"drainHeaterStatus\";\n+    public static final String CHANNEL_TIMEROPERATIONMODE = \"timerOperationMode\";\n+    public static final String CHANNEL_WEEKLYTIMERPROGRAMSTATUS = \"weeklyTimerProgramStatus\";\n+    public static final String CHANNEL_ROOMTEMPERATURECONTROLSTATUS = \"roomTemperatureControlStatus\";\n+    public static final String CHANNEL_AIRQUALITYVALUE1 = \"airQualityValue1\";\n+    public static final String CHANNEL_AIRQUALITYVALUE2 = \"airQualityValue2\";\n+    public static final String CHANNEL_OUTDOORAIRTEMPERATURE = \"outdoorAirTemperature\";\n+    public static final String CHANNEL_SUPPLYAIRTEMPERATURE = \"supplyAirTemperature\";\n+    public static final String CHANNEL_INDOORAIRTEMPERATURE = \"indoorAirTemperature\";\n+    public static final String CHANNEL_EXHAUSTAIRTEMPERATURE = \"exhaustAirTemperature\";\n+    public static final String CHANNEL_SUPPLYAIRFANAIRFLOWRATE = \"supplyAirFanAirFlowRate\";\n+    public static final String CHANNEL_EXHAUSTAIRFANAIRFLOWRATE = \"exhaustAirFanAirFlowRate\";\n+    public static final String CHANNEL_SUPPLYFANSPEED = \"supplyFanSpeed\";\n+    public static final String CHANNEL_EXHAUSTFANSPEED = \"exhaustFanSpeed\";\n+\n     public static final Map<String, EnOceanChannelDescription> CHANNELID2CHANNELDESCRIPTION = Collections", "originalCommit": "08b01b0d85bfc595e370fdbfd21c39d5bb063eb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcyMzA2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r552723063", "bodyText": "As I have more than 10 entries here, I am using Map.ofEntries, hope this is the expected way", "author": "fruggy83", "createdAt": "2021-01-06T15:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5Njc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "e2561d521422034049c675523b89bc1b24049206", "chunk": "diff --git a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java\nindex 961efdc1f4..4ae4bf2240 100644\n--- a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java\n+++ b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java\n\n@@ -208,280 +203,332 @@ public class EnOceanBindingConstants {\n     public static final String CHANNEL_SUPPLYFANSPEED = \"supplyFanSpeed\";\n     public static final String CHANNEL_EXHAUSTFANSPEED = \"exhaustFanSpeed\";\n \n-    public static final Map<String, EnOceanChannelDescription> CHANNELID2CHANNELDESCRIPTION = Collections\n-            .unmodifiableMap(new HashMap<String, EnOceanChannelDescription>() {\n-                private static final long serialVersionUID = 1L;\n-\n-                {\n-                    put(CHANNEL_GENERAL_SWITCHING, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_GENERAL_SWITCHING), CoreItemFactory.SWITCH));\n-\n-                    put(CHANNEL_GENERAL_SWITCHINGA, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_GENERAL_SWITCHINGA), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_GENERAL_SWITCHINGB, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_GENERAL_SWITCHINGB), CoreItemFactory.SWITCH));\n-\n-                    put(CHANNEL_DIMMER, new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_DIMMER),\n-                            CoreItemFactory.DIMMER));\n-                    put(CHANNEL_ROLLERSHUTTER, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_ROLLERSHUTTER), CoreItemFactory.ROLLERSHUTTER));\n-                    put(CHANNEL_ANGLE, new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ANGLE),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Angle.class.getSimpleName()));\n-                    put(CHANNEL_TEMPERATURE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_TEMPERATURE),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName()));\n-                    put(CHANNEL_HUMIDITY, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_HUMIDITY), CoreItemFactory.NUMBER));\n-                    put(CHANNEL_FANSPEEDSTAGE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_FANSPEEDSTAGE), CoreItemFactory.STRING));\n-                    put(CHANNEL_OCCUPANCY, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_OCCUPANCY), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_MOTIONDETECTION, new EnOceanChannelDescription(\n-                            DefaultSystemChannelTypeProvider.SYSTEM_MOTION.getUID(), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_VIBRATION, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_VIBRATION), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_ILLUMINATION, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_ILLUMINATION),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Illuminance.class.getSimpleName()));\n-                    put(CHANNEL_ILLUMINATIONWEST, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_ILLUMINATIONWEST),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Illuminance.class.getSimpleName()));\n-                    put(CHANNEL_ILLUMINATIONSOUTHNORTH, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_ILLUMINATIONSOUTHNORTH),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Illuminance.class.getSimpleName()));\n-                    put(CHANNEL_ILLUMINATIONEAST, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_ILLUMINATIONEAST),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Illuminance.class.getSimpleName()));\n-                    put(CHANNEL_WINDSPEED, new EnOceanChannelDescription(\n-                            DefaultSystemChannelTypeProvider.SYSTEM_WIND_SPEED.getUID(),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Speed.class.getSimpleName()));\n-                    put(CHANNEL_RAINSTATUS, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_RAINSTATUS), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_COUNTER, new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_COUNTER),\n-                            CoreItemFactory.NUMBER));\n-                    put(CHANNEL_CURRENTNUMBER, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_CURRENTNUMBER), CoreItemFactory.NUMBER));\n-                    put(CHANNEL_SMOKEDETECTION, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SMOKEDETECTION), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_SENSORFAULT, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SENSORFAULT), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_MAINTENANCESTATUS, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SENSORFAULT), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_SENSORANALYSISHUMIDITYRANGE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SENSORFAULT), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_SENSORANALYSISTEMPERATURRANGE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SENSORFAULT), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_TIMESINCELASTMAINTENANCE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_TIMESINCELASTMAINTENANCE),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Time.class.getSimpleName()));\n-                    put(CHANNEL_REMAININGPLT, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_REMAININGPLT),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Time.class.getSimpleName()));\n-                    put(CHANNEL_HYGROCOMFORTINDEX, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_HYGROCOMFORTINDEX), CoreItemFactory.STRING));\n-                    put(CHANNEL_INDOORAIRANALYSIS, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_INDOORAIRANALYSIS), CoreItemFactory.STRING));\n-                    put(CHANNEL_SETPOINT, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SETPOINT), CoreItemFactory.NUMBER));\n-                    put(CHANNEL_CONTACT, new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_CONTACT),\n-                            CoreItemFactory.CONTACT));\n-                    put(CHANNEL_WINDOWHANDLESTATE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_WINDOWHANDLESTATE), CoreItemFactory.STRING));\n-                    put(CHANNEL_BATTERY_VOLTAGE,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_BATTERY_VOLTAGE),\n-                                    CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n-                                            + ElectricPotential.class.getSimpleName()));\n-                    put(CHANNEL_ENERGY_STORAGE,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ENERGY_STORAGE),\n-                                    CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n-                                            + ElectricPotential.class.getSimpleName()));\n-                    put(CHANNEL_BATTERY_LEVEL,\n-                            new EnOceanChannelDescription(\n-                                    DefaultSystemChannelTypeProvider.SYSTEM_CHANNEL_BATTERY_LEVEL.getUID(),\n-                                    CoreItemFactory.NUMBER));\n-                    put(CHANNEL_BATTERYLOW,\n-                            new EnOceanChannelDescription(\n-                                    DefaultSystemChannelTypeProvider.SYSTEM_CHANNEL_LOW_BATTERY.getUID(),\n-                                    CoreItemFactory.SWITCH));\n-                    put(CHANNEL_TEACHINCMD, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_TEACHINCMD), CoreItemFactory.SWITCH));\n-\n-                    put(CHANNEL_PUSHBUTTON,\n-                            new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_RAWBUTTON.getUID(),\n-                                    null, \"Push button\", false, true));\n-                    put(CHANNEL_DOUBLEPRESS,\n-                            new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_RAWBUTTON.getUID(),\n-                                    null, \"Double press\", false, true));\n-                    put(CHANNEL_LONGPRESS,\n-                            new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_RAWBUTTON.getUID(),\n-                                    null, \"Long press\", false, true));\n-\n-                    put(CHANNEL_ROCKERSWITCH_CHANNELA,\n-                            new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_RAWROCKER.getUID(),\n-                                    null, \"Rocker Switch - Channel A\", false, false));\n-                    put(CHANNEL_ROCKERSWITCH_CHANNELB,\n-                            new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_RAWROCKER.getUID(),\n-                                    null, \"Rocker Switch - Channel B\", false, false));\n-\n-                    put(CHANNEL_VIRTUALSWITCHA,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_VIRTUALSWITCHA),\n-                                    CoreItemFactory.SWITCH, \"\", true, false));\n-                    put(CHANNEL_VIRTUALROLLERSHUTTERA,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_VIRTUALROLLERSHUTTERA),\n-                                    CoreItemFactory.ROLLERSHUTTER, \"\", true, false));\n-                    put(CHANNEL_VIRTUALROCKERSWITCHB,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_VIRTUALROCKERSWITCHB),\n-                                    CoreItemFactory.STRING, \"Rocker Switch - Channel B\", true, false));\n-                    put(CHANNEL_ROCKERSWITCHLISTENERSWITCH,\n-                            new EnOceanChannelDescription(\n-                                    new ChannelTypeUID(BINDING_ID, CHANNEL_ROCKERSWITCHLISTENERSWITCH),\n-                                    CoreItemFactory.SWITCH, \"Rocker Switch Listener (Switch)\", true, false));\n-                    put(CHANNEL_ROCKERSWITCHLISTENERROLLERSHUTTER, new EnOceanChannelDescription(\n+    public static final Map<String, EnOceanChannelDescription> CHANNELID2CHANNELDESCRIPTION = Map.ofEntries(\n+            Map.entry(CHANNEL_GENERAL_SWITCHING,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERAL_SWITCHING),\n+                            CoreItemFactory.SWITCH)),\n+\n+            Map.entry(CHANNEL_GENERAL_SWITCHINGA,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERAL_SWITCHINGA),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_GENERAL_SWITCHINGB,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERAL_SWITCHINGB),\n+                            CoreItemFactory.SWITCH)),\n+\n+            Map.entry(CHANNEL_DIMMER,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_DIMMER),\n+                            CoreItemFactory.DIMMER)),\n+            Map.entry(CHANNEL_ROLLERSHUTTER,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ROLLERSHUTTER),\n+                            CoreItemFactory.ROLLERSHUTTER)),\n+            Map.entry(CHANNEL_ANGLE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ANGLE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Angle.class.getSimpleName())),\n+            Map.entry(CHANNEL_TEMPERATURE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_TEMPERATURE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName())),\n+            Map.entry(CHANNEL_HUMIDITY,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_HUMIDITY),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_FANSPEEDSTAGE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_FANSPEEDSTAGE),\n+                            CoreItemFactory.STRING)),\n+            Map.entry(CHANNEL_OCCUPANCY,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_OCCUPANCY),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_MOTIONDETECTION,\n+                    new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_MOTION.getUID(),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_VIBRATION,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_VIBRATION),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_ILLUMINATION,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ILLUMINATION),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Illuminance.class.getSimpleName())),\n+            Map.entry(CHANNEL_ILLUMINATIONWEST,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ILLUMINATIONWEST),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Illuminance.class.getSimpleName())),\n+            Map.entry(CHANNEL_ILLUMINATIONSOUTHNORTH,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ILLUMINATIONSOUTHNORTH),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Illuminance.class.getSimpleName())),\n+            Map.entry(CHANNEL_ILLUMINATIONEAST,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ILLUMINATIONEAST),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Illuminance.class.getSimpleName())),\n+            Map.entry(CHANNEL_WINDSPEED,\n+                    new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_WIND_SPEED.getUID(),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Speed.class.getSimpleName())),\n+            Map.entry(CHANNEL_RAINSTATUS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_RAINSTATUS),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_COUNTER,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_COUNTER),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_CURRENTNUMBER,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_CURRENTNUMBER),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_SMOKEDETECTION,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SMOKEDETECTION),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_SENSORFAULT,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SENSORFAULT),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_MAINTENANCESTATUS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SENSORFAULT),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_SENSORANALYSISHUMIDITYRANGE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SENSORFAULT),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_SENSORANALYSISTEMPERATURRANGE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SENSORFAULT),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_TIMESINCELASTMAINTENANCE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_TIMESINCELASTMAINTENANCE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Time.class.getSimpleName())),\n+            Map.entry(CHANNEL_REMAININGPLT,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_REMAININGPLT),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Time.class.getSimpleName())),\n+            Map.entry(CHANNEL_HYGROCOMFORTINDEX,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_HYGROCOMFORTINDEX),\n+                            CoreItemFactory.STRING)),\n+            Map.entry(CHANNEL_INDOORAIRANALYSIS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_INDOORAIRANALYSIS),\n+                            CoreItemFactory.STRING)),\n+            Map.entry(CHANNEL_SETPOINT,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SETPOINT),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_CONTACT,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_CONTACT),\n+                            CoreItemFactory.CONTACT)),\n+            Map.entry(CHANNEL_WINDOWHANDLESTATE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_WINDOWHANDLESTATE),\n+                            CoreItemFactory.STRING)),\n+            Map.entry(\n+                    CHANNEL_BATTERY_VOLTAGE,\n+                    new EnOceanChannelDescription(\n+                            new ChannelTypeUID(BINDING_ID, CHANNEL_BATTERY_VOLTAGE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n+                                    + ElectricPotential.class.getSimpleName())),\n+            Map.entry(CHANNEL_ENERGY_STORAGE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ENERGY_STORAGE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n+                                    + ElectricPotential.class.getSimpleName())),\n+            Map.entry(CHANNEL_BATTERY_LEVEL, new EnOceanChannelDescription(\n+                    DefaultSystemChannelTypeProvider.SYSTEM_CHANNEL_BATTERY_LEVEL.getUID(), CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_BATTERYLOW,\n+                    new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_CHANNEL_LOW_BATTERY.getUID(),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_TEACHINCMD,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_TEACHINCMD),\n+                            CoreItemFactory.SWITCH)),\n+\n+            Map.entry(CHANNEL_PUSHBUTTON,\n+                    new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_RAWBUTTON.getUID(), null,\n+                            \"Push button\", false, true)),\n+            Map.entry(CHANNEL_DOUBLEPRESS,\n+                    new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_RAWBUTTON.getUID(), null,\n+                            \"Double press\", false, true)),\n+            Map.entry(CHANNEL_LONGPRESS,\n+                    new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_RAWBUTTON.getUID(), null,\n+                            \"Long press\", false, true)),\n+\n+            Map.entry(CHANNEL_ROCKERSWITCH_CHANNELA,\n+                    new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_RAWROCKER.getUID(), null,\n+                            \"Rocker Switch - Channel A\", false, false)),\n+            Map.entry(CHANNEL_ROCKERSWITCH_CHANNELB,\n+                    new EnOceanChannelDescription(DefaultSystemChannelTypeProvider.SYSTEM_RAWROCKER.getUID(), null,\n+                            \"Rocker Switch - Channel B\", false, false)),\n+\n+            Map.entry(CHANNEL_VIRTUALSWITCHA,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_VIRTUALSWITCHA),\n+                            CoreItemFactory.SWITCH, \"\", true, false)),\n+            Map.entry(CHANNEL_VIRTUALROLLERSHUTTERA,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_VIRTUALROLLERSHUTTERA),\n+                            CoreItemFactory.ROLLERSHUTTER, \"\", true, false)),\n+            Map.entry(CHANNEL_VIRTUALROCKERSWITCHB,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_VIRTUALROCKERSWITCHB),\n+                            CoreItemFactory.STRING, \"Rocker Switch - Channel B\", true, false)),\n+            Map.entry(CHANNEL_ROCKERSWITCHLISTENERSWITCH,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ROCKERSWITCHLISTENERSWITCH),\n+                            CoreItemFactory.SWITCH, \"Rocker Switch Listener (Switch)\", true, false)),\n+            Map.entry(CHANNEL_ROCKERSWITCHLISTENERROLLERSHUTTER,\n+                    new EnOceanChannelDescription(\n                             new ChannelTypeUID(BINDING_ID, CHANNEL_ROCKERSWITCHLISTENERROLLERSHUTTER),\n-                            CoreItemFactory.ROLLERSHUTTER, \"Rocker Switch Listener (Rollershutter)\", true, false));\n-\n-                    put(CHANNEL_INSTANTPOWER, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_INSTANTPOWER),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Power.class.getSimpleName()));\n-                    put(CHANNEL_TOTALUSAGE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_TOTALUSAGE),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Energy.class.getSimpleName()));\n-                    put(CHANNEL_CURRENTFLOW,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_CURRENTFLOW),\n-                                    CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n-                                            + VolumetricFlowRate.class.getSimpleName()));\n-                    put(CHANNEL_CUMULATIVEVALUE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_CUMULATIVEVALUE),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Volume.class.getSimpleName()));\n-                    put(CHANNEL_AUTOOFF, new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_AUTOOFF),\n-                            CoreItemFactory.NUMBER));\n-                    put(CHANNEL_DELAYRADIOOFF, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_DELAYRADIOOFF), CoreItemFactory.NUMBER));\n-                    put(CHANNEL_EXTERNALINTERFACEMODE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_EXTERNALINTERFACEMODE), CoreItemFactory.STRING));\n-                    put(CHANNEL_TWOSTATESWITCH, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_TWOSTATESWITCH), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_ECOMODE, new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ECOMODE),\n-                            CoreItemFactory.SWITCH));\n-\n-                    put(CHANNEL_RSSI, new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_RSSI),\n-                            CoreItemFactory.NUMBER));\n-                    put(CHANNEL_REPEATCOUNT, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_REPEATCOUNT), CoreItemFactory.NUMBER));\n-                    put(CHANNEL_LASTRECEIVED, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_LASTRECEIVED), CoreItemFactory.DATETIME));\n-\n-                    put(CHANNEL_GENERIC_SWITCH, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_SWITCH), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_GENERIC_ROLLERSHUTTER,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_ROLLERSHUTTER),\n-                                    CoreItemFactory.ROLLERSHUTTER));\n-                    put(CHANNEL_GENERIC_DIMMER, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_DIMMER), CoreItemFactory.DIMMER));\n-                    put(CHANNEL_GENERIC_NUMBER, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_NUMBER), CoreItemFactory.NUMBER));\n-                    put(CHANNEL_GENERIC_STRING, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_STRING), CoreItemFactory.STRING));\n-                    put(CHANNEL_GENERIC_COLOR, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_COLOR), CoreItemFactory.COLOR));\n-                    put(CHANNEL_GENERIC_TEACHINCMD, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_TEACHINCMD), CoreItemFactory.SWITCH));\n-\n-                    put(CHANNEL_VALVE_POSITION, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_VALVE_POSITION), CoreItemFactory.NUMBER));\n-                    put(CHANNEL_BUTTON_LOCK, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_BUTTON_LOCK), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_DISPLAY_ORIENTATION, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_DISPLAY_ORIENTATION), CoreItemFactory.NUMBER));\n-                    put(CHANNEL_TEMPERATURE_SETPOINT, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_TEMPERATURE_SETPOINT),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName()));\n-                    put(CHANNEL_FEED_TEMPERATURE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_FEED_TEMPERATURE),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName()));\n-                    put(CHANNEL_MEASUREMENT_CONTROL, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_MEASUREMENT_CONTROL), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_FAILURE_CODE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_FAILURE_CODE), CoreItemFactory.NUMBER));\n-                    put(CHANNEL_WAKEUPCYCLE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_WAKEUPCYCLE), CoreItemFactory.NUMBER));\n-                    put(CHANNEL_SERVICECOMMAND, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SERVICECOMMAND), CoreItemFactory.NUMBER));\n-\n-                    put(CHANNEL_STATUS_REQUEST_EVENT, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_STATUS_REQUEST_EVENT), null, \"\", false, true));\n-                    put(CHANNEL_SEND_COMMAND, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SEND_COMMAND), CoreItemFactory.SWITCH));\n-\n-                    put(CHANNEL_VENTILATIONOPERATIONMODE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_VENTILATIONOPERATIONMODE), CoreItemFactory.STRING));\n-                    put(CHANNEL_FIREPLACESAFETYMODE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_FIREPLACESAFETYMODE), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_HEATEXCHANGERBYPASSSTATUS,\n-                            new EnOceanChannelDescription(\n-                                    new ChannelTypeUID(BINDING_ID, CHANNEL_HEATEXCHANGERBYPASSSTATUS),\n-                                    CoreItemFactory.CONTACT));\n-                    put(CHANNEL_SUPPLYAIRFLAPSTATUS, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SUPPLYAIRFLAPSTATUS), CoreItemFactory.CONTACT));\n-                    put(CHANNEL_EXHAUSTAIRFLAPSTATUS, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_EXHAUSTAIRFLAPSTATUS), CoreItemFactory.CONTACT));\n-                    put(CHANNEL_DEFROSTMODE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_DEFROSTMODE), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_COOLINGPROTECTIONMODE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_COOLINGPROTECTIONMODE), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_OUTDOORAIRHEATERSTATUS, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_OUTDOORAIRHEATERSTATUS), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_SUPPLYAIRHEATERSTATUS, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SUPPLYAIRHEATERSTATUS), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_DRAINHEATERSTATUS, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_DRAINHEATERSTATUS), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_TIMEROPERATIONMODE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_TIMEROPERATIONMODE), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_WEEKLYTIMERPROGRAMSTATUS, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_WEEKLYTIMERPROGRAMSTATUS), CoreItemFactory.SWITCH));\n-                    put(CHANNEL_ROOMTEMPERATURECONTROLSTATUS,\n-                            new EnOceanChannelDescription(\n-                                    new ChannelTypeUID(BINDING_ID, CHANNEL_ROOMTEMPERATURECONTROLSTATUS),\n-                                    CoreItemFactory.SWITCH));\n-                    put(CHANNEL_AIRQUALITYVALUE1,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_AIRQUALITYVALUE1),\n-                                    CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n-                                            + Dimensionless.class.getSimpleName()));\n-                    put(CHANNEL_AIRQUALITYVALUE2,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_AIRQUALITYVALUE2),\n-                                    CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n-                                            + Dimensionless.class.getSimpleName()));\n-                    put(CHANNEL_OUTDOORAIRTEMPERATURE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_OUTDOORAIRTEMPERATURE),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName()));\n-                    put(CHANNEL_SUPPLYAIRTEMPERATURE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SUPPLYAIRTEMPERATURE),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName()));\n-                    put(CHANNEL_INDOORAIRTEMPERATURE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_INDOORAIRTEMPERATURE),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName()));\n-                    put(CHANNEL_EXHAUSTAIRTEMPERATURE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_EXHAUSTAIRTEMPERATURE),\n-                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName()));\n-                    put(CHANNEL_SUPPLYAIRFANAIRFLOWRATE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_SUPPLYAIRFANAIRFLOWRATE), CoreItemFactory.NUMBER\n-                                    + ItemUtil.EXTENSION_SEPARATOR + VolumetricFlowRate.class.getSimpleName()));\n-                    put(CHANNEL_EXHAUSTAIRFANAIRFLOWRATE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_EXHAUSTAIRFANAIRFLOWRATE), CoreItemFactory.NUMBER\n-                                    + ItemUtil.EXTENSION_SEPARATOR + VolumetricFlowRate.class.getSimpleName()));\n-                    put(CHANNEL_SUPPLYFANSPEED,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SUPPLYFANSPEED),\n-                                    CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n-                                            + Dimensionless.class.getSimpleName()));\n-                    put(CHANNEL_EXHAUSTFANSPEED,\n-                            new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_EXHAUSTFANSPEED),\n-                                    CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n-                                            + Dimensionless.class.getSimpleName()));\n-\n-                    put(CHANNEL_REPEATERMODE, new EnOceanChannelDescription(\n-                            new ChannelTypeUID(BINDING_ID, CHANNEL_REPEATERMODE), CoreItemFactory.STRING));\n-                }\n-            });\n+                            CoreItemFactory.ROLLERSHUTTER, \"Rocker Switch Listener (Rollershutter)\", true, false)),\n+\n+            Map.entry(CHANNEL_INSTANTPOWER,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_INSTANTPOWER),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Power.class.getSimpleName())),\n+            Map.entry(CHANNEL_TOTALUSAGE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_TOTALUSAGE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Energy.class.getSimpleName())),\n+            Map.entry(CHANNEL_CURRENTFLOW,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_CURRENTFLOW),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n+                                    + VolumetricFlowRate.class.getSimpleName())),\n+            Map.entry(CHANNEL_CUMULATIVEVALUE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_CUMULATIVEVALUE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Volume.class.getSimpleName())),\n+            Map.entry(CHANNEL_AUTOOFF,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_AUTOOFF),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_DELAYRADIOOFF,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_DELAYRADIOOFF),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_EXTERNALINTERFACEMODE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_EXTERNALINTERFACEMODE),\n+                            CoreItemFactory.STRING)),\n+            Map.entry(CHANNEL_TWOSTATESWITCH,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_TWOSTATESWITCH),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_ECOMODE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ECOMODE),\n+                            CoreItemFactory.SWITCH)),\n+\n+            Map.entry(CHANNEL_RSSI,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_RSSI),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_REPEATCOUNT,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_REPEATCOUNT),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_LASTRECEIVED,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_LASTRECEIVED),\n+                            CoreItemFactory.DATETIME)),\n+\n+            Map.entry(CHANNEL_GENERIC_SWITCH,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_SWITCH),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_GENERIC_ROLLERSHUTTER,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_ROLLERSHUTTER),\n+                            CoreItemFactory.ROLLERSHUTTER)),\n+            Map.entry(CHANNEL_GENERIC_DIMMER,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_DIMMER),\n+                            CoreItemFactory.DIMMER)),\n+            Map.entry(CHANNEL_GENERIC_NUMBER,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_NUMBER),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_GENERIC_STRING,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_STRING),\n+                            CoreItemFactory.STRING)),\n+            Map.entry(CHANNEL_GENERIC_COLOR,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_COLOR),\n+                            CoreItemFactory.COLOR)),\n+            Map.entry(CHANNEL_GENERIC_TEACHINCMD,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_GENERIC_TEACHINCMD),\n+                            CoreItemFactory.SWITCH)),\n+\n+            Map.entry(CHANNEL_VALVE_POSITION,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_VALVE_POSITION),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_BUTTON_LOCK,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_BUTTON_LOCK),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_DISPLAY_ORIENTATION,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_DISPLAY_ORIENTATION),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_TEMPERATURE_SETPOINT,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_TEMPERATURE_SETPOINT),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName())),\n+            Map.entry(CHANNEL_FEED_TEMPERATURE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_FEED_TEMPERATURE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName())),\n+            Map.entry(CHANNEL_MEASUREMENT_CONTROL,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_MEASUREMENT_CONTROL),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_FAILURE_CODE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_FAILURE_CODE),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_WAKEUPCYCLE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_WAKEUPCYCLE),\n+                            CoreItemFactory.NUMBER)),\n+            Map.entry(CHANNEL_SERVICECOMMAND,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SERVICECOMMAND),\n+                            CoreItemFactory.NUMBER)),\n+\n+            Map.entry(CHANNEL_STATUS_REQUEST_EVENT,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_STATUS_REQUEST_EVENT), null,\n+                            \"\", false, true)),\n+            Map.entry(CHANNEL_SEND_COMMAND,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SEND_COMMAND),\n+                            CoreItemFactory.SWITCH)),\n+\n+            Map.entry(CHANNEL_VENTILATIONOPERATIONMODE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_VENTILATIONOPERATIONMODE),\n+                            CoreItemFactory.STRING)),\n+            Map.entry(CHANNEL_FIREPLACESAFETYMODE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_FIREPLACESAFETYMODE),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_HEATEXCHANGERBYPASSSTATUS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_HEATEXCHANGERBYPASSSTATUS),\n+                            CoreItemFactory.CONTACT)),\n+            Map.entry(CHANNEL_SUPPLYAIRFLAPSTATUS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SUPPLYAIRFLAPSTATUS),\n+                            CoreItemFactory.CONTACT)),\n+            Map.entry(CHANNEL_EXHAUSTAIRFLAPSTATUS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_EXHAUSTAIRFLAPSTATUS),\n+                            CoreItemFactory.CONTACT)),\n+            Map.entry(CHANNEL_DEFROSTMODE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_DEFROSTMODE),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_COOLINGPROTECTIONMODE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_COOLINGPROTECTIONMODE),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_OUTDOORAIRHEATERSTATUS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_OUTDOORAIRHEATERSTATUS),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_SUPPLYAIRHEATERSTATUS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SUPPLYAIRHEATERSTATUS),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_DRAINHEATERSTATUS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_DRAINHEATERSTATUS),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_TIMEROPERATIONMODE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_TIMEROPERATIONMODE),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_WEEKLYTIMERPROGRAMSTATUS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_WEEKLYTIMERPROGRAMSTATUS),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_ROOMTEMPERATURECONTROLSTATUS,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_ROOMTEMPERATURECONTROLSTATUS),\n+                            CoreItemFactory.SWITCH)),\n+            Map.entry(CHANNEL_AIRQUALITYVALUE1,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_AIRQUALITYVALUE1),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n+                                    + Dimensionless.class.getSimpleName())),\n+            Map.entry(CHANNEL_AIRQUALITYVALUE2,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_AIRQUALITYVALUE2),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n+                                    + Dimensionless.class.getSimpleName())),\n+            Map.entry(CHANNEL_OUTDOORAIRTEMPERATURE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_OUTDOORAIRTEMPERATURE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName())),\n+            Map.entry(CHANNEL_SUPPLYAIRTEMPERATURE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SUPPLYAIRTEMPERATURE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName())),\n+            Map.entry(CHANNEL_INDOORAIRTEMPERATURE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_INDOORAIRTEMPERATURE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName())),\n+            Map.entry(CHANNEL_EXHAUSTAIRTEMPERATURE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_EXHAUSTAIRTEMPERATURE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR + Temperature.class.getSimpleName())),\n+            Map.entry(CHANNEL_SUPPLYAIRFANAIRFLOWRATE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SUPPLYAIRFANAIRFLOWRATE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n+                                    + VolumetricFlowRate.class.getSimpleName())),\n+            Map.entry(CHANNEL_EXHAUSTAIRFANAIRFLOWRATE,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_EXHAUSTAIRFANAIRFLOWRATE),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n+                                    + VolumetricFlowRate.class.getSimpleName())),\n+            Map.entry(CHANNEL_SUPPLYFANSPEED,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_SUPPLYFANSPEED),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n+                                    + Dimensionless.class.getSimpleName())),\n+            Map.entry(CHANNEL_EXHAUSTFANSPEED,\n+                    new EnOceanChannelDescription(new ChannelTypeUID(BINDING_ID, CHANNEL_EXHAUSTFANSPEED),\n+                            CoreItemFactory.NUMBER + ItemUtil.EXTENSION_SEPARATOR\n+                                    + Dimensionless.class.getSimpleName())),\n+\n+            Map.entry(CHANNEL_REPEATERMODE, new EnOceanChannelDescription(\n+                    new ChannelTypeUID(BINDING_ID, CHANNEL_REPEATERMODE), CoreItemFactory.STRING)));\n \n     // List of all repeater mode states\n     public static final String REPEATERMODE_OFF = \"OFF\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5Njg5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r548896895", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return getBit(bytes[2], 7) ? OnOffType.ON : OnOffType.OFF;\n          \n          \n            \n                            return OnOffType.from(getBit(bytes[2], 7));", "author": "J-N-K", "createdAt": "2020-12-25T17:47:18Z", "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import static org.openhab.binding.enocean.internal.EnOceanBindingConstants.*;\n+\n+import java.util.function.Function;\n+\n+import org.openhab.binding.enocean.internal.Helper;\n+import org.openhab.binding.enocean.internal.eep.Base._VLDMessage;\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50 extends _VLDMessage {\n+\n+    protected final byte mtMask = (byte) 0xf0;\n+    protected final byte MT_REMOTE_TRANSMISSION_REQUEST = 0x00;\n+    protected final byte MT_CONTROL = 0x20;\n+    protected final byte MT_BASIC_STATUS = 0x40;\n+    protected final byte MT_EXTENDED_STATUS = 0x60; // not yet implemented\n+\n+    protected final byte rmtMask = (byte) 0x0f;\n+    protected final byte RMT_BASIC_STATUS = 0x00;\n+    protected final byte RMT_EXTENDED_STATUS = 0x01; // not yet implemented\n+\n+    protected final byte DOMC_NOACTION = 0x0f;\n+    protected final byte CONTROL_NOACTION = 0;\n+    protected final byte TMOC_NOACTION = 127;\n+    protected final byte TMOC_ACTIVATE = (byte) 0xff;\n+    protected final byte THRESHOLD_NOACTION = 127;\n+\n+    public D2_50() {\n+        super();\n+    }\n+\n+    public D2_50(ERP1Message packet) {\n+        super(packet);\n+    }\n+\n+    protected byte getMessageType(byte b) {\n+        return (byte) (b & mtMask);\n+    }\n+\n+    @Override\n+    public void addConfigPropertiesTo(DiscoveryResultBuilder discoveredThingResultBuilder) {\n+        discoveredThingResultBuilder.withProperty(PARAMETER_SENDINGEEPID, getEEPType().getId())\n+                .withProperty(PARAMETER_RECEIVINGEEPID, getEEPType().getId());\n+    }\n+\n+    @Override\n+    protected void convertFromCommandImpl(String channelId, String channelTypeId, Command command,\n+            Function<String, State> getCurrentStateFunc, Configuration config) {\n+\n+        // we need to send just a single message to refresh all channel states, hence just send refresh for OM\n+        if (command == RefreshType.REFRESH && CHANNEL_VENTILATIONOPERATIONMODE.equals(channelId)) {\n+            setData((byte) (MT_REMOTE_TRANSMISSION_REQUEST + RMT_BASIC_STATUS));\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_VENTILATIONOPERATIONMODE:\n+                    if (command instanceof StringType) {\n+                        byte value = (byte) (Helper.tryParseInt(((StringType) command).toString(), 15) & 0x0f);\n+                        setData((byte) (MT_CONTROL + value), CONTROL_NOACTION, TMOC_NOACTION, THRESHOLD_NOACTION,\n+                                THRESHOLD_NOACTION, CONTROL_NOACTION);\n+                    }\n+                    break;\n+                case CHANNEL_TIMEROPERATIONMODE:\n+                    if (command instanceof OnOffType) {\n+                        byte value = (OnOffType) command == OnOffType.ON ? TMOC_ACTIVATE : TMOC_NOACTION;\n+                        setData((byte) (MT_CONTROL + DOMC_NOACTION), CONTROL_NOACTION, value, THRESHOLD_NOACTION,\n+                                THRESHOLD_NOACTION, CONTROL_NOACTION);\n+                    }\n+                    break;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected State convertToStateImpl(String channelId, String channelTypeId,\n+            Function<String, State> getCurrentStateFunc, Configuration config) {\n+\n+        if (getMessageType(bytes[0]) != MT_BASIC_STATUS) {\n+            return UnDefType.UNDEF;\n+        }\n+\n+        switch (channelId) {\n+            case CHANNEL_VENTILATIONOPERATIONMODE:\n+                return new StringType(String.valueOf(bytes[0] & 0x0f));\n+            case CHANNEL_FIREPLACESAFETYMODE:\n+                return getBit(bytes[1], 3) ? OnOffType.ON : OnOffType.OFF;\n+            case CHANNEL_HEATEXCHANGERBYPASSSTATUS:\n+                return getBit(bytes[1], 2) ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+            case CHANNEL_SUPPLYAIRFLAPSTATUS:\n+                return getBit(bytes[1], 1) ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+            case CHANNEL_EXHAUSTAIRFLAPSTATUS:\n+                return getBit(bytes[1], 0) ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+            case CHANNEL_DEFROSTMODE:\n+                return getBit(bytes[2], 7) ? OnOffType.ON : OnOffType.OFF;", "originalCommit": "08b01b0d85bfc595e370fdbfd21c39d5bb063eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2561d521422034049c675523b89bc1b24049206", "chunk": "diff --git a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java\nindex 15946c5f34..42d8084ea4 100644\n--- a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java\n+++ b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java\n\n@@ -112,7 +112,7 @@ public class D2_50 extends _VLDMessage {\n             case CHANNEL_VENTILATIONOPERATIONMODE:\n                 return new StringType(String.valueOf(bytes[0] & 0x0f));\n             case CHANNEL_FIREPLACESAFETYMODE:\n-                return getBit(bytes[1], 3) ? OnOffType.ON : OnOffType.OFF;\n+                return OnOffType.from(getBit(bytes[1], 3));\n             case CHANNEL_HEATEXCHANGERBYPASSSTATUS:\n                 return getBit(bytes[1], 2) ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n             case CHANNEL_SUPPLYAIRFLAPSTATUS:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5NzAwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r548897007", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n          \n          \n            \n                        Arrays.asList(THING_TYPE_CENTRALCOMMAND, THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_GENERICTHING,\n          \n          \n            \n                                THING_TYPE_ROLLERSHUTTER, THING_TYPE_THERMOSTAT, THING_TYPE_HEATRECOVERYVENTILATION));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(THING_TYPE_CENTRALCOMMAND, THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_GENERICTHING,\n          \n          \n            \n                                THING_TYPE_ROLLERSHUTTER, THING_TYPE_THERMOSTAT, THING_TYPE_HEATRECOVERYVENTILATION);", "author": "J-N-K", "createdAt": "2020-12-25T17:48:39Z", "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/handler/EnOceanBaseActuatorHandler.java", "diffHunk": "@@ -50,8 +50,9 @@\n public class EnOceanBaseActuatorHandler extends EnOceanBaseSensorHandler {\n \n     // List of thing types which support sending of eep messages\n-    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_CENTRALCOMMAND,\n-            THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_GENERICTHING, THING_TYPE_ROLLERSHUTTER, THING_TYPE_THERMOSTAT));\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n+            Arrays.asList(THING_TYPE_CENTRALCOMMAND, THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_GENERICTHING,\n+                    THING_TYPE_ROLLERSHUTTER, THING_TYPE_THERMOSTAT, THING_TYPE_HEATRECOVERYVENTILATION));", "originalCommit": "08b01b0d85bfc595e370fdbfd21c39d5bb063eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2561d521422034049c675523b89bc1b24049206", "chunk": "diff --git a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/handler/EnOceanBaseActuatorHandler.java b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/handler/EnOceanBaseActuatorHandler.java\nindex 24e9b30689..5907691537 100644\n--- a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/handler/EnOceanBaseActuatorHandler.java\n+++ b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/handler/EnOceanBaseActuatorHandler.java\n\n@@ -50,9 +48,9 @@ import org.openhab.core.util.HexUtils;\n public class EnOceanBaseActuatorHandler extends EnOceanBaseSensorHandler {\n \n     // List of thing types which support sending of eep messages\n-    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n-            Arrays.asList(THING_TYPE_CENTRALCOMMAND, THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_GENERICTHING,\n-                    THING_TYPE_ROLLERSHUTTER, THING_TYPE_THERMOSTAT, THING_TYPE_HEATRECOVERYVENTILATION));\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(THING_TYPE_CENTRALCOMMAND,\n+            THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_GENERICTHING, THING_TYPE_ROLLERSHUTTER, THING_TYPE_THERMOSTAT,\n+            THING_TYPE_HEATRECOVERYVENTILATION);\n \n     protected byte[] senderId; // base id of bridge + senderIdOffset, used for sending msg\n     protected byte[] destinationId; // in case of broadcast FFFFFFFF otherwise the enocean id of the device\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0NjkzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r563346939", "bodyText": "If the fields are immutable and not defined in the constructor, please them static as well.", "author": "cpmeister", "createdAt": "2021-01-24T20:42:58Z", "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import static org.openhab.binding.enocean.internal.EnOceanBindingConstants.*;\n+\n+import java.util.function.Function;\n+\n+import org.openhab.binding.enocean.internal.Helper;\n+import org.openhab.binding.enocean.internal.eep.Base._VLDMessage;\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50 extends _VLDMessage {\n+\n+    protected final byte mtMask = (byte) 0xf0;\n+    protected final byte MT_REMOTE_TRANSMISSION_REQUEST = 0x00;\n+    protected final byte MT_CONTROL = 0x20;\n+    protected final byte MT_BASIC_STATUS = 0x40;\n+    protected final byte MT_EXTENDED_STATUS = 0x60; // not yet implemented\n+\n+    protected final byte rmtMask = (byte) 0x0f;\n+    protected final byte RMT_BASIC_STATUS = 0x00;\n+    protected final byte RMT_EXTENDED_STATUS = 0x01; // not yet implemented\n+\n+    protected final byte DOMC_NOACTION = 0x0f;\n+    protected final byte CONTROL_NOACTION = 0;\n+    protected final byte TMOC_NOACTION = 127;\n+    protected final byte TMOC_ACTIVATE = (byte) 0xff;\n+    protected final byte THRESHOLD_NOACTION = 127;", "originalCommit": "e70812b62469b20ad151ee5607cc6d10db607df4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjczMDkwNg==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r566730906", "bodyText": "Sorry was my fault, thought Javas final equals c# const. Changed these field to static final.", "author": "fruggy83", "createdAt": "2021-01-29T10:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0NjkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff3a31e0827a876f9b22fae5cc5d0218e115dd7d", "chunk": "diff --git a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java\nindex 42d8084ea4..15946c5f34 100644\n--- a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java\n+++ b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java\n\n@@ -112,7 +112,7 @@ public class D2_50 extends _VLDMessage {\n             case CHANNEL_VENTILATIONOPERATIONMODE:\n                 return new StringType(String.valueOf(bytes[0] & 0x0f));\n             case CHANNEL_FIREPLACESAFETYMODE:\n-                return OnOffType.from(getBit(bytes[1], 3));\n+                return getBit(bytes[1], 3) ? OnOffType.ON : OnOffType.OFF;\n             case CHANNEL_HEATEXCHANGERBYPASSSTATUS:\n                 return getBit(bytes[1], 2) ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n             case CHANNEL_SUPPLYAIRFLAPSTATUS:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0Njk0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r563346949", "bodyText": "Please add @NonNullByDefault", "author": "cpmeister", "createdAt": "2021-01-24T20:43:09Z", "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import static org.openhab.binding.enocean.internal.EnOceanBindingConstants.*;\n+\n+import java.util.function.Function;\n+\n+import org.openhab.binding.enocean.internal.Helper;\n+import org.openhab.binding.enocean.internal.eep.Base._VLDMessage;\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50 extends _VLDMessage {", "originalCommit": "e70812b62469b20ad151ee5607cc6d10db607df4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjczMTg3MA==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r566731870", "bodyText": "I would like to add this annotation in another PR to not mess up this PR with non related changes. Adding this annotation would need many changes in other classes, too.", "author": "fruggy83", "createdAt": "2021-01-29T10:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0Njk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk2OTEyMg==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r569969122", "bodyText": "understood", "author": "cpmeister", "createdAt": "2021-02-04T06:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0Njk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff3a31e0827a876f9b22fae5cc5d0218e115dd7d", "chunk": "diff --git a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java\nindex 42d8084ea4..15946c5f34 100644\n--- a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java\n+++ b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java\n\n@@ -112,7 +112,7 @@ public class D2_50 extends _VLDMessage {\n             case CHANNEL_VENTILATIONOPERATIONMODE:\n                 return new StringType(String.valueOf(bytes[0] & 0x0f));\n             case CHANNEL_FIREPLACESAFETYMODE:\n-                return OnOffType.from(getBit(bytes[1], 3));\n+                return getBit(bytes[1], 3) ? OnOffType.ON : OnOffType.OFF;\n             case CHANNEL_HEATEXCHANGERBYPASSSTATUS:\n                 return getBit(bytes[1], 2) ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n             case CHANNEL_SUPPLYAIRFLAPSTATUS:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0Njk3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r563346975", "bodyText": "Please add @NonNullByDefault", "author": "cpmeister", "createdAt": "2021-01-24T20:43:29Z", "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_00.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50_00 extends D2_50 {", "originalCommit": "e70812b62469b20ad151ee5607cc6d10db607df4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44edc3c353a33c7fd2abb1506a3dd8824568448f", "chunk": "diff --git a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_00.java b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_00.java\ndeleted file mode 100644\nindex 3cc33d0a65..0000000000\n--- a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_00.java\n+++ /dev/null\n\n@@ -1,30 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.enocean.internal.eep.D2_50;\n-\n-import org.openhab.binding.enocean.internal.messages.ERP1Message;\n-\n-/**\n- *\n- * @author Daniel Weber - Initial contribution\n- */\n-public class D2_50_00 extends D2_50 {\n-\n-    public D2_50_00() {\n-        super();\n-    }\n-\n-    public D2_50_00(ERP1Message packet) {\n-        super(packet);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0Njk5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r563346995", "bodyText": "Please add @NonNullByDefault\nAnd please do so for the rest of the files that aren't dto classes.", "author": "cpmeister", "createdAt": "2021-01-24T20:43:35Z", "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_01.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50_01 extends D2_50 {", "originalCommit": "e70812b62469b20ad151ee5607cc6d10db607df4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44edc3c353a33c7fd2abb1506a3dd8824568448f", "chunk": "diff --git a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_01.java b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_01.java\ndeleted file mode 100644\nindex a9ebfba49e..0000000000\n--- a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_01.java\n+++ /dev/null\n\n@@ -1,30 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.enocean.internal.eep.D2_50;\n-\n-import org.openhab.binding.enocean.internal.messages.ERP1Message;\n-\n-/**\n- *\n- * @author Daniel Weber - Initial contribution\n- */\n-public class D2_50_01 extends D2_50 {\n-\n-    public D2_50_01() {\n-        super();\n-    }\n-\n-    public D2_50_01(ERP1Message packet) {\n-        super(packet);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0NzE1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r563347153", "bodyText": "What is the point of these classes that don't add any extra functionality? Can you just use the D2_50 class instead?", "author": "cpmeister", "createdAt": "2021-01-24T20:45:20Z", "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_10.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50_10 extends D2_50 {", "originalCommit": "e70812b62469b20ad151ee5607cc6d10db607df4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjczNDM4MA==", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r566734380", "bodyText": "D2_50 should have been abstract as this is not an EEP. However all EEPs of D2_50 EEP family use D2_50 class now.", "author": "fruggy83", "createdAt": "2021-01-29T10:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0NzE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "44edc3c353a33c7fd2abb1506a3dd8824568448f", "chunk": "diff --git a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_10.java b/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_10.java\ndeleted file mode 100644\nindex e4fae15fbf..0000000000\n--- a/bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_10.java\n+++ /dev/null\n\n@@ -1,30 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.enocean.internal.eep.D2_50;\n-\n-import org.openhab.binding.enocean.internal.messages.ERP1Message;\n-\n-/**\n- *\n- * @author Daniel Weber - Initial contribution\n- */\n-public class D2_50_10 extends D2_50 {\n-\n-    public D2_50_10() {\n-        super();\n-    }\n-\n-    public D2_50_10(ERP1Message packet) {\n-        super(packet);\n-    }\n-}\n"}}, {"oid": "ff3a31e0827a876f9b22fae5cc5d0218e115dd7d", "url": "https://github.com/openhab/openhab-addons/commit/ff3a31e0827a876f9b22fae5cc5d0218e115dd7d", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * Implemented EEP family D2_50\n * Added new thing type (heatRecoveryVentilation) and channels for heat recovery ventilation units\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>", "committedDate": "2021-01-29T09:41:11Z", "type": "commit"}, {"oid": "e2561d521422034049c675523b89bc1b24049206", "url": "https://github.com/openhab/openhab-addons/commit/e2561d521422034049c675523b89bc1b24049206", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * code refactoring (JAVA11 improvements)\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>", "committedDate": "2021-01-29T09:41:12Z", "type": "commit"}, {"oid": "e2561d521422034049c675523b89bc1b24049206", "url": "https://github.com/openhab/openhab-addons/commit/e2561d521422034049c675523b89bc1b24049206", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * code refactoring (JAVA11 improvements)\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>", "committedDate": "2021-01-29T09:41:12Z", "type": "forcePushed"}, {"oid": "44edc3c353a33c7fd2abb1506a3dd8824568448f", "url": "https://github.com/openhab/openhab-addons/commit/44edc3c353a33c7fd2abb1506a3dd8824568448f", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * Removed unnecessary EEP classes\n * Made final fields static\n * Added @NonNullByDefault to EEP Class\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>", "committedDate": "2021-01-29T10:33:57Z", "type": "commit"}, {"oid": "68aaac1cbeea1cc9b6f186ee3dbccd3bb7772fca", "url": "https://github.com/openhab/openhab-addons/commit/68aaac1cbeea1cc9b6f186ee3dbccd3bb7772fca", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * Removed @NonNullByDefault to not mess up PR with non related changes\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>", "committedDate": "2021-01-29T10:40:24Z", "type": "commit"}]}