{"pr_number": 7103, "pr_title": "[lgwebos] Wake-on-Lan Integration ", "pr_createdAt": "2020-03-05T21:57:36Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7103", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDM2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388790360", "bodyText": "Isn't it too much to send the packet 10 times ?", "author": "lolodomo", "createdAt": "2020-03-06T09:17:55Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,20 +32,44 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;", "originalCommit": "bed4b2c1f15469394673894764d3edf66feaf49a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjY4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389242687", "bodyText": "this is based on the implementation in SamsungTvHandler  and reused the wakeonlanutility class.", "author": "sprehn", "createdAt": "2020-03-07T09:53:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "09e8dec016e95c3aeee56888f14b43dab6a9efd2", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex d3b1d2d534..fc34860c8b 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -44,6 +45,10 @@ public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n+            return;\n+        }\n         if (!handler.getSocket().isConnected()) {\n             /*\n              * Unable to send anything to a not connected device.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDYyMg==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388790622", "bodyText": "Typo: teh => the", "author": "lolodomo", "createdAt": "2020-03-06T09:18:30Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();\n+                        logger.trace(\"Sent WOL packet to {} {}\", broadcast, macAddress);\n+                    } catch (IOException e) {\n+                        logger.warn(\"Problem sending WOL packet to {} {}\", broadcast, macAddress);\n+                    }\n+                }\n+            }\n+\n+        } catch (IOException e) {\n+            logger.warn(\"Problem with interface while sending WOL packet to {}\", macAddress);\n+        }\n+    }\n+\n+    /**\n+     * Create WOL UDP package: 6 bytes 0xff and then 6 times the 6 byte mac address repeated\n+     *\n+     * @param macStr String representation of teh MAC address (either with : or -)", "originalCommit": "bed4b2c1f15469394673894764d3edf66feaf49a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjMyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389242324", "bodyText": "corrected", "author": "sprehn", "createdAt": "2020-03-07T09:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "ff39abeea59492867f268cdfb33f7490f370fcb0", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\nindex cf52e9aed8..c4fd137f8a 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n\n@@ -126,9 +126,9 @@ public class WakeOnLanUtility {\n     }\n \n     /**\n-     * Create WOL UDP package: 6 bytes 0xff and then 6 times the 6 byte mac address repeated\n+     * Create WOL UDP package: 6 bytes 0xff and then 16 times the 6 byte mac address repeated\n      *\n-     * @param macStr String representation of teh MAC address (either with : or -)\n+     * @param macStr String representation of the MAC address (either with : or -)\n      * @return byte array with the WOL package\n      * @throws IllegalArgumentException\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDg4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388790889", "bodyText": "Is it 6 times or 16 times like I understand with the code ?", "author": "lolodomo", "createdAt": "2020-03-06T09:19:03Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();\n+                        logger.trace(\"Sent WOL packet to {} {}\", broadcast, macAddress);\n+                    } catch (IOException e) {\n+                        logger.warn(\"Problem sending WOL packet to {} {}\", broadcast, macAddress);\n+                    }\n+                }\n+            }\n+\n+        } catch (IOException e) {\n+            logger.warn(\"Problem with interface while sending WOL packet to {}\", macAddress);\n+        }\n+    }\n+\n+    /**\n+     * Create WOL UDP package: 6 bytes 0xff and then 6 times the 6 byte mac address repeated", "originalCommit": "bed4b2c1f15469394673894764d3edf66feaf49a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjM1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389242354", "bodyText": "yes 16 times", "author": "sprehn", "createdAt": "2020-03-07T09:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff39abeea59492867f268cdfb33f7490f370fcb0", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\nindex cf52e9aed8..c4fd137f8a 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n\n@@ -126,9 +126,9 @@ public class WakeOnLanUtility {\n     }\n \n     /**\n-     * Create WOL UDP package: 6 bytes 0xff and then 6 times the 6 byte mac address repeated\n+     * Create WOL UDP package: 6 bytes 0xff and then 16 times the 6 byte mac address repeated\n      *\n-     * @param macStr String representation of teh MAC address (either with : or -)\n+     * @param macStr String representation of the MAC address (either with : or -)\n      * @return byte array with the WOL package\n      * @throws IllegalArgumentException\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5NDYxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388794615", "bodyText": "Rather than reimplementing something existing from the core framework (using directly JUPnP stuff) and creating a dependency between your binding and the thing registry (which is normally unexpected), why not updating your discovery service to consider urn:schemas-upnp-org:device:MediaRenderer:1 rather than urn:schemas-upnp-org:device:Basic:1 ?", "author": "lolodomo", "createdAt": "2020-03-06T09:26:33Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/discovery/LGWebOSUpnpShutdownDetector.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal.discovery;\n+\n+import static org.openhab.binding.lgwebos.internal.LGWebOSBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ThingRegistry;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.jupnp.UpnpService;\n+import org.jupnp.model.meta.LocalDevice;\n+import org.jupnp.model.meta.RemoteDevice;\n+import org.jupnp.model.meta.RemoteService;\n+import org.jupnp.registry.Registry;\n+import org.jupnp.registry.RegistryListener;\n+import org.openhab.binding.lgwebos.internal.handler.LGWebOSHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class detects TV shutdown much before TV closes the websocket by listening to the upnp registry.\n+ *\n+ * Upnp devices send a good-bye broadcast on normal shutdown. This is true also for webos devices.\n+ * This seems to be the only way to detect instantly that the TV was turned off by remote control and much before the\n+ * device actually closes the websocket connection.\n+ *\n+ * However, not all users do use Upnp, so this use case is an optional optimization.\n+ *\n+ * The only Upnp device in webos that sends an event on shut down is of type\n+ * urn:schemas-upnp-org:device:MediaRenderer:1, with services types:\n+ * urn:schemas-upnp-org:service:AVTransport:1\n+ * urn:schemas-upnp-org:service:ConnectionManager:1\n+ * urn:schemas-upnp-org:service:RenderingControl:1\n+ *\n+ * 20 to 30 seconds later the websocket connection will close.\n+ * Arround this point in time device type: urn:schemas-upnp-org:device:Basic:1 de-registers with service type:\n+ * urn:lge-com:service:webos-second-screen:1 - the same, which is used for thing discovery.\n+ * Thus, thingRemoved of DiscoveryListener implementation in LGWebOSHandler will only be called at this point.\n+ *\n+ *\n+ * @author Sebastian Prehn - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+@Component(immediate = true, configurationPid = \"discovery.lgwebos.shutdown\")\n+public class LGWebOSUpnpShutdownDetector implements RegistryListener {", "originalCommit": "bed4b2c1f15469394673894764d3edf66feaf49a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjU5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389242596", "bodyText": "I noticed as well, but how can I reliably detect LG WebOS devices only?\nThe connectsdk implementation from LG did search for urn:schemas-upnp-org:device:Basic:1 and this worked reliably in the past.\nIf we react to urn:schemas-upnp-org:device:MediaRenderer:1 how can we make sure we filter for webos. I don't have any documentation from LG on what would be sent in meta data every time.", "author": "sprehn", "createdAt": "2020-03-07T09:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5NDYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff39abeea59492867f268cdfb33f7490f370fcb0", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/discovery/LGWebOSUpnpShutdownDetector.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/discovery/LGWebOSUpnpShutdownDetector.java\ndeleted file mode 100644\nindex 063b660976..0000000000\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/discovery/LGWebOSUpnpShutdownDetector.java\n+++ /dev/null\n\n@@ -1,145 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.lgwebos.internal.discovery;\n-\n-import static org.openhab.binding.lgwebos.internal.LGWebOSBindingConstants.*;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.thing.ThingRegistry;\n-import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n-import org.jupnp.UpnpService;\n-import org.jupnp.model.meta.LocalDevice;\n-import org.jupnp.model.meta.RemoteDevice;\n-import org.jupnp.model.meta.RemoteService;\n-import org.jupnp.registry.Registry;\n-import org.jupnp.registry.RegistryListener;\n-import org.openhab.binding.lgwebos.internal.handler.LGWebOSHandler;\n-import org.osgi.service.component.annotations.Activate;\n-import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.component.annotations.Deactivate;\n-import org.osgi.service.component.annotations.Reference;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * This class detects TV shutdown much before TV closes the websocket by listening to the upnp registry.\n- *\n- * Upnp devices send a good-bye broadcast on normal shutdown. This is true also for webos devices.\n- * This seems to be the only way to detect instantly that the TV was turned off by remote control and much before the\n- * device actually closes the websocket connection.\n- *\n- * However, not all users do use Upnp, so this use case is an optional optimization.\n- *\n- * The only Upnp device in webos that sends an event on shut down is of type\n- * urn:schemas-upnp-org:device:MediaRenderer:1, with services types:\n- * urn:schemas-upnp-org:service:AVTransport:1\n- * urn:schemas-upnp-org:service:ConnectionManager:1\n- * urn:schemas-upnp-org:service:RenderingControl:1\n- *\n- * 20 to 30 seconds later the websocket connection will close.\n- * Arround this point in time device type: urn:schemas-upnp-org:device:Basic:1 de-registers with service type:\n- * urn:lge-com:service:webos-second-screen:1 - the same, which is used for thing discovery.\n- * Thus, thingRemoved of DiscoveryListener implementation in LGWebOSHandler will only be called at this point.\n- *\n- *\n- * @author Sebastian Prehn - Initial contribution\n- *\n- */\n-@NonNullByDefault\n-@Component(immediate = true, configurationPid = \"discovery.lgwebos.shutdown\")\n-public class LGWebOSUpnpShutdownDetector implements RegistryListener {\n-\n-    private final Logger logger = LoggerFactory.getLogger(LGWebOSUpnpShutdownDetector.class);\n-\n-    private final ThingRegistry thingRegistry;\n-    private final UpnpService upnpService;\n-\n-    @Activate\n-    public LGWebOSUpnpShutdownDetector(final @Reference UpnpService upnpService,\n-            final @Reference ThingRegistry thingRegistry) {\n-        this.thingRegistry = thingRegistry;\n-        this.upnpService = upnpService;\n-        upnpService.getRegistry().addListener(this);\n-    }\n-\n-    @Deactivate\n-    protected void deactivate() {\n-        upnpService.getRegistry().removeListener(this);\n-    }\n-\n-    @Override\n-    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n-            @Nullable Exception ex) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n-        if (device == null) {\n-            return;\n-        }\n-        String ip = device.getIdentity().getDescriptorURL().getHost();\n-        thingRegistry.getAll().stream().filter(thing -> THING_TYPE_WEBOSTV.equals(thing.getThingTypeUID()))\n-                .filter(thing -> ip.equals(thing.getConfiguration().get(CONFIG_HOST))).forEach(thing -> {\n-                    ThingHandler handler = thing.getHandler();\n-                    if (handler != null) {\n-                        logger.debug(\"Detected device shutdown: {}\", device);\n-                        logger.debug(\"device type: {}\", device.getType());\n-                        for (RemoteService s : device.getServices()) {\n-                            logger.debug(\"service id: {}\", s.getServiceId());\n-                            logger.debug(\"service type: {}\", s.getServiceType());\n-                        }\n-\n-                        ((LGWebOSHandler) handler).postUpdate(CHANNEL_POWER, OnOffType.OFF);\n-                    }\n-                });\n-    }\n-\n-    @Override\n-    public void localDeviceAdded(@Nullable Registry registry, @Nullable LocalDevice device) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void localDeviceRemoved(@Nullable Registry registry, @Nullable LocalDevice device) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void beforeShutdown(@Nullable Registry registry) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void afterShutdown() {\n-        // nothing to do\n-    }\n-\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDk3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389250977", "bodyText": "Take care, you have to filter to not run your code for any thing discovered.\nIn fact, I even don't understand why you run this code depending on a thing discovery ?!\nThis looks simply like something to run at init time, doesn't it ?", "author": "lolodomo", "createdAt": "2020-03-07T12:19:39Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +352,41 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    @Override\n+    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {", "originalCommit": "519f1fbf1acb3f9a38b865c9315267abb1abc2f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NzQzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389257438", "bodyText": "you are right about filtering to avoid this happening too often\nif we put this into initialize it may execute even before the TV appears on the network.\nthere may be situations when arp is not yet filled.\nhm, on the other hand, it is optional to detect the mac, and it typically only needs to run once.\nhave prepared the code change, but need to run some tests", "author": "sprehn", "createdAt": "2020-03-07T14:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1ODEwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389258103", "bodyText": "I was thinking during the init process, not necessarly in initialize method. I let you check but maybe you can do that after the web socket connection is established ?", "author": "lolodomo", "createdAt": "2020-03-07T14:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwOTYzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389309631", "bodyText": "Ok, pushed a new version. This has DiscoveryListener removed as well.\nMAC address detection in thingDiscovered has moved into initialize and after websocket connect phase.\nthingRemoved was called at the same time as websocket disconnect, so no point in keeping it.\nPls have a look...", "author": "sprehn", "createdAt": "2020-03-07T20:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ff39abeea59492867f268cdfb33f7490f370fcb0", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java\nindex e932b82c7c..5edfe182aa 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java\n\n@@ -353,8 +340,11 @@ public class LGWebOSHandler extends BaseThingHandler implements LGWebOSTVSocket.\n         return Collections.singleton(LGWebOSActions.class);\n     }\n \n-    @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n+    /**\n+     * Make a best effort to automatically detect the MAC address of the TV.\n+     * If this does not work automatically, users can still set it manually in the Thing config.\n+     */\n+    private void findMacAddress() {\n         LGWebOSConfiguration c = getLGWebOSConfig();\n         String host = c.getHost();\n         if (!host.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNzgzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389317835", "bodyText": "Is it necessary to call it twice, once here and once more after web socket connection ?\nIs this one really necessary ?", "author": "lolodomo", "createdAt": "2020-03-07T22:46:01Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -127,7 +130,9 @@ public void initialize() {\n         s.setListener(this);\n         socket = s;\n \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"TV is off\");\n         startReconnectJob();\n+        findMacAddress(); // host config value could have changed", "originalCommit": "2bdbe7baf04f4dee002ff937ad92c3c770cb4e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Njc5MA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389346790", "bodyText": "Initially thought this should cover the case when config gets updated and TV  is offline. But in this case arping won't return anthing. removing it from initialize", "author": "sprehn", "createdAt": "2020-03-08T08:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNzgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff39abeea59492867f268cdfb33f7490f370fcb0", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java\nindex e7b23e8875..5edfe182aa 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java\n\n@@ -132,7 +132,6 @@ public class LGWebOSHandler extends BaseThingHandler\n \n         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"TV is off\");\n         startReconnectJob();\n-        findMacAddress(); // host config value could have changed\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxODE3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389318177", "bodyText": "I was playing with simiilar code in my own PR to update the discovered UDN and this leads to weird behaviour, probably because my thing is defined in a config file (and so with a readonly configuration). I have the feeling that at a certain time (after binding restart), the framework detects a change and restore the original configuration.\nBut leave it like that until this is more clear for me.", "author": "lolodomo", "createdAt": "2020-03-07T22:53:18Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +340,29 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    /**\n+     * Make a best effort to automatically detect the MAC address of the TV.\n+     * If this does not work automatically, users can still set it manually in the Thing config.\n+     */\n+    private void findMacAddress() {\n+        LGWebOSConfiguration c = getLGWebOSConfig();\n+        String host = c.getHost();\n+        if (!host.isEmpty()) {\n+            try {\n+                // validate host, so that no command can be injected\n+                String macAddress = WakeOnLanUtility.getMACAddress(InetAddress.getByName(host).getHostAddress());\n+                logger.debug(\"Determined MAC address: {} for host: {}\", macAddress, host);\n+                if (macAddress != null && !macAddress.equals(c.macAddress)) {\n+                    c.macAddress = macAddress;\n+                    // persist the configuration change\n+                    Configuration configuration = editConfiguration();\n+                    configuration.put(LGWebOSBindingConstants.CONFIG_MAC_ADDRESS, macAddress);\n+                    updateConfiguration(configuration);", "originalCommit": "2bdbe7baf04f4dee002ff937ad92c3c770cb4e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NzA0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389347047", "bodyText": "OK, let me know if there is a better solution.", "author": "sprehn", "createdAt": "2020-03-08T08:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxODE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NzE1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389347157", "bodyText": "maybe users with thing file should also put the macAddress into their configuration. So we could update the readme accordingly.", "author": "sprehn", "createdAt": "2020-03-08T08:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxODE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "09e8dec016e95c3aeee56888f14b43dab6a9efd2", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java\nindex e7b23e8875..b5dd634246 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java\n\n@@ -303,37 +320,21 @@ public class LGWebOSHandler extends BaseThingHandler\n         }\n     }\n \n-    public void postUpdate(String channelId, State state) {\n-        updateState(channelId, state);\n-    }\n-\n-    public boolean isChannelInUse(String channelId) {\n-        return isLinked(channelId);\n-    }\n-\n-    // channel linking modifications\n-\n-    @Override\n-    public void channelLinked(ChannelUID channelUID) {\n-        refreshChannelSubscription(channelUID);\n-    }\n-\n-    @Override\n-    public void channelUnlinked(ChannelUID channelUID) {\n-        refreshChannelSubscription(channelUID);\n+    public void setOptions(String channelId, List<StateOption> options) {\n+        logger.debug(\"setOptions channelId={} options.size()={}\", channelId, options.size());\n+        stateDescriptionProvider.setStateOptions(new ChannelUID(getThing().getUID(), channelId), options);\n     }\n \n-    /**\n-     * Refresh channel subscription for one specific channel.\n-     *\n-     * @param channelUID must not be <code>null</code>\n-     */\n-    private void refreshChannelSubscription(ChannelUID channelUID) {\n-        String channelId = channelUID.getId();\n-        if (getSocket().isConnected()) {\n-            channelHandlers.get(channelId).refreshSubscription(channelId, this);\n+    public void postUpdate(String channelId, State state) {\n+        if (isLinked(channelId)) {\n+            updateState(channelId, state);\n         }\n \n+        // channel subscription only works when on livetv app.\n+        if (CHANNEL_APP_LAUNCHER.equals(channelId) && APP_ID_LIVETV.equals(state.toString())) {\n+            Stream.of(CHANNEL_CHANNEL, CHANNEL_CHANNEL_NAME)\n+                    .forEach(k -> channelHandlers.get(k).refreshSubscription(k, this));\n+        }\n     }\n \n     @Override\n"}}, {"oid": "ff39abeea59492867f268cdfb33f7490f370fcb0", "url": "https://github.com/openhab/openhab-addons/commit/ff39abeea59492867f268cdfb33f7490f370fcb0", "message": "Only attemtp to find mac when device is online.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-03-08T08:33:19Z", "type": "forcePushed"}, {"oid": "45609b1dfdabab6471d339ebdcea55c0001f2614", "url": "https://github.com/openhab/openhab-addons/commit/45609b1dfdabab6471d339ebdcea55c0001f2614", "message": "Only attemtp to find mac when device is online.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-03-09T20:51:18Z", "type": "forcePushed"}, {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa", "url": "https://github.com/openhab/openhab-addons/commit/ca15d846425f9130ae4c656dc09fd0e427ce4aaa", "message": "Adding WOL Implementation to PowerControl channel with ability to determine MAC (best effort via arp) and send WOL natively.\nRemoved Search, as second screen service does actually show up in regular scans now.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-03-09T20:55:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1Njg5MA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389956890", "bodyText": "Is it possible to change this so it stops sending packets once you succeed?", "author": "cpmeister", "createdAt": "2020-03-09T20:56:33Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,20 +32,44 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n         if (!handler.getSocket().isConnected()) {\n             /*\n              * Unable to send anything to a not connected device.\n              * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n              * Therefore setting state to OFF\n              */\n             handler.postUpdate(channelId, OnOffType.OFF);\n+        }\n+\n+        if (OnOffType.ON == command) {\n+            String macAddress = configProvider.getMacAddress();\n+            if (macAddress.isEmpty()) {\n+                logger.debug(\n+                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n+            } else {\n+                for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            WakeOnLanUtility.sendWOLPacket(macAddress);\n+                        } catch (IllegalArgumentException e) {\n+                            logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                        }\n+                    }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n+                }", "originalCommit": "45609b1dfdabab6471d339ebdcea55c0001f2614", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5MDQ4OA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390590488", "bodyText": "Thought about storing the scheduled job and cancelling it when the power channel updates to ON. But it takes way more than 1 sec  (10x 100ms) for the TV to become responsive and accept a connection, so that the power channel would be updated. So I think the answer is no.", "author": "sprehn", "createdAt": "2020-03-10T20:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1Njg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "09e8dec016e95c3aeee56888f14b43dab6a9efd2", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex d3b1d2d534..fc34860c8b 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -44,6 +45,10 @@ public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n+            return;\n+        }\n         if (!handler.getSocket().isConnected()) {\n             /*\n              * Unable to send anything to a not connected device.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTAwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389959009", "bodyText": "Just in case you don't know, readLine() doesn't include the \\n character in the result.", "author": "cpmeister", "createdAt": "2020-03-09T21:00:47Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }", "originalCommit": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4NzI2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390587266", "bodyText": "That is fine in this case. We only expect one line or none.", "author": "sprehn", "createdAt": "2020-03-10T20:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "47ab7a5c3353665b368926978b05891db0fba5ad", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\nindex c4fd137f8a..04f40dbb44 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n\n@@ -39,18 +39,18 @@ import org.slf4j.LoggerFactory;\n @NonNullByDefault\n public class WakeOnLanUtility {\n \n-    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n \n     /**\n-     * Get MAC address for host\n-     * uses \"arp\" tool\n+     * Get MAC address for host usesing \"arping\" tool\n      *\n      * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n      * @return MAC address\n      */\n     public static @Nullable String getMACAddress(String hostName) {\n         try {\n-            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);\n             int returnCode = proc.waitFor();\n             String s;\n             StringBuilder builder = new StringBuilder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTIzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389959237", "bodyText": "make this Pattern static", "author": "cpmeister", "createdAt": "2020-03-09T21:01:13Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");", "originalCommit": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4NzM5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390587396", "bodyText": "done", "author": "sprehn", "createdAt": "2020-03-10T20:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "47ab7a5c3353665b368926978b05891db0fba5ad", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\nindex c4fd137f8a..04f40dbb44 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n\n@@ -39,18 +39,18 @@ import org.slf4j.LoggerFactory;\n @NonNullByDefault\n public class WakeOnLanUtility {\n \n-    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n \n     /**\n-     * Get MAC address for host\n-     * uses \"arp\" tool\n+     * Get MAC address for host usesing \"arping\" tool\n      *\n      * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n      * @return MAC address\n      */\n     public static @Nullable String getMACAddress(String hostName) {\n         try {\n-            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);\n             int returnCode = proc.waitFor();\n             String s;\n             StringBuilder builder = new StringBuilder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MDIyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389960221", "bodyText": "Please wrap socket in a try-with-resources", "author": "cpmeister", "createdAt": "2020-03-09T21:03:19Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();", "originalCommit": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4NzQ0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390587440", "bodyText": "done", "author": "sprehn", "createdAt": "2020-03-10T20:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MDIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "47ab7a5c3353665b368926978b05891db0fba5ad", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\nindex c4fd137f8a..04f40dbb44 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n\n@@ -39,18 +39,18 @@ import org.slf4j.LoggerFactory;\n @NonNullByDefault\n public class WakeOnLanUtility {\n \n-    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n \n     /**\n-     * Get MAC address for host\n-     * uses \"arp\" tool\n+     * Get MAC address for host usesing \"arping\" tool\n      *\n      * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n      * @return MAC address\n      */\n     public static @Nullable String getMACAddress(String hostName) {\n         try {\n-            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);\n             int returnCode = proc.waitFor();\n             String s;\n             StringBuilder builder = new StringBuilder();\n"}}, {"oid": "47ab7a5c3353665b368926978b05891db0fba5ad", "url": "https://github.com/openhab/openhab-addons/commit/47ab7a5c3353665b368926978b05891db0fba5ad", "message": "Addressing review comments in WakeOnLanUitility and config.xml.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-03-10T20:32:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390626664", "bodyText": "The arping utility might not be present on the user's machine (like a windows machine). Is there any way you can make this work on a windows machine as well?", "author": "cpmeister", "createdAt": "2020-03-10T21:38:26Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    /**\n+     * Get MAC address for host usesing \"arping\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);", "originalCommit": "47ab7a5c3353665b368926978b05891db0fba5ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NTczNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390665735", "bodyText": "that is actually why I changed the code to find the mac address with a regular expression.\njust don't know how to detect arp for windows, arp for linux.", "author": "sprehn", "createdAt": "2020-03-10T23:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4MjAyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390682021", "bodyText": "I found this. Looks a little complicated but if it works, it works.", "author": "cpmeister", "createdAt": "2020-03-11T00:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1ODU2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r391258569", "bodyText": "yes, the examples show that arp can be used as an alternative. This is what I meant earlier.\non linux arp <ip>. On windows arp -a <ip>.\nJust pushed a new version. I have tested on linux/docker and mac successfully.\nI don't have  OH installed on windows.", "author": "sprehn", "createdAt": "2020-03-11T20:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzNzIyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r391837223", "bodyText": "It is alright if you can't test on windows. It is a bit unreasonable to expect you to have every kind of environment to test on. I'll accept it as long as you use an approach that the wider internet generally agrees would work.", "author": "cpmeister", "createdAt": "2020-03-12T19:15:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "09e8dec016e95c3aeee56888f14b43dab6a9efd2", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\nindex 04f40dbb44..6f46d35506 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n\n@@ -42,15 +42,30 @@ public class WakeOnLanUtility {\n     private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n     private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n \n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n     /**\n-     * Get MAC address for host usesing \"arping\" tool\n+     * Get MAC address for host\n      *\n      * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n      * @return MAC address\n      */\n     public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n         try {\n-            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);\n+            Process proc = Runtime.getRuntime().exec(cmd);\n             int returnCode = proc.waitFor();\n             String s;\n             StringBuilder builder = new StringBuilder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MjM5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r391282399", "bodyText": "Shouldn't you break at this point? Or do you always want the last mac address?", "author": "cpmeister", "createdAt": "2020-03-11T21:36:35Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n+\n+        try {\n+            Process proc = Runtime.getRuntime().exec(cmd);\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                LOGGER.debug(\"{} failed with error: {}\", cmd, builder.toString());\n+            } else {\n+                Matcher matcher = MAC_REGEX.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }", "originalCommit": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1ODc5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r392458796", "bodyText": "you are right. can break at this point.", "author": "sprehn", "createdAt": "2020-03-13T20:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MjM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "09e8dec016e95c3aeee56888f14b43dab6a9efd2", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\nindex 2737436126..6f46d35506 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n\n@@ -64,7 +64,6 @@ public class WakeOnLanUtility {\n     public static @Nullable String getMACAddress(String hostName) {\n         String cmd = String.format(COMMAND, hostName);\n         LOGGER.debug(\"cmd: {}\", cmd);\n-\n         try {\n             Process proc = Runtime.getRuntime().exec(cmd);\n             int returnCode = proc.waitFor();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzQ0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r391343441", "bodyText": "I suggest using org.eclipse.smarthome.io.net.exec.ExecUtil instead since it would simplify this method a bit while making this command line call a bit more robust", "author": "cpmeister", "createdAt": "2020-03-12T00:29:56Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n+\n+        try {\n+            Process proc = Runtime.getRuntime().exec(cmd);", "originalCommit": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2NTU0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r392465548", "bodyText": "Right now have to pause the work. No access to the TV for a while due to Corona precautions. Schools closed in Germany, had to move temporarily", "author": "sprehn", "createdAt": "2020-03-13T20:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3NDE3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r392474177", "bodyText": "Np, stay safe.", "author": "cpmeister", "createdAt": "2020-03-13T21:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNTI4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r406915286", "bodyText": "change implemented, but unable to test myself", "author": "sprehn", "createdAt": "2020-04-10T19:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "09e8dec016e95c3aeee56888f14b43dab6a9efd2", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\nindex 2737436126..6f46d35506 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n\n@@ -64,7 +64,6 @@ public class WakeOnLanUtility {\n     public static @Nullable String getMACAddress(String hostName) {\n         String cmd = String.format(COMMAND, hostName);\n         LOGGER.debug(\"cmd: {}\", cmd);\n-\n         try {\n             Process proc = Runtime.getRuntime().exec(cmd);\n             int returnCode = proc.waitFor();\n"}}, {"oid": "09e8dec016e95c3aeee56888f14b43dab6a9efd2", "url": "https://github.com/openhab/openhab-addons/commit/09e8dec016e95c3aeee56888f14b43dab6a9efd2", "message": "Break once MAC is found in result.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-03-13T20:44:40Z", "type": "forcePushed"}, {"oid": "d5446d8c9695ae58f42ffbdd3dd48bf320962dc6", "url": "https://github.com/openhab/openhab-addons/commit/d5446d8c9695ae58f42ffbdd3dd48bf320962dc6", "message": "Break once MAC is found in result.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-10T10:58:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzNjU0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r407436542", "bodyText": "As host and macAdress are nullable, could you please replace host by getHost() and macAdress by getMacAdress() (which can't return null) to avoid a potential NPE ?", "author": "lolodomo", "createdAt": "2020-04-13T11:29:02Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSConfiguration.java", "diffHunk": "@@ -43,9 +45,15 @@ public int getPort() {\n         return port;\n     }\n \n+    public String getMacAddress() {\n+        String m = macAddress;\n+        return m == null ? \"\" : m;\n+    }\n+\n     @Override\n     public String toString() {\n-        return \"WebOSConfiguration [host=\" + host + \", port=\" + port + \", key.length=\" + getKey().length() + \"]\";\n+        return \"WebOSConfiguration [host=\" + host + \", port=\" + port + \", key.length=\" + getKey().length()\n+                + \", macAddress=\" + macAddress + \"]\";", "originalCommit": "c5bdca6d0744d4452159165a832c278ba7d8208c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4ODUzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r407488531", "bodyText": "this will just print \u201cnull\u201d no NPE. but sure, can also use getters", "author": "sprehn", "createdAt": "2020-04-13T13:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzNjU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NjQzMw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r407496433", "bodyText": "If no NPE, keep it unchanged.", "author": "lolodomo", "createdAt": "2020-04-13T14:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzNjU0Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d3e92d608e47a3714e926d13e6cbd726c1682a08", "url": "https://github.com/openhab/openhab-addons/commit/d3e92d608e47a3714e926d13e6cbd726c1682a08", "message": "Fixed typo in debug message.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-13T19:57:23Z", "type": "forcePushed"}, {"oid": "407bd9ca02fb69521b84014a28be01262fd75375", "url": "https://github.com/openhab/openhab-addons/commit/407bd9ca02fb69521b84014a28be01262fd75375", "message": "Fixed typo in debug message.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-16T18:57:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3MDM2NA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r407270364", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ScheduledExecutorService scheduler;\n          \n          \n            \n                private final ScheduledExecutorService scheduler;", "author": "cpmeister", "createdAt": "2020-04-13T00:14:09Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -30,6 +33,15 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;", "originalCommit": "c5bdca6d0744d4452159165a832c278ba7d8208c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4MzE3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410083174", "bodyText": "addressed, also reordered: final static before final", "author": "sprehn", "createdAt": "2020-04-17T08:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3MDM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "407bd9ca02fb69521b84014a28be01262fd75375", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex e656579ed2..fc34860c8b 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -43,8 +43,6 @@ public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n         this.scheduler = scheduler;\n     }\n \n-    private boolean powerOn;\n-\n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n         if (RefreshType.REFRESH == command) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0ODY0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r409848649", "bodyText": "remove blank line", "author": "cpmeister", "createdAt": "2020-04-16T21:07:05Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.io.net.exec.ExecUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+    private static final int CMD_TIMEOUT_MS = 1000;\n+\n+    private static final String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux\n+            if (checkIfLinuxCommandExists(\"arp\")) {\n+                COMMAND = \"arp %s\";\n+            } else if (checkIfLinuxCommandExists(\"arping\")) { // typically OH provided docker image\n+                COMMAND = \"arping -r -c 1 -C 1 %s\";\n+            } else {\n+                COMMAND = \"\";\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        if (COMMAND.isEmpty()) {\n+            LOGGER.debug(\"MAC address detection not possible. No command to identify MAC found.\");\n+            return null;\n+        }\n+\n+        String cmd = String.format(COMMAND, hostName);\n+        String response = ExecUtil.executeCommandLineAndWaitResponse(cmd, CMD_TIMEOUT_MS);\n+        Matcher matcher = MAC_REGEX.matcher(response);\n+        String macAddress = null;\n+\n+        while (matcher.find()) {\n+            String group = matcher.group();\n+\n+            if (group.length() == 17) {\n+                macAddress = group;\n+                break;\n+            }\n+        }\n+\n+        if (macAddress != null) {\n+            LOGGER.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+        } else {\n+            LOGGER.debug(\"Problem executing command {} to retrieve MAC address for {}: {}\", cmd, hostName, response);\n+        }\n+        return macAddress;\n+", "originalCommit": "407bd9ca02fb69521b84014a28be01262fd75375", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4MzI1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410083255", "bodyText": "done", "author": "sprehn", "createdAt": "2020-04-17T08:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0ODY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "80f3e89fdfb1873c1109eeaca72aa9834c270bee", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\nindex 983124db4f..cbe7e71ee1 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java\n\n@@ -93,7 +93,6 @@ public class WakeOnLanUtility {\n             LOGGER.debug(\"Problem executing command {} to retrieve MAC address for {}: {}\", cmd, hostName, response);\n         }\n         return macAddress;\n-\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410373072", "bodyText": "can you run the spotless formatter on this? This string is too long and should be split into multiple lines.", "author": "cpmeister", "createdAt": "2020-04-17T17:40:05Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,81 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\n+                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");", "originalCommit": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5NTk0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410395945", "bodyText": "can you give a hint how to do this? spotless formatter is completely new to me", "author": "sprehn", "createdAt": "2020-04-17T18:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMDg2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410400862", "bodyText": "This is how you would do it, but it would apply to the whole project not just that file.\nmvn spotless:apply -p1 :org.openhab.binding.lgwebos\nYou don't need to commit all the changes it makes, I'm more just concerned about the formatting of the PowerControlPower file. Feel free to ignore changes it makes to other files since I feel it would be outside the scope of this PR.", "author": "cpmeister", "createdAt": "2020-04-17T18:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTI5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410411296", "bodyText": "this has only changed xml files\n\tmodified:   pom.xml\n\tmodified:   src/main/feature/feature.xml\n\tmodified:   src/main/resources/ESH-INF/config/config.xml\n\n?", "author": "sprehn", "createdAt": "2020-04-17T18:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxODM5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410418392", "bodyText": "Well, I guess I misunderstood what it would change... nvm then. I still need the string to less long so just do this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n          \n          \n            \n                                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. \" \n          \n          \n            \n                                        + \"You may succeed using wake on lan (WOL). \"\n          \n          \n            \n                                        +\"Please set the macAddress config value in Thing configuration to enable this.\");", "author": "cpmeister", "createdAt": "2020-04-17T19:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "80f3e89fdfb1873c1109eeaca72aa9834c270bee", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex c2e67fa9be..3811a77bb1 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -55,7 +55,9 @@ public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n                 String macAddress = configProvider.getMacAddress();\n                 if (macAddress.isEmpty()) {\n                     logger.debug(\n-                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n+                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. \" \n+                            + \"You may succeed using wake on lan (WOL). \"\n+                            +\"Please set the macAddress config value in Thing configuration to enable this.\");\n                     handler.postUpdate(channelId, OnOffType.OFF);\n                 } else {\n                     for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n"}}, {"oid": "80f3e89fdfb1873c1109eeaca72aa9834c270bee", "url": "https://github.com/openhab/openhab-addons/commit/80f3e89fdfb1873c1109eeaca72aa9834c270bee", "message": "Reformatting debug message.\n\nCo-Authored-By: cpmeister <mistercpp2000@gmail.com>\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T19:23:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410440719", "bodyText": "Why a first if and then a switch ??\nJust reading that change, I already know that it will no more work for me.\nYou must absolutely consider DISCONNECTING too and send a WOL. The state DISCONNECTING is a state that remains a long time in my case. I need the ability to turn on the TV in this case too.", "author": "lolodomo", "createdAt": "2020-04-17T19:58:31Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -46,13 +47,11 @@ public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n         } else if (OnOffType.ON == command) {\n-            if (handler.getSocket().isConnected()) {\n-                logger.debug(\"Received ON - TV is already on.\");\n-                handler.postUpdate(channelId, OnOffType.ON);\n-            } else {\n+            if (State.DISCONNECTED == state) {", "originalCommit": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0NzY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410447672", "bodyText": "I have to agree with this, you are already sending WOL packets even after it wakes up, so why would it matter sending it while it is disconnecting?", "author": "cpmeister", "createdAt": "2020-04-17T20:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1Mjg5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410452897", "bodyText": "the problem is not so much sending the WOL, the problem is, it will be ignored by the TV. It will still shut down, but then our item will be in an incorrect state, until the disconnect finally happens.", "author": "sprehn", "createdAt": "2020-04-17T20:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NTM3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410455374", "bodyText": "I cxn certify that it is not in my case.\nDISCONNECTING is a state while the TV is turned off but the websocket is still alive. So sending the WOL is turning on the TV and you receive at this time a new app value from the subscription and the binding is switching from DISCONNECTING to REGISTERED with a refresh of all subscriptions and a channel state setting to ON.", "author": "lolodomo", "createdAt": "2020-04-17T20:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NzM5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410497397", "bodyText": "the updated version will now send the WOL packet also in DISCONNECTING state.\nI will not have any effect if the TV is still shutting down, but it also has no negative effect. And since we are sending multiple packets with a bit of delay there is a chance that it works a few ms later.", "author": "sprehn", "createdAt": "2020-04-17T22:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NzQzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410497439", "bodyText": "it should be resolved", "author": "sprehn", "createdAt": "2020-04-17T22:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "770acf232a7022ea234900dce9c3e60f932708c7", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex c2e67fa9be..fc34860c8b 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -47,67 +45,42 @@ public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n-        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-        } else if (OnOffType.ON == command) {\n-            if (State.DISCONNECTED == state) {\n-                String macAddress = configProvider.getMacAddress();\n-                if (macAddress.isEmpty()) {\n-                    logger.debug(\n-                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n-                    handler.postUpdate(channelId, OnOffType.OFF);\n-                } else {\n-                    for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n-                        scheduler.schedule(() -> {\n-                            try {\n-                                WakeOnLanUtility.sendWOLPacket(macAddress);\n-                            } catch (IllegalArgumentException e) {\n-                                logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n-                            }\n-                        }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n-                    }\n-                }\n+            return;\n+        }\n+        if (!handler.getSocket().isConnected()) {\n+            /*\n+             * Unable to send anything to a not connected device.\n+             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n+             * Therefore setting state to OFF\n+             */\n+            handler.postUpdate(channelId, OnOffType.OFF);\n+        }\n+\n+        if (OnOffType.ON == command) {\n+            String macAddress = configProvider.getMacAddress();\n+            if (macAddress.isEmpty()) {\n+                logger.debug(\n+                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n             } else {\n-                switch (state) {\n-                    case CONNECTING:\n-                    case REGISTERING:\n-                    case REGISTERED:\n-                        logger.debug(\"Received ON - TV is already on.\");\n-                        handler.postUpdate(channelId, OnOffType.ON);\n-                        break;\n-                    case DISCONNECTING:\n-                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n-                        handler.postUpdate(channelId, OnOffType.OFF);\n-                        break;\n-                    case DISCONNECTED:\n-                        // none reachable code\n-                        break;\n+                for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            WakeOnLanUtility.sendWOLPacket(macAddress);\n+                        } catch (IllegalArgumentException e) {\n+                            logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                        }\n+                    }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                 }\n+\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (State.REGISTERED == state || State.REGISTERING == state) {\n-                handler.getSocket().powerOff(getDefaultResponseListener());\n-            } else {\n-                switch (state) {\n-                    case CONNECTING:\n-                        logger.debug(\"Received OFF - TV is currently connecting.\");\n-                        handler.postUpdate(channelId, OnOffType.ON);\n-                        break;\n-                    case REGISTERING:\n-                    case REGISTERED:\n-                        // non reachable code\n-                        break;\n-                    case DISCONNECTING:\n-                    case DISCONNECTED:\n-                        logger.debug(\"Received OFF - TV is already off.\");\n-                        handler.postUpdate(channelId, OnOffType.OFF);\n-                        break;\n-                }\n-            }\n+            handler.getSocket().powerOff(getDefaultResponseListener());\n         } else {\n             logger.info(\"Only accept OnOffType, RefreshType. Type was {}.\", command.getClass());\n         }\n+\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTMyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410441320", "bodyText": "All your logic was to consider the channel as ON only when REGISTERED. So why setting the channel state to ON when the state is CONNECTING or REGISTERING ?", "author": "lolodomo", "createdAt": "2020-04-17T19:59:48Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "originalCommit": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MDI0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410470248", "bodyText": "you gave me:\n            if (handler.getSocket().isConnected()) {\n                logger.debug(\"Received ON - TV is already on.\");\n                handler.postUpdate(channelId, OnOffType.ON);\n\nisConnected is true in CONNECTING, REGISTERING, REGISTERED, DISCONNECTING\nthis is fine for the first three states, but the problematic state is DISCONNECTING\nin LGWebOSHandler::onStateChanged\n            case DISCONNECTING:\n                postUpdate(CHANNEL_POWER, OnOffType.OFF);\n\nwe should not reset it to ON", "author": "sprehn", "createdAt": "2020-04-17T21:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2ODI4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410668286", "bodyText": "isConnected is true only when in state REGISTERED:\n    public boolean isConnected() {\n        return state == State.REGISTERED;\n    }", "author": "lolodomo", "createdAt": "2020-04-18T08:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "770acf232a7022ea234900dce9c3e60f932708c7", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex c2e67fa9be..fc34860c8b 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -47,67 +45,42 @@ public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n-        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-        } else if (OnOffType.ON == command) {\n-            if (State.DISCONNECTED == state) {\n-                String macAddress = configProvider.getMacAddress();\n-                if (macAddress.isEmpty()) {\n-                    logger.debug(\n-                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n-                    handler.postUpdate(channelId, OnOffType.OFF);\n-                } else {\n-                    for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n-                        scheduler.schedule(() -> {\n-                            try {\n-                                WakeOnLanUtility.sendWOLPacket(macAddress);\n-                            } catch (IllegalArgumentException e) {\n-                                logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n-                            }\n-                        }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n-                    }\n-                }\n+            return;\n+        }\n+        if (!handler.getSocket().isConnected()) {\n+            /*\n+             * Unable to send anything to a not connected device.\n+             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n+             * Therefore setting state to OFF\n+             */\n+            handler.postUpdate(channelId, OnOffType.OFF);\n+        }\n+\n+        if (OnOffType.ON == command) {\n+            String macAddress = configProvider.getMacAddress();\n+            if (macAddress.isEmpty()) {\n+                logger.debug(\n+                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n             } else {\n-                switch (state) {\n-                    case CONNECTING:\n-                    case REGISTERING:\n-                    case REGISTERED:\n-                        logger.debug(\"Received ON - TV is already on.\");\n-                        handler.postUpdate(channelId, OnOffType.ON);\n-                        break;\n-                    case DISCONNECTING:\n-                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n-                        handler.postUpdate(channelId, OnOffType.OFF);\n-                        break;\n-                    case DISCONNECTED:\n-                        // none reachable code\n-                        break;\n+                for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            WakeOnLanUtility.sendWOLPacket(macAddress);\n+                        } catch (IllegalArgumentException e) {\n+                            logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                        }\n+                    }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                 }\n+\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (State.REGISTERED == state || State.REGISTERING == state) {\n-                handler.getSocket().powerOff(getDefaultResponseListener());\n-            } else {\n-                switch (state) {\n-                    case CONNECTING:\n-                        logger.debug(\"Received OFF - TV is currently connecting.\");\n-                        handler.postUpdate(channelId, OnOffType.ON);\n-                        break;\n-                    case REGISTERING:\n-                    case REGISTERED:\n-                        // non reachable code\n-                        break;\n-                    case DISCONNECTING:\n-                    case DISCONNECTED:\n-                        logger.debug(\"Received OFF - TV is already off.\");\n-                        handler.postUpdate(channelId, OnOffType.OFF);\n-                        break;\n-                }\n-            }\n+            handler.getSocket().powerOff(getDefaultResponseListener());\n         } else {\n             logger.info(\"Only accept OnOffType, RefreshType. Type was {}.\", command.getClass());\n         }\n+\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTU4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410441582", "bodyText": "As already mentioned, I disagree here. We need the ability to turn on the TV with WOL when in this state.", "author": "lolodomo", "createdAt": "2020-04-17T20:00:25Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");", "originalCommit": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NDg4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410464889", "bodyText": "but it does not work. the tv does not react to WOL when it is on and specifically when it is in the shutdown process. WOL will not stopping a running shutdown process", "author": "sprehn", "createdAt": "2020-04-17T20:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "770acf232a7022ea234900dce9c3e60f932708c7", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex c2e67fa9be..fc34860c8b 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -47,67 +45,42 @@ public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n-        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-        } else if (OnOffType.ON == command) {\n-            if (State.DISCONNECTED == state) {\n-                String macAddress = configProvider.getMacAddress();\n-                if (macAddress.isEmpty()) {\n-                    logger.debug(\n-                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n-                    handler.postUpdate(channelId, OnOffType.OFF);\n-                } else {\n-                    for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n-                        scheduler.schedule(() -> {\n-                            try {\n-                                WakeOnLanUtility.sendWOLPacket(macAddress);\n-                            } catch (IllegalArgumentException e) {\n-                                logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n-                            }\n-                        }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n-                    }\n-                }\n+            return;\n+        }\n+        if (!handler.getSocket().isConnected()) {\n+            /*\n+             * Unable to send anything to a not connected device.\n+             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n+             * Therefore setting state to OFF\n+             */\n+            handler.postUpdate(channelId, OnOffType.OFF);\n+        }\n+\n+        if (OnOffType.ON == command) {\n+            String macAddress = configProvider.getMacAddress();\n+            if (macAddress.isEmpty()) {\n+                logger.debug(\n+                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n             } else {\n-                switch (state) {\n-                    case CONNECTING:\n-                    case REGISTERING:\n-                    case REGISTERED:\n-                        logger.debug(\"Received ON - TV is already on.\");\n-                        handler.postUpdate(channelId, OnOffType.ON);\n-                        break;\n-                    case DISCONNECTING:\n-                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n-                        handler.postUpdate(channelId, OnOffType.OFF);\n-                        break;\n-                    case DISCONNECTED:\n-                        // none reachable code\n-                        break;\n+                for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            WakeOnLanUtility.sendWOLPacket(macAddress);\n+                        } catch (IllegalArgumentException e) {\n+                            logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                        }\n+                    }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                 }\n+\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (State.REGISTERED == state || State.REGISTERING == state) {\n-                handler.getSocket().powerOff(getDefaultResponseListener());\n-            } else {\n-                switch (state) {\n-                    case CONNECTING:\n-                        logger.debug(\"Received OFF - TV is currently connecting.\");\n-                        handler.postUpdate(channelId, OnOffType.ON);\n-                        break;\n-                    case REGISTERING:\n-                    case REGISTERED:\n-                        // non reachable code\n-                        break;\n-                    case DISCONNECTING:\n-                    case DISCONNECTED:\n-                        logger.debug(\"Received OFF - TV is already off.\");\n-                        handler.postUpdate(channelId, OnOffType.OFF);\n-                        break;\n-                }\n-            }\n+            handler.getSocket().powerOff(getDefaultResponseListener());\n         } else {\n             logger.info(\"Only accept OnOffType, RefreshType. Type was {}.\", command.getClass());\n         }\n+\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MjMyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410442324", "bodyText": "Are you sure that you can send command when in REGISTERING ?\nLook at sendCommand, you allow sending commands only when state is REGISTERED.\nAnd once again, why a first if and then a switch ??", "author": "lolodomo", "createdAt": "2020-04-17T20:02:13Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (!handler.getSocket().isConnected()) {\n-                logger.debug(\"Received OFF - TV is already off.\");\n-                handler.postUpdate(channelId, OnOffType.OFF);\n-            } else {\n+            if (State.REGISTERED == state || State.REGISTERING == state) {\n                 handler.getSocket().powerOff(getDefaultResponseListener());", "originalCommit": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MDgyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410480827", "bodyText": "moved the if into switch statement\nREGISTERING moved to CONNECTING", "author": "sprehn", "createdAt": "2020-04-17T21:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MjMyNA=="}], "type": "inlineReview", "revised_code": {"commit": "770acf232a7022ea234900dce9c3e60f932708c7", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex c2e67fa9be..fc34860c8b 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -47,67 +45,42 @@ public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n-        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-        } else if (OnOffType.ON == command) {\n-            if (State.DISCONNECTED == state) {\n-                String macAddress = configProvider.getMacAddress();\n-                if (macAddress.isEmpty()) {\n-                    logger.debug(\n-                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n-                    handler.postUpdate(channelId, OnOffType.OFF);\n-                } else {\n-                    for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n-                        scheduler.schedule(() -> {\n-                            try {\n-                                WakeOnLanUtility.sendWOLPacket(macAddress);\n-                            } catch (IllegalArgumentException e) {\n-                                logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n-                            }\n-                        }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n-                    }\n-                }\n+            return;\n+        }\n+        if (!handler.getSocket().isConnected()) {\n+            /*\n+             * Unable to send anything to a not connected device.\n+             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n+             * Therefore setting state to OFF\n+             */\n+            handler.postUpdate(channelId, OnOffType.OFF);\n+        }\n+\n+        if (OnOffType.ON == command) {\n+            String macAddress = configProvider.getMacAddress();\n+            if (macAddress.isEmpty()) {\n+                logger.debug(\n+                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n             } else {\n-                switch (state) {\n-                    case CONNECTING:\n-                    case REGISTERING:\n-                    case REGISTERED:\n-                        logger.debug(\"Received ON - TV is already on.\");\n-                        handler.postUpdate(channelId, OnOffType.ON);\n-                        break;\n-                    case DISCONNECTING:\n-                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n-                        handler.postUpdate(channelId, OnOffType.OFF);\n-                        break;\n-                    case DISCONNECTED:\n-                        // none reachable code\n-                        break;\n+                for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            WakeOnLanUtility.sendWOLPacket(macAddress);\n+                        } catch (IllegalArgumentException e) {\n+                            logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                        }\n+                    }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                 }\n+\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (State.REGISTERED == state || State.REGISTERING == state) {\n-                handler.getSocket().powerOff(getDefaultResponseListener());\n-            } else {\n-                switch (state) {\n-                    case CONNECTING:\n-                        logger.debug(\"Received OFF - TV is currently connecting.\");\n-                        handler.postUpdate(channelId, OnOffType.ON);\n-                        break;\n-                    case REGISTERING:\n-                    case REGISTERED:\n-                        // non reachable code\n-                        break;\n-                    case DISCONNECTING:\n-                    case DISCONNECTED:\n-                        logger.debug(\"Received OFF - TV is already off.\");\n-                        handler.postUpdate(channelId, OnOffType.OFF);\n-                        break;\n-                }\n-            }\n+            handler.getSocket().powerOff(getDefaultResponseListener());\n         } else {\n             logger.info(\"Only accept OnOffType, RefreshType. Type was {}.\", command.getClass());\n         }\n+\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0Mjc3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410442770", "bodyText": "No coherent with your logic.", "author": "lolodomo", "createdAt": "2020-04-17T20:03:10Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (!handler.getSocket().isConnected()) {\n-                logger.debug(\"Received OFF - TV is already off.\");\n-                handler.postUpdate(channelId, OnOffType.OFF);\n-            } else {\n+            if (State.REGISTERED == state || State.REGISTERING == state) {\n                 handler.getSocket().powerOff(getDefaultResponseListener());\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                        logger.debug(\"Received OFF - TV is currently connecting.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "originalCommit": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MDYzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410480639", "bodyText": "you proposed:\n            if (!handler.getSocket().isConnected()) {\n                logger.debug(\"Received OFF - TV is already off.\");\n                handler.postUpdate(channelId, OnOffType.OFF);\n            } else {\n                handler.getSocket().powerOff(getDefaultResponseListener());\n            }\n\npowerOff would be executed in states CONNECTING, REGISTERING, REGISTERED and DISCONNECTING but it would only actually send a message in REGISTERED state.\nin case DISCONNECTED it would not attempt to send sth and update the channel to OFF.\nIndeed this should work as well.\nso the difference now is instead of no operation in states\nCONNECTING, REGISTERING, DISCONNECTING\nCONNECTING, REGISTERING would update the state to ON <- we definitely should not set it to OFF\nand DISCONNECTING to OFF <- same as in onStateChanged\nThis should not cause any issue, but happy to modify the code and not update the channel in those cases", "author": "sprehn", "createdAt": "2020-04-17T21:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0Mjc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4NzY4OA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410487688", "bodyText": "just thought it should be updated in analogy to the ON command case", "author": "sprehn", "createdAt": "2020-04-17T21:52:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0Mjc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2ODkyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410668925", "bodyText": "Your logic since the beginning is that the power channel must be set to ON only when the state is REGISTERED, that means when the binding is ready to handle commands. In all other cases, it must be OFF. I finally agree with your initial logic.\nSo if you receive a command on this channel when the current state is other than REGISTERED, you must reject the command and you must be sure that the channel state remains OFF.", "author": "lolodomo", "createdAt": "2020-04-18T08:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0Mjc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "770acf232a7022ea234900dce9c3e60f932708c7", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex c2e67fa9be..fc34860c8b 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -47,67 +45,42 @@ public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n-        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-        } else if (OnOffType.ON == command) {\n-            if (State.DISCONNECTED == state) {\n-                String macAddress = configProvider.getMacAddress();\n-                if (macAddress.isEmpty()) {\n-                    logger.debug(\n-                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n-                    handler.postUpdate(channelId, OnOffType.OFF);\n-                } else {\n-                    for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n-                        scheduler.schedule(() -> {\n-                            try {\n-                                WakeOnLanUtility.sendWOLPacket(macAddress);\n-                            } catch (IllegalArgumentException e) {\n-                                logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n-                            }\n-                        }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n-                    }\n-                }\n+            return;\n+        }\n+        if (!handler.getSocket().isConnected()) {\n+            /*\n+             * Unable to send anything to a not connected device.\n+             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n+             * Therefore setting state to OFF\n+             */\n+            handler.postUpdate(channelId, OnOffType.OFF);\n+        }\n+\n+        if (OnOffType.ON == command) {\n+            String macAddress = configProvider.getMacAddress();\n+            if (macAddress.isEmpty()) {\n+                logger.debug(\n+                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n             } else {\n-                switch (state) {\n-                    case CONNECTING:\n-                    case REGISTERING:\n-                    case REGISTERED:\n-                        logger.debug(\"Received ON - TV is already on.\");\n-                        handler.postUpdate(channelId, OnOffType.ON);\n-                        break;\n-                    case DISCONNECTING:\n-                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n-                        handler.postUpdate(channelId, OnOffType.OFF);\n-                        break;\n-                    case DISCONNECTED:\n-                        // none reachable code\n-                        break;\n+                for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            WakeOnLanUtility.sendWOLPacket(macAddress);\n+                        } catch (IllegalArgumentException e) {\n+                            logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                        }\n+                    }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                 }\n+\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (State.REGISTERED == state || State.REGISTERING == state) {\n-                handler.getSocket().powerOff(getDefaultResponseListener());\n-            } else {\n-                switch (state) {\n-                    case CONNECTING:\n-                        logger.debug(\"Received OFF - TV is currently connecting.\");\n-                        handler.postUpdate(channelId, OnOffType.ON);\n-                        break;\n-                    case REGISTERING:\n-                    case REGISTERED:\n-                        // non reachable code\n-                        break;\n-                    case DISCONNECTING:\n-                    case DISCONNECTED:\n-                        logger.debug(\"Received OFF - TV is already off.\");\n-                        handler.postUpdate(channelId, OnOffType.OFF);\n-                        break;\n-                }\n-            }\n+            handler.getSocket().powerOff(getDefaultResponseListener());\n         } else {\n             logger.info(\"Only accept OnOffType, RefreshType. Type was {}.\", command.getClass());\n         }\n+\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0ODAzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410448038", "bodyText": "Please move this to the switch statement", "author": "cpmeister", "createdAt": "2020-04-17T20:15:15Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,82 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\"Received ON - Turning TV on via API is not supported by LG WebOS TVs. \"\n+                            + \"You may succeed using wake on lan (WOL). \"\n+                            + \"Please set the macAddress config value in Thing configuration to enable this.\");\n+                    handler.postUpdate(channelId, OnOffType.OFF);\n+                } else {\n+                    for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                        scheduler.schedule(() -> {\n+                            try {\n+                                WakeOnLanUtility.sendWOLPacket(macAddress);\n+                            } catch (IllegalArgumentException e) {\n+                                logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                            }\n+                        }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n+                    }\n+                }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n+            }\n         } else if (OnOffType.OFF == command) {\n-            handler.getSocket().powerOff(getDefaultResponseListener());\n+            if (State.REGISTERED == state || State.REGISTERING == state) {", "originalCommit": "1ae0c60c670e6b7b70bb79b872b205d608a1a303", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1OTAzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410459031", "bodyText": "yes indeed", "author": "sprehn", "createdAt": "2020-04-17T20:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0ODAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "770acf232a7022ea234900dce9c3e60f932708c7", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex 58696efe77..fc34860c8b 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -33,12 +32,11 @@ import org.slf4j.LoggerFactory;\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n-    private static final int WOL_PACKET_RETRY_COUNT = 10;\n-    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n-\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n     private final ConfigProvider configProvider;\n-    private final ScheduledExecutorService scheduler;\n+    private ScheduledExecutorService scheduler;\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n \n     public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n         this.configProvider = configProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0ODEyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410448125", "bodyText": "Please move this to the switch statement", "author": "cpmeister", "createdAt": "2020-04-17T20:15:26Z", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,82 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {", "originalCommit": "1ae0c60c670e6b7b70bb79b872b205d608a1a303", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1OTA3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410459072", "bodyText": "will do", "author": "sprehn", "createdAt": "2020-04-17T20:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0ODEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "770acf232a7022ea234900dce9c3e60f932708c7", "chunk": "diff --git a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\nindex 58696efe77..fc34860c8b 100644\n--- a/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n+++ b/bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\n\n@@ -33,12 +32,11 @@ import org.slf4j.LoggerFactory;\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n-    private static final int WOL_PACKET_RETRY_COUNT = 10;\n-    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n-\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n     private final ConfigProvider configProvider;\n-    private final ScheduledExecutorService scheduler;\n+    private ScheduledExecutorService scheduler;\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n \n     public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n         this.configProvider = configProvider;\n"}}, {"oid": "770acf232a7022ea234900dce9c3e60f932708c7", "url": "https://github.com/openhab/openhab-addons/commit/770acf232a7022ea234900dce9c3e60f932708c7", "message": "Adding WOL Implementation to PowerControl channel with ability to determine MAC (best effort via arp) and send WOL natively.\nRemoved Search, as second screen service does actually show up in regular scans now.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:33Z", "type": "commit"}, {"oid": "2f3a79202a05002476fb32bb3be34f257c283923", "url": "https://github.com/openhab/openhab-addons/commit/2f3a79202a05002476fb32bb3be34f257c283923", "message": "Addressing review comments in WakeOnLanUitility and config.xml.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:33Z", "type": "commit"}, {"oid": "aa1d08beaa0f9f8bb8b757ecc987de2be1562f80", "url": "https://github.com/openhab/openhab-addons/commit/aa1d08beaa0f9f8bb8b757ecc987de2be1562f80", "message": "Add mac and windows commands to discover MAC.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:33Z", "type": "commit"}, {"oid": "fdf1dcf817039dfe99e57bd819f30298bbdfaba5", "url": "https://github.com/openhab/openhab-addons/commit/fdf1dcf817039dfe99e57bd819f30298bbdfaba5", "message": "Break once MAC is found in result.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:33Z", "type": "commit"}, {"oid": "705c3dd29f7884cd658e3c146753bdc879288aba", "url": "https://github.com/openhab/openhab-addons/commit/705c3dd29f7884cd658e3c146753bdc879288aba", "message": "Using org.eclipse.smarthome.io.net.exec.ExecUtil instead of implementing Commandline Execution in the binding itself.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:33Z", "type": "commit"}, {"oid": "b90b8ff7addf978fae15e84c9f7bcbcc125447e8", "url": "https://github.com/openhab/openhab-addons/commit/b90b8ff7addf978fae15e84c9f7bcbcc125447e8", "message": "Detecting which linux tool to detect MAC exists, arp or arping.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:34Z", "type": "commit"}, {"oid": "5b204ab30af9eedd1296c8461c18decce4bd20c1", "url": "https://github.com/openhab/openhab-addons/commit/5b204ab30af9eedd1296c8461c18decce4bd20c1", "message": "Fixed typo in debug message.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:34Z", "type": "commit"}, {"oid": "5e8e9ec98f24266b8c35b6a1ad9d78b5a4e93fab", "url": "https://github.com/openhab/openhab-addons/commit/5e8e9ec98f24266b8c35b6a1ad9d78b5a4e93fab", "message": "Addressing review comments on formatting.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:34Z", "type": "commit"}, {"oid": "8f6d1e85197afd43e818bff5c5c53ca7bada4c43", "url": "https://github.com/openhab/openhab-addons/commit/8f6d1e85197afd43e818bff5c5c53ca7bada4c43", "message": "MacAddress parameter added to README demo item and Power Control Handler updated.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:34Z", "type": "commit"}, {"oid": "35f062c373afa577bf268216e70f77c72afb2e44", "url": "https://github.com/openhab/openhab-addons/commit/35f062c373afa577bf268216e70f77c72afb2e44", "message": "Handle power on off commands in all possible LGWebOSTVSocket states.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:34Z", "type": "commit"}, {"oid": "4e1c56a77530375cb006d554390d17e5d4327520", "url": "https://github.com/openhab/openhab-addons/commit/4e1c56a77530375cb006d554390d17e5d4327520", "message": "Reformatting debug message.\n\nCo-Authored-By: cpmeister <mistercpp2000@gmail.com>\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:34Z", "type": "commit"}, {"oid": "667ac968dcc4e337f9d0cd3927e617545eb4484f", "url": "https://github.com/openhab/openhab-addons/commit/667ac968dcc4e337f9d0cd3927e617545eb4484f", "message": "Fix whitespace.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:34Z", "type": "commit"}, {"oid": "2868228602368cd96b9f6ab3d6f36724c0b448b7", "url": "https://github.com/openhab/openhab-addons/commit/2868228602368cd96b9f6ab3d6f36724c0b448b7", "message": "Moved If statement cases into switch statement.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:34Z", "type": "commit"}, {"oid": "9f1e593e8e5c3a49b423a49e03456d1fa167c44b", "url": "https://github.com/openhab/openhab-addons/commit/9f1e593e8e5c3a49b423a49e03456d1fa167c44b", "message": "Adding comments.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:34Z", "type": "commit"}, {"oid": "9f1e593e8e5c3a49b423a49e03456d1fa167c44b", "url": "https://github.com/openhab/openhab-addons/commit/9f1e593e8e5c3a49b423a49e03456d1fa167c44b", "message": "Adding comments.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-17T22:00:34Z", "type": "forcePushed"}, {"oid": "0a9a6ca80c5741ff51085b8c0d488e6c3fdefb95", "url": "https://github.com/openhab/openhab-addons/commit/0a9a6ca80c5741ff51085b8c0d488e6c3fdefb95", "message": "Applying code review recommendations. Reducing power channel updates. CONNECTING and REGISTERING still count as OFF states.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-18T12:21:48Z", "type": "commit"}, {"oid": "98635746879e0f30086c3f51e715dc5c788580c5", "url": "https://github.com/openhab/openhab-addons/commit/98635746879e0f30086c3f51e715dc5c788580c5", "message": "Inlining Socket's isConnected method. The method name was also misleading.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>", "committedDate": "2020-04-18T12:31:17Z", "type": "commit"}]}