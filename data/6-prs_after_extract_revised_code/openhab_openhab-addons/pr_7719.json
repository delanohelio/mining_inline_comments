{"pr_number": 7719, "pr_title": "[kodi] Removed dependency on 'org.apache.commons.lang'", "pr_createdAt": "2020-05-21T19:36:19Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7719", "timeline": [{"oid": "606a6380937ecab2ff37832e8914d86fa04e02da", "url": "https://github.com/openhab/openhab-addons/commit/606a6380937ecab2ff37832e8914d86fa04e02da", "message": "Removed dependency on 'org.apache.commons.*'\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-05-21T19:34:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NDE5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r428874193", "bodyText": "That is a pretty heavy replacement, perhaps make a small utility function instead?", "author": "cpmeister", "createdAt": "2020-05-21T19:45:15Z", "path": "bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java", "diffHunk": "@@ -862,7 +861,7 @@ private JsonArray getJsonArray(String[] values) {\n             // we have to strip ending \"/\" here because Kodi returns a not valid path and filename\n             // \"fanart\":\"image://http%3a%2f%2fthetvdb.com%2fbanners%2ffanart%2foriginal%2f263365-31.jpg/\"\n             // \"thumbnail\":\"image://http%3a%2f%2fthetvdb.com%2fbanners%2fepisodes%2f263365%2f5640869.jpg/\"\n-            String encodedURL = URLEncoder.encode(StringUtils.stripEnd(url, \"/\"), StandardCharsets.UTF_8.name());\n+            String encodedURL = URLEncoder.encode(url.replaceAll(\"/$\", \"\"), StandardCharsets.UTF_8.name());", "originalCommit": "606a6380937ecab2ff37832e8914d86fa04e02da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4MzYwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r428883600", "bodyText": "I wish I could use Java 11.\nDo you like this proposal:\n    private String stripEnd(String str, String suffix) {\n        int end = str.length();\n        if (end == 0 || suffix.isEmpty()) {\n            return str;\n        }\n        while (end > 0 && suffix.indexOf(str.charAt(end - 1)) != -1) {\n            end--;\n        }\n        return str.substring(0, end);\n    }", "author": "cweitkamp", "createdAt": "2020-05-21T20:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NDE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4OTg3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r428889875", "bodyText": "You could simplify it to only accept a single char instead of a string for the suffix.", "author": "cpmeister", "createdAt": "2020-05-21T20:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NDE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NDIwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r428894203", "bodyText": "Done", "author": "cweitkamp", "createdAt": "2020-05-21T20:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "270e004b1c12f4aa36ece5615b4953de45b84317", "chunk": "diff --git a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\nindex 84f30b9398..1630a611f8 100644\n--- a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n+++ b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n\n@@ -861,7 +861,7 @@ public class KodiConnection implements KodiClientSocketEventListener {\n             // we have to strip ending \"/\" here because Kodi returns a not valid path and filename\n             // \"fanart\":\"image://http%3a%2f%2fthetvdb.com%2fbanners%2ffanart%2foriginal%2f263365-31.jpg/\"\n             // \"thumbnail\":\"image://http%3a%2f%2fthetvdb.com%2fbanners%2fepisodes%2f263365%2f5640869.jpg/\"\n-            String encodedURL = URLEncoder.encode(url.replaceAll(\"/$\", \"\"), StandardCharsets.UTF_8.name());\n+            String encodedURL = URLEncoder.encode(stripEnd(url, '/'), StandardCharsets.UTF_8.name());\n             return imageUri.resolve(encodedURL).toString();\n         } catch (UnsupportedEncodingException e) {\n             logger.debug(\"exception during encoding {}\", url, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NTcxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r428875715", "bodyText": "Are you sure it is safe to not ignore case?", "author": "cpmeister", "createdAt": "2020-05-21T19:48:16Z", "path": "bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java", "diffHunk": "@@ -1214,7 +1214,8 @@ public int getPVRChannelGroupId(final String channelType, final String pvrChanne\n \n     public int getPVRChannelId(final int pvrChannelGroupId, final String pvrChannelName) {\n         for (KodiPVRChannel pvrChannel : getPVRChannels(pvrChannelGroupId)) {\n-            if (StringUtils.equalsIgnoreCase(pvrChannel.getLabel(), pvrChannelName)) {\n+            String label = pvrChannel.getLabel();\n+            if (label != null && label.equals(pvrChannelName)) {", "originalCommit": "606a6380937ecab2ff37832e8914d86fa04e02da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3Njg2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r428876861", "bodyText": "Yes, I am. I thought about it twice.", "author": "cweitkamp", "createdAt": "2020-05-21T19:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a84298f448c1e51b3312bdaaf02acc80880902b5", "chunk": "diff --git a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\nindex 84f30b9398..4df1dd6397 100644\n--- a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n+++ b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n\n@@ -1215,7 +1226,7 @@ public class KodiConnection implements KodiClientSocketEventListener {\n     public int getPVRChannelId(final int pvrChannelGroupId, final String pvrChannelName) {\n         for (KodiPVRChannel pvrChannel : getPVRChannels(pvrChannelGroupId)) {\n             String label = pvrChannel.getLabel();\n-            if (label != null && label.equals(pvrChannelName)) {\n+            if (pvrChannelName.equalsIgnoreCase(label)) {\n                 return pvrChannel.getId();\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NTc3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r428875771", "bodyText": "here too", "author": "cpmeister", "createdAt": "2020-05-21T19:48:23Z", "path": "bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java", "diffHunk": "@@ -1175,7 +1174,8 @@ public synchronized void playURI(String uri) {\n     public int getPVRChannelGroupId(final String channelType, final String pvrChannelGroupName) {\n         List<KodiPVRChannelGroup> pvrChannelGroups = getPVRChannelGroups(channelType);\n         for (KodiPVRChannelGroup pvrChannelGroup : pvrChannelGroups) {\n-            if (StringUtils.equalsIgnoreCase(pvrChannelGroup.getLabel(), pvrChannelGroupName)) {\n+            String label = pvrChannelGroup.getLabel();\n+            if (label != null && label.equals(pvrChannelGroupName)) {", "originalCommit": "606a6380937ecab2ff37832e8914d86fa04e02da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a84298f448c1e51b3312bdaaf02acc80880902b5", "chunk": "diff --git a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\nindex 84f30b9398..4df1dd6397 100644\n--- a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n+++ b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n\n@@ -1175,7 +1186,7 @@ public class KodiConnection implements KodiClientSocketEventListener {\n         List<KodiPVRChannelGroup> pvrChannelGroups = getPVRChannelGroups(channelType);\n         for (KodiPVRChannelGroup pvrChannelGroup : pvrChannelGroups) {\n             String label = pvrChannelGroup.getLabel();\n-            if (label != null && label.equals(pvrChannelGroupName)) {\n+            if (pvrChannelGroupName.equalsIgnoreCase(label)) {\n                 return pvrChannelGroup.getId();\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NjAxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r428876015", "bodyText": "here too", "author": "cpmeister", "createdAt": "2020-05-21T19:48:52Z", "path": "bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java", "diffHunk": "@@ -379,10 +378,10 @@ public synchronized void playlistRemove(int playlistID, int position) {\n      * @param favoriteTitle the title of the favorite\n      * @return the ({@link KodiFavorite}) with the given title\n      */\n-    @Nullable\n-    public KodiFavorite getFavorite(final String favoriteTitle) {\n+    public @Nullable KodiFavorite getFavorite(final String favoriteTitle) {\n         for (KodiFavorite favorite : getFavorites()) {\n-            if (StringUtils.equalsIgnoreCase(favorite.getTitle(), favoriteTitle)) {\n+            String title = favorite.getTitle();\n+            if (title != null && title.equals(favoriteTitle)) {", "originalCommit": "606a6380937ecab2ff37832e8914d86fa04e02da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMDYyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r429030620", "bodyText": "Unless you are sure that case doesn't need to be ignored, I suggest keeping it case-insensitive.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (title != null && title.equals(favoriteTitle)) {\n          \n          \n            \n                        if (title != null && title.equalsIgnoreCase(favoriteTitle)) {", "author": "cpmeister", "createdAt": "2020-05-22T04:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NjAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0Nzc4OA==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r429247788", "bodyText": "Looking at the annotations favoriteTitle seems to be non null, so inverting would help you to get rid of the null-check", "author": "martinvw", "createdAt": "2020-05-22T13:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NjAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a84298f448c1e51b3312bdaaf02acc80880902b5", "chunk": "diff --git a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\nindex 84f30b9398..4df1dd6397 100644\n--- a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n+++ b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n\n@@ -381,7 +381,7 @@ public class KodiConnection implements KodiClientSocketEventListener {\n     public @Nullable KodiFavorite getFavorite(final String favoriteTitle) {\n         for (KodiFavorite favorite : getFavorites()) {\n             String title = favorite.getTitle();\n-            if (title != null && title.equals(favoriteTitle)) {\n+            if (favoriteTitle.equalsIgnoreCase(title)) {\n                 return favorite;\n             }\n         }\n"}}, {"oid": "270e004b1c12f4aa36ece5615b4953de45b84317", "url": "https://github.com/openhab/openhab-addons/commit/270e004b1c12f4aa36ece5615b4953de45b84317", "message": "Incorporated comments from review\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-05-21T20:24:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NzA1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r429247059", "bodyText": "I would split of a method for this especially as it occurs twice", "author": "martinvw", "createdAt": "2020-05-22T13:31:37Z", "path": "bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/discovery/KodiUpnpDiscoveryParticipant.java", "diffHunk": "@@ -94,12 +94,11 @@ private void activateOrModifyService(ComponentContext componentContext) {\n     @Override\n     public @Nullable ThingUID getThingUID(RemoteDevice device) {\n         String manufacturer = device.getDetails().getManufacturerDetails().getManufacturer();\n-        if (StringUtils.containsIgnoreCase(manufacturer, MANUFACTURER)) {\n-            logger.debug(\"Manufacturer matched: search: {}, device value: {}.\", MANUFACTURER,\n-                    device.getDetails().getManufacturerDetails().getManufacturer());\n-            if (StringUtils.containsIgnoreCase(device.getType().getType(), UPNP_DEVICE_TYPE)) {\n-                logger.debug(\"Device type matched: search: {}, device value: {}.\", UPNP_DEVICE_TYPE,\n-                        device.getType().getType());\n+        if (manufacturer != null && manufacturer.toLowerCase().contains(MANUFACTURER.toLowerCase())) {", "originalCommit": "270e004b1c12f4aa36ece5615b4953de45b84317", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a84298f448c1e51b3312bdaaf02acc80880902b5", "chunk": "diff --git a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/discovery/KodiUpnpDiscoveryParticipant.java b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/discovery/KodiUpnpDiscoveryParticipant.java\nindex 5d18e70f98..1b6f79f46d 100644\n--- a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/discovery/KodiUpnpDiscoveryParticipant.java\n+++ b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/discovery/KodiUpnpDiscoveryParticipant.java\n\n@@ -94,14 +94,18 @@ public class KodiUpnpDiscoveryParticipant implements UpnpDiscoveryParticipant {\n     @Override\n     public @Nullable ThingUID getThingUID(RemoteDevice device) {\n         String manufacturer = device.getDetails().getManufacturerDetails().getManufacturer();\n-        if (manufacturer != null && manufacturer.toLowerCase().contains(MANUFACTURER.toLowerCase())) {\n+        if (containsIgnoreCase(manufacturer, MANUFACTURER)) {\n             logger.debug(\"Manufacturer matched: search: {}, device value: {}.\", MANUFACTURER, manufacturer);\n             String type = device.getType().getType();\n-            if (type != null && type.toLowerCase().contains(UPNP_DEVICE_TYPE.toLowerCase())) {\n+            if (containsIgnoreCase(type, UPNP_DEVICE_TYPE)) {\n                 logger.debug(\"Device type matched: search: {}, device value: {}.\", UPNP_DEVICE_TYPE, type);\n                 return new ThingUID(THING_TYPE_KODI, device.getIdentity().getUdn().getIdentifierString());\n             }\n         }\n         return null;\n     }\n+\n+    private boolean containsIgnoreCase(final @Nullable String str, final String searchStr) {\n+        return str != null && str.toLowerCase().contains(searchStr.toLowerCase());\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0ODQ3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r429248471", "bodyText": "We only have to remove a single one so maybe we should not inline the complete implementation of stripEnd", "author": "martinvw", "createdAt": "2020-05-22T13:34:14Z", "path": "bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java", "diffHunk": "@@ -862,14 +861,25 @@ private JsonArray getJsonArray(String[] values) {\n             // we have to strip ending \"/\" here because Kodi returns a not valid path and filename\n             // \"fanart\":\"image://http%3a%2f%2fthetvdb.com%2fbanners%2ffanart%2foriginal%2f263365-31.jpg/\"\n             // \"thumbnail\":\"image://http%3a%2f%2fthetvdb.com%2fbanners%2fepisodes%2f263365%2f5640869.jpg/\"\n-            String encodedURL = URLEncoder.encode(StringUtils.stripEnd(url, \"/\"), StandardCharsets.UTF_8.name());", "originalCommit": "270e004b1c12f4aa36ece5615b4953de45b84317", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a84298f448c1e51b3312bdaaf02acc80880902b5", "chunk": "diff --git a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\nindex 1630a611f8..4df1dd6397 100644\n--- a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n+++ b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n\n@@ -869,7 +869,7 @@ public class KodiConnection implements KodiClientSocketEventListener {\n         }\n     }\n \n-    private String stripEnd(String str, char suffix) {\n+    private String stripEnd(final String str, final char suffix) {\n         int end = str.length();\n         if (end == 0) {\n             return str;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MDY2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r429250661", "bodyText": "What about leaving out the generic part and using JDK methods:\n    private String stripEnd(String str, String suffix) {\n        if (str.endsWith(suffix)){\n            return str.substring(0, suffix.length);\n        } else {\n            return str;\n        }", "author": "martinvw", "createdAt": "2020-05-22T13:38:08Z", "path": "bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java", "diffHunk": "@@ -862,14 +861,25 @@ private JsonArray getJsonArray(String[] values) {\n             // we have to strip ending \"/\" here because Kodi returns a not valid path and filename\n             // \"fanart\":\"image://http%3a%2f%2fthetvdb.com%2fbanners%2ffanart%2foriginal%2f263365-31.jpg/\"\n             // \"thumbnail\":\"image://http%3a%2f%2fthetvdb.com%2fbanners%2fepisodes%2f263365%2f5640869.jpg/\"\n-            String encodedURL = URLEncoder.encode(StringUtils.stripEnd(url, \"/\"), StandardCharsets.UTF_8.name());\n+            String encodedURL = URLEncoder.encode(stripEnd(url, '/'), StandardCharsets.UTF_8.name());\n             return imageUri.resolve(encodedURL).toString();\n         } catch (UnsupportedEncodingException e) {\n             logger.debug(\"exception during encoding {}\", url, e);\n             return null;\n         }\n     }\n \n+    private String stripEnd(String str, char suffix) {", "originalCommit": "270e004b1c12f4aa36ece5615b4953de45b84317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzOTg5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r429439892", "bodyText": "stripEnd isn't the same as removeEnd.", "author": "cpmeister", "createdAt": "2020-05-22T20:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MDY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzAzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r429567039", "bodyText": "Thanks for your review @martinvw. I did not change this one. It probably will not happen very often but I remember darkly the there was a reason for me to do it like this. The stripEnd method will not only remove on trailing character - it will remove all occurrences of the suffix at the end.", "author": "cweitkamp", "createdAt": "2020-05-23T18:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MDY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MzE0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7719#discussion_r429573141", "bodyText": "stripEnd isn't the same as removeEnd.\n\nThen we should update the comment, it tells us we want to remove one:\n// we have to strip ending \"/\" here because Kodi returns a not valid path and filename\n// \"fanart\":\"image://http%3a%2f%2fthetvdb.com%2fbanners%2ffanart%2foriginal%2f263365-31.jpg/\"\n// \"thumbnail\":\"image://http%3a%2f%2fthetvdb.com%2fbanners%2fepisodes%2f263365%2f5640869.jpg/\"", "author": "martinvw", "createdAt": "2020-05-23T19:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MDY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a84298f448c1e51b3312bdaaf02acc80880902b5", "chunk": "diff --git a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\nindex 1630a611f8..4df1dd6397 100644\n--- a/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n+++ b/bundles/org.openhab.binding.kodi/src/main/java/org/openhab/binding/kodi/internal/protocol/KodiConnection.java\n\n@@ -869,7 +869,7 @@ public class KodiConnection implements KodiClientSocketEventListener {\n         }\n     }\n \n-    private String stripEnd(String str, char suffix) {\n+    private String stripEnd(final String str, final char suffix) {\n         int end = str.length();\n         if (end == 0) {\n             return str;\n"}}, {"oid": "a84298f448c1e51b3312bdaaf02acc80880902b5", "url": "https://github.com/openhab/openhab-addons/commit/a84298f448c1e51b3312bdaaf02acc80880902b5", "message": "Incorporated comments from review\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-05-23T18:13:23Z", "type": "commit"}]}