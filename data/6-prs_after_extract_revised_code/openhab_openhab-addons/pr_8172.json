{"pr_number": 8172, "pr_title": "[e3dc] E3DC Home Power Plant Binding contribution", "pr_createdAt": "2020-07-22T17:25:24Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8172", "timeline": [{"oid": "7904060f9c80ff4a02ea50a13b72aa7b371d45ae", "url": "https://github.com/openhab/openhab-addons/commit/7904060f9c80ff4a02ea50a13b72aa7b371d45ae", "message": "adapt new to new Modbus Interface\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-07-22T21:40:19Z", "type": "forcePushed"}, {"oid": "b02580340ff03a578347972283ec4db08858f86c", "url": "https://github.com/openhab/openhab-addons/commit/b02580340ff03a578347972283ec4db08858f86c", "message": "Remove nested Frames from sitemap\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-07-26T11:08:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzYzMw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460557633", "bodyText": "This fixes the compiler warning.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final long MAX_INT32 = new Long(\"4294967296\");\n          \n          \n            \n                private static final long MAX_INT32 = (long) Math.pow(2, Integer.SIZE);", "author": "fwolter", "createdAt": "2020-07-26T18:18:44Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.dto;\n+\n+import java.util.Arrays;\n+import java.util.BitSet;\n+\n+/**\n+ * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class DataConverter {\n+    private static final long MAX_INT32 = new Long(\"4294967296\");", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMDcwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464000702", "bodyText": "Fixed", "author": "weymann", "createdAt": "2020-08-01T21:11:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java\ndeleted file mode 100644\nindex da0329c1d7..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.dto;\n-\n-import java.util.Arrays;\n-import java.util.BitSet;\n-\n-/**\n- * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-public class DataConverter {\n-    private static final long MAX_INT32 = new Long(\"4294967296\");\n-\n-    public static int getIntValue(byte[] bytes, int start) {\n-        return ((bytes[start] & 0xff) << 8) | (bytes[start + 1] & 0xff);\n-    }\n-\n-    public static long getLongValue(byte[] bytes, int start) {\n-        long value = 0;\n-        for (int i = 0; i < 4; i++) {\n-            value = (value << 8) + (bytes[i] & 0xff);\n-        }\n-        return value;\n-    }\n-\n-    /**\n-     * Conversion done according to E3DC Modbus Specification V1.7\n-     *\n-     * @param bytes - byte array with at least 4 bytes available from start\n-     * @param startIndex - start index for decoding\n-     * @return decoded long value, Long.MIN_VALUE otherwise\n-     */\n-    public static long getInt32Swap(byte[] bytes, int startIndex) {\n-        // LOGGER.info(\"Convert {} {} {} {}\", bytes[start], bytes[start + 1], bytes[start + 2], bytes[start + 3]);\n-        if (bytes.length - startIndex < 4) {\n-            return Long.MIN_VALUE;\n-        }\n-        long a = getIntValue(bytes, startIndex);\n-        long b = getIntValue(bytes, startIndex + 2);\n-        if (b < 32768) {\n-            return b * 65536 + a;\n-        } else {\n-            return (MAX_INT32 - b * 65536 - a) * -1;\n-        }\n-    }\n-\n-    public static String getString(byte[] bArray, int i) {\n-        byte[] slice = Arrays.copyOfRange(bArray, i, i + 32);\n-        return new String(slice).trim();\n-    }\n-\n-    public static void logArray(byte[] bArray) {\n-        StringBuilder s = new StringBuilder();\n-        s.append(\"[\");\n-        for (int i = 0; i < bArray.length; i++) {\n-            if (i != 0) {\n-                s.append(\",\");\n-            }\n-            // logger.info(\"Byte {} is {}\", i, bArray[i]);\n-            s.append(bArray[i]);\n-        }\n-        s.append(\"]\");\n-    }\n-\n-    public static int toInt(BitSet bitSet) {\n-        int intValue = 0;\n-        for (int bit = 0; bit < bitSet.length(); bit++) {\n-            if (bitSet.get(bit)) {\n-                intValue |= (1 << bit);\n-            }\n-        }\n-        return intValue;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzY2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460557668", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-07-26T18:19:10Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.dto;\n+\n+import java.util.Arrays;\n+import java.util.BitSet;\n+\n+/**\n+ * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class DataConverter {\n+    private static final long MAX_INT32 = new Long(\"4294967296\");\n+\n+    public static int getIntValue(byte[] bytes, int start) {\n+        return ((bytes[start] & 0xff) << 8) | (bytes[start + 1] & 0xff);\n+    }\n+\n+    public static long getLongValue(byte[] bytes, int start) {\n+        long value = 0;\n+        for (int i = 0; i < 4; i++) {\n+            value = (value << 8) + (bytes[i] & 0xff);\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Conversion done according to E3DC Modbus Specification V1.7\n+     *\n+     * @param bytes - byte array with at least 4 bytes available from start\n+     * @param startIndex - start index for decoding\n+     * @return decoded long value, Long.MIN_VALUE otherwise\n+     */\n+    public static long getInt32Swap(byte[] bytes, int startIndex) {\n+        // LOGGER.info(\"Convert {} {} {} {}\", bytes[start], bytes[start + 1], bytes[start + 2], bytes[start + 3]);", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMDc1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464000757", "bodyText": "Sure", "author": "weymann", "createdAt": "2020-08-01T21:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java\ndeleted file mode 100644\nindex da0329c1d7..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.dto;\n-\n-import java.util.Arrays;\n-import java.util.BitSet;\n-\n-/**\n- * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-public class DataConverter {\n-    private static final long MAX_INT32 = new Long(\"4294967296\");\n-\n-    public static int getIntValue(byte[] bytes, int start) {\n-        return ((bytes[start] & 0xff) << 8) | (bytes[start + 1] & 0xff);\n-    }\n-\n-    public static long getLongValue(byte[] bytes, int start) {\n-        long value = 0;\n-        for (int i = 0; i < 4; i++) {\n-            value = (value << 8) + (bytes[i] & 0xff);\n-        }\n-        return value;\n-    }\n-\n-    /**\n-     * Conversion done according to E3DC Modbus Specification V1.7\n-     *\n-     * @param bytes - byte array with at least 4 bytes available from start\n-     * @param startIndex - start index for decoding\n-     * @return decoded long value, Long.MIN_VALUE otherwise\n-     */\n-    public static long getInt32Swap(byte[] bytes, int startIndex) {\n-        // LOGGER.info(\"Convert {} {} {} {}\", bytes[start], bytes[start + 1], bytes[start + 2], bytes[start + 3]);\n-        if (bytes.length - startIndex < 4) {\n-            return Long.MIN_VALUE;\n-        }\n-        long a = getIntValue(bytes, startIndex);\n-        long b = getIntValue(bytes, startIndex + 2);\n-        if (b < 32768) {\n-            return b * 65536 + a;\n-        } else {\n-            return (MAX_INT32 - b * 65536 - a) * -1;\n-        }\n-    }\n-\n-    public static String getString(byte[] bArray, int i) {\n-        byte[] slice = Arrays.copyOfRange(bArray, i, i + 32);\n-        return new String(slice).trim();\n-    }\n-\n-    public static void logArray(byte[] bArray) {\n-        StringBuilder s = new StringBuilder();\n-        s.append(\"[\");\n-        for (int i = 0; i < bArray.length; i++) {\n-            if (i != 0) {\n-                s.append(\",\");\n-            }\n-            // logger.info(\"Byte {} is {}\", i, bArray[i]);\n-            s.append(bArray[i]);\n-        }\n-        s.append(\"]\");\n-    }\n-\n-    public static int toInt(BitSet bitSet) {\n-        int intValue = 0;\n-        for (int bit = 0; bit < bitSet.length(); bit++) {\n-            if (bitSet.get(bit)) {\n-                intValue |= (1 << bit);\n-            }\n-        }\n-        return intValue;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1Nzc3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460557770", "bodyText": "Better add the expected encoding to the String constructor.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new String(slice).trim();\n          \n          \n            \n                    return new String(slice, StandardCharsets.US_ASCII).trim();", "author": "fwolter", "createdAt": "2020-07-26T18:20:18Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.dto;\n+\n+import java.util.Arrays;\n+import java.util.BitSet;\n+\n+/**\n+ * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class DataConverter {\n+    private static final long MAX_INT32 = new Long(\"4294967296\");\n+\n+    public static int getIntValue(byte[] bytes, int start) {\n+        return ((bytes[start] & 0xff) << 8) | (bytes[start + 1] & 0xff);\n+    }\n+\n+    public static long getLongValue(byte[] bytes, int start) {\n+        long value = 0;\n+        for (int i = 0; i < 4; i++) {\n+            value = (value << 8) + (bytes[i] & 0xff);\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Conversion done according to E3DC Modbus Specification V1.7\n+     *\n+     * @param bytes - byte array with at least 4 bytes available from start\n+     * @param startIndex - start index for decoding\n+     * @return decoded long value, Long.MIN_VALUE otherwise\n+     */\n+    public static long getInt32Swap(byte[] bytes, int startIndex) {\n+        // LOGGER.info(\"Convert {} {} {} {}\", bytes[start], bytes[start + 1], bytes[start + 2], bytes[start + 3]);\n+        if (bytes.length - startIndex < 4) {\n+            return Long.MIN_VALUE;\n+        }\n+        long a = getIntValue(bytes, startIndex);\n+        long b = getIntValue(bytes, startIndex + 2);\n+        if (b < 32768) {\n+            return b * 65536 + a;\n+        } else {\n+            return (MAX_INT32 - b * 65536 - a) * -1;\n+        }\n+    }\n+\n+    public static String getString(byte[] bArray, int i) {\n+        byte[] slice = Arrays.copyOfRange(bArray, i, i + 32);\n+        return new String(slice).trim();", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMDg2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464000867", "bodyText": "Ok, fixed.", "author": "weymann", "createdAt": "2020-08-01T21:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1Nzc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java\ndeleted file mode 100644\nindex da0329c1d7..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.dto;\n-\n-import java.util.Arrays;\n-import java.util.BitSet;\n-\n-/**\n- * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-public class DataConverter {\n-    private static final long MAX_INT32 = new Long(\"4294967296\");\n-\n-    public static int getIntValue(byte[] bytes, int start) {\n-        return ((bytes[start] & 0xff) << 8) | (bytes[start + 1] & 0xff);\n-    }\n-\n-    public static long getLongValue(byte[] bytes, int start) {\n-        long value = 0;\n-        for (int i = 0; i < 4; i++) {\n-            value = (value << 8) + (bytes[i] & 0xff);\n-        }\n-        return value;\n-    }\n-\n-    /**\n-     * Conversion done according to E3DC Modbus Specification V1.7\n-     *\n-     * @param bytes - byte array with at least 4 bytes available from start\n-     * @param startIndex - start index for decoding\n-     * @return decoded long value, Long.MIN_VALUE otherwise\n-     */\n-    public static long getInt32Swap(byte[] bytes, int startIndex) {\n-        // LOGGER.info(\"Convert {} {} {} {}\", bytes[start], bytes[start + 1], bytes[start + 2], bytes[start + 3]);\n-        if (bytes.length - startIndex < 4) {\n-            return Long.MIN_VALUE;\n-        }\n-        long a = getIntValue(bytes, startIndex);\n-        long b = getIntValue(bytes, startIndex + 2);\n-        if (b < 32768) {\n-            return b * 65536 + a;\n-        } else {\n-            return (MAX_INT32 - b * 65536 - a) * -1;\n-        }\n-    }\n-\n-    public static String getString(byte[] bArray, int i) {\n-        byte[] slice = Arrays.copyOfRange(bArray, i, i + 32);\n-        return new String(slice).trim();\n-    }\n-\n-    public static void logArray(byte[] bArray) {\n-        StringBuilder s = new StringBuilder();\n-        s.append(\"[\");\n-        for (int i = 0; i < bArray.length; i++) {\n-            if (i != 0) {\n-                s.append(\",\");\n-            }\n-            // logger.info(\"Byte {} is {}\", i, bArray[i]);\n-            s.append(bArray[i]);\n-        }\n-        s.append(\"]\");\n-    }\n-\n-    public static int toInt(BitSet bitSet) {\n-        int intValue = 0;\n-        for (int bit = 0; bit < bitSet.length(); bit++) {\n-            if (bitSet.get(bit)) {\n-                intValue |= (1 << bit);\n-            }\n-        }\n-        return intValue;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1Nzg0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460557841", "bodyText": "What's the purpose of this method?", "author": "fwolter", "createdAt": "2020-07-26T18:21:03Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.dto;\n+\n+import java.util.Arrays;\n+import java.util.BitSet;\n+\n+/**\n+ * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class DataConverter {\n+    private static final long MAX_INT32 = new Long(\"4294967296\");\n+\n+    public static int getIntValue(byte[] bytes, int start) {\n+        return ((bytes[start] & 0xff) << 8) | (bytes[start + 1] & 0xff);\n+    }\n+\n+    public static long getLongValue(byte[] bytes, int start) {\n+        long value = 0;\n+        for (int i = 0; i < 4; i++) {\n+            value = (value << 8) + (bytes[i] & 0xff);\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Conversion done according to E3DC Modbus Specification V1.7\n+     *\n+     * @param bytes - byte array with at least 4 bytes available from start\n+     * @param startIndex - start index for decoding\n+     * @return decoded long value, Long.MIN_VALUE otherwise\n+     */\n+    public static long getInt32Swap(byte[] bytes, int startIndex) {\n+        // LOGGER.info(\"Convert {} {} {} {}\", bytes[start], bytes[start + 1], bytes[start + 2], bytes[start + 3]);\n+        if (bytes.length - startIndex < 4) {\n+            return Long.MIN_VALUE;\n+        }\n+        long a = getIntValue(bytes, startIndex);\n+        long b = getIntValue(bytes, startIndex + 2);\n+        if (b < 32768) {\n+            return b * 65536 + a;\n+        } else {\n+            return (MAX_INT32 - b * 65536 - a) * -1;\n+        }\n+    }\n+\n+    public static String getString(byte[] bArray, int i) {\n+        byte[] slice = Arrays.copyOfRange(bArray, i, i + 32);\n+        return new String(slice).trim();\n+    }\n+\n+    public static void logArray(byte[] bArray) {", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwNjQ4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464006486", "bodyText": "Leftover from debug session to printout the whole array - removed", "author": "weymann", "createdAt": "2020-08-01T22:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1Nzg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java\ndeleted file mode 100644\nindex da0329c1d7..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/DataConverter.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.dto;\n-\n-import java.util.Arrays;\n-import java.util.BitSet;\n-\n-/**\n- * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-public class DataConverter {\n-    private static final long MAX_INT32 = new Long(\"4294967296\");\n-\n-    public static int getIntValue(byte[] bytes, int start) {\n-        return ((bytes[start] & 0xff) << 8) | (bytes[start + 1] & 0xff);\n-    }\n-\n-    public static long getLongValue(byte[] bytes, int start) {\n-        long value = 0;\n-        for (int i = 0; i < 4; i++) {\n-            value = (value << 8) + (bytes[i] & 0xff);\n-        }\n-        return value;\n-    }\n-\n-    /**\n-     * Conversion done according to E3DC Modbus Specification V1.7\n-     *\n-     * @param bytes - byte array with at least 4 bytes available from start\n-     * @param startIndex - start index for decoding\n-     * @return decoded long value, Long.MIN_VALUE otherwise\n-     */\n-    public static long getInt32Swap(byte[] bytes, int startIndex) {\n-        // LOGGER.info(\"Convert {} {} {} {}\", bytes[start], bytes[start + 1], bytes[start + 2], bytes[start + 3]);\n-        if (bytes.length - startIndex < 4) {\n-            return Long.MIN_VALUE;\n-        }\n-        long a = getIntValue(bytes, startIndex);\n-        long b = getIntValue(bytes, startIndex + 2);\n-        if (b < 32768) {\n-            return b * 65536 + a;\n-        } else {\n-            return (MAX_INT32 - b * 65536 - a) * -1;\n-        }\n-    }\n-\n-    public static String getString(byte[] bArray, int i) {\n-        byte[] slice = Arrays.copyOfRange(bArray, i, i + 32);\n-        return new String(slice).trim();\n-    }\n-\n-    public static void logArray(byte[] bArray) {\n-        StringBuilder s = new StringBuilder();\n-        s.append(\"[\");\n-        for (int i = 0; i < bArray.length; i++) {\n-            if (i != 0) {\n-                s.append(\",\");\n-            }\n-            // logger.info(\"Byte {} is {}\", i, bArray[i]);\n-            s.append(bArray[i]);\n-        }\n-        s.append(\"]\");\n-    }\n-\n-    public static int toInt(BitSet bitSet) {\n-        int intValue = 0;\n-        for (int bit = 0; bit < bitSet.length(); bit++) {\n-            if (bitSet.get(bit)) {\n-                intValue |= (1 << bit);\n-            }\n-        }\n-        return intValue;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1ODQwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460558400", "bodyText": "Did you take a look into https://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html? After ByteBuffer.wrap(bArray) you can do operations like buffer.getInt(). This will automatically increase the internal cursor.", "author": "fwolter", "createdAt": "2020-07-26T18:26:29Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/InfoBlock.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.dto;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.openhab.binding.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link InfoBlock} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class InfoBlock implements Data {\n+    private static final StringType EMPTY = new StringType(\"NULL\");\n+    public StringType modbusId = EMPTY;\n+    public StringType modbusVersion = EMPTY;\n+    public DecimalType supportedRegisters = new DecimalType(-1);\n+    public StringType manufacturer = EMPTY;\n+    public StringType modelName = EMPTY;\n+    public StringType serialNumber = EMPTY;\n+    public StringType firmware = EMPTY;\n+\n+    /**\n+     * For decoding see Modbus Register Mapping Chapter 3.1.1 page 14\n+     *\n+     * @param bArray - Modbus Registers as bytes from 40001 to 40067\n+     */\n+    public InfoBlock(byte[] bArray) {", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA5MjQ1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464092453", "bodyText": "Nice hint! I adapted DataConverter class to handle unsigned values properly but the uncomfortable index handling is deleted.", "author": "weymann", "createdAt": "2020-08-02T15:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1ODQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/InfoBlock.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/InfoBlock.java\ndeleted file mode 100644\nindex 5ca1a13bec..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/InfoBlock.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.dto;\n-\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.StringType;\n-import org.openhab.binding.e3dc.internal.modbus.Data;\n-\n-/**\n- * The {@link InfoBlock} Data object for E3DC Info Block\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-public class InfoBlock implements Data {\n-    private static final StringType EMPTY = new StringType(\"NULL\");\n-    public StringType modbusId = EMPTY;\n-    public StringType modbusVersion = EMPTY;\n-    public DecimalType supportedRegisters = new DecimalType(-1);\n-    public StringType manufacturer = EMPTY;\n-    public StringType modelName = EMPTY;\n-    public StringType serialNumber = EMPTY;\n-    public StringType firmware = EMPTY;\n-\n-    /**\n-     * For decoding see Modbus Register Mapping Chapter 3.1.1 page 14\n-     *\n-     * @param bArray - Modbus Registers as bytes from 40001 to 40067\n-     */\n-    public InfoBlock(byte[] bArray) {\n-        // index handling to calculate the correct start index\n-        int byteIndex = 0;\n-\n-        // first uint16 = 2 bytes - decode magic byte\n-        StringBuilder magicByte = new StringBuilder();\n-        magicByte.append(String.format(\"%02X\", bArray[byteIndex]));\n-        magicByte.append(String.format(\"%02X\", bArray[byteIndex + 1]));\n-        this.modbusId = new StringType(magicByte.toString());\n-        // first uint16 = 2 bytes - decode magic byte\n-        byteIndex += 2;\n-\n-        // unit8 (Modbus Major Version) + uint8 Modbus minor Version\n-        String modbusVersion = bArray[byteIndex] + \".\" + bArray[byteIndex + 1];\n-        this.modbusVersion = new StringType(modbusVersion);\n-        byteIndex += 2;\n-\n-        // unit16 - supported registers\n-        int supportedRegisters = DataConverter.getIntValue(bArray, byteIndex);\n-        this.supportedRegisters = new DecimalType(supportedRegisters);\n-        byteIndex += 2;\n-\n-        // 16 registers with uint16 = 32 bytes to decode a proper String\n-        String manufacturer = DataConverter.getString(bArray, byteIndex);\n-        this.manufacturer = new StringType(manufacturer);\n-        byteIndex += 32;\n-\n-        // 16 registers with uint16 = 32 bytes to decode a proper String\n-        String model = DataConverter.getString(bArray, byteIndex);\n-        this.modelName = new StringType(model);\n-        byteIndex += 32;\n-\n-        // 16 registers with uint16 = 32 bytes to decode a proper String\n-        String serialNumber = DataConverter.getString(bArray, byteIndex);\n-        this.serialNumber = new StringType(serialNumber);\n-        byteIndex += 32;\n-\n-        // 16 registers with uint16 = 32 bytes to decode a proper String\n-        String firmware = DataConverter.getString(bArray, byteIndex);\n-        this.firmware = new StringType(firmware);\n-        byteIndex += 32;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1ODUyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460558527", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-07-26T18:27:46Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/WallboxBlock.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.dto;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.BitSet;\n+\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.openhab.binding.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link WallboxBlock} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class WallboxBlock implements Data {\n+    private BitSet bitSet;\n+    public OnOffType wbAvailable = OnOffType.OFF;\n+    public OnOffType wbSunmode = OnOffType.OFF;\n+    public OnOffType wbChargingAborted = OnOffType.OFF;\n+    public OnOffType wbCharging = OnOffType.OFF;\n+    public OnOffType wbJackLocked = OnOffType.OFF;\n+    public OnOffType wbJackPlugged = OnOffType.OFF;\n+    public OnOffType wbSchukoOn = OnOffType.OFF;\n+    public OnOffType wbSchukoPlugged = OnOffType.OFF;\n+    public OnOffType wbSchukoLocked = OnOffType.OFF;\n+    public OnOffType wbSchukoRelay16 = OnOffType.OFF;\n+    public OnOffType wbRelay16 = OnOffType.OFF;\n+    public OnOffType wbRelay32 = OnOffType.OFF;\n+    public OnOffType wb1phase = OnOffType.OFF;\n+\n+    /**\n+     * For decoding see Modbus Register Mapping Chapter 3.1.2 page 15\n+     * The Registers for Wallbox Control are declared as uint16 but shall be handled as Bit registers => see chapter\n+     * 3.1.5 page 19\n+     *\n+     * @param bArray - one Modbus Registers according to Wallbox ID\n+     */\n+    public WallboxBlock(byte[] bArray) {\n+        bitSet = BitSet.valueOf(bArray);\n+        // logger.info(\"BitSet String {}\", bs.toString());", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMTAwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464001003", "bodyText": "Yes, removed", "author": "weymann", "createdAt": "2020-08-01T21:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1ODUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/WallboxBlock.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/WallboxBlock.java\ndeleted file mode 100644\nindex 9f06618b39..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/dto/WallboxBlock.java\n+++ /dev/null\n\n@@ -1,71 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.dto;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import java.util.BitSet;\n-\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.openhab.binding.e3dc.internal.modbus.Data;\n-\n-/**\n- * The {@link WallboxBlock} Data object for E3DC Info Block\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-public class WallboxBlock implements Data {\n-    private BitSet bitSet;\n-    public OnOffType wbAvailable = OnOffType.OFF;\n-    public OnOffType wbSunmode = OnOffType.OFF;\n-    public OnOffType wbChargingAborted = OnOffType.OFF;\n-    public OnOffType wbCharging = OnOffType.OFF;\n-    public OnOffType wbJackLocked = OnOffType.OFF;\n-    public OnOffType wbJackPlugged = OnOffType.OFF;\n-    public OnOffType wbSchukoOn = OnOffType.OFF;\n-    public OnOffType wbSchukoPlugged = OnOffType.OFF;\n-    public OnOffType wbSchukoLocked = OnOffType.OFF;\n-    public OnOffType wbSchukoRelay16 = OnOffType.OFF;\n-    public OnOffType wbRelay16 = OnOffType.OFF;\n-    public OnOffType wbRelay32 = OnOffType.OFF;\n-    public OnOffType wb1phase = OnOffType.OFF;\n-\n-    /**\n-     * For decoding see Modbus Register Mapping Chapter 3.1.2 page 15\n-     * The Registers for Wallbox Control are declared as uint16 but shall be handled as Bit registers => see chapter\n-     * 3.1.5 page 19\n-     *\n-     * @param bArray - one Modbus Registers according to Wallbox ID\n-     */\n-    public WallboxBlock(byte[] bArray) {\n-        bitSet = BitSet.valueOf(bArray);\n-        // logger.info(\"BitSet String {}\", bs.toString());\n-        wbAvailable = bitSet.get(WB_AVAILABLE_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbSunmode = bitSet.get(WB_SUNMODE_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbChargingAborted = bitSet.get(WB_CHARGING_ABORTED_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbCharging = bitSet.get(WB_CHARGING_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbJackLocked = bitSet.get(WB_JACK_LOCKED_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbJackPlugged = bitSet.get(WB_JACK_PLUGGED_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbSchukoOn = bitSet.get(WB_SCHUKO_ON_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbSchukoPlugged = bitSet.get(WB_SCHUKO_PLUGGED_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbSchukoLocked = bitSet.get(WB_SCHUKO_LOCKED_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbSchukoRelay16 = bitSet.get(WB_SCHUKO_RELAY16A_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbRelay16 = bitSet.get(WB_RELAY_16A_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wbRelay32 = bitSet.get(WB_RELAY_32A_BIT) ? OnOffType.ON : OnOffType.OFF;\n-        wb1phase = bitSet.get(WB_1PHASE_BIT) ? OnOffType.ON : OnOffType.OFF;\n-    }\n-\n-    public BitSet getBitSet() {\n-        return bitSet;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1ODYxNA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460558614", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-07-26T18:28:52Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/BaseHandler.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerCallback;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.e3dc.internal.modbus.DataListener;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BaseHandler} Basic Handler for all things\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseHandler extends BaseThingHandler implements DataListener {\n+    private final Logger logger = LoggerFactory.getLogger(BaseHandler.class);\n+    private @Nullable ThingHandlerCallback thingHandlerCallback;\n+    private @Nullable ModbusDataProvider modbusDataProvider;\n+\n+    // Unit test purposes - check if dataAvailable callback was successful\n+    public boolean isUpdated = false;\n+    public boolean isInitialized = false;\n+\n+    public BaseHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public void initialize(DataType t) {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            Bridge b = getBridge();\n+            if (b != null) {\n+                BridgeHandler bridgeHandler = b.getHandler();\n+                if (bridgeHandler != null) {\n+                    if (t.equals(DataType.INFO)) {\n+                        ModbusDataProvider localModbusDataProvider = ((E3DCDeviceThingHandler) bridgeHandler)\n+                                .getInfoDataProvider();\n+                        modbusDataProvider = localModbusDataProvider;\n+                        localModbusDataProvider.addDataListener(this);\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else if (t.equals(DataType.DATA)) {\n+                        ModbusDataProvider localModbusDataProvider = ((E3DCDeviceThingHandler) bridgeHandler)\n+                                .getDataProvider();\n+                        modbusDataProvider = localModbusDataProvider;\n+                        localModbusDataProvider.addDataListener(this);\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } else {\n+                    logger.warn(\"BridgeHandler not found\");\n+                }\n+            } else {\n+                logger.warn(\"Bridge not found\");\n+            }\n+            isInitialized = true;\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ModbusDataProvider localModbusDataProvider = modbusDataProvider;\n+        if (localModbusDataProvider != null) {\n+            localModbusDataProvider.removeDataListener(this);\n+        }\n+    }\n+\n+    @Override\n+    public void setCallback(@Nullable ThingHandlerCallback thingHandlerCallback) {\n+        super.setCallback(thingHandlerCallback);\n+        this.thingHandlerCallback = thingHandlerCallback;\n+        // logger.info(\"ThingCallbackHandler received {}\", thingHandlerCallback);", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMTIzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464001232", "bodyText": "Obsolte due to Modbus rework", "author": "weymann", "createdAt": "2020-08-01T21:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1ODYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/BaseHandler.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/BaseHandler.java\ndeleted file mode 100644\nindex bba332dbe2..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/BaseHandler.java\n+++ /dev/null\n\n@@ -1,116 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.handler;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.thing.Bridge;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.Thing;\n-import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.ThingUID;\n-import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n-import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n-import org.eclipse.smarthome.core.thing.binding.ThingHandlerCallback;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.binding.e3dc.internal.modbus.DataListener;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link BaseHandler} Basic Handler for all things\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public abstract class BaseHandler extends BaseThingHandler implements DataListener {\n-    private final Logger logger = LoggerFactory.getLogger(BaseHandler.class);\n-    private @Nullable ThingHandlerCallback thingHandlerCallback;\n-    private @Nullable ModbusDataProvider modbusDataProvider;\n-\n-    // Unit test purposes - check if dataAvailable callback was successful\n-    public boolean isUpdated = false;\n-    public boolean isInitialized = false;\n-\n-    public BaseHandler(Thing thing) {\n-        super(thing);\n-    }\n-\n-    public void initialize(DataType t) {\n-        updateStatus(ThingStatus.UNKNOWN);\n-        scheduler.execute(() -> {\n-            Bridge b = getBridge();\n-            if (b != null) {\n-                BridgeHandler bridgeHandler = b.getHandler();\n-                if (bridgeHandler != null) {\n-                    if (t.equals(DataType.INFO)) {\n-                        ModbusDataProvider localModbusDataProvider = ((E3DCDeviceThingHandler) bridgeHandler)\n-                                .getInfoDataProvider();\n-                        modbusDataProvider = localModbusDataProvider;\n-                        localModbusDataProvider.addDataListener(this);\n-                        updateStatus(ThingStatus.ONLINE);\n-                    } else if (t.equals(DataType.DATA)) {\n-                        ModbusDataProvider localModbusDataProvider = ((E3DCDeviceThingHandler) bridgeHandler)\n-                                .getDataProvider();\n-                        modbusDataProvider = localModbusDataProvider;\n-                        localModbusDataProvider.addDataListener(this);\n-                        updateStatus(ThingStatus.ONLINE);\n-                    }\n-                } else {\n-                    logger.warn(\"BridgeHandler not found\");\n-                }\n-            } else {\n-                logger.warn(\"Bridge not found\");\n-            }\n-            isInitialized = true;\n-        });\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        ModbusDataProvider localModbusDataProvider = modbusDataProvider;\n-        if (localModbusDataProvider != null) {\n-            localModbusDataProvider.removeDataListener(this);\n-        }\n-    }\n-\n-    @Override\n-    public void setCallback(@Nullable ThingHandlerCallback thingHandlerCallback) {\n-        super.setCallback(thingHandlerCallback);\n-        this.thingHandlerCallback = thingHandlerCallback;\n-        // logger.info(\"ThingCallbackHandler received {}\", thingHandlerCallback);\n-    }\n-\n-    @Override\n-    public @Nullable Bridge getBridge() {\n-        ThingUID bridgeUID = thing.getBridgeUID();\n-        synchronized (this) {\n-            ThingHandlerCallback localThinghandlerCallback = thingHandlerCallback;\n-            if (localThinghandlerCallback != null) {\n-                return bridgeUID != null ? localThinghandlerCallback.getBridge(bridgeUID) : null;\n-            } else {\n-                logger.warn(\"Handler {} of thing {} isn't able to resolve bridge\", getClass().getSimpleName(),\n-                        thing.getUID());\n-                return null;\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public abstract void handleCommand(ChannelUID channelUID, Command command);\n-\n-    @Override\n-    public abstract void dataAvailable(ModbusDataProvider provider);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1OTE4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460559181", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-07-26T18:34:41Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.handler;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.e3dc.internal.E3DCDeviceConfiguration;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.e3dc.internal.modbus.DataListener;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusCallback;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusWriteResult;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusTCPSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCDeviceThingHandler} Basic modbus connection towards the E3DC device\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCDeviceThingHandler extends BaseBridgeHandler\n+        implements DataListener, ModbusWriteCallback, ModbusFailureCallback<ModbusWriteRequestBlueprint> {\n+    private final Logger logger = LoggerFactory.getLogger(E3DCDeviceThingHandler.class);\n+    private ModbusManager modbusManagerRef;\n+    private final ModbusCallback modbusInfoCallback = new ModbusCallback(DataType.INFO);\n+    private final ModbusCallback modbusDataCallback = new ModbusCallback(DataType.DATA);\n+    private ThingStatus myStatus = ThingStatus.UNKNOWN;\n+    private @Nullable ModbusCommunicationInterface modbusCom;\n+    private @Nullable PollTask infoPoller;\n+    private @Nullable PollTask dataPoller;\n+    private @Nullable E3DCDeviceConfiguration config;\n+\n+    public E3DCDeviceThingHandler(Bridge bridge, ModbusManager ref) {\n+        super(bridge);\n+        modbusManagerRef = ref;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        setStatus(ThingStatus.UNKNOWN);\n+        // Example for background initialization:", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMTA2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464001062", "bodyText": "Yes, removed", "author": "weymann", "createdAt": "2020-08-01T21:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1OTE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java\ndeleted file mode 100644\nindex 4b421112b1..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java\n+++ /dev/null\n\n@@ -1,178 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.handler;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.thing.Bridge;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.openhab.binding.e3dc.internal.E3DCDeviceConfiguration;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.binding.e3dc.internal.modbus.DataListener;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusCallback;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n-import org.openhab.io.transport.modbus.AsyncModbusFailure;\n-import org.openhab.io.transport.modbus.AsyncModbusWriteResult;\n-import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n-import org.openhab.io.transport.modbus.ModbusFailureCallback;\n-import org.openhab.io.transport.modbus.ModbusManager;\n-import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n-import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-import org.openhab.io.transport.modbus.ModbusWriteCallback;\n-import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n-import org.openhab.io.transport.modbus.PollTask;\n-import org.openhab.io.transport.modbus.endpoint.ModbusTCPSlaveEndpoint;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link E3DCDeviceThingHandler} Basic modbus connection towards the E3DC device\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class E3DCDeviceThingHandler extends BaseBridgeHandler\n-        implements DataListener, ModbusWriteCallback, ModbusFailureCallback<ModbusWriteRequestBlueprint> {\n-    private final Logger logger = LoggerFactory.getLogger(E3DCDeviceThingHandler.class);\n-    private ModbusManager modbusManagerRef;\n-    private final ModbusCallback modbusInfoCallback = new ModbusCallback(DataType.INFO);\n-    private final ModbusCallback modbusDataCallback = new ModbusCallback(DataType.DATA);\n-    private ThingStatus myStatus = ThingStatus.UNKNOWN;\n-    private @Nullable ModbusCommunicationInterface modbusCom;\n-    private @Nullable PollTask infoPoller;\n-    private @Nullable PollTask dataPoller;\n-    private @Nullable E3DCDeviceConfiguration config;\n-\n-    public E3DCDeviceThingHandler(Bridge bridge, ModbusManager ref) {\n-        super(bridge);\n-        modbusManagerRef = ref;\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        setStatus(ThingStatus.UNKNOWN);\n-        // Example for background initialization:\n-        scheduler.execute(() -> {\n-            config = getConfigAs(E3DCDeviceConfiguration.class);\n-            E3DCDeviceConfiguration localConfig = config;\n-            if (localConfig != null && checkConfig(localConfig)) {\n-                ModbusTCPSlaveEndpoint slaveEndpoint = new ModbusTCPSlaveEndpoint(localConfig.host, localConfig.port);\n-\n-                ModbusCommunicationInterface localModbusCom = modbusManagerRef.newModbusCommunicationInterface(\n-                        slaveEndpoint, modbusManagerRef.getEndpointPoolConfiguration(slaveEndpoint));\n-                // register low speed info poller\n-                ModbusReadRequestBlueprint infoRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n-                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, INFO_REG_START, INFO_REG_SIZE, 3);\n-                infoPoller = localModbusCom.registerRegularPoll(infoRequest, INFO_POLL_REFRESH_TIME_MS, 0,\n-                        modbusInfoCallback, modbusInfoCallback);\n-\n-                ModbusReadRequestBlueprint dataRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n-                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, POWER_REG_START,\n-                        REGISTER_LENGTH - INFO_REG_SIZE, 3);\n-                dataPoller = localModbusCom.registerRegularPoll(dataRequest, localConfig.refresh, 0, modbusDataCallback,\n-                        modbusDataCallback);\n-                modbusCom = localModbusCom;\n-                // listen for data to get ONLINE\n-                modbusDataCallback.addDataListener(this);\n-            } else {\n-                setStatus(ThingStatus.OFFLINE);\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        modbusDataCallback.removeDataListener(this);\n-        ModbusCommunicationInterface localCom = modbusCom;\n-        if (localCom != null) {\n-            PollTask localInfoPoller = infoPoller;\n-            if (localInfoPoller != null) {\n-                localCom.unregisterRegularPoll(localInfoPoller);\n-            }\n-            PollTask localDataPoller = dataPoller;\n-            if (localDataPoller != null) {\n-                localCom.unregisterRegularPoll(localDataPoller);\n-            }\n-        }\n-    }\n-\n-    private boolean checkConfig(@Nullable E3DCDeviceConfiguration c) {\n-        if (c != null) {\n-            if (c.port > 1) {\n-                if (c.refresh < 1) {\n-                    c.refresh = 2;\n-                }\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private void setStatus(ThingStatus status) {\n-        myStatus = status;\n-        updateStatus(myStatus);\n-    }\n-\n-    /**\n-     * Wallbox Settings can be changed with one Integer\n-     *\n-     * @param wallboxId needed to calculate right register\n-     * @param writeValue integer to be written\n-     */\n-    public void wallboxSet(int wallboxId, int writeValue) {\n-        E3DCDeviceConfiguration localConfig = config;\n-        ModbusCommunicationInterface localCom = modbusCom;\n-        if (localConfig != null && localCom != null) {\n-            ModbusRegisterArray regArray = new ModbusRegisterArray(writeValue);\n-            ModbusWriteRegisterRequestBlueprint writeBluePrint = new ModbusWriteRegisterRequestBlueprint(\n-                    localConfig.deviceid, WALLBOX_REG_START + wallboxId, regArray, false, 3);\n-            localCom.submitOneTimeWrite(writeBluePrint, this, this);\n-        }\n-    }\n-\n-    @Override\n-    public void dataAvailable(ModbusDataProvider provider) {\n-        if (myStatus != ThingStatus.ONLINE) {\n-            setStatus(ThingStatus.ONLINE);\n-        }\n-    }\n-\n-    public ModbusDataProvider getInfoDataProvider() {\n-        return modbusInfoCallback;\n-    }\n-\n-    public ModbusDataProvider getDataProvider() {\n-        return modbusDataCallback;\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusWriteResult result) {\n-        logger.debug(\"E3DC Modbus write response! {}\", result.getResponse().toString());\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusFailure<ModbusWriteRequestBlueprint> failure) {\n-        logger.warn(\"E3DC Modbus write error! {}\", failure.getRequest().toString());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1OTI2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460559262", "bodyText": "You might want to give the user a hint, what's wrong, by specifying a second and a third parameter.", "author": "fwolter", "createdAt": "2020-07-26T18:35:24Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.handler;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.e3dc.internal.E3DCDeviceConfiguration;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.e3dc.internal.modbus.DataListener;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusCallback;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusWriteResult;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusTCPSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCDeviceThingHandler} Basic modbus connection towards the E3DC device\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCDeviceThingHandler extends BaseBridgeHandler\n+        implements DataListener, ModbusWriteCallback, ModbusFailureCallback<ModbusWriteRequestBlueprint> {\n+    private final Logger logger = LoggerFactory.getLogger(E3DCDeviceThingHandler.class);\n+    private ModbusManager modbusManagerRef;\n+    private final ModbusCallback modbusInfoCallback = new ModbusCallback(DataType.INFO);\n+    private final ModbusCallback modbusDataCallback = new ModbusCallback(DataType.DATA);\n+    private ThingStatus myStatus = ThingStatus.UNKNOWN;\n+    private @Nullable ModbusCommunicationInterface modbusCom;\n+    private @Nullable PollTask infoPoller;\n+    private @Nullable PollTask dataPoller;\n+    private @Nullable E3DCDeviceConfiguration config;\n+\n+    public E3DCDeviceThingHandler(Bridge bridge, ModbusManager ref) {\n+        super(bridge);\n+        modbusManagerRef = ref;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        setStatus(ThingStatus.UNKNOWN);\n+        // Example for background initialization:\n+        scheduler.execute(() -> {\n+            config = getConfigAs(E3DCDeviceConfiguration.class);\n+            E3DCDeviceConfiguration localConfig = config;\n+            if (localConfig != null && checkConfig(localConfig)) {\n+                ModbusTCPSlaveEndpoint slaveEndpoint = new ModbusTCPSlaveEndpoint(localConfig.host, localConfig.port);\n+\n+                ModbusCommunicationInterface localModbusCom = modbusManagerRef.newModbusCommunicationInterface(\n+                        slaveEndpoint, modbusManagerRef.getEndpointPoolConfiguration(slaveEndpoint));\n+                // register low speed info poller\n+                ModbusReadRequestBlueprint infoRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n+                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, INFO_REG_START, INFO_REG_SIZE, 3);\n+                infoPoller = localModbusCom.registerRegularPoll(infoRequest, INFO_POLL_REFRESH_TIME_MS, 0,\n+                        modbusInfoCallback, modbusInfoCallback);\n+\n+                ModbusReadRequestBlueprint dataRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n+                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, POWER_REG_START,\n+                        REGISTER_LENGTH - INFO_REG_SIZE, 3);\n+                dataPoller = localModbusCom.registerRegularPoll(dataRequest, localConfig.refresh, 0, modbusDataCallback,\n+                        modbusDataCallback);\n+                modbusCom = localModbusCom;\n+                // listen for data to get ONLINE\n+                modbusDataCallback.addDataListener(this);\n+            } else {\n+                setStatus(ThingStatus.OFFLINE);", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMTI2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464001267", "bodyText": "Thing Status handling completly reworked", "author": "weymann", "createdAt": "2020-08-01T21:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1OTI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java\ndeleted file mode 100644\nindex 4b421112b1..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java\n+++ /dev/null\n\n@@ -1,178 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.handler;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.thing.Bridge;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.openhab.binding.e3dc.internal.E3DCDeviceConfiguration;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.binding.e3dc.internal.modbus.DataListener;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusCallback;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n-import org.openhab.io.transport.modbus.AsyncModbusFailure;\n-import org.openhab.io.transport.modbus.AsyncModbusWriteResult;\n-import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n-import org.openhab.io.transport.modbus.ModbusFailureCallback;\n-import org.openhab.io.transport.modbus.ModbusManager;\n-import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n-import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-import org.openhab.io.transport.modbus.ModbusWriteCallback;\n-import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n-import org.openhab.io.transport.modbus.PollTask;\n-import org.openhab.io.transport.modbus.endpoint.ModbusTCPSlaveEndpoint;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link E3DCDeviceThingHandler} Basic modbus connection towards the E3DC device\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class E3DCDeviceThingHandler extends BaseBridgeHandler\n-        implements DataListener, ModbusWriteCallback, ModbusFailureCallback<ModbusWriteRequestBlueprint> {\n-    private final Logger logger = LoggerFactory.getLogger(E3DCDeviceThingHandler.class);\n-    private ModbusManager modbusManagerRef;\n-    private final ModbusCallback modbusInfoCallback = new ModbusCallback(DataType.INFO);\n-    private final ModbusCallback modbusDataCallback = new ModbusCallback(DataType.DATA);\n-    private ThingStatus myStatus = ThingStatus.UNKNOWN;\n-    private @Nullable ModbusCommunicationInterface modbusCom;\n-    private @Nullable PollTask infoPoller;\n-    private @Nullable PollTask dataPoller;\n-    private @Nullable E3DCDeviceConfiguration config;\n-\n-    public E3DCDeviceThingHandler(Bridge bridge, ModbusManager ref) {\n-        super(bridge);\n-        modbusManagerRef = ref;\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        setStatus(ThingStatus.UNKNOWN);\n-        // Example for background initialization:\n-        scheduler.execute(() -> {\n-            config = getConfigAs(E3DCDeviceConfiguration.class);\n-            E3DCDeviceConfiguration localConfig = config;\n-            if (localConfig != null && checkConfig(localConfig)) {\n-                ModbusTCPSlaveEndpoint slaveEndpoint = new ModbusTCPSlaveEndpoint(localConfig.host, localConfig.port);\n-\n-                ModbusCommunicationInterface localModbusCom = modbusManagerRef.newModbusCommunicationInterface(\n-                        slaveEndpoint, modbusManagerRef.getEndpointPoolConfiguration(slaveEndpoint));\n-                // register low speed info poller\n-                ModbusReadRequestBlueprint infoRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n-                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, INFO_REG_START, INFO_REG_SIZE, 3);\n-                infoPoller = localModbusCom.registerRegularPoll(infoRequest, INFO_POLL_REFRESH_TIME_MS, 0,\n-                        modbusInfoCallback, modbusInfoCallback);\n-\n-                ModbusReadRequestBlueprint dataRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n-                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, POWER_REG_START,\n-                        REGISTER_LENGTH - INFO_REG_SIZE, 3);\n-                dataPoller = localModbusCom.registerRegularPoll(dataRequest, localConfig.refresh, 0, modbusDataCallback,\n-                        modbusDataCallback);\n-                modbusCom = localModbusCom;\n-                // listen for data to get ONLINE\n-                modbusDataCallback.addDataListener(this);\n-            } else {\n-                setStatus(ThingStatus.OFFLINE);\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        modbusDataCallback.removeDataListener(this);\n-        ModbusCommunicationInterface localCom = modbusCom;\n-        if (localCom != null) {\n-            PollTask localInfoPoller = infoPoller;\n-            if (localInfoPoller != null) {\n-                localCom.unregisterRegularPoll(localInfoPoller);\n-            }\n-            PollTask localDataPoller = dataPoller;\n-            if (localDataPoller != null) {\n-                localCom.unregisterRegularPoll(localDataPoller);\n-            }\n-        }\n-    }\n-\n-    private boolean checkConfig(@Nullable E3DCDeviceConfiguration c) {\n-        if (c != null) {\n-            if (c.port > 1) {\n-                if (c.refresh < 1) {\n-                    c.refresh = 2;\n-                }\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private void setStatus(ThingStatus status) {\n-        myStatus = status;\n-        updateStatus(myStatus);\n-    }\n-\n-    /**\n-     * Wallbox Settings can be changed with one Integer\n-     *\n-     * @param wallboxId needed to calculate right register\n-     * @param writeValue integer to be written\n-     */\n-    public void wallboxSet(int wallboxId, int writeValue) {\n-        E3DCDeviceConfiguration localConfig = config;\n-        ModbusCommunicationInterface localCom = modbusCom;\n-        if (localConfig != null && localCom != null) {\n-            ModbusRegisterArray regArray = new ModbusRegisterArray(writeValue);\n-            ModbusWriteRegisterRequestBlueprint writeBluePrint = new ModbusWriteRegisterRequestBlueprint(\n-                    localConfig.deviceid, WALLBOX_REG_START + wallboxId, regArray, false, 3);\n-            localCom.submitOneTimeWrite(writeBluePrint, this, this);\n-        }\n-    }\n-\n-    @Override\n-    public void dataAvailable(ModbusDataProvider provider) {\n-        if (myStatus != ThingStatus.ONLINE) {\n-            setStatus(ThingStatus.ONLINE);\n-        }\n-    }\n-\n-    public ModbusDataProvider getInfoDataProvider() {\n-        return modbusInfoCallback;\n-    }\n-\n-    public ModbusDataProvider getDataProvider() {\n-        return modbusDataCallback;\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusWriteResult result) {\n-        logger.debug(\"E3DC Modbus write response! {}\", result.getResponse().toString());\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusFailure<ModbusWriteRequestBlueprint> failure) {\n-        logger.warn(\"E3DC Modbus write error! {}\", failure.getRequest().toString());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1OTUyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460559524", "bodyText": "If refresh is 0, an IllegalArgumentException will be thrown by Modbus. The variable's unit is supposed to be milliseconds.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (c.refresh < 1) {\n          \n          \n            \n                            if (c.refresh < 2000) {", "author": "fwolter", "createdAt": "2020-07-26T18:38:14Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.handler;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.e3dc.internal.E3DCDeviceConfiguration;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.e3dc.internal.modbus.DataListener;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusCallback;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusWriteResult;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusTCPSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCDeviceThingHandler} Basic modbus connection towards the E3DC device\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCDeviceThingHandler extends BaseBridgeHandler\n+        implements DataListener, ModbusWriteCallback, ModbusFailureCallback<ModbusWriteRequestBlueprint> {\n+    private final Logger logger = LoggerFactory.getLogger(E3DCDeviceThingHandler.class);\n+    private ModbusManager modbusManagerRef;\n+    private final ModbusCallback modbusInfoCallback = new ModbusCallback(DataType.INFO);\n+    private final ModbusCallback modbusDataCallback = new ModbusCallback(DataType.DATA);\n+    private ThingStatus myStatus = ThingStatus.UNKNOWN;\n+    private @Nullable ModbusCommunicationInterface modbusCom;\n+    private @Nullable PollTask infoPoller;\n+    private @Nullable PollTask dataPoller;\n+    private @Nullable E3DCDeviceConfiguration config;\n+\n+    public E3DCDeviceThingHandler(Bridge bridge, ModbusManager ref) {\n+        super(bridge);\n+        modbusManagerRef = ref;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        setStatus(ThingStatus.UNKNOWN);\n+        // Example for background initialization:\n+        scheduler.execute(() -> {\n+            config = getConfigAs(E3DCDeviceConfiguration.class);\n+            E3DCDeviceConfiguration localConfig = config;\n+            if (localConfig != null && checkConfig(localConfig)) {\n+                ModbusTCPSlaveEndpoint slaveEndpoint = new ModbusTCPSlaveEndpoint(localConfig.host, localConfig.port);\n+\n+                ModbusCommunicationInterface localModbusCom = modbusManagerRef.newModbusCommunicationInterface(\n+                        slaveEndpoint, modbusManagerRef.getEndpointPoolConfiguration(slaveEndpoint));\n+                // register low speed info poller\n+                ModbusReadRequestBlueprint infoRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n+                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, INFO_REG_START, INFO_REG_SIZE, 3);\n+                infoPoller = localModbusCom.registerRegularPoll(infoRequest, INFO_POLL_REFRESH_TIME_MS, 0,\n+                        modbusInfoCallback, modbusInfoCallback);\n+\n+                ModbusReadRequestBlueprint dataRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n+                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, POWER_REG_START,\n+                        REGISTER_LENGTH - INFO_REG_SIZE, 3);\n+                dataPoller = localModbusCom.registerRegularPoll(dataRequest, localConfig.refresh, 0, modbusDataCallback,\n+                        modbusDataCallback);\n+                modbusCom = localModbusCom;\n+                // listen for data to get ONLINE\n+                modbusDataCallback.addDataListener(this);\n+            } else {\n+                setStatus(ThingStatus.OFFLINE);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        modbusDataCallback.removeDataListener(this);\n+        ModbusCommunicationInterface localCom = modbusCom;\n+        if (localCom != null) {\n+            PollTask localInfoPoller = infoPoller;\n+            if (localInfoPoller != null) {\n+                localCom.unregisterRegularPoll(localInfoPoller);\n+            }\n+            PollTask localDataPoller = dataPoller;\n+            if (localDataPoller != null) {\n+                localCom.unregisterRegularPoll(localDataPoller);\n+            }\n+        }\n+    }\n+\n+    private boolean checkConfig(@Nullable E3DCDeviceConfiguration c) {\n+        if (c != null) {\n+            if (c.port > 1) {\n+                if (c.refresh < 1) {", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMDU0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464100540", "bodyText": "Refresh rate is now better defined in brdige-e3dc.xml. Minimum value is declared to 1000 ms, default to 2000 ms", "author": "weymann", "createdAt": "2020-08-02T17:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1OTUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java\ndeleted file mode 100644\nindex 4b421112b1..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java\n+++ /dev/null\n\n@@ -1,178 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.handler;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.thing.Bridge;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.openhab.binding.e3dc.internal.E3DCDeviceConfiguration;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.binding.e3dc.internal.modbus.DataListener;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusCallback;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n-import org.openhab.io.transport.modbus.AsyncModbusFailure;\n-import org.openhab.io.transport.modbus.AsyncModbusWriteResult;\n-import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n-import org.openhab.io.transport.modbus.ModbusFailureCallback;\n-import org.openhab.io.transport.modbus.ModbusManager;\n-import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n-import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-import org.openhab.io.transport.modbus.ModbusWriteCallback;\n-import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n-import org.openhab.io.transport.modbus.PollTask;\n-import org.openhab.io.transport.modbus.endpoint.ModbusTCPSlaveEndpoint;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link E3DCDeviceThingHandler} Basic modbus connection towards the E3DC device\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class E3DCDeviceThingHandler extends BaseBridgeHandler\n-        implements DataListener, ModbusWriteCallback, ModbusFailureCallback<ModbusWriteRequestBlueprint> {\n-    private final Logger logger = LoggerFactory.getLogger(E3DCDeviceThingHandler.class);\n-    private ModbusManager modbusManagerRef;\n-    private final ModbusCallback modbusInfoCallback = new ModbusCallback(DataType.INFO);\n-    private final ModbusCallback modbusDataCallback = new ModbusCallback(DataType.DATA);\n-    private ThingStatus myStatus = ThingStatus.UNKNOWN;\n-    private @Nullable ModbusCommunicationInterface modbusCom;\n-    private @Nullable PollTask infoPoller;\n-    private @Nullable PollTask dataPoller;\n-    private @Nullable E3DCDeviceConfiguration config;\n-\n-    public E3DCDeviceThingHandler(Bridge bridge, ModbusManager ref) {\n-        super(bridge);\n-        modbusManagerRef = ref;\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        setStatus(ThingStatus.UNKNOWN);\n-        // Example for background initialization:\n-        scheduler.execute(() -> {\n-            config = getConfigAs(E3DCDeviceConfiguration.class);\n-            E3DCDeviceConfiguration localConfig = config;\n-            if (localConfig != null && checkConfig(localConfig)) {\n-                ModbusTCPSlaveEndpoint slaveEndpoint = new ModbusTCPSlaveEndpoint(localConfig.host, localConfig.port);\n-\n-                ModbusCommunicationInterface localModbusCom = modbusManagerRef.newModbusCommunicationInterface(\n-                        slaveEndpoint, modbusManagerRef.getEndpointPoolConfiguration(slaveEndpoint));\n-                // register low speed info poller\n-                ModbusReadRequestBlueprint infoRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n-                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, INFO_REG_START, INFO_REG_SIZE, 3);\n-                infoPoller = localModbusCom.registerRegularPoll(infoRequest, INFO_POLL_REFRESH_TIME_MS, 0,\n-                        modbusInfoCallback, modbusInfoCallback);\n-\n-                ModbusReadRequestBlueprint dataRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n-                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, POWER_REG_START,\n-                        REGISTER_LENGTH - INFO_REG_SIZE, 3);\n-                dataPoller = localModbusCom.registerRegularPoll(dataRequest, localConfig.refresh, 0, modbusDataCallback,\n-                        modbusDataCallback);\n-                modbusCom = localModbusCom;\n-                // listen for data to get ONLINE\n-                modbusDataCallback.addDataListener(this);\n-            } else {\n-                setStatus(ThingStatus.OFFLINE);\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        modbusDataCallback.removeDataListener(this);\n-        ModbusCommunicationInterface localCom = modbusCom;\n-        if (localCom != null) {\n-            PollTask localInfoPoller = infoPoller;\n-            if (localInfoPoller != null) {\n-                localCom.unregisterRegularPoll(localInfoPoller);\n-            }\n-            PollTask localDataPoller = dataPoller;\n-            if (localDataPoller != null) {\n-                localCom.unregisterRegularPoll(localDataPoller);\n-            }\n-        }\n-    }\n-\n-    private boolean checkConfig(@Nullable E3DCDeviceConfiguration c) {\n-        if (c != null) {\n-            if (c.port > 1) {\n-                if (c.refresh < 1) {\n-                    c.refresh = 2;\n-                }\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private void setStatus(ThingStatus status) {\n-        myStatus = status;\n-        updateStatus(myStatus);\n-    }\n-\n-    /**\n-     * Wallbox Settings can be changed with one Integer\n-     *\n-     * @param wallboxId needed to calculate right register\n-     * @param writeValue integer to be written\n-     */\n-    public void wallboxSet(int wallboxId, int writeValue) {\n-        E3DCDeviceConfiguration localConfig = config;\n-        ModbusCommunicationInterface localCom = modbusCom;\n-        if (localConfig != null && localCom != null) {\n-            ModbusRegisterArray regArray = new ModbusRegisterArray(writeValue);\n-            ModbusWriteRegisterRequestBlueprint writeBluePrint = new ModbusWriteRegisterRequestBlueprint(\n-                    localConfig.deviceid, WALLBOX_REG_START + wallboxId, regArray, false, 3);\n-            localCom.submitOneTimeWrite(writeBluePrint, this, this);\n-        }\n-    }\n-\n-    @Override\n-    public void dataAvailable(ModbusDataProvider provider) {\n-        if (myStatus != ThingStatus.ONLINE) {\n-            setStatus(ThingStatus.ONLINE);\n-        }\n-    }\n-\n-    public ModbusDataProvider getInfoDataProvider() {\n-        return modbusInfoCallback;\n-    }\n-\n-    public ModbusDataProvider getDataProvider() {\n-        return modbusDataCallback;\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusWriteResult result) {\n-        logger.debug(\"E3DC Modbus write response! {}\", result.getResponse().toString());\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusFailure<ModbusWriteRequestBlueprint> failure) {\n-        logger.warn(\"E3DC Modbus write error! {}\", failure.getRequest().toString());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1OTkyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460559926", "bodyText": "Logging to info should be used rarely. This could be debug. Same for below.", "author": "fwolter", "createdAt": "2020-07-26T18:42:32Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.handler;\n+\n+import static org.openhab.binding.e3dc.internal.E3DCBindingConstants.*;\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.BitSet;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.e3dc.internal.E3DCWallboxConfiguration;\n+import org.openhab.binding.e3dc.internal.dto.DataConverter;\n+import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.e3dc.internal.dto.WallboxBlock;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCWallboxHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCWallboxHandler extends BaseHandler {\n+    private final Logger logger = LoggerFactory.getLogger(E3DCWallboxHandler.class);\n+    private BitSet currentBitSet = new BitSet(16);\n+    private @Nullable E3DCWallboxConfiguration config;\n+    private @Nullable E3DCDeviceThingHandler bridgeHandler;\n+\n+    public E3DCWallboxHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(E3DCWallboxConfiguration.class);\n+        super.initialize(DataType.DATA);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            logger.info(\"Command {} CUID {}\", command, channelUID);", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMTUwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464001503", "bodyText": "Leftover from debugging. It's removed now", "author": "weymann", "createdAt": "2020-08-01T21:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1OTkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java\ndeleted file mode 100644\nindex dd5ac9a774..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java\n+++ /dev/null\n\n@@ -1,138 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.handler;\n-\n-import static org.openhab.binding.e3dc.internal.E3DCBindingConstants.*;\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import java.util.BitSet;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.thing.Bridge;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.Thing;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.openhab.binding.e3dc.internal.E3DCWallboxConfiguration;\n-import org.openhab.binding.e3dc.internal.dto.DataConverter;\n-import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n-import org.openhab.binding.e3dc.internal.dto.WallboxBlock;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link E3DCWallboxHandler} is responsible for handling commands, which are\n- * sent to one of the channels.\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class E3DCWallboxHandler extends BaseHandler {\n-    private final Logger logger = LoggerFactory.getLogger(E3DCWallboxHandler.class);\n-    private BitSet currentBitSet = new BitSet(16);\n-    private @Nullable E3DCWallboxConfiguration config;\n-    private @Nullable E3DCDeviceThingHandler bridgeHandler;\n-\n-    public E3DCWallboxHandler(Thing thing) {\n-        super(thing);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        config = getConfigAs(E3DCWallboxConfiguration.class);\n-        super.initialize(DataType.DATA);\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        if (command instanceof OnOffType) {\n-            logger.info(\"Command {} CUID {}\", command, channelUID);\n-            logger.info(\"getId {}\", channelUID.getId());\n-            logger.info(\"getIdWithoutGroup {}\", channelUID.getIdWithoutGroup());\n-            int writeValue = 0;\n-            synchronized (this) {\n-                if (channelUID.getIdWithoutGroup().equals(WB_SUNMODE_CHANNEL)) {\n-                    currentBitSet.set(WB_SUNMODE_BIT, command.equals(OnOffType.ON));\n-                } else if (channelUID.getIdWithoutGroup().equals(WB_CHARGING_ABORTED_CHANNEL)) {\n-                    currentBitSet.set(WB_CHARGING_ABORTED_BIT, command.equals(OnOffType.ON));\n-                } else if (channelUID.getIdWithoutGroup().equals(WB_SCHUKO_ON_CHANNEL)) {\n-                    currentBitSet.set(WB_SCHUKO_ON_BIT, command.equals(OnOffType.ON));\n-                } else if (channelUID.getIdWithoutGroup().equals(WB_1PHASE_CHANNEL)) {\n-                    currentBitSet.set(WB_1PHASE_BIT, command.equals(OnOffType.ON));\n-                }\n-                writeValue = DataConverter.toInt(currentBitSet);\n-                logger.info(\"Send {}\", writeValue);\n-            }\n-            E3DCDeviceThingHandler localBridgeHandler = bridgeHandler;\n-            if (localBridgeHandler == null) {\n-                Bridge b = getBridge();\n-                if (b != null) {\n-                    localBridgeHandler = (E3DCDeviceThingHandler) b.getHandler();\n-                    bridgeHandler = localBridgeHandler;\n-                }\n-            }\n-            if (localBridgeHandler != null) {\n-                int wallboxId = getWallboxId(config);\n-                if (wallboxId != -1) {\n-                    localBridgeHandler.wallboxSet(wallboxId, writeValue);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void dataAvailable(ModbusDataProvider provider) {\n-        WallboxArray blockArray = (WallboxArray) provider.getData(DataType.WALLBOX);\n-        if (blockArray != null) {\n-            int wallboxId = getWallboxId(config);\n-            if (wallboxId != -1) {\n-                WallboxBlock block = blockArray.getWallboxBlock(wallboxId);\n-                if (block != null) {\n-                    synchronized (this) {\n-                        currentBitSet = block.getBitSet();\n-                    }\n-                    updateState(WB_AVAILABLE_CHANNEL, block.wbAvailable);\n-                    updateState(WB_SUNMODE_CHANNEL, block.wbSunmode);\n-                    updateState(WB_CHARGING_ABORTED_CHANNEL, block.wbChargingAborted);\n-                    updateState(WB_CHARGING_CHANNEL, block.wbCharging);\n-                    updateState(WB_JACK_LOCKED_CHANNEL, block.wbJackLocked);\n-                    updateState(WB_JACK_PLUGGED_CHANNEL, block.wbJackPlugged);\n-                    updateState(WB_SCHUKO_ON_CHANNEL, block.wbSchukoOn);\n-                    updateState(WB_SCHUKO_PLUGGED_CHANNEL, block.wbSchukoPlugged);\n-                    updateState(WB_SCHUKO_LOCKED_CHANNEL, block.wbSchukoLocked);\n-                    updateState(WB_SCHUKO_REALY_16A_CHANNEL, block.wbSchukoRelay16);\n-                    updateState(WB_REALY_16A_CHANNEL, block.wbRelay16);\n-                    updateState(WB_RELAY_32A_CHANNEL, block.wbRelay32);\n-                    updateState(WB_1PHASE_CHANNEL, block.wb1phase);\n-                } else {\n-                    logger.debug(\"Unable to get ID {} from WallboxArray\", wallboxId);\n-                }\n-            } else {\n-                logger.debug(\"Wallbox ID {} not valid\", wallboxId);\n-            }\n-        } else {\n-            logger.debug(\"Unable to get {} from provider {}\", DataType.WALLBOX, provider.toString());\n-        }\n-    }\n-\n-    private int getWallboxId(@Nullable E3DCWallboxConfiguration c) {\n-        if (c != null) {\n-            return c.wallboxId;\n-        } else {\n-            return -1;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1OTk3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460559976", "bodyText": "Can these messages be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "fwolter", "createdAt": "2020-07-26T18:43:05Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.handler;\n+\n+import static org.openhab.binding.e3dc.internal.E3DCBindingConstants.*;\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.BitSet;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.e3dc.internal.E3DCWallboxConfiguration;\n+import org.openhab.binding.e3dc.internal.dto.DataConverter;\n+import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.e3dc.internal.dto.WallboxBlock;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCWallboxHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCWallboxHandler extends BaseHandler {\n+    private final Logger logger = LoggerFactory.getLogger(E3DCWallboxHandler.class);\n+    private BitSet currentBitSet = new BitSet(16);\n+    private @Nullable E3DCWallboxConfiguration config;\n+    private @Nullable E3DCDeviceThingHandler bridgeHandler;\n+\n+    public E3DCWallboxHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(E3DCWallboxConfiguration.class);\n+        super.initialize(DataType.DATA);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            logger.info(\"Command {} CUID {}\", command, channelUID);\n+            logger.info(\"getId {}\", channelUID.getId());\n+            logger.info(\"getIdWithoutGroup {}\", channelUID.getIdWithoutGroup());", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMTU0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464001540", "bodyText": "Also leftover from debugging - they are removed", "author": "weymann", "createdAt": "2020-08-01T21:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1OTk3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java\ndeleted file mode 100644\nindex dd5ac9a774..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java\n+++ /dev/null\n\n@@ -1,138 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.handler;\n-\n-import static org.openhab.binding.e3dc.internal.E3DCBindingConstants.*;\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import java.util.BitSet;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.thing.Bridge;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.Thing;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.openhab.binding.e3dc.internal.E3DCWallboxConfiguration;\n-import org.openhab.binding.e3dc.internal.dto.DataConverter;\n-import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n-import org.openhab.binding.e3dc.internal.dto.WallboxBlock;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link E3DCWallboxHandler} is responsible for handling commands, which are\n- * sent to one of the channels.\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class E3DCWallboxHandler extends BaseHandler {\n-    private final Logger logger = LoggerFactory.getLogger(E3DCWallboxHandler.class);\n-    private BitSet currentBitSet = new BitSet(16);\n-    private @Nullable E3DCWallboxConfiguration config;\n-    private @Nullable E3DCDeviceThingHandler bridgeHandler;\n-\n-    public E3DCWallboxHandler(Thing thing) {\n-        super(thing);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        config = getConfigAs(E3DCWallboxConfiguration.class);\n-        super.initialize(DataType.DATA);\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        if (command instanceof OnOffType) {\n-            logger.info(\"Command {} CUID {}\", command, channelUID);\n-            logger.info(\"getId {}\", channelUID.getId());\n-            logger.info(\"getIdWithoutGroup {}\", channelUID.getIdWithoutGroup());\n-            int writeValue = 0;\n-            synchronized (this) {\n-                if (channelUID.getIdWithoutGroup().equals(WB_SUNMODE_CHANNEL)) {\n-                    currentBitSet.set(WB_SUNMODE_BIT, command.equals(OnOffType.ON));\n-                } else if (channelUID.getIdWithoutGroup().equals(WB_CHARGING_ABORTED_CHANNEL)) {\n-                    currentBitSet.set(WB_CHARGING_ABORTED_BIT, command.equals(OnOffType.ON));\n-                } else if (channelUID.getIdWithoutGroup().equals(WB_SCHUKO_ON_CHANNEL)) {\n-                    currentBitSet.set(WB_SCHUKO_ON_BIT, command.equals(OnOffType.ON));\n-                } else if (channelUID.getIdWithoutGroup().equals(WB_1PHASE_CHANNEL)) {\n-                    currentBitSet.set(WB_1PHASE_BIT, command.equals(OnOffType.ON));\n-                }\n-                writeValue = DataConverter.toInt(currentBitSet);\n-                logger.info(\"Send {}\", writeValue);\n-            }\n-            E3DCDeviceThingHandler localBridgeHandler = bridgeHandler;\n-            if (localBridgeHandler == null) {\n-                Bridge b = getBridge();\n-                if (b != null) {\n-                    localBridgeHandler = (E3DCDeviceThingHandler) b.getHandler();\n-                    bridgeHandler = localBridgeHandler;\n-                }\n-            }\n-            if (localBridgeHandler != null) {\n-                int wallboxId = getWallboxId(config);\n-                if (wallboxId != -1) {\n-                    localBridgeHandler.wallboxSet(wallboxId, writeValue);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void dataAvailable(ModbusDataProvider provider) {\n-        WallboxArray blockArray = (WallboxArray) provider.getData(DataType.WALLBOX);\n-        if (blockArray != null) {\n-            int wallboxId = getWallboxId(config);\n-            if (wallboxId != -1) {\n-                WallboxBlock block = blockArray.getWallboxBlock(wallboxId);\n-                if (block != null) {\n-                    synchronized (this) {\n-                        currentBitSet = block.getBitSet();\n-                    }\n-                    updateState(WB_AVAILABLE_CHANNEL, block.wbAvailable);\n-                    updateState(WB_SUNMODE_CHANNEL, block.wbSunmode);\n-                    updateState(WB_CHARGING_ABORTED_CHANNEL, block.wbChargingAborted);\n-                    updateState(WB_CHARGING_CHANNEL, block.wbCharging);\n-                    updateState(WB_JACK_LOCKED_CHANNEL, block.wbJackLocked);\n-                    updateState(WB_JACK_PLUGGED_CHANNEL, block.wbJackPlugged);\n-                    updateState(WB_SCHUKO_ON_CHANNEL, block.wbSchukoOn);\n-                    updateState(WB_SCHUKO_PLUGGED_CHANNEL, block.wbSchukoPlugged);\n-                    updateState(WB_SCHUKO_LOCKED_CHANNEL, block.wbSchukoLocked);\n-                    updateState(WB_SCHUKO_REALY_16A_CHANNEL, block.wbSchukoRelay16);\n-                    updateState(WB_REALY_16A_CHANNEL, block.wbRelay16);\n-                    updateState(WB_RELAY_32A_CHANNEL, block.wbRelay32);\n-                    updateState(WB_1PHASE_CHANNEL, block.wb1phase);\n-                } else {\n-                    logger.debug(\"Unable to get ID {} from WallboxArray\", wallboxId);\n-                }\n-            } else {\n-                logger.debug(\"Wallbox ID {} not valid\", wallboxId);\n-            }\n-        } else {\n-            logger.debug(\"Unable to get {} from provider {}\", DataType.WALLBOX, provider.toString());\n-        }\n-    }\n-\n-    private int getWallboxId(@Nullable E3DCWallboxConfiguration c) {\n-        if (c != null) {\n-            return c.wallboxId;\n-        } else {\n-            return -1;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDI0NA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460560244", "bodyText": "You might want to declare currentBitSet as volatile.", "author": "fwolter", "createdAt": "2020-07-26T18:45:57Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.handler;\n+\n+import static org.openhab.binding.e3dc.internal.E3DCBindingConstants.*;\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.BitSet;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.e3dc.internal.E3DCWallboxConfiguration;\n+import org.openhab.binding.e3dc.internal.dto.DataConverter;\n+import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.e3dc.internal.dto.WallboxBlock;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCWallboxHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCWallboxHandler extends BaseHandler {\n+    private final Logger logger = LoggerFactory.getLogger(E3DCWallboxHandler.class);\n+    private BitSet currentBitSet = new BitSet(16);\n+    private @Nullable E3DCWallboxConfiguration config;\n+    private @Nullable E3DCDeviceThingHandler bridgeHandler;\n+\n+    public E3DCWallboxHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(E3DCWallboxConfiguration.class);\n+        super.initialize(DataType.DATA);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            logger.info(\"Command {} CUID {}\", command, channelUID);\n+            logger.info(\"getId {}\", channelUID.getId());\n+            logger.info(\"getIdWithoutGroup {}\", channelUID.getIdWithoutGroup());\n+            int writeValue = 0;\n+            synchronized (this) {\n+                if (channelUID.getIdWithoutGroup().equals(WB_SUNMODE_CHANNEL)) {\n+                    currentBitSet.set(WB_SUNMODE_BIT, command.equals(OnOffType.ON));\n+                } else if (channelUID.getIdWithoutGroup().equals(WB_CHARGING_ABORTED_CHANNEL)) {\n+                    currentBitSet.set(WB_CHARGING_ABORTED_BIT, command.equals(OnOffType.ON));\n+                } else if (channelUID.getIdWithoutGroup().equals(WB_SCHUKO_ON_CHANNEL)) {\n+                    currentBitSet.set(WB_SCHUKO_ON_BIT, command.equals(OnOffType.ON));\n+                } else if (channelUID.getIdWithoutGroup().equals(WB_1PHASE_CHANNEL)) {\n+                    currentBitSet.set(WB_1PHASE_BIT, command.equals(OnOffType.ON));\n+                }\n+                writeValue = DataConverter.toInt(currentBitSet);\n+                logger.info(\"Send {}\", writeValue);\n+            }\n+            E3DCDeviceThingHandler localBridgeHandler = bridgeHandler;\n+            if (localBridgeHandler == null) {\n+                Bridge b = getBridge();\n+                if (b != null) {\n+                    localBridgeHandler = (E3DCDeviceThingHandler) b.getHandler();\n+                    bridgeHandler = localBridgeHandler;\n+                }\n+            }\n+            if (localBridgeHandler != null) {\n+                int wallboxId = getWallboxId(config);\n+                if (wallboxId != -1) {\n+                    localBridgeHandler.wallboxSet(wallboxId, writeValue);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void dataAvailable(ModbusDataProvider provider) {\n+        WallboxArray blockArray = (WallboxArray) provider.getData(DataType.WALLBOX);\n+        if (blockArray != null) {\n+            int wallboxId = getWallboxId(config);\n+            if (wallboxId != -1) {\n+                WallboxBlock block = blockArray.getWallboxBlock(wallboxId);\n+                if (block != null) {\n+                    synchronized (this) {\n+                        currentBitSet = block.getBitSet();", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwODAyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464008028", "bodyText": "No, intention is really to synchronize the BitSet. If a command from User is ongoing to change the BitSet it shouldn't be overridden by Modbus Poller with the recent BitSet.", "author": "weymann", "createdAt": "2020-08-01T22:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java\ndeleted file mode 100644\nindex dd5ac9a774..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCWallboxHandler.java\n+++ /dev/null\n\n@@ -1,138 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.handler;\n-\n-import static org.openhab.binding.e3dc.internal.E3DCBindingConstants.*;\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import java.util.BitSet;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.thing.Bridge;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.Thing;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.openhab.binding.e3dc.internal.E3DCWallboxConfiguration;\n-import org.openhab.binding.e3dc.internal.dto.DataConverter;\n-import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n-import org.openhab.binding.e3dc.internal.dto.WallboxBlock;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link E3DCWallboxHandler} is responsible for handling commands, which are\n- * sent to one of the channels.\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class E3DCWallboxHandler extends BaseHandler {\n-    private final Logger logger = LoggerFactory.getLogger(E3DCWallboxHandler.class);\n-    private BitSet currentBitSet = new BitSet(16);\n-    private @Nullable E3DCWallboxConfiguration config;\n-    private @Nullable E3DCDeviceThingHandler bridgeHandler;\n-\n-    public E3DCWallboxHandler(Thing thing) {\n-        super(thing);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        config = getConfigAs(E3DCWallboxConfiguration.class);\n-        super.initialize(DataType.DATA);\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        if (command instanceof OnOffType) {\n-            logger.info(\"Command {} CUID {}\", command, channelUID);\n-            logger.info(\"getId {}\", channelUID.getId());\n-            logger.info(\"getIdWithoutGroup {}\", channelUID.getIdWithoutGroup());\n-            int writeValue = 0;\n-            synchronized (this) {\n-                if (channelUID.getIdWithoutGroup().equals(WB_SUNMODE_CHANNEL)) {\n-                    currentBitSet.set(WB_SUNMODE_BIT, command.equals(OnOffType.ON));\n-                } else if (channelUID.getIdWithoutGroup().equals(WB_CHARGING_ABORTED_CHANNEL)) {\n-                    currentBitSet.set(WB_CHARGING_ABORTED_BIT, command.equals(OnOffType.ON));\n-                } else if (channelUID.getIdWithoutGroup().equals(WB_SCHUKO_ON_CHANNEL)) {\n-                    currentBitSet.set(WB_SCHUKO_ON_BIT, command.equals(OnOffType.ON));\n-                } else if (channelUID.getIdWithoutGroup().equals(WB_1PHASE_CHANNEL)) {\n-                    currentBitSet.set(WB_1PHASE_BIT, command.equals(OnOffType.ON));\n-                }\n-                writeValue = DataConverter.toInt(currentBitSet);\n-                logger.info(\"Send {}\", writeValue);\n-            }\n-            E3DCDeviceThingHandler localBridgeHandler = bridgeHandler;\n-            if (localBridgeHandler == null) {\n-                Bridge b = getBridge();\n-                if (b != null) {\n-                    localBridgeHandler = (E3DCDeviceThingHandler) b.getHandler();\n-                    bridgeHandler = localBridgeHandler;\n-                }\n-            }\n-            if (localBridgeHandler != null) {\n-                int wallboxId = getWallboxId(config);\n-                if (wallboxId != -1) {\n-                    localBridgeHandler.wallboxSet(wallboxId, writeValue);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void dataAvailable(ModbusDataProvider provider) {\n-        WallboxArray blockArray = (WallboxArray) provider.getData(DataType.WALLBOX);\n-        if (blockArray != null) {\n-            int wallboxId = getWallboxId(config);\n-            if (wallboxId != -1) {\n-                WallboxBlock block = blockArray.getWallboxBlock(wallboxId);\n-                if (block != null) {\n-                    synchronized (this) {\n-                        currentBitSet = block.getBitSet();\n-                    }\n-                    updateState(WB_AVAILABLE_CHANNEL, block.wbAvailable);\n-                    updateState(WB_SUNMODE_CHANNEL, block.wbSunmode);\n-                    updateState(WB_CHARGING_ABORTED_CHANNEL, block.wbChargingAborted);\n-                    updateState(WB_CHARGING_CHANNEL, block.wbCharging);\n-                    updateState(WB_JACK_LOCKED_CHANNEL, block.wbJackLocked);\n-                    updateState(WB_JACK_PLUGGED_CHANNEL, block.wbJackPlugged);\n-                    updateState(WB_SCHUKO_ON_CHANNEL, block.wbSchukoOn);\n-                    updateState(WB_SCHUKO_PLUGGED_CHANNEL, block.wbSchukoPlugged);\n-                    updateState(WB_SCHUKO_LOCKED_CHANNEL, block.wbSchukoLocked);\n-                    updateState(WB_SCHUKO_REALY_16A_CHANNEL, block.wbSchukoRelay16);\n-                    updateState(WB_REALY_16A_CHANNEL, block.wbRelay16);\n-                    updateState(WB_RELAY_32A_CHANNEL, block.wbRelay32);\n-                    updateState(WB_1PHASE_CHANNEL, block.wb1phase);\n-                } else {\n-                    logger.debug(\"Unable to get ID {} from WallboxArray\", wallboxId);\n-                }\n-            } else {\n-                logger.debug(\"Wallbox ID {} not valid\", wallboxId);\n-            }\n-        } else {\n-            logger.debug(\"Unable to get {} from provider {}\", DataType.WALLBOX, provider.toString());\n-        }\n-    }\n-\n-    private int getWallboxId(@Nullable E3DCWallboxConfiguration c) {\n-        if (c != null) {\n-            return c.wallboxId;\n-        } else {\n-            return -1;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDc0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460560749", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Iterator<ModbusRegister> iter = registers.iterator();\n          \n          \n            \n                    int i = 0;\n          \n          \n            \n                    while (iter.hasNext()) {\n          \n          \n            \n                        ModbusRegister reg = iter.next();\n          \n          \n            \n                        System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n          \n          \n            \n                        i += 2;\n          \n          \n            \n                    }\n          \n          \n            \n                    int i = 0;\n          \n          \n            \n                    for (ModbusRegister reg : registers) {\n          \n          \n            \n                        System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n          \n          \n            \n                        i += 2;\n          \n          \n            \n                    }", "author": "fwolter", "createdAt": "2020-07-26T18:51:11Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.modbus;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.e3dc.internal.dto.EmergencyBlock;\n+import org.openhab.binding.e3dc.internal.dto.InfoBlock;\n+import org.openhab.binding.e3dc.internal.dto.PowerBlock;\n+import org.openhab.binding.e3dc.internal.dto.StringBlock;\n+import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ModbusCallback extends ModbusDataProvider\n+        implements ModbusReadCallback, ModbusFailureCallback<ModbusReadRequestBlueprint> {\n+    private final Logger logger = LoggerFactory.getLogger(ModbusCallback.class);\n+    private DataType callbackType;\n+    private byte[] bArray;\n+    private int size;\n+    private int counter = 0;\n+    private long maxDuration = Long.MIN_VALUE;\n+    private long minDuration = Long.MAX_VALUE;\n+    private long avgDuration = 0;\n+\n+    public ModbusCallback(DataType type) {\n+        callbackType = type;\n+        if (type.equals(DataType.INFO)) {\n+            size = INFO_REG_SIZE * 2;\n+            bArray = new byte[size];\n+        } else {\n+            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n+            bArray = new byte[size];\n+        }\n+    }\n+\n+    @Override\n+    public void handle(AsyncModbusReadResult result) {\n+        byte[] newArray = new byte[size];\n+        long startTime = System.currentTimeMillis();\n+        Optional<ModbusRegisterArray> opt = result.getRegisters();\n+        ModbusRegisterArray registers = opt.get();\n+        Iterator<ModbusRegister> iter = registers.iterator();\n+        int i = 0;\n+        while (iter.hasNext()) {\n+            ModbusRegister reg = iter.next();\n+            System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n+            i += 2;\n+        }", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyNjQ3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r461026477", "bodyText": "How about introducing ModbusRegisterArray helper instance method?", "author": "ssalonen", "createdAt": "2020-07-27T16:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMjIwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464002202", "bodyText": "Thanks, change applied", "author": "weymann", "createdAt": "2020-08-01T21:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java\ndeleted file mode 100644\nindex 46da43d8a9..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java\n+++ /dev/null\n\n@@ -1,142 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.modbus;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.Optional;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.openhab.binding.e3dc.internal.dto.EmergencyBlock;\n-import org.openhab.binding.e3dc.internal.dto.InfoBlock;\n-import org.openhab.binding.e3dc.internal.dto.PowerBlock;\n-import org.openhab.binding.e3dc.internal.dto.StringBlock;\n-import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.io.transport.modbus.AsyncModbusFailure;\n-import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n-import org.openhab.io.transport.modbus.ModbusFailureCallback;\n-import org.openhab.io.transport.modbus.ModbusReadCallback;\n-import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusRegister;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class ModbusCallback extends ModbusDataProvider\n-        implements ModbusReadCallback, ModbusFailureCallback<ModbusReadRequestBlueprint> {\n-    private final Logger logger = LoggerFactory.getLogger(ModbusCallback.class);\n-    private DataType callbackType;\n-    private byte[] bArray;\n-    private int size;\n-    private int counter = 0;\n-    private long maxDuration = Long.MIN_VALUE;\n-    private long minDuration = Long.MAX_VALUE;\n-    private long avgDuration = 0;\n-\n-    public ModbusCallback(DataType type) {\n-        callbackType = type;\n-        if (type.equals(DataType.INFO)) {\n-            size = INFO_REG_SIZE * 2;\n-            bArray = new byte[size];\n-        } else {\n-            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n-            bArray = new byte[size];\n-        }\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusReadResult result) {\n-        byte[] newArray = new byte[size];\n-        long startTime = System.currentTimeMillis();\n-        Optional<ModbusRegisterArray> opt = result.getRegisters();\n-        ModbusRegisterArray registers = opt.get();\n-        Iterator<ModbusRegister> iter = registers.iterator();\n-        int i = 0;\n-        while (iter.hasNext()) {\n-            ModbusRegister reg = iter.next();\n-            System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n-            i += 2;\n-        }\n-        setArray(newArray);\n-\n-        long duration = System.currentTimeMillis() - startTime;\n-        avgDuration += duration;\n-        minDuration = Math.min(minDuration, duration);\n-        maxDuration = Math.max(maxDuration, duration);\n-        counter++;\n-        if (counter % 100 == 0) {\n-            logger.debug(\"Min {} Max {} Avg {}\", minDuration, maxDuration, avgDuration / 30);\n-            avgDuration = 0;\n-            minDuration = Long.MAX_VALUE;\n-            maxDuration = Long.MIN_VALUE;\n-        }\n-        // DataConverter.logArray(newArray);\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusFailure<ModbusReadRequestBlueprint> failure) {\n-        logger.warn(\"E3DC Modbus {} Callback error! {}\", callbackType, failure.getRequest().toString());\n-    }\n-\n-    public synchronized void setArray(byte[] b) {\n-        if (b.length != size) {\n-            logger.warn(\"Wrong byte size received. Should be {} but is {}. Data maybe corrupted!\", size, b.length);\n-        }\n-        bArray = b.clone();\n-        super.informAllListeners();\n-    }\n-\n-    @Override\n-    public @Nullable Data getData(DataType type) {\n-        synchronized (bArray) {\n-            if (type.equals(DataType.INFO) && callbackType.equals(DataType.INFO)) {\n-                return new InfoBlock(Arrays.copyOfRange(bArray, INFO_REG_START, INFO_REG_SIZE * 2));\n-            } else if (type.equals(DataType.POWER) && callbackType.equals(DataType.DATA)) {\n-                int start = (POWER_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + POWER_REG_SIZE * 2;\n-                return new PowerBlock(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.EMERGENCY) && callbackType.equals(DataType.DATA)) {\n-                int start = (EMS_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + EMS_REG_SIZE * 2;\n-                return new EmergencyBlock(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.WALLBOX) && callbackType.equals(DataType.DATA)) {\n-                int start = (WALLBOX_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + WALLBOX_REG_SIZE * 2;\n-                return new WallboxArray(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.STRINGS) && callbackType.equals(DataType.DATA)) {\n-                int start = (STRINGS_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + STRINGS_REG_SIZE * 2;\n-                return new StringBlock(Arrays.copyOfRange(bArray, start, end));\n-            }\n-        }\n-        logger.warn(\"Wrong Block requested. Request is {} but type is {}\", type, callbackType);\n-        return null;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(this.getClass().getName()).append(\":\").append(callbackType);\n-        return sb.toString();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDgyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460560824", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-07-26T18:51:54Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.modbus;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.e3dc.internal.dto.EmergencyBlock;\n+import org.openhab.binding.e3dc.internal.dto.InfoBlock;\n+import org.openhab.binding.e3dc.internal.dto.PowerBlock;\n+import org.openhab.binding.e3dc.internal.dto.StringBlock;\n+import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ModbusCallback extends ModbusDataProvider\n+        implements ModbusReadCallback, ModbusFailureCallback<ModbusReadRequestBlueprint> {\n+    private final Logger logger = LoggerFactory.getLogger(ModbusCallback.class);\n+    private DataType callbackType;\n+    private byte[] bArray;\n+    private int size;\n+    private int counter = 0;\n+    private long maxDuration = Long.MIN_VALUE;\n+    private long minDuration = Long.MAX_VALUE;\n+    private long avgDuration = 0;\n+\n+    public ModbusCallback(DataType type) {\n+        callbackType = type;\n+        if (type.equals(DataType.INFO)) {\n+            size = INFO_REG_SIZE * 2;\n+            bArray = new byte[size];\n+        } else {\n+            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n+            bArray = new byte[size];\n+        }\n+    }\n+\n+    @Override\n+    public void handle(AsyncModbusReadResult result) {\n+        byte[] newArray = new byte[size];\n+        long startTime = System.currentTimeMillis();\n+        Optional<ModbusRegisterArray> opt = result.getRegisters();\n+        ModbusRegisterArray registers = opt.get();\n+        Iterator<ModbusRegister> iter = registers.iterator();\n+        int i = 0;\n+        while (iter.hasNext()) {\n+            ModbusRegister reg = iter.next();\n+            System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n+            i += 2;\n+        }\n+        setArray(newArray);\n+\n+        long duration = System.currentTimeMillis() - startTime;\n+        avgDuration += duration;\n+        minDuration = Math.min(minDuration, duration);\n+        maxDuration = Math.max(maxDuration, duration);\n+        counter++;\n+        if (counter % 100 == 0) {\n+            logger.debug(\"Min {} Max {} Avg {}\", minDuration, maxDuration, avgDuration / 30);\n+            avgDuration = 0;\n+            minDuration = Long.MAX_VALUE;\n+            maxDuration = Long.MIN_VALUE;\n+        }\n+        // DataConverter.logArray(newArray);", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMjM1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464002353", "bodyText": "Yes, also leftover from debugging", "author": "weymann", "createdAt": "2020-08-01T21:33:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java\ndeleted file mode 100644\nindex 46da43d8a9..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java\n+++ /dev/null\n\n@@ -1,142 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.modbus;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.Optional;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.openhab.binding.e3dc.internal.dto.EmergencyBlock;\n-import org.openhab.binding.e3dc.internal.dto.InfoBlock;\n-import org.openhab.binding.e3dc.internal.dto.PowerBlock;\n-import org.openhab.binding.e3dc.internal.dto.StringBlock;\n-import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.io.transport.modbus.AsyncModbusFailure;\n-import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n-import org.openhab.io.transport.modbus.ModbusFailureCallback;\n-import org.openhab.io.transport.modbus.ModbusReadCallback;\n-import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusRegister;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class ModbusCallback extends ModbusDataProvider\n-        implements ModbusReadCallback, ModbusFailureCallback<ModbusReadRequestBlueprint> {\n-    private final Logger logger = LoggerFactory.getLogger(ModbusCallback.class);\n-    private DataType callbackType;\n-    private byte[] bArray;\n-    private int size;\n-    private int counter = 0;\n-    private long maxDuration = Long.MIN_VALUE;\n-    private long minDuration = Long.MAX_VALUE;\n-    private long avgDuration = 0;\n-\n-    public ModbusCallback(DataType type) {\n-        callbackType = type;\n-        if (type.equals(DataType.INFO)) {\n-            size = INFO_REG_SIZE * 2;\n-            bArray = new byte[size];\n-        } else {\n-            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n-            bArray = new byte[size];\n-        }\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusReadResult result) {\n-        byte[] newArray = new byte[size];\n-        long startTime = System.currentTimeMillis();\n-        Optional<ModbusRegisterArray> opt = result.getRegisters();\n-        ModbusRegisterArray registers = opt.get();\n-        Iterator<ModbusRegister> iter = registers.iterator();\n-        int i = 0;\n-        while (iter.hasNext()) {\n-            ModbusRegister reg = iter.next();\n-            System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n-            i += 2;\n-        }\n-        setArray(newArray);\n-\n-        long duration = System.currentTimeMillis() - startTime;\n-        avgDuration += duration;\n-        minDuration = Math.min(minDuration, duration);\n-        maxDuration = Math.max(maxDuration, duration);\n-        counter++;\n-        if (counter % 100 == 0) {\n-            logger.debug(\"Min {} Max {} Avg {}\", minDuration, maxDuration, avgDuration / 30);\n-            avgDuration = 0;\n-            minDuration = Long.MAX_VALUE;\n-            maxDuration = Long.MIN_VALUE;\n-        }\n-        // DataConverter.logArray(newArray);\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusFailure<ModbusReadRequestBlueprint> failure) {\n-        logger.warn(\"E3DC Modbus {} Callback error! {}\", callbackType, failure.getRequest().toString());\n-    }\n-\n-    public synchronized void setArray(byte[] b) {\n-        if (b.length != size) {\n-            logger.warn(\"Wrong byte size received. Should be {} but is {}. Data maybe corrupted!\", size, b.length);\n-        }\n-        bArray = b.clone();\n-        super.informAllListeners();\n-    }\n-\n-    @Override\n-    public @Nullable Data getData(DataType type) {\n-        synchronized (bArray) {\n-            if (type.equals(DataType.INFO) && callbackType.equals(DataType.INFO)) {\n-                return new InfoBlock(Arrays.copyOfRange(bArray, INFO_REG_START, INFO_REG_SIZE * 2));\n-            } else if (type.equals(DataType.POWER) && callbackType.equals(DataType.DATA)) {\n-                int start = (POWER_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + POWER_REG_SIZE * 2;\n-                return new PowerBlock(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.EMERGENCY) && callbackType.equals(DataType.DATA)) {\n-                int start = (EMS_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + EMS_REG_SIZE * 2;\n-                return new EmergencyBlock(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.WALLBOX) && callbackType.equals(DataType.DATA)) {\n-                int start = (WALLBOX_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + WALLBOX_REG_SIZE * 2;\n-                return new WallboxArray(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.STRINGS) && callbackType.equals(DataType.DATA)) {\n-                int start = (STRINGS_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + STRINGS_REG_SIZE * 2;\n-                return new StringBlock(Arrays.copyOfRange(bArray, start, end));\n-            }\n-        }\n-        logger.warn(\"Wrong Block requested. Request is {} but type is {}\", type, callbackType);\n-        return null;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(this.getClass().getName()).append(\":\").append(callbackType);\n-        return sb.toString();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MjkzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r460562939", "bodyText": "What's your intention by making this synchronized? The callback is set before initialize() is invoked.", "author": "fwolter", "createdAt": "2020-07-26T19:14:38Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/BaseHandler.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerCallback;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.e3dc.internal.modbus.DataListener;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BaseHandler} Basic Handler for all things\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseHandler extends BaseThingHandler implements DataListener {\n+    private final Logger logger = LoggerFactory.getLogger(BaseHandler.class);\n+    private @Nullable ThingHandlerCallback thingHandlerCallback;\n+    private @Nullable ModbusDataProvider modbusDataProvider;\n+\n+    // Unit test purposes - check if dataAvailable callback was successful\n+    public boolean isUpdated = false;\n+    public boolean isInitialized = false;\n+\n+    public BaseHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public void initialize(DataType t) {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            Bridge b = getBridge();\n+            if (b != null) {\n+                BridgeHandler bridgeHandler = b.getHandler();\n+                if (bridgeHandler != null) {\n+                    if (t.equals(DataType.INFO)) {\n+                        ModbusDataProvider localModbusDataProvider = ((E3DCDeviceThingHandler) bridgeHandler)\n+                                .getInfoDataProvider();\n+                        modbusDataProvider = localModbusDataProvider;\n+                        localModbusDataProvider.addDataListener(this);\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else if (t.equals(DataType.DATA)) {\n+                        ModbusDataProvider localModbusDataProvider = ((E3DCDeviceThingHandler) bridgeHandler)\n+                                .getDataProvider();\n+                        modbusDataProvider = localModbusDataProvider;\n+                        localModbusDataProvider.addDataListener(this);\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } else {\n+                    logger.warn(\"BridgeHandler not found\");\n+                }\n+            } else {\n+                logger.warn(\"Bridge not found\");\n+            }\n+            isInitialized = true;\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ModbusDataProvider localModbusDataProvider = modbusDataProvider;\n+        if (localModbusDataProvider != null) {\n+            localModbusDataProvider.removeDataListener(this);\n+        }\n+    }\n+\n+    @Override\n+    public void setCallback(@Nullable ThingHandlerCallback thingHandlerCallback) {\n+        super.setCallback(thingHandlerCallback);\n+        this.thingHandlerCallback = thingHandlerCallback;\n+        // logger.info(\"ThingCallbackHandler received {}\", thingHandlerCallback);\n+    }\n+\n+    @Override\n+    public @Nullable Bridge getBridge() {\n+        ThingUID bridgeUID = thing.getBridgeUID();\n+        synchronized (this) {", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwODQzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464008432", "bodyText": "Obsolete due to Modbus rework", "author": "weymann", "createdAt": "2020-08-01T22:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MjkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/BaseHandler.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/BaseHandler.java\ndeleted file mode 100644\nindex bba332dbe2..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/BaseHandler.java\n+++ /dev/null\n\n@@ -1,116 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.handler;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.thing.Bridge;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.Thing;\n-import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.ThingUID;\n-import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n-import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n-import org.eclipse.smarthome.core.thing.binding.ThingHandlerCallback;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.binding.e3dc.internal.modbus.DataListener;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link BaseHandler} Basic Handler for all things\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public abstract class BaseHandler extends BaseThingHandler implements DataListener {\n-    private final Logger logger = LoggerFactory.getLogger(BaseHandler.class);\n-    private @Nullable ThingHandlerCallback thingHandlerCallback;\n-    private @Nullable ModbusDataProvider modbusDataProvider;\n-\n-    // Unit test purposes - check if dataAvailable callback was successful\n-    public boolean isUpdated = false;\n-    public boolean isInitialized = false;\n-\n-    public BaseHandler(Thing thing) {\n-        super(thing);\n-    }\n-\n-    public void initialize(DataType t) {\n-        updateStatus(ThingStatus.UNKNOWN);\n-        scheduler.execute(() -> {\n-            Bridge b = getBridge();\n-            if (b != null) {\n-                BridgeHandler bridgeHandler = b.getHandler();\n-                if (bridgeHandler != null) {\n-                    if (t.equals(DataType.INFO)) {\n-                        ModbusDataProvider localModbusDataProvider = ((E3DCDeviceThingHandler) bridgeHandler)\n-                                .getInfoDataProvider();\n-                        modbusDataProvider = localModbusDataProvider;\n-                        localModbusDataProvider.addDataListener(this);\n-                        updateStatus(ThingStatus.ONLINE);\n-                    } else if (t.equals(DataType.DATA)) {\n-                        ModbusDataProvider localModbusDataProvider = ((E3DCDeviceThingHandler) bridgeHandler)\n-                                .getDataProvider();\n-                        modbusDataProvider = localModbusDataProvider;\n-                        localModbusDataProvider.addDataListener(this);\n-                        updateStatus(ThingStatus.ONLINE);\n-                    }\n-                } else {\n-                    logger.warn(\"BridgeHandler not found\");\n-                }\n-            } else {\n-                logger.warn(\"Bridge not found\");\n-            }\n-            isInitialized = true;\n-        });\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        ModbusDataProvider localModbusDataProvider = modbusDataProvider;\n-        if (localModbusDataProvider != null) {\n-            localModbusDataProvider.removeDataListener(this);\n-        }\n-    }\n-\n-    @Override\n-    public void setCallback(@Nullable ThingHandlerCallback thingHandlerCallback) {\n-        super.setCallback(thingHandlerCallback);\n-        this.thingHandlerCallback = thingHandlerCallback;\n-        // logger.info(\"ThingCallbackHandler received {}\", thingHandlerCallback);\n-    }\n-\n-    @Override\n-    public @Nullable Bridge getBridge() {\n-        ThingUID bridgeUID = thing.getBridgeUID();\n-        synchronized (this) {\n-            ThingHandlerCallback localThinghandlerCallback = thingHandlerCallback;\n-            if (localThinghandlerCallback != null) {\n-                return bridgeUID != null ? localThinghandlerCallback.getBridge(bridgeUID) : null;\n-            } else {\n-                logger.warn(\"Handler {} of thing {} isn't able to resolve bridge\", getClass().getSimpleName(),\n-                        thing.getUID());\n-                return null;\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public abstract void handleCommand(ChannelUID channelUID, Command command);\n-\n-    @Override\n-    public abstract void dataAvailable(ModbusDataProvider provider);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMTk4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r461021983", "bodyText": "In case you decide not to follow my recommendation of reusing tcp/serial things from the modbus binding, you need to ensure yourself that ModbusCommunicationInterface is closed. This is normally done by the endpoint thing: https://github.com/openhab/openhab-addons/blob/2.5.x/bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/handler/AbstractModbusEndpointThingHandler.java#L98", "author": "ssalonen", "createdAt": "2020-07-27T16:39:23Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.handler;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.e3dc.internal.E3DCDeviceConfiguration;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.e3dc.internal.modbus.DataListener;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusCallback;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusWriteResult;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusTCPSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCDeviceThingHandler} Basic modbus connection towards the E3DC device\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCDeviceThingHandler extends BaseBridgeHandler\n+        implements DataListener, ModbusWriteCallback, ModbusFailureCallback<ModbusWriteRequestBlueprint> {\n+    private final Logger logger = LoggerFactory.getLogger(E3DCDeviceThingHandler.class);\n+    private ModbusManager modbusManagerRef;\n+    private final ModbusCallback modbusInfoCallback = new ModbusCallback(DataType.INFO);\n+    private final ModbusCallback modbusDataCallback = new ModbusCallback(DataType.DATA);\n+    private ThingStatus myStatus = ThingStatus.UNKNOWN;\n+    private @Nullable ModbusCommunicationInterface modbusCom;\n+    private @Nullable PollTask infoPoller;\n+    private @Nullable PollTask dataPoller;\n+    private @Nullable E3DCDeviceConfiguration config;\n+\n+    public E3DCDeviceThingHandler(Bridge bridge, ModbusManager ref) {\n+        super(bridge);\n+        modbusManagerRef = ref;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        setStatus(ThingStatus.UNKNOWN);\n+        // Example for background initialization:\n+        scheduler.execute(() -> {\n+            config = getConfigAs(E3DCDeviceConfiguration.class);\n+            E3DCDeviceConfiguration localConfig = config;\n+            if (localConfig != null && checkConfig(localConfig)) {\n+                ModbusTCPSlaveEndpoint slaveEndpoint = new ModbusTCPSlaveEndpoint(localConfig.host, localConfig.port);\n+\n+                ModbusCommunicationInterface localModbusCom = modbusManagerRef.newModbusCommunicationInterface(\n+                        slaveEndpoint, modbusManagerRef.getEndpointPoolConfiguration(slaveEndpoint));\n+                // register low speed info poller\n+                ModbusReadRequestBlueprint infoRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n+                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, INFO_REG_START, INFO_REG_SIZE, 3);\n+                infoPoller = localModbusCom.registerRegularPoll(infoRequest, INFO_POLL_REFRESH_TIME_MS, 0,\n+                        modbusInfoCallback, modbusInfoCallback);\n+\n+                ModbusReadRequestBlueprint dataRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n+                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, POWER_REG_START,\n+                        REGISTER_LENGTH - INFO_REG_SIZE, 3);\n+                dataPoller = localModbusCom.registerRegularPoll(dataRequest, localConfig.refresh, 0, modbusDataCallback,\n+                        modbusDataCallback);\n+                modbusCom = localModbusCom;\n+                // listen for data to get ONLINE\n+                modbusDataCallback.addDataListener(this);\n+            } else {\n+                setStatus(ThingStatus.OFFLINE);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMTM3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464121379", "bodyText": "Obsolete due to change towards Modbus binding", "author": "weymann", "createdAt": "2020-08-02T20:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMTk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java\ndeleted file mode 100644\nindex 4b421112b1..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java\n+++ /dev/null\n\n@@ -1,178 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.handler;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.thing.Bridge;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.openhab.binding.e3dc.internal.E3DCDeviceConfiguration;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.binding.e3dc.internal.modbus.DataListener;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusCallback;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n-import org.openhab.io.transport.modbus.AsyncModbusFailure;\n-import org.openhab.io.transport.modbus.AsyncModbusWriteResult;\n-import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n-import org.openhab.io.transport.modbus.ModbusFailureCallback;\n-import org.openhab.io.transport.modbus.ModbusManager;\n-import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n-import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-import org.openhab.io.transport.modbus.ModbusWriteCallback;\n-import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n-import org.openhab.io.transport.modbus.PollTask;\n-import org.openhab.io.transport.modbus.endpoint.ModbusTCPSlaveEndpoint;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link E3DCDeviceThingHandler} Basic modbus connection towards the E3DC device\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class E3DCDeviceThingHandler extends BaseBridgeHandler\n-        implements DataListener, ModbusWriteCallback, ModbusFailureCallback<ModbusWriteRequestBlueprint> {\n-    private final Logger logger = LoggerFactory.getLogger(E3DCDeviceThingHandler.class);\n-    private ModbusManager modbusManagerRef;\n-    private final ModbusCallback modbusInfoCallback = new ModbusCallback(DataType.INFO);\n-    private final ModbusCallback modbusDataCallback = new ModbusCallback(DataType.DATA);\n-    private ThingStatus myStatus = ThingStatus.UNKNOWN;\n-    private @Nullable ModbusCommunicationInterface modbusCom;\n-    private @Nullable PollTask infoPoller;\n-    private @Nullable PollTask dataPoller;\n-    private @Nullable E3DCDeviceConfiguration config;\n-\n-    public E3DCDeviceThingHandler(Bridge bridge, ModbusManager ref) {\n-        super(bridge);\n-        modbusManagerRef = ref;\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        setStatus(ThingStatus.UNKNOWN);\n-        // Example for background initialization:\n-        scheduler.execute(() -> {\n-            config = getConfigAs(E3DCDeviceConfiguration.class);\n-            E3DCDeviceConfiguration localConfig = config;\n-            if (localConfig != null && checkConfig(localConfig)) {\n-                ModbusTCPSlaveEndpoint slaveEndpoint = new ModbusTCPSlaveEndpoint(localConfig.host, localConfig.port);\n-\n-                ModbusCommunicationInterface localModbusCom = modbusManagerRef.newModbusCommunicationInterface(\n-                        slaveEndpoint, modbusManagerRef.getEndpointPoolConfiguration(slaveEndpoint));\n-                // register low speed info poller\n-                ModbusReadRequestBlueprint infoRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n-                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, INFO_REG_START, INFO_REG_SIZE, 3);\n-                infoPoller = localModbusCom.registerRegularPoll(infoRequest, INFO_POLL_REFRESH_TIME_MS, 0,\n-                        modbusInfoCallback, modbusInfoCallback);\n-\n-                ModbusReadRequestBlueprint dataRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n-                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, POWER_REG_START,\n-                        REGISTER_LENGTH - INFO_REG_SIZE, 3);\n-                dataPoller = localModbusCom.registerRegularPoll(dataRequest, localConfig.refresh, 0, modbusDataCallback,\n-                        modbusDataCallback);\n-                modbusCom = localModbusCom;\n-                // listen for data to get ONLINE\n-                modbusDataCallback.addDataListener(this);\n-            } else {\n-                setStatus(ThingStatus.OFFLINE);\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        modbusDataCallback.removeDataListener(this);\n-        ModbusCommunicationInterface localCom = modbusCom;\n-        if (localCom != null) {\n-            PollTask localInfoPoller = infoPoller;\n-            if (localInfoPoller != null) {\n-                localCom.unregisterRegularPoll(localInfoPoller);\n-            }\n-            PollTask localDataPoller = dataPoller;\n-            if (localDataPoller != null) {\n-                localCom.unregisterRegularPoll(localDataPoller);\n-            }\n-        }\n-    }\n-\n-    private boolean checkConfig(@Nullable E3DCDeviceConfiguration c) {\n-        if (c != null) {\n-            if (c.port > 1) {\n-                if (c.refresh < 1) {\n-                    c.refresh = 2;\n-                }\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private void setStatus(ThingStatus status) {\n-        myStatus = status;\n-        updateStatus(myStatus);\n-    }\n-\n-    /**\n-     * Wallbox Settings can be changed with one Integer\n-     *\n-     * @param wallboxId needed to calculate right register\n-     * @param writeValue integer to be written\n-     */\n-    public void wallboxSet(int wallboxId, int writeValue) {\n-        E3DCDeviceConfiguration localConfig = config;\n-        ModbusCommunicationInterface localCom = modbusCom;\n-        if (localConfig != null && localCom != null) {\n-            ModbusRegisterArray regArray = new ModbusRegisterArray(writeValue);\n-            ModbusWriteRegisterRequestBlueprint writeBluePrint = new ModbusWriteRegisterRequestBlueprint(\n-                    localConfig.deviceid, WALLBOX_REG_START + wallboxId, regArray, false, 3);\n-            localCom.submitOneTimeWrite(writeBluePrint, this, this);\n-        }\n-    }\n-\n-    @Override\n-    public void dataAvailable(ModbusDataProvider provider) {\n-        if (myStatus != ThingStatus.ONLINE) {\n-            setStatus(ThingStatus.ONLINE);\n-        }\n-    }\n-\n-    public ModbusDataProvider getInfoDataProvider() {\n-        return modbusInfoCallback;\n-    }\n-\n-    public ModbusDataProvider getDataProvider() {\n-        return modbusDataCallback;\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusWriteResult result) {\n-        logger.debug(\"E3DC Modbus write response! {}\", result.getResponse().toString());\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusFailure<ModbusWriteRequestBlueprint> failure) {\n-        logger.warn(\"E3DC Modbus write error! {}\", failure.getRequest().toString());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMjQzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r461022438", "bodyText": "error essentially ignored -- would you not want to change thing status?", "author": "ssalonen", "createdAt": "2020-07-27T16:40:09Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.handler;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.e3dc.internal.E3DCDeviceConfiguration;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.e3dc.internal.modbus.DataListener;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusCallback;\n+import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusWriteResult;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusTCPSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCDeviceThingHandler} Basic modbus connection towards the E3DC device\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCDeviceThingHandler extends BaseBridgeHandler\n+        implements DataListener, ModbusWriteCallback, ModbusFailureCallback<ModbusWriteRequestBlueprint> {\n+    private final Logger logger = LoggerFactory.getLogger(E3DCDeviceThingHandler.class);\n+    private ModbusManager modbusManagerRef;\n+    private final ModbusCallback modbusInfoCallback = new ModbusCallback(DataType.INFO);\n+    private final ModbusCallback modbusDataCallback = new ModbusCallback(DataType.DATA);\n+    private ThingStatus myStatus = ThingStatus.UNKNOWN;\n+    private @Nullable ModbusCommunicationInterface modbusCom;\n+    private @Nullable PollTask infoPoller;\n+    private @Nullable PollTask dataPoller;\n+    private @Nullable E3DCDeviceConfiguration config;\n+\n+    public E3DCDeviceThingHandler(Bridge bridge, ModbusManager ref) {\n+        super(bridge);\n+        modbusManagerRef = ref;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        setStatus(ThingStatus.UNKNOWN);\n+        // Example for background initialization:\n+        scheduler.execute(() -> {\n+            config = getConfigAs(E3DCDeviceConfiguration.class);\n+            E3DCDeviceConfiguration localConfig = config;\n+            if (localConfig != null && checkConfig(localConfig)) {\n+                ModbusTCPSlaveEndpoint slaveEndpoint = new ModbusTCPSlaveEndpoint(localConfig.host, localConfig.port);\n+\n+                ModbusCommunicationInterface localModbusCom = modbusManagerRef.newModbusCommunicationInterface(\n+                        slaveEndpoint, modbusManagerRef.getEndpointPoolConfiguration(slaveEndpoint));\n+                // register low speed info poller\n+                ModbusReadRequestBlueprint infoRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n+                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, INFO_REG_START, INFO_REG_SIZE, 3);\n+                infoPoller = localModbusCom.registerRegularPoll(infoRequest, INFO_POLL_REFRESH_TIME_MS, 0,\n+                        modbusInfoCallback, modbusInfoCallback);\n+\n+                ModbusReadRequestBlueprint dataRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n+                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, POWER_REG_START,\n+                        REGISTER_LENGTH - INFO_REG_SIZE, 3);\n+                dataPoller = localModbusCom.registerRegularPoll(dataRequest, localConfig.refresh, 0, modbusDataCallback,\n+                        modbusDataCallback);\n+                modbusCom = localModbusCom;\n+                // listen for data to get ONLINE\n+                modbusDataCallback.addDataListener(this);\n+            } else {\n+                setStatus(ThingStatus.OFFLINE);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        modbusDataCallback.removeDataListener(this);\n+        ModbusCommunicationInterface localCom = modbusCom;\n+        if (localCom != null) {\n+            PollTask localInfoPoller = infoPoller;\n+            if (localInfoPoller != null) {\n+                localCom.unregisterRegularPoll(localInfoPoller);\n+            }\n+            PollTask localDataPoller = dataPoller;\n+            if (localDataPoller != null) {\n+                localCom.unregisterRegularPoll(localDataPoller);\n+            }\n+        }\n+    }\n+\n+    private boolean checkConfig(@Nullable E3DCDeviceConfiguration c) {\n+        if (c != null) {\n+            if (c.port > 1) {\n+                if (c.refresh < 1) {\n+                    c.refresh = 2;\n+                }\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private void setStatus(ThingStatus status) {\n+        myStatus = status;\n+        updateStatus(myStatus);\n+    }\n+\n+    /**\n+     * Wallbox Settings can be changed with one Integer\n+     *\n+     * @param wallboxId needed to calculate right register\n+     * @param writeValue integer to be written\n+     */\n+    public void wallboxSet(int wallboxId, int writeValue) {\n+        E3DCDeviceConfiguration localConfig = config;\n+        ModbusCommunicationInterface localCom = modbusCom;\n+        if (localConfig != null && localCom != null) {\n+            ModbusRegisterArray regArray = new ModbusRegisterArray(writeValue);\n+            ModbusWriteRegisterRequestBlueprint writeBluePrint = new ModbusWriteRegisterRequestBlueprint(\n+                    localConfig.deviceid, WALLBOX_REG_START + wallboxId, regArray, false, 3);\n+            localCom.submitOneTimeWrite(writeBluePrint, this, this);\n+        }\n+    }\n+\n+    @Override\n+    public void dataAvailable(ModbusDataProvider provider) {\n+        if (myStatus != ThingStatus.ONLINE) {\n+            setStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    public ModbusDataProvider getInfoDataProvider() {\n+        return modbusInfoCallback;\n+    }\n+\n+    public ModbusDataProvider getDataProvider() {\n+        return modbusDataCallback;\n+    }\n+\n+    @Override\n+    public void handle(AsyncModbusWriteResult result) {\n+        logger.debug(\"E3DC Modbus write response! {}\", result.getResponse().toString());\n+    }\n+\n+    @Override\n+    public void handle(AsyncModbusFailure<ModbusWriteRequestBlueprint> failure) {", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMTkwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464121906", "bodyText": "Error handling is completely reworked", "author": "weymann", "createdAt": "2020-08-02T20:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMjQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java\ndeleted file mode 100644\nindex 4b421112b1..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/handler/E3DCDeviceThingHandler.java\n+++ /dev/null\n\n@@ -1,178 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.handler;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.eclipse.smarthome.core.thing.Bridge;\n-import org.eclipse.smarthome.core.thing.ChannelUID;\n-import org.eclipse.smarthome.core.thing.ThingStatus;\n-import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n-import org.eclipse.smarthome.core.types.Command;\n-import org.openhab.binding.e3dc.internal.E3DCDeviceConfiguration;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.binding.e3dc.internal.modbus.DataListener;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusCallback;\n-import org.openhab.binding.e3dc.internal.modbus.ModbusDataProvider;\n-import org.openhab.io.transport.modbus.AsyncModbusFailure;\n-import org.openhab.io.transport.modbus.AsyncModbusWriteResult;\n-import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n-import org.openhab.io.transport.modbus.ModbusFailureCallback;\n-import org.openhab.io.transport.modbus.ModbusManager;\n-import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n-import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-import org.openhab.io.transport.modbus.ModbusWriteCallback;\n-import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n-import org.openhab.io.transport.modbus.PollTask;\n-import org.openhab.io.transport.modbus.endpoint.ModbusTCPSlaveEndpoint;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link E3DCDeviceThingHandler} Basic modbus connection towards the E3DC device\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class E3DCDeviceThingHandler extends BaseBridgeHandler\n-        implements DataListener, ModbusWriteCallback, ModbusFailureCallback<ModbusWriteRequestBlueprint> {\n-    private final Logger logger = LoggerFactory.getLogger(E3DCDeviceThingHandler.class);\n-    private ModbusManager modbusManagerRef;\n-    private final ModbusCallback modbusInfoCallback = new ModbusCallback(DataType.INFO);\n-    private final ModbusCallback modbusDataCallback = new ModbusCallback(DataType.DATA);\n-    private ThingStatus myStatus = ThingStatus.UNKNOWN;\n-    private @Nullable ModbusCommunicationInterface modbusCom;\n-    private @Nullable PollTask infoPoller;\n-    private @Nullable PollTask dataPoller;\n-    private @Nullable E3DCDeviceConfiguration config;\n-\n-    public E3DCDeviceThingHandler(Bridge bridge, ModbusManager ref) {\n-        super(bridge);\n-        modbusManagerRef = ref;\n-    }\n-\n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        setStatus(ThingStatus.UNKNOWN);\n-        // Example for background initialization:\n-        scheduler.execute(() -> {\n-            config = getConfigAs(E3DCDeviceConfiguration.class);\n-            E3DCDeviceConfiguration localConfig = config;\n-            if (localConfig != null && checkConfig(localConfig)) {\n-                ModbusTCPSlaveEndpoint slaveEndpoint = new ModbusTCPSlaveEndpoint(localConfig.host, localConfig.port);\n-\n-                ModbusCommunicationInterface localModbusCom = modbusManagerRef.newModbusCommunicationInterface(\n-                        slaveEndpoint, modbusManagerRef.getEndpointPoolConfiguration(slaveEndpoint));\n-                // register low speed info poller\n-                ModbusReadRequestBlueprint infoRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n-                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, INFO_REG_START, INFO_REG_SIZE, 3);\n-                infoPoller = localModbusCom.registerRegularPoll(infoRequest, INFO_POLL_REFRESH_TIME_MS, 0,\n-                        modbusInfoCallback, modbusInfoCallback);\n-\n-                ModbusReadRequestBlueprint dataRequest = new ModbusReadRequestBlueprint(localConfig.deviceid,\n-                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, POWER_REG_START,\n-                        REGISTER_LENGTH - INFO_REG_SIZE, 3);\n-                dataPoller = localModbusCom.registerRegularPoll(dataRequest, localConfig.refresh, 0, modbusDataCallback,\n-                        modbusDataCallback);\n-                modbusCom = localModbusCom;\n-                // listen for data to get ONLINE\n-                modbusDataCallback.addDataListener(this);\n-            } else {\n-                setStatus(ThingStatus.OFFLINE);\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        modbusDataCallback.removeDataListener(this);\n-        ModbusCommunicationInterface localCom = modbusCom;\n-        if (localCom != null) {\n-            PollTask localInfoPoller = infoPoller;\n-            if (localInfoPoller != null) {\n-                localCom.unregisterRegularPoll(localInfoPoller);\n-            }\n-            PollTask localDataPoller = dataPoller;\n-            if (localDataPoller != null) {\n-                localCom.unregisterRegularPoll(localDataPoller);\n-            }\n-        }\n-    }\n-\n-    private boolean checkConfig(@Nullable E3DCDeviceConfiguration c) {\n-        if (c != null) {\n-            if (c.port > 1) {\n-                if (c.refresh < 1) {\n-                    c.refresh = 2;\n-                }\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private void setStatus(ThingStatus status) {\n-        myStatus = status;\n-        updateStatus(myStatus);\n-    }\n-\n-    /**\n-     * Wallbox Settings can be changed with one Integer\n-     *\n-     * @param wallboxId needed to calculate right register\n-     * @param writeValue integer to be written\n-     */\n-    public void wallboxSet(int wallboxId, int writeValue) {\n-        E3DCDeviceConfiguration localConfig = config;\n-        ModbusCommunicationInterface localCom = modbusCom;\n-        if (localConfig != null && localCom != null) {\n-            ModbusRegisterArray regArray = new ModbusRegisterArray(writeValue);\n-            ModbusWriteRegisterRequestBlueprint writeBluePrint = new ModbusWriteRegisterRequestBlueprint(\n-                    localConfig.deviceid, WALLBOX_REG_START + wallboxId, regArray, false, 3);\n-            localCom.submitOneTimeWrite(writeBluePrint, this, this);\n-        }\n-    }\n-\n-    @Override\n-    public void dataAvailable(ModbusDataProvider provider) {\n-        if (myStatus != ThingStatus.ONLINE) {\n-            setStatus(ThingStatus.ONLINE);\n-        }\n-    }\n-\n-    public ModbusDataProvider getInfoDataProvider() {\n-        return modbusInfoCallback;\n-    }\n-\n-    public ModbusDataProvider getDataProvider() {\n-        return modbusDataCallback;\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusWriteResult result) {\n-        logger.debug(\"E3DC Modbus write response! {}\", result.getResponse().toString());\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusFailure<ModbusWriteRequestBlueprint> failure) {\n-        logger.warn(\"E3DC Modbus write error! {}\", failure.getRequest().toString());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMzM1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r461023351", "bodyText": "errors just logged -- would you not want to change thing status?", "author": "ssalonen", "createdAt": "2020-07-27T16:41:35Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.modbus;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.e3dc.internal.dto.EmergencyBlock;\n+import org.openhab.binding.e3dc.internal.dto.InfoBlock;\n+import org.openhab.binding.e3dc.internal.dto.PowerBlock;\n+import org.openhab.binding.e3dc.internal.dto.StringBlock;\n+import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ModbusCallback extends ModbusDataProvider\n+        implements ModbusReadCallback, ModbusFailureCallback<ModbusReadRequestBlueprint> {\n+    private final Logger logger = LoggerFactory.getLogger(ModbusCallback.class);\n+    private DataType callbackType;\n+    private byte[] bArray;\n+    private int size;\n+    private int counter = 0;\n+    private long maxDuration = Long.MIN_VALUE;\n+    private long minDuration = Long.MAX_VALUE;\n+    private long avgDuration = 0;\n+\n+    public ModbusCallback(DataType type) {\n+        callbackType = type;\n+        if (type.equals(DataType.INFO)) {\n+            size = INFO_REG_SIZE * 2;\n+            bArray = new byte[size];\n+        } else {\n+            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n+            bArray = new byte[size];\n+        }\n+    }\n+\n+    @Override\n+    public void handle(AsyncModbusReadResult result) {\n+        byte[] newArray = new byte[size];\n+        long startTime = System.currentTimeMillis();\n+        Optional<ModbusRegisterArray> opt = result.getRegisters();\n+        ModbusRegisterArray registers = opt.get();\n+        Iterator<ModbusRegister> iter = registers.iterator();\n+        int i = 0;\n+        while (iter.hasNext()) {\n+            ModbusRegister reg = iter.next();\n+            System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n+            i += 2;\n+        }\n+        setArray(newArray);\n+\n+        long duration = System.currentTimeMillis() - startTime;\n+        avgDuration += duration;\n+        minDuration = Math.min(minDuration, duration);\n+        maxDuration = Math.max(maxDuration, duration);\n+        counter++;\n+        if (counter % 100 == 0) {\n+            logger.debug(\"Min {} Max {} Avg {}\", minDuration, maxDuration, avgDuration / 30);\n+            avgDuration = 0;\n+            minDuration = Long.MAX_VALUE;\n+            maxDuration = Long.MIN_VALUE;\n+        }\n+        // DataConverter.logArray(newArray);\n+    }\n+\n+    @Override\n+    public void handle(AsyncModbusFailure<ModbusReadRequestBlueprint> failure) {", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMTM4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464121387", "bodyText": "Obsolete due to change towards Modbus binding", "author": "weymann", "createdAt": "2020-08-02T20:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMzM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java\ndeleted file mode 100644\nindex 46da43d8a9..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java\n+++ /dev/null\n\n@@ -1,142 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.modbus;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.Optional;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.openhab.binding.e3dc.internal.dto.EmergencyBlock;\n-import org.openhab.binding.e3dc.internal.dto.InfoBlock;\n-import org.openhab.binding.e3dc.internal.dto.PowerBlock;\n-import org.openhab.binding.e3dc.internal.dto.StringBlock;\n-import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.io.transport.modbus.AsyncModbusFailure;\n-import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n-import org.openhab.io.transport.modbus.ModbusFailureCallback;\n-import org.openhab.io.transport.modbus.ModbusReadCallback;\n-import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusRegister;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class ModbusCallback extends ModbusDataProvider\n-        implements ModbusReadCallback, ModbusFailureCallback<ModbusReadRequestBlueprint> {\n-    private final Logger logger = LoggerFactory.getLogger(ModbusCallback.class);\n-    private DataType callbackType;\n-    private byte[] bArray;\n-    private int size;\n-    private int counter = 0;\n-    private long maxDuration = Long.MIN_VALUE;\n-    private long minDuration = Long.MAX_VALUE;\n-    private long avgDuration = 0;\n-\n-    public ModbusCallback(DataType type) {\n-        callbackType = type;\n-        if (type.equals(DataType.INFO)) {\n-            size = INFO_REG_SIZE * 2;\n-            bArray = new byte[size];\n-        } else {\n-            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n-            bArray = new byte[size];\n-        }\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusReadResult result) {\n-        byte[] newArray = new byte[size];\n-        long startTime = System.currentTimeMillis();\n-        Optional<ModbusRegisterArray> opt = result.getRegisters();\n-        ModbusRegisterArray registers = opt.get();\n-        Iterator<ModbusRegister> iter = registers.iterator();\n-        int i = 0;\n-        while (iter.hasNext()) {\n-            ModbusRegister reg = iter.next();\n-            System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n-            i += 2;\n-        }\n-        setArray(newArray);\n-\n-        long duration = System.currentTimeMillis() - startTime;\n-        avgDuration += duration;\n-        minDuration = Math.min(minDuration, duration);\n-        maxDuration = Math.max(maxDuration, duration);\n-        counter++;\n-        if (counter % 100 == 0) {\n-            logger.debug(\"Min {} Max {} Avg {}\", minDuration, maxDuration, avgDuration / 30);\n-            avgDuration = 0;\n-            minDuration = Long.MAX_VALUE;\n-            maxDuration = Long.MIN_VALUE;\n-        }\n-        // DataConverter.logArray(newArray);\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusFailure<ModbusReadRequestBlueprint> failure) {\n-        logger.warn(\"E3DC Modbus {} Callback error! {}\", callbackType, failure.getRequest().toString());\n-    }\n-\n-    public synchronized void setArray(byte[] b) {\n-        if (b.length != size) {\n-            logger.warn(\"Wrong byte size received. Should be {} but is {}. Data maybe corrupted!\", size, b.length);\n-        }\n-        bArray = b.clone();\n-        super.informAllListeners();\n-    }\n-\n-    @Override\n-    public @Nullable Data getData(DataType type) {\n-        synchronized (bArray) {\n-            if (type.equals(DataType.INFO) && callbackType.equals(DataType.INFO)) {\n-                return new InfoBlock(Arrays.copyOfRange(bArray, INFO_REG_START, INFO_REG_SIZE * 2));\n-            } else if (type.equals(DataType.POWER) && callbackType.equals(DataType.DATA)) {\n-                int start = (POWER_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + POWER_REG_SIZE * 2;\n-                return new PowerBlock(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.EMERGENCY) && callbackType.equals(DataType.DATA)) {\n-                int start = (EMS_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + EMS_REG_SIZE * 2;\n-                return new EmergencyBlock(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.WALLBOX) && callbackType.equals(DataType.DATA)) {\n-                int start = (WALLBOX_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + WALLBOX_REG_SIZE * 2;\n-                return new WallboxArray(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.STRINGS) && callbackType.equals(DataType.DATA)) {\n-                int start = (STRINGS_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + STRINGS_REG_SIZE * 2;\n-                return new StringBlock(Arrays.copyOfRange(bArray, start, end));\n-            }\n-        }\n-        logger.warn(\"Wrong Block requested. Request is {} but type is {}\", type, callbackType);\n-        return null;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(this.getClass().getName()).append(\":\").append(callbackType);\n-        return sb.toString();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyNjA3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r461026079", "bodyText": "I am not sure when this callback is registered and what type of requests but opt.ifPresent(...) might be preferred to be on the safe side? (see e.g. sunspec: https://github.com/openhab/openhab-addons/blob/2.5.x/bundles/org.openhab.binding.modbus.sunspec/src/main/java/org/openhab/binding/modbus/sunspec/internal/handler/AbstractSunSpecHandler.java#L337)\nNon-register payload (e.g. coil data) will now crash with Optional.get since the Optional will be empty.", "author": "ssalonen", "createdAt": "2020-07-27T16:45:51Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.modbus;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.e3dc.internal.dto.EmergencyBlock;\n+import org.openhab.binding.e3dc.internal.dto.InfoBlock;\n+import org.openhab.binding.e3dc.internal.dto.PowerBlock;\n+import org.openhab.binding.e3dc.internal.dto.StringBlock;\n+import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ModbusCallback extends ModbusDataProvider\n+        implements ModbusReadCallback, ModbusFailureCallback<ModbusReadRequestBlueprint> {\n+    private final Logger logger = LoggerFactory.getLogger(ModbusCallback.class);\n+    private DataType callbackType;\n+    private byte[] bArray;\n+    private int size;\n+    private int counter = 0;\n+    private long maxDuration = Long.MIN_VALUE;\n+    private long minDuration = Long.MAX_VALUE;\n+    private long avgDuration = 0;\n+\n+    public ModbusCallback(DataType type) {\n+        callbackType = type;\n+        if (type.equals(DataType.INFO)) {\n+            size = INFO_REG_SIZE * 2;\n+            bArray = new byte[size];\n+        } else {\n+            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n+            bArray = new byte[size];\n+        }\n+    }\n+\n+    @Override\n+    public void handle(AsyncModbusReadResult result) {\n+        byte[] newArray = new byte[size];\n+        long startTime = System.currentTimeMillis();\n+        Optional<ModbusRegisterArray> opt = result.getRegisters();\n+        ModbusRegisterArray registers = opt.get();", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMTg0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464121840", "bodyText": "Reworked due to change towards Modbus binding", "author": "weymann", "createdAt": "2020-08-02T20:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyNjA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java\ndeleted file mode 100644\nindex 46da43d8a9..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java\n+++ /dev/null\n\n@@ -1,142 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.modbus;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.Optional;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.openhab.binding.e3dc.internal.dto.EmergencyBlock;\n-import org.openhab.binding.e3dc.internal.dto.InfoBlock;\n-import org.openhab.binding.e3dc.internal.dto.PowerBlock;\n-import org.openhab.binding.e3dc.internal.dto.StringBlock;\n-import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.io.transport.modbus.AsyncModbusFailure;\n-import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n-import org.openhab.io.transport.modbus.ModbusFailureCallback;\n-import org.openhab.io.transport.modbus.ModbusReadCallback;\n-import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusRegister;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class ModbusCallback extends ModbusDataProvider\n-        implements ModbusReadCallback, ModbusFailureCallback<ModbusReadRequestBlueprint> {\n-    private final Logger logger = LoggerFactory.getLogger(ModbusCallback.class);\n-    private DataType callbackType;\n-    private byte[] bArray;\n-    private int size;\n-    private int counter = 0;\n-    private long maxDuration = Long.MIN_VALUE;\n-    private long minDuration = Long.MAX_VALUE;\n-    private long avgDuration = 0;\n-\n-    public ModbusCallback(DataType type) {\n-        callbackType = type;\n-        if (type.equals(DataType.INFO)) {\n-            size = INFO_REG_SIZE * 2;\n-            bArray = new byte[size];\n-        } else {\n-            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n-            bArray = new byte[size];\n-        }\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusReadResult result) {\n-        byte[] newArray = new byte[size];\n-        long startTime = System.currentTimeMillis();\n-        Optional<ModbusRegisterArray> opt = result.getRegisters();\n-        ModbusRegisterArray registers = opt.get();\n-        Iterator<ModbusRegister> iter = registers.iterator();\n-        int i = 0;\n-        while (iter.hasNext()) {\n-            ModbusRegister reg = iter.next();\n-            System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n-            i += 2;\n-        }\n-        setArray(newArray);\n-\n-        long duration = System.currentTimeMillis() - startTime;\n-        avgDuration += duration;\n-        minDuration = Math.min(minDuration, duration);\n-        maxDuration = Math.max(maxDuration, duration);\n-        counter++;\n-        if (counter % 100 == 0) {\n-            logger.debug(\"Min {} Max {} Avg {}\", minDuration, maxDuration, avgDuration / 30);\n-            avgDuration = 0;\n-            minDuration = Long.MAX_VALUE;\n-            maxDuration = Long.MIN_VALUE;\n-        }\n-        // DataConverter.logArray(newArray);\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusFailure<ModbusReadRequestBlueprint> failure) {\n-        logger.warn(\"E3DC Modbus {} Callback error! {}\", callbackType, failure.getRequest().toString());\n-    }\n-\n-    public synchronized void setArray(byte[] b) {\n-        if (b.length != size) {\n-            logger.warn(\"Wrong byte size received. Should be {} but is {}. Data maybe corrupted!\", size, b.length);\n-        }\n-        bArray = b.clone();\n-        super.informAllListeners();\n-    }\n-\n-    @Override\n-    public @Nullable Data getData(DataType type) {\n-        synchronized (bArray) {\n-            if (type.equals(DataType.INFO) && callbackType.equals(DataType.INFO)) {\n-                return new InfoBlock(Arrays.copyOfRange(bArray, INFO_REG_START, INFO_REG_SIZE * 2));\n-            } else if (type.equals(DataType.POWER) && callbackType.equals(DataType.DATA)) {\n-                int start = (POWER_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + POWER_REG_SIZE * 2;\n-                return new PowerBlock(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.EMERGENCY) && callbackType.equals(DataType.DATA)) {\n-                int start = (EMS_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + EMS_REG_SIZE * 2;\n-                return new EmergencyBlock(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.WALLBOX) && callbackType.equals(DataType.DATA)) {\n-                int start = (WALLBOX_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + WALLBOX_REG_SIZE * 2;\n-                return new WallboxArray(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.STRINGS) && callbackType.equals(DataType.DATA)) {\n-                int start = (STRINGS_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + STRINGS_REG_SIZE * 2;\n-                return new StringBlock(Arrays.copyOfRange(bArray, start, end));\n-            }\n-        }\n-        logger.warn(\"Wrong Block requested. Request is {} but type is {}\", type, callbackType);\n-        return null;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(this.getClass().getName()).append(\":\").append(callbackType);\n-        return sb.toString();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyOTIxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r461029219", "bodyText": "average calculated wrong? Should divide by 100?", "author": "ssalonen", "createdAt": "2020-07-27T16:50:51Z", "path": "bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.e3dc.internal.modbus;\n+\n+import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.e3dc.internal.dto.EmergencyBlock;\n+import org.openhab.binding.e3dc.internal.dto.InfoBlock;\n+import org.openhab.binding.e3dc.internal.dto.PowerBlock;\n+import org.openhab.binding.e3dc.internal.dto.StringBlock;\n+import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ModbusCallback extends ModbusDataProvider\n+        implements ModbusReadCallback, ModbusFailureCallback<ModbusReadRequestBlueprint> {\n+    private final Logger logger = LoggerFactory.getLogger(ModbusCallback.class);\n+    private DataType callbackType;\n+    private byte[] bArray;\n+    private int size;\n+    private int counter = 0;\n+    private long maxDuration = Long.MIN_VALUE;\n+    private long minDuration = Long.MAX_VALUE;\n+    private long avgDuration = 0;\n+\n+    public ModbusCallback(DataType type) {\n+        callbackType = type;\n+        if (type.equals(DataType.INFO)) {\n+            size = INFO_REG_SIZE * 2;\n+            bArray = new byte[size];\n+        } else {\n+            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n+            bArray = new byte[size];\n+        }\n+    }\n+\n+    @Override\n+    public void handle(AsyncModbusReadResult result) {\n+        byte[] newArray = new byte[size];\n+        long startTime = System.currentTimeMillis();\n+        Optional<ModbusRegisterArray> opt = result.getRegisters();\n+        ModbusRegisterArray registers = opt.get();\n+        Iterator<ModbusRegister> iter = registers.iterator();\n+        int i = 0;\n+        while (iter.hasNext()) {\n+            ModbusRegister reg = iter.next();\n+            System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n+            i += 2;\n+        }\n+        setArray(newArray);\n+\n+        long duration = System.currentTimeMillis() - startTime;\n+        avgDuration += duration;\n+        minDuration = Math.min(minDuration, duration);\n+        maxDuration = Math.max(maxDuration, duration);\n+        counter++;\n+        if (counter % 100 == 0) {\n+            logger.debug(\"Min {} Max {} Avg {}\", minDuration, maxDuration, avgDuration / 30);", "originalCommit": "b02580340ff03a578347972283ec4db08858f86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMTY3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r464121676", "bodyText": "Sure, values changed while measuring and I forgot to update both values", "author": "weymann", "createdAt": "2020-08-02T20:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyOTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "40540141677d2a0b306221b54d6b07d44f4ac967", "chunk": "diff --git a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java b/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java\ndeleted file mode 100644\nindex 46da43d8a9..0000000000\n--- a/bundles/org.openhab.binding.e3dc/src/main/java/org/openhab/binding/e3dc/internal/modbus/ModbusCallback.java\n+++ /dev/null\n\n@@ -1,142 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.e3dc.internal.modbus;\n-\n-import static org.openhab.binding.e3dc.internal.modbus.E3DCModbusConstans.*;\n-\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.Optional;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.openhab.binding.e3dc.internal.dto.EmergencyBlock;\n-import org.openhab.binding.e3dc.internal.dto.InfoBlock;\n-import org.openhab.binding.e3dc.internal.dto.PowerBlock;\n-import org.openhab.binding.e3dc.internal.dto.StringBlock;\n-import org.openhab.binding.e3dc.internal.dto.WallboxArray;\n-import org.openhab.binding.e3dc.internal.modbus.Data.DataType;\n-import org.openhab.io.transport.modbus.AsyncModbusFailure;\n-import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n-import org.openhab.io.transport.modbus.ModbusFailureCallback;\n-import org.openhab.io.transport.modbus.ModbusReadCallback;\n-import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n-import org.openhab.io.transport.modbus.ModbusRegister;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n- *\n- * @author Bernd Weymann - Initial contribution\n- */\n-@NonNullByDefault\n-public class ModbusCallback extends ModbusDataProvider\n-        implements ModbusReadCallback, ModbusFailureCallback<ModbusReadRequestBlueprint> {\n-    private final Logger logger = LoggerFactory.getLogger(ModbusCallback.class);\n-    private DataType callbackType;\n-    private byte[] bArray;\n-    private int size;\n-    private int counter = 0;\n-    private long maxDuration = Long.MIN_VALUE;\n-    private long minDuration = Long.MAX_VALUE;\n-    private long avgDuration = 0;\n-\n-    public ModbusCallback(DataType type) {\n-        callbackType = type;\n-        if (type.equals(DataType.INFO)) {\n-            size = INFO_REG_SIZE * 2;\n-            bArray = new byte[size];\n-        } else {\n-            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n-            bArray = new byte[size];\n-        }\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusReadResult result) {\n-        byte[] newArray = new byte[size];\n-        long startTime = System.currentTimeMillis();\n-        Optional<ModbusRegisterArray> opt = result.getRegisters();\n-        ModbusRegisterArray registers = opt.get();\n-        Iterator<ModbusRegister> iter = registers.iterator();\n-        int i = 0;\n-        while (iter.hasNext()) {\n-            ModbusRegister reg = iter.next();\n-            System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n-            i += 2;\n-        }\n-        setArray(newArray);\n-\n-        long duration = System.currentTimeMillis() - startTime;\n-        avgDuration += duration;\n-        minDuration = Math.min(minDuration, duration);\n-        maxDuration = Math.max(maxDuration, duration);\n-        counter++;\n-        if (counter % 100 == 0) {\n-            logger.debug(\"Min {} Max {} Avg {}\", minDuration, maxDuration, avgDuration / 30);\n-            avgDuration = 0;\n-            minDuration = Long.MAX_VALUE;\n-            maxDuration = Long.MIN_VALUE;\n-        }\n-        // DataConverter.logArray(newArray);\n-    }\n-\n-    @Override\n-    public void handle(AsyncModbusFailure<ModbusReadRequestBlueprint> failure) {\n-        logger.warn(\"E3DC Modbus {} Callback error! {}\", callbackType, failure.getRequest().toString());\n-    }\n-\n-    public synchronized void setArray(byte[] b) {\n-        if (b.length != size) {\n-            logger.warn(\"Wrong byte size received. Should be {} but is {}. Data maybe corrupted!\", size, b.length);\n-        }\n-        bArray = b.clone();\n-        super.informAllListeners();\n-    }\n-\n-    @Override\n-    public @Nullable Data getData(DataType type) {\n-        synchronized (bArray) {\n-            if (type.equals(DataType.INFO) && callbackType.equals(DataType.INFO)) {\n-                return new InfoBlock(Arrays.copyOfRange(bArray, INFO_REG_START, INFO_REG_SIZE * 2));\n-            } else if (type.equals(DataType.POWER) && callbackType.equals(DataType.DATA)) {\n-                int start = (POWER_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + POWER_REG_SIZE * 2;\n-                return new PowerBlock(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.EMERGENCY) && callbackType.equals(DataType.DATA)) {\n-                int start = (EMS_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + EMS_REG_SIZE * 2;\n-                return new EmergencyBlock(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.WALLBOX) && callbackType.equals(DataType.DATA)) {\n-                int start = (WALLBOX_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + WALLBOX_REG_SIZE * 2;\n-                return new WallboxArray(Arrays.copyOfRange(bArray, start, end));\n-            } else if (type.equals(DataType.STRINGS) && callbackType.equals(DataType.DATA)) {\n-                int start = (STRINGS_REG_START - INFO_REG_SIZE) * 2;\n-                int end = start + STRINGS_REG_SIZE * 2;\n-                return new StringBlock(Arrays.copyOfRange(bArray, start, end));\n-            }\n-        }\n-        logger.warn(\"Wrong Block requested. Request is {} but type is {}\", type, callbackType);\n-        return null;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(this.getClass().getName()).append(\":\").append(callbackType);\n-        return sb.toString();\n-    }\n-}\n"}}, {"oid": "40540141677d2a0b306221b54d6b07d44f4ac967", "url": "https://github.com/openhab/openhab-addons/commit/40540141677d2a0b306221b54d6b07d44f4ac967", "message": "Initial commit\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:32Z", "type": "commit"}, {"oid": "2d74ef4468b72dcac8ac5af038a3e7a31166d6da", "url": "https://github.com/openhab/openhab-addons/commit/2d74ef4468b72dcac8ac5af038a3e7a31166d6da", "message": "Identification Block\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:32Z", "type": "commit"}, {"oid": "c951fd76745b2a7a5e301933db5fa8727199c88c", "url": "https://github.com/openhab/openhab-addons/commit/c951fd76745b2a7a5e301933db5fa8727199c88c", "message": "Add modbus callback\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:32Z", "type": "commit"}, {"oid": "1fb6d038fc4183616be9256431b5e0f944910268", "url": "https://github.com/openhab/openhab-addons/commit/1fb6d038fc4183616be9256431b5e0f944910268", "message": "data handler withh callack\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:33Z", "type": "commit"}, {"oid": "ca45f263f7e29b54772090b6ae86a0dc259b1d47", "url": "https://github.com/openhab/openhab-addons/commit/ca45f263f7e29b54772090b6ae86a0dc259b1d47", "message": "reduce thing-types.xml to minimum\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:33Z", "type": "commit"}, {"oid": "3b11d280272c508a9ca954a995e5125ad56a7f74", "url": "https://github.com/openhab/openhab-addons/commit/3b11d280272c508a9ca954a995e5125ad56a7f74", "message": "add bridge implementation\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:34Z", "type": "commit"}, {"oid": "37e1dd87c4a93cfb43ae6a5600bc142a29718492", "url": "https://github.com/openhab/openhab-addons/commit/37e1dd87c4a93cfb43ae6a5600bc142a29718492", "message": "PowerBlock added\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:34Z", "type": "commit"}, {"oid": "4d76b37fcef1e6309cab7a38fcd8736d4f6caf94", "url": "https://github.com/openhab/openhab-addons/commit/4d76b37fcef1e6309cab7a38fcd8736d4f6caf94", "message": "added String details\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:34Z", "type": "commit"}, {"oid": "13ed9ae1c5df8a6a216f7cc06f26ad54a6ae8a94", "url": "https://github.com/openhab/openhab-addons/commit/13ed9ae1c5df8a6a216f7cc06f26ad54a6ae8a94", "message": "emergency block added\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:34Z", "type": "commit"}, {"oid": "0124c5088b4de5841cf57787cf1e4faca64df9ed", "url": "https://github.com/openhab/openhab-addons/commit/0124c5088b4de5841cf57787cf1e4faca64df9ed", "message": "added wallbox block\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:35Z", "type": "commit"}, {"oid": "e1acf9b9b60528f84626a81064d31f8172189d94", "url": "https://github.com/openhab/openhab-addons/commit/e1acf9b9b60528f84626a81064d31f8172189d94", "message": "split into info and data poller\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:35Z", "type": "commit"}, {"oid": "00db7ebbbd08978a92a29badcb4d49c201c305aa", "url": "https://github.com/openhab/openhab-addons/commit/00db7ebbbd08978a92a29badcb4d49c201c305aa", "message": "add more unit tests\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:36Z", "type": "commit"}, {"oid": "4b94047964fdcd299d34e3faeb9ef2a0c70374ca", "url": "https://github.com/openhab/openhab-addons/commit/4b94047964fdcd299d34e3faeb9ef2a0c70374ca", "message": "README.md initital version\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:36Z", "type": "commit"}, {"oid": "8d11851e9208da7f3876142f350039941c7ef664", "url": "https://github.com/openhab/openhab-addons/commit/8d11851e9208da7f3876142f350039941c7ef664", "message": "first description finished\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:36Z", "type": "commit"}, {"oid": "efed8b662ab0ccbfa6c1f33c0b96c4e8c7d8f30c", "url": "https://github.com/openhab/openhab-addons/commit/efed8b662ab0ccbfa6c1f33c0b96c4e8c7d8f30c", "message": "readme.md formatting corrections\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:36Z", "type": "commit"}, {"oid": "2e3e72671e0152ab3954ce5b4a11fe9563e35068", "url": "https://github.com/openhab/openhab-addons/commit/2e3e72671e0152ab3954ce5b4a11fe9563e35068", "message": "add link to e3dc modbus spec\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:37Z", "type": "commit"}, {"oid": "6a46de6aeb9f6ba15bc2525cd6e9ff7e1c9fa16a", "url": "https://github.com/openhab/openhab-addons/commit/6a46de6aeb9f6ba15bc2525cd6e9ff7e1c9fa16a", "message": "add link to e3dc modbus spec\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:37Z", "type": "commit"}, {"oid": "89d29aa1ae594fd2f32b78826b9bc4efb24eb535", "url": "https://github.com/openhab/openhab-addons/commit/89d29aa1ae594fd2f32b78826b9bc4efb24eb535", "message": "add link to e3dc modbus spec\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:37Z", "type": "commit"}, {"oid": "9be8c53b4ca7a10477b3f0085a9aed442c96815d", "url": "https://github.com/openhab/openhab-addons/commit/9be8c53b4ca7a10477b3f0085a9aed442c96815d", "message": "add link to e3dc modbus spec\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:37Z", "type": "commit"}, {"oid": "e1d9580478fa57cd7a574f1265aaebc225b39052", "url": "https://github.com/openhab/openhab-addons/commit/e1d9580478fa57cd7a574f1265aaebc225b39052", "message": "translation and small bugfixes\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:37Z", "type": "commit"}, {"oid": "f3b093a65a4c9ec9e9c31e6bca054d60d3b9e599", "url": "https://github.com/openhab/openhab-addons/commit/f3b093a65a4c9ec9e9c31e6bca054d60d3b9e599", "message": "Bugfix: WallboxControl\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:37Z", "type": "commit"}, {"oid": "7d0a22d5e29c1963563365d90ee8c7dcb681466f", "url": "https://github.com/openhab/openhab-addons/commit/7d0a22d5e29c1963563365d90ee8c7dcb681466f", "message": "readme.md\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:37Z", "type": "commit"}, {"oid": "85116aa83d029853e56fc5832d297f041e5a43ce", "url": "https://github.com/openhab/openhab-addons/commit/85116aa83d029853e56fc5832d297f041e5a43ce", "message": "readme.md\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:38Z", "type": "commit"}, {"oid": "c0b045f4b2dd9a7176d8fbd4cbdf45c75cfcd062", "url": "https://github.com/openhab/openhab-addons/commit/c0b045f4b2dd9a7176d8fbd4cbdf45c75cfcd062", "message": "readme.md\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:38Z", "type": "commit"}, {"oid": "ca42fda60568b51f52273d545bc1b7d63895d151", "url": "https://github.com/openhab/openhab-addons/commit/ca42fda60568b51f52273d545bc1b7d63895d151", "message": "readme.md\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:38Z", "type": "commit"}, {"oid": "80b3bd9d319df47621b2541e8bff0363e5ade2d4", "url": "https://github.com/openhab/openhab-addons/commit/80b3bd9d319df47621b2541e8bff0363e5ade2d4", "message": "add Infrastructure test\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:38Z", "type": "commit"}, {"oid": "9bb4bc3dff4bc3b361b1d65c94e7c342c28f7e96", "url": "https://github.com/openhab/openhab-addons/commit/9bb4bc3dff4bc3b361b1d65c94e7c342c28f7e96", "message": "add deviceid to config\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:38Z", "type": "commit"}, {"oid": "6cb16d1b6fe407a693c93ee73d45427ebd8a7b30", "url": "https://github.com/openhab/openhab-addons/commit/6cb16d1b6fe407a693c93ee73d45427ebd8a7b30", "message": "add codeowners entry\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:38Z", "type": "commit"}, {"oid": "e569ad919da0a0467e855a1f7eee3856033d25da", "url": "https://github.com/openhab/openhab-addons/commit/e569ad919da0a0467e855a1f7eee3856033d25da", "message": "moved modbus registers to constant plus refernce to E3DC Modbus spec\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:38Z", "type": "commit"}, {"oid": "fb1c875dde701e08388287e5d4b2dd0ad88a35f6", "url": "https://github.com/openhab/openhab-addons/commit/fb1c875dde701e08388287e5d4b2dd0ad88a35f6", "message": "added missing Wallbox Channels\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:39Z", "type": "commit"}, {"oid": "f65a06054d10acbce418df7570c0af9ddbfcf531", "url": "https://github.com/openhab/openhab-addons/commit/f65a06054d10acbce418df7570c0af9ddbfcf531", "message": "bugfix firmware channel\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:39Z", "type": "commit"}, {"oid": "1b480bd2536727e68e71f85c83e6fee76218f3ff", "url": "https://github.com/openhab/openhab-addons/commit/1b480bd2536727e68e71f85c83e6fee76218f3ff", "message": "move spec to non-distribute folder\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:41Z", "type": "commit"}, {"oid": "7dec66b8814cb7fbe00b15e76e56fbf28a024adc", "url": "https://github.com/openhab/openhab-addons/commit/7dec66b8814cb7fbe00b15e76e56fbf28a024adc", "message": "Image alignment\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:41Z", "type": "commit"}, {"oid": "bd9ed55b2e1746b1cb9c678033313474624e8bd9", "url": "https://github.com/openhab/openhab-addons/commit/bd9ed55b2e1746b1cb9c678033313474624e8bd9", "message": "remove unused screenshots\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:41Z", "type": "commit"}, {"oid": "f59f15bb7db9431aed91ea876ba969264422fa0d", "url": "https://github.com/openhab/openhab-addons/commit/f59f15bb7db9431aed91ea876ba969264422fa0d", "message": "Final readme.md adjustments\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:41Z", "type": "commit"}, {"oid": "23e7b50a14c339505287e7470aa05dd88454a978", "url": "https://github.com/openhab/openhab-addons/commit/23e7b50a14c339505287e7470aa05dd88454a978", "message": "adapt new to new Modbus Interface\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:41Z", "type": "commit"}, {"oid": "13b685917f1532473a545470349931b8c7d09bc7", "url": "https://github.com/openhab/openhab-addons/commit/13b685917f1532473a545470349931b8c7d09bc7", "message": "Fix mixup of Wallbox 3-phase and 1-phase loading\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:42Z", "type": "commit"}, {"oid": "47e6910e1d90799cb8aa0562101bcfb24def43bc", "url": "https://github.com/openhab/openhab-addons/commit/47e6910e1d90799cb8aa0562101bcfb24def43bc", "message": "Bugfix unit test\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:42Z", "type": "commit"}, {"oid": "98de03c24cdf6aafb8aed3e5bce85b5430842ea1", "url": "https://github.com/openhab/openhab-addons/commit/98de03c24cdf6aafb8aed3e5bce85b5430842ea1", "message": "preparation for next development cycle\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:42Z", "type": "commit"}, {"oid": "d16b7267de69e9c133c66568d19945eaf437ab88", "url": "https://github.com/openhab/openhab-addons/commit/d16b7267de69e9c133c66568d19945eaf437ab88", "message": "Remove nested Frames from sitemap\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:42Z", "type": "commit"}, {"oid": "231802c5421d28220101eeb14846cc3083ce9316", "url": "https://github.com/openhab/openhab-addons/commit/231802c5421d28220101eeb14846cc3083ce9316", "message": "e3dc modbus binding\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:42Z", "type": "commit"}, {"oid": "6845b5a6e4f5eb5ead486b4d626e87e15da39a65", "url": "https://github.com/openhab/openhab-addons/commit/6845b5a6e4f5eb5ead486b4d626e87e15da39a65", "message": "updated Thing status handling\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:43Z", "type": "commit"}, {"oid": "51176f1d4941d0cb29a0ebaf4acada495e2ea010", "url": "https://github.com/openhab/openhab-addons/commit/51176f1d4941d0cb29a0ebaf4acada495e2ea010", "message": "cleanup unit tests\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:43Z", "type": "commit"}, {"oid": "c81b19399c5f282406bcf594fd96286b02f08fca", "url": "https://github.com/openhab/openhab-addons/commit/c81b19399c5f282406bcf594fd96286b02f08fca", "message": "work on review comments - 1\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-01T22:24:43Z", "type": "commit"}, {"oid": "dd2a40de0147af23116e957c878046aafb5bb61e", "url": "https://github.com/openhab/openhab-addons/commit/dd2a40de0147af23116e957c878046aafb5bb61e", "message": "review comments part 2\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-02T17:43:39Z", "type": "commit"}, {"oid": "6d7b28be0059b34949ba81f6896b056650f988ef", "url": "https://github.com/openhab/openhab-addons/commit/6d7b28be0059b34949ba81f6896b056650f988ef", "message": "de translations\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-02T19:53:31Z", "type": "commit"}, {"oid": "72c79b099212206799874255ff7decafe756bd41", "url": "https://github.com/openhab/openhab-addons/commit/72c79b099212206799874255ff7decafe756bd41", "message": "utf8 translations\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-02T20:25:55Z", "type": "commit"}, {"oid": "8e0d23c40ebdfef9d20270c95820ee4230e36fe0", "url": "https://github.com/openhab/openhab-addons/commit/8e0d23c40ebdfef9d20270c95820ee4230e36fe0", "message": "translation labels begin upper case\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-02T20:57:15Z", "type": "commit"}, {"oid": "72e6a4a145ba756ded1e4965e25532bd85dfbafd", "url": "https://github.com/openhab/openhab-addons/commit/72e6a4a145ba756ded1e4965e25532bd85dfbafd", "message": "cross check de/en translations with Specification\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-03T09:53:38Z", "type": "commit"}, {"oid": "9b8ee0d6c6497e7d58ae57aec4bfb419d34b6484", "url": "https://github.com/openhab/openhab-addons/commit/9b8ee0d6c6497e7d58ae57aec4bfb419d34b6484", "message": "Bugfix: Spec states Ampere values needs a factor 0.01 correction\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-03T11:39:17Z", "type": "commit"}, {"oid": "f125adad66872a4ade00bed195986ef3b5dfe38f", "url": "https://github.com/openhab/openhab-addons/commit/f125adad66872a4ade00bed195986ef3b5dfe38f", "message": "Unit test for Handler Status updates\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-03T13:52:08Z", "type": "commit"}, {"oid": "d65cbdaefc9885ebbc9124492603565beadd5024", "url": "https://github.com/openhab/openhab-addons/commit/d65cbdaefc9885ebbc9124492603565beadd5024", "message": "Remove JUnit Test compiler warnings\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-03T14:11:37Z", "type": "commit"}, {"oid": "f8c3298d0bd95bee372aeb762e3226161fc232d3", "url": "https://github.com/openhab/openhab-addons/commit/f8c3298d0bd95bee372aeb762e3226161fc232d3", "message": "cross check readme.md and xml descriptions\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-03T14:28:43Z", "type": "commit"}, {"oid": "4b970aff3e33a92a3110b9e78c251a278220bb3d", "url": "https://github.com/openhab/openhab-addons/commit/4b970aff3e33a92a3110b9e78c251a278220bb3d", "message": "remove battery loading vs. charging inconsitencies\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-03T15:32:24Z", "type": "commit"}, {"oid": "3975c8f99cc26d23af2cd3e917fb84c421e6696c", "url": "https://github.com/openhab/openhab-addons/commit/3975c8f99cc26d23af2cd3e917fb84c421e6696c", "message": "ensure double values with 2 decimal places\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-03T15:46:40Z", "type": "commit"}, {"oid": "3975c8f99cc26d23af2cd3e917fb84c421e6696c", "url": "https://github.com/openhab/openhab-addons/commit/3975c8f99cc26d23af2cd3e917fb84c421e6696c", "message": "ensure double values with 2 decimal places\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-03T15:46:40Z", "type": "forcePushed"}, {"oid": "92ec14f36f40d5773867ddb8777f00a2e0a4340c", "url": "https://github.com/openhab/openhab-addons/commit/92ec14f36f40d5773867ddb8777f00a2e0a4340c", "message": "fix feature.xml\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-03T17:34:23Z", "type": "commit"}, {"oid": "af77ab05295023caba73cfd4be4f2a1582d14d38", "url": "https://github.com/openhab/openhab-addons/commit/af77ab05295023caba73cfd4be4f2a1582d14d38", "message": "feature.xml patch\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-04T14:59:02Z", "type": "commit"}, {"oid": "729cb879cf11dcb20f482af48a18a36f93916374", "url": "https://github.com/openhab/openhab-addons/commit/729cb879cf11dcb20f482af48a18a36f93916374", "message": "revert feature.xml patch\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-04T15:04:23Z", "type": "commit"}, {"oid": "e3090c03a460c45a2cb2693108b9c2bce4b99d4f", "url": "https://github.com/openhab/openhab-addons/commit/e3090c03a460c45a2cb2693108b9c2bce4b99d4f", "message": "change charset import\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-04T17:23:22Z", "type": "commit"}, {"oid": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "url": "https://github.com/openhab/openhab-addons/commit/cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "message": "change charset import\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-04T17:25:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3NDg5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465574897", "bodyText": "Typo", "author": "ssalonen", "createdAt": "2020-08-05T08:52:15Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCBindingConstants.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.openhab.binding.modbus.ModbusBindingConstants;\n+\n+/**\n+ * The {@link E3DCBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCBindingConstants {\n+\n+    private static final String BINDING_ID = ModbusBindingConstants.BINDING_ID;\n+\n+    // Suppoerted Thing Types", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgzNjM1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465836355", "bodyText": "Resolved", "author": "weymann", "createdAt": "2020-08-05T16:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3NDg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCBindingConstants.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCBindingConstants.java\nindex 7d013e9170..3a464f3afd 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCBindingConstants.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCBindingConstants.java\n\n@@ -27,14 +27,14 @@ public class E3DCBindingConstants {\n \n     private static final String BINDING_ID = ModbusBindingConstants.BINDING_ID;\n \n-    // Suppoerted Thing Types\n+    // Supported Thing Types\n     public static final ThingTypeUID THING_TYPE_E3DC = new ThingTypeUID(BINDING_ID, \"e3dc\");\n     public static final ThingTypeUID THING_TYPE_E3DC_WALLBOX = new ThingTypeUID(BINDING_ID, \"e3dc-wallbox\");\n \n     // Channels for Info Block\n     public static final String MODBUS_ID_CHANNEL = \"modbus-id\";\n     public static final String MODBUS_FIRMWARE_CHANNEL = \"modbus-firmware\";\n-    public static final String SUPPORTED_REGSITERS_CHANNEL = \"supported-registers\";\n+    public static final String SUPPORTED_REGISTERS_CHANNEL = \"supported-registers\";\n     public static final String MANUFACTURER_NAME_CHANNEL = \"manufacturer-name\";\n     public static final String MODEL_NAME_CHANNEL = \"model-name\";\n     public static final String SERIAL_NUMBER_CHANNEL = \"serial-number\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3ODQyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465578427", "bodyText": "Typo in constant name", "author": "ssalonen", "createdAt": "2020-08-05T08:58:27Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCBindingConstants.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.openhab.binding.modbus.ModbusBindingConstants;\n+\n+/**\n+ * The {@link E3DCBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCBindingConstants {\n+\n+    private static final String BINDING_ID = ModbusBindingConstants.BINDING_ID;\n+\n+    // Suppoerted Thing Types\n+    public static final ThingTypeUID THING_TYPE_E3DC = new ThingTypeUID(BINDING_ID, \"e3dc\");\n+    public static final ThingTypeUID THING_TYPE_E3DC_WALLBOX = new ThingTypeUID(BINDING_ID, \"e3dc-wallbox\");\n+\n+    // Channels for Info Block\n+    public static final String MODBUS_ID_CHANNEL = \"modbus-id\";\n+    public static final String MODBUS_FIRMWARE_CHANNEL = \"modbus-firmware\";\n+    public static final String SUPPORTED_REGSITERS_CHANNEL = \"supported-registers\";\n+    public static final String MANUFACTURER_NAME_CHANNEL = \"manufacturer-name\";\n+    public static final String MODEL_NAME_CHANNEL = \"model-name\";\n+    public static final String SERIAL_NUMBER_CHANNEL = \"serial-number\";\n+    public static final String FIRMWARE_RELEASE_CHANNEL = \"firmware-release\";\n+\n+    // Channels for Power Block\n+    public static final String PV_POWER_SUPPLY_CHANNEL = \"pv-power-supply\";\n+    public static final String BATTERY_POWER_SUPPLY_CHANNEL = \"battery-power-supply\";\n+    public static final String BATTERY_POWER_CONSUMPTION = \"battery-power-consumption\";\n+    public static final String HOUSEHOLD_POWER_CONSUMPTION_CHANNEL = \"household-power-consumption\";\n+    public static final String GRID_POWER_CONSUMPTION_CHANNEL = \"grid-power-consumption\";\n+    public static final String GRID_POWER_SUPPLY_CHANNEL = \"grid-power-supply\";\n+    public static final String EXTERNAL_POWER_SUPPLY_CHANNEL = \"external-power-supply\";\n+    public static final String WALLBOX_POWER_CONSUMPTION_CHANNEL = \"wallbox-power-consumption\";\n+    public static final String WALLBOX_PV_POWER_CONSUMPTION_CHANNEL = \"wallbox-pv-power-consumption\";\n+    public static final String AUTARKY = \"autarky\";\n+    public static final String SELF_CONSUMPTION = \"self-consumption\";\n+    public static final String BATTERY_STATE_OF_CHARGE_CHANNEL = \"battery-soc\";\n+\n+    // Channels for Wallbox Block\n+    public static final String WB_AVAILABLE_CHANNEL = \"wb-available\";\n+    public static final String WB_SUNMODE_CHANNEL = \"wb-sunmode\";\n+    public static final String WB_CHARGING_ABORTED_CHANNEL = \"wb-charging-aborted\";\n+    public static final String WB_CHARGING_CHANNEL = \"wb-charging\";\n+    public static final String WB_JACK_LOCKED_CHANNEL = \"wb-jack-locked\";\n+    public static final String WB_JACK_PLUGGED_CHANNEL = \"wb-jack-plugged\";\n+    public static final String WB_SCHUKO_ON_CHANNEL = \"wb-schuko-on\";\n+    public static final String WB_SCHUKO_PLUGGED_CHANNEL = \"wb-schuko-plugged\";\n+    public static final String WB_SCHUKO_LOCKED_CHANNEL = \"wb-schuko-locked\";\n+    public static final String WB_SCHUKO_REALY_16A_CHANNEL = \"wb-schuko-relay-16a\";\n+    public static final String WB_REALY_16A_CHANNEL = \"wb-relay-16a\";", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0MjkxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465842919", "bodyText": "Fixed", "author": "weymann", "createdAt": "2020-08-05T16:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3ODQyNw=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCBindingConstants.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCBindingConstants.java\nindex 7d013e9170..3a464f3afd 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCBindingConstants.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCBindingConstants.java\n\n@@ -27,14 +27,14 @@ public class E3DCBindingConstants {\n \n     private static final String BINDING_ID = ModbusBindingConstants.BINDING_ID;\n \n-    // Suppoerted Thing Types\n+    // Supported Thing Types\n     public static final ThingTypeUID THING_TYPE_E3DC = new ThingTypeUID(BINDING_ID, \"e3dc\");\n     public static final ThingTypeUID THING_TYPE_E3DC_WALLBOX = new ThingTypeUID(BINDING_ID, \"e3dc-wallbox\");\n \n     // Channels for Info Block\n     public static final String MODBUS_ID_CHANNEL = \"modbus-id\";\n     public static final String MODBUS_FIRMWARE_CHANNEL = \"modbus-firmware\";\n-    public static final String SUPPORTED_REGSITERS_CHANNEL = \"supported-registers\";\n+    public static final String SUPPORTED_REGISTERS_CHANNEL = \"supported-registers\";\n     public static final String MANUFACTURER_NAME_CHANNEL = \"manufacturer-name\";\n     public static final String MODEL_NAME_CHANNEL = \"model-name\";\n     public static final String SERIAL_NUMBER_CHANNEL = \"serial-number\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3ODcwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465578708", "bodyText": "Interval", "author": "ssalonen", "createdAt": "2020-08-05T08:58:57Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCConfiguration.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link E3DCConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCConfiguration {\n+\n+    /**\n+     * Data refresh intervall", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0MzU4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465843585", "bodyText": "Fixed", "author": "weymann", "createdAt": "2020-08-05T16:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3ODcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCConfiguration.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCConfiguration.java\nindex 23fb766a01..32e55769fb 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCConfiguration.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCConfiguration.java\n\n@@ -23,7 +23,7 @@ import org.eclipse.jdt.annotation.NonNullByDefault;\n public class E3DCConfiguration {\n \n     /**\n-     * Data refresh intervall\n+     * Data refresh interval\n      */\n     public int refresh = 2000;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3OTA3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465579072", "bodyText": "Add NonnullByDefault", "author": "ssalonen", "createdAt": "2020-08-05T08:59:33Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.BitSet;\n+\n+/**\n+ * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class DataConverter {", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0MTA5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465941098", "bodyText": "fixed", "author": "weymann", "createdAt": "2020-08-05T19:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3OTA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\nindex a11faec44d..022791b188 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\n\n@@ -16,11 +16,14 @@ import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n import java.util.BitSet;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n  *\n  * @author Bernd Weymann - Initial contribution\n  */\n+@NonNullByDefault\n public class DataConverter {\n     private static final long MAX_INT32 = (long) Math.pow(2, Integer.SIZE);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MzMzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465583337", "bodyText": "NonnullByDefault", "author": "ssalonen", "createdAt": "2020-08-05T09:06:50Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/EmergencyBlock.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.nio.ByteBuffer;\n+import java.util.BitSet;\n+\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link EmergencyBlock} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class EmergencyBlock implements Data {", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0ODk2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465848966", "bodyText": "Hmm, curious. Normally during maven build this highlighted each time. Added all NoNullBy Default annotations in dto package.", "author": "weymann", "createdAt": "2020-08-05T16:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MzMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwNjAwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466206009", "bodyText": "Ah dto! Those can be without null annotations actually. They are not even checked in the static code analysis", "author": "ssalonen", "createdAt": "2020-08-06T07:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MzMzNw=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/EmergencyBlock.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/EmergencyBlock.java\nindex 02da179ad0..1983886deb 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/EmergencyBlock.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/EmergencyBlock.java\n\n@@ -17,6 +17,7 @@ import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans\n import java.nio.ByteBuffer;\n import java.util.BitSet;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.types.OnOffType;\n import org.eclipse.smarthome.core.library.types.StringType;\n import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MzUxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465583516", "bodyText": "NonnullByDefault", "author": "ssalonen", "createdAt": "2020-08-05T09:07:09Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/InfoBlock.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link InfoBlock} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class InfoBlock implements Data {", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0OTM5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465849394", "bodyText": "fixed", "author": "weymann", "createdAt": "2020-08-05T16:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MzUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/InfoBlock.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/InfoBlock.java\nindex fe2c531bad..0d03c3a5aa 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/InfoBlock.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/InfoBlock.java\n\n@@ -14,6 +14,7 @@ package org.openhab.binding.modbus.e3dc.internal.dto;\n \n import java.nio.ByteBuffer;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n import org.eclipse.smarthome.core.library.types.StringType;\n import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MzkxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465583916", "bodyText": "NonnullByDefault", "author": "ssalonen", "createdAt": "2020-08-05T09:07:52Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/PowerBlock.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import java.nio.ByteBuffer;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Power;\n+\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link PowerBlock} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class PowerBlock implements Data {", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0OTczMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465849731", "bodyText": "fixed", "author": "weymann", "createdAt": "2020-08-05T16:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MzkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/PowerBlock.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/PowerBlock.java\nindex 0ea0066331..d6d5f80ba4 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/PowerBlock.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/PowerBlock.java\n\n@@ -17,6 +17,7 @@ import java.nio.ByteBuffer;\n import javax.measure.quantity.Dimensionless;\n import javax.measure.quantity.Power;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.types.QuantityType;\n import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4NDIzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465584239", "bodyText": "NonnullByDefault", "author": "ssalonen", "createdAt": "2020-08-05T09:08:31Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/StringBlock.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import java.nio.ByteBuffer;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.ElectricPotential;\n+import javax.measure.quantity.Power;\n+\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link StringBlock} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class StringBlock implements Data {", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg1MDAzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465850031", "bodyText": "fixed", "author": "weymann", "createdAt": "2020-08-05T16:25:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4NDIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/StringBlock.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/StringBlock.java\nindex b5d3096656..b8c79c80a5 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/StringBlock.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/StringBlock.java\n\n@@ -18,6 +18,7 @@ import javax.measure.quantity.ElectricCurrent;\n import javax.measure.quantity.ElectricPotential;\n import javax.measure.quantity.Power;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.types.QuantityType;\n import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4NDQwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465584405", "bodyText": "NonnullByDefault", "author": "ssalonen", "createdAt": "2020-08-05T09:08:46Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/WallboxArray.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link WallboxArray} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class WallboxArray implements Data {", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg1MDQwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465850402", "bodyText": "fixed", "author": "weymann", "createdAt": "2020-08-05T16:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4NDQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/WallboxArray.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/WallboxArray.java\nindex 57bf989c62..f59bc008c8 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/WallboxArray.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/WallboxArray.java\n\n@@ -12,6 +12,9 @@\n  */\n package org.openhab.binding.modbus.e3dc.internal.dto;\n \n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4NDgwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465584806", "bodyText": "NonnullByDefault", "author": "ssalonen", "createdAt": "2020-08-05T09:09:28Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/WallboxBlock.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.BitSet;\n+\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link WallboxBlock} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class WallboxBlock implements Data {", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg1MDg2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465850861", "bodyText": "fixed", "author": "weymann", "createdAt": "2020-08-05T16:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4NDgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/WallboxBlock.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/WallboxBlock.java\nindex 9a8fb3c950..32abf47220 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/WallboxBlock.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/WallboxBlock.java\n\n@@ -16,6 +16,7 @@ import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans\n \n import java.util.BitSet;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.types.OnOffType;\n import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MDg1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465590851", "bodyText": "Small suggestion : utilize OptionalInt instead of the \"magic value\" -1", "author": "ssalonen", "createdAt": "2020-08-05T09:19:59Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.handler;\n+\n+import static org.openhab.binding.modbus.e3dc.internal.E3DCBindingConstants.*;\n+import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.BitSet;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.modbus.e3dc.internal.E3DCWallboxConfiguration;\n+import org.openhab.binding.modbus.e3dc.internal.dto.DataConverter;\n+import org.openhab.binding.modbus.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.modbus.e3dc.internal.dto.WallboxBlock;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Parser;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCWallboxThingHandler} Basic modbus connection towards the E3DC device\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCWallboxThingHandler extends BaseThingHandler {\n+    public enum ReadWriteSuccess {\n+        NOT_RECEIVED,\n+        SUCCESS,\n+        FAILED\n+    }\n+\n+    private static final String READ_WRITE_ERROR = \"Modbus Data Read/Write Error\";\n+    private static final String READ_ERROR = \"Modbus Read Error\";\n+    private static final String WRITE_ERROR = \"Modbus Write Error\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(E3DCWallboxThingHandler.class);\n+    private final Parser dataParser = new Parser(DataType.DATA);\n+    private ReadWriteSuccess dataRead = ReadWriteSuccess.NOT_RECEIVED;\n+    private ReadWriteSuccess dataWrite = ReadWriteSuccess.NOT_RECEIVED;\n+    private volatile BitSet currentBitSet = new BitSet(16);\n+    private @Nullable E3DCWallboxConfiguration config;\n+    private @Nullable E3DCThingHandler bridgeHandler;\n+\n+    public E3DCWallboxThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            config = getConfigAs(E3DCWallboxConfiguration.class);\n+            Bridge bridge = getBridge();\n+            if (bridge != null) {\n+                ThingHandler handler = bridge.getHandler();\n+                if (handler != null) {\n+                    bridgeHandler = ((E3DCThingHandler) handler);\n+                } else {\n+                    logger.warn(\"Thing Handler null\");\n+                }\n+            } else {\n+                logger.warn(\"Bridge null\");\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            int writeValue = 0;\n+            synchronized (this) {\n+                if (channelUID.getIdWithoutGroup().equals(WB_SUNMODE_CHANNEL)) {\n+                    currentBitSet.set(WB_SUNMODE_BIT, command.equals(OnOffType.ON));\n+                } else if (channelUID.getIdWithoutGroup().equals(WB_CHARGING_ABORTED_CHANNEL)) {\n+                    currentBitSet.set(WB_CHARGING_ABORTED_BIT, command.equals(OnOffType.ON));\n+                } else if (channelUID.getIdWithoutGroup().equals(WB_SCHUKO_ON_CHANNEL)) {\n+                    currentBitSet.set(WB_SCHUKO_ON_BIT, command.equals(OnOffType.ON));\n+                } else if (channelUID.getIdWithoutGroup().equals(WB_1PHASE_CHANNEL)) {\n+                    currentBitSet.set(WB_1PHASE_BIT, command.equals(OnOffType.ON));\n+                }\n+                writeValue = DataConverter.toInt(currentBitSet);\n+                logger.debug(\"Wallbox write {}\", writeValue);\n+            }\n+            int wallboxId = getWallboxId(config);\n+            if (wallboxId != -1) {\n+                wallboxSet(wallboxId, writeValue);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Wallbox Settings can be changed with one Integer\n+     *\n+     * @param wallboxId needed to calculate right register\n+     * @param writeValue integer to be written\n+     */\n+    public void wallboxSet(int wallboxId, int writeValue) {\n+        E3DCThingHandler localBridgeHandler = bridgeHandler;\n+        if (localBridgeHandler != null) {\n+            ModbusCommunicationInterface comms = localBridgeHandler.getComms();\n+            if (comms != null) {\n+                ModbusRegisterArray regArray = new ModbusRegisterArray(writeValue);\n+                ModbusWriteRegisterRequestBlueprint writeBluePrint = new ModbusWriteRegisterRequestBlueprint(\n+                        localBridgeHandler.getSlaveId(), WALLBOX_REG_START + wallboxId, regArray, false, 3);\n+                comms.submitOneTimeWrite(writeBluePrint, result -> {\n+                    if (dataWrite != ReadWriteSuccess.SUCCESS) {\n+                        dataWrite = ReadWriteSuccess.SUCCESS;\n+                        updateStatus();\n+                    }\n+                    logger.debug(\"E3DC Modbus write response! {}\", result.getResponse().toString());\n+                }, failure -> {\n+                    if (dataWrite != ReadWriteSuccess.FAILED) {\n+                        dataWrite = ReadWriteSuccess.FAILED;\n+                        updateStatus();\n+                    }\n+                    logger.warn(\"E3DC Modbus write error! {}\", failure.getRequest().toString());\n+                });\n+            }\n+        }\n+    }\n+\n+    private int getWallboxId(@Nullable E3DCWallboxConfiguration c) {", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2MzMyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465863325", "bodyText": "Ok, changed return value and adapted function references", "author": "weymann", "createdAt": "2020-08-05T16:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MDg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java\nindex b8d18ad93b..b3822b485e 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java\n\n@@ -16,6 +16,8 @@ import static org.openhab.binding.modbus.e3dc.internal.E3DCBindingConstants.*;\n import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans.*;\n \n import java.util.BitSet;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MTQxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465591417", "bodyText": "\ud83d\udc4d", "author": "ssalonen", "createdAt": "2020-08-05T09:20:59Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/E3DCModbusConstans.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.modbus;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link E3DCModbusConstans} Variables for register handling.\n+ * The numbers are taken from E3DC Modbus Spec Chapter 3.1 page 14 ff\n+ * Registers start from 0 (not 1!) so from the documented registers subtract 1\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCModbusConstans {\n+    // \"String\" registers at the beginning shall be read with very low frequency - 1 hour\n+    public static final int INFO_POLL_REFRESH_TIME_MS = 60 * 60 * 1000;\n+\n+    // Constants where a certain Block starts and block size. Note: General offset is -1 so INFO_REG from E3DC Modbus\n+    // Spec starts at 1 but it's Register 0!\n+    public static final int INFO_REG_START = 0;\n+    public static final int INFO_REG_SIZE = 67;\n+    public static final int POWER_REG_START = 67;\n+    public static final int POWER_REG_SIZE = 16;\n+    public static final int EMS_REG_START = 83;\n+    public static final int EMS_REG_SIZE = 2;\n+    public static final int WALLBOX_REG_START = 87;\n+    public static final int WALLBOX_REG_SIZE = 8;\n+    public static final int STRINGS_REG_START = 95;\n+    public static final int STRINGS_REG_SIZE = 9;\n+    public static final int REGISTER_LENGTH = 104;\n+\n+    /*\n+     * Some Registers are numbers but needs to be decoded into Bits\n+     */\n+\n+    // Wallbox Bit Definitions according to chapter 3.1.5 page 15", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg1MTkyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465851925", "bodyText": "Thanks - nothing to change, right?", "author": "weymann", "createdAt": "2020-08-05T16:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwNjU5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466206597", "bodyText": "No... I like it how you reference the original spec. Makes maintenance more approacheable", "author": "ssalonen", "createdAt": "2020-08-06T07:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MTQxNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MjQzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465592432", "bodyText": "Consider using Optional. Matter of taste I guess", "author": "ssalonen", "createdAt": "2020-08-05T09:22:47Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/Parser.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.modbus;\n+\n+import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.e3dc.internal.dto.EmergencyBlock;\n+import org.openhab.binding.modbus.e3dc.internal.dto.InfoBlock;\n+import org.openhab.binding.modbus.e3dc.internal.dto.PowerBlock;\n+import org.openhab.binding.modbus.e3dc.internal.dto.StringBlock;\n+import org.openhab.binding.modbus.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link InfoBlockCallback} class receives callbacks from modbus poller\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Parser {\n+    private static final int MEASURE_COUNT = 100;\n+    private final Logger logger = LoggerFactory.getLogger(Parser.class);\n+    private DataType callbackType;\n+    private byte[] bArray;\n+    private int size;\n+    private int counter = 0;\n+    private long maxDuration = Long.MIN_VALUE;\n+    private long minDuration = Long.MAX_VALUE;\n+    private long avgDuration = 0;\n+\n+    public Parser(DataType type) {\n+        callbackType = type;\n+        if (type.equals(DataType.INFO)) {\n+            size = INFO_REG_SIZE * 2;\n+            bArray = new byte[size];\n+        } else {\n+            size = (REGISTER_LENGTH - INFO_REG_SIZE) * 2;\n+            bArray = new byte[size];\n+        }\n+    }\n+\n+    public void handle(AsyncModbusReadResult result) {\n+        byte[] newArray = new byte[size];\n+        long startTime = System.currentTimeMillis();\n+        Optional<ModbusRegisterArray> opt = result.getRegisters();\n+        if (opt.isPresent()) {\n+            ModbusRegisterArray registers = opt.get();\n+            int i = 0;\n+            for (ModbusRegister reg : registers) {\n+                System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n+                i += 2;\n+            }\n+            setArray(newArray);\n+\n+            long duration = System.currentTimeMillis() - startTime;\n+            avgDuration += duration;\n+            minDuration = Math.min(minDuration, duration);\n+            maxDuration = Math.max(maxDuration, duration);\n+            counter++;\n+            if (counter % MEASURE_COUNT == 0) {\n+                logger.debug(\"Min {} Max {} Avg {}\", minDuration, maxDuration, avgDuration / MEASURE_COUNT);\n+                avgDuration = 0;\n+                minDuration = Long.MAX_VALUE;\n+                maxDuration = Long.MIN_VALUE;\n+            }\n+        } else {\n+            logger.warn(\"Modbus read result doesn't return expected registers\");\n+        }\n+    }\n+\n+    public synchronized void setArray(byte[] b) {\n+        if (b.length != size) {\n+            logger.warn(\"Wrong byte size received. Should be {} but is {}. Data maybe corrupted!\", size, b.length);\n+        }\n+        bArray = b.clone();\n+    }\n+\n+    public @Nullable Data parse(DataType type) {", "originalCommit": "cb5a8a74d2e494f052883ef89f0c06dd8a27649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzMzM4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r465933383", "bodyText": "No problem. To be honest I didn't know the Optional pattern before but it's quite nice to handle.\nWorking on this topic I observed that E3DCThingHandler creates the channelUIDs everytime on update. Seems that there are heavy String operations each time. I moved Channel creation towards the constructor - more code but should be more efficient. Please have a look on E3DCThingHandler", "author": "weymann", "createdAt": "2020-08-05T18:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MjQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNTMxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466225319", "bodyText": "Yeah, it probably does make a difference since there are so many channels.\nBtw, behind the scenes (see Basethinghandler) similar thing might be happening with the wall box thing but there are less channels overall", "author": "ssalonen", "createdAt": "2020-08-06T08:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MjQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3NjU3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r467476573", "bodyText": "You're right. BasicTingHandler creates Channels also on each update - I didn't recognized this. I was just worried to create channels on the frequent Modbus updates and each time Channels are created. I'll correct also WallboxHandler in order to present a consistent implementation.", "author": "weymann", "createdAt": "2020-08-08T15:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MjQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/Parser.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/Parser.java\nindex 5a381a2b75..e1524f44c4 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/Parser.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/Parser.java\n\n@@ -18,7 +18,6 @@ import java.util.Arrays;\n import java.util.Optional;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.binding.modbus.e3dc.internal.dto.EmergencyBlock;\n import org.openhab.binding.modbus.e3dc.internal.dto.InfoBlock;\n import org.openhab.binding.modbus.e3dc.internal.dto.PowerBlock;\n"}}, {"oid": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "url": "https://github.com/openhab/openhab-addons/commit/9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "message": "review comment corrections\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-05T18:57:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NTQzMw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466655433", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (thingTypeUID.equals(E3DCBindingConstants.THING_TYPE_E3DC)\n          \n          \n            \n                            || thingTypeUID.equals(E3DCBindingConstants.THING_TYPE_E3DC_WALLBOX)) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return thingTypeUID.equals(E3DCBindingConstants.THING_TYPE_E3DC)\n          \n          \n            \n                            || thingTypeUID.equals(E3DCBindingConstants.THING_TYPE_E3DC_WALLBOX);", "author": "fwolter", "createdAt": "2020-08-06T20:03:27Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCHandlerFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.modbus.e3dc.internal.handler.E3DCThingHandler;\n+import org.openhab.binding.modbus.e3dc.internal.handler.E3DCWallboxThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link E3DCHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.e3dc\", service = ThingHandlerFactory.class)\n+public class E3DCHandlerFactory extends BaseThingHandlerFactory {\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        if (thingTypeUID.equals(E3DCBindingConstants.THING_TYPE_E3DC)\n+                || thingTypeUID.equals(E3DCBindingConstants.THING_TYPE_E3DC_WALLBOX)) {\n+            return true;\n+        } else {\n+            return false;\n+        }", "originalCommit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4OTc5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r467489796", "bodyText": "Very good - fixed.", "author": "weymann", "createdAt": "2020-08-08T18:07:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NTQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "06aa1340485455520f1335b0a6bd7f924238f72a", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCHandlerFactory.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCHandlerFactory.java\nindex 817a85c824..bc77a06f9b 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCHandlerFactory.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/E3DCHandlerFactory.java\n\n@@ -35,12 +35,8 @@ import org.osgi.service.component.annotations.Component;\n public class E3DCHandlerFactory extends BaseThingHandlerFactory {\n     @Override\n     public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n-        if (thingTypeUID.equals(E3DCBindingConstants.THING_TYPE_E3DC)\n-                || thingTypeUID.equals(E3DCBindingConstants.THING_TYPE_E3DC_WALLBOX)) {\n-            return true;\n-        } else {\n-            return false;\n-        }\n+        return (thingTypeUID.equals(E3DCBindingConstants.THING_TYPE_E3DC)\n+                || thingTypeUID.equals(E3DCBindingConstants.THING_TYPE_E3DC_WALLBOX));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NjQ1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466656455", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ((wrap.get() & 0xff) << 8) | wrap.get() & 0xff;\n          \n          \n            \n                    return Short.toUnsignedInt(wrap.getShort());", "author": "fwolter", "createdAt": "2020-08-06T20:05:34Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.BitSet;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataConverter {\n+    private static final long MAX_INT32 = (long) Math.pow(2, Integer.SIZE);\n+\n+    /**\n+     * Get unit16 value from 2 bytes\n+     *\n+     * @param wrap\n+     * @return\n+     */\n+    public static int getUInt16Value(ByteBuffer wrap) {\n+        return ((wrap.get() & 0xff) << 8) | wrap.get() & 0xff;", "originalCommit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU2NTEyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r467565121", "bodyText": "Yes, this seems to work.", "author": "weymann", "createdAt": "2020-08-09T10:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NjQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "06aa1340485455520f1335b0a6bd7f924238f72a", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\nindex 022791b188..b3206f96cb 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\n\n@@ -34,15 +34,11 @@ public class DataConverter {\n      * @return\n      */\n     public static int getUInt16Value(ByteBuffer wrap) {\n-        return ((wrap.get() & 0xff) << 8) | wrap.get() & 0xff;\n+        return Short.toUnsignedInt(wrap.getShort());\n     }\n \n     public static long getLongValue(ByteBuffer wrap) {\n-        long value = 0;\n-        for (int i = 0; i < 4; i++) {\n-            value = (value << 8) + (wrap.get() & 0xff);\n-        }\n-        return value;\n+        return Integer.toUnsignedLong(wrap.getInt());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NjY5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466656696", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long value = 0;\n          \n          \n            \n                    for (int i = 0; i < 4; i++) {\n          \n          \n            \n                        value = (value << 8) + (wrap.get() & 0xff);\n          \n          \n            \n                    }\n          \n          \n            \n                    return value;\n          \n          \n            \n                    return wrap.getLong();", "author": "fwolter", "createdAt": "2020-08-06T20:06:07Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.BitSet;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataConverter {\n+    private static final long MAX_INT32 = (long) Math.pow(2, Integer.SIZE);\n+\n+    /**\n+     * Get unit16 value from 2 bytes\n+     *\n+     * @param wrap\n+     * @return\n+     */\n+    public static int getUInt16Value(ByteBuffer wrap) {\n+        return ((wrap.get() & 0xff) << 8) | wrap.get() & 0xff;\n+    }\n+\n+    public static long getLongValue(ByteBuffer wrap) {\n+        long value = 0;\n+        for (int i = 0; i < 4; i++) {\n+            value = (value << 8) + (wrap.get() & 0xff);\n+        }\n+        return value;", "originalCommit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU2NTQ1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r467565450", "bodyText": "Hm, getLong reads 8 bytes which is too long. I applied your idea before: getInt and convert to unsigned long =>\nreturn Integer.toUnsignedLong(wrap.getInt());\nThis works fine in my unit tests", "author": "weymann", "createdAt": "2020-08-09T10:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NjY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "06aa1340485455520f1335b0a6bd7f924238f72a", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\nindex 022791b188..b3206f96cb 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\n\n@@ -34,15 +34,11 @@ public class DataConverter {\n      * @return\n      */\n     public static int getUInt16Value(ByteBuffer wrap) {\n-        return ((wrap.get() & 0xff) << 8) | wrap.get() & 0xff;\n+        return Short.toUnsignedInt(wrap.getShort());\n     }\n \n     public static long getLongValue(ByteBuffer wrap) {\n-        long value = 0;\n-        for (int i = 0; i < 4; i++) {\n-            value = (value << 8) + (wrap.get() & 0xff);\n-        }\n-        return value;\n+        return Integer.toUnsignedLong(wrap.getInt());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTEwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466659109", "bodyText": "Did you take a look into the class HexUtils in the OH core?", "author": "fwolter", "createdAt": "2020-08-06T20:11:10Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/InfoBlock.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link InfoBlock} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class InfoBlock implements Data {\n+    private static final StringType EMPTY = new StringType(\"NULL\");\n+    public StringType modbusId = EMPTY;\n+    public StringType modbusVersion = EMPTY;\n+    public DecimalType supportedRegisters = new DecimalType(-1);\n+    public StringType manufacturer = EMPTY;\n+    public StringType modelName = EMPTY;\n+    public StringType serialNumber = EMPTY;\n+    public StringType firmware = EMPTY;\n+\n+    /**\n+     * For decoding see Modbus Register Mapping Chapter 3.1.1 page 14\n+     *\n+     * @param bArray - Modbus Registers as bytes from 40001 to 40067\n+     */\n+    public InfoBlock(byte[] bArray) {\n+        // index handling to calculate the correct start index\n+        ByteBuffer wrapper = ByteBuffer.wrap(bArray);\n+\n+        // first uint16 = 2 bytes - decode magic byte\n+        StringBuilder magicByte = new StringBuilder();\n+        magicByte.append(String.format(\"%02X\", wrapper.get()));\n+        magicByte.append(String.format(\"%02X\", wrapper.get()));\n+        this.modbusId = new StringType(magicByte.toString());", "originalCommit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwMDczMA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r467600730", "bodyText": "I checked Hexutils and adapted the conversion.", "author": "weymann", "createdAt": "2020-08-09T16:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "06aa1340485455520f1335b0a6bd7f924238f72a", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/InfoBlock.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/InfoBlock.java\nindex 0d03c3a5aa..3f57b9f248 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/InfoBlock.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/InfoBlock.java\n\n@@ -17,6 +17,7 @@ import java.nio.ByteBuffer;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.util.HexUtils;\n import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDU3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466660573", "bodyText": "Syntactical sugar. Next time...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    string2Volt = new QuantityType<ElectricPotential>(DataConverter.getUInt16Value(wrap), SmartHomeUnits.VOLT);\n          \n          \n            \n                    string2Volt = QuantityType.valueOf(DataConverter.getUInt16Value(wrap), SmartHomeUnits.VOLT);", "author": "fwolter", "createdAt": "2020-08-06T20:14:14Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/StringBlock.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import java.nio.ByteBuffer;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.ElectricPotential;\n+import javax.measure.quantity.Power;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link StringBlock} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StringBlock implements Data {\n+    public QuantityType<ElectricPotential> string1Volt;\n+    public QuantityType<ElectricPotential> string2Volt;\n+    public QuantityType<ElectricPotential> string3Volt;\n+    public QuantityType<ElectricCurrent> string1Ampere;\n+    public QuantityType<ElectricCurrent> string2Ampere;\n+    public QuantityType<ElectricCurrent> string3Ampere;\n+    public QuantityType<Power> string1Watt;\n+    public QuantityType<Power> string2Watt;\n+    public QuantityType<Power> string3Watt;\n+\n+    /**\n+     * For decoding see Modbus Register Mapping Chapter 3.1.2 page 14-16\n+     *\n+     * @param bArray - Modbus Registers as bytes from 40096 to 40104\n+     */\n+    public StringBlock(byte[] bArray) {\n+        ByteBuffer wrap = ByteBuffer.wrap(bArray);\n+        // straight forward - for each String the values Volt, Ampere and then Watt. All unt16 = 2 bytes values\n+        string1Volt = new QuantityType<ElectricPotential>(DataConverter.getUInt16Value(wrap), SmartHomeUnits.VOLT);\n+        string2Volt = new QuantityType<ElectricPotential>(DataConverter.getUInt16Value(wrap), SmartHomeUnits.VOLT);", "originalCommit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5Mjc5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r467492795", "bodyText": "Sure - changed it in String and Power Block", "author": "weymann", "createdAt": "2020-08-08T18:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "06aa1340485455520f1335b0a6bd7f924238f72a", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/StringBlock.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/StringBlock.java\nindex b8c79c80a5..1125e11913 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/StringBlock.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/StringBlock.java\n\n@@ -48,18 +48,15 @@ public class StringBlock implements Data {\n     public StringBlock(byte[] bArray) {\n         ByteBuffer wrap = ByteBuffer.wrap(bArray);\n         // straight forward - for each String the values Volt, Ampere and then Watt. All unt16 = 2 bytes values\n-        string1Volt = new QuantityType<ElectricPotential>(DataConverter.getUInt16Value(wrap), SmartHomeUnits.VOLT);\n-        string2Volt = new QuantityType<ElectricPotential>(DataConverter.getUInt16Value(wrap), SmartHomeUnits.VOLT);\n-        string3Volt = new QuantityType<ElectricPotential>(DataConverter.getUInt16Value(wrap), SmartHomeUnits.VOLT);\n+        string1Volt = QuantityType.valueOf(DataConverter.getUInt16Value(wrap), SmartHomeUnits.VOLT);\n+        string2Volt = QuantityType.valueOf(DataConverter.getUInt16Value(wrap), SmartHomeUnits.VOLT);\n+        string3Volt = QuantityType.valueOf(DataConverter.getUInt16Value(wrap), SmartHomeUnits.VOLT);\n         // E3DC Modbus Spec chapter 3.1.2, page 16 - Ampere values shall be handled with factor 0.01\n-        string1Ampere = new QuantityType<ElectricCurrent>(DataConverter.getUDoubleValue(wrap, 0.01),\n-                SmartHomeUnits.AMPERE);\n-        string2Ampere = new QuantityType<ElectricCurrent>(DataConverter.getUDoubleValue(wrap, 0.01),\n-                SmartHomeUnits.AMPERE);\n-        string3Ampere = new QuantityType<ElectricCurrent>(DataConverter.getUDoubleValue(wrap, 0.01),\n-                SmartHomeUnits.AMPERE);\n-        string1Watt = new QuantityType<Power>(DataConverter.getUInt16Value(wrap), SmartHomeUnits.WATT);\n-        string2Watt = new QuantityType<Power>(DataConverter.getUInt16Value(wrap), SmartHomeUnits.WATT);\n-        string3Watt = new QuantityType<Power>(DataConverter.getUInt16Value(wrap), SmartHomeUnits.WATT);\n+        string1Ampere = QuantityType.valueOf(DataConverter.getUDoubleValue(wrap, 0.01), SmartHomeUnits.AMPERE);\n+        string2Ampere = QuantityType.valueOf(DataConverter.getUDoubleValue(wrap, 0.01), SmartHomeUnits.AMPERE);\n+        string3Ampere = QuantityType.valueOf(DataConverter.getUDoubleValue(wrap, 0.01), SmartHomeUnits.AMPERE);\n+        string1Watt = QuantityType.valueOf(DataConverter.getUInt16Value(wrap), SmartHomeUnits.WATT);\n+        string2Watt = QuantityType.valueOf(DataConverter.getUInt16Value(wrap), SmartHomeUnits.WATT);\n+        string3Watt = QuantityType.valueOf(DataConverter.getUInt16Value(wrap), SmartHomeUnits.WATT);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTU5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466661590", "bodyText": "E3DCBindingConstants would be a better place for these. You could also make them static final.", "author": "fwolter", "createdAt": "2020-08-06T20:16:20Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCThingHandler.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.handler;\n+\n+import static org.openhab.binding.modbus.e3dc.internal.E3DCBindingConstants.*;\n+import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.ArrayList;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.modbus.e3dc.internal.E3DCConfiguration;\n+import org.openhab.binding.modbus.e3dc.internal.dto.EmergencyBlock;\n+import org.openhab.binding.modbus.e3dc.internal.dto.InfoBlock;\n+import org.openhab.binding.modbus.e3dc.internal.dto.PowerBlock;\n+import org.openhab.binding.modbus.e3dc.internal.dto.StringBlock;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Parser;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCThingHandler} Basic modbus connection towards the E3DC device\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCThingHandler extends BaseBridgeHandler {\n+    public enum ReadStatus {\n+        NOT_RECEIVED,\n+        READ_SUCCESS,\n+        READ_FAILED\n+    }\n+\n+    static final String INFO_DATA_READ_ERROR = \"Information And Data Modbus Read Errors\";\n+    static final String INFO_READ_ERROR = \"Information Modbus Read Error\";\n+    static final String DATA_READ_ERROR = \"Data Modbus Read Error\";\n+\n+    static final String INFO_GROUP = \"info\";\n+    static final String EMERGENCY_GROUP = \"emergency\";\n+    static final String POWER_GROUP = \"power\";\n+    static final String STRINGS_GROUP = \"strings\";\n+\n+    private ChannelUID modbusIdChannel;\n+    private ChannelUID modbusVersionChannel;\n+    private ChannelUID supportedRegistersChannel;\n+    private ChannelUID manufacturerChannel;\n+    private ChannelUID modelNameChannel;\n+    private ChannelUID serialNumberChannel;\n+    private ChannelUID firmwareChannel;\n+\n+    private ChannelUID epStatusChannel;\n+    private ChannelUID batteryChargingLockedChannel;\n+    private ChannelUID batteryDischargingLockedChannel;\n+    private ChannelUID epPossibleChannel;\n+    private ChannelUID weatherPredictedChargingChannel;\n+    private ChannelUID regulationStatusChannel;\n+    private ChannelUID chargeLockTimeChannel;\n+    private ChannelUID dischargeLockTimeChannel;\n+\n+    private ChannelUID pvPowerSupplyChannel;\n+    private ChannelUID batteryPowerSupplyChannel;\n+    private ChannelUID batteryPowerConsumptionChannel;\n+    private ChannelUID householdPowerConsumptionChannel;\n+    private ChannelUID gridPowerConsumpitionChannel;\n+    private ChannelUID gridPowerSupplyChannel;\n+    private ChannelUID externalPowerSupplyChannel;\n+    private ChannelUID wallboxPowerConsumptionChannel;\n+    private ChannelUID wallboxPVPowerConsumptionChannel;\n+    private ChannelUID autarkyChannel;\n+    private ChannelUID selfConsumptionChannel;\n+    private ChannelUID batterySOCChannel;\n+\n+    private ChannelUID string1AmpereChannel;\n+    private ChannelUID string1VoltChannel;\n+    private ChannelUID string1WattChannel;\n+    private ChannelUID string2AmpereChannel;\n+    private ChannelUID string2VoltChannel;\n+    private ChannelUID string2WattChannel;\n+    private ChannelUID string3AmpereChannel;\n+    private ChannelUID string3VoltChannel;\n+    private ChannelUID string3WattChannel;\n+\n+    private final ArrayList<E3DCWallboxThingHandler> listeners = new ArrayList<E3DCWallboxThingHandler>();\n+    private final Logger logger = LoggerFactory.getLogger(E3DCThingHandler.class);\n+    private final Parser dataParser = new Parser(DataType.DATA);\n+    private ReadStatus dataRead = ReadStatus.NOT_RECEIVED;\n+    private final Parser infoParser = new Parser(DataType.INFO);\n+    private ReadStatus infoRead = ReadStatus.NOT_RECEIVED;\n+    private @Nullable PollTask infoPoller;\n+    private @Nullable PollTask dataPoller;\n+    private @Nullable E3DCConfiguration config;\n+\n+    /**\n+     * Communication interface to the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusCommunicationInterface comms = null;\n+    private int slaveId;\n+\n+    public E3DCThingHandler(Bridge thing) {\n+        super(thing);\n+\n+        modbusIdChannel = channelUID(thing, INFO_GROUP, MODBUS_ID_CHANNEL);", "originalCommit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5MzQ2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r467493461", "bodyText": "Are you really sure? Channel is bound to  thing.getUID. I placed it into the constructor because for each thing an own Channel needs to be allocated.  So I don't think static final is fitting for updating different Things.", "author": "weymann", "createdAt": "2020-08-08T18:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NTMwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r468875307", "bodyText": "You're right, they can't be made static.", "author": "fwolter", "createdAt": "2020-08-11T21:28:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "06aa1340485455520f1335b0a6bd7f924238f72a", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCThingHandler.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCThingHandler.java\nindex a972492498..d9efa60729 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCThingHandler.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCThingHandler.java\n\n@@ -224,7 +224,6 @@ public class E3DCThingHandler extends BaseBridgeHandler {\n             String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n                     String.format(\"Bridge '%s' is offline\", label));\n-            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\n             return null;\n         }\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2Mjg5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466662894", "bodyText": "Do you need the additional log message, as the framework already logs the message in updateStatus()? Same for below.", "author": "fwolter", "createdAt": "2020-08-06T20:18:52Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCThingHandler.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.handler;\n+\n+import static org.openhab.binding.modbus.e3dc.internal.E3DCBindingConstants.*;\n+import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.ArrayList;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.modbus.e3dc.internal.E3DCConfiguration;\n+import org.openhab.binding.modbus.e3dc.internal.dto.EmergencyBlock;\n+import org.openhab.binding.modbus.e3dc.internal.dto.InfoBlock;\n+import org.openhab.binding.modbus.e3dc.internal.dto.PowerBlock;\n+import org.openhab.binding.modbus.e3dc.internal.dto.StringBlock;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Parser;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCThingHandler} Basic modbus connection towards the E3DC device\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCThingHandler extends BaseBridgeHandler {\n+    public enum ReadStatus {\n+        NOT_RECEIVED,\n+        READ_SUCCESS,\n+        READ_FAILED\n+    }\n+\n+    static final String INFO_DATA_READ_ERROR = \"Information And Data Modbus Read Errors\";\n+    static final String INFO_READ_ERROR = \"Information Modbus Read Error\";\n+    static final String DATA_READ_ERROR = \"Data Modbus Read Error\";\n+\n+    static final String INFO_GROUP = \"info\";\n+    static final String EMERGENCY_GROUP = \"emergency\";\n+    static final String POWER_GROUP = \"power\";\n+    static final String STRINGS_GROUP = \"strings\";\n+\n+    private ChannelUID modbusIdChannel;\n+    private ChannelUID modbusVersionChannel;\n+    private ChannelUID supportedRegistersChannel;\n+    private ChannelUID manufacturerChannel;\n+    private ChannelUID modelNameChannel;\n+    private ChannelUID serialNumberChannel;\n+    private ChannelUID firmwareChannel;\n+\n+    private ChannelUID epStatusChannel;\n+    private ChannelUID batteryChargingLockedChannel;\n+    private ChannelUID batteryDischargingLockedChannel;\n+    private ChannelUID epPossibleChannel;\n+    private ChannelUID weatherPredictedChargingChannel;\n+    private ChannelUID regulationStatusChannel;\n+    private ChannelUID chargeLockTimeChannel;\n+    private ChannelUID dischargeLockTimeChannel;\n+\n+    private ChannelUID pvPowerSupplyChannel;\n+    private ChannelUID batteryPowerSupplyChannel;\n+    private ChannelUID batteryPowerConsumptionChannel;\n+    private ChannelUID householdPowerConsumptionChannel;\n+    private ChannelUID gridPowerConsumpitionChannel;\n+    private ChannelUID gridPowerSupplyChannel;\n+    private ChannelUID externalPowerSupplyChannel;\n+    private ChannelUID wallboxPowerConsumptionChannel;\n+    private ChannelUID wallboxPVPowerConsumptionChannel;\n+    private ChannelUID autarkyChannel;\n+    private ChannelUID selfConsumptionChannel;\n+    private ChannelUID batterySOCChannel;\n+\n+    private ChannelUID string1AmpereChannel;\n+    private ChannelUID string1VoltChannel;\n+    private ChannelUID string1WattChannel;\n+    private ChannelUID string2AmpereChannel;\n+    private ChannelUID string2VoltChannel;\n+    private ChannelUID string2WattChannel;\n+    private ChannelUID string3AmpereChannel;\n+    private ChannelUID string3VoltChannel;\n+    private ChannelUID string3WattChannel;\n+\n+    private final ArrayList<E3DCWallboxThingHandler> listeners = new ArrayList<E3DCWallboxThingHandler>();\n+    private final Logger logger = LoggerFactory.getLogger(E3DCThingHandler.class);\n+    private final Parser dataParser = new Parser(DataType.DATA);\n+    private ReadStatus dataRead = ReadStatus.NOT_RECEIVED;\n+    private final Parser infoParser = new Parser(DataType.INFO);\n+    private ReadStatus infoRead = ReadStatus.NOT_RECEIVED;\n+    private @Nullable PollTask infoPoller;\n+    private @Nullable PollTask dataPoller;\n+    private @Nullable E3DCConfiguration config;\n+\n+    /**\n+     * Communication interface to the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusCommunicationInterface comms = null;\n+    private int slaveId;\n+\n+    public E3DCThingHandler(Bridge thing) {\n+        super(thing);\n+\n+        modbusIdChannel = channelUID(thing, INFO_GROUP, MODBUS_ID_CHANNEL);\n+        modbusVersionChannel = channelUID(thing, INFO_GROUP, MODBUS_FIRMWARE_CHANNEL);\n+        supportedRegistersChannel = channelUID(thing, INFO_GROUP, SUPPORTED_REGISTERS_CHANNEL);\n+        manufacturerChannel = channelUID(thing, INFO_GROUP, MANUFACTURER_NAME_CHANNEL);\n+        modelNameChannel = channelUID(thing, INFO_GROUP, MODEL_NAME_CHANNEL);\n+        serialNumberChannel = channelUID(thing, INFO_GROUP, SERIAL_NUMBER_CHANNEL);\n+        firmwareChannel = channelUID(thing, INFO_GROUP, FIRMWARE_RELEASE_CHANNEL);\n+\n+        epStatusChannel = channelUID(thing, EMERGENCY_GROUP, EMERGENCY_POWER_STATUS);\n+        batteryChargingLockedChannel = channelUID(thing, EMERGENCY_GROUP, BATTERY_CHARGING_LOCKED);\n+        batteryDischargingLockedChannel = channelUID(thing, EMERGENCY_GROUP, BATTERY_DISCHARGING_LOCKED);\n+        epPossibleChannel = channelUID(thing, EMERGENCY_GROUP, EMERGENCY_POWER_POSSIBLE);\n+        weatherPredictedChargingChannel = channelUID(thing, EMERGENCY_GROUP, WEATHER_PREDICTED_CHARGING);\n+        regulationStatusChannel = channelUID(thing, EMERGENCY_GROUP, REGULATION_STATUS);\n+        chargeLockTimeChannel = channelUID(thing, EMERGENCY_GROUP, CHARGE_LOCK_TIME);\n+        dischargeLockTimeChannel = channelUID(thing, EMERGENCY_GROUP, DISCHARGE_LOCK_TIME);\n+\n+        pvPowerSupplyChannel = channelUID(thing, POWER_GROUP, PV_POWER_SUPPLY_CHANNEL);\n+        batteryPowerSupplyChannel = channelUID(thing, POWER_GROUP, BATTERY_POWER_SUPPLY_CHANNEL);\n+        batteryPowerConsumptionChannel = channelUID(thing, POWER_GROUP, BATTERY_POWER_CONSUMPTION);\n+        householdPowerConsumptionChannel = channelUID(thing, POWER_GROUP, HOUSEHOLD_POWER_CONSUMPTION_CHANNEL);\n+        gridPowerConsumpitionChannel = channelUID(thing, POWER_GROUP, GRID_POWER_CONSUMPTION_CHANNEL);\n+        gridPowerSupplyChannel = channelUID(thing, POWER_GROUP, GRID_POWER_SUPPLY_CHANNEL);\n+        externalPowerSupplyChannel = channelUID(thing, POWER_GROUP, EXTERNAL_POWER_SUPPLY_CHANNEL);\n+        wallboxPowerConsumptionChannel = channelUID(thing, POWER_GROUP, WALLBOX_POWER_CONSUMPTION_CHANNEL);\n+        wallboxPVPowerConsumptionChannel = channelUID(thing, POWER_GROUP, WALLBOX_PV_POWER_CONSUMPTION_CHANNEL);\n+        autarkyChannel = channelUID(thing, POWER_GROUP, AUTARKY_CHANNEL);\n+        selfConsumptionChannel = channelUID(thing, POWER_GROUP, SELF_CONSUMPTION_CHANNEL);\n+        batterySOCChannel = channelUID(thing, POWER_GROUP, BATTERY_STATE_OF_CHARGE_CHANNEL);\n+\n+        string1AmpereChannel = channelUID(thing, STRINGS_GROUP, STRING1_DC_CURRENT_CHANNEL);\n+        string1VoltChannel = channelUID(thing, STRINGS_GROUP, STRING1_DC_VOLTAGE_CHANNEL);\n+        string1WattChannel = channelUID(thing, STRINGS_GROUP, STRING1_DC_OUTPUT_CHANNEL);\n+        string2AmpereChannel = channelUID(thing, STRINGS_GROUP, STRING2_DC_CURRENT_CHANNEL);\n+        string2VoltChannel = channelUID(thing, STRINGS_GROUP, STRING2_DC_VOLTAGE_CHANNEL);\n+        string2WattChannel = channelUID(thing, STRINGS_GROUP, STRING2_DC_OUTPUT_CHANNEL);\n+        string3AmpereChannel = channelUID(thing, STRINGS_GROUP, STRING3_DC_CURRENT_CHANNEL);\n+        string3VoltChannel = channelUID(thing, STRINGS_GROUP, STRING3_DC_VOLTAGE_CHANNEL);\n+        string3WattChannel = channelUID(thing, STRINGS_GROUP, STRING3_DC_OUTPUT_CHANNEL);\n+    }\n+\n+    public @Nullable ModbusCommunicationInterface getComms() {\n+        return comms;\n+    }\n+\n+    public int getSlaveId() {\n+        return slaveId;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // no control of E3DC device possible yet\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            E3DCConfiguration localConfig = getConfigAs(E3DCConfiguration.class);\n+            config = localConfig;\n+            ModbusCommunicationInterface localComms = connectEndpoint();\n+            if (localComms != null) {\n+                // register low speed info poller\n+                ModbusReadRequestBlueprint infoRequest = new ModbusReadRequestBlueprint(slaveId,\n+                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, INFO_REG_START, INFO_REG_SIZE, 3);\n+                infoPoller = localComms.registerRegularPoll(infoRequest, INFO_POLL_REFRESH_TIME_MS, 0,\n+                        this::handleInfoResult, this::handleInfoFailure);\n+\n+                ModbusReadRequestBlueprint dataRequest = new ModbusReadRequestBlueprint(slaveId,\n+                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, POWER_REG_START,\n+                        REGISTER_LENGTH - INFO_REG_SIZE, 3);\n+                if (config != null) {\n+                    dataPoller = localComms.registerRegularPoll(dataRequest, localConfig.refresh, 0,\n+                            this::handleDataResult, this::handleDataFailure);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                            \"E3DC Configuration missing\");\n+                }\n+            } // else state handling performed in connectEndPoint function\n+        });\n+    }\n+\n+    /**\n+     * Get a reference to the modbus endpoint\n+     */\n+    private @Nullable ModbusCommunicationInterface connectEndpoint() {\n+        if (comms != null) {\n+            return comms;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            @SuppressWarnings(\"null\")\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                    String.format(\"Bridge '%s' is offline\", label));\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);", "originalCommit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5MTE4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r467491187", "bodyText": "I took over the code from @ssalonen and I didn't took a closer look on the debug messages so far. Now I removed additional debug message which are updated in the thing status", "author": "weymann", "createdAt": "2020-08-08T18:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2Mjg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "06aa1340485455520f1335b0a6bd7f924238f72a", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCThingHandler.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCThingHandler.java\nindex a972492498..d9efa60729 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCThingHandler.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCThingHandler.java\n\n@@ -224,7 +224,6 @@ public class E3DCThingHandler extends BaseBridgeHandler {\n             String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n                     String.format(\"Bridge '%s' is offline\", label));\n-            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\n             return null;\n         }\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NDI4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r466664286", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-08-06T20:21:38Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.handler;\n+\n+import static org.openhab.binding.modbus.e3dc.internal.E3DCBindingConstants.*;\n+import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.BitSet;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.modbus.e3dc.internal.E3DCWallboxConfiguration;\n+import org.openhab.binding.modbus.e3dc.internal.dto.DataConverter;\n+import org.openhab.binding.modbus.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.modbus.e3dc.internal.dto.WallboxBlock;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Parser;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCWallboxThingHandler} Basic modbus connection towards the E3DC device\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCWallboxThingHandler extends BaseThingHandler {\n+    public enum ReadWriteSuccess {\n+        NOT_RECEIVED,\n+        SUCCESS,\n+        FAILED\n+    }\n+\n+    private static final String READ_WRITE_ERROR = \"Modbus Data Read/Write Error\";\n+    private static final String READ_ERROR = \"Modbus Read Error\";\n+    private static final String WRITE_ERROR = \"Modbus Write Error\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(E3DCWallboxThingHandler.class);\n+    private final Parser dataParser = new Parser(DataType.DATA);\n+    private ReadWriteSuccess dataRead = ReadWriteSuccess.NOT_RECEIVED;\n+    private ReadWriteSuccess dataWrite = ReadWriteSuccess.NOT_RECEIVED;\n+    private volatile BitSet currentBitSet = new BitSet(16);\n+    private @Nullable E3DCWallboxConfiguration config;\n+    private @Nullable E3DCThingHandler bridgeHandler;\n+\n+    public E3DCWallboxThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            config = getConfigAs(E3DCWallboxConfiguration.class);\n+            Bridge bridge = getBridge();\n+            if (bridge != null) {\n+                ThingHandler handler = bridge.getHandler();\n+                if (handler != null) {\n+                    bridgeHandler = ((E3DCThingHandler) handler);\n+                } else {\n+                    logger.warn(\"Thing Handler null\");\n+                }\n+            } else {\n+                logger.warn(\"Bridge null\");\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+    }", "originalCommit": "9bf8e8b07c0eee12a08fbb5020bfd2fcef483846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5MDU3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r467490578", "bodyText": "Fixed", "author": "weymann", "createdAt": "2020-08-08T18:16:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NDI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2e9bd7d9df8c1635e67b36bb57c42cf1d214d1f7", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java\nindex b3822b485e..241464cff0 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java\n\n@@ -63,6 +63,20 @@ public class E3DCWallboxThingHandler extends BaseThingHandler {\n     private static final String READ_ERROR = \"Modbus Read Error\";\n     private static final String WRITE_ERROR = \"Modbus Write Error\";\n \n+    ChannelUID wbAvailableChannel;\n+    ChannelUID wbSunmodeChannel;\n+    ChannelUID wbChargingAbortedChannel;\n+    ChannelUID wbChargingChannel;\n+    ChannelUID wbJackLockedChannel;\n+    ChannelUID wbJackPluggedChannel;\n+    ChannelUID wbSchukoOnChannel;\n+    ChannelUID wbSchukoPluggedChannel;\n+    ChannelUID wbSchukoLockedChannel;\n+    ChannelUID wbSchukoRelay16Channel;\n+    ChannelUID wbRelay16Channel;\n+    ChannelUID wbRelay32Channel;\n+    ChannelUID wb1phaseChannel;\n+\n     private final Logger logger = LoggerFactory.getLogger(E3DCWallboxThingHandler.class);\n     private final Parser dataParser = new Parser(DataType.DATA);\n     private ReadWriteSuccess dataRead = ReadWriteSuccess.NOT_RECEIVED;\n"}}, {"oid": "2e9bd7d9df8c1635e67b36bb57c42cf1d214d1f7", "url": "https://github.com/openhab/openhab-addons/commit/2e9bd7d9df8c1635e67b36bb57c42cf1d214d1f7", "message": "Samme ChannelUID creation in WallboxthingHandler as in E3DCThingHandler\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-08T15:53:49Z", "type": "commit"}, {"oid": "06aa1340485455520f1335b0a6bd7f924238f72a", "url": "https://github.com/openhab/openhab-addons/commit/06aa1340485455520f1335b0a6bd7f924238f72a", "message": "DataConverter, Handler updates, Readme and Configuration changes\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-09T10:31:27Z", "type": "commit"}, {"oid": "dde78257d2595c157c789bd9699073426ef3a690", "url": "https://github.com/openhab/openhab-addons/commit/dde78257d2595c157c789bd9699073426ef3a690", "message": "readme with more detailed setup description including picture\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-09T17:42:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwMDU1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r469500555", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Integer d = getUInt16Value(wrap);\n          \n          \n            \n                    int d = getUInt16Value(wrap);", "author": "fwolter", "createdAt": "2020-08-12T19:48:46Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.BitSet;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link DataConverter} Helper class to convert bytes from modbus into desired data format\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataConverter {\n+    private static final long MAX_INT32 = (long) Math.pow(2, Integer.SIZE);\n+\n+    /**\n+     * Get unit16 value from 2 bytes\n+     *\n+     * @param wrap\n+     * @return\n+     */\n+    public static int getUInt16Value(ByteBuffer wrap) {\n+        return Short.toUnsignedInt(wrap.getShort());\n+    }\n+\n+    public static long getLongValue(ByteBuffer wrap) {\n+        return Integer.toUnsignedLong(wrap.getInt());\n+    }\n+\n+    /**\n+     * Get double value from 2 bytes with correction factor\n+     *\n+     * @param wrap\n+     * @return\n+     */\n+    public static double getUDoubleValue(ByteBuffer wrap, double factor) {\n+        Integer d = getUInt16Value(wrap);", "originalCommit": "dde78257d2595c157c789bd9699073426ef3a690", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2MzY2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r470063665", "bodyText": "Right, reduced it to a one liner", "author": "weymann", "createdAt": "2020-08-13T16:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwMDU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4cf0feb1298b81f43aea1857c34e273740c7d318", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\nindex b3206f96cb..00737b38f0 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/DataConverter.java\n\n@@ -31,12 +31,18 @@ public class DataConverter {\n      * Get unit16 value from 2 bytes\n      *\n      * @param wrap\n-     * @return\n+     * @return int\n      */\n     public static int getUInt16Value(ByteBuffer wrap) {\n         return Short.toUnsignedInt(wrap.getShort());\n     }\n \n+    /**\n+     * Get unit32 value from 4 bytes\n+     *\n+     * @param wrap\n+     * @return long\n+     */\n     public static long getLongValue(ByteBuffer wrap) {\n         return Integer.toUnsignedLong(wrap.getInt());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwNDM0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r469504342", "bodyText": "Is there a reason why you execute this asynchronously?", "author": "fwolter", "createdAt": "2020-08-12T19:56:03Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.handler;\n+\n+import static org.openhab.binding.modbus.e3dc.internal.E3DCBindingConstants.*;\n+import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.util.BitSet;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.modbus.e3dc.internal.E3DCWallboxConfiguration;\n+import org.openhab.binding.modbus.e3dc.internal.dto.DataConverter;\n+import org.openhab.binding.modbus.e3dc.internal.dto.WallboxArray;\n+import org.openhab.binding.modbus.e3dc.internal.dto.WallboxBlock;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data.DataType;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Parser;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link E3DCWallboxThingHandler} Basic modbus connection towards the E3DC device\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class E3DCWallboxThingHandler extends BaseThingHandler {\n+    public enum ReadWriteSuccess {\n+        NOT_RECEIVED,\n+        SUCCESS,\n+        FAILED\n+    }\n+\n+    private static final String READ_WRITE_ERROR = \"Modbus Data Read/Write Error\";\n+    private static final String READ_ERROR = \"Modbus Read Error\";\n+    private static final String WRITE_ERROR = \"Modbus Write Error\";\n+\n+    ChannelUID wbAvailableChannel;\n+    ChannelUID wbSunmodeChannel;\n+    ChannelUID wbChargingAbortedChannel;\n+    ChannelUID wbChargingChannel;\n+    ChannelUID wbJackLockedChannel;\n+    ChannelUID wbJackPluggedChannel;\n+    ChannelUID wbSchukoOnChannel;\n+    ChannelUID wbSchukoPluggedChannel;\n+    ChannelUID wbSchukoLockedChannel;\n+    ChannelUID wbSchukoRelay16Channel;\n+    ChannelUID wbRelay16Channel;\n+    ChannelUID wbRelay32Channel;\n+    ChannelUID wb1phaseChannel;\n+\n+    private final Logger logger = LoggerFactory.getLogger(E3DCWallboxThingHandler.class);\n+    private final Parser dataParser = new Parser(DataType.DATA);\n+    private ReadWriteSuccess dataRead = ReadWriteSuccess.NOT_RECEIVED;\n+    private ReadWriteSuccess dataWrite = ReadWriteSuccess.NOT_RECEIVED;\n+    private volatile BitSet currentBitSet = new BitSet(16);\n+    private @Nullable E3DCWallboxConfiguration config;\n+    private @Nullable E3DCThingHandler bridgeHandler;\n+\n+    public E3DCWallboxThingHandler(Thing thing) {\n+        super(thing);\n+        wbAvailableChannel = new ChannelUID(thing.getUID(), WB_AVAILABLE_CHANNEL);\n+        wbSunmodeChannel = new ChannelUID(thing.getUID(), WB_SUNMODE_CHANNEL);\n+        wbChargingAbortedChannel = new ChannelUID(thing.getUID(), WB_CHARGING_ABORTED_CHANNEL);\n+        wbChargingChannel = new ChannelUID(thing.getUID(), WB_CHARGING_CHANNEL);\n+        wbJackLockedChannel = new ChannelUID(thing.getUID(), WB_JACK_LOCKED_CHANNEL);\n+        wbJackPluggedChannel = new ChannelUID(thing.getUID(), WB_JACK_PLUGGED_CHANNEL);\n+        wbSchukoOnChannel = new ChannelUID(thing.getUID(), WB_SCHUKO_ON_CHANNEL);\n+        wbSchukoPluggedChannel = new ChannelUID(thing.getUID(), WB_SCHUKO_PLUGGED_CHANNEL);\n+        wbSchukoLockedChannel = new ChannelUID(thing.getUID(), WB_SCHUKO_LOCKED_CHANNEL);\n+        wbSchukoRelay16Channel = new ChannelUID(thing.getUID(), WB_SCHUKO_RELAY_16A_CHANNEL);\n+        wbRelay16Channel = new ChannelUID(thing.getUID(), WB_RELAY_16A_CHANNEL);\n+        wbRelay32Channel = new ChannelUID(thing.getUID(), WB_RELAY_32A_CHANNEL);\n+        wb1phaseChannel = new ChannelUID(thing.getUID(), WB_1PHASE_CHANNEL);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {", "originalCommit": "dde78257d2595c157c789bd9699073426ef3a690", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3MDI4OA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r470070288", "bodyText": "It's the pattern generated by the binding skeleton script. But of course there are no extensive actions. I removed scheduler and get config and bridge synchronous.", "author": "weymann", "createdAt": "2020-08-13T16:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwNDM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4cf0feb1298b81f43aea1857c34e273740c7d318", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java\nindex b88f4cbd67..9259e19b45 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/handler/E3DCWallboxThingHandler.java\n\n@@ -105,20 +105,18 @@ public class E3DCWallboxThingHandler extends BaseThingHandler {\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        scheduler.execute(() -> {\n-            config = getConfigAs(E3DCWallboxConfiguration.class);\n-            Bridge bridge = getBridge();\n-            if (bridge != null) {\n-                ThingHandler handler = bridge.getHandler();\n-                if (handler != null) {\n-                    bridgeHandler = ((E3DCThingHandler) handler);\n-                } else {\n-                    logger.warn(\"Thing Handler null\");\n-                }\n+        config = getConfigAs(E3DCWallboxConfiguration.class);\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler != null) {\n+                bridgeHandler = ((E3DCThingHandler) handler);\n             } else {\n-                logger.warn(\"Bridge null\");\n+                logger.warn(\"Thing Handler null\");\n             }\n-        });\n+        } else {\n+            logger.warn(\"Bridge null\");\n+        }\n     }\n \n     @Override\n"}}, {"oid": "4cf0feb1298b81f43aea1857c34e273740c7d318", "url": "https://github.com/openhab/openhab-addons/commit/4cf0feb1298b81f43aea1857c34e273740c7d318", "message": "correct review findings\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-13T22:18:17Z", "type": "commit"}, {"oid": "8c051c46b81c21c646caf610d93d70507df707da", "url": "https://github.com/openhab/openhab-addons/commit/8c051c46b81c21c646caf610d93d70507df707da", "message": "adapt translations according to channel description changes\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-14T09:05:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0ODQ4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r477248480", "bodyText": "Not really something to change, but you can use:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    batteryChargingLocked = bs.get(EMS_CHARGING_LOCK_BIT) ? OnOffType.ON : OnOffType.OFF;\n          \n          \n            \n                    batteryChargingLocked = OnOffType.from(bs.get(EMS_CHARGING_LOCK_BIT));\n          \n      \n    \n    \n  \n\nMakes the code a bit more readable with all these lines.", "author": "Hilbrand", "createdAt": "2020-08-26T12:06:21Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/EmergencyBlock.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.e3dc.internal.dto;\n+\n+import static org.openhab.binding.modbus.e3dc.internal.modbus.E3DCModbusConstans.*;\n+\n+import java.nio.ByteBuffer;\n+import java.util.BitSet;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.openhab.binding.modbus.e3dc.internal.modbus.Data;\n+\n+/**\n+ * The {@link EmergencyBlock} Data object for E3DC Info Block\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EmergencyBlock implements Data {\n+    public StringType epStatus = EP_UNKOWN;\n+    public OnOffType batteryChargingLocked = OnOffType.OFF;\n+    public OnOffType batteryDischargingLocked = OnOffType.OFF;\n+    public OnOffType epPossible = OnOffType.OFF;\n+    public OnOffType weatherPredictedCharging = OnOffType.OFF;\n+    public OnOffType regulationStatus = OnOffType.OFF;\n+    public OnOffType chargeLockTime = OnOffType.OFF;\n+    public OnOffType dischargeLockTime = OnOffType.OFF;\n+\n+    // Possible Status definitions according to chapter 3.1.2, Register 40084, page 14 & 15\n+    public static final StringType EP_NOT_SUPPORTED = new StringType(\"EP not supported\");\n+    public static final StringType EP_ACTIVE = new StringType(\"EP active\");\n+    public static final StringType EP_NOT_ACTIVE = new StringType(\"EP not active\");\n+    public static final StringType EP_POSSIBLE = new StringType(\"EP possible\");\n+    public static final StringType EP_SWITCH = new StringType(\"EP Switch in wrong position\");\n+    public static final StringType EP_UNKOWN = new StringType(\"EP Status unknown\");\n+    public static final StringType[] EP_STATUS_ARRAY = new StringType[] { EP_NOT_SUPPORTED, EP_ACTIVE, EP_NOT_ACTIVE,\n+            EP_POSSIBLE, EP_SWITCH };\n+\n+    /**\n+     * For decoding see Modbus Register Mapping Chapter 3.1.2 page 14 & 15\n+     *\n+     * @param bArray - Modbus Registers as bytes from 40084 to 40085\n+     */\n+    public EmergencyBlock(byte[] bArray) {\n+        // uint16 status register 40084 - possible Status Strings are defined in Constants above\n+        int status = DataConverter.getUInt16Value(ByteBuffer.wrap(bArray));\n+        if (status >= 0 && status < 5) {\n+            epStatus = EP_STATUS_ARRAY[status];\n+        } else {\n+            epStatus = EP_UNKOWN;\n+        }\n+\n+        // uint16 status register 40085 shall be handled as Bits - check cahpter 3.1.3 page 17\n+        byte[] emsStatusBytes = new byte[] { bArray[3], bArray[2] };\n+        BitSet bs = BitSet.valueOf(emsStatusBytes);\n+        batteryChargingLocked = bs.get(EMS_CHARGING_LOCK_BIT) ? OnOffType.ON : OnOffType.OFF;", "originalCommit": "8c051c46b81c21c646caf610d93d70507df707da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU0ODQ5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8172#discussion_r478548499", "bodyText": "Sure, applied changes also in WallboxBlock with the same pattern", "author": "weymann", "createdAt": "2020-08-27T16:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0ODQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "57b8d026572982974055aaad6d2bf5489924f04e", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/EmergencyBlock.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/EmergencyBlock.java\nindex 1983886deb..ca97b6d223 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/EmergencyBlock.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/dto/EmergencyBlock.java\n\n@@ -39,12 +39,12 @@ public class EmergencyBlock implements Data {\n     public OnOffType dischargeLockTime = OnOffType.OFF;\n \n     // Possible Status definitions according to chapter 3.1.2, Register 40084, page 14 & 15\n-    public static final StringType EP_NOT_SUPPORTED = new StringType(\"EP not supported\");\n-    public static final StringType EP_ACTIVE = new StringType(\"EP active\");\n-    public static final StringType EP_NOT_ACTIVE = new StringType(\"EP not active\");\n-    public static final StringType EP_POSSIBLE = new StringType(\"EP possible\");\n-    public static final StringType EP_SWITCH = new StringType(\"EP Switch in wrong position\");\n-    public static final StringType EP_UNKOWN = new StringType(\"EP Status unknown\");\n+    public static final StringType EP_NOT_SUPPORTED = StringType.valueOf(\"EP not supported\");\n+    public static final StringType EP_ACTIVE = StringType.valueOf(\"EP active\");\n+    public static final StringType EP_NOT_ACTIVE = StringType.valueOf(\"EP not active\");\n+    public static final StringType EP_POSSIBLE = StringType.valueOf(\"EP possible\");\n+    public static final StringType EP_SWITCH = StringType.valueOf(\"EP Switch in wrong position\");\n+    public static final StringType EP_UNKOWN = StringType.valueOf(\"EP Status unknown\");\n     public static final StringType[] EP_STATUS_ARRAY = new StringType[] { EP_NOT_SUPPORTED, EP_ACTIVE, EP_NOT_ACTIVE,\n             EP_POSSIBLE, EP_SWITCH };\n \n"}}, {"oid": "57b8d026572982974055aaad6d2bf5489924f04e", "url": "https://github.com/openhab/openhab-addons/commit/57b8d026572982974055aaad6d2bf5489924f04e", "message": "optimize OnOffType assignment\n\nSigned-off-by: Bernd <bernd.weymann@gmail.com>", "committedDate": "2020-08-27T16:56:30Z", "type": "commit"}]}