{"pr_number": 9404, "pr_title": "Add Jython Scripting", "pr_createdAt": "2020-12-16T22:56:35Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9404", "timeline": [{"oid": "36ab179f5bb46dead769975154250b1b1146f867", "url": "https://github.com/openhab/openhab-addons/commit/36ab179f5bb46dead769975154250b1b1146f867", "message": "Add Jython Scripting\n\nAlso-by: Scott Rushworth <openhab@5iver.com>\nSigned-off-by: Wouter Born <github@maindrain.net>", "committedDate": "2020-12-16T22:55:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMDkxNw==", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544710917", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Set<String> newPythonPathList = new TreeSet<>(\n          \n          \n            \n                                new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n          \n          \n            \n                        Set<String> newPythonPathList = new TreeSet<>(Arrays.asList(existingPythonPath.split(File.pathSeparator)));", "author": "cpmeister", "createdAt": "2020-12-17T00:02:16Z", "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));", "originalCommit": "36ab179f5bb46dead769975154250b1b1146f867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "560a6bf9899300c313aab98924db41998a01a746", "chunk": "diff --git a/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java b/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java\nindex 844a1e8bcd..a24608df4c 100755\n--- a/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java\n+++ b/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java\n\n@@ -63,16 +63,14 @@ public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n         if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n             System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n         } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n-            Set<String> newPythonPathList = new TreeSet<>(\n-                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            Set<String> newPythonPathList = new TreeSet<>(Arrays.asList(existingPythonPath.split(File.pathSeparator)));\n             newPythonPathList.add(DEFAULT_PYTHON_PATH);\n-            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n-            System.setProperty(PYTHON_PATH, newPythonPath);\n+            System.setProperty(PYTHON_PATH, String.join(File.pathSeparator, newPythonPathList));\n         }\n \n-        System.setProperty(PYTHON_CACHEDIR,\n-                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n-                        .toString());\n+        System.setProperty(PYTHON_CACHEDIR, Paths\n+                .get(OpenHAB.getUserDataFolder(), \"cache\", JythonScriptEngineFactory.class.getPackageName(), \"cachedir\")\n+                .toString());\n \n         logPythonPaths();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMTE4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544711183", "bodyText": "Not sure why you would need to copy it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return List.copyOf(scriptTypes);\n          \n          \n            \n                    return scriptTypes;", "author": "cpmeister", "createdAt": "2020-12-17T00:02:48Z", "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.add(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);\n+        }\n+\n+        System.setProperty(PYTHON_CACHEDIR,\n+                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n+                        .toString());\n+\n+        logPythonPaths();\n+    }\n+\n+    private void logPythonPaths() {\n+        logger.trace(\"{}: {}, {}: {}, {}: {}\", //\n+                PYTHON_HOME, System.getProperty(PYTHON_HOME), //\n+                PYTHON_PATH, System.getProperty(PYTHON_PATH), //\n+                PYTHON_CACHEDIR, System.getProperty(PYTHON_CACHEDIR));\n+    }\n+\n+    @Override\n+    public List<String> getScriptTypes() {\n+        List<String> scriptTypes = new ArrayList<>();\n+\n+        for (javax.script.ScriptEngineFactory factory : ENGINE_MANAGER.getEngineFactories()) {\n+            List<String> extensions = factory.getExtensions();\n+\n+            if (extensions.contains(SCRIPT_TYPE)) {\n+                scriptTypes.addAll(extensions);\n+                scriptTypes.addAll(factory.getMimeTypes());\n+            }\n+        }\n+        return List.copyOf(scriptTypes);", "originalCommit": "36ab179f5bb46dead769975154250b1b1146f867", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MDcxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544890711", "bodyText": "Applied because it will generate a new result with every call so immutability isn't required.", "author": "wborn", "createdAt": "2020-12-17T08:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMTE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "560a6bf9899300c313aab98924db41998a01a746", "chunk": "diff --git a/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java b/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java\nindex 844a1e8bcd..a24608df4c 100755\n--- a/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java\n+++ b/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java\n\n@@ -63,16 +63,14 @@ public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n         if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n             System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n         } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n-            Set<String> newPythonPathList = new TreeSet<>(\n-                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            Set<String> newPythonPathList = new TreeSet<>(Arrays.asList(existingPythonPath.split(File.pathSeparator)));\n             newPythonPathList.add(DEFAULT_PYTHON_PATH);\n-            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n-            System.setProperty(PYTHON_PATH, newPythonPath);\n+            System.setProperty(PYTHON_PATH, String.join(File.pathSeparator, newPythonPathList));\n         }\n \n-        System.setProperty(PYTHON_CACHEDIR,\n-                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n-                        .toString());\n+        System.setProperty(PYTHON_CACHEDIR, Paths\n+                .get(OpenHAB.getUserDataFolder(), \"cache\", JythonScriptEngineFactory.class.getPackageName(), \"cachedir\")\n+                .toString());\n \n         logPythonPaths();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMTg5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544711897", "bodyText": "This looks to be duplicate code from above.", "author": "cpmeister", "createdAt": "2020-12-17T00:04:42Z", "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.add(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);\n+        }\n+\n+        System.setProperty(PYTHON_CACHEDIR,\n+                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n+                        .toString());\n+\n+        logPythonPaths();\n+    }\n+\n+    private void logPythonPaths() {\n+        logger.trace(\"{}: {}, {}: {}, {}: {}\", //\n+                PYTHON_HOME, System.getProperty(PYTHON_HOME), //\n+                PYTHON_PATH, System.getProperty(PYTHON_PATH), //\n+                PYTHON_CACHEDIR, System.getProperty(PYTHON_CACHEDIR));\n+    }\n+\n+    @Override\n+    public List<String> getScriptTypes() {\n+        List<String> scriptTypes = new ArrayList<>();\n+\n+        for (javax.script.ScriptEngineFactory factory : ENGINE_MANAGER.getEngineFactories()) {\n+            List<String> extensions = factory.getExtensions();\n+\n+            if (extensions.contains(SCRIPT_TYPE)) {\n+                scriptTypes.addAll(extensions);\n+                scriptTypes.addAll(factory.getMimeTypes());\n+            }\n+        }\n+        return List.copyOf(scriptTypes);\n+    }\n+\n+    @Override\n+    public @Nullable ScriptEngine createScriptEngine(String scriptType) {\n+        ScriptEngine scriptEngine = ENGINE_MANAGER.getEngineByExtension(scriptType);\n+        if (scriptEngine == null) {\n+            scriptEngine = ENGINE_MANAGER.getEngineByMimeType(scriptType);\n+        }\n+        if (scriptEngine == null) {\n+            scriptEngine = ENGINE_MANAGER.getEngineByName(scriptType);\n+        }\n+        return scriptEngine;\n+    }\n+\n+    @Deactivate\n+    public void removePythonPath() {\n+        logger.debug(\"Unloading JythonScriptEngineFactory\");\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath != null && existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.remove(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);", "originalCommit": "36ab179f5bb46dead769975154250b1b1146f867", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MTc5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544891792", "bodyText": "Not exactly. The difference is that one adds and the other removes the path.", "author": "wborn", "createdAt": "2020-12-17T08:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMTg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "560a6bf9899300c313aab98924db41998a01a746", "chunk": "diff --git a/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java b/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java\nindex 844a1e8bcd..a24608df4c 100755\n--- a/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java\n+++ b/bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java\n\n@@ -63,16 +63,14 @@ public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n         if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n             System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n         } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n-            Set<String> newPythonPathList = new TreeSet<>(\n-                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            Set<String> newPythonPathList = new TreeSet<>(Arrays.asList(existingPythonPath.split(File.pathSeparator)));\n             newPythonPathList.add(DEFAULT_PYTHON_PATH);\n-            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n-            System.setProperty(PYTHON_PATH, newPythonPath);\n+            System.setProperty(PYTHON_PATH, String.join(File.pathSeparator, newPythonPathList));\n         }\n \n-        System.setProperty(PYTHON_CACHEDIR,\n-                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n-                        .toString());\n+        System.setProperty(PYTHON_CACHEDIR, Paths\n+                .get(OpenHAB.getUserDataFolder(), \"cache\", JythonScriptEngineFactory.class.getPackageName(), \"cachedir\")\n+                .toString());\n \n         logPythonPaths();\n     }\n"}}, {"oid": "560a6bf9899300c313aab98924db41998a01a746", "url": "https://github.com/openhab/openhab-addons/commit/560a6bf9899300c313aab98924db41998a01a746", "message": "Address review comments\n\nSigned-off-by: Wouter Born <github@maindrain.net>", "committedDate": "2020-12-17T08:11:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545188781", "bodyText": "See #7208 (comment)", "author": "cweitkamp", "createdAt": "2020-12-17T15:41:31Z", "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();", "originalCommit": "560a6bf9899300c313aab98924db41998a01a746", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyMDIzMw==", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545220233", "bodyText": "Thanks for testing! The issue is that the org.openhab.core.automation.module.script.ScriptEngineFactory.ENGINE_MANAGER has a different classloader. So it only detects engines that are on the boot classpath (like Nashorn). I ran into the same issue with the Groovy add-on. I looked into ways to get engines registered in the ScriptEngineFactory.ENGINE_MANAGER. IIRC it wasn't possible to call methods on ScriptEngineFactory.ENGINE_MANAGER to (un)register engines provided by OSGi bundles.", "author": "wborn", "createdAt": "2020-12-17T16:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyODc4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545228787", "bodyText": "Do you have any concerns regarding SecurityException which might be thrown by this method?\n\nWe don't seem to handle any SecurityExceptions in openhab-core either when modifying System properties:\nhttps://github.com/openhab/openhab-core/search?q=System.setProperty", "author": "wborn", "createdAt": "2020-12-17T16:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5OTYyMA==", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545299620", "bodyText": "Do we need to handle it?", "author": "cpmeister", "createdAt": "2020-12-17T18:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDYwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545310607", "bodyText": "Ah, okay. Sounds reasonable. Thanks for clarification.\n\nDo we need to handle it?\n\nI think it is okay to not handle it. If the exceptions will be thrown there might be a bigger issue regarding permissions and other stuff will fail too.", "author": "cweitkamp", "createdAt": "2020-12-17T18:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ=="}], "type": "inlineReview", "revised_code": null}]}