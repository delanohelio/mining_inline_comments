{"pr_number": 7518, "pr_title": "[hue] Refactored state handling and fix polling after command", "pr_createdAt": "2020-05-01T22:38:49Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7518", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTA5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939097", "bodyText": "Already done above", "author": "lolodomo", "createdAt": "2020-05-02T09:58:48Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n-                if (lastSensorStateCopy.containsKey(sensorId)) {\n-                    final FullSensor lastFullSensor = lastSensorStateCopy.remove(sensorId);\n-                    final Map<String, Object> lastFullSensorState = lastFullSensor.getState();\n-                    lastSensorStates.put(sensorId, sensor);\n-                    if (!lastFullSensorState.equals(sensor.getState())) {\n-                        logger.debug(\"Status update for Hue sensor '{}' detected: {}\", sensorId, sensor.getState());\n-                        notifySensorStatusListeners(sensor, STATE_CHANGED);\n-                    }\n-                } else {\n-                    lastSensorStates.put(sensorId, sensor);\n+                lastSensorStateCopy.remove(sensorId);\n+\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener == null) {\n                     logger.debug(\"Hue sensor '{}' added.\", sensorId);\n-                    notifySensorStatusListeners(sensor, STATE_ADDED);\n \n+                    if (discovery != null) {\n+                        discovery.onSensorAdded(hueBridge, sensor);\n+                    }\n+\n+                    lastSensorStates.put(sensorId, sensor);\n+                } else {\n+                    lastSensorStateCopy.remove(sensorId);", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MjcyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418942724", "bodyText": "Was late this night ;) Already noticed this morning. ;)", "author": "DerOetzi", "createdAt": "2020-05-02T10:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\nindex 0963386e22..f144a589b4 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n\n@@ -173,9 +173,8 @@ public class HueBridgeHandler extends ConfigStatusBridgeHandler implements HueCl\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n-            lastSensorStates.clear();\n \n-            final SensorStatusListener discovery = discoveryListener;\n+            final HueLightDiscoveryService discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTI5NA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939294", "bodyText": "If you clear all the states, you will loose the previous state in case it is not changed by the thing handler.", "author": "lolodomo", "createdAt": "2020-05-02T10:00:33Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0Mjc1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418942756", "bodyText": "Changed this!", "author": "DerOetzi", "createdAt": "2020-05-02T10:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\nindex 0963386e22..f144a589b4 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n\n@@ -173,9 +173,8 @@ public class HueBridgeHandler extends ConfigStatusBridgeHandler implements HueCl\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n-            lastSensorStates.clear();\n \n-            final SensorStatusListener discovery = discoveryListener;\n+            final HueLightDiscoveryService discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTMxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939311", "bodyText": "If you clear all the states, you will loose the previous state in case it is not accepted by the thing handler.", "author": "lolodomo", "createdAt": "2020-05-02T10:00:48Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n-                if (lastSensorStateCopy.containsKey(sensorId)) {\n-                    final FullSensor lastFullSensor = lastSensorStateCopy.remove(sensorId);\n-                    final Map<String, Object> lastFullSensorState = lastFullSensor.getState();\n-                    lastSensorStates.put(sensorId, sensor);\n-                    if (!lastFullSensorState.equals(sensor.getState())) {\n-                        logger.debug(\"Status update for Hue sensor '{}' detected: {}\", sensorId, sensor.getState());\n-                        notifySensorStatusListeners(sensor, STATE_CHANGED);\n-                    }\n-                } else {\n-                    lastSensorStates.put(sensorId, sensor);\n+                lastSensorStateCopy.remove(sensorId);\n+\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener == null) {\n                     logger.debug(\"Hue sensor '{}' added.\", sensorId);\n-                    notifySensorStatusListeners(sensor, STATE_ADDED);\n \n+                    if (discovery != null) {\n+                        discovery.onSensorAdded(hueBridge, sensor);\n+                    }\n+\n+                    lastSensorStates.put(sensorId, sensor);\n+                } else {\n+                    lastSensorStateCopy.remove(sensorId);\n+                    if (sensorStatusListener.onSensorStateChanged(hueBridge, sensor)) {\n+                        lastSensorStates.put(sensorId, sensor);\n+                    }\n                 }\n             }\n \n             // Check for removed sensors\n-            for (Entry<String, FullSensor> fullSensorEntry : lastSensorStateCopy.entrySet()) {\n-                lastSensorStates.remove(fullSensorEntry.getKey());\n-                logger.debug(\"Hue sensor '{}' removed.\", fullSensorEntry.getKey());\n-                for (SensorStatusListener sensorStatusListener : sensorStatusListeners) {\n+            lastSensorStateCopy.forEach((sensorId, sensor) -> {\n+                logger.debug(\"Hue sensor '{}' removed.\", sensorId);\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener != null) {\n                     try {\n-                        sensorStatusListener.onSensorRemoved(hueBridge, fullSensorEntry.getValue());\n+                        sensorStatusListener.onSensorRemoved(hueBridge, sensor);\n                     } catch (Exception e) {\n                         logger.error(\"An exception occurred while calling the Sensor Listeners\", e);\n                     }\n                 }\n-            }\n+\n+                if (discovery != null) {\n+                    discovery.onSensorRemoved(hueBridge, sensor);\n+                }\n+            });\n         }\n     };\n \n     private final Runnable lightPollingRunnable = new PollingRunnable() {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullLight> lastLightStateCopy = new HashMap<>(lastLightStates);\n+            lastLightStates.clear();", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0Mjc3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418942779", "bodyText": "Changed this!", "author": "DerOetzi", "createdAt": "2020-05-02T10:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\nindex 0963386e22..f144a589b4 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n\n@@ -173,9 +173,8 @@ public class HueBridgeHandler extends ConfigStatusBridgeHandler implements HueCl\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n-            lastSensorStates.clear();\n \n-            final SensorStatusListener discovery = discoveryListener;\n+            final HueLightDiscoveryService discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTgzMg==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939832", "bodyText": "Please keep the different states (added, removed and changed) for each kind of listener, without assuming what methods will be used by each listener.", "author": "lolodomo", "createdAt": "2020-05-02T10:05:21Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1Njc1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418956755", "bodyText": "I have done a refactoring of discovery service. Please have a look.", "author": "DerOetzi", "createdAt": "2020-05-02T13:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\nindex 0963386e22..f144a589b4 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n\n@@ -173,9 +173,8 @@ public class HueBridgeHandler extends ConfigStatusBridgeHandler implements HueCl\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n-            lastSensorStates.clear();\n \n-            final SensorStatusListener discovery = discoveryListener;\n+            final HueLightDiscoveryService discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTg0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939840", "bodyText": "Please keep the different states (added, removed and changed) for each kind of listener, without assuming what methods will be used by each listener.", "author": "lolodomo", "createdAt": "2020-05-02T10:05:33Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -224,35 +230,41 @@ protected void doConnectedRun() throws IOException, ApiException {\n                 lights = hueBridge.getFullConfig().getLights();\n             }\n \n+            final LightStatusListener discovery = discoveryListener;", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MDM0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418950342", "bodyText": "I'm already thinking about doing even more refactoring, because in my opinion the discovery service should not have the same Interface like light and sensor handler to make clear which events are really used by the single thing. The discovery service needs only add(Light|Sensor)Discovery and remove(Light|Sensor)Discovery.", "author": "DerOetzi", "createdAt": "2020-05-02T12:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MjQwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418952405", "bodyText": "Yes that is an option I was thinking of. Two different event listeners.", "author": "lolodomo", "createdAt": "2020-05-02T12:23:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1Njc5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418956792", "bodyText": "I have done a refactoring of discovery service. Please have a look.", "author": "DerOetzi", "createdAt": "2020-05-02T13:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\nindex 0963386e22..f144a589b4 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n\n@@ -230,7 +229,7 @@ public class HueBridgeHandler extends ConfigStatusBridgeHandler implements HueCl\n                 lights = hueBridge.getFullConfig().getLights();\n             }\n \n-            final LightStatusListener discovery = discoveryListener;\n+            final HueLightDiscoveryService discovery = discoveryListener;\n \n             for (final FullLight fullLight : lights) {\n                 final String lightId = fullLight.getId();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDIwOA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940208", "bodyText": "sensorStatusListeners", "author": "lolodomo", "createdAt": "2020-05-02T10:09:17Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener == null) {\n+            discoveryListener = listener;\n+            startLightPolling();\n+            startSensorPolling();\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean unregisterDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener != null) {\n+            discoveryListener = null;\n+            if (lightStatusListeners.isEmpty()) {\n+                stopLightPolling();\n+            }\n+\n+            if (sensorStatusListeners.isEmpty()) {\n+                stopSensorPolling();\n+            }\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     @Override\n     public boolean registerLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.add(lightStatusListener);\n-        if (result && hueBridge != null) {\n-            // start light polling only if a light handler has been registered\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.put(lightId, lightStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startLightPolling();\n-            // inform the listener initially about all lights and their states\n-            for (FullLight light : lastLightStates.values()) {\n+            final FullLight light = lastLightStates.get(lightId);\n+            if (light != null) {\n                 lightStatusListener.onLightAdded(hueBridge, light);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.remove(lightStatusListener);\n-        if (result) {\n-            // stop stop light polling\n-            if (lightStatusListeners.isEmpty()) {\n-                stopLightPolling();\n-            }\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.remove(lightId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean registerSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.add(sensorStatusListener);\n-        if (result && hueBridge != null) {\n-            // start sensor polling only if a sensor handler has been registered\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.put(sensorId, sensorStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startSensorPolling();\n-            // inform the listener initially about all sensors and their states\n-            for (FullSensor sensor : lastSensorStates.values()) {\n+            final FullSensor sensor = lastSensorStates.get(sensorId);\n+            if (sensor != null) {\n                 sensorStatusListener.onSensorAdded(hueBridge, sensor);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.remove(sensorStatusListener);\n-        if (result) {\n-            // stop sensor polling\n-            if (sensorStatusListeners.isEmpty()) {\n-                stopSensorPolling();\n-            }\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.remove(sensorId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzE0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957148", "bodyText": "Moved start and stop polling. So not necessary anymore.", "author": "DerOetzi", "createdAt": "2020-05-02T13:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\nindex 0963386e22..f144a589b4 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n\n@@ -630,8 +622,9 @@ public class HueBridgeHandler extends ConfigStatusBridgeHandler implements HueCl\n     public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n         if (discoveryListener == null) {\n             discoveryListener = listener;\n-            startLightPolling();\n-            startSensorPolling();\n+\n+            getFullLights().forEach(listener::addLightDiscovery);\n+            getFullSensors().forEach(listener::addSensorDiscovery);\n \n             return true;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDIzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940237", "bodyText": "stopSensorPolling", "author": "lolodomo", "createdAt": "2020-05-02T10:09:30Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener == null) {\n+            discoveryListener = listener;\n+            startLightPolling();\n+            startSensorPolling();\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean unregisterDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener != null) {\n+            discoveryListener = null;\n+            if (lightStatusListeners.isEmpty()) {\n+                stopLightPolling();\n+            }\n+\n+            if (sensorStatusListeners.isEmpty()) {\n+                stopSensorPolling();\n+            }\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     @Override\n     public boolean registerLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.add(lightStatusListener);\n-        if (result && hueBridge != null) {\n-            // start light polling only if a light handler has been registered\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.put(lightId, lightStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startLightPolling();\n-            // inform the listener initially about all lights and their states\n-            for (FullLight light : lastLightStates.values()) {\n+            final FullLight light = lastLightStates.get(lightId);\n+            if (light != null) {\n                 lightStatusListener.onLightAdded(hueBridge, light);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.remove(lightStatusListener);\n-        if (result) {\n-            // stop stop light polling\n-            if (lightStatusListeners.isEmpty()) {\n-                stopLightPolling();\n-            }\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.remove(lightId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean registerSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.add(sensorStatusListener);\n-        if (result && hueBridge != null) {\n-            // start sensor polling only if a sensor handler has been registered\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.put(sensorId, sensorStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startSensorPolling();\n-            // inform the listener initially about all sensors and their states\n-            for (FullSensor sensor : lastSensorStates.values()) {\n+            final FullSensor sensor = lastSensorStates.get(sensorId);\n+            if (sensor != null) {\n                 sensorStatusListener.onSensorAdded(hueBridge, sensor);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.remove(sensorStatusListener);\n-        if (result) {\n-            // stop sensor polling\n-            if (sensorStatusListeners.isEmpty()) {\n-                stopSensorPolling();\n-            }\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.remove(sensorId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzE2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957165", "bodyText": "Moved start and stop polling. So not necessary anymore.", "author": "DerOetzi", "createdAt": "2020-05-02T13:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\nindex 0963386e22..f144a589b4 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n\n@@ -630,8 +622,9 @@ public class HueBridgeHandler extends ConfigStatusBridgeHandler implements HueCl\n     public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n         if (discoveryListener == null) {\n             discoveryListener = listener;\n-            startLightPolling();\n-            startSensorPolling();\n+\n+            getFullLights().forEach(listener::addLightDiscovery);\n+            getFullSensors().forEach(listener::addSensorDiscovery);\n \n             return true;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDM0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940347", "bodyText": "Light and sensor states have to be pushed to the discovery listener. This was done before your changes.", "author": "lolodomo", "createdAt": "2020-05-02T10:10:44Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3MzU2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418973565", "bodyText": "Pushing again on registration. Please have a look.", "author": "DerOetzi", "createdAt": "2020-05-02T15:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\nindex 0963386e22..f144a589b4 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n\n@@ -630,8 +622,9 @@ public class HueBridgeHandler extends ConfigStatusBridgeHandler implements HueCl\n     public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n         if (discoveryListener == null) {\n             discoveryListener = listener;\n-            startLightPolling();\n-            startSensorPolling();\n+\n+            getFullLights().forEach(listener::addLightDiscovery);\n+            getFullSensors().forEach(listener::addSensorDiscovery);\n \n             return true;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940500", "bodyText": "With your changes, this check becomes useless (it was useful before).", "author": "lolodomo", "createdAt": "2020-05-02T10:12:18Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -440,15 +443,28 @@ private StateUpdate createBrightnessStateUpdate(int currentBrightness, int newBr\n     }\n \n     @Override\n-    public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n+    public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n+        // TODO Maybe this check is obsolete", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzI1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957255", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-05-02T13:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUwMA=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\nindex 439bd9c7c7..89e59a122f 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\n\n@@ -446,24 +446,20 @@ public class HueLightHandler extends BaseThingHandler implements LightStatusList\n     public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n-        // TODO Maybe this check is obsolete\n-        if (!fullLight.getId().equals(lightId)) {\n-            logger.trace(\"Received state change for another handler's light ({}). Will be ignored.\", fullLight.getId());\n-            return false;\n-        }\n-\n         if (System.currentTimeMillis() - lastTimeCmd <= BYPASS_LIGHT_POLL_DURATION) {\n-            logger.trace(\"Bypass light update after command ({}).\", fullLight.getId());\n+            logger.debug(\"Bypass light update after command ({}).\", lightId);\n             return false;\n         }\n \n-        final FullLight lastState = lastFullLight;\n-        if (lastState == null || !lastState.equals(fullLight)) {\n+        final FullLight lastLight = lastFullLight;\n+        if (lastLight == null || !lastLight.getState().equals(fullLight.getState())) {\n             lastFullLight = fullLight;\n         } else {\n             return true;\n         }\n \n+        logger.trace(\"New state for light {}\", lightId);\n+\n         initializeProperties(fullLight);\n \n         lastSentColorTemp = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUxOA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940518", "bodyText": "With your changes, this check becomes useless (it was useful before).", "author": "lolodomo", "createdAt": "2020-05-02T10:12:40Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzI2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957267", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-05-02T13:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\nindex 439bd9c7c7..89e59a122f 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\n\n@@ -523,23 +519,17 @@ public class HueLightHandler extends BaseThingHandler implements LightStatusList\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.light-not-reachable\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.light-not-reachable\");\n     }\n \n     @Override\n     public void onLightAdded(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n-            onLightStateChanged(bridge, light);\n-        }\n+        onLightStateChanged(bridge, light);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940527", "bodyText": "With your changes, this check becomes useless (it was useful before).", "author": "lolodomo", "createdAt": "2020-05-02T10:12:47Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n         }\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzI4OA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957288", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-05-02T13:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\nindex 439bd9c7c7..89e59a122f 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\n\n@@ -523,23 +519,17 @@ public class HueLightHandler extends BaseThingHandler implements LightStatusList\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.light-not-reachable\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.light-not-reachable\");\n     }\n \n     @Override\n     public void onLightAdded(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n-            onLightStateChanged(bridge, light);\n-        }\n+        onLightStateChanged(bridge, light);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUzMg==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940532", "bodyText": "With your changes, this check becomes useless (it was useful before).", "author": "lolodomo", "createdAt": "2020-05-02T10:12:54Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n         }\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.light-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onLightAdded(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzMwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957300", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-05-02T13:10:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\nindex 439bd9c7c7..89e59a122f 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\n\n@@ -523,23 +519,17 @@ public class HueLightHandler extends BaseThingHandler implements LightStatusList\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.light-not-reachable\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.light-not-reachable\");\n     }\n \n     @Override\n     public void onLightAdded(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n-            onLightStateChanged(bridge, light);\n-        }\n+        onLightStateChanged(bridge, light);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940566", "bodyText": "With your changes, this check becomes useless (it was useful before).", "author": "lolodomo", "createdAt": "2020-05-02T10:13:20Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -227,15 +224,23 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n     }\n \n     @Override\n-    public void onSensorStateChanged(@Nullable HueBridge bridge, FullSensor sensor) {\n+    public boolean onSensorStateChanged(@Nullable HueBridge bridge, FullSensor sensor) {\n         logger.trace(\"onSensorStateChanged() was called\");\n \n+        // TODO Maybe this check is obsolete", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzMwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957305", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-05-02T13:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\nindex 753bb00146..a0833bc789 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\n\n@@ -227,19 +227,15 @@ public abstract class HueSensorHandler extends BaseThingHandler implements Senso\n     public boolean onSensorStateChanged(@Nullable HueBridge bridge, FullSensor sensor) {\n         logger.trace(\"onSensorStateChanged() was called\");\n \n-        // TODO Maybe this check is obsolete\n-        if (!sensor.getId().equals(sensorId)) {\n-            logger.trace(\"Received state change for another handler's sensor ({}). Will be ignored.\", sensor.getId());\n-            return false;\n-        }\n-\n-        final FullSensor lastState = lastFullSensor;\n-        if (lastState == null || !lastState.equals(sensor)) {\n+        final FullSensor lastSensor = lastFullSensor;\n+        if (lastSensor == null || !lastSensor.getState().equals(sensor.getState())) {\n             lastFullSensor = sensor;\n         } else {\n             return true;\n         }\n \n+        logger.trace(\"New state for sensor {}\", sensorId);\n+\n         initializeProperties(sensor);\n \n         if (Boolean.TRUE.equals(sensor.getConfig().get(CONFIG_REACHABLE))) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940583", "bodyText": "With your changes, this check becomes useless (it was useful before).", "author": "lolodomo", "createdAt": "2020-05-02T10:13:32Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.conf-error-wrong-sensor-id\");\n         }\n     }\n \n     @Override\n     public void onSensorAdded(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzMxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957319", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-05-02T13:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\nindex 753bb00146..a0833bc789 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\n\n@@ -331,23 +327,17 @@ public abstract class HueSensorHandler extends BaseThingHandler implements Senso\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.conf-error-wrong-sensor-id\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.conf-error-wrong-sensor-id\");\n     }\n \n     @Override\n     public void onSensorAdded(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete\n-            onSensorStateChanged(bridge, sensor);\n-        }\n+        onSensorStateChanged(bridge, sensor);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940589", "bodyText": "With your changes, this check becomes useless (it was useful before).", "author": "lolodomo", "createdAt": "2020-05-02T10:13:36Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzMzNg==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957336", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-05-02T13:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\nindex 753bb00146..a0833bc789 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\n\n@@ -331,23 +327,17 @@ public abstract class HueSensorHandler extends BaseThingHandler implements Senso\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.conf-error-wrong-sensor-id\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.conf-error-wrong-sensor-id\");\n     }\n \n     @Override\n     public void onSensorAdded(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete\n-            onSensorStateChanged(bridge, sensor);\n-        }\n+        onSensorStateChanged(bridge, sensor);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDYwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940604", "bodyText": "With your changes, this check becomes useless (it was useful before).", "author": "lolodomo", "createdAt": "2020-05-02T10:13:52Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzM0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957348", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-05-02T13:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\nindex 753bb00146..a0833bc789 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\n\n@@ -331,23 +327,17 @@ public abstract class HueSensorHandler extends BaseThingHandler implements Senso\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.conf-error-wrong-sensor-id\");\n-        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.conf-error-wrong-sensor-id\");\n     }\n \n     @Override\n     public void onSensorAdded(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete\n-            onSensorStateChanged(bridge, sensor);\n-        }\n+        onSensorStateChanged(bridge, sensor);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDg1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940852", "bodyText": "Why not lastFullSensor ?", "author": "lolodomo", "createdAt": "2020-05-02T10:16:15Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -212,7 +209,7 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n                 return;\n             }\n \n-            FullSensor sensor = getSensor();\n+            FullSensor sensor = hueBridge.getSensorById(sensorId);", "originalCommit": "29fb62491417c189cce393042cbd97dc4e803e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzM5MA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957390", "bodyText": "That's a good question ;). Removed", "author": "DerOetzi", "createdAt": "2020-05-02T13:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\nindex 753bb00146..a0833bc789 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java\n\n@@ -209,7 +209,7 @@ public abstract class HueSensorHandler extends BaseThingHandler implements Senso\n                 return;\n             }\n \n-            FullSensor sensor = hueBridge.getSensorById(sensorId);\n+            FullSensor sensor = lastFullSensor;\n             if (sensor == null) {\n                 logger.debug(\"hue sensor not known on bridge. Cannot handle command.\");\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n"}}, {"oid": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "url": "https://github.com/openhab/openhab-addons/commit/38c256aa7e7d9cb8f8515327ad4a42116947b08c", "message": "[hue] Push states to discovery service on registration\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-02T17:10:31Z", "type": "forcePushed"}, {"oid": "8d733e82d82f00d0d1d95a9ae82f259ed0da15b0", "url": "https://github.com/openhab/openhab-addons/commit/8d733e82d82f00d0d1d95a9ae82f259ed0da15b0", "message": "[hue] Prepare for merge\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-02T18:33:57Z", "type": "forcePushed"}, {"oid": "d167d68027c05142a90296928d99427c478ed265", "url": "https://github.com/openhab/openhab-addons/commit/d167d68027c05142a90296928d99427c478ed265", "message": "[hue] Rebased group change\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-03T17:55:16Z", "type": "forcePushed"}, {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7", "url": "https://github.com/openhab/openhab-addons/commit/64ad3e34f81d0e0c9b704e015cc79d82afd4eae7", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-05T11:02:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r422660378", "bodyText": "Why not use the ThingUID instead of device is (String) as key? This way we can think about a even greater refactoring and combine all different listener interfaces into one single StatusListener interface. Is that possible?\nAnother idea which came to my mind was to improve registration of the listeners by using BridgeHandler#childHandlerInitialized method. This way the framework takes care of whole initialization process of bridge and things in the correct order and we can completely remove the logic from the Hue binding.", "author": "cweitkamp", "createdAt": "2020-05-10T15:28:30Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -84,24 +83,20 @@\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n+    private static final long BYPASS_MIN_DURATION_BEFORE_CMD = 1500L;\n \n-    private static enum StatusType {\n-        ADDED,\n-        REMOVED,\n-        GONE,\n-        CHANGED\n-    }\n+    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n \n     private final Logger logger = LoggerFactory.getLogger(HueBridgeHandler.class);\n \n     private final Map<String, FullLight> lastLightStates = new ConcurrentHashMap<>();\n     private final Map<String, FullSensor> lastSensorStates = new ConcurrentHashMap<>();\n     private final Map<String, FullGroup> lastGroupStates = new ConcurrentHashMap<>();\n \n-    private final List<LightStatusListener> lightStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<SensorStatusListener> sensorStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<GroupStatusListener> groupStatusListeners = new CopyOnWriteArrayList<>();\n+    private @Nullable HueLightDiscoveryService discoveryService;\n+    private final Map<String, LightStatusListener> lightStatusListeners = new ConcurrentHashMap<>();", "originalCommit": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5Mzc3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r423493774", "bodyText": "I already thought about a Generic StatusListener interface. I can give this a try this evening. And one thing I although thought about is to move update(Light|Sensor|Group)State methods to the belonging things and reverse the logic so they get the hueBridge from inside. Because in my opinion this is mainly logic from inside.\n\nWhy not use the ThingUID instead of device is (String) as key?\n\nWhat is not clear to me is how the polling jobs can determine the right listener then? Do you have an example?", "author": "DerOetzi", "createdAt": "2020-05-12T06:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczODAxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r423738016", "bodyText": "I thought about this again. And maybe we should do this on a new PR for two reasons:\nFirst this PR is mainly about fixing the polling issue after command, and I think this maybe intransparent to hide this huge refactoring behind.\nSecond this huge refactoring will surely take some time with all needed reviews and discussions. In my opinion we should bring this fix to next release first, before starting the process of refactoring.\nWhat do you think about this @cweitkamp?", "author": "DerOetzi", "createdAt": "2020-05-12T13:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NjYxOA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r424246618", "bodyText": "What is not clear to me is how the polling jobs can determine the right listener then?\n\nYou probably have to change the related methods in the listener interfaces too. They can return the ThingUID as well.\n\nWhat do you think about this @cweitkamp?\n\nOf course. Feel free to create as much PRs as you like.", "author": "cweitkamp", "createdAt": "2020-05-13T08:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4NTMyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r424485325", "bodyText": "You probably have to change the related methods in the listener interfaces too. They can return the ThingUID as well.\n\nThe registration of the listener is not my problem on this point. That's easy, like you suggested for example the LightListener can return the ThingUID instead of the lightID. But how can the light polling job inside the bridgeHandler find the correct LightThingHandler in the map.\nI don't see a problem when users use the ThingUID suggested by the system in their configuration like this\n0220 1 \"LED Livingroom\" @ \"Controls\" [ lightId=\"1\" ]\nIn this case the polling job can automatically  generate the ThingUID with the information it got from hardware and select the right listener from Map to update the state.\nBut if users use something like this in their configuration:\n0220 livingroomled \"LED Livingroom\" @ \"Controls\" [ lightId=\"1\" ]\nHow can pollingJob select in this case the correct listener from Map without iterate over all listeners again, because iteration is the thing I want to avoid with the map?", "author": "DerOetzi", "createdAt": "2020-05-13T14:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4NjY3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r424486670", "bodyText": "Of course. Feel free to create as much PRs as you like.\n\nI know but can we finish this one first, so I can base further refactoring on the result of this PR.", "author": "DerOetzi", "createdAt": "2020-05-13T14:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4ODA1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r425388052", "bodyText": "Thanks for the detailed description. I finally got the point. We of course cannot bet on the users way to name his ThingUID.", "author": "cweitkamp", "createdAt": "2020-05-14T19:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "a4d90cf116d8a802e458d54a850bc1615916182e", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\nindex 89bbb9c40c..1f1885e9a4 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n\n@@ -83,20 +84,24 @@ public class HueBridgeHandler extends ConfigStatusBridgeHandler implements HueCl\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    private static final long BYPASS_MIN_DURATION_BEFORE_CMD = 1500L;\n-\n     private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n \n+    private static enum StatusType {\n+        ADDED,\n+        REMOVED,\n+        GONE,\n+        CHANGED\n+    }\n+\n     private final Logger logger = LoggerFactory.getLogger(HueBridgeHandler.class);\n \n     private final Map<String, FullLight> lastLightStates = new ConcurrentHashMap<>();\n     private final Map<String, FullSensor> lastSensorStates = new ConcurrentHashMap<>();\n     private final Map<String, FullGroup> lastGroupStates = new ConcurrentHashMap<>();\n \n-    private @Nullable HueLightDiscoveryService discoveryService;\n-    private final Map<String, LightStatusListener> lightStatusListeners = new ConcurrentHashMap<>();\n-    private final Map<String, SensorStatusListener> sensorStatusListeners = new ConcurrentHashMap<>();\n-    private final Map<String, GroupStatusListener> groupStatusListeners = new ConcurrentHashMap<>();\n+    private final List<LightStatusListener> lightStatusListeners = new CopyOnWriteArrayList<>();\n+    private final List<SensorStatusListener> sensorStatusListeners = new CopyOnWriteArrayList<>();\n+    private final List<GroupStatusListener> groupStatusListeners = new CopyOnWriteArrayList<>();\n \n     final ReentrantLock pollingLock = new ReentrantLock();\n \n"}}, {"oid": "15824ff9ef8445909589b578f39cc62138a0e2e1", "url": "https://github.com/openhab/openhab-addons/commit/15824ff9ef8445909589b578f39cc62138a0e2e1", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-12T13:24:02Z", "type": "forcePushed"}, {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e", "url": "https://github.com/openhab/openhab-addons/commit/5304327dcdc6d7735f85a2ad878335489e2d223e", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-27T19:07:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MTU1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r431391554", "bodyText": "Just to handle potential null values\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (lastState == null || !lastState.getState().equals(group.getState())) {\n          \n          \n            \n                    if (lastState == null || !Objects.equals(lastState.getState(), group.getState())) {", "author": "cpmeister", "createdAt": "2020-05-27T19:27:13Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java", "diffHunk": "@@ -315,14 +317,18 @@ public void channelLinked(ChannelUID channelUID) {\n     }\n \n     @Override\n-    public void onGroupStateChanged(@Nullable HueBridge bridge, FullGroup group) {\n+    public boolean onGroupStateChanged(@Nullable HueBridge bridge, FullGroup group) {\n         logger.trace(\"onGroupStateChanged() was called for group {}\", group.getId());\n \n-        if (!group.getId().equals(groupId)) {\n-            logger.trace(\"Received state change for another handler's group ({}). Will be ignored.\", group.getId());\n-            return;\n+        final FullGroup lastState = lastFullGroup;\n+        if (lastState == null || !lastState.getState().equals(group.getState())) {", "originalCommit": "5304327dcdc6d7735f85a2ad878335489e2d223e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a4d90cf116d8a802e458d54a850bc1615916182e", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java\nindex b67bdc9ce3..6e34f78f4b 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java\n\n@@ -317,18 +336,14 @@ public class HueGroupHandler extends BaseThingHandler implements GroupStatusList\n     }\n \n     @Override\n-    public boolean onGroupStateChanged(@Nullable HueBridge bridge, FullGroup group) {\n+    public void onGroupStateChanged(@Nullable HueBridge bridge, FullGroup group) {\n         logger.trace(\"onGroupStateChanged() was called for group {}\", group.getId());\n \n-        final FullGroup lastState = lastFullGroup;\n-        if (lastState == null || !lastState.getState().equals(group.getState())) {\n-            lastFullGroup = group;\n-        } else {\n-            return true;\n+        if (!group.getId().equals(groupId)) {\n+            logger.trace(\"Received state change for another handler's group ({}). Will be ignored.\", group.getId());\n+            return;\n         }\n \n-        logger.trace(\"New state for group {}\", groupId);\n-\n         lastSentColorTemp = null;\n         lastSentBrightness = null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjgwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r431392803", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (lastState == null || !lastState.getState().equals(fullLight.getState())) {\n          \n          \n            \n                    if (lastState == null || !Objects.equals(lastState.getState(), fullLight.getState())) {", "author": "cpmeister", "createdAt": "2020-05-27T19:29:33Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -434,14 +437,33 @@ private StateUpdate createBrightnessStateUpdate(int currentBrightness, int newBr\n     }\n \n     @Override\n-    public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n+    public void setPollBypass(long bypassTime) {\n+        endBypassTime = System.currentTimeMillis() + bypassTime;\n+    }\n+\n+    @Override\n+    public void unsetPollBypass() {\n+        endBypassTime = 0L;\n+    }\n+\n+    @Override\n+    public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n-        if (!fullLight.getId().equals(lightId)) {\n-            logger.trace(\"Received state change for another handler's light ({}). Will be ignored.\", fullLight.getId());\n-            return;\n+        if (System.currentTimeMillis() <= endBypassTime) {\n+            logger.debug(\"Bypass light update after command ({}).\", lightId);\n+            return false;\n         }\n \n+        final FullLight lastState = lastFullLight;\n+        if (lastState == null || !lastState.getState().equals(fullLight.getState())) {", "originalCommit": "5304327dcdc6d7735f85a2ad878335489e2d223e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2NjkwNw==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r432366907", "bodyText": "Changed", "author": "DerOetzi", "createdAt": "2020-05-29T09:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MTY2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r432371660", "bodyText": "Changed in Group and Sensor handler as well.", "author": "DerOetzi", "createdAt": "2020-05-29T09:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a4d90cf116d8a802e458d54a850bc1615916182e", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\nindex a1fbabd17d..cba5a399eb 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java\n\n@@ -437,32 +455,20 @@ public class HueLightHandler extends BaseThingHandler implements LightStatusList\n     }\n \n     @Override\n-    public void setPollBypass(long bypassTime) {\n-        endBypassTime = System.currentTimeMillis() + bypassTime;\n-    }\n-\n-    @Override\n-    public void unsetPollBypass() {\n-        endBypassTime = 0L;\n-    }\n-\n-    @Override\n-    public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n+    public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n-        if (System.currentTimeMillis() <= endBypassTime) {\n-            logger.debug(\"Bypass light update after command ({}).\", lightId);\n-            return false;\n+        if (!fullLight.getId().equals(lightId)) {\n+            logger.trace(\"Received state change for another handler's light ({}). Will be ignored.\", fullLight.getId());\n+            return;\n         }\n \n-        final FullLight lastState = lastFullLight;\n-        if (lastState == null || !lastState.getState().equals(fullLight.getState())) {\n-            lastFullLight = fullLight;\n-        } else {\n-            return true;\n+        if (System.currentTimeMillis() - lastTimeCmd <= BYPASS_LIGHT_POLL_DURATION) {\n+            logger.trace(\"Bypass light update after command ({}).\", fullLight.getId());\n+            return;\n         }\n \n-        logger.trace(\"New state for light {}\", lightId);\n+        lastFullLight = fullLight;\n \n         initializeProperties(fullLight);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMTE2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r431411167", "bodyText": "orphan semicolon", "author": "cpmeister", "createdAt": "2020-05-27T20:05:28Z", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -401,21 +445,46 @@ public void updateGroupState(FullGroup group, StateUpdate stateUpdate) {\n         }\n     }\n \n-    private void handleStateUpdateException(FullLight light, StateUpdate stateUpdate, Throwable e) {\n+    private void setGroupPollBypass(FullGroup group, long bypassTime) {\n+        group.getLights().forEach((lightId) -> {\n+            final LightStatusListener listener = lightStatusListeners.get(lightId);\n+            if (listener != null) {\n+                listener.setPollBypass(bypassTime);\n+            }\n+        });\n+    }\n+\n+    private void unsetGroupPollBypass(FullGroup group) {\n+        group.getLights().forEach((lightId) -> {\n+            final LightStatusListener listener = lightStatusListeners.get(lightId);\n+            if (listener != null) {\n+                listener.unsetPollBypass();\n+                ;", "originalCommit": "5304327dcdc6d7735f85a2ad878335489e2d223e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2NzAyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r432367020", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-05-29T09:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMTE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a4d90cf116d8a802e458d54a850bc1615916182e", "chunk": "diff --git a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\nindex 2adf61515f..1f1885e9a4 100644\n--- a/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n+++ b/bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java\n\n@@ -445,46 +402,21 @@ public class HueBridgeHandler extends ConfigStatusBridgeHandler implements HueCl\n         }\n     }\n \n-    private void setGroupPollBypass(FullGroup group, long bypassTime) {\n-        group.getLights().forEach((lightId) -> {\n-            final LightStatusListener listener = lightStatusListeners.get(lightId);\n-            if (listener != null) {\n-                listener.setPollBypass(bypassTime);\n-            }\n-        });\n-    }\n-\n-    private void unsetGroupPollBypass(FullGroup group) {\n-        group.getLights().forEach((lightId) -> {\n-            final LightStatusListener listener = lightStatusListeners.get(lightId);\n-            if (listener != null) {\n-                listener.unsetPollBypass();\n-                ;\n-            }\n-        });\n-    }\n-\n-    private void handleStateUpdateException(LightStatusListener listener, FullLight light, StateUpdate stateUpdate,\n-            long fadeTime, Throwable e) {\n+    private void handleStateUpdateException(FullLight light, StateUpdate stateUpdate, Throwable e) {\n         if (e instanceof DeviceOffException) {\n             if (stateUpdate.getColorTemperature() != null && stateUpdate.getBrightness() == null) {\n                 // If there is only a change of the color temperature, we do not want the light\n                 // to be turned on (i.e. change its brightness).\n                 return;\n             } else {\n-                updateLightState(listener, light, LightStateConverter.toOnOffLightState(OnOffType.ON), fadeTime);\n-                updateLightState(listener, light, stateUpdate, fadeTime);\n+                updateLightState(light, LightStateConverter.toOnOffLightState(OnOffType.ON));\n+                updateLightState(light, stateUpdate);\n             }\n         } else if (e instanceof IOException) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         } else if (e instanceof EntityNotAvailableException) {\n             logger.debug(\"Error while accessing light: {}\", e.getMessage(), e);\n-            final HueLightDiscoveryService discovery = discoveryService;\n-            if (discovery != null) {\n-                discovery.removeLightDiscovery(light);\n-            }\n-\n-            listener.onLightGone(hueBridge, light);\n+            notifyLightStatusListeners(light, StatusType.GONE);\n         } else if (e instanceof ApiException) {\n             // This should not happen - if it does, it is most likely some bug that should be reported.\n             logger.warn(\"Error while accessing light: {}\", e.getMessage(), e);\n"}}, {"oid": "a4d90cf116d8a802e458d54a850bc1615916182e", "url": "https://github.com/openhab/openhab-addons/commit/a4d90cf116d8a802e458d54a850bc1615916182e", "message": "[hue] Refactored state handling in LightHandler and fix for #7039\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:10Z", "type": "commit"}, {"oid": "6fa50f02b564a974fb8d4d13c23de9696feb5b41", "url": "https://github.com/openhab/openhab-addons/commit/6fa50f02b564a974fb8d4d13c23de9696feb5b41", "message": "[hue] Refactoring state handling bridge\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:10Z", "type": "commit"}, {"oid": "d91f4243027a93026d5655e4ec2b24665d209b3c", "url": "https://github.com/openhab/openhab-addons/commit/d91f4243027a93026d5655e4ec2b24665d209b3c", "message": "[hue] Refactored sensor state handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:10Z", "type": "commit"}, {"oid": "bc3cc60dde1bdd468818d8cb44355118498fd49a", "url": "https://github.com/openhab/openhab-addons/commit/bc3cc60dde1bdd468818d8cb44355118498fd49a", "message": "[hue] Add sensor state to last state on discovery\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:10Z", "type": "commit"}, {"oid": "e772b17ec9a407cc90e6e9b5f20ef70eddbff65d", "url": "https://github.com/openhab/openhab-addons/commit/e772b17ec9a407cc90e6e9b5f20ef70eddbff65d", "message": "[hue] Refactored polling and state handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:10Z", "type": "commit"}, {"oid": "49e61276454144c53ff50c7a99c8e34c0a23686e", "url": "https://github.com/openhab/openhab-addons/commit/49e61276454144c53ff50c7a99c8e34c0a23686e", "message": "[hue] Refactored discovery service and small fixes\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:10Z", "type": "commit"}, {"oid": "1b6ea22ab1546cc0b0287b60be40342cc113a2a7", "url": "https://github.com/openhab/openhab-addons/commit/1b6ea22ab1546cc0b0287b60be40342cc113a2a7", "message": "[hue] Push states to discovery service on registration\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:10Z", "type": "commit"}, {"oid": "73a76dfc715fbb009745c2ca840a1deceeeece68", "url": "https://github.com/openhab/openhab-addons/commit/73a76dfc715fbb009745c2ca840a1deceeeece68", "message": "[hue] Small code optimization\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:10Z", "type": "commit"}, {"oid": "b984c87dec984e3c2f830f08479ce0383004eb24", "url": "https://github.com/openhab/openhab-addons/commit/b984c87dec984e3c2f830f08479ce0383004eb24", "message": "[hue] Small rename\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:11Z", "type": "commit"}, {"oid": "88a566999ed636ce5b20dae244a4a4254aae6530", "url": "https://github.com/openhab/openhab-addons/commit/88a566999ed636ce5b20dae244a4a4254aae6530", "message": "[hue] Solving merge conflicts\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:11Z", "type": "commit"}, {"oid": "84c07d6cc4ebc6c2ce69ffdc393cd469f421bcea", "url": "https://github.com/openhab/openhab-addons/commit/84c07d6cc4ebc6c2ce69ffdc393cd469f421bcea", "message": "[hue] Prepare for merge\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:11Z", "type": "commit"}, {"oid": "e9398cb7d87f2201329d251f56628705b9408ae1", "url": "https://github.com/openhab/openhab-addons/commit/e9398cb7d87f2201329d251f56628705b9408ae1", "message": "[hue] Small fixes after merge\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:11Z", "type": "commit"}, {"oid": "a9ea2685a2aaaf03b339c7519065c4159af99b49", "url": "https://github.com/openhab/openhab-addons/commit/a9ea2685a2aaaf03b339c7519065c4159af99b49", "message": "[hue] bypass rewrite\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:21:11Z", "type": "commit"}, {"oid": "1290d7a45c5ba95e01679dabb7c8c9f20f4acd8c", "url": "https://github.com/openhab/openhab-addons/commit/1290d7a45c5ba95e01679dabb7c8c9f20f4acd8c", "message": "[hue] Rebased group change\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:25:35Z", "type": "commit"}, {"oid": "89becabccac2b79cb2cf78689090f3ca3789326b", "url": "https://github.com/openhab/openhab-addons/commit/89becabccac2b79cb2cf78689090f3ca3789326b", "message": "[hue] Revert unnecassary StateUpdate change\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:25:35Z", "type": "commit"}, {"oid": "8cbc30bc1275100bbc5067b2c8b3d1f6613873d6", "url": "https://github.com/openhab/openhab-addons/commit/8cbc30bc1275100bbc5067b2c8b3d1f6613873d6", "message": "[hue] Group Bypass Update after command\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:25:35Z", "type": "commit"}, {"oid": "e5fc343d86ced5017a5445680871f6fb4610a273", "url": "https://github.com/openhab/openhab-addons/commit/e5fc343d86ced5017a5445680871f6fb4610a273", "message": "[hue] Small refactoring and documentation\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:25:35Z", "type": "commit"}, {"oid": "606e80b66e8a1c8f5c0e7489fd57545151afb254", "url": "https://github.com/openhab/openhab-addons/commit/606e80b66e8a1c8f5c0e7489fd57545151afb254", "message": "[hue] Fixed itest Discovery Service\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:25:36Z", "type": "commit"}, {"oid": "d873cae911264293c730681255214954fef246c3", "url": "https://github.com/openhab/openhab-addons/commit/d873cae911264293c730681255214954fef246c3", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:25:36Z", "type": "commit"}, {"oid": "74a6b04f34b6caee4d32eb2d891412f7ba190e0f", "url": "https://github.com/openhab/openhab-addons/commit/74a6b04f34b6caee4d32eb2d891412f7ba190e0f", "message": "[hue] Adressed review comments\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:25:36Z", "type": "commit"}, {"oid": "74a6b04f34b6caee4d32eb2d891412f7ba190e0f", "url": "https://github.com/openhab/openhab-addons/commit/74a6b04f34b6caee4d32eb2d891412f7ba190e0f", "message": "[hue] Adressed review comments\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:25:36Z", "type": "forcePushed"}, {"oid": "42460f28dc93209efb810b805a9ab95c90c49ae1", "url": "https://github.com/openhab/openhab-addons/commit/42460f28dc93209efb810b805a9ab95c90c49ae1", "message": "[hue] addressed mor review comments\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-05-29T09:37:56Z", "type": "commit"}]}