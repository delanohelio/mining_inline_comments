{"pr_number": 8754, "pr_title": "[touchwand] Touchwand Binding initial contribution  - migration to OH3 ", "pr_createdAt": "2020-10-14T18:09:47Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8754", "timeline": [{"oid": "bc5dc9d78acfa78e536f12584c119bd1b9eacc79", "url": "https://github.com/openhab/openhab-addons/commit/bc5dc9d78acfa78e536f12584c119bd1b9eacc79", "message": "initial migration to OH 3\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-14T15:55:12Z", "type": "commit"}, {"oid": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "url": "https://github.com/openhab/openhab-addons/commit/43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "message": "fix tab in pom.xml\nadd to codeowners\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-14T17:57:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4MzA4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505883084", "bodyText": "Add \"id\" as constant in your binding constants class then use the constant instead.", "author": "cpmeister", "createdAt": "2020-10-15T21:48:26Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * The {@link TouchWandBaseUnitHandler} is responsible for handling commands and status updates\n+ * for TouchWand units. This is an abstract class , units should implement the specific command\n+ * handling and status updates.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public abstract class TouchWandBaseUnitHandler extends BaseThingHandler implements TouchWandUnitUpdateListener {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(TouchWandBaseUnitHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n+            Arrays.asList(THING_TYPE_SHUTTER, THING_TYPE_SWITCH, THING_TYPE_WALLCONTROLLER, THING_TYPE_DIMMER));\n+\n+    protected String unitId = \"\";\n+\n+    @Nullable\n+    protected TouchWandBridgeHandler bridgeHandler;\n+\n+    public TouchWandBaseUnitHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // updateTouchWandUnitState(getUnitState(unitId));\n+        } else {\n+            touchWandUnitHandleCommand(command);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        TouchWandBridgeHandler myTmpBridgeHandler = bridgeHandler;\n+        if (myTmpBridgeHandler != null) {\n+            myTmpBridgeHandler.unregisterUpdateListener(this);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null || !(bridge.getHandler() instanceof TouchWandBridgeHandler)) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            logger.warn(\"Trying to initialize {} without a bridge\", getThing().getUID());\n+            return;\n+        }\n+\n+        bridgeHandler = (TouchWandBridgeHandler) bridge.getHandler();\n+\n+        unitId = getThing().getProperties().get(\"id\"); // TouchWand unit id", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e096521ff7efa28cc2525e21fae4fe7bc97ae67c", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java\nindex 1f17d93ab3..b3e1371eef 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java\n\n@@ -89,7 +89,7 @@ public abstract class TouchWandBaseUnitHandler extends BaseThingHandler implemen\n \n         bridgeHandler = (TouchWandBridgeHandler) bridge.getHandler();\n \n-        unitId = getThing().getProperties().get(\"id\"); // TouchWand unit id\n+        unitId = getThing().getProperties().get(HANDLER_PROPERTIES_ID); // TouchWand unit id\n \n         TouchWandBridgeHandler myTmpBridgeHandler = bridgeHandler;\n         if (myTmpBridgeHandler != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4MzU1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505883556", "bodyText": "same with \"name\"", "author": "cpmeister", "createdAt": "2020-10-15T21:48:58Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.discovery;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.TouchWandBridgeHandler;\n+import org.openhab.binding.touchwand.internal.TouchWandUnitStatusUpdateListener;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandUnitDiscoveryService} Discovery service for TouchWand units.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService {\n+\n+    private static final int SEARCH_TIME_SEC = 10;\n+    private static final int SCAN_INTERVAL_SEC = 60;\n+    private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n+    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n+\n+    private @Nullable ScheduledFuture<?> scanningJob;\n+    private List<TouchWandUnitStatusUpdateListener> listeners = new ArrayList<>();\n+\n+    public TouchWandUnitDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME_SEC, true);\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        if (touchWandBridgeHandler.getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Could not scan units while bridge offline\");\n+            return;\n+        }\n+\n+        logger.debug(\"Starting TouchWand discovery on bridge {}\", touchWandBridgeHandler.getThing().getUID());\n+        String response = touchWandBridgeHandler.touchWandClient.cmdListUnits();\n+        if (response.isEmpty()) {\n+            return;\n+        }\n+\n+        JsonParser jsonParser = new JsonParser();\n+        try {\n+            JsonArray jsonArray = jsonParser.parse(response).getAsJsonArray();\n+            if (jsonArray.isJsonArray()) {\n+                try {\n+                    for (JsonElement unit : jsonArray) {\n+                        TouchWandUnitData touchWandUnit;\n+                        touchWandUnit = TouchWandUnitFromJson.parseResponse(unit.getAsJsonObject());\n+                        if (touchWandUnit == null) {\n+                            continue;\n+                        }\n+                        if (!touchWandBridgeHandler.isAddSecondaryControllerUnits()) {\n+                            if (!Arrays.asList(CONNECTIVITY_OPTIONS).contains(touchWandUnit.getConnectivity())) {\n+                                continue;\n+                            }\n+                        }\n+                        String type = touchWandUnit.getType();\n+                        if (!Arrays.asList(SUPPORTED_TOUCHWAND_TYPES).contains(type)) {\n+                            logger.debug(\"Unit discovery skipping unsupported unit type : {} \", type);\n+                            continue;\n+                        }\n+                        switch (type) {\n+                            case TYPE_WALLCONTROLLER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_WALLCONTROLLER);\n+                                break;\n+                            case TYPE_SWITCH:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SWITCH);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_DIMMER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_DIMMER);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_SHUTTER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SHUTTER);\n+                                break;\n+                            default:\n+                                continue;\n+                        }\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    logger.warn(\"Could not parse unit {}\", e.getMessage());\n+                }\n+            }\n+        } catch (JsonSyntaxException msg) {\n+            logger.warn(\"Could not parse list units response {}\", msg.getMessage());\n+        }\n+    }\n+\n+    private void notifyListeners(TouchWandUnitData touchWandUnit) {\n+        for (TouchWandUnitStatusUpdateListener listener : listeners) {\n+            listener.onDataReceived(touchWandUnit);\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        removeOlderResults(getTimestampOfLastScan());\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+        removeOlderResults(new Date().getTime(), touchWandBridgeHandler.getThing().getUID());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        removeOlderResults(System.currentTimeMillis(), touchWandBridgeHandler.getThing().getUID());\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        ScheduledFuture<?> localScanningJob = scanningJob;\n+        if (localScanningJob == null || localScanningJob.isCancelled()) {\n+            scanningJob = scheduler.scheduleWithFixedDelay(this::startScan, LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC,\n+                    SCAN_INTERVAL_SEC, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        ScheduledFuture<?> myScanningJob = scanningJob;\n+        if (myScanningJob != null) {\n+            myScanningJob.cancel(true);\n+            scanningJob = null;\n+        }\n+    }\n+\n+    public synchronized void registerListener(TouchWandUnitStatusUpdateListener listener) {\n+        if (!listeners.contains(listener)) {\n+            logger.debug(\"Adding TouchWandWebSocket listener {}\", listener);\n+            listeners.add(listener);\n+        }\n+    }\n+\n+    public synchronized void unregisterListener(TouchWandUnitStatusUpdateListener listener) {\n+        logger.debug(\"Removing TouchWandWebSocket listener {}\", listener);\n+        listeners.remove(listener);\n+    }\n+\n+    @Override\n+    public int getScanTimeout() {\n+        return SEARCH_TIME_SEC;\n+    }\n+\n+    private void addDeviceDiscoveryResult(TouchWandUnitData unit, ThingTypeUID typeUID) {\n+        ThingUID bridgeUID = touchWandBridgeHandler.getThing().getUID();\n+        ThingUID thingUID = new ThingUID(typeUID, bridgeUID, unit.getId().toString());\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"id\", unit.getId().toString());\n+        properties.put(\"name\", unit.getName());", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyMTk0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506521942", "bodyText": "done", "author": "roieg", "createdAt": "2020-10-16T15:03:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4MzU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e096521ff7efa28cc2525e21fae4fe7bc97ae67c", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\nindex 0ce51b8f16..bcb3df3e6a 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n\n@@ -59,7 +59,7 @@ public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n     private static final int SEARCH_TIME_SEC = 10;\n     private static final int SCAN_INTERVAL_SEC = 60;\n     private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n-    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private static final String[] CONNECTIVITY_OPTIONS = { CONNECTIVITY_KNX, CONNECTIVITY_ZWAVE };\n     private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n     private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NTA4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505885085", "bodyText": "Why are you using new Date().getTime() on one but System.currentTimeMillis() on the other?", "author": "cpmeister", "createdAt": "2020-10-15T21:51:04Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.discovery;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.TouchWandBridgeHandler;\n+import org.openhab.binding.touchwand.internal.TouchWandUnitStatusUpdateListener;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandUnitDiscoveryService} Discovery service for TouchWand units.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService {\n+\n+    private static final int SEARCH_TIME_SEC = 10;\n+    private static final int SCAN_INTERVAL_SEC = 60;\n+    private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n+    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n+\n+    private @Nullable ScheduledFuture<?> scanningJob;\n+    private List<TouchWandUnitStatusUpdateListener> listeners = new ArrayList<>();\n+\n+    public TouchWandUnitDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME_SEC, true);\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        if (touchWandBridgeHandler.getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Could not scan units while bridge offline\");\n+            return;\n+        }\n+\n+        logger.debug(\"Starting TouchWand discovery on bridge {}\", touchWandBridgeHandler.getThing().getUID());\n+        String response = touchWandBridgeHandler.touchWandClient.cmdListUnits();\n+        if (response.isEmpty()) {\n+            return;\n+        }\n+\n+        JsonParser jsonParser = new JsonParser();\n+        try {\n+            JsonArray jsonArray = jsonParser.parse(response).getAsJsonArray();\n+            if (jsonArray.isJsonArray()) {\n+                try {\n+                    for (JsonElement unit : jsonArray) {\n+                        TouchWandUnitData touchWandUnit;\n+                        touchWandUnit = TouchWandUnitFromJson.parseResponse(unit.getAsJsonObject());\n+                        if (touchWandUnit == null) {\n+                            continue;\n+                        }\n+                        if (!touchWandBridgeHandler.isAddSecondaryControllerUnits()) {\n+                            if (!Arrays.asList(CONNECTIVITY_OPTIONS).contains(touchWandUnit.getConnectivity())) {\n+                                continue;\n+                            }\n+                        }\n+                        String type = touchWandUnit.getType();\n+                        if (!Arrays.asList(SUPPORTED_TOUCHWAND_TYPES).contains(type)) {\n+                            logger.debug(\"Unit discovery skipping unsupported unit type : {} \", type);\n+                            continue;\n+                        }\n+                        switch (type) {\n+                            case TYPE_WALLCONTROLLER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_WALLCONTROLLER);\n+                                break;\n+                            case TYPE_SWITCH:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SWITCH);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_DIMMER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_DIMMER);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_SHUTTER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SHUTTER);\n+                                break;\n+                            default:\n+                                continue;\n+                        }\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    logger.warn(\"Could not parse unit {}\", e.getMessage());\n+                }\n+            }\n+        } catch (JsonSyntaxException msg) {\n+            logger.warn(\"Could not parse list units response {}\", msg.getMessage());\n+        }\n+    }\n+\n+    private void notifyListeners(TouchWandUnitData touchWandUnit) {\n+        for (TouchWandUnitStatusUpdateListener listener : listeners) {\n+            listener.onDataReceived(touchWandUnit);\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        removeOlderResults(getTimestampOfLastScan());\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+        removeOlderResults(new Date().getTime(), touchWandBridgeHandler.getThing().getUID());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        removeOlderResults(System.currentTimeMillis(), touchWandBridgeHandler.getThing().getUID());", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMDczMA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506530730", "bodyText": "done - aligned both to new Date().getTime()", "author": "roieg", "createdAt": "2020-10-16T15:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NTA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e096521ff7efa28cc2525e21fae4fe7bc97ae67c", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\nindex 0ce51b8f16..bcb3df3e6a 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n\n@@ -59,7 +59,7 @@ public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n     private static final int SEARCH_TIME_SEC = 10;\n     private static final int SCAN_INTERVAL_SEC = 60;\n     private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n-    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private static final String[] CONNECTIVITY_OPTIONS = { CONNECTIVITY_KNX, CONNECTIVITY_ZWAVE };\n     private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n     private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjExNw==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505886117", "bodyText": "Please remove the synchronization on these methods and change your listeners implementation to a CopyOnWriteArraySet instead.", "author": "cpmeister", "createdAt": "2020-10-15T21:52:48Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.discovery;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.TouchWandBridgeHandler;\n+import org.openhab.binding.touchwand.internal.TouchWandUnitStatusUpdateListener;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandUnitDiscoveryService} Discovery service for TouchWand units.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService {\n+\n+    private static final int SEARCH_TIME_SEC = 10;\n+    private static final int SCAN_INTERVAL_SEC = 60;\n+    private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n+    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n+\n+    private @Nullable ScheduledFuture<?> scanningJob;\n+    private List<TouchWandUnitStatusUpdateListener> listeners = new ArrayList<>();\n+\n+    public TouchWandUnitDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME_SEC, true);\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        if (touchWandBridgeHandler.getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Could not scan units while bridge offline\");\n+            return;\n+        }\n+\n+        logger.debug(\"Starting TouchWand discovery on bridge {}\", touchWandBridgeHandler.getThing().getUID());\n+        String response = touchWandBridgeHandler.touchWandClient.cmdListUnits();\n+        if (response.isEmpty()) {\n+            return;\n+        }\n+\n+        JsonParser jsonParser = new JsonParser();\n+        try {\n+            JsonArray jsonArray = jsonParser.parse(response).getAsJsonArray();\n+            if (jsonArray.isJsonArray()) {\n+                try {\n+                    for (JsonElement unit : jsonArray) {\n+                        TouchWandUnitData touchWandUnit;\n+                        touchWandUnit = TouchWandUnitFromJson.parseResponse(unit.getAsJsonObject());\n+                        if (touchWandUnit == null) {\n+                            continue;\n+                        }\n+                        if (!touchWandBridgeHandler.isAddSecondaryControllerUnits()) {\n+                            if (!Arrays.asList(CONNECTIVITY_OPTIONS).contains(touchWandUnit.getConnectivity())) {\n+                                continue;\n+                            }\n+                        }\n+                        String type = touchWandUnit.getType();\n+                        if (!Arrays.asList(SUPPORTED_TOUCHWAND_TYPES).contains(type)) {\n+                            logger.debug(\"Unit discovery skipping unsupported unit type : {} \", type);\n+                            continue;\n+                        }\n+                        switch (type) {\n+                            case TYPE_WALLCONTROLLER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_WALLCONTROLLER);\n+                                break;\n+                            case TYPE_SWITCH:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SWITCH);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_DIMMER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_DIMMER);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_SHUTTER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SHUTTER);\n+                                break;\n+                            default:\n+                                continue;\n+                        }\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    logger.warn(\"Could not parse unit {}\", e.getMessage());\n+                }\n+            }\n+        } catch (JsonSyntaxException msg) {\n+            logger.warn(\"Could not parse list units response {}\", msg.getMessage());\n+        }\n+    }\n+\n+    private void notifyListeners(TouchWandUnitData touchWandUnit) {\n+        for (TouchWandUnitStatusUpdateListener listener : listeners) {\n+            listener.onDataReceived(touchWandUnit);\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        removeOlderResults(getTimestampOfLastScan());\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+        removeOlderResults(new Date().getTime(), touchWandBridgeHandler.getThing().getUID());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        removeOlderResults(System.currentTimeMillis(), touchWandBridgeHandler.getThing().getUID());\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        ScheduledFuture<?> localScanningJob = scanningJob;\n+        if (localScanningJob == null || localScanningJob.isCancelled()) {\n+            scanningJob = scheduler.scheduleWithFixedDelay(this::startScan, LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC,\n+                    SCAN_INTERVAL_SEC, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        ScheduledFuture<?> myScanningJob = scanningJob;\n+        if (myScanningJob != null) {\n+            myScanningJob.cancel(true);\n+            scanningJob = null;\n+        }\n+    }\n+\n+    public synchronized void registerListener(TouchWandUnitStatusUpdateListener listener) {\n+        if (!listeners.contains(listener)) {\n+            logger.debug(\"Adding TouchWandWebSocket listener {}\", listener);\n+            listeners.add(listener);\n+        }\n+    }\n+\n+    public synchronized void unregisterListener(TouchWandUnitStatusUpdateListener listener) {\n+        logger.debug(\"Removing TouchWandWebSocket listener {}\", listener);\n+        listeners.remove(listener);\n+    }", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0MTU4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506541587", "bodyText": "done", "author": "roieg", "createdAt": "2020-10-16T15:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjExNw=="}], "type": "inlineReview", "revised_code": {"commit": "e096521ff7efa28cc2525e21fae4fe7bc97ae67c", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\nindex 0ce51b8f16..bcb3df3e6a 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n\n@@ -59,7 +59,7 @@ public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n     private static final int SEARCH_TIME_SEC = 10;\n     private static final int SCAN_INTERVAL_SEC = 60;\n     private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n-    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private static final String[] CONNECTIVITY_OPTIONS = { CONNECTIVITY_KNX, CONNECTIVITY_ZWAVE };\n     private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n     private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjMyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505886322", "bodyText": "use your constant here.", "author": "cpmeister", "createdAt": "2020-10-15T21:53:15Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.discovery;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.TouchWandBridgeHandler;\n+import org.openhab.binding.touchwand.internal.TouchWandUnitStatusUpdateListener;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandUnitDiscoveryService} Discovery service for TouchWand units.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService {\n+\n+    private static final int SEARCH_TIME_SEC = 10;\n+    private static final int SCAN_INTERVAL_SEC = 60;\n+    private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n+    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n+\n+    private @Nullable ScheduledFuture<?> scanningJob;\n+    private List<TouchWandUnitStatusUpdateListener> listeners = new ArrayList<>();\n+\n+    public TouchWandUnitDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME_SEC, true);\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        if (touchWandBridgeHandler.getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Could not scan units while bridge offline\");\n+            return;\n+        }\n+\n+        logger.debug(\"Starting TouchWand discovery on bridge {}\", touchWandBridgeHandler.getThing().getUID());\n+        String response = touchWandBridgeHandler.touchWandClient.cmdListUnits();\n+        if (response.isEmpty()) {\n+            return;\n+        }\n+\n+        JsonParser jsonParser = new JsonParser();\n+        try {\n+            JsonArray jsonArray = jsonParser.parse(response).getAsJsonArray();\n+            if (jsonArray.isJsonArray()) {\n+                try {\n+                    for (JsonElement unit : jsonArray) {\n+                        TouchWandUnitData touchWandUnit;\n+                        touchWandUnit = TouchWandUnitFromJson.parseResponse(unit.getAsJsonObject());\n+                        if (touchWandUnit == null) {\n+                            continue;\n+                        }\n+                        if (!touchWandBridgeHandler.isAddSecondaryControllerUnits()) {\n+                            if (!Arrays.asList(CONNECTIVITY_OPTIONS).contains(touchWandUnit.getConnectivity())) {\n+                                continue;\n+                            }\n+                        }\n+                        String type = touchWandUnit.getType();\n+                        if (!Arrays.asList(SUPPORTED_TOUCHWAND_TYPES).contains(type)) {\n+                            logger.debug(\"Unit discovery skipping unsupported unit type : {} \", type);\n+                            continue;\n+                        }\n+                        switch (type) {\n+                            case TYPE_WALLCONTROLLER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_WALLCONTROLLER);\n+                                break;\n+                            case TYPE_SWITCH:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SWITCH);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_DIMMER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_DIMMER);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_SHUTTER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SHUTTER);\n+                                break;\n+                            default:\n+                                continue;\n+                        }\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    logger.warn(\"Could not parse unit {}\", e.getMessage());\n+                }\n+            }\n+        } catch (JsonSyntaxException msg) {\n+            logger.warn(\"Could not parse list units response {}\", msg.getMessage());\n+        }\n+    }\n+\n+    private void notifyListeners(TouchWandUnitData touchWandUnit) {\n+        for (TouchWandUnitStatusUpdateListener listener : listeners) {\n+            listener.onDataReceived(touchWandUnit);\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        removeOlderResults(getTimestampOfLastScan());\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+        removeOlderResults(new Date().getTime(), touchWandBridgeHandler.getThing().getUID());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        removeOlderResults(System.currentTimeMillis(), touchWandBridgeHandler.getThing().getUID());\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        ScheduledFuture<?> localScanningJob = scanningJob;\n+        if (localScanningJob == null || localScanningJob.isCancelled()) {\n+            scanningJob = scheduler.scheduleWithFixedDelay(this::startScan, LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC,\n+                    SCAN_INTERVAL_SEC, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        ScheduledFuture<?> myScanningJob = scanningJob;\n+        if (myScanningJob != null) {\n+            myScanningJob.cancel(true);\n+            scanningJob = null;\n+        }\n+    }\n+\n+    public synchronized void registerListener(TouchWandUnitStatusUpdateListener listener) {\n+        if (!listeners.contains(listener)) {\n+            logger.debug(\"Adding TouchWandWebSocket listener {}\", listener);\n+            listeners.add(listener);\n+        }\n+    }\n+\n+    public synchronized void unregisterListener(TouchWandUnitStatusUpdateListener listener) {\n+        logger.debug(\"Removing TouchWandWebSocket listener {}\", listener);\n+        listeners.remove(listener);\n+    }\n+\n+    @Override\n+    public int getScanTimeout() {\n+        return SEARCH_TIME_SEC;\n+    }\n+\n+    private void addDeviceDiscoveryResult(TouchWandUnitData unit, ThingTypeUID typeUID) {\n+        ThingUID bridgeUID = touchWandBridgeHandler.getThing().getUID();\n+        ThingUID thingUID = new ThingUID(typeUID, bridgeUID, unit.getId().toString());\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"id\", unit.getId().toString());", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e096521ff7efa28cc2525e21fae4fe7bc97ae67c", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\nindex 0ce51b8f16..bcb3df3e6a 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n\n@@ -59,7 +59,7 @@ public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n     private static final int SEARCH_TIME_SEC = 10;\n     private static final int SCAN_INTERVAL_SEC = 60;\n     private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n-    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private static final String[] CONNECTIVITY_OPTIONS = { CONNECTIVITY_KNX, CONNECTIVITY_ZWAVE };\n     private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n     private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjM2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505886361", "bodyText": "and here", "author": "cpmeister", "createdAt": "2020-10-15T21:53:20Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.discovery;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.TouchWandBridgeHandler;\n+import org.openhab.binding.touchwand.internal.TouchWandUnitStatusUpdateListener;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandUnitDiscoveryService} Discovery service for TouchWand units.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService {\n+\n+    private static final int SEARCH_TIME_SEC = 10;\n+    private static final int SCAN_INTERVAL_SEC = 60;\n+    private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n+    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n+\n+    private @Nullable ScheduledFuture<?> scanningJob;\n+    private List<TouchWandUnitStatusUpdateListener> listeners = new ArrayList<>();\n+\n+    public TouchWandUnitDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME_SEC, true);\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        if (touchWandBridgeHandler.getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Could not scan units while bridge offline\");\n+            return;\n+        }\n+\n+        logger.debug(\"Starting TouchWand discovery on bridge {}\", touchWandBridgeHandler.getThing().getUID());\n+        String response = touchWandBridgeHandler.touchWandClient.cmdListUnits();\n+        if (response.isEmpty()) {\n+            return;\n+        }\n+\n+        JsonParser jsonParser = new JsonParser();\n+        try {\n+            JsonArray jsonArray = jsonParser.parse(response).getAsJsonArray();\n+            if (jsonArray.isJsonArray()) {\n+                try {\n+                    for (JsonElement unit : jsonArray) {\n+                        TouchWandUnitData touchWandUnit;\n+                        touchWandUnit = TouchWandUnitFromJson.parseResponse(unit.getAsJsonObject());\n+                        if (touchWandUnit == null) {\n+                            continue;\n+                        }\n+                        if (!touchWandBridgeHandler.isAddSecondaryControllerUnits()) {\n+                            if (!Arrays.asList(CONNECTIVITY_OPTIONS).contains(touchWandUnit.getConnectivity())) {\n+                                continue;\n+                            }\n+                        }\n+                        String type = touchWandUnit.getType();\n+                        if (!Arrays.asList(SUPPORTED_TOUCHWAND_TYPES).contains(type)) {\n+                            logger.debug(\"Unit discovery skipping unsupported unit type : {} \", type);\n+                            continue;\n+                        }\n+                        switch (type) {\n+                            case TYPE_WALLCONTROLLER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_WALLCONTROLLER);\n+                                break;\n+                            case TYPE_SWITCH:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SWITCH);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_DIMMER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_DIMMER);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_SHUTTER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SHUTTER);\n+                                break;\n+                            default:\n+                                continue;\n+                        }\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    logger.warn(\"Could not parse unit {}\", e.getMessage());\n+                }\n+            }\n+        } catch (JsonSyntaxException msg) {\n+            logger.warn(\"Could not parse list units response {}\", msg.getMessage());\n+        }\n+    }\n+\n+    private void notifyListeners(TouchWandUnitData touchWandUnit) {\n+        for (TouchWandUnitStatusUpdateListener listener : listeners) {\n+            listener.onDataReceived(touchWandUnit);\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        removeOlderResults(getTimestampOfLastScan());\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+        removeOlderResults(new Date().getTime(), touchWandBridgeHandler.getThing().getUID());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        removeOlderResults(System.currentTimeMillis(), touchWandBridgeHandler.getThing().getUID());\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        ScheduledFuture<?> localScanningJob = scanningJob;\n+        if (localScanningJob == null || localScanningJob.isCancelled()) {\n+            scanningJob = scheduler.scheduleWithFixedDelay(this::startScan, LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC,\n+                    SCAN_INTERVAL_SEC, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        ScheduledFuture<?> myScanningJob = scanningJob;\n+        if (myScanningJob != null) {\n+            myScanningJob.cancel(true);\n+            scanningJob = null;\n+        }\n+    }\n+\n+    public synchronized void registerListener(TouchWandUnitStatusUpdateListener listener) {\n+        if (!listeners.contains(listener)) {\n+            logger.debug(\"Adding TouchWandWebSocket listener {}\", listener);\n+            listeners.add(listener);\n+        }\n+    }\n+\n+    public synchronized void unregisterListener(TouchWandUnitStatusUpdateListener listener) {\n+        logger.debug(\"Removing TouchWandWebSocket listener {}\", listener);\n+        listeners.remove(listener);\n+    }\n+\n+    @Override\n+    public int getScanTimeout() {\n+        return SEARCH_TIME_SEC;\n+    }\n+\n+    private void addDeviceDiscoveryResult(TouchWandUnitData unit, ThingTypeUID typeUID) {\n+        ThingUID bridgeUID = touchWandBridgeHandler.getThing().getUID();\n+        ThingUID thingUID = new ThingUID(typeUID, bridgeUID, unit.getId().toString());\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"id\", unit.getId().toString());\n+        properties.put(\"name\", unit.getName());\n+        // @formatter:off\n+        thingDiscovered(DiscoveryResultBuilder.create(thingUID)\n+                .withThingType(typeUID)\n+                .withLabel(unit.getName())\n+                .withBridge(bridgeUID)\n+                .withProperties(properties)\n+                .withRepresentationProperty(\"id\")", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e096521ff7efa28cc2525e21fae4fe7bc97ae67c", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\nindex 0ce51b8f16..bcb3df3e6a 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n\n@@ -59,7 +59,7 @@ public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n     private static final int SEARCH_TIME_SEC = 10;\n     private static final int SCAN_INTERVAL_SEC = 60;\n     private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n-    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private static final String[] CONNECTIVITY_OPTIONS = { CONNECTIVITY_KNX, CONNECTIVITY_ZWAVE };\n     private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n     private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjY5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505886696", "bodyText": "Make same change here, see above.", "author": "cpmeister", "createdAt": "2020-10-15T21:54:14Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.SUPPORTED_TOUCHWAND_TYPES;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandWebSockets} class implements WebSockets API to TouchWand controller\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandWebSockets {\n+\n+    private static final int CONNECT_TIMEOUT_SEC = 10;\n+    private static final int WEBSOCKET_RECONNECT_INTERVAL_SEC = CONNECT_TIMEOUT_SEC * 2;\n+    private static final int WEBSOCKET_IDLE_TIMEOUT_MS = CONNECT_TIMEOUT_SEC * 10 * 1000;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandWebSockets.class);\n+    private static final String WS_ENDPOINT_TOUCHWAND = \"/async\";\n+\n+    private WebSocketClient client;\n+    private String controllerAddress;\n+    private TouchWandSocket touchWandSocket;\n+    private boolean isShutDown = false;\n+    private List<TouchWandUnitStatusUpdateListener> listeners = new ArrayList<>();\n+    private @Nullable ScheduledFuture<?> socketReconnect;\n+    private @Nullable URI uri;\n+\n+    ScheduledExecutorService scheduler;\n+\n+    public TouchWandWebSockets(String ipAddress, ScheduledExecutorService scheduler) {\n+        client = new WebSocketClient();\n+        touchWandSocket = new TouchWandSocket();\n+        this.controllerAddress = ipAddress;\n+        this.scheduler = scheduler;\n+        socketReconnect = null;\n+    }\n+\n+    public void connect() {\n+        try {\n+            uri = new URI(\"ws://\" + controllerAddress + WS_ENDPOINT_TOUCHWAND);\n+        } catch (URISyntaxException e) {\n+            logger.warn(\"URI not valid {} message {}\", uri, e.getMessage());\n+            return;\n+        }\n+\n+        client.setConnectTimeout(CONNECT_TIMEOUT_SEC);\n+        ClientUpgradeRequest request = new ClientUpgradeRequest();\n+        request.setSubProtocols(\"relay_protocol\");\n+\n+        try {\n+            client.start();\n+            client.connect(touchWandSocket, uri, request);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not connect webSocket URI {} message {}\", uri, e.getMessage());\n+            return;\n+        }\n+    }\n+\n+    public void dispose() {\n+        isShutDown = true;\n+        try {\n+            client.stop();\n+        } catch (Exception e) {\n+            logger.warn(\"Could not stop webSocketClient,  message {}\", e.getMessage());\n+        }\n+    }\n+\n+    public synchronized void registerListener(TouchWandUnitStatusUpdateListener listener) {\n+        if (!listeners.contains(listener)) {\n+            logger.debug(\"Adding TouchWandWebSocket listener {}\", listener);\n+            listeners.add(listener);\n+        }\n+    }\n+\n+    public synchronized void unregisterListener(TouchWandUnitStatusUpdateListener listener) {\n+        logger.debug(\"Removing TouchWandWebSocket listener {}\", listener);\n+        listeners.remove(listener);\n+    }", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f03cfebc7c4982f6a2abbcaca2034f404426d957", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\nindex 8dc8b366b2..8df4cbf134 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n\n@@ -17,9 +17,8 @@ import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.S\n import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NzU2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505887563", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.warn(\"Error open connecton to {} : {} \", touchWandIpAddr, e.getMessage());\n          \n          \n            \n                        logger.warn(\"Error opening connecton to {} : {} \", touchWandIpAddr, e.getMessage());", "author": "cpmeister", "createdAt": "2020-10-15T21:56:20Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.net.CookieManager;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentProvider;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.MimeTypes;\n+import org.openhab.core.library.types.OnOffType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link TouchWandRestClient} is responsible for handling low level commands units TouchWand WonderFull hub\n+ * REST API interface\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandRestClient {\n+\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandRestClient.class);\n+\n+    static CookieManager cookieManager = new CookieManager();\n+\n+    private String touchWandIpAddr = \"\";\n+    private String touchWandPort = \"\";\n+    private boolean isConnected = false;\n+\n+    private static final HttpMethod METHOD_GET = HttpMethod.GET;\n+    private static final HttpMethod METHOD_POST = HttpMethod.POST;\n+\n+    private static final String CMD_LOGIN = \"login\";\n+    private static final String CMD_LIST_UNITS = \"listunits\";\n+    private static final String CMD_LIST_SCENARIOS = \"listsencarios\";\n+    private static final String CMD_UNIT_ACTION = \"action\";\n+    private static final String CMD_GET_UNIT_BY_ID = \"getunitbyid\";\n+\n+    private static final String ACTION_SWITCH_OFF = \"{\\\"id\\\":%s,\\\"value\\\":\" + SWITCH_STATUS_OFF + \"}\";\n+    private static final String ACTION_SWITCH_ON = \"{\\\"id\\\":%s,\\\"value\\\":\" + SWITCH_STATUS_ON + \"}\";\n+    private static final String ACTION_SHUTTER_DOWN = \"{\\\"id\\\":%s,\\\"value\\\":0,\\\"type\\\":\\\"height\\\"}\";\n+    private static final String ACTION_SHUTTER_UP = \"{\\\"id\\\":%s,\\\"value\\\":255,\\\"type\\\":\\\"height\\\"}\";\n+    private static final String ACTION_SHUTTER_STOP = \"{\\\"id\\\":%s,\\\"value\\\":0,\\\"type\\\":\\\"stop\\\"}\";\n+    private static final String ACTION_SHUTTER_POSITION = \"{\\\"id\\\":%s,\\\"value\\\":%s}\";\n+    private static final String ACTION_DIMMER_POSITION = \"{\\\"id\\\":%s,\\\"value\\\":%s}\";\n+\n+    private static final String CONTENT_TYPE_APPLICATION_JSON = MimeTypes.Type.APPLICATION_JSON.asString();\n+\n+    private static final int REQUEST_TIMEOUT_SEC = 10;\n+\n+    private static final Map<String, String> COMMAND_MAP = new HashMap<String, String>();\n+    static {\n+        COMMAND_MAP.put(CMD_LOGIN, \"/auth/login?\");\n+        COMMAND_MAP.put(CMD_LIST_UNITS, \"/units/listUnits\");\n+        COMMAND_MAP.put(CMD_LIST_SCENARIOS, \"/scenarios/listScenarios\");\n+        COMMAND_MAP.put(CMD_UNIT_ACTION, \"/units/action\");\n+        COMMAND_MAP.put(CMD_GET_UNIT_BY_ID, \"/units/getUnitByID?\");\n+    }\n+\n+    private HttpClient httpClient;\n+\n+    public TouchWandRestClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public final boolean connect(String user, String pass, String ipAddr, String port) {\n+        touchWandIpAddr = ipAddr;\n+        touchWandPort = port;\n+        isConnected = cmdLogin(user, pass, ipAddr);\n+\n+        return isConnected;\n+    }\n+\n+    private final boolean cmdLogin(String user, String pass, String ipAddr) {\n+        String command = buildUrl(CMD_LOGIN) + \"user=\" + user + \"&\" + \"psw=\" + pass;\n+        String response = sendCommand(command, METHOD_GET, \"\");\n+\n+        return !response.equals(\"Unauthorized\");\n+    }\n+\n+    public String cmdListUnits() {\n+        String command = buildUrl(CMD_LIST_UNITS);\n+        String response = sendCommand(command, METHOD_GET, \"\");\n+\n+        return response;\n+    }\n+\n+    public String cmdGetUnitById(String id) {\n+        String command = buildUrl(CMD_GET_UNIT_BY_ID) + \"id=\" + id;\n+        String response = sendCommand(command, METHOD_GET, \"\");\n+\n+        return response;\n+    }\n+\n+    public void cmdSwitchOnOff(String id, OnOffType onoff) {\n+        String action;\n+\n+        if (OnOffType.OFF.equals(onoff)) {\n+            action = String.format(ACTION_SWITCH_OFF, id);\n+        } else {\n+            action = String.format(ACTION_SWITCH_ON, id);\n+        }\n+        cmdUnitAction(action);\n+    }\n+\n+    public void cmdShutterUp(String id) {\n+        String action = String.format(ACTION_SHUTTER_UP, id);\n+        cmdUnitAction(action);\n+    }\n+\n+    public void cmdShutterDown(String id) {\n+        String action = String.format(ACTION_SHUTTER_DOWN, id);\n+        cmdUnitAction(action);\n+    }\n+\n+    public void cmdShutterPosition(String id, String position) {\n+        String action = String.format(ACTION_SHUTTER_POSITION, id, position);\n+        cmdUnitAction(action);\n+    }\n+\n+    public void cmdShutterStop(String id) {\n+        String action = String.format(ACTION_SHUTTER_STOP, id);\n+        cmdUnitAction(action);\n+    }\n+\n+    public void cmdDimmerPosition(String id, String position) {\n+        String action = String.format(ACTION_DIMMER_POSITION, id, position);\n+        cmdUnitAction(action);\n+    }\n+\n+    private String cmdUnitAction(String action) {\n+        String command = buildUrl(CMD_UNIT_ACTION);\n+        String response = sendCommand(command, METHOD_POST, action);\n+\n+        return response;\n+    }\n+\n+    private String buildUrl(String command) {\n+        String url = \"http://\" + touchWandIpAddr + \":\" + touchWandPort + COMMAND_MAP.get(command);\n+        return url;\n+    }\n+\n+    private synchronized String sendCommand(String command, HttpMethod method, String content) {\n+        ContentResponse response;\n+        Request request;\n+\n+        URL url = null;\n+        try {\n+            url = new URL(command);\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Error building URL {} : {}\", command, e.getMessage());\n+            return \"\";\n+        }\n+\n+        request = httpClient.newRequest(url.toString()).timeout(REQUEST_TIMEOUT_SEC, TimeUnit.SECONDS).method(method);\n+        if (method.equals(METHOD_POST) && (!content.isEmpty())) {\n+            ContentProvider contentProvider = new StringContentProvider(CONTENT_TYPE_APPLICATION_JSON, content,\n+                    StandardCharsets.UTF_8);\n+            request = request.content(contentProvider);\n+        }\n+\n+        try {\n+            response = request.send();\n+            return response.getContentAsString();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.warn(\"Error open connecton to {} : {} \", touchWandIpAddr, e.getMessage());", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ceaca3bdc649e4484b8607603a92399f448a13a", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java\nindex b1072d7352..77193f6458 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java\n\n@@ -190,7 +190,7 @@ public class TouchWandRestClient {\n             response = request.send();\n             return response.getContentAsString();\n         } catch (InterruptedException | TimeoutException | ExecutionException e) {\n-            logger.warn(\"Error open connecton to {} : {} \", touchWandIpAddr, e.getMessage());\n+            logger.warn(\"Error opening connecton to {} : {} \", touchWandIpAddr, e.getMessage());\n         }\n         return \"\";\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODQ5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505888496", "bodyText": "Shouldn't you be url encoding the user and pass parameters? What if the password contains strange characters?", "author": "cpmeister", "createdAt": "2020-10-15T21:58:51Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.net.CookieManager;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentProvider;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.MimeTypes;\n+import org.openhab.core.library.types.OnOffType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link TouchWandRestClient} is responsible for handling low level commands units TouchWand WonderFull hub\n+ * REST API interface\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandRestClient {\n+\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandRestClient.class);\n+\n+    static CookieManager cookieManager = new CookieManager();\n+\n+    private String touchWandIpAddr = \"\";\n+    private String touchWandPort = \"\";\n+    private boolean isConnected = false;\n+\n+    private static final HttpMethod METHOD_GET = HttpMethod.GET;\n+    private static final HttpMethod METHOD_POST = HttpMethod.POST;\n+\n+    private static final String CMD_LOGIN = \"login\";\n+    private static final String CMD_LIST_UNITS = \"listunits\";\n+    private static final String CMD_LIST_SCENARIOS = \"listsencarios\";\n+    private static final String CMD_UNIT_ACTION = \"action\";\n+    private static final String CMD_GET_UNIT_BY_ID = \"getunitbyid\";\n+\n+    private static final String ACTION_SWITCH_OFF = \"{\\\"id\\\":%s,\\\"value\\\":\" + SWITCH_STATUS_OFF + \"}\";\n+    private static final String ACTION_SWITCH_ON = \"{\\\"id\\\":%s,\\\"value\\\":\" + SWITCH_STATUS_ON + \"}\";\n+    private static final String ACTION_SHUTTER_DOWN = \"{\\\"id\\\":%s,\\\"value\\\":0,\\\"type\\\":\\\"height\\\"}\";\n+    private static final String ACTION_SHUTTER_UP = \"{\\\"id\\\":%s,\\\"value\\\":255,\\\"type\\\":\\\"height\\\"}\";\n+    private static final String ACTION_SHUTTER_STOP = \"{\\\"id\\\":%s,\\\"value\\\":0,\\\"type\\\":\\\"stop\\\"}\";\n+    private static final String ACTION_SHUTTER_POSITION = \"{\\\"id\\\":%s,\\\"value\\\":%s}\";\n+    private static final String ACTION_DIMMER_POSITION = \"{\\\"id\\\":%s,\\\"value\\\":%s}\";\n+\n+    private static final String CONTENT_TYPE_APPLICATION_JSON = MimeTypes.Type.APPLICATION_JSON.asString();\n+\n+    private static final int REQUEST_TIMEOUT_SEC = 10;\n+\n+    private static final Map<String, String> COMMAND_MAP = new HashMap<String, String>();\n+    static {\n+        COMMAND_MAP.put(CMD_LOGIN, \"/auth/login?\");\n+        COMMAND_MAP.put(CMD_LIST_UNITS, \"/units/listUnits\");\n+        COMMAND_MAP.put(CMD_LIST_SCENARIOS, \"/scenarios/listScenarios\");\n+        COMMAND_MAP.put(CMD_UNIT_ACTION, \"/units/action\");\n+        COMMAND_MAP.put(CMD_GET_UNIT_BY_ID, \"/units/getUnitByID?\");\n+    }\n+\n+    private HttpClient httpClient;\n+\n+    public TouchWandRestClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public final boolean connect(String user, String pass, String ipAddr, String port) {\n+        touchWandIpAddr = ipAddr;\n+        touchWandPort = port;\n+        isConnected = cmdLogin(user, pass, ipAddr);\n+\n+        return isConnected;\n+    }\n+\n+    private final boolean cmdLogin(String user, String pass, String ipAddr) {\n+        String command = buildUrl(CMD_LOGIN) + \"user=\" + user + \"&\" + \"psw=\" + pass;", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1NDI1OA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506954258", "bodyText": "done", "author": "roieg", "createdAt": "2020-10-17T15:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3ceaca3bdc649e4484b8607603a92399f448a13a", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java\nindex b1072d7352..77193f6458 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java\n\n@@ -190,7 +190,7 @@ public class TouchWandRestClient {\n             response = request.send();\n             return response.getContentAsString();\n         } catch (InterruptedException | TimeoutException | ExecutionException e) {\n-            logger.warn(\"Error open connecton to {} : {} \", touchWandIpAddr, e.getMessage());\n+            logger.warn(\"Error opening connecton to {} : {} \", touchWandIpAddr, e.getMessage());\n         }\n         return \"\";\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4OTQzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505889434", "bodyText": "why is this synchronized?", "author": "cpmeister", "createdAt": "2020-10-15T22:01:12Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.discovery;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.TouchWandBindingConstants;\n+import org.openhab.binding.touchwand.internal.TouchWandBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link TouchWandControllerDiscoveryService} Discovery service for Touchwand Controllers.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.touchwand\")\n+@NonNullByDefault\n+public class TouchWandControllerDiscoveryService extends AbstractDiscoveryService {\n+\n+    private static final int SEARCH_TIME_SEC = 2;\n+    private static final int TOUCHWAND_BCAST_PORT = 35000;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandControllerDiscoveryService.class);\n+\n+    private @Nullable Thread socketReceiveThread = null;\n+    private DatagramSocket listenSocket;\n+\n+    public TouchWandControllerDiscoveryService() throws SocketException {\n+        super(TouchWandBridgeHandler.SUPPORTED_THING_TYPES, SEARCH_TIME_SEC, true);\n+        removeOlderResults(getTimestampOfLastScan());\n+        listenSocket = new DatagramSocket(TOUCHWAND_BCAST_PORT);\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        DatagramSocket localListenSocket = listenSocket;\n+        runReceiveThread(localListenSocket);\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b43a7bbab007d48a36e59882b97ba0d1ff680411", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\nindex 8754c99a7a..10ab9ae382 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\n\n@@ -54,7 +54,7 @@ public class TouchWandControllerDiscoveryService extends AbstractDiscoveryServic\n \n     public TouchWandControllerDiscoveryService() throws SocketException {\n         super(TouchWandBridgeHandler.SUPPORTED_THING_TYPES, SEARCH_TIME_SEC, true);\n-        removeOlderResults(getTimestampOfLastScan());\n+\n         listenSocket = new DatagramSocket(TOUCHWAND_BCAST_PORT);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4OTkyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505889922", "bodyText": "This wan't do anything in the constructor, you need to move this to the activate method instead.", "author": "cpmeister", "createdAt": "2020-10-15T22:02:34Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.discovery;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.TouchWandBindingConstants;\n+import org.openhab.binding.touchwand.internal.TouchWandBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link TouchWandControllerDiscoveryService} Discovery service for Touchwand Controllers.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.touchwand\")\n+@NonNullByDefault\n+public class TouchWandControllerDiscoveryService extends AbstractDiscoveryService {\n+\n+    private static final int SEARCH_TIME_SEC = 2;\n+    private static final int TOUCHWAND_BCAST_PORT = 35000;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandControllerDiscoveryService.class);\n+\n+    private @Nullable Thread socketReceiveThread = null;\n+    private DatagramSocket listenSocket;\n+\n+    public TouchWandControllerDiscoveryService() throws SocketException {\n+        super(TouchWandBridgeHandler.SUPPORTED_THING_TYPES, SEARCH_TIME_SEC, true);\n+        removeOlderResults(getTimestampOfLastScan());", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0MDc2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506640769", "bodyText": "moved to activate", "author": "roieg", "createdAt": "2020-10-16T18:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4OTkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "b43a7bbab007d48a36e59882b97ba0d1ff680411", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\nindex 8754c99a7a..10ab9ae382 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\n\n@@ -54,7 +54,7 @@ public class TouchWandControllerDiscoveryService extends AbstractDiscoveryServic\n \n     public TouchWandControllerDiscoveryService() throws SocketException {\n         super(TouchWandBridgeHandler.SUPPORTED_THING_TYPES, SEARCH_TIME_SEC, true);\n-        removeOlderResults(getTimestampOfLastScan());\n+\n         listenSocket = new DatagramSocket(TOUCHWAND_BCAST_PORT);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MDM0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505890348", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected synchronized void stopScan() {\n          \n          \n            \n                protected void stopScan() {", "author": "cpmeister", "createdAt": "2020-10-15T22:03:39Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.discovery;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.TouchWandBridgeHandler;\n+import org.openhab.binding.touchwand.internal.TouchWandUnitStatusUpdateListener;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandUnitDiscoveryService} Discovery service for TouchWand units.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService {\n+\n+    private static final int SEARCH_TIME_SEC = 10;\n+    private static final int SCAN_INTERVAL_SEC = 60;\n+    private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n+    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n+\n+    private @Nullable ScheduledFuture<?> scanningJob;\n+    private List<TouchWandUnitStatusUpdateListener> listeners = new ArrayList<>();\n+\n+    public TouchWandUnitDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME_SEC, true);\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        if (touchWandBridgeHandler.getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Could not scan units while bridge offline\");\n+            return;\n+        }\n+\n+        logger.debug(\"Starting TouchWand discovery on bridge {}\", touchWandBridgeHandler.getThing().getUID());\n+        String response = touchWandBridgeHandler.touchWandClient.cmdListUnits();\n+        if (response.isEmpty()) {\n+            return;\n+        }\n+\n+        JsonParser jsonParser = new JsonParser();\n+        try {\n+            JsonArray jsonArray = jsonParser.parse(response).getAsJsonArray();\n+            if (jsonArray.isJsonArray()) {\n+                try {\n+                    for (JsonElement unit : jsonArray) {\n+                        TouchWandUnitData touchWandUnit;\n+                        touchWandUnit = TouchWandUnitFromJson.parseResponse(unit.getAsJsonObject());\n+                        if (touchWandUnit == null) {\n+                            continue;\n+                        }\n+                        if (!touchWandBridgeHandler.isAddSecondaryControllerUnits()) {\n+                            if (!Arrays.asList(CONNECTIVITY_OPTIONS).contains(touchWandUnit.getConnectivity())) {\n+                                continue;\n+                            }\n+                        }\n+                        String type = touchWandUnit.getType();\n+                        if (!Arrays.asList(SUPPORTED_TOUCHWAND_TYPES).contains(type)) {\n+                            logger.debug(\"Unit discovery skipping unsupported unit type : {} \", type);\n+                            continue;\n+                        }\n+                        switch (type) {\n+                            case TYPE_WALLCONTROLLER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_WALLCONTROLLER);\n+                                break;\n+                            case TYPE_SWITCH:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SWITCH);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_DIMMER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_DIMMER);\n+                                notifyListeners(touchWandUnit);\n+                                break;\n+                            case TYPE_SHUTTER:\n+                                addDeviceDiscoveryResult(touchWandUnit, THING_TYPE_SHUTTER);\n+                                break;\n+                            default:\n+                                continue;\n+                        }\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    logger.warn(\"Could not parse unit {}\", e.getMessage());\n+                }\n+            }\n+        } catch (JsonSyntaxException msg) {\n+            logger.warn(\"Could not parse list units response {}\", msg.getMessage());\n+        }\n+    }\n+\n+    private void notifyListeners(TouchWandUnitData touchWandUnit) {\n+        for (TouchWandUnitStatusUpdateListener listener : listeners) {\n+            listener.onDataReceived(touchWandUnit);\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e096521ff7efa28cc2525e21fae4fe7bc97ae67c", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\nindex 0ce51b8f16..bcb3df3e6a 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandUnitDiscoveryService.java\n\n@@ -59,7 +59,7 @@ public class TouchWandUnitDiscoveryService extends AbstractDiscoveryService\n     private static final int SEARCH_TIME_SEC = 10;\n     private static final int SCAN_INTERVAL_SEC = 60;\n     private static final int LINK_DISCOVERY_SERVICE_INITIAL_DELAY_SEC = 5;\n-    private static final String[] CONNECTIVITY_OPTIONS = { \"zwave\", \"knx\" };\n+    private static final String[] CONNECTIVITY_OPTIONS = { CONNECTIVITY_KNX, CONNECTIVITY_ZWAVE };\n     private @NonNullByDefault({}) TouchWandBridgeHandler touchWandBridgeHandler;\n     private final Logger logger = LoggerFactory.getLogger(TouchWandUnitDiscoveryService.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MDY1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505890657", "bodyText": "Can you give this class a better name?", "author": "cpmeister", "createdAt": "2020-10-15T22:04:31Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/dto/Csc.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.dto;\n+\n+/**\n+ * The {@link Csc} implements Csc data class.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+public class Csc {", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1MDAxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506550017", "bodyText": "I agree it is a bad name .\nThe class name is from the Json exposed to me from TouchWand controller and its name is to match the Json field .\nThis is out of my control , I prefer to keep it this way.", "author": "roieg", "createdAt": "2020-10-16T15:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MDY1Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMTEyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505901120", "bodyText": "If dispose is called immediately after initialize your binding should be able to shutdown without side effects.\nIn this case it is possible for dispose to be called before you have initialized the touchWandWebSockets field.\nTo prevent this from happening you need use a boolean isRunning field along with synchronization to make sure that access to the isRunning and touchWandWebSockets field is atomic.\nYou could synchronize on a new lock object, but for this fix it is less messy to just synchronize on the this object instead.\nprivate volatile boolean isRunning = false;\n\npublic synchronized void initialize() {\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    scheduler.execute(() -> {\n          \n          \n            \n                        boolean thingReachable = false;\n          \n          \n            \n                        String password = config.password;\n          \n          \n            \n                        String username = config.username;\n          \n          \n            \n                        thingReachable = touchWandClient.connect(username, password, host, port.toString());\n          \n          \n            \n                        if (thingReachable) {\n          \n          \n            \n                            updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                            TouchWandWebSockets localSockets = touchWandWebSockets = new TouchWandWebSockets(host, scheduler);\n          \n          \n            \n                            localSockets.registerListener(this);\n          \n          \n            \n                            localSockets.connect();\n          \n          \n            \n                        } else {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE);\n          \n          \n            \n                        }\n          \n          \n            \n                    });\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public boolean isAddSecondaryControllerUnits() {\n          \n          \n            \n                    return addSecondaryUnits;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public int getStatusRefreshTime() {\n          \n          \n            \n                    return statusRefreshRateSec;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public void dispose() {\n          \n          \n            \n                    TouchWandWebSockets myTouchWandWebSockets = touchWandWebSockets;\n          \n          \n            \n                    if (myTouchWandWebSockets != null) {\n          \n          \n            \n                        myTouchWandWebSockets.unregisterListener(this);\n          \n          \n            \n                        myTouchWandWebSockets.dispose();\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                    isRunning = true;\n          \n          \n            \n                    scheduler.execute(() -> {\n          \n          \n            \n                        boolean thingReachable = false;\n          \n          \n            \n                        String password = config.password;\n          \n          \n            \n                        String username = config.username;\n          \n          \n            \n                        thingReachable = touchWandClient.connect(username, password, host, port.toString());\n          \n          \n            \n                        if (thingReachable) {\n          \n          \n            \n                            updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                            synchronized(this){\n          \n          \n            \n                                if(isRunning){\n          \n          \n            \n                                    TouchWandWebSockets localSockets = touchWandWebSockets = new TouchWandWebSockets(host, scheduler);\n          \n          \n            \n                                    localSockets.registerListener(this);\n          \n          \n            \n                                    localSockets.connect();\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                        } else {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE);\n          \n          \n            \n                        }\n          \n          \n            \n                    });\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public boolean isAddSecondaryControllerUnits() {\n          \n          \n            \n                    return addSecondaryUnits;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public int getStatusRefreshTime() {\n          \n          \n            \n                    return statusRefreshRateSec;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public synchronized void dispose() {\n          \n          \n            \n                    isRunning = false;\n          \n          \n            \n                    TouchWandWebSockets myTouchWandWebSockets = touchWandWebSockets;\n          \n          \n            \n                    if (myTouchWandWebSockets != null) {\n          \n          \n            \n                        myTouchWandWebSockets.unregisterListener(this);\n          \n          \n            \n                        myTouchWandWebSockets.dispose();\n          \n          \n            \n                    }\n          \n          \n            \n                }", "author": "cpmeister", "createdAt": "2020-10-15T22:32:15Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.touchwand.internal.config.TouchwandBridgeConfiguration;\n+import org.openhab.binding.touchwand.internal.discovery.TouchWandUnitDiscoveryService;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.osgi.framework.BundleContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link TouchWandBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels TouchWand Wanderfull\u2122 Hub channels .\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandBridgeHandler extends BaseBridgeHandler implements TouchWandUnitStatusUpdateListener {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandBridgeHandler.class);\n+    private int statusRefreshRateSec;\n+    private boolean addSecondaryUnits;\n+    private @Nullable TouchWandWebSockets touchWandWebSockets;\n+    private Map<String, TouchWandUnitUpdateListener> unitUpdateListeners = new ConcurrentHashMap<>();\n+\n+    public TouchWandRestClient touchWandClient;\n+\n+    public TouchWandBridgeHandler(Bridge bridge, HttpClient httpClient, BundleContext bundleContext) {\n+        super(bridge);\n+        touchWandClient = new TouchWandRestClient(httpClient);\n+        touchWandWebSockets = null;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        String host;\n+        Integer port;\n+        TouchwandBridgeConfiguration config;\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        config = getConfigAs(TouchwandBridgeConfiguration.class);\n+\n+        host = config.ipAddress;\n+        port = config.port;\n+        statusRefreshRateSec = config.statusrefresh;\n+        addSecondaryUnits = config.addSecondaryUnits;\n+\n+        scheduler.execute(() -> {\n+            boolean thingReachable = false;\n+            String password = config.password;\n+            String username = config.username;\n+            thingReachable = touchWandClient.connect(username, password, host, port.toString());\n+            if (thingReachable) {\n+                updateStatus(ThingStatus.ONLINE);\n+                TouchWandWebSockets localSockets = touchWandWebSockets = new TouchWandWebSockets(host, scheduler);\n+                localSockets.registerListener(this);\n+                localSockets.connect();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public boolean isAddSecondaryControllerUnits() {\n+        return addSecondaryUnits;\n+    }\n+\n+    public int getStatusRefreshTime() {\n+        return statusRefreshRateSec;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        TouchWandWebSockets myTouchWandWebSockets = touchWandWebSockets;\n+        if (myTouchWandWebSockets != null) {\n+            myTouchWandWebSockets.unregisterListener(this);\n+            myTouchWandWebSockets.dispose();\n+        }\n+    }", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1NDMxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506954315", "bodyText": "done", "author": "roieg", "createdAt": "2020-10-17T15:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMTEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "af9da70abcf35d9d27002e4d6e7ed7c2e264b426", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java\nindex 827622a076..a2f2bdf046 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java\n\n@@ -51,6 +51,7 @@ public class TouchWandBridgeHandler extends BaseBridgeHandler implements TouchWa\n     private boolean addSecondaryUnits;\n     private @Nullable TouchWandWebSockets touchWandWebSockets;\n     private Map<String, TouchWandUnitUpdateListener> unitUpdateListeners = new ConcurrentHashMap<>();\n+    private volatile boolean isRunning = false;\n \n     public TouchWandRestClient touchWandClient;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMTU1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505901557", "bodyText": "We can take advantage of java11 here. yay!\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n          \n          \n            \n                        Arrays.asList(THING_TYPE_SHUTTER, THING_TYPE_SWITCH, THING_TYPE_WALLCONTROLLER, THING_TYPE_DIMMER));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(THING_TYPE_SHUTTER, THING_TYPE_SWITCH, THING_TYPE_WALLCONTROLLER, THING_TYPE_DIMMER);", "author": "cpmeister", "createdAt": "2020-10-15T22:33:28Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * The {@link TouchWandBaseUnitHandler} is responsible for handling commands and status updates\n+ * for TouchWand units. This is an abstract class , units should implement the specific command\n+ * handling and status updates.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public abstract class TouchWandBaseUnitHandler extends BaseThingHandler implements TouchWandUnitUpdateListener {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(TouchWandBaseUnitHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n+            Arrays.asList(THING_TYPE_SHUTTER, THING_TYPE_SWITCH, THING_TYPE_WALLCONTROLLER, THING_TYPE_DIMMER));", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e096521ff7efa28cc2525e21fae4fe7bc97ae67c", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java\nindex 1f17d93ab3..b3e1371eef 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java\n\n@@ -89,7 +89,7 @@ public abstract class TouchWandBaseUnitHandler extends BaseThingHandler implemen\n \n         bridgeHandler = (TouchWandBridgeHandler) bridge.getHandler();\n \n-        unitId = getThing().getProperties().get(\"id\"); // TouchWand unit id\n+        unitId = getThing().getProperties().get(HANDLER_PROPERTIES_ID); // TouchWand unit id\n \n         TouchWandBridgeHandler myTmpBridgeHandler = bridgeHandler;\n         if (myTmpBridgeHandler != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMjQ0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505902449", "bodyText": "please move these fields to below your static constants", "author": "cpmeister", "createdAt": "2020-10-15T22:35:43Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.net.CookieManager;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentProvider;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.MimeTypes;\n+import org.openhab.core.library.types.OnOffType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link TouchWandRestClient} is responsible for handling low level commands units TouchWand WonderFull hub\n+ * REST API interface\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandRestClient {\n+\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandRestClient.class);\n+\n+    static CookieManager cookieManager = new CookieManager();\n+\n+    private String touchWandIpAddr = \"\";\n+    private String touchWandPort = \"\";\n+    private boolean isConnected = false;", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NjcwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506646703", "bodyText": "done", "author": "roieg", "createdAt": "2020-10-16T18:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMjQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ceaca3bdc649e4484b8607603a92399f448a13a", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java\nindex b1072d7352..77193f6458 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandRestClient.java\n\n@@ -190,7 +190,7 @@ public class TouchWandRestClient {\n             response = request.send();\n             return response.getContentAsString();\n         } catch (InterruptedException | TimeoutException | ExecutionException e) {\n-            logger.warn(\"Error open connecton to {} : {} \", touchWandIpAddr, e.getMessage());\n+            logger.warn(\"Error opening connecton to {} : {} \", touchWandIpAddr, e.getMessage());\n         }\n         return \"\";\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMjYyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505902627", "bodyText": "package private?", "author": "cpmeister", "createdAt": "2020-10-15T22:36:15Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.SUPPORTED_TOUCHWAND_TYPES;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandWebSockets} class implements WebSockets API to TouchWand controller\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandWebSockets {\n+\n+    private static final int CONNECT_TIMEOUT_SEC = 10;\n+    private static final int WEBSOCKET_RECONNECT_INTERVAL_SEC = CONNECT_TIMEOUT_SEC * 2;\n+    private static final int WEBSOCKET_IDLE_TIMEOUT_MS = CONNECT_TIMEOUT_SEC * 10 * 1000;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandWebSockets.class);\n+    private static final String WS_ENDPOINT_TOUCHWAND = \"/async\";\n+\n+    private WebSocketClient client;\n+    private String controllerAddress;\n+    private TouchWandSocket touchWandSocket;\n+    private boolean isShutDown = false;\n+    private List<TouchWandUnitStatusUpdateListener> listeners = new ArrayList<>();\n+    private @Nullable ScheduledFuture<?> socketReconnect;\n+    private @Nullable URI uri;\n+\n+    ScheduledExecutorService scheduler;", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MDk2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506650962", "bodyText": "done", "author": "roieg", "createdAt": "2020-10-16T18:24:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMjYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "f03cfebc7c4982f6a2abbcaca2034f404426d957", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\nindex 8dc8b366b2..8df4cbf134 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n\n@@ -17,9 +17,8 @@ import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.S\n import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMjk5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r505902992", "bodyText": "Shouldn't the socketReconnect be canceled here?", "author": "cpmeister", "createdAt": "2020-10-15T22:37:19Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.SUPPORTED_TOUCHWAND_TYPES;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandWebSockets} class implements WebSockets API to TouchWand controller\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandWebSockets {\n+\n+    private static final int CONNECT_TIMEOUT_SEC = 10;\n+    private static final int WEBSOCKET_RECONNECT_INTERVAL_SEC = CONNECT_TIMEOUT_SEC * 2;\n+    private static final int WEBSOCKET_IDLE_TIMEOUT_MS = CONNECT_TIMEOUT_SEC * 10 * 1000;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandWebSockets.class);\n+    private static final String WS_ENDPOINT_TOUCHWAND = \"/async\";\n+\n+    private WebSocketClient client;\n+    private String controllerAddress;\n+    private TouchWandSocket touchWandSocket;\n+    private boolean isShutDown = false;\n+    private List<TouchWandUnitStatusUpdateListener> listeners = new ArrayList<>();\n+    private @Nullable ScheduledFuture<?> socketReconnect;\n+    private @Nullable URI uri;\n+\n+    ScheduledExecutorService scheduler;\n+\n+    public TouchWandWebSockets(String ipAddress, ScheduledExecutorService scheduler) {\n+        client = new WebSocketClient();\n+        touchWandSocket = new TouchWandSocket();\n+        this.controllerAddress = ipAddress;\n+        this.scheduler = scheduler;\n+        socketReconnect = null;\n+    }\n+\n+    public void connect() {\n+        try {\n+            uri = new URI(\"ws://\" + controllerAddress + WS_ENDPOINT_TOUCHWAND);\n+        } catch (URISyntaxException e) {\n+            logger.warn(\"URI not valid {} message {}\", uri, e.getMessage());\n+            return;\n+        }\n+\n+        client.setConnectTimeout(CONNECT_TIMEOUT_SEC);\n+        ClientUpgradeRequest request = new ClientUpgradeRequest();\n+        request.setSubProtocols(\"relay_protocol\");\n+\n+        try {\n+            client.start();\n+            client.connect(touchWandSocket, uri, request);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not connect webSocket URI {} message {}\", uri, e.getMessage());\n+            return;\n+        }\n+    }\n+\n+    public void dispose() {\n+        isShutDown = true;\n+        try {\n+            client.stop();\n+        } catch (Exception e) {\n+            logger.warn(\"Could not stop webSocketClient,  message {}\", e.getMessage());\n+        }", "originalCommit": "43e2ee5f57c9f741a09cb270d38da6b8b112c30e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0OTIyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506949227", "bodyText": "indeed it should....\nowe you a beer....", "author": "roieg", "createdAt": "2020-10-17T14:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMjk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f03cfebc7c4982f6a2abbcaca2034f404426d957", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\nindex 8dc8b366b2..8df4cbf134 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n\n@@ -17,9 +17,8 @@ import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.S\n import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n"}}, {"oid": "e096521ff7efa28cc2525e21fae4fe7bc97ae67c", "url": "https://github.com/openhab/openhab-addons/commit/e096521ff7efa28cc2525e21fae4fe7bc97ae67c", "message": "Move some strings to binding constants\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T15:05:45Z", "type": "commit"}, {"oid": "aa6b97d2f9f4c1cfacfe8ee5c2d73abae91b1f38", "url": "https://github.com/openhab/openhab-addons/commit/aa6b97d2f9f4c1cfacfe8ee5c2d73abae91b1f38", "message": "Change time to new Date().getTime()\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T15:10:14Z", "type": "commit"}, {"oid": "29d0d2ac2ce7afef5258ef9b2602c0360454c748", "url": "https://github.com/openhab/openhab-addons/commit/29d0d2ac2ce7afef5258ef9b2602c0360454c748", "message": "move to CopyOnWriteArraySet and remove synchonized\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T15:23:39Z", "type": "commit"}, {"oid": "f03cfebc7c4982f6a2abbcaca2034f404426d957", "url": "https://github.com/openhab/openhab-addons/commit/f03cfebc7c4982f6a2abbcaca2034f404426d957", "message": "yet another move to CopyOnWriteArraySet instead of synchronized\n\nyet another move to CopyOnWriteArraySet instead of synchronized\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T15:28:29Z", "type": "commit"}, {"oid": "3f0b5932694170e2b4d41f9b197a63feb7d9e463", "url": "https://github.com/openhab/openhab-addons/commit/3f0b5932694170e2b4d41f9b197a63feb7d9e463", "message": "changed item-type to String\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T15:59:52Z", "type": "commit"}, {"oid": "49995d6f300897cab7c3ae3deb3777fb2071650e", "url": "https://github.com/openhab/openhab-addons/commit/49995d6f300897cab7c3ae3deb3777fb2071650e", "message": "some code beautify\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T16:07:15Z", "type": "commit"}, {"oid": "3ceaca3bdc649e4484b8607603a92399f448a13a", "url": "https://github.com/openhab/openhab-addons/commit/3ceaca3bdc649e4484b8607603a92399f448a13a", "message": "change open to opening string\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T16:10:37Z", "type": "commit"}, {"oid": "3e0dccd71fd1a6da2c80be834194460110ccf3c0", "url": "https://github.com/openhab/openhab-addons/commit/3e0dccd71fd1a6da2c80be834194460110ccf3c0", "message": "remove synchronized\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T16:35:36Z", "type": "commit"}, {"oid": "b43a7bbab007d48a36e59882b97ba0d1ff680411", "url": "https://github.com/openhab/openhab-addons/commit/b43a7bbab007d48a36e59882b97ba0d1ff680411", "message": "moved removeOlderResults(getTimestampOfLastScan())\n\nmoved  removeOlderResults(getTimestampOfLastScan()) to activate()\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T18:02:59Z", "type": "commit"}, {"oid": "bef9c85b5ff0482d19bad983cd38855c4e929e5b", "url": "https://github.com/openhab/openhab-addons/commit/bef9c85b5ff0482d19bad983cd38855c4e929e5b", "message": "moved private declarations after static\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T18:15:11Z", "type": "commit"}, {"oid": "3999e9f903611287546e07f62a85dbadd322a0e1", "url": "https://github.com/openhab/openhab-addons/commit/3999e9f903611287546e07f62a85dbadd322a0e1", "message": "add private to ScheduledExecutorService scheduler\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-16T18:23:09Z", "type": "commit"}, {"oid": "af9da70abcf35d9d27002e4d6e7ed7c2e264b426", "url": "https://github.com/openhab/openhab-addons/commit/af9da70abcf35d9d27002e4d6e7ed7c2e264b426", "message": "Review changes\n\nAdd encode URL to user and pass\nsync initialize and dispose\ncancel socketReconnect in case of dispose\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-17T15:29:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2NzYzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506967630", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void dispose() {\n          \n          \n            \n                public synchronized void dispose() {", "author": "cpmeister", "createdAt": "2020-10-17T17:56:19Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java", "diffHunk": "@@ -105,6 +114,7 @@ public int getStatusRefreshTime() {\n \n     @Override\n     public void dispose() {", "originalCommit": "af9da70abcf35d9d27002e4d6e7ed7c2e264b426", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1279d4765265fd4968444b9c414c5cf87946f21", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java\nindex a2f2bdf046..cefa670dcc 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBridgeHandler.java\n\n@@ -113,7 +113,7 @@ public class TouchWandBridgeHandler extends BaseBridgeHandler implements TouchWa\n     }\n \n     @Override\n-    public void dispose() {\n+    public synchronized void dispose() {\n         isRunning = false;\n         TouchWandWebSockets myTouchWandWebSockets = touchWandWebSockets;\n         if (myTouchWandWebSockets != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2NzczMA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506967730", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (socketReconnect != null) {\n          \n          \n            \n                            socketReconnect.cancel(true);\n          \n          \n            \n                        }\n          \n          \n            \n                        ScheduledFuture<?> mySocketReconnect = socketReconnect;\n          \n          \n            \n                        if (mySocketReconnect != null) {\n          \n          \n            \n                            mySocketReconnect.cancel(true);\n          \n          \n            \n                        }", "author": "cpmeister", "createdAt": "2020-10-17T17:57:24Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java", "diffHunk": "@@ -99,6 +99,9 @@ public void dispose() {\n         isShutDown = true;\n         try {\n             client.stop();\n+            if (socketReconnect != null) {\n+                socketReconnect.cancel(true);\n+            }", "originalCommit": "af9da70abcf35d9d27002e4d6e7ed7c2e264b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3NTczOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506975739", "bodyText": "done", "author": "roieg", "createdAt": "2020-10-17T19:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2NzczMA=="}], "type": "inlineReview", "revised_code": {"commit": "d1279d4765265fd4968444b9c414c5cf87946f21", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\nindex 7f9860b731..e0c59ba372 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n\n@@ -99,8 +99,9 @@ public class TouchWandWebSockets {\n         isShutDown = true;\n         try {\n             client.stop();\n-            if (socketReconnect != null) {\n-                socketReconnect.cancel(true);\n+            ScheduledFuture<?> mySocketReconnect = socketReconnect;\n+            if (mySocketReconnect != null) {\n+                mySocketReconnect.cancel(true);\n             }\n         } catch (Exception e) {\n             logger.warn(\"Could not stop webSocketClient,  message {}\", e.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2ODIzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506968236", "bodyText": "You can remove this", "author": "cpmeister", "createdAt": "2020-10-17T18:03:16Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.SUPPORTED_TOUCHWAND_TYPES;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Arrays;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandWebSockets} class implements WebSockets API to TouchWand controller\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandWebSockets {\n+\n+    private static final int CONNECT_TIMEOUT_SEC = 10;\n+    private static final int WEBSOCKET_RECONNECT_INTERVAL_SEC = CONNECT_TIMEOUT_SEC * 2;\n+    private static final int WEBSOCKET_IDLE_TIMEOUT_MS = CONNECT_TIMEOUT_SEC * 10 * 1000;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandWebSockets.class);\n+    private static final String WS_ENDPOINT_TOUCHWAND = \"/async\";\n+\n+    private WebSocketClient client;\n+    private String controllerAddress;\n+    private TouchWandSocket touchWandSocket;\n+    private boolean isShutDown = false;\n+    private CopyOnWriteArraySet<TouchWandUnitStatusUpdateListener> listeners = new CopyOnWriteArraySet<>();\n+    private @Nullable ScheduledFuture<?> socketReconnect;\n+    private @Nullable URI uri;\n+\n+    private ScheduledExecutorService scheduler;\n+\n+    public TouchWandWebSockets(String ipAddress, ScheduledExecutorService scheduler) {\n+        client = new WebSocketClient();\n+        touchWandSocket = new TouchWandSocket();\n+        this.controllerAddress = ipAddress;\n+        this.scheduler = scheduler;\n+        socketReconnect = null;\n+    }\n+\n+    public void connect() {\n+        try {\n+            uri = new URI(\"ws://\" + controllerAddress + WS_ENDPOINT_TOUCHWAND);\n+        } catch (URISyntaxException e) {\n+            logger.warn(\"URI not valid {} message {}\", uri, e.getMessage());\n+            return;\n+        }\n+\n+        client.setConnectTimeout(CONNECT_TIMEOUT_SEC);\n+        ClientUpgradeRequest request = new ClientUpgradeRequest();\n+        request.setSubProtocols(\"relay_protocol\");\n+\n+        try {\n+            client.start();\n+            client.connect(touchWandSocket, uri, request);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not connect webSocket URI {} message {}\", uri, e.getMessage());\n+            return;\n+        }\n+    }\n+\n+    public void dispose() {\n+        isShutDown = true;\n+        try {\n+            client.stop();\n+            if (socketReconnect != null) {\n+                socketReconnect.cancel(true);\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Could not stop webSocketClient,  message {}\", e.getMessage());\n+        }\n+    }\n+\n+    public void registerListener(TouchWandUnitStatusUpdateListener listener) {\n+        if (!listeners.contains(listener)) {\n+            logger.debug(\"Adding TouchWandWebSocket listener {}\", listener);\n+            listeners.add(listener);\n+        }\n+    }\n+\n+    public void unregisterListener(TouchWandUnitStatusUpdateListener listener) {\n+        logger.debug(\"Removing TouchWandWebSocket listener {}\", listener);\n+        listeners.remove(listener);\n+    }\n+\n+    @WebSocket(maxIdleTime = WEBSOCKET_IDLE_TIMEOUT_MS)\n+    public class TouchWandSocket {\n+\n+        public TouchWandSocket() {\n+        }", "originalCommit": "af9da70abcf35d9d27002e4d6e7ed7c2e264b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3NTkxMw==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506975913", "bodyText": "done", "author": "roieg", "createdAt": "2020-10-17T19:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2ODIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "d1279d4765265fd4968444b9c414c5cf87946f21", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\nindex 7f9860b731..e0c59ba372 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n\n@@ -99,8 +99,9 @@ public class TouchWandWebSockets {\n         isShutDown = true;\n         try {\n             client.stop();\n-            if (socketReconnect != null) {\n-                socketReconnect.cancel(true);\n+            ScheduledFuture<?> mySocketReconnect = socketReconnect;\n+            if (mySocketReconnect != null) {\n+                mySocketReconnect.cancel(true);\n             }\n         } catch (Exception e) {\n             logger.warn(\"Could not stop webSocketClient,  message {}\", e.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2ODMwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506968305", "bodyText": "Please try to catch specific exceptions here. At the very least catch RuntimeException instead.", "author": "cpmeister", "createdAt": "2020-10-17T18:04:10Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.SUPPORTED_TOUCHWAND_TYPES;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Arrays;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitFromJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link TouchWandWebSockets} class implements WebSockets API to TouchWand controller\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TouchWandWebSockets {\n+\n+    private static final int CONNECT_TIMEOUT_SEC = 10;\n+    private static final int WEBSOCKET_RECONNECT_INTERVAL_SEC = CONNECT_TIMEOUT_SEC * 2;\n+    private static final int WEBSOCKET_IDLE_TIMEOUT_MS = CONNECT_TIMEOUT_SEC * 10 * 1000;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandWebSockets.class);\n+    private static final String WS_ENDPOINT_TOUCHWAND = \"/async\";\n+\n+    private WebSocketClient client;\n+    private String controllerAddress;\n+    private TouchWandSocket touchWandSocket;\n+    private boolean isShutDown = false;\n+    private CopyOnWriteArraySet<TouchWandUnitStatusUpdateListener> listeners = new CopyOnWriteArraySet<>();\n+    private @Nullable ScheduledFuture<?> socketReconnect;\n+    private @Nullable URI uri;\n+\n+    private ScheduledExecutorService scheduler;\n+\n+    public TouchWandWebSockets(String ipAddress, ScheduledExecutorService scheduler) {\n+        client = new WebSocketClient();\n+        touchWandSocket = new TouchWandSocket();\n+        this.controllerAddress = ipAddress;\n+        this.scheduler = scheduler;\n+        socketReconnect = null;\n+    }\n+\n+    public void connect() {\n+        try {\n+            uri = new URI(\"ws://\" + controllerAddress + WS_ENDPOINT_TOUCHWAND);\n+        } catch (URISyntaxException e) {\n+            logger.warn(\"URI not valid {} message {}\", uri, e.getMessage());\n+            return;\n+        }\n+\n+        client.setConnectTimeout(CONNECT_TIMEOUT_SEC);\n+        ClientUpgradeRequest request = new ClientUpgradeRequest();\n+        request.setSubProtocols(\"relay_protocol\");\n+\n+        try {\n+            client.start();\n+            client.connect(touchWandSocket, uri, request);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not connect webSocket URI {} message {}\", uri, e.getMessage());\n+            return;\n+        }\n+    }\n+\n+    public void dispose() {\n+        isShutDown = true;\n+        try {\n+            client.stop();\n+            if (socketReconnect != null) {\n+                socketReconnect.cancel(true);\n+            }\n+        } catch (Exception e) {", "originalCommit": "af9da70abcf35d9d27002e4d6e7ed7c2e264b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3NzAxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506977010", "bodyText": "The IDE insists I will catch Exception , catching just RuntimeException  will not do\nAny idea ?", "author": "roieg", "createdAt": "2020-10-17T19:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2ODMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3NzQzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506977434", "bodyText": "Ah, I forgot that client.stop() just throws a plain Exception. In that case please disregard my recommendation here.", "author": "cpmeister", "createdAt": "2020-10-17T19:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2ODMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1279d4765265fd4968444b9c414c5cf87946f21", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\nindex 7f9860b731..e0c59ba372 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandWebSockets.java\n\n@@ -99,8 +99,9 @@ public class TouchWandWebSockets {\n         isShutDown = true;\n         try {\n             client.stop();\n-            if (socketReconnect != null) {\n-                socketReconnect.cancel(true);\n+            ScheduledFuture<?> mySocketReconnect = socketReconnect;\n+            if (mySocketReconnect != null) {\n+                mySocketReconnect.cancel(true);\n             }\n         } catch (Exception e) {\n             logger.warn(\"Could not stop webSocketClient,  message {}\", e.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2ODQ3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506968478", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DatagramSocket mySocket;\n          \n          \n            \n                    private DatagramSocket mySocket;", "author": "cpmeister", "createdAt": "2020-10-17T18:05:52Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.discovery;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.TouchWandBindingConstants;\n+import org.openhab.binding.touchwand.internal.TouchWandBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link TouchWandControllerDiscoveryService} Discovery service for Touchwand Controllers.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.touchwand\")\n+@NonNullByDefault\n+public class TouchWandControllerDiscoveryService extends AbstractDiscoveryService {\n+\n+    private static final int SEARCH_TIME_SEC = 2;\n+    private static final int TOUCHWAND_BCAST_PORT = 35000;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandControllerDiscoveryService.class);\n+\n+    private @Nullable Thread socketReceiveThread = null;\n+    private DatagramSocket listenSocket;\n+\n+    public TouchWandControllerDiscoveryService() throws SocketException {\n+        super(TouchWandBridgeHandler.SUPPORTED_THING_TYPES, SEARCH_TIME_SEC, true);\n+\n+        listenSocket = new DatagramSocket(TOUCHWAND_BCAST_PORT);\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        DatagramSocket localListenSocket = listenSocket;\n+        runReceiveThread(localListenSocket);\n+    }\n+\n+    @Override\n+    protected void stopScan() {\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    public void activate(@Nullable Map<String, @Nullable Object> configProperties) {\n+        removeOlderResults(getTimestampOfLastScan());\n+        super.activate(configProperties);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        Thread mySocketReceiveThread = socketReceiveThread;\n+        if (mySocketReceiveThread != null) {\n+            mySocketReceiveThread.interrupt();\n+            socketReceiveThread = null;\n+        }\n+\n+        listenSocket.close();\n+        super.deactivate();\n+    }\n+\n+    private void addDeviceDiscoveryResult(String label, String ip) {\n+        String id = ip.replaceAll(\"\\\\.\", \"\");\n+        ThingUID thingUID = new ThingUID(THING_TYPE_BRIDGE, id);\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"label\", label);\n+        properties.put(\"ipAddress\", ip);\n+        // @formatter:off\n+        logger.debug(\"Add new Bridge label:{} id {} \",label, id);\n+        thingDiscovered(DiscoveryResultBuilder.create(thingUID)\n+                .withThingType(THING_TYPE_BRIDGE)\n+                .withLabel(label)\n+                .withProperties(properties)\n+                .withRepresentationProperty(\"ipAddress\")\n+                .build()\n+        );\n+        // @formatter:on\n+    }\n+\n+    protected void runReceiveThread(DatagramSocket socket) {\n+        Thread localSocketReceivedThread = socketReceiveThread = new ReceiverThread(socket);\n+        localSocketReceivedThread.setName(TouchWandBindingConstants.DISCOVERY_THREAD_ID);\n+        localSocketReceivedThread.start();\n+    }\n+\n+    private class ReceiverThread extends Thread {\n+\n+        private static final int BUFFER_LENGTH = 256;\n+        private DatagramPacket dgram = new DatagramPacket(new byte[BUFFER_LENGTH], BUFFER_LENGTH);\n+        DatagramSocket mySocket;", "originalCommit": "af9da70abcf35d9d27002e4d6e7ed7c2e264b426", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1279d4765265fd4968444b9c414c5cf87946f21", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\nindex 10ab9ae382..f79e3144ee 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\n\n@@ -108,6 +108,7 @@ public class TouchWandControllerDiscoveryService extends AbstractDiscoveryServic\n     protected void runReceiveThread(DatagramSocket socket) {\n         Thread localSocketReceivedThread = socketReceiveThread = new ReceiverThread(socket);\n         localSocketReceivedThread.setName(TouchWandBindingConstants.DISCOVERY_THREAD_ID);\n+        localSocketReceivedThread.setDaemon(true);\n         localSocketReceivedThread.start();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2ODUxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506968512", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    localSocketReceivedThread.setName(TouchWandBindingConstants.DISCOVERY_THREAD_ID);\n          \n          \n            \n                    localSocketReceivedThread.start();\n          \n          \n            \n                    localSocketReceivedThread.setName(TouchWandBindingConstants.DISCOVERY_THREAD_ID);\n          \n          \n            \n                    localSocketReceivedThread.setDaemon(true);\n          \n          \n            \n                    localSocketReceivedThread.start();", "author": "cpmeister", "createdAt": "2020-10-17T18:06:13Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.touchwand.internal.discovery;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.TouchWandBindingConstants;\n+import org.openhab.binding.touchwand.internal.TouchWandBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link TouchWandControllerDiscoveryService} Discovery service for Touchwand Controllers.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.touchwand\")\n+@NonNullByDefault\n+public class TouchWandControllerDiscoveryService extends AbstractDiscoveryService {\n+\n+    private static final int SEARCH_TIME_SEC = 2;\n+    private static final int TOUCHWAND_BCAST_PORT = 35000;\n+    private final Logger logger = LoggerFactory.getLogger(TouchWandControllerDiscoveryService.class);\n+\n+    private @Nullable Thread socketReceiveThread = null;\n+    private DatagramSocket listenSocket;\n+\n+    public TouchWandControllerDiscoveryService() throws SocketException {\n+        super(TouchWandBridgeHandler.SUPPORTED_THING_TYPES, SEARCH_TIME_SEC, true);\n+\n+        listenSocket = new DatagramSocket(TOUCHWAND_BCAST_PORT);\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        DatagramSocket localListenSocket = listenSocket;\n+        runReceiveThread(localListenSocket);\n+    }\n+\n+    @Override\n+    protected void stopScan() {\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    public void activate(@Nullable Map<String, @Nullable Object> configProperties) {\n+        removeOlderResults(getTimestampOfLastScan());\n+        super.activate(configProperties);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        Thread mySocketReceiveThread = socketReceiveThread;\n+        if (mySocketReceiveThread != null) {\n+            mySocketReceiveThread.interrupt();\n+            socketReceiveThread = null;\n+        }\n+\n+        listenSocket.close();\n+        super.deactivate();\n+    }\n+\n+    private void addDeviceDiscoveryResult(String label, String ip) {\n+        String id = ip.replaceAll(\"\\\\.\", \"\");\n+        ThingUID thingUID = new ThingUID(THING_TYPE_BRIDGE, id);\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"label\", label);\n+        properties.put(\"ipAddress\", ip);\n+        // @formatter:off\n+        logger.debug(\"Add new Bridge label:{} id {} \",label, id);\n+        thingDiscovered(DiscoveryResultBuilder.create(thingUID)\n+                .withThingType(THING_TYPE_BRIDGE)\n+                .withLabel(label)\n+                .withProperties(properties)\n+                .withRepresentationProperty(\"ipAddress\")\n+                .build()\n+        );\n+        // @formatter:on\n+    }\n+\n+    protected void runReceiveThread(DatagramSocket socket) {\n+        Thread localSocketReceivedThread = socketReceiveThread = new ReceiverThread(socket);\n+        localSocketReceivedThread.setName(TouchWandBindingConstants.DISCOVERY_THREAD_ID);\n+        localSocketReceivedThread.start();", "originalCommit": "af9da70abcf35d9d27002e4d6e7ed7c2e264b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3NzM4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506977389", "bodyText": "done", "author": "roieg", "createdAt": "2020-10-17T19:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2ODUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "d1279d4765265fd4968444b9c414c5cf87946f21", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\nindex 10ab9ae382..f79e3144ee 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/discovery/TouchWandControllerDiscoveryService.java\n\n@@ -108,6 +108,7 @@ public class TouchWandControllerDiscoveryService extends AbstractDiscoveryServic\n     protected void runReceiveThread(DatagramSocket socket) {\n         Thread localSocketReceivedThread = socketReceiveThread = new ReceiverThread(socket);\n         localSocketReceivedThread.setName(TouchWandBindingConstants.DISCOVERY_THREAD_ID);\n+        localSocketReceivedThread.setDaemon(true);\n         localSocketReceivedThread.start();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2OTQ3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506969471", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                protected TouchWandBridgeHandler bridgeHandler;\n          \n          \n            \n                protected @Nullable TouchWandBridgeHandler bridgeHandler;", "author": "cpmeister", "createdAt": "2020-10-17T18:17:25Z", "path": "bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.touchwand.internal;\n+\n+import static org.openhab.binding.touchwand.internal.TouchWandBindingConstants.*;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.touchwand.internal.dto.TouchWandUnitData;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * The {@link TouchWandBaseUnitHandler} is responsible for handling commands and status updates\n+ * for TouchWand units. This is an abstract class , units should implement the specific command\n+ * handling and status updates.\n+ *\n+ * @author Roie Geron - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public abstract class TouchWandBaseUnitHandler extends BaseThingHandler implements TouchWandUnitUpdateListener {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(TouchWandBaseUnitHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(THING_TYPE_SHUTTER, THING_TYPE_SWITCH,\n+            THING_TYPE_WALLCONTROLLER, THING_TYPE_DIMMER);\n+    protected String unitId = \"\";\n+\n+    @Nullable\n+    protected TouchWandBridgeHandler bridgeHandler;", "originalCommit": "af9da70abcf35d9d27002e4d6e7ed7c2e264b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3NzIxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8754#discussion_r506977210", "bodyText": "done", "author": "roieg", "createdAt": "2020-10-17T19:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2OTQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1279d4765265fd4968444b9c414c5cf87946f21", "chunk": "diff --git a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java\nindex 33a38c30bc..d1b1de3dcc 100644\n--- a/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java\n+++ b/bundles/org.openhab.binding.touchwand/src/main/java/org/openhab/binding/touchwand/internal/TouchWandBaseUnitHandler.java\n\n@@ -51,8 +51,7 @@ public abstract class TouchWandBaseUnitHandler extends BaseThingHandler implemen\n             THING_TYPE_WALLCONTROLLER, THING_TYPE_DIMMER);\n     protected String unitId = \"\";\n \n-    @Nullable\n-    protected TouchWandBridgeHandler bridgeHandler;\n+    protected @Nullable TouchWandBridgeHandler bridgeHandler;\n \n     public TouchWandBaseUnitHandler(Thing thing) {\n         super(thing);\n"}}, {"oid": "d1279d4765265fd4968444b9c414c5cf87946f21", "url": "https://github.com/openhab/openhab-addons/commit/d1279d4765265fd4968444b9c414c5cf87946f21", "message": "Changes requeste in @cpmeister review\n\nSigned-off-by: Roie Geron <roie.geron@gmail.com>", "committedDate": "2020-10-17T19:48:03Z", "type": "commit"}]}