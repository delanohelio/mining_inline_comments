{"pr_number": 9368, "pr_title": "[Daikinmadoka] New channels and fixes", "pr_createdAt": "2020-12-13T17:38:28Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9368", "timeline": [{"oid": "dbea06a74c7e3e0e2af9b6d39be3a202d6fd9b0d", "url": "https://github.com/openhab/openhab-addons/commit/dbea06a74c7e3e0e2af9b6d39be3a202d6fd9b0d", "message": "added new channels and extra fixes\n\nSigned-off-by: Benjamin Lafois <benjamin.lafois@gmail.com>", "committedDate": "2020-11-19T21:12:29Z", "type": "commit"}, {"oid": "dbdd4b340aef64530b02c0253c7ac957dc5e981e", "url": "https://github.com/openhab/openhab-addons/commit/dbdd4b340aef64530b02c0253c7ac957dc5e981e", "message": "wip\n\nSigned-off-by: Benjamin Lafois <benjamin.lafois@gmail.com>", "committedDate": "2020-11-23T22:17:25Z", "type": "commit"}, {"oid": "bbfe73ac279dca23ae510fcc4621bdfe7c8bbfbf", "url": "https://github.com/openhab/openhab-addons/commit/bbfe73ac279dca23ae510fcc4621bdfe7c8bbfbf", "message": "added multiple channels\n\nSigned-off-by: Benjamin Lafois <benjamin.lafois@gmail.com>", "committedDate": "2020-12-13T17:36:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA1ODE2NA==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r542058164", "bodyText": "Why do you need an enum for this when you can just use the ByteOrder class directly instead?", "author": "cpmeister", "createdAt": "2020-12-14T01:41:50Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/MadokaValue.java", "diffHunk": "@@ -25,6 +26,21 @@\n @NonNullByDefault\n public class MadokaValue {\n \n+    public enum Endianness {\n+        LITTLE_ENDIAN(ByteOrder.LITTLE_ENDIAN),\n+        BIG_ENDIAN(ByteOrder.BIG_ENDIAN);\n+\n+        private ByteOrder order;\n+\n+        private Endianness(ByteOrder order) {\n+            this.order = order;\n+        }\n+\n+        public ByteOrder getOrder() {\n+            return this.order;\n+        }\n+    }", "originalCommit": "bbfe73ac279dca23ae510fcc4621bdfe7c8bbfbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MDc4OA==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r542440788", "bodyText": "Yep - fixed.", "author": "blafois", "createdAt": "2020-12-14T14:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA1ODE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "6d8b684596078a1c045016f735571529ebb0cf15", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/MadokaValue.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/MadokaValue.java\nindex bba2f52032..db99673f7f 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/MadokaValue.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/MadokaValue.java\n\n@@ -26,21 +26,6 @@ import org.eclipse.jdt.annotation.Nullable;\n @NonNullByDefault\n public class MadokaValue {\n \n-    public enum Endianness {\n-        LITTLE_ENDIAN(ByteOrder.LITTLE_ENDIAN),\n-        BIG_ENDIAN(ByteOrder.BIG_ENDIAN);\n-\n-        private ByteOrder order;\n-\n-        private Endianness(ByteOrder order) {\n-            this.order = order;\n-        }\n-\n-        public ByteOrder getOrder() {\n-            return this.order;\n-        }\n-    }\n-\n     private int id;\n     private int size;\n     private byte @Nullable [] rawValue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MDI1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r542060253", "bodyText": "Because byteToHex can be an expensive(ish) operation please wrap this in a logging level check.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"[{}] onCharacteristicUpdate({})\", super.thing.getUID().getId(),\n          \n          \n            \n                            HexUtils.bytesToHex(characteristic.getByteValue()));\n          \n          \n            \n                    if(logger.isDebugEnabled()){\n          \n          \n            \n                        logger.debug(\"[{}] onCharacteristicUpdate({})\", super.thing.getUID().getId(),\n          \n          \n            \n                            HexUtils.bytesToHex(characteristic.getByteValue()));\n          \n          \n            \n                    }", "author": "cpmeister", "createdAt": "2020-12-14T01:50:16Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java", "diffHunk": "@@ -290,8 +335,19 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n         }\n     }\n \n+    /**\n+     * 2 actions need to be done: disable the notification AND reset the filter timer\n+     */\n+    private void resetCleanFilterIndicator() {\n+        logger.debug(\"[{}] resetCleanFilterIndicator()\", super.thing.getUID().getId());\n+        submitCommand(new DisableCleanFilterIndicatorCommand());\n+        submitCommand(new ResetCleanFilterTimerCommand());\n+    }\n+\n     @Override\n     public void onCharacteristicUpdate(BluetoothCharacteristic characteristic) {\n+        logger.debug(\"[{}] onCharacteristicUpdate({})\", super.thing.getUID().getId(),\n+                HexUtils.bytesToHex(characteristic.getByteValue()));", "originalCommit": "bbfe73ac279dca23ae510fcc4621bdfe7c8bbfbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d8b684596078a1c045016f735571529ebb0cf15", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\nindex f76fc57c75..c611653dc7 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\n\n@@ -346,8 +349,10 @@ public class DaikinMadokaHandler extends ConnectedBluetoothHandler implements Re\n \n     @Override\n     public void onCharacteristicUpdate(BluetoothCharacteristic characteristic) {\n-        logger.debug(\"[{}] onCharacteristicUpdate({})\", super.thing.getUID().getId(),\n-                HexUtils.bytesToHex(characteristic.getByteValue()));\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"[{}] onCharacteristicUpdate({})\", super.thing.getUID().getId(),\n+                    HexUtils.bytesToHex(characteristic.getByteValue()));\n+        }\n         super.onCharacteristicUpdate(characteristic);\n \n         // Check that arguments are valid.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MDUwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r542060502", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.", "author": "cpmeister", "createdAt": "2020-12-14T01:51:14Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java", "diffHunk": "@@ -121,7 +129,30 @@ public void initialize() {\n             submitCommand(new GetPowerstateCommand()); // always keep the \"GetPowerState\" aftern the \"GetOperationMode\"\n             submitCommand(new GetSetpointCommand());\n             submitCommand(new GetFanspeedCommand());\n-        }, 10, c.refreshInterval, TimeUnit.SECONDS);\n+            submitCommand(new GetCleanFilterIndicatorCommand());\n+\n+            // As it is a complex operation - it has been extracted to a method.\n+            retrieveOperationHours();\n+\n+            submitCommand(new GetEyeBrightnessCommand());\n+        }, new Random().nextInt(30), c.refreshInterval, TimeUnit.SECONDS); // We introduce a random start time, it\n+                                                                           // avoids when having multiple devices to\n+                                                                           // have the commands sent simultaneously.\n+    }\n+\n+    private void retrieveOperationHours() {\n+        // This one is special - and MUST be ran twice, after being in priv mode\n+        // run it once an hour is sufficient... TODO\n+        submitCommand(new EnterPrivilegedModeCommand());\n+        submitCommand(new GetOperationHoursCommand());\n+        // a 1second+ delay is necessary\n+        try {\n+            Thread.sleep(1500);\n+        } catch (InterruptedException e) {\n+            logger.error(\"Error in retrieveOperationHours()\", e);", "originalCommit": "bbfe73ac279dca23ae510fcc4621bdfe7c8bbfbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d8b684596078a1c045016f735571529ebb0cf15", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\nindex f76fc57c75..c611653dc7 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\n\n@@ -131,8 +132,13 @@ public class DaikinMadokaHandler extends ConnectedBluetoothHandler implements Re\n             submitCommand(new GetFanspeedCommand());\n             submitCommand(new GetCleanFilterIndicatorCommand());\n \n-            // As it is a complex operation - it has been extracted to a method.\n-            retrieveOperationHours();\n+            try {\n+                // As it is a complex operation - it has been extracted to a method.\n+                retrieveOperationHours();\n+            } catch (InterruptedException e) {\n+                // The thread wants to exit!\n+                return;\n+            }\n \n             submitCommand(new GetEyeBrightnessCommand());\n         }, new Random().nextInt(30), c.refreshInterval, TimeUnit.SECONDS); // We introduce a random start time, it\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MTAwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r542061005", "bodyText": "If the thread was interrupted you should try and return as soon as possible since an interrupt means that the system wants your thread to shutdown.\nSimply returning early from this may not be sufficient as the method's caller might continue operating as if things are normal. I suggest having the InterruptedException continue up the stack and let the caller handler it.", "author": "cpmeister", "createdAt": "2020-12-14T01:52:58Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java", "diffHunk": "@@ -121,7 +129,30 @@ public void initialize() {\n             submitCommand(new GetPowerstateCommand()); // always keep the \"GetPowerState\" aftern the \"GetOperationMode\"\n             submitCommand(new GetSetpointCommand());\n             submitCommand(new GetFanspeedCommand());\n-        }, 10, c.refreshInterval, TimeUnit.SECONDS);\n+            submitCommand(new GetCleanFilterIndicatorCommand());\n+\n+            // As it is a complex operation - it has been extracted to a method.\n+            retrieveOperationHours();\n+\n+            submitCommand(new GetEyeBrightnessCommand());\n+        }, new Random().nextInt(30), c.refreshInterval, TimeUnit.SECONDS); // We introduce a random start time, it\n+                                                                           // avoids when having multiple devices to\n+                                                                           // have the commands sent simultaneously.\n+    }\n+\n+    private void retrieveOperationHours() {\n+        // This one is special - and MUST be ran twice, after being in priv mode\n+        // run it once an hour is sufficient... TODO\n+        submitCommand(new EnterPrivilegedModeCommand());\n+        submitCommand(new GetOperationHoursCommand());\n+        // a 1second+ delay is necessary\n+        try {\n+            Thread.sleep(1500);\n+        } catch (InterruptedException e) {\n+            logger.error(\"Error in retrieveOperationHours()\", e);\n+            Thread.currentThread().interrupt();\n+        }", "originalCommit": "bbfe73ac279dca23ae510fcc4621bdfe7c8bbfbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d8b684596078a1c045016f735571529ebb0cf15", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\nindex f76fc57c75..c611653dc7 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\n\n@@ -131,8 +132,13 @@ public class DaikinMadokaHandler extends ConnectedBluetoothHandler implements Re\n             submitCommand(new GetFanspeedCommand());\n             submitCommand(new GetCleanFilterIndicatorCommand());\n \n-            // As it is a complex operation - it has been extracted to a method.\n-            retrieveOperationHours();\n+            try {\n+                // As it is a complex operation - it has been extracted to a method.\n+                retrieveOperationHours();\n+            } catch (InterruptedException e) {\n+                // The thread wants to exit!\n+                return;\n+            }\n \n             submitCommand(new GetEyeBrightnessCommand());\n         }, new Random().nextInt(30), c.refreshInterval, TimeUnit.SECONDS); // We introduce a random start time, it\n"}}, {"oid": "6d8b684596078a1c045016f735571529ebb0cf15", "url": "https://github.com/openhab/openhab-addons/commit/6d8b684596078a1c045016f735571529ebb0cf15", "message": "fixes after PR comments\n\nSigned-off-by: Benjamin Lafois <benjamin.lafois@gmail.com>", "committedDate": "2020-12-15T17:45:19Z", "type": "commit"}, {"oid": "452f1818c4ae675f40ecd487e7dc1e7bdc6aff38", "url": "https://github.com/openhab/openhab-addons/commit/452f1818c4ae675f40ecd487e7dc1e7bdc6aff38", "message": "added support for AUTO fan mode\n\nSigned-off-by: Benjamin Lafois <benjamin.lafois@gmail.com>", "committedDate": "2020-12-21T14:57:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE2MzQ4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r548163485", "bodyText": "These should be QuantityTypes now instead.", "author": "cpmeister", "createdAt": "2020-12-23T19:26:38Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java", "diffHunk": "@@ -690,6 +786,36 @@ public void receivedResponse(SetPowerstateCommand command) {\n         }\n     }\n \n+    @Override\n+    public void receivedResponse(GetOperationHoursCommand command) {\n+        logger.debug(\"receivedResponse(GetOperationHoursCommand command)\");\n+\n+        DecimalType indoorPowerHours = command.getIndoorPowerHours();\n+        DecimalType indoorOperationHours = command.getIndoorOperationHours();\n+        DecimalType indoorFanHours = command.getIndoorFanHours();", "originalCommit": "452f1818c4ae675f40ecd487e7dc1e7bdc6aff38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAzMDM5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r549030392", "bodyText": "Fixed. Have also fixed other units (SetPoint, IndoorTemperature, OutdoorTemperature...) all migrated to QuantityType", "author": "blafois", "createdAt": "2020-12-26T20:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE2MzQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "be1114665c72c035c4c46704fb9073f2f73477e5", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\nindex c611653dc7..fa8df5b436 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/handler/DaikinMadokaHandler.java\n\n@@ -790,9 +792,9 @@ public class DaikinMadokaHandler extends ConnectedBluetoothHandler implements Re\n     public void receivedResponse(GetOperationHoursCommand command) {\n         logger.debug(\"receivedResponse(GetOperationHoursCommand command)\");\n \n-        DecimalType indoorPowerHours = command.getIndoorPowerHours();\n-        DecimalType indoorOperationHours = command.getIndoorOperationHours();\n-        DecimalType indoorFanHours = command.getIndoorFanHours();\n+        QuantityType<Time> indoorPowerHours = command.getIndoorPowerHours();\n+        QuantityType<Time> indoorOperationHours = command.getIndoorOperationHours();\n+        QuantityType<Time> indoorFanHours = command.getIndoorFanHours();\n \n         if (indoorPowerHours != null) {\n             this.madokaSettings.setIndoorPowerHours(indoorPowerHours);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE2NDExNg==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r548164116", "bodyText": "all locking should be done in a try statement with the unlock inside the finally clause.", "author": "cpmeister", "createdAt": "2020-12-23T19:27:17Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/BRC1HUartProcessor.java", "diffHunk": "@@ -94,6 +104,7 @@ public void chunkReceived(byte[] byteValue) {\n \n             this.responseListener.receivedResponse(bos.toByteArray());\n         }\n+        stateLock.unlock();", "originalCommit": "452f1818c4ae675f40ecd487e7dc1e7bdc6aff38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAzMDU1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r549030551", "bodyText": "Done", "author": "blafois", "createdAt": "2020-12-26T20:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE2NDExNg=="}], "type": "inlineReview", "revised_code": {"commit": "1efc07ee9bb1173db53f7a25601420a119c3a1e8", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/BRC1HUartProcessor.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/BRC1HUartProcessor.java\nindex e86bf096da..da88516770 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/BRC1HUartProcessor.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/BRC1HUartProcessor.java\n\n@@ -87,24 +87,27 @@ public class BRC1HUartProcessor {\n \n     public void chunkReceived(byte[] byteValue) {\n         stateLock.lock();\n-        this.uartMessages.add(byteValue);\n-        if (isMessageComplete()) {\n-            logger.debug(\"Complete message received!\");\n-\n-            // Beyond this point, full message received\n-            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-\n-            for (byte[] msg : uartMessages) {\n-                if (msg.length > 1) {\n-                    bos.write(msg, 1, msg.length - 1);\n+        try {\n+            this.uartMessages.add(byteValue);\n+            if (isMessageComplete()) {\n+                logger.debug(\"Complete message received!\");\n+\n+                // Beyond this point, full message received\n+                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+\n+                for (byte[] msg : uartMessages) {\n+                    if (msg.length > 1) {\n+                        bos.write(msg, 1, msg.length - 1);\n+                    }\n                 }\n-            }\n \n-            this.uartMessages.clear();\n+                this.uartMessages.clear();\n \n-            this.responseListener.receivedResponse(bos.toByteArray());\n+                this.responseListener.receivedResponse(bos.toByteArray());\n+            }\n+        } finally {\n+            stateLock.unlock();\n         }\n-        stateLock.unlock();\n     }\n \n     public void abandon() {\n"}}, {"oid": "be1114665c72c035c4c46704fb9073f2f73477e5", "url": "https://github.com/openhab/openhab-addons/commit/be1114665c72c035c4c46704fb9073f2f73477e5", "message": "Fixes units\n\nSigned-off-by: Benjamin Lafois <benjamin.lafois@gmail.com>", "committedDate": "2020-12-26T20:38:54Z", "type": "commit"}, {"oid": "ea65d530424fcb8c43bb7a4301ad0954867a76d7", "url": "https://github.com/openhab/openhab-addons/commit/ea65d530424fcb8c43bb7a4301ad0954867a76d7", "message": "Merge after move from 3.0.0-SNAPSHOT to 3.1.0-SNAPSHOT\n\nMerge remote-tracking branch 'upstream/main' into daikinmadoka-fixes-enhancements", "committedDate": "2020-12-26T20:42:14Z", "type": "commit"}, {"oid": "1efc07ee9bb1173db53f7a25601420a119c3a1e8", "url": "https://github.com/openhab/openhab-addons/commit/1efc07ee9bb1173db53f7a25601420a119c3a1e8", "message": "Fix PR\n\nSigned-off-by: Benjamin Lafois <benjamin.lafois@gmail.com>", "committedDate": "2020-12-26T20:54:14Z", "type": "commit"}, {"oid": "2bee0f426328a8a6d5c63c1e8abbb2bae0fb19cd", "url": "https://github.com/openhab/openhab-addons/commit/2bee0f426328a8a6d5c63c1e8abbb2bae0fb19cd", "message": "PR fixes\n\nSigned-off-by: Benjamin Lafois <benjamin.lafois@gmail.com>", "committedDate": "2020-12-28T17:26:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMzM2OA==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r550913368", "bodyText": "I think that calling this inside of a lock might risk a deadlock in the core. Can you call this outside of your lock/unlock block?", "author": "cpmeister", "createdAt": "2021-01-02T19:34:24Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/BRC1HUartProcessor.java", "diffHunk": "@@ -78,21 +86,27 @@ private boolean isMessageComplete() {\n     }\n \n     public void chunkReceived(byte[] byteValue) {\n-        this.uartMessages.add(byteValue);\n-        if (isMessageComplete()) {\n-\n-            // Beyond this point, full message received\n-            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-\n-            for (byte[] msg : uartMessages) {\n-                if (msg.length > 1) {\n-                    bos.write(msg, 1, msg.length - 1);\n+        stateLock.lock();\n+        try {\n+            this.uartMessages.add(byteValue);\n+            if (isMessageComplete()) {\n+                logger.debug(\"Complete message received!\");\n+\n+                // Beyond this point, full message received\n+                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+\n+                for (byte[] msg : uartMessages) {\n+                    if (msg.length > 1) {\n+                        bos.write(msg, 1, msg.length - 1);\n+                    }\n                 }\n-            }\n \n-            this.uartMessages.clear();\n+                this.uartMessages.clear();\n \n-            this.responseListener.receivedResponse(bos.toByteArray());\n+                this.responseListener.receivedResponse(bos.toByteArray());", "originalCommit": "2bee0f426328a8a6d5c63c1e8abbb2bae0fb19cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxNDgyNw==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r550914827", "bodyText": "I dont see other option. The goal here is to avoid the Byte Array Output Stream to be modified. Otherwise, I should maybe clone the BOS and call the received response after ?", "author": "blafois", "createdAt": "2021-01-02T19:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMzM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxNzcwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r550917705", "bodyText": "Copying the array then calling receivedResponse later would be preferred, yes.", "author": "cpmeister", "createdAt": "2021-01-02T20:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMzM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "c21e793db4baff31804d5e3f11f156b6e62d9acf", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/BRC1HUartProcessor.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/BRC1HUartProcessor.java\nindex da88516770..d09b89e522 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/BRC1HUartProcessor.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/BRC1HUartProcessor.java\n\n@@ -86,6 +86,7 @@ public class BRC1HUartProcessor {\n     }\n \n     public void chunkReceived(byte[] byteValue) {\n+        byte[] fullReceivedMessage = null;\n         stateLock.lock();\n         try {\n             this.uartMessages.add(byteValue);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMzY1MA==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r550913650", "bodyText": "Please just import the core package instead of declaring here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.indoorFanHours = new QuantityType<Time>(iIndoorFanHours, org.openhab.core.library.unit.Units.HOUR);\n          \n          \n            \n                        this.indoorFanHours = new QuantityType<Time>(iIndoorFanHours, Units.HOUR);\n          \n      \n    \n    \n  \n\nPlease update wherever applicable.", "author": "cpmeister", "createdAt": "2021-01-02T19:36:49Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetOperationHoursCommand.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.daikinmadoka.internal.model.commands;\n+\n+import java.nio.ByteOrder;\n+import java.util.concurrent.Executor;\n+\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.daikinmadoka.internal.model.MadokaMessage;\n+import org.openhab.binding.bluetooth.daikinmadoka.internal.model.MadokaParsingException;\n+import org.openhab.binding.bluetooth.daikinmadoka.internal.model.MadokaValue;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This command returns the operating hours of internal unit\n+ *\n+ * @author Benjamin Lafois - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GetOperationHoursCommand extends BRC1HCommand {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GetOperationHoursCommand.class);\n+\n+    private @Nullable QuantityType<Time> indoorOperationHours;\n+    private @Nullable QuantityType<Time> indoorFanHours;\n+    private @Nullable QuantityType<Time> indoorPowerHours;\n+\n+    @Override\n+    public byte[][] getRequest() {\n+        MadokaValue specificUnitNumber = new MadokaValue(0x02, 1, new byte[] { (byte) 0x00 });\n+        MadokaValue p40 = new MadokaValue(0x40, 0, new byte[] {});\n+        MadokaValue p41 = new MadokaValue(0x41, 0, new byte[] {});\n+        MadokaValue p42 = new MadokaValue(0x42, 0, new byte[] {});\n+        MadokaValue p43 = new MadokaValue(0x43, 0, new byte[] {});\n+        MadokaValue p44 = new MadokaValue(0x44, 0, new byte[] {});\n+        MadokaValue p45 = new MadokaValue(0x45, 0, new byte[] {});\n+        MadokaValue p46 = new MadokaValue(0x46, 0, new byte[] {});\n+        MadokaValue p47 = new MadokaValue(0x47, 0, new byte[] {});\n+        MadokaValue p48 = new MadokaValue(0x48, 0, new byte[] {});\n+\n+        return MadokaMessage.createRequest(this, specificUnitNumber, p40, p41, p42, p43, p44, p45, p46, p47, p48);\n+    }\n+\n+    @Override\n+    public void handleResponse(Executor executor, ResponseListener listener, MadokaMessage mm)\n+            throws MadokaParsingException {\n+        try {\n+\n+            byte[] msg = mm.getRawMessage();\n+            if (logger.isDebugEnabled() && msg != null) {\n+                logger.debug(\"Got response for {} : {}\", this.getClass().getSimpleName(), HexUtils.bytesToHex(msg));\n+            }\n+\n+            // The specific GetOperationHours requires 2 consecutive runs for some reason.\n+            // If value size is 0, then it will be for the next query!\n+            if (mm.getValues().get(0x40).getSize() == 0) {\n+                setState(State.SUCCEEDED);\n+                return;\n+            }\n+\n+            Integer iIndoorOperationHours = (int) (mm.getValues().get(0x40).getComputedValue(ByteOrder.LITTLE_ENDIAN));\n+            Integer iIndoorFanHours = (int) (mm.getValues().get(0x41).getComputedValue(ByteOrder.LITTLE_ENDIAN));\n+            Integer iIndoorPowerHours = (int) (mm.getValues().get(0x42).getComputedValue(ByteOrder.LITTLE_ENDIAN));\n+\n+            this.indoorOperationHours = new QuantityType<Time>(iIndoorOperationHours,\n+                    org.openhab.core.library.unit.Units.HOUR);\n+            this.indoorFanHours = new QuantityType<Time>(iIndoorFanHours, org.openhab.core.library.unit.Units.HOUR);", "originalCommit": "2bee0f426328a8a6d5c63c1e8abbb2bae0fb19cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c21e793db4baff31804d5e3f11f156b6e62d9acf", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetOperationHoursCommand.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetOperationHoursCommand.java\nindex 24c09630c5..155d9f4305 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetOperationHoursCommand.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetOperationHoursCommand.java\n\n@@ -23,6 +23,7 @@ import org.openhab.binding.bluetooth.daikinmadoka.internal.model.MadokaMessage;\n import org.openhab.binding.bluetooth.daikinmadoka.internal.model.MadokaParsingException;\n import org.openhab.binding.bluetooth.daikinmadoka.internal.model.MadokaValue;\n import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.Units;\n import org.openhab.core.util.HexUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"oid": "c21e793db4baff31804d5e3f11f156b6e62d9acf", "url": "https://github.com/openhab/openhab-addons/commit/c21e793db4baff31804d5e3f11f156b6e62d9acf", "message": "PR fixes\n\nSigned-off-by: Benjamin Lafois <benjamin.lafois@gmail.com>", "committedDate": "2021-01-02T21:27:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzNzU4MA==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r550937580", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2010-2020 Contributors to the openHAB project\n          \n          \n            \n             * Copyright (c) 2010-2021 Contributors to the openHAB project", "author": "cpmeister", "createdAt": "2021-01-03T00:33:41Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetOperationHoursCommand.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "originalCommit": "c21e793db4baff31804d5e3f11f156b6e62d9acf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f846a7952f37f5efb5fc9b92ca0800deae3c01d4", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetOperationHoursCommand.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetOperationHoursCommand.java\nindex 155d9f4305..600253be49 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetOperationHoursCommand.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetOperationHoursCommand.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzNzYyNg==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r550937626", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2010-2020 Contributors to the openHAB project\n          \n          \n            \n             * Copyright (c) 2010-2021 Contributors to the openHAB project", "author": "cpmeister", "createdAt": "2021-01-03T00:34:08Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/test/java/org/openhab/binding/bluetooth/daikinmadoka/internal/UartProcessorTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "originalCommit": "c21e793db4baff31804d5e3f11f156b6e62d9acf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f846a7952f37f5efb5fc9b92ca0800deae3c01d4", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/test/java/org/openhab/binding/bluetooth/daikinmadoka/internal/UartProcessorTest.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/test/java/org/openhab/binding/bluetooth/daikinmadoka/internal/UartProcessorTest.java\nindex 96b78dfb30..a02d2cb0c2 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/test/java/org/openhab/binding/bluetooth/daikinmadoka/internal/UartProcessorTest.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/test/java/org/openhab/binding/bluetooth/daikinmadoka/internal/UartProcessorTest.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzNzYyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r550937629", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2010-2020 Contributors to the openHAB project\n          \n          \n            \n             * Copyright (c) 2010-2021 Contributors to the openHAB project", "author": "cpmeister", "createdAt": "2021-01-03T00:34:17Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetEyeBrightnessCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "originalCommit": "c21e793db4baff31804d5e3f11f156b6e62d9acf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f846a7952f37f5efb5fc9b92ca0800deae3c01d4", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetEyeBrightnessCommand.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetEyeBrightnessCommand.java\nindex 3e54f75ee4..241adf1a37 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetEyeBrightnessCommand.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetEyeBrightnessCommand.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzNzY0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r550937643", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2010-2020 Contributors to the openHAB project\n          \n          \n            \n             * Copyright (c) 2010-2021 Contributors to the openHAB project", "author": "cpmeister", "createdAt": "2021-01-03T00:34:26Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetCleanFilterIndicatorCommand.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "originalCommit": "c21e793db4baff31804d5e3f11f156b6e62d9acf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f846a7952f37f5efb5fc9b92ca0800deae3c01d4", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetCleanFilterIndicatorCommand.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetCleanFilterIndicatorCommand.java\nindex 52d9d85193..e48d0a77bc 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetCleanFilterIndicatorCommand.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/GetCleanFilterIndicatorCommand.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzNzY1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r550937651", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2010-2020 Contributors to the openHAB project\n          \n          \n            \n             * Copyright (c) 2010-2021 Contributors to the openHAB project", "author": "cpmeister", "createdAt": "2021-01-03T00:34:32Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/EnterPrivilegedModeCommand.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "originalCommit": "c21e793db4baff31804d5e3f11f156b6e62d9acf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f846a7952f37f5efb5fc9b92ca0800deae3c01d4", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/EnterPrivilegedModeCommand.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/EnterPrivilegedModeCommand.java\nindex 5445d54cc1..4df5624533 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/EnterPrivilegedModeCommand.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/EnterPrivilegedModeCommand.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzNzY1OA==", "url": "https://github.com/openhab/openhab-addons/pull/9368#discussion_r550937658", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2010-2020 Contributors to the openHAB project\n          \n          \n            \n             * Copyright (c) 2010-2021 Contributors to the openHAB project", "author": "cpmeister", "createdAt": "2021-01-03T00:34:38Z", "path": "bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/DisableCleanFilterIndicatorCommand.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "originalCommit": "c21e793db4baff31804d5e3f11f156b6e62d9acf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f846a7952f37f5efb5fc9b92ca0800deae3c01d4", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/DisableCleanFilterIndicatorCommand.java b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/DisableCleanFilterIndicatorCommand.java\nindex 34f799d4ea..4bffc8d068 100644\n--- a/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/DisableCleanFilterIndicatorCommand.java\n+++ b/bundles/org.openhab.binding.bluetooth.daikinmadoka/src/main/java/org/openhab/binding/bluetooth/daikinmadoka/internal/model/commands/DisableCleanFilterIndicatorCommand.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information.\n"}}, {"oid": "f846a7952f37f5efb5fc9b92ca0800deae3c01d4", "url": "https://github.com/openhab/openhab-addons/commit/f846a7952f37f5efb5fc9b92ca0800deae3c01d4", "message": "Fixed copyright 2020->2021\n\nSigned-off-by: Benjamin Lafois <benjamin.lafois@gmail.com>", "committedDate": "2021-01-03T12:44:39Z", "type": "commit"}]}