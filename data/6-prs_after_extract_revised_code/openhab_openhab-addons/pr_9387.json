{"pr_number": 9387, "pr_title": "[smhi] Add aggregated channels for daily forecast.", "pr_createdAt": "2020-12-15T11:46:53Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9387", "timeline": [{"oid": "7259ec407d7483e0593481e485ef952a2a8aea32", "url": "https://github.com/openhab/openhab-addons/commit/7259ec407d7483e0593481e485ef952a2a8aea32", "message": "Add aggregated channels for daily forecast.\n\nAlso updates to use Optionals instead of @Nullables, and add unit tests\n\nSigned-off-by: Anders Alfredsson <andersb86@gmail.com>", "committedDate": "2020-12-15T11:43:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxMjc2MA==", "url": "https://github.com/openhab/openhab-addons/pull/9387#discussion_r543712760", "bodyText": "Why did you change this to a custom unit calculation? Same for below.", "author": "fwolter", "createdAt": "2020-12-15T21:52:11Z", "path": "bundles/org.openhab.binding.smhi/src/main/java/org/openhab/binding/smhi/internal/SmhiHandler.java", "diffHunk": "@@ -159,74 +156,87 @@ private void updateChannels(TimeSeries timeSeries) {\n                 continue;\n             }\n \n-            int offset = 24 * i + 12;\n-            Forecast forecast = timeSeries.getForecast(currentDay, offset);\n+            int dayOffset = i;\n+            int hourOffset = 24 * dayOffset + 12;\n+            Optional<Forecast> forecast = timeSeries.getForecast(currentDay, hourOffset);\n \n-            if (forecast == null) {\n+            if (forecast.isEmpty()) {\n                 if (logger.isDebugEnabled()) {\n-                    logger.debug(\"No forecast yet for {}\", currentDay.plusHours(offset));\n+                    logger.debug(\"No forecast yet for {}\", currentDay.plusHours(hourOffset));\n                 }\n                 channels.forEach(c -> {\n-                    updateState(c.getUID(), UnDefType.NULL);\n+                    updateState(c.getUID(), UnDefType.UNDEF);\n                 });\n             } else {\n                 channels.forEach(c -> {\n                     String id = c.getUID().getIdWithoutGroup();\n-                    BigDecimal value = forecast.getParameter(id);\n+                    Optional<BigDecimal> value;\n+                    if (isAggregatedChannel(id)) {\n+                        value = getAggregatedValue(id, timeSeries, dayOffset);\n+                    } else {\n+                        value = forecast.get().getParameter(id);\n+                    }\n                     updateChannel(c, value);\n                 });\n             }\n         }\n     }\n \n-    private void updateChannel(Channel channel, @Nullable BigDecimal value) {\n+    private void updateChannel(Channel channel, Optional<BigDecimal> value) {\n         String id = channel.getUID().getIdWithoutGroup();\n-        State newState = UnDefType.NULL;\n+        State newState = UnDefType.UNDEF;\n \n-        if (value != null) {\n+        if (value.isPresent()) {\n             switch (id) {\n                 case PRESSURE:\n-                    newState = new QuantityType<>(value, MetricPrefix.HECTO(SIUnits.PASCAL));\n+                    newState = new QuantityType<>(value.get(), MetricPrefix.HECTO(SIUnits.PASCAL));\n                     break;\n                 case TEMPERATURE:\n-                    newState = new QuantityType<>(value, SIUnits.CELSIUS);\n+                case TEMPERATURE_MAX:\n+                case TEMPERATURE_MIN:\n+                    newState = new QuantityType<>(value.get(), SIUnits.CELSIUS);\n                     break;\n                 case VISIBILITY:\n-                    newState = new QuantityType<>(value, MetricPrefix.KILO(SIUnits.METRE));\n+                    newState = new QuantityType<>(value.get(), MetricPrefix.KILO(SIUnits.METRE));\n                     break;\n                 case WIND_DIRECTION:\n-                    newState = new QuantityType<>(value, Units.DEGREE_ANGLE);\n+                    newState = new QuantityType<>(value.get(), Units.DEGREE_ANGLE);\n                     break;\n                 case WIND_SPEED:\n+                case WIND_MAX:\n+                case WIND_MIN:\n                 case GUST:\n-                    newState = new QuantityType<>(value, Units.METRE_PER_SECOND);\n+                    newState = new QuantityType<>(value.get(), SIUnits.METRE.divide(Units.SECOND));", "originalCommit": "7259ec407d7483e0593481e485ef952a2a8aea32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3MTI1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9387#discussion_r544071251", "bodyText": "When testing out the binding, I noticed that the values returned from the Item didn't keep the unit that the QuantityType was created with (some with m/s and some with mm/h), but instead used the default, which is km/h for Number:Speed-Items. Since all other types seemed to work correctly (even the Number:Length-Items where some have km an some mm for unit oddly enough) I thought it had something to to with the predefined composite units, so tried to set it explicitly. Forgot to revert afterwards.", "author": "pacive", "createdAt": "2020-12-16T07:28:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxMjc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzODM2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9387#discussion_r544138365", "bodyText": "Reverted now", "author": "pacive", "createdAt": "2020-12-16T09:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxMjc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "a2fa57ee3e9a345b32feb3575718ec85f244037d", "chunk": "diff --git a/bundles/org.openhab.binding.smhi/src/main/java/org/openhab/binding/smhi/internal/SmhiHandler.java b/bundles/org.openhab.binding.smhi/src/main/java/org/openhab/binding/smhi/internal/SmhiHandler.java\nindex 1012410a1b..f6f5f78c30 100644\n--- a/bundles/org.openhab.binding.smhi/src/main/java/org/openhab/binding/smhi/internal/SmhiHandler.java\n+++ b/bundles/org.openhab.binding.smhi/src/main/java/org/openhab/binding/smhi/internal/SmhiHandler.java\n\n@@ -206,7 +206,7 @@ public class SmhiHandler extends BaseThingHandler {\n                 case WIND_MAX:\n                 case WIND_MIN:\n                 case GUST:\n-                    newState = new QuantityType<>(value.get(), SIUnits.METRE.divide(Units.SECOND));\n+                    newState = new QuantityType<>(value.get(), Units.METRE_PER_SECOND);\n                     break;\n                 case RELATIVE_HUMIDITY:\n                 case THUNDER_PROBABILITY:\n"}}, {"oid": "a2fa57ee3e9a345b32feb3575718ec85f244037d", "url": "https://github.com/openhab/openhab-addons/commit/a2fa57ee3e9a345b32feb3575718ec85f244037d", "message": "Revert unsing explicit unit definition\n\nSigned-off-by: Anders Alfredsson <andersb86@gmail.com>", "committedDate": "2020-12-16T07:30:59Z", "type": "commit"}]}