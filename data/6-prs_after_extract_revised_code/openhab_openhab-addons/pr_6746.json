{"pr_number": 6746, "pr_title": "[jeelink] add revolt support", "pr_createdAt": "2020-01-02T09:28:25Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/6746", "timeline": [{"oid": "801a6df6d9246f2b39109c7959d07d79039f6061", "url": "https://github.com/openhab/openhab-addons/commit/801a6df6d9246f2b39109c7959d07d79039f6061", "message": "add revolt support\n\nSigned-off-by: Volker Bier <volker.bier@web.de>", "committedDate": "2019-12-14T12:23:00Z", "type": "commit"}, {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330", "url": "https://github.com/openhab/openhab-addons/commit/77e2273fa82cb597208d16b3e75d47e06377b330", "message": "Fix errors reported by Travis.\n\nSigned-off-by: Volker Bier <volker.bier@web.de>", "committedDate": "2020-01-02T09:49:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMTA3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373111071", "bodyText": "String sensorType = h.getSensorType();\n                if (\"ALL\".equals(sensorType)) {\n                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n                } else {\n                    JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(sensorType);\n                    if (c != null) {\n                        converters.add(c);\n                        sensorTypeConvertersMap.put(sensorType, c);\n                    }\n                }   \n\nIsn't this more readable?", "author": "J-N-K", "createdAt": "2020-01-30T18:15:11Z", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -155,7 +149,17 @@ public void addReadingHandler(ReadingHandler<? extends Reading> h) {\n             List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers == null) {\n                 handlers = new ArrayList<>();\n+                \n+                // this is the first handler for this reading class => also setup converter\n                 readingClassHandlerMap.put(h.getReadingClass(), handlers);\n+                \n+                JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n+                if (c != null) {\n+                    converters.add(c);\n+                    sensorTypeConvertersMap.put(h.getSensorType(), c);\n+                } else if (\"ALL\".equals(h.getSensorType())) {\n+                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n+                }", "originalCommit": "77e2273fa82cb597208d16b3e75d47e06377b330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMTExMg==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388911112", "bodyText": "Yes", "author": "vbier", "createdAt": "2020-03-06T13:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMTA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "chunk": "diff --git a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\nindex 8c4baaccf9..9efcb6e2b0 100644\n--- a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\n+++ b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\n\n@@ -146,19 +148,21 @@ public class JeeLinkHandler extends BaseBridgeHandler implements BridgeHandler,\n \n     public void addReadingHandler(ReadingHandler<? extends Reading> h) {\n         synchronized (readingClassHandlerMap) {\n-            List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n+            Set<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers == null) {\n-                handlers = new ArrayList<>();\n+                handlers = new HashSet<>();\n                 \n                 // this is the first handler for this reading class => also setup converter\n                 readingClassHandlerMap.put(h.getReadingClass(), handlers);\n                 \n-                JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n-                if (c != null) {\n-                    converters.add(c);\n-                    sensorTypeConvertersMap.put(h.getSensorType(), c);\n-                } else if (\"ALL\".equals(h.getSensorType())) {\n+                if (SensorDefinition.ALL_TYPE == h.getSensorType()) {\n                     converters.addAll(SensorDefinition.getDiscoveryConverters());\n+                } else {\n+                    JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n+                    if (c != null) {\n+                        converters.add(c);\n+                        sensorTypeConvertersMap.put(h.getSensorType(), c);\n+                    }\n                 }\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMTg5MA==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373111890", "bodyText": "see above", "author": "J-N-K", "createdAt": "2020-01-30T18:16:52Z", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -174,7 +178,15 @@ public void removeReadingHandler(ReadingHandler<? extends Reading> h) {\n                 handlers.remove(h);\n \n                 if (handlers.isEmpty()) {\n+                    // this was the last handler for this reading class => also remove converter\n                     readingClassHandlerMap.remove(h.getReadingClass());\n+                    \n+                    JeeLinkReadingConverter<?> c = sensorTypeConvertersMap.get(h.getSensorType());", "originalCommit": "77e2273fa82cb597208d16b3e75d47e06377b330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMTQ3MA==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388911470", "bodyText": "Okay", "author": "vbier", "createdAt": "2020-03-06T13:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMTg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "chunk": "diff --git a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\nindex 8c4baaccf9..9efcb6e2b0 100644\n--- a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\n+++ b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\n\n@@ -172,7 +176,7 @@ public class JeeLinkHandler extends BaseBridgeHandler implements BridgeHandler,\n \n     public void removeReadingHandler(ReadingHandler<? extends Reading> h) {\n         synchronized (readingClassHandlerMap) {\n-            List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n+            Set<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers != null) {\n                 logger.debug(\"Removing reading handler for class {}: {}\", h.getReadingClass(), h);\n                 handlers.remove(h);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNTg5OA==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373115898", "bodyText": "This is not necessarily a part of this PR: But it seems that handlers is designed to contain unique elements. Wouldn't it be a better match to use a Set instead of a list?", "author": "J-N-K", "createdAt": "2020-01-30T18:24:57Z", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -155,7 +149,17 @@ public void addReadingHandler(ReadingHandler<? extends Reading> h) {\n             List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers == null) {\n                 handlers = new ArrayList<>();\n+                \n+                // this is the first handler for this reading class => also setup converter\n                 readingClassHandlerMap.put(h.getReadingClass(), handlers);\n+                \n+                JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n+                if (c != null) {\n+                    converters.add(c);\n+                    sensorTypeConvertersMap.put(h.getSensorType(), c);\n+                } else if (\"ALL\".equals(h.getSensorType())) {\n+                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n+                }\n             }\n \n             if (!handlers.contains(h)) {", "originalCommit": "77e2273fa82cb597208d16b3e75d47e06377b330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMTE4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388911185", "bodyText": "Okay", "author": "vbier", "createdAt": "2020-03-06T13:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNTg5OA=="}], "type": "inlineReview", "revised_code": {"commit": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "chunk": "diff --git a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\nindex 8c4baaccf9..9efcb6e2b0 100644\n--- a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\n+++ b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\n\n@@ -146,19 +148,21 @@ public class JeeLinkHandler extends BaseBridgeHandler implements BridgeHandler,\n \n     public void addReadingHandler(ReadingHandler<? extends Reading> h) {\n         synchronized (readingClassHandlerMap) {\n-            List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n+            Set<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers == null) {\n-                handlers = new ArrayList<>();\n+                handlers = new HashSet<>();\n                 \n                 // this is the first handler for this reading class => also setup converter\n                 readingClassHandlerMap.put(h.getReadingClass(), handlers);\n                 \n-                JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n-                if (c != null) {\n-                    converters.add(c);\n-                    sensorTypeConvertersMap.put(h.getSensorType(), c);\n-                } else if (\"ALL\".equals(h.getSensorType())) {\n+                if (SensorDefinition.ALL_TYPE == h.getSensorType()) {\n                     converters.addAll(SensorDefinition.getDiscoveryConverters());\n+                } else {\n+                    JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n+                    if (c != null) {\n+                        converters.add(c);\n+                        sensorTypeConvertersMap.put(h.getSensorType(), c);\n+                    }\n                 }\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExOTgwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373119809", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                List<ReadingHandler<? extends Reading>> handlers = getAllHandlers(r.getClass());\n          \n          \n            \n                                getAllHandlers(r.getClass()).stream().forEach(h -> h.handleReading(r));", "author": "J-N-K", "createdAt": "2020-01-30T18:32:52Z", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -187,50 +199,44 @@ public void handleCommand(ChannelUID channelUid, Command command) {\n     @Override\n     public void handleInput(String input) {\n         lastReadingTime = System.currentTimeMillis();\n-\n-        Matcher matcher = READING_P.matcher(input);\n-        if (matcher.matches()) {\n-            intializeConnection();\n-\n-            String sensorType = matcher.group(1);\n-            JeeLinkReadingConverter<?> converter;\n-\n-            synchronized (sensorTypeConvertersMap) {\n-                converter = sensorTypeConvertersMap.get(sensorType);\n-                if (converter == null) {\n-                    converter = SensorDefinition.getConverter(sensorType);\n-\n-                    if (converter == null) {\n-                        logger.debug(\"Missing converter for sensor type {}. Ignoring readings.\", sensorType);\n-                        converter = new IgnoringConverter();\n-                    } else {\n-                        logger.debug(\"Registering converter for sensor type {}: {}\", sensorType, converter);\n-                    }\n-\n-                    sensorTypeConvertersMap.put(sensorType, converter);\n-                }\n-            }\n-\n-            Reading r = converter.createReading(input);\n+        \n+        // try all associated converters to find the correct one\n+        for (JeeLinkReadingConverter<?> c : converters) {\n+            Reading r = c.createReading(input);\n+            \n             if (r != null) {\n-                ReadingHandler<Reading> d = discoveryHandler.get();\n-                if (d != null) {\n-                    d.handleReading(r);\n-                }\n+                // this converter is responsible\n+                intializeConnection();\n \n                 // propagate to the appropriate sensor handler\n                 synchronized (readingClassHandlerMap) {\n-                    List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(r.getClass());\n-                    if (handlers != null) {\n-                        for (ReadingHandler h : handlers) {\n-                            h.handleReading(r);\n-                        }\n+                    List<ReadingHandler<? extends Reading>> handlers = getAllHandlers(r.getClass());", "originalCommit": "77e2273fa82cb597208d16b3e75d47e06377b330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDM1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388910359", "bodyText": "This might be nicer for you, but I find it hard to read. As I am the one maintaining the code, I do not want to change it.", "author": "vbier", "createdAt": "2020-03-06T13:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExOTgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "chunk": "diff --git a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\nindex 8c4baaccf9..9efcb6e2b0 100644\n--- a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\n+++ b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java\n\n@@ -210,7 +216,7 @@ public class JeeLinkHandler extends BaseBridgeHandler implements BridgeHandler,\n \n                 // propagate to the appropriate sensor handler\n                 synchronized (readingClassHandlerMap) {\n-                    List<ReadingHandler<? extends Reading>> handlers = getAllHandlers(r.getClass());\n+                    Set<ReadingHandler<? extends Reading>> handlers = getAllHandlers(r.getClass());\n                     \n                     for (ReadingHandler h : handlers) {\n                         h.handleReading(r);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyMTgwNA==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373121804", "bodyText": "Can we add duplicate converters? If not, use a Set", "author": "J-N-K", "createdAt": "2020-01-30T18:36:55Z", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -31,16 +34,19 @@\n  */\n public abstract class SensorDefinition<R extends Reading> {\n     private static final HashSet<SensorDefinition<?>> SENSOR_DEFS = new HashSet<>();\n+    private static final List<JeeLinkReadingConverter<?>> CONVERTERS = new ArrayList<>();", "originalCommit": "77e2273fa82cb597208d16b3e75d47e06377b330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDU0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388910541", "bodyText": "Okay", "author": "vbier", "createdAt": "2020-03-06T13:46:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyMTgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMTI0NA==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388911244", "bodyText": "Okay", "author": "vbier", "createdAt": "2020-03-06T13:48:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyMTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "chunk": "diff --git a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java\nindex ce9ef92887..43459200f4 100644\n--- a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java\n+++ b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java\n\n@@ -33,8 +32,9 @@ import org.openhab.binding.jeelink.internal.revolt.RevoltSensorDefinition;\n  * @param <R> the Reading type this sensor provides.\n  */\n public abstract class SensorDefinition<R extends Reading> {\n-    private static final HashSet<SensorDefinition<?>> SENSOR_DEFS = new HashSet<>();\n-    private static final List<JeeLinkReadingConverter<?>> CONVERTERS = new ArrayList<>();\n+\tpublic static final String ALL_TYPE = \"All\";\n+    private static final Set<SensorDefinition<?>> SENSOR_DEFS = new HashSet<>();\n+    private static final Set<JeeLinkReadingConverter<?>> CONVERTERS = new HashSet<>();\n \n     protected final String type;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373175361", "bodyText": "If you make it a Set and initialize it as ConcurrentHashMap.newKeySet() you can omit the synchronized.", "author": "J-N-K", "createdAt": "2020-01-30T20:25:32Z", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -96,6 +102,18 @@ public static ThingHandler createHandler(ThingTypeUID thingTypeUid, Thing thing)\n         return null;\n     }\n \n+    public static List<JeeLinkReadingConverter<?>> getDiscoveryConverters() {\n+        synchronized (CONVERTERS) {", "originalCommit": "77e2273fa82cb597208d16b3e75d47e06377b330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNDI0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388904243", "bodyText": "How is that supposed to work? There has to be some magic going on if the map can correctly synchronize this by itself. There are several calls to the map in the synchronized block.", "author": "vbier", "createdAt": "2020-03-06T13:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxMDUwMg==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r389010502", "bodyText": "You can directly initialize it in the declaration, remove the check here and the static block above.\n    private static final Set<SensorDefinition<?>> SENSOR_DEFS = Stream\n            .of(new LaCrosseSensorDefinition(), new Ec3kSensorDefinition(), new Pca301SensorDefinition(),\n                    new Tx22SensorDefinition(), new RevoltSensorDefinition()).collect(Collectors.toSet());\n    private static final Set<JeeLinkReadingConverter<?>> CONVERTERS = SENSOR_DEFS.stream()\n            .map(SensorDefinition::createConverter).collect(Collectors.toSet());", "author": "J-N-K", "createdAt": "2020-03-06T16:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxNzY4NA==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r389017684", "bodyText": "Yes, I can. But i'd prefer not to, for readability reasons.", "author": "vbier", "createdAt": "2020-03-06T16:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMTY4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r389031687", "bodyText": "Your code is much more complex and difficult (because it splits the initialization in three parts: initialize the sets in the declaration, add the sensor defs in the static block and add the converters when they are first requested).", "author": "J-N-K", "createdAt": "2020-03-06T17:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "chunk": "diff --git a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java\nindex ce9ef92887..43459200f4 100644\n--- a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java\n+++ b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java\n\n@@ -102,7 +102,7 @@ public abstract class SensorDefinition<R extends Reading> {\n         return null;\n     }\n \n-    public static List<JeeLinkReadingConverter<?>> getDiscoveryConverters() {\n+    public static Set<JeeLinkReadingConverter<?>> getDiscoveryConverters() {\n         synchronized (CONVERTERS) {\n             if (CONVERTERS.isEmpty()) {\n                 for (SensorDefinition<?> sensor : SENSOR_DEFS) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODY2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373178662", "bodyText": "You can remove that check. It was there because Arrays.toString() is expensive. port and cmd are not, because toString() is called only if the log-level is debug or higher.", "author": "J-N-K", "createdAt": "2020-01-30T20:32:51Z", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/connection/AbstractJeeLinkConnection.java", "diffHunk": "@@ -94,7 +89,11 @@ public void sendCommands(String commands) {\n                 // in case of tcp connections, the underlying socket\n                 OutputStreamWriter w = new OutputStreamWriter(initStream);\n                 for (String cmd : initCommands) {\n-                    w.write(cmd);\n+                    if (logger.isDebugEnabled()) {", "originalCommit": "77e2273fa82cb597208d16b3e75d47e06377b330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDY1NA==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388910654", "bodyText": "Okay", "author": "vbier", "createdAt": "2020-03-06T13:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMTMyMg==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388911322", "bodyText": "Okay", "author": "vbier", "createdAt": "2020-03-06T13:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "chunk": "diff --git a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/connection/AbstractJeeLinkConnection.java b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/connection/AbstractJeeLinkConnection.java\nindex b199fc3047..2ecb617915 100644\n--- a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/connection/AbstractJeeLinkConnection.java\n+++ b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/connection/AbstractJeeLinkConnection.java\n\n@@ -89,9 +89,7 @@ public abstract class AbstractJeeLinkConnection implements JeeLinkConnection {\n                 // in case of tcp connections, the underlying socket\n                 OutputStreamWriter w = new OutputStreamWriter(initStream);\n                 for (String cmd : initCommands) {\n-                    if (logger.isDebugEnabled()) {\n-                        logger.debug(\"Writing to device on port {}: {} \", port, cmd);\n-                    }\n+                    logger.debug(\"Writing to device on port {}: {} \", port, cmd);\n \n                     w.write(cmd + \"\\n\");\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODg0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373178842", "bodyText": "please remove this empty lines", "author": "J-N-K", "createdAt": "2020-01-30T20:33:18Z", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -133,9 +133,16 @@ public void handleReading(Reading reading) {\n             logger.debug(\"discovery for bridge {} found already known sensor id {}\", bridge.getThing().getUID(), id);\n         }\n     }\n+    ", "originalCommit": "77e2273fa82cb597208d16b3e75d47e06377b330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDcyMg==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388910722", "bodyText": "Okay", "author": "vbier", "createdAt": "2020-03-06T13:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "chunk": "diff --git a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java\nindex 3649676559..e6f026b889 100644\n--- a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java\n+++ b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java\n\n@@ -133,8 +133,6 @@ public class SensorDiscoveryService extends AbstractDiscoveryService implements\n             logger.debug(\"discovery for bridge {} found already known sensor id {}\", bridge.getThing().getUID(), id);\n         }\n     }\n-    \n-    \n \n     @Override\n     public Class<Reading> getReadingClass() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3OTQ3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373179473", "bodyText": "Wouldn't it make sense to make this a constant?  ALL_SENSORS or something like that? This would reduce the risk of typos and should also be used in the comparisons above.", "author": "J-N-K", "createdAt": "2020-01-30T20:34:47Z", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -133,9 +133,16 @@ public void handleReading(Reading reading) {\n             logger.debug(\"discovery for bridge {} found already known sensor id {}\", bridge.getThing().getUID(), id);\n         }\n     }\n+    \n+    \n \n     @Override\n     public Class<Reading> getReadingClass() {\n         return Reading.class;\n     }\n+\n+    @Override\n+    public String getSensorType() {\n+        return \"ALL\";", "originalCommit": "77e2273fa82cb597208d16b3e75d47e06377b330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDgwNw==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388910807", "bodyText": "Okay", "author": "vbier", "createdAt": "2020-03-06T13:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3OTQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "chunk": "diff --git a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java\nindex 3649676559..e6f026b889 100644\n--- a/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java\n+++ b/bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java\n\n@@ -133,8 +133,6 @@ public class SensorDiscoveryService extends AbstractDiscoveryService implements\n             logger.debug(\"discovery for bridge {} found already known sensor id {}\", bridge.getThing().getUID(), id);\n         }\n     }\n-    \n-    \n \n     @Override\n     public Class<Reading> getReadingClass() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MTAxNw==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373181017", "bodyText": "No need to override empty methods", "author": "J-N-K", "createdAt": "2020-01-30T20:38:15Z", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/revolt/RevoltSensorHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.jeelink.internal.revolt;\n+\n+import static org.openhab.binding.jeelink.internal.JeeLinkBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.openhab.binding.jeelink.internal.JeeLinkSensorHandler;\n+import org.openhab.binding.jeelink.internal.ReadingPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for a Revolt Energy Meter sensor thing.\n+ *\n+ * @author Volker Bier - Initial contribution\n+ */\n+public class RevoltSensorHandler extends JeeLinkSensorHandler<RevoltReading> {\n+    private final Logger logger = LoggerFactory.getLogger(RevoltSensorHandler.class);\n+\n+    public RevoltSensorHandler(Thing thing, String sensorType) {\n+        super(thing, sensorType);\n+    }\n+\n+    @Override\n+    public Class<RevoltReading> getReadingClass() {\n+        return RevoltReading.class;\n+    }\n+\n+    @Override\n+    public ReadingPublisher<RevoltReading> createPublisher() {\n+        ReadingPublisher<RevoltReading> publisher = new ReadingPublisher<RevoltReading>() {\n+            @Override\n+            public void publish(RevoltReading reading) {\n+                if (reading != null && getThing().getStatus() == ThingStatus.ONLINE) {\n+                    BigDecimal power = new BigDecimal(reading.getPower()).setScale(1, RoundingMode.HALF_UP);\n+                    BigDecimal powerFactor = new BigDecimal(reading.getPowerFactor()).setScale(2, RoundingMode.HALF_UP);\n+                    BigDecimal consumption = new BigDecimal(reading.getConsumption()).setScale(2, RoundingMode.HALF_UP);\n+                    BigDecimal current = new BigDecimal(reading.getCurrent()).setScale(2, RoundingMode.HALF_UP);\n+\n+                    logger.debug(\n+                            \"updating states for thing {}: power={}, powerFactor={}, consumption={}, current={}, voltage={}, frequency={} \",\n+                            getThing().getUID().getId(), power, powerFactor, consumption, current, reading.getVoltage(), reading.getFrequency());\n+\n+                    updateState(CURRENT_POWER_CHANNEL, new QuantityType<>(power, SmartHomeUnits.WATT));\n+                    updateState(POWER_FACTOR_CHANNEL, new DecimalType(powerFactor));\n+                    updateState(CONSUMPTION_CHANNEL, new QuantityType<>(consumption, SmartHomeUnits.WATT_HOUR));\n+                    updateState(ELECTRIC_CURRENT_CHANNEL, new QuantityType<>(current, SmartHomeUnits.AMPERE));\n+                    updateState(ELECTRIC_POTENTIAL_CHANNEL, new QuantityType<>(reading.getVoltage(), SmartHomeUnits.VOLT));\n+                    updateState(FREQUENCY_CHANNEL, new QuantityType<>(reading.getFrequency(), SmartHomeUnits.HERTZ));\n+                }\n+            }\n+\n+            @Override", "originalCommit": "77e2273fa82cb597208d16b3e75d47e06377b330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNjE5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388906193", "bodyText": "ReadingPublisher is an interface. It is not going to work without the method.", "author": "vbier", "createdAt": "2020-03-06T13:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MTAxNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "url": "https://github.com/openhab/openhab-addons/commit/6ead1052bf6c83168cf92a19cd66c33543bd61ed", "message": "Address review comments.\n\nSigned-off-by: Volker Bier <volker.bier@web.de>", "committedDate": "2020-03-06T14:32:31Z", "type": "commit"}, {"oid": "beccbb610f94126eac0105f573da23bdfafb5eb8", "url": "https://github.com/openhab/openhab-addons/commit/beccbb610f94126eac0105f573da23bdfafb5eb8", "message": "fix problems detected by travis.\n\n\nSigned-off-by: Volker Bier <volker.bier@web.de>", "committedDate": "2020-03-06T15:43:55Z", "type": "commit"}, {"oid": "9be9ba7d8245d2ed2f5acbe26b3c173d8eb1378a", "url": "https://github.com/openhab/openhab-addons/commit/9be9ba7d8245d2ed2f5acbe26b3c173d8eb1378a", "message": "address review comments.\n\nSigned-off-by: Volker Bier <volker.bier@web.de>", "committedDate": "2020-03-06T17:25:35Z", "type": "commit"}, {"oid": "f57060631c3b77564f9a3f5826876a062aaa416c", "url": "https://github.com/openhab/openhab-addons/commit/f57060631c3b77564f9a3f5826876a062aaa416c", "message": "fix code style problems.\n\nSigned-off-by: Volker Bier <volker.bier@web.de>", "committedDate": "2020-03-06T18:58:13Z", "type": "commit"}]}