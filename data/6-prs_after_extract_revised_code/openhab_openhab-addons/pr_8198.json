{"pr_number": 8198, "pr_title": "[shelly] Support for Shelly Button 1, ix3, Dimmer 2, Door Window 2, Gas, Vintage; support for CoIoT V2 (firmware 1.8+)", "pr_createdAt": "2020-07-26T07:07:24Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8198", "timeline": [{"oid": "bc6cc1dacd7850e6b4f10194dd95848ee07086da", "url": "https://github.com/openhab/openhab-addons/commit/bc6cc1dacd7850e6b4f10194dd95848ee07086da", "message": "Break-up CoAP handler into V1 decoding, V2 decoding and general\ndecoding. This allows to support CoAP V1+V2 at the same time. The\nversion tag from the CoAP Optoons will be used to dynamically switch to\nV2 (V1 is default to support older firmwarte releases). CoAP V2 is part\nof firmware release 1.8. #8197 fixed.\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-07-26T07:09:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzUzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087539", "bodyText": "Is the annotation necessary?", "author": "fwolter", "createdAt": "2020-08-16T09:11:32Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -407,7 +433,14 @@\n     }\n \n     public static class ShellyInputState {\n+        @SerializedName(\"input\")\n         public Integer input;", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTE4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135182", "bodyText": "he he, cpmeister wanted them to make it unified for all elements\nremoved", "author": "markus7017", "createdAt": "2020-08-16T17:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2c41bedaa9a637de7b2e799a1292de26c428c6c3", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java\nindex 9952a74557..aceba47d93 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java\n\n@@ -433,11 +437,9 @@ public class ShellyApiJsonDTO {\n     }\n \n     public static class ShellyInputState {\n-        @SerializedName(\"input\")\n         public Integer input;\n \n         // Shelly Button\n-        @SerializedName(\"event\")\n         public String event;\n         @SerializedName(\"event_cnt\")\n         public Integer eventCount;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzU3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087572", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-08-16T09:11:54Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -469,6 +502,11 @@\n         @SerializedName(\"sleep_mode\")\n         public ShellySensorSleepMode sleepMode; // FW 1.6\n \n+        // @SerializedName(\"ext_temperature\")\n+        // public ShellyStatusSensor.ShellyExtTemperature extTemperature; // Shelly 1/1PM: sensor values\n+        // @SerializedName(\"ext_humidity\")\n+        // public ShellyStatusSensor.ShellyExtHumidity extHumidity; // Shelly 1/1PM: sensor values\n+", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTQyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135428", "bodyText": "in general yes, those are existing, but code doesn't use them at the moment. It makes it easier in case of, because making the comparisons and adding new ones is always a pita\nif you request I could remove them, there are a lot more for the same reason", "author": "markus7017", "createdAt": "2020-08-16T17:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0OTQ1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471149453", "bodyText": "I think it's better then, if you remove the comments and make it normal code. It can be refactored, is scanned by the static code analysis and so on.", "author": "fwolter", "createdAt": "2020-08-16T19:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDA2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100060", "bodyText": "yes, but I don't want to include this untested. This could cause an exception when JSON/Gson definitions doesn't match", "author": "markus7017", "createdAt": "2020-08-22T15:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExNjk0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475116943", "bodyText": "If you aren't confident, this works at all, I would remove it entirely. Only a suggestion.", "author": "fwolter", "createdAt": "2020-08-22T18:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java\nindex 9952a74557..f68e64e8f9 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java\n\n@@ -502,11 +493,6 @@ public class ShellyApiJsonDTO {\n         @SerializedName(\"sleep_mode\")\n         public ShellySensorSleepMode sleepMode; // FW 1.6\n \n-        // @SerializedName(\"ext_temperature\")\n-        // public ShellyStatusSensor.ShellyExtTemperature extTemperature; // Shelly 1/1PM: sensor values\n-        // @SerializedName(\"ext_humidity\")\n-        // public ShellyStatusSensor.ShellyExtHumidity extHumidity; // Shelly 1/1PM: sensor values\n-\n         public String timezone;\n         public Double lat;\n         public Double lng;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzY4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087680", "bodyText": "Can these be removed or the comments be removed?", "author": "fwolter", "createdAt": "2020-08-16T09:13:12Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -590,6 +641,32 @@\n         public String json;\n     }\n \n+    public static class ShellySettingsInput {\n+        @SerializedName(\"btn_type\")\n+        public String btnType;\n+\n+        // included attributes not yet processed\n+        // public String name;\n+        // @SerializedName(\"btn_reverse\")\n+        // public Integer btnReverse;\n+        // @SerializedName(\"btn_on_url\")\n+        // public String btnOnUrl;\n+        // @SerializedName(\"btn_off_url\")\n+        // public String btnOffUrl;\n+        // @SerializedName(\"shortpush_url\")\n+        // public String shortpushUrl;\n+        // @SerializedName(\"longpush_url\")\n+        // public String longpushUrl;\n+        // @SerializedName(\"double_shortpush_url\")\n+        // public String doubleShortpushUrl;\n+        // @SerializedName(\"triple_shortpush_url\")\n+        // public String tripleShortpushUrl;\n+        // @SerializedName(\"shortpush_longpush_url\")\n+        // public String shortpushLongpushUrl;\n+        // @SerializedName(\"longpush_shortpush_url\")\n+        // public String longpushShortpushUrl;", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDA4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100082", "bodyText": "see above", "author": "markus7017", "createdAt": "2020-08-22T15:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java\nindex 9952a74557..f68e64e8f9 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java\n\n@@ -641,32 +624,6 @@ public class ShellyApiJsonDTO {\n         public String json;\n     }\n \n-    public static class ShellySettingsInput {\n-        @SerializedName(\"btn_type\")\n-        public String btnType;\n-\n-        // included attributes not yet processed\n-        // public String name;\n-        // @SerializedName(\"btn_reverse\")\n-        // public Integer btnReverse;\n-        // @SerializedName(\"btn_on_url\")\n-        // public String btnOnUrl;\n-        // @SerializedName(\"btn_off_url\")\n-        // public String btnOffUrl;\n-        // @SerializedName(\"shortpush_url\")\n-        // public String shortpushUrl;\n-        // @SerializedName(\"longpush_url\")\n-        // public String longpushUrl;\n-        // @SerializedName(\"double_shortpush_url\")\n-        // public String doubleShortpushUrl;\n-        // @SerializedName(\"triple_shortpush_url\")\n-        // public String tripleShortpushUrl;\n-        // @SerializedName(\"shortpush_longpush_url\")\n-        // public String shortpushLongpushUrl;\n-        // @SerializedName(\"longpush_shortpush_url\")\n-        // public String longpushShortpushUrl;\n-    }\n-\n     public static class ShellyControlRelay {\n         // https://shelly-api-docs.shelly.cloud/#shelly1-1pm-settings-relay-0\n         @SerializedName(\"is_valid\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4Nzc2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087763", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public int updatePeriod = 2 * UPDATE_SETTINGS_INTERVAL_SECONDS + 10;;\n          \n          \n            \n                public int updatePeriod = 2 * UPDATE_SETTINGS_INTERVAL_SECONDS + 10;", "author": "fwolter", "createdAt": "2020-08-16T09:14:09Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java", "diffHunk": "@@ -78,12 +87,15 @@\n     public boolean isSensor = false; // true for HT & Smoke\n     public boolean hasBattery = false; // true if battery device\n     public boolean isSense = false; // true if thing is a Shelly Sense\n-    public boolean isDW = false; // true of Door Window sensor\n+    public boolean isHT = false; // true for H&T\n+    public boolean isDW = false; // true for Door Window sensor\n+    public boolean isButton = false; // true for a Shelly Button 1\n+    public boolean isIX3 = false; // true for a Shelly IX\n \n     public int minTemp = 0; // Bulb/Duo: Min Light Temp\n     public int maxTemp = 0; // Bulb/Duo: Max Light Temp\n \n-    public int updatePeriod = -1;\n+    public int updatePeriod = 2 * UPDATE_SETTINGS_INTERVAL_SECONDS + 10;;", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTQ5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135490", "bodyText": "fixed", "author": "markus7017", "createdAt": "2020-08-16T17:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4Nzc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java\nindex 82a25ca909..181031203b 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java\n\n@@ -87,15 +78,13 @@ public class ShellyDeviceProfile {\n     public boolean isSensor = false; // true for HT & Smoke\n     public boolean hasBattery = false; // true if battery device\n     public boolean isSense = false; // true if thing is a Shelly Sense\n-    public boolean isHT = false; // true for H&T\n-    public boolean isDW = false; // true for Door Window sensor\n+    public boolean isDW = false; // true of Door Window sensor\n     public boolean isButton = false; // true for a Shelly Button 1\n-    public boolean isIX3 = false; // true for a Shelly IX\n \n     public int minTemp = 0; // Bulb/Duo: Min Light Temp\n     public int maxTemp = 0; // Bulb/Duo: Max Light Temp\n \n-    public int updatePeriod = 2 * UPDATE_SETTINGS_INTERVAL_SECONDS + 10;;\n+    public int updatePeriod = -1;\n \n     public Map<String, String> irCodes = new HashMap<>(); // Sense: list of stored IR codes\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzgwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087808", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-08-16T09:14:54Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java", "diffHunk": "@@ -133,9 +146,18 @@ public ShellyDeviceProfile initialize(String thingType, String json) throws Shel\n             // RGBW2 doesn't report, but has one\n             numMeters = inColor ? 1 : getInteger(settings.device.numOutputs);\n         }\n-        isDimmer = deviceType.equalsIgnoreCase(SHELLYDT_DIMMER);\n         isRoller = mode.equalsIgnoreCase(SHELLY_MODE_ROLLER);\n \n+        /*\n+         * if (settings.extTemperature != null) {\n+         * numTempSensors = settings.extTemperature.sensor3 != null ? 3\n+         * : settings.extTemperature.sensor2 != null ? 2 : settings.extTemperature.sensor1 != null ? 1 : 0;\n+         * }\n+         * if (settings.extTemperature != null) {\n+         * numHumSensors = settings.extHumidity.sensor1 != null ? 1 : 0;\n+         * }\n+         */\n+", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTUyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135526", "bodyText": "removed", "author": "markus7017", "createdAt": "2020-08-16T17:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java\nindex 82a25ca909..181031203b 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java\n\n@@ -146,18 +134,9 @@ public class ShellyDeviceProfile {\n             // RGBW2 doesn't report, but has one\n             numMeters = inColor ? 1 : getInteger(settings.device.numOutputs);\n         }\n+        isDimmer = deviceType.equalsIgnoreCase(SHELLYDT_DIMMER);\n         isRoller = mode.equalsIgnoreCase(SHELLY_MODE_ROLLER);\n \n-        /*\n-         * if (settings.extTemperature != null) {\n-         * numTempSensors = settings.extTemperature.sensor3 != null ? 3\n-         * : settings.extTemperature.sensor2 != null ? 2 : settings.extTemperature.sensor1 != null ? 1 : 0;\n-         * }\n-         * if (settings.extTemperature != null) {\n-         * numHumSensors = settings.extHumidity.sensor1 != null ? 1 : 0;\n-         * }\n-         */\n-\n         if (settings.sleepMode != null) {\n             // Sensor, usally 12h\n             updatePeriod = getString(settings.sleepMode.unit).equalsIgnoreCase(\"m\") ? settings.sleepMode.period * 60 // minutes\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTEyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089127", "bodyText": "Are you sure the string has always at least five characters?", "author": "fwolter", "createdAt": "2020-08-16T09:28:08Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ShellyCoIoTProtocol} implements common functions for the CoIoT implementations\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTProtocol {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTProtocol.class);\n+    protected final String thingName;\n+    protected final ShellyBaseHandler thingHandler;\n+    protected final ShellyDeviceProfile profile;\n+    protected final Map<String, CoIotDescrBlk> blkMap;\n+    protected final Map<String, CoIotDescrSen> sensorMap;\n+\n+    // Due to the fact that the device reports only the current/last status, but no real events, we need to distinguish\n+    // between a real update or just a repeated status on periodic updates\n+    protected int lastCfgCount = -1;\n+    protected int[] lastEventCount = { -1, -1, -1, -1, -1, -1, -1, -1 }; // 4Pro has 4 relays, so 8 should be fine\n+    protected String[] inputEvent = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n+\n+    public ShellyCoIoTProtocol(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        this.thingName = thingName;\n+        this.thingHandler = thingHandler;\n+        this.blkMap = blkMap;\n+        this.sensorMap = sensorMap;\n+        this.profile = thingHandler.getProfile();\n+    }\n+\n+    protected boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+        // Process status information and convert into channel updates\n+        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        // String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+        // : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        int rIndex = getIdFromBlk(sen);\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"b\": // BatteryLevel +\n+                updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"h\" /* Humidity */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"m\" /* Motion */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                break;\n+            case \"l\": // Luminosity +\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n+                        toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n+                break;\n+            case \"s\": // CatchAll\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"state\": // Relay status +\n+                    case \"output\":\n+                        updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n+                        break;\n+                    case \"input\":\n+                        handleInput(sen, s, rGroup, updates);\n+                        break;\n+                    case \"brightness\":\n+                        // already handled by state/output\n+                        break;\n+                    case \"overtemp\": // ++\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"luminositylevel\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ILLUM, getStringType(s.valueStr));\n+                        break;\n+                    case \"charger\": // Sense\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    // RGBW2/Bulb\n+                    case \"red\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"green\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"blue\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"white\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"gain\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n+                                ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n+                        break;\n+                    case \"sensorerror\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean updateChannel(Map<String, State> updates, String group, String channel, State value) {\n+        updates.put(mkChannelId(group, channel), value);\n+        return true;\n+    }\n+\n+    protected void handleInput(CoIotDescrSen sen, CoIotSensor s, String rGroup, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String iGroup = profile.getInputGroup(idx);\n+        String iChannel = profile.getInputChannel(idx);\n+        updateChannel(updates, iGroup, iChannel, s.value == 0 ? OnOffType.OFF : OnOffType.ON);\n+    }\n+\n+    protected void handleInputEvent(CoIotDescrSen sen, String type, Integer count, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String group = profile.getInputGroup(idx);\n+        logger.debug(\"{}: handleInputEvent, sen={}/{}, type={}, count={}, idx={},group={}\", thingName, sen.type,\n+                sen.desc, type, count, idx, group);\n+        if (count == -1) {\n+            // event type\n+            logger.debug(\"{}: CoAP Update on inputEvent={}\", thingName, type);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTTYPE, new StringType(type));\n+            inputEvent[idx] = type;\n+        } else {\n+            // event count\n+            logger.debug(\"{}: CoAP Update on inputEventCount={}\", thingName, count);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(count));\n+            if (profile.inButtonMode(idx) && ((profile.hasBattery && (count == 1)) || (count != lastEventCount[idx]))) {\n+                lastEventCount[idx] = count;\n+                thingHandler.triggerButton(group, inputEvent[idx]);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * Handles the combined updated of the brightness channel:\n+     * brightness$Switch is the OnOffType (power state)\n+     * brightness&Value is the brightness value\n+     *\n+     * @param profile Device profile, required to select the channel group and name\n+     * @param updates List of updates. updatePower will add brightness$Switch and brightness&Value if changed\n+     * @param id Sensor id from the update\n+     * @param sen Sensor description from the update\n+     * @param s New sensor value\n+     * @param allUpdatesList of updates. This is required, because we need to update both values at the same time\n+     */\n+    protected void updatePower(ShellyDeviceProfile profile, Map<String, State> updates, int id, CoIotDescrSen sen,\n+            CoIotSensor s, List<CoIotSensor> allUpdates) {\n+        String group = \"\";\n+        String channel = CHANNEL_BRIGHTNESS;\n+        String checkL = \"\"; // RGBW-white uses 4 different Power, Brightness, VSwitch values\n+        if (profile.isLight || profile.isDimmer) {\n+            if (profile.isBulb || profile.inColor) {\n+                group = CHANNEL_GROUP_LIGHT_CONTROL;\n+                channel = CHANNEL_LIGHT_POWER;\n+            } else if (profile.isDuo) {\n+                group = CHANNEL_GROUP_WHITE_CONTROL;\n+            } else if (profile.isDimmer) {\n+                group = CHANNEL_GROUP_RELAY_CONTROL;\n+            } else if (profile.isRGBW2) {\n+                group = CHANNEL_GROUP_LIGHT_CHANNEL + id;\n+                checkL = String.valueOf(id - 1); // id is 1-based, L is 0-based\n+                logger.trace(\"{}: updatePower() for L={}\", thingName, checkL);\n+            }\n+\n+            // We need to update brigthtess and on/off state at the same time to avoid \"flipping brightness slider\" in\n+            // the UI\n+            Double brightness = -1.0;\n+            Double power = -1.0;\n+            for (CoIotSensor update : allUpdates) {\n+                CoIotDescrSen d = fixDescription(sensorMap.get(update.id), blkMap);\n+                if (!checkL.isEmpty() && !d.links.equals(checkL)) {\n+                    // continue until we find the correct one\n+                    continue;\n+                }\n+                if (d.desc.equalsIgnoreCase(\"brightness\")) {\n+                    brightness = new Double(update.value);\n+                } else if (d.desc.equalsIgnoreCase(\"output\") || d.desc.equalsIgnoreCase(\"state\")) {\n+                    power = new Double(update.value);\n+                }\n+            }\n+            if (power != -1) {\n+                updateChannel(updates, group, channel + \"$Switch\", power == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+            if (brightness != -1) {\n+                updateChannel(updates, group, channel + \"$Value\",\n+                        toQuantityType(power == 1 ? brightness : 0, DIGITS_NONE, SmartHomeUnits.PERCENT));\n+            }\n+        } else if (profile.hasRelays) {\n+            group = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL : CHANNEL_GROUP_RELAY_CONTROL + id;\n+            updateChannel(updates, group, CHANNEL_OUTPUT, s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+        } else if (profile.isSensor) {\n+            // Sensor state\n+            if (profile.isDW) { // Door Window has item type Contact\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            } else {\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Find index of Input id, which is required to map to channel name\n+     *\n+     * @parm sensorDesc D field from sensor update\n+     * @param sensorId The id from the sensor update\n+     * @return Index of found entry (+1 will be the suffix for the channel name) or null if sensorId is not found\n+     */\n+    protected int getSensorNumber(String sensorDesc, String sensorId) {\n+        int idx = 0;\n+        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n+            CoIotDescrSen sen = se.getValue();\n+            if (sen.desc.equalsIgnoreCase(sensorDesc)) {\n+                idx++; // iterate from input1..2..n\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId) && blkMap.containsKey(sen.links)) {\n+                int id = getIdFromBlk(sen);\n+                if (id != -1) {\n+                    return id;\n+                }\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId)) {\n+                return idx;\n+            }\n+        }\n+        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n+        return -1;\n+    }\n+\n+    protected int getIdFromBlk(CoIotDescrSen sen) {\n+        int idx = -1;\n+        if (blkMap.containsKey(sen.links)) {\n+            CoIotDescrBlk blk = blkMap.get(sen.links);\n+            String desc = blk.desc.toLowerCase();\n+            if (desc.startsWith(SHELLY_CLASS_RELAY) || desc.startsWith(SHELLY_CLASS_ROLLER)) {\n+                if (desc.contains(\"_\")) { // CoAP v2\n+                    idx = Integer.parseInt(StringUtils.substringAfter(desc, \"_\"));\n+                } else { // CoAP v1\n+                    if (desc.substring(0, 5).equalsIgnoreCase(SHELLY_CLASS_RELAY)) {", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTY1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135655", "bodyText": "puh, could we put that into the next PR, those nice little chages have always potential for side effects", "author": "markus7017", "createdAt": "2020-08-16T17:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0OTYwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471149603", "bodyText": "Well, if it has more than five characters, the side effect would be a crash. Why not adding an if, checking the length?", "author": "fwolter", "createdAt": "2020-08-16T19:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE2MTA2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471161061", "bodyText": "will be moved to next PR", "author": "markus7017", "createdAt": "2020-08-16T21:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java\ndeleted file mode 100644\nindex 625c5e4195..0000000000\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java\n+++ /dev/null\n\n@@ -1,354 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.shelly.internal.coap;\n-\n-import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n-import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n-import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.library.types.OpenClosedType;\n-import org.eclipse.smarthome.core.library.types.StringType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n-import org.eclipse.smarthome.core.types.State;\n-import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n-import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n-import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link ShellyCoIoTProtocol} implements common functions for the CoIoT implementations\n- *\n- * @author Markus Michels - Initial contribution\n- */\n-@NonNullByDefault\n-public class ShellyCoIoTProtocol {\n-    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTProtocol.class);\n-    protected final String thingName;\n-    protected final ShellyBaseHandler thingHandler;\n-    protected final ShellyDeviceProfile profile;\n-    protected final Map<String, CoIotDescrBlk> blkMap;\n-    protected final Map<String, CoIotDescrSen> sensorMap;\n-\n-    // Due to the fact that the device reports only the current/last status, but no real events, we need to distinguish\n-    // between a real update or just a repeated status on periodic updates\n-    protected int lastCfgCount = -1;\n-    protected int[] lastEventCount = { -1, -1, -1, -1, -1, -1, -1, -1 }; // 4Pro has 4 relays, so 8 should be fine\n-    protected String[] inputEvent = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n-\n-    public ShellyCoIoTProtocol(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n-            Map<String, CoIotDescrSen> sensorMap) {\n-        this.thingName = thingName;\n-        this.thingHandler = thingHandler;\n-        this.blkMap = blkMap;\n-        this.sensorMap = sensorMap;\n-        this.profile = thingHandler.getProfile();\n-    }\n-\n-    protected boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n-            Map<String, State> updates) {\n-        // Process status information and convert into channel updates\n-        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n-        // String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n-        // : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n-        int rIndex = getIdFromBlk(sen);\n-        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n-                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n-        switch (sen.type.toLowerCase()) {\n-            case \"b\": // BatteryLevel +\n-                updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n-                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n-                break;\n-            case \"h\" /* Humidity */:\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n-                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n-                break;\n-            case \"m\" /* Motion */:\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n-                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                break;\n-            case \"l\": // Luminosity +\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n-                        toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n-                break;\n-            case \"s\": // CatchAll\n-                switch (sen.desc.toLowerCase()) {\n-                    case \"state\": // Relay status +\n-                    case \"output\":\n-                        updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n-                        break;\n-                    case \"input\":\n-                        handleInput(sen, s, rGroup, updates);\n-                        break;\n-                    case \"brightness\":\n-                        // already handled by state/output\n-                        break;\n-                    case \"overtemp\": // ++\n-                        if (s.value == 1) {\n-                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n-                        }\n-                        break;\n-                    case \"position\":\n-                        // work around: Roller reports 101% instead max 100\n-                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n-                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n-                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n-                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n-                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n-                        break;\n-                    case \"flood\":\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"vibration\": // DW with FW1.6.5+\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"luminositylevel\": // +\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ILLUM, getStringType(s.valueStr));\n-                        break;\n-                    case \"charger\": // Sense\n-                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    // RGBW2/Bulb\n-                    case \"red\":\n-                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n-                                ShellyColorUtils.toPercent((int) s.value));\n-                        break;\n-                    case \"green\":\n-                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n-                                ShellyColorUtils.toPercent((int) s.value));\n-                        break;\n-                    case \"blue\":\n-                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n-                                ShellyColorUtils.toPercent((int) s.value));\n-                        break;\n-                    case \"white\":\n-                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n-                                ShellyColorUtils.toPercent((int) s.value));\n-                        break;\n-                    case \"gain\":\n-                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n-                                ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n-                        break;\n-                    case \"sensorerror\": // +\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n-                        break;\n-                    default:\n-                        // Unknown\n-                        return false;\n-                }\n-                break;\n-\n-            default:\n-                // Unknown type\n-                return false;\n-        }\n-\n-        return true;\n-    }\n-\n-    protected boolean updateChannel(Map<String, State> updates, String group, String channel, State value) {\n-        updates.put(mkChannelId(group, channel), value);\n-        return true;\n-    }\n-\n-    protected void handleInput(CoIotDescrSen sen, CoIotSensor s, String rGroup, Map<String, State> updates) {\n-        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n-        String iGroup = profile.getInputGroup(idx);\n-        String iChannel = profile.getInputChannel(idx);\n-        updateChannel(updates, iGroup, iChannel, s.value == 0 ? OnOffType.OFF : OnOffType.ON);\n-    }\n-\n-    protected void handleInputEvent(CoIotDescrSen sen, String type, Integer count, Map<String, State> updates) {\n-        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n-        String group = profile.getInputGroup(idx);\n-        logger.debug(\"{}: handleInputEvent, sen={}/{}, type={}, count={}, idx={},group={}\", thingName, sen.type,\n-                sen.desc, type, count, idx, group);\n-        if (count == -1) {\n-            // event type\n-            logger.debug(\"{}: CoAP Update on inputEvent={}\", thingName, type);\n-            updateChannel(updates, group, CHANNEL_STATUS_EVENTTYPE, new StringType(type));\n-            inputEvent[idx] = type;\n-        } else {\n-            // event count\n-            logger.debug(\"{}: CoAP Update on inputEventCount={}\", thingName, count);\n-            updateChannel(updates, group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(count));\n-            if (profile.inButtonMode(idx) && ((profile.hasBattery && (count == 1)) || (count != lastEventCount[idx]))) {\n-                lastEventCount[idx] = count;\n-                thingHandler.triggerButton(group, inputEvent[idx]);\n-            }\n-        }\n-    }\n-\n-    /**\n-     *\n-     * Handles the combined updated of the brightness channel:\n-     * brightness$Switch is the OnOffType (power state)\n-     * brightness&Value is the brightness value\n-     *\n-     * @param profile Device profile, required to select the channel group and name\n-     * @param updates List of updates. updatePower will add brightness$Switch and brightness&Value if changed\n-     * @param id Sensor id from the update\n-     * @param sen Sensor description from the update\n-     * @param s New sensor value\n-     * @param allUpdatesList of updates. This is required, because we need to update both values at the same time\n-     */\n-    protected void updatePower(ShellyDeviceProfile profile, Map<String, State> updates, int id, CoIotDescrSen sen,\n-            CoIotSensor s, List<CoIotSensor> allUpdates) {\n-        String group = \"\";\n-        String channel = CHANNEL_BRIGHTNESS;\n-        String checkL = \"\"; // RGBW-white uses 4 different Power, Brightness, VSwitch values\n-        if (profile.isLight || profile.isDimmer) {\n-            if (profile.isBulb || profile.inColor) {\n-                group = CHANNEL_GROUP_LIGHT_CONTROL;\n-                channel = CHANNEL_LIGHT_POWER;\n-            } else if (profile.isDuo) {\n-                group = CHANNEL_GROUP_WHITE_CONTROL;\n-            } else if (profile.isDimmer) {\n-                group = CHANNEL_GROUP_RELAY_CONTROL;\n-            } else if (profile.isRGBW2) {\n-                group = CHANNEL_GROUP_LIGHT_CHANNEL + id;\n-                checkL = String.valueOf(id - 1); // id is 1-based, L is 0-based\n-                logger.trace(\"{}: updatePower() for L={}\", thingName, checkL);\n-            }\n-\n-            // We need to update brigthtess and on/off state at the same time to avoid \"flipping brightness slider\" in\n-            // the UI\n-            Double brightness = -1.0;\n-            Double power = -1.0;\n-            for (CoIotSensor update : allUpdates) {\n-                CoIotDescrSen d = fixDescription(sensorMap.get(update.id), blkMap);\n-                if (!checkL.isEmpty() && !d.links.equals(checkL)) {\n-                    // continue until we find the correct one\n-                    continue;\n-                }\n-                if (d.desc.equalsIgnoreCase(\"brightness\")) {\n-                    brightness = new Double(update.value);\n-                } else if (d.desc.equalsIgnoreCase(\"output\") || d.desc.equalsIgnoreCase(\"state\")) {\n-                    power = new Double(update.value);\n-                }\n-            }\n-            if (power != -1) {\n-                updateChannel(updates, group, channel + \"$Switch\", power == 1 ? OnOffType.ON : OnOffType.OFF);\n-            }\n-            if (brightness != -1) {\n-                updateChannel(updates, group, channel + \"$Value\",\n-                        toQuantityType(power == 1 ? brightness : 0, DIGITS_NONE, SmartHomeUnits.PERCENT));\n-            }\n-        } else if (profile.hasRelays) {\n-            group = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL : CHANNEL_GROUP_RELAY_CONTROL + id;\n-            updateChannel(updates, group, CHANNEL_OUTPUT, s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-        } else if (profile.isSensor) {\n-            // Sensor state\n-            if (profile.isDW) { // Door Window has item type Contact\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n-                        s.value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n-            } else {\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n-                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Find index of Input id, which is required to map to channel name\n-     *\n-     * @parm sensorDesc D field from sensor update\n-     * @param sensorId The id from the sensor update\n-     * @return Index of found entry (+1 will be the suffix for the channel name) or null if sensorId is not found\n-     */\n-    protected int getSensorNumber(String sensorDesc, String sensorId) {\n-        int idx = 0;\n-        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n-            CoIotDescrSen sen = se.getValue();\n-            if (sen.desc.equalsIgnoreCase(sensorDesc)) {\n-                idx++; // iterate from input1..2..n\n-            }\n-            if (sen.id.equalsIgnoreCase(sensorId) && blkMap.containsKey(sen.links)) {\n-                int id = getIdFromBlk(sen);\n-                if (id != -1) {\n-                    return id;\n-                }\n-            }\n-            if (sen.id.equalsIgnoreCase(sensorId)) {\n-                return idx;\n-            }\n-        }\n-        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n-        return -1;\n-    }\n-\n-    protected int getIdFromBlk(CoIotDescrSen sen) {\n-        int idx = -1;\n-        if (blkMap.containsKey(sen.links)) {\n-            CoIotDescrBlk blk = blkMap.get(sen.links);\n-            String desc = blk.desc.toLowerCase();\n-            if (desc.startsWith(SHELLY_CLASS_RELAY) || desc.startsWith(SHELLY_CLASS_ROLLER)) {\n-                if (desc.contains(\"_\")) { // CoAP v2\n-                    idx = Integer.parseInt(StringUtils.substringAfter(desc, \"_\"));\n-                } else { // CoAP v1\n-                    if (desc.substring(0, 5).equalsIgnoreCase(SHELLY_CLASS_RELAY)) {\n-                        idx = Integer.parseInt(StringUtils.substringAfter(desc, SHELLY_CLASS_RELAY));\n-                    }\n-                    if (desc.substring(0, 6).equalsIgnoreCase(SHELLY_CLASS_ROLLER)) {\n-                        idx = Integer.parseInt(StringUtils.substringAfter(desc, SHELLY_CLASS_ROLLER));\n-                    }\n-                }\n-                idx = idx + 1; // make it 1-based (sen.L is 0-based)\n-            }\n-        }\n-        return idx;\n-    }\n-\n-    /**\n-     *\n-     * Get matching sensorId for updates on \"External Temperature\" - there might be more than 1 sensor.\n-     *\n-     * @param sensorId sensorId to map into a channel index\n-     * @return Index of the corresponding channel (e.g. 0 build temperature1, 1->temperagture2...)\n-     */\n-    protected int getExtTempId(String sensorId) {\n-        int idx = 0;\n-        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n-            CoIotDescrSen sen = se.getValue();\n-            if (sen.desc.equalsIgnoreCase(\"external_temperature\") || sen.desc.equalsIgnoreCase(\"external temperature c\")\n-                    || sen.desc.equalsIgnoreCase(\"extTemp\")) {\n-                idx++; // iterate from temperature1..2..n\n-            }\n-            if (sen.id.equalsIgnoreCase(sensorId)) {\n-                return idx;\n-            }\n-        }\n-        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n-        return -1;\n-    }\n-\n-    protected ShellyDeviceProfile getProfile() {\n-        return profile;\n-    }\n-\n-    public CoIotDescrSen fixDescription(CoIotDescrSen sen, Map<String, CoIotDescrBlk> blkMap) {\n-        return sen;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTE5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089196", "bodyText": "Since we want to get rid of Apache Commons, can you replace this with native Java code? See #7722.", "author": "fwolter", "createdAt": "2020-08-16T09:28:48Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ShellyCoIoTProtocol} implements common functions for the CoIoT implementations\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTProtocol {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTProtocol.class);\n+    protected final String thingName;\n+    protected final ShellyBaseHandler thingHandler;\n+    protected final ShellyDeviceProfile profile;\n+    protected final Map<String, CoIotDescrBlk> blkMap;\n+    protected final Map<String, CoIotDescrSen> sensorMap;\n+\n+    // Due to the fact that the device reports only the current/last status, but no real events, we need to distinguish\n+    // between a real update or just a repeated status on periodic updates\n+    protected int lastCfgCount = -1;\n+    protected int[] lastEventCount = { -1, -1, -1, -1, -1, -1, -1, -1 }; // 4Pro has 4 relays, so 8 should be fine\n+    protected String[] inputEvent = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n+\n+    public ShellyCoIoTProtocol(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        this.thingName = thingName;\n+        this.thingHandler = thingHandler;\n+        this.blkMap = blkMap;\n+        this.sensorMap = sensorMap;\n+        this.profile = thingHandler.getProfile();\n+    }\n+\n+    protected boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+        // Process status information and convert into channel updates\n+        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        // String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+        // : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        int rIndex = getIdFromBlk(sen);\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"b\": // BatteryLevel +\n+                updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"h\" /* Humidity */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"m\" /* Motion */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                break;\n+            case \"l\": // Luminosity +\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n+                        toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n+                break;\n+            case \"s\": // CatchAll\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"state\": // Relay status +\n+                    case \"output\":\n+                        updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n+                        break;\n+                    case \"input\":\n+                        handleInput(sen, s, rGroup, updates);\n+                        break;\n+                    case \"brightness\":\n+                        // already handled by state/output\n+                        break;\n+                    case \"overtemp\": // ++\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"luminositylevel\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ILLUM, getStringType(s.valueStr));\n+                        break;\n+                    case \"charger\": // Sense\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    // RGBW2/Bulb\n+                    case \"red\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"green\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"blue\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"white\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"gain\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n+                                ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n+                        break;\n+                    case \"sensorerror\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean updateChannel(Map<String, State> updates, String group, String channel, State value) {\n+        updates.put(mkChannelId(group, channel), value);\n+        return true;\n+    }\n+\n+    protected void handleInput(CoIotDescrSen sen, CoIotSensor s, String rGroup, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String iGroup = profile.getInputGroup(idx);\n+        String iChannel = profile.getInputChannel(idx);\n+        updateChannel(updates, iGroup, iChannel, s.value == 0 ? OnOffType.OFF : OnOffType.ON);\n+    }\n+\n+    protected void handleInputEvent(CoIotDescrSen sen, String type, Integer count, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String group = profile.getInputGroup(idx);\n+        logger.debug(\"{}: handleInputEvent, sen={}/{}, type={}, count={}, idx={},group={}\", thingName, sen.type,\n+                sen.desc, type, count, idx, group);\n+        if (count == -1) {\n+            // event type\n+            logger.debug(\"{}: CoAP Update on inputEvent={}\", thingName, type);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTTYPE, new StringType(type));\n+            inputEvent[idx] = type;\n+        } else {\n+            // event count\n+            logger.debug(\"{}: CoAP Update on inputEventCount={}\", thingName, count);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(count));\n+            if (profile.inButtonMode(idx) && ((profile.hasBattery && (count == 1)) || (count != lastEventCount[idx]))) {\n+                lastEventCount[idx] = count;\n+                thingHandler.triggerButton(group, inputEvent[idx]);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * Handles the combined updated of the brightness channel:\n+     * brightness$Switch is the OnOffType (power state)\n+     * brightness&Value is the brightness value\n+     *\n+     * @param profile Device profile, required to select the channel group and name\n+     * @param updates List of updates. updatePower will add brightness$Switch and brightness&Value if changed\n+     * @param id Sensor id from the update\n+     * @param sen Sensor description from the update\n+     * @param s New sensor value\n+     * @param allUpdatesList of updates. This is required, because we need to update both values at the same time\n+     */\n+    protected void updatePower(ShellyDeviceProfile profile, Map<String, State> updates, int id, CoIotDescrSen sen,\n+            CoIotSensor s, List<CoIotSensor> allUpdates) {\n+        String group = \"\";\n+        String channel = CHANNEL_BRIGHTNESS;\n+        String checkL = \"\"; // RGBW-white uses 4 different Power, Brightness, VSwitch values\n+        if (profile.isLight || profile.isDimmer) {\n+            if (profile.isBulb || profile.inColor) {\n+                group = CHANNEL_GROUP_LIGHT_CONTROL;\n+                channel = CHANNEL_LIGHT_POWER;\n+            } else if (profile.isDuo) {\n+                group = CHANNEL_GROUP_WHITE_CONTROL;\n+            } else if (profile.isDimmer) {\n+                group = CHANNEL_GROUP_RELAY_CONTROL;\n+            } else if (profile.isRGBW2) {\n+                group = CHANNEL_GROUP_LIGHT_CHANNEL + id;\n+                checkL = String.valueOf(id - 1); // id is 1-based, L is 0-based\n+                logger.trace(\"{}: updatePower() for L={}\", thingName, checkL);\n+            }\n+\n+            // We need to update brigthtess and on/off state at the same time to avoid \"flipping brightness slider\" in\n+            // the UI\n+            Double brightness = -1.0;\n+            Double power = -1.0;\n+            for (CoIotSensor update : allUpdates) {\n+                CoIotDescrSen d = fixDescription(sensorMap.get(update.id), blkMap);\n+                if (!checkL.isEmpty() && !d.links.equals(checkL)) {\n+                    // continue until we find the correct one\n+                    continue;\n+                }\n+                if (d.desc.equalsIgnoreCase(\"brightness\")) {\n+                    brightness = new Double(update.value);\n+                } else if (d.desc.equalsIgnoreCase(\"output\") || d.desc.equalsIgnoreCase(\"state\")) {\n+                    power = new Double(update.value);\n+                }\n+            }\n+            if (power != -1) {\n+                updateChannel(updates, group, channel + \"$Switch\", power == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+            if (brightness != -1) {\n+                updateChannel(updates, group, channel + \"$Value\",\n+                        toQuantityType(power == 1 ? brightness : 0, DIGITS_NONE, SmartHomeUnits.PERCENT));\n+            }\n+        } else if (profile.hasRelays) {\n+            group = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL : CHANNEL_GROUP_RELAY_CONTROL + id;\n+            updateChannel(updates, group, CHANNEL_OUTPUT, s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+        } else if (profile.isSensor) {\n+            // Sensor state\n+            if (profile.isDW) { // Door Window has item type Contact\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            } else {\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Find index of Input id, which is required to map to channel name\n+     *\n+     * @parm sensorDesc D field from sensor update\n+     * @param sensorId The id from the sensor update\n+     * @return Index of found entry (+1 will be the suffix for the channel name) or null if sensorId is not found\n+     */\n+    protected int getSensorNumber(String sensorDesc, String sensorId) {\n+        int idx = 0;\n+        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n+            CoIotDescrSen sen = se.getValue();\n+            if (sen.desc.equalsIgnoreCase(sensorDesc)) {\n+                idx++; // iterate from input1..2..n\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId) && blkMap.containsKey(sen.links)) {\n+                int id = getIdFromBlk(sen);\n+                if (id != -1) {\n+                    return id;\n+                }\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId)) {\n+                return idx;\n+            }\n+        }\n+        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n+        return -1;\n+    }\n+\n+    protected int getIdFromBlk(CoIotDescrSen sen) {\n+        int idx = -1;\n+        if (blkMap.containsKey(sen.links)) {\n+            CoIotDescrBlk blk = blkMap.get(sen.links);\n+            String desc = blk.desc.toLowerCase();\n+            if (desc.startsWith(SHELLY_CLASS_RELAY) || desc.startsWith(SHELLY_CLASS_ROLLER)) {\n+                if (desc.contains(\"_\")) { // CoAP v2\n+                    idx = Integer.parseInt(StringUtils.substringAfter(desc, \"_\"));", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE2MTA4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471161086", "bodyText": "will be moved to next PR", "author": "markus7017", "createdAt": "2020-08-16T21:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java\ndeleted file mode 100644\nindex 625c5e4195..0000000000\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java\n+++ /dev/null\n\n@@ -1,354 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.shelly.internal.coap;\n-\n-import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n-import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n-import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.library.types.OpenClosedType;\n-import org.eclipse.smarthome.core.library.types.StringType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n-import org.eclipse.smarthome.core.types.State;\n-import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n-import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n-import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link ShellyCoIoTProtocol} implements common functions for the CoIoT implementations\n- *\n- * @author Markus Michels - Initial contribution\n- */\n-@NonNullByDefault\n-public class ShellyCoIoTProtocol {\n-    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTProtocol.class);\n-    protected final String thingName;\n-    protected final ShellyBaseHandler thingHandler;\n-    protected final ShellyDeviceProfile profile;\n-    protected final Map<String, CoIotDescrBlk> blkMap;\n-    protected final Map<String, CoIotDescrSen> sensorMap;\n-\n-    // Due to the fact that the device reports only the current/last status, but no real events, we need to distinguish\n-    // between a real update or just a repeated status on periodic updates\n-    protected int lastCfgCount = -1;\n-    protected int[] lastEventCount = { -1, -1, -1, -1, -1, -1, -1, -1 }; // 4Pro has 4 relays, so 8 should be fine\n-    protected String[] inputEvent = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n-\n-    public ShellyCoIoTProtocol(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n-            Map<String, CoIotDescrSen> sensorMap) {\n-        this.thingName = thingName;\n-        this.thingHandler = thingHandler;\n-        this.blkMap = blkMap;\n-        this.sensorMap = sensorMap;\n-        this.profile = thingHandler.getProfile();\n-    }\n-\n-    protected boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n-            Map<String, State> updates) {\n-        // Process status information and convert into channel updates\n-        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n-        // String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n-        // : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n-        int rIndex = getIdFromBlk(sen);\n-        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n-                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n-        switch (sen.type.toLowerCase()) {\n-            case \"b\": // BatteryLevel +\n-                updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n-                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n-                break;\n-            case \"h\" /* Humidity */:\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n-                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n-                break;\n-            case \"m\" /* Motion */:\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n-                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                break;\n-            case \"l\": // Luminosity +\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n-                        toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n-                break;\n-            case \"s\": // CatchAll\n-                switch (sen.desc.toLowerCase()) {\n-                    case \"state\": // Relay status +\n-                    case \"output\":\n-                        updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n-                        break;\n-                    case \"input\":\n-                        handleInput(sen, s, rGroup, updates);\n-                        break;\n-                    case \"brightness\":\n-                        // already handled by state/output\n-                        break;\n-                    case \"overtemp\": // ++\n-                        if (s.value == 1) {\n-                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n-                        }\n-                        break;\n-                    case \"position\":\n-                        // work around: Roller reports 101% instead max 100\n-                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n-                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n-                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n-                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n-                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n-                        break;\n-                    case \"flood\":\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"vibration\": // DW with FW1.6.5+\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"luminositylevel\": // +\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ILLUM, getStringType(s.valueStr));\n-                        break;\n-                    case \"charger\": // Sense\n-                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    // RGBW2/Bulb\n-                    case \"red\":\n-                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n-                                ShellyColorUtils.toPercent((int) s.value));\n-                        break;\n-                    case \"green\":\n-                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n-                                ShellyColorUtils.toPercent((int) s.value));\n-                        break;\n-                    case \"blue\":\n-                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n-                                ShellyColorUtils.toPercent((int) s.value));\n-                        break;\n-                    case \"white\":\n-                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n-                                ShellyColorUtils.toPercent((int) s.value));\n-                        break;\n-                    case \"gain\":\n-                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n-                                ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n-                        break;\n-                    case \"sensorerror\": // +\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n-                        break;\n-                    default:\n-                        // Unknown\n-                        return false;\n-                }\n-                break;\n-\n-            default:\n-                // Unknown type\n-                return false;\n-        }\n-\n-        return true;\n-    }\n-\n-    protected boolean updateChannel(Map<String, State> updates, String group, String channel, State value) {\n-        updates.put(mkChannelId(group, channel), value);\n-        return true;\n-    }\n-\n-    protected void handleInput(CoIotDescrSen sen, CoIotSensor s, String rGroup, Map<String, State> updates) {\n-        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n-        String iGroup = profile.getInputGroup(idx);\n-        String iChannel = profile.getInputChannel(idx);\n-        updateChannel(updates, iGroup, iChannel, s.value == 0 ? OnOffType.OFF : OnOffType.ON);\n-    }\n-\n-    protected void handleInputEvent(CoIotDescrSen sen, String type, Integer count, Map<String, State> updates) {\n-        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n-        String group = profile.getInputGroup(idx);\n-        logger.debug(\"{}: handleInputEvent, sen={}/{}, type={}, count={}, idx={},group={}\", thingName, sen.type,\n-                sen.desc, type, count, idx, group);\n-        if (count == -1) {\n-            // event type\n-            logger.debug(\"{}: CoAP Update on inputEvent={}\", thingName, type);\n-            updateChannel(updates, group, CHANNEL_STATUS_EVENTTYPE, new StringType(type));\n-            inputEvent[idx] = type;\n-        } else {\n-            // event count\n-            logger.debug(\"{}: CoAP Update on inputEventCount={}\", thingName, count);\n-            updateChannel(updates, group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(count));\n-            if (profile.inButtonMode(idx) && ((profile.hasBattery && (count == 1)) || (count != lastEventCount[idx]))) {\n-                lastEventCount[idx] = count;\n-                thingHandler.triggerButton(group, inputEvent[idx]);\n-            }\n-        }\n-    }\n-\n-    /**\n-     *\n-     * Handles the combined updated of the brightness channel:\n-     * brightness$Switch is the OnOffType (power state)\n-     * brightness&Value is the brightness value\n-     *\n-     * @param profile Device profile, required to select the channel group and name\n-     * @param updates List of updates. updatePower will add brightness$Switch and brightness&Value if changed\n-     * @param id Sensor id from the update\n-     * @param sen Sensor description from the update\n-     * @param s New sensor value\n-     * @param allUpdatesList of updates. This is required, because we need to update both values at the same time\n-     */\n-    protected void updatePower(ShellyDeviceProfile profile, Map<String, State> updates, int id, CoIotDescrSen sen,\n-            CoIotSensor s, List<CoIotSensor> allUpdates) {\n-        String group = \"\";\n-        String channel = CHANNEL_BRIGHTNESS;\n-        String checkL = \"\"; // RGBW-white uses 4 different Power, Brightness, VSwitch values\n-        if (profile.isLight || profile.isDimmer) {\n-            if (profile.isBulb || profile.inColor) {\n-                group = CHANNEL_GROUP_LIGHT_CONTROL;\n-                channel = CHANNEL_LIGHT_POWER;\n-            } else if (profile.isDuo) {\n-                group = CHANNEL_GROUP_WHITE_CONTROL;\n-            } else if (profile.isDimmer) {\n-                group = CHANNEL_GROUP_RELAY_CONTROL;\n-            } else if (profile.isRGBW2) {\n-                group = CHANNEL_GROUP_LIGHT_CHANNEL + id;\n-                checkL = String.valueOf(id - 1); // id is 1-based, L is 0-based\n-                logger.trace(\"{}: updatePower() for L={}\", thingName, checkL);\n-            }\n-\n-            // We need to update brigthtess and on/off state at the same time to avoid \"flipping brightness slider\" in\n-            // the UI\n-            Double brightness = -1.0;\n-            Double power = -1.0;\n-            for (CoIotSensor update : allUpdates) {\n-                CoIotDescrSen d = fixDescription(sensorMap.get(update.id), blkMap);\n-                if (!checkL.isEmpty() && !d.links.equals(checkL)) {\n-                    // continue until we find the correct one\n-                    continue;\n-                }\n-                if (d.desc.equalsIgnoreCase(\"brightness\")) {\n-                    brightness = new Double(update.value);\n-                } else if (d.desc.equalsIgnoreCase(\"output\") || d.desc.equalsIgnoreCase(\"state\")) {\n-                    power = new Double(update.value);\n-                }\n-            }\n-            if (power != -1) {\n-                updateChannel(updates, group, channel + \"$Switch\", power == 1 ? OnOffType.ON : OnOffType.OFF);\n-            }\n-            if (brightness != -1) {\n-                updateChannel(updates, group, channel + \"$Value\",\n-                        toQuantityType(power == 1 ? brightness : 0, DIGITS_NONE, SmartHomeUnits.PERCENT));\n-            }\n-        } else if (profile.hasRelays) {\n-            group = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL : CHANNEL_GROUP_RELAY_CONTROL + id;\n-            updateChannel(updates, group, CHANNEL_OUTPUT, s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-        } else if (profile.isSensor) {\n-            // Sensor state\n-            if (profile.isDW) { // Door Window has item type Contact\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n-                        s.value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n-            } else {\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n-                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Find index of Input id, which is required to map to channel name\n-     *\n-     * @parm sensorDesc D field from sensor update\n-     * @param sensorId The id from the sensor update\n-     * @return Index of found entry (+1 will be the suffix for the channel name) or null if sensorId is not found\n-     */\n-    protected int getSensorNumber(String sensorDesc, String sensorId) {\n-        int idx = 0;\n-        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n-            CoIotDescrSen sen = se.getValue();\n-            if (sen.desc.equalsIgnoreCase(sensorDesc)) {\n-                idx++; // iterate from input1..2..n\n-            }\n-            if (sen.id.equalsIgnoreCase(sensorId) && blkMap.containsKey(sen.links)) {\n-                int id = getIdFromBlk(sen);\n-                if (id != -1) {\n-                    return id;\n-                }\n-            }\n-            if (sen.id.equalsIgnoreCase(sensorId)) {\n-                return idx;\n-            }\n-        }\n-        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n-        return -1;\n-    }\n-\n-    protected int getIdFromBlk(CoIotDescrSen sen) {\n-        int idx = -1;\n-        if (blkMap.containsKey(sen.links)) {\n-            CoIotDescrBlk blk = blkMap.get(sen.links);\n-            String desc = blk.desc.toLowerCase();\n-            if (desc.startsWith(SHELLY_CLASS_RELAY) || desc.startsWith(SHELLY_CLASS_ROLLER)) {\n-                if (desc.contains(\"_\")) { // CoAP v2\n-                    idx = Integer.parseInt(StringUtils.substringAfter(desc, \"_\"));\n-                } else { // CoAP v1\n-                    if (desc.substring(0, 5).equalsIgnoreCase(SHELLY_CLASS_RELAY)) {\n-                        idx = Integer.parseInt(StringUtils.substringAfter(desc, SHELLY_CLASS_RELAY));\n-                    }\n-                    if (desc.substring(0, 6).equalsIgnoreCase(SHELLY_CLASS_ROLLER)) {\n-                        idx = Integer.parseInt(StringUtils.substringAfter(desc, SHELLY_CLASS_ROLLER));\n-                    }\n-                }\n-                idx = idx + 1; // make it 1-based (sen.L is 0-based)\n-            }\n-        }\n-        return idx;\n-    }\n-\n-    /**\n-     *\n-     * Get matching sensorId for updates on \"External Temperature\" - there might be more than 1 sensor.\n-     *\n-     * @param sensorId sensorId to map into a channel index\n-     * @return Index of the corresponding channel (e.g. 0 build temperature1, 1->temperagture2...)\n-     */\n-    protected int getExtTempId(String sensorId) {\n-        int idx = 0;\n-        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n-            CoIotDescrSen sen = se.getValue();\n-            if (sen.desc.equalsIgnoreCase(\"external_temperature\") || sen.desc.equalsIgnoreCase(\"external temperature c\")\n-                    || sen.desc.equalsIgnoreCase(\"extTemp\")) {\n-                idx++; // iterate from temperature1..2..n\n-            }\n-            if (sen.id.equalsIgnoreCase(sensorId)) {\n-                return idx;\n-            }\n-        }\n-        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n-        return -1;\n-    }\n-\n-    protected ShellyDeviceProfile getProfile() {\n-        return profile;\n-    }\n-\n-    public CoIotDescrSen fixDescription(CoIotDescrSen sen, Map<String, CoIotDescrBlk> blkMap) {\n-        return sen;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTQ2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089461", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                case \"temperature c\": // Device Tem\u00fc in C ++\n          \n          \n            \n                                case \"temperature c\": // Device Temp in C ++", "author": "fwolter", "createdAt": "2020-08-16T09:31:19Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java", "diffHunk": "@@ -0,0 +1,364 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link ShellyCoIoTVersion1} implements the parsing for CoIoT version 1\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTVersion1 extends ShellyCoIoTProtocol implements ShellyCoIoTInterface {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTVersion1.class);\n+\n+    public ShellyCoIoTVersion1(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        super(thingName, thingHandler, blkMap, sensorMap);\n+    }\n+\n+    @Override\n+    public int getVersion() {\n+        return ShellyCoapJSonDTO.COIOT_VERSION_1;\n+    }\n+\n+    /**\n+     * Process CoIoT status update message. If a status update is received, but the device description has not been\n+     * received yet a GET is send to query device description.\n+     *\n+     * @param devId device id included in the status packet\n+     * @param payload CoAP payload (Json format), example: {\"G\":[[0,112,0]]}\n+     * @param serial Serial for this request. If this the the same as last serial\n+     *            the update was already sent and processed so this one gets\n+     *            ignored.\n+     */\n+    @Override\n+    public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+\n+        // first check the base implementation\n+        if (super.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n+            // process by the base class\n+            return true;\n+        }\n+\n+        // Process status information and convert into channel updates\n+        Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"t\": // Temperature +\n+                Double value = getDouble(s.value);\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"temperature\": // Sensor Temp\n+                        if (getString(getProfile().settings.temperatureUnits)\n+                                .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n+                            value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS).convert(getDouble(s.value))\n+                                    .doubleValue();\n+                        }\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n+                                toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                        break;\n+                    case \"temperature f\": // Device Temp -> ignore (we use C only)\n+                        break;\n+                    case \"temperature c\": // Device Tem\u00fc in C ++", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTY3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135678", "bodyText": "fixed", "author": "markus7017", "createdAt": "2020-08-16T17:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java\ndeleted file mode 100644\nindex dedfd5c256..0000000000\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java\n+++ /dev/null\n\n@@ -1,364 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.shelly.internal.coap;\n-\n-import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n-import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n-import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n-import org.eclipse.smarthome.core.library.unit.SIUnits;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n-import org.eclipse.smarthome.core.types.State;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n-import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n-import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import tec.uom.se.unit.Units;\n-\n-/**\n- * The {@link ShellyCoIoTVersion1} implements the parsing for CoIoT version 1\n- *\n- * @author Markus Michels - Initial contribution\n- */\n-@NonNullByDefault\n-public class ShellyCoIoTVersion1 extends ShellyCoIoTProtocol implements ShellyCoIoTInterface {\n-    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTVersion1.class);\n-\n-    public ShellyCoIoTVersion1(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n-            Map<String, CoIotDescrSen> sensorMap) {\n-        super(thingName, thingHandler, blkMap, sensorMap);\n-    }\n-\n-    @Override\n-    public int getVersion() {\n-        return ShellyCoapJSonDTO.COIOT_VERSION_1;\n-    }\n-\n-    /**\n-     * Process CoIoT status update message. If a status update is received, but the device description has not been\n-     * received yet a GET is send to query device description.\n-     *\n-     * @param devId device id included in the status packet\n-     * @param payload CoAP payload (Json format), example: {\"G\":[[0,112,0]]}\n-     * @param serial Serial for this request. If this the the same as last serial\n-     *            the update was already sent and processed so this one gets\n-     *            ignored.\n-     */\n-    @Override\n-    public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n-            Map<String, State> updates) {\n-\n-        // first check the base implementation\n-        if (super.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n-            // process by the base class\n-            return true;\n-        }\n-\n-        // Process status information and convert into channel updates\n-        Integer rIndex = Integer.parseInt(sen.links) + 1;\n-        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n-                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n-        switch (sen.type.toLowerCase()) {\n-            case \"t\": // Temperature +\n-                Double value = getDouble(s.value);\n-                switch (sen.desc.toLowerCase()) {\n-                    case \"temperature\": // Sensor Temp\n-                        if (getString(getProfile().settings.temperatureUnits)\n-                                .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n-                            value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS).convert(getDouble(s.value))\n-                                    .doubleValue();\n-                        }\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n-                                toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                        break;\n-                    case \"temperature f\": // Device Temp -> ignore (we use C only)\n-                        break;\n-                    case \"temperature c\": // Device Tem\u00fc in C ++\n-                        // Device temperature\n-                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP,\n-                                toQuantityType(value, DIGITS_NONE, SIUnits.CELSIUS));\n-                        break;\n-                    case \"external temperature f\": // Shelly 1/1PM external temp sensors\n-                        // ignore F, we use C only\n-                        break;\n-                    case \"external temperature c\": // Shelly 1/1PM external temp sensors\n-                    case \"external_temperature\":\n-                        int idx = getExtTempId(sen.id);\n-                        if (idx > 0) {\n-                            updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP + idx,\n-                                    toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                        } else {\n-                            logger.debug(\"{}: Unable to get extSensorId {} from {}/{}\", thingName, sen.id, sen.type,\n-                                    sen.desc);\n-                        }\n-                        break;\n-                    default:\n-                        logger.debug(\"{}: Unknown temperatur type: {}\", thingName, sen.desc);\n-                }\n-                break;\n-            case \"p\": // Power/Watt\n-                // 3EM uses 1-based meter IDs, other 0-based\n-                String mGroup = profile.numMeters == 1 ? CHANNEL_GROUP_METER\n-                        : CHANNEL_GROUP_METER + (profile.isEMeter ? sen.links : rIndex);\n-                updateChannel(updates, mGroup, CHANNEL_METER_CURRENTWATTS,\n-                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                updateChannel(updates, mGroup, CHANNEL_LAST_UPDATE, getTimestamp());\n-                break;\n-            case \"s\" /* CatchAll */:\n-                switch (sen.desc.toLowerCase()) {\n-                    case \"overtemp\":\n-                        if (s.value == 1) {\n-                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n-                        }\n-                        break;\n-                    case \"energy counter 0 [w-min]\":\n-                        updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN1,\n-                                toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                        break;\n-                    case \"energy counter 1 [w-min]\":\n-                    case \"energy counter 2 [w-min]\":\n-                        // we don't use them\n-                        break;\n-                    case \"energy counter total [w-h]\": // 3EM reports W/h\n-                    case \"energy counter total [w-min]\":\n-                        Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n-                        updateChannel(updates, rGroup, CHANNEL_METER_TOTALKWH,\n-                                toQuantityType(total, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n-                        break;\n-                    case \"voltage\":\n-                        updateChannel(updates, rGroup, CHANNEL_EMETER_VOLTAGE,\n-                                toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.VOLT));\n-                        break;\n-                    case \"current\":\n-                        updateChannel(updates, rGroup, CHANNEL_EMETER_CURRENT,\n-                                toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.AMPERE));\n-                        break;\n-                    case \"pf\":\n-                        updateChannel(updates, rGroup, CHANNEL_EMETER_PFACTOR, getDecimal(s.value));\n-                        break;\n-                    case \"position\":\n-                        // work around: Roller reports 101% instead max 100\n-                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n-                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n-                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n-                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n-                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n-                        break;\n-                    case \"input event\": // Shelly Button 1\n-                        handleInputEvent(sen, getString(s.valueStr), -1, updates);\n-                        break;\n-                    case \"input event counter\": // Shelly Button 1/ix3\n-                        handleInputEvent(sen, \"\", getInteger((int) s.value), updates);\n-                        break;\n-                    case \"flood\":\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"tilt\": // DW with FW1.6.5+ //+\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TILT,\n-                                toQuantityType(s.value, DIGITS_NONE, SmartHomeUnits.DEGREE_ANGLE));\n-                        break;\n-                    case \"vibration\": // DW with FW1.6.5+\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"temp\": // Shelly Bulb\n-                    case \"colortemperature\": // Shelly Duo\n-                        updateChannel(updates,\n-                                profile.inColor ? CHANNEL_GROUP_COLOR_CONTROL : CHANNEL_GROUP_WHITE_CONTROL,\n-                                CHANNEL_COLOR_TEMP,\n-                                ShellyColorUtils.toPercent((int) s.value, profile.minTemp, profile.maxTemp));\n-                        break;\n-                    case \"sensor state\": // Shelly Gas\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_SSTATE, getStringType(s.valueStr));\n-                        break;\n-                    case \"alarm state\": // Shelly Gas\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ALARM_STATE,\n-                                getStringType(s.valueStr));\n-                        break;\n-                    case \"self-test state\":// Shelly Gas\n-                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_SELFTTEST,\n-                                getStringType(s.valueStr));\n-                        break;\n-                    case \"concentration\":// Shelly Gas\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_PPM, getDecimal(s.value));\n-                        break;\n-                    case \"sensorerror\":\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n-                        break;\n-                    default:\n-                        // Unknown\n-                        return false;\n-                }\n-                break;\n-\n-            default:\n-                // Unknown type\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     *\n-     * Depending on the device type and firmware release there are significant bugs or incosistencies in the CoIoT\n-     * Device Description returned by the discovery request. Shelly is even not following it's own speicifcation. All of\n-     * that has been reported to Shelly and acknowledged. Firmware 1.6 brought significant improvements. However, the\n-     * old mapping stays in to support older firmware releases.\n-     *\n-     * @param sen Sensor description received from device\n-     * @return fixed Sensor description (sen)\n-     */\n-    @Override\n-    public CoIotDescrSen fixDescription(CoIotDescrSen sen, Map<String, CoIotDescrBlk> blkMap) {\n-        // Shelly1: reports null descr+type \"Switch\" -> map to S\n-        // Shelly1PM: reports null descr+type \"Overtemp\" -> map to O\n-        // Shelly1PM: reports null descr+type \"W\" -> add description\n-        // Shelly1PM: reports temp senmsors without desc -> add description\n-        // Shelly Dimmer: sensors are reported without descriptions -> map to S\n-        // SHelly Sense: multiple issues: Description should not be lower case, invalid type for Motion and Battery\n-        // Shelly Sense: Battery is reported with Desc \"battery\", but type \"H\" instead of \"B\"\n-        // Shelly Sense: Motion is reported with Desc \"battery\", but type \"H\" instead of \"B\"\n-        // Shelly Bulb: Colors are coded with Type=\"Red\" etc. rather than Type=\"S\" and color as Descr\n-        // Shelly RGBW2 is reporting Brightness, Power, VSwitch for each channel, but all with L=0\n-        if (sen.desc == null) {\n-            sen.desc = \"\";\n-        }\n-        String desc = sen.desc.toLowerCase();\n-\n-        // RGBW2 reports Power_0, Power_1, Power_2, Power_3; same for VSwitch and Brightness, all of them linkted to L:0\n-        // we break it up to Power with L:0, Power with L:1...\n-        if (desc.contains(\"_\") && (desc.contains(\"power\") || desc.contains(\"vswitch\") || desc.contains(\"brightness\"))) {\n-            String newDesc = StringUtils.substringBefore(sen.desc, \"_\");\n-            String newLink = StringUtils.substringAfter(sen.desc, \"_\");\n-            sen.desc = newDesc;\n-            sen.links = newLink;\n-            if (!blkMap.containsKey(sen.links)) {\n-                // auto-insert a matching blk entry\n-                CoIotDescrBlk blk = new CoIotDescrBlk();\n-                CoIotDescrBlk blk0 = blkMap.get(\"0\"); // blk 0 is always there\n-                blk.id = sen.links;\n-                blk.desc = blk0.desc + \"_\" + blk.id;\n-                blkMap.put(blk.id, blk);\n-            }\n-        }\n-\n-        switch (sen.type.toLowerCase()) {\n-            case \"w\": // old devices/firmware releases use \"W\", new ones \"P\"\n-                sen.type = \"P\";\n-                sen.desc = \"Power\";\n-                break;\n-            case \"tc\":\n-                sen.type = \"T\";\n-                sen.desc = \"Temperature C\";\n-                break;\n-            case \"tf\":\n-                sen.type = \"T\";\n-                sen.desc = \"Temperature F\";\n-                break;\n-            case \"overtemp\":\n-                sen.type = \"S\";\n-                sen.desc = \"Overtemp\";\n-                break;\n-            case \"relay0\":\n-            case \"switch\":\n-            case \"vswitch\":\n-                sen.type = \"S\";\n-                sen.desc = \"State\";\n-                break;\n-        }\n-\n-        switch (sen.desc.toLowerCase()) {\n-            case \"motion\": // fix acc to spec it's T=M\n-                sen.type = \"M\";\n-                sen.desc = \"Motion\";\n-                break;\n-            case \"battery\": // fix: type is B not H\n-                sen.type = \"B\";\n-                sen.desc = \"Battery\";\n-                break;\n-            case \"overtemp\":\n-                sen.type = \"S\";\n-                sen.desc = \"Overtemp\";\n-                break;\n-            case \"relay0\":\n-            case \"switch\":\n-            case \"vswitch\":\n-                sen.type = \"S\";\n-                sen.desc = \"State\";\n-                break;\n-            case \"e cnt 0 [w-min]\": // 4 Pro\n-            case \"e cnt 1 [w-min]\":\n-            case \"e cnt 2 [w-min]\":\n-            case \"e cnt total [w-min]\": // 4 Pro\n-                sen.desc = sen.desc.toLowerCase().replace(\"e cnt\", \"energy counter\");\n-                break;\n-\n-        }\n-\n-        if (sen.desc.isEmpty()) {\n-            switch (sen.type.toLowerCase()) {\n-                case \"p\":\n-                    sen.desc = \"Power\";\n-                    break;\n-                case \"T\":\n-                    sen.desc = \"Temperature\";\n-                    break;\n-                case \"input\":\n-                    sen.type = \"S\";\n-                    sen.desc = \"Input\";\n-                    break;\n-                case \"output\":\n-                    sen.type = \"S\";\n-                    sen.desc = \"Output\";\n-                    break;\n-                case \"brightness\":\n-                    sen.type = \"S\";\n-                    sen.desc = \"Brightness\";\n-                    break;\n-                case \"red\":\n-                case \"green\":\n-                case \"blue\":\n-                case \"white\":\n-                case \"gain\":\n-                case \"temp\": // Bulb: Color temperature\n-                    sen.desc = sen.type;\n-                    sen.type = \"S\";\n-                    break;\n-                case \"vswitch\":\n-                    // it seems that Shelly tends to break their own spec: T is the description and D is no longer\n-                    // included -> map D to sen.T and set CatchAll for T\n-                    sen.desc = sen.type;\n-                    sen.type = \"S\";\n-                    break;\n-                // Default: set no description\n-                // (there are no T values defined in the CoIoT spec)\n-                case \"tostate\":\n-                default:\n-                    sen.desc = \"\";\n-            }\n-        }\n-        return sen;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTYwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089604", "bodyText": "Apache commons", "author": "fwolter", "createdAt": "2020-08-16T09:32:59Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java", "diffHunk": "@@ -0,0 +1,364 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link ShellyCoIoTVersion1} implements the parsing for CoIoT version 1\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTVersion1 extends ShellyCoIoTProtocol implements ShellyCoIoTInterface {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTVersion1.class);\n+\n+    public ShellyCoIoTVersion1(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        super(thingName, thingHandler, blkMap, sensorMap);\n+    }\n+\n+    @Override\n+    public int getVersion() {\n+        return ShellyCoapJSonDTO.COIOT_VERSION_1;\n+    }\n+\n+    /**\n+     * Process CoIoT status update message. If a status update is received, but the device description has not been\n+     * received yet a GET is send to query device description.\n+     *\n+     * @param devId device id included in the status packet\n+     * @param payload CoAP payload (Json format), example: {\"G\":[[0,112,0]]}\n+     * @param serial Serial for this request. If this the the same as last serial\n+     *            the update was already sent and processed so this one gets\n+     *            ignored.\n+     */\n+    @Override\n+    public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+\n+        // first check the base implementation\n+        if (super.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n+            // process by the base class\n+            return true;\n+        }\n+\n+        // Process status information and convert into channel updates\n+        Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"t\": // Temperature +\n+                Double value = getDouble(s.value);\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"temperature\": // Sensor Temp\n+                        if (getString(getProfile().settings.temperatureUnits)\n+                                .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n+                            value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS).convert(getDouble(s.value))\n+                                    .doubleValue();\n+                        }\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n+                                toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                        break;\n+                    case \"temperature f\": // Device Temp -> ignore (we use C only)\n+                        break;\n+                    case \"temperature c\": // Device Tem\u00fc in C ++\n+                        // Device temperature\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP,\n+                                toQuantityType(value, DIGITS_NONE, SIUnits.CELSIUS));\n+                        break;\n+                    case \"external temperature f\": // Shelly 1/1PM external temp sensors\n+                        // ignore F, we use C only\n+                        break;\n+                    case \"external temperature c\": // Shelly 1/1PM external temp sensors\n+                    case \"external_temperature\":\n+                        int idx = getExtTempId(sen.id);\n+                        if (idx > 0) {\n+                            updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP + idx,\n+                                    toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                        } else {\n+                            logger.debug(\"{}: Unable to get extSensorId {} from {}/{}\", thingName, sen.id, sen.type,\n+                                    sen.desc);\n+                        }\n+                        break;\n+                    default:\n+                        logger.debug(\"{}: Unknown temperatur type: {}\", thingName, sen.desc);\n+                }\n+                break;\n+            case \"p\": // Power/Watt\n+                // 3EM uses 1-based meter IDs, other 0-based\n+                String mGroup = profile.numMeters == 1 ? CHANNEL_GROUP_METER\n+                        : CHANNEL_GROUP_METER + (profile.isEMeter ? sen.links : rIndex);\n+                updateChannel(updates, mGroup, CHANNEL_METER_CURRENTWATTS,\n+                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+                updateChannel(updates, mGroup, CHANNEL_LAST_UPDATE, getTimestamp());\n+                break;\n+            case \"s\" /* CatchAll */:\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"overtemp\":\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"energy counter 0 [w-min]\":\n+                        updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN1,\n+                                toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+                        break;\n+                    case \"energy counter 1 [w-min]\":\n+                    case \"energy counter 2 [w-min]\":\n+                        // we don't use them\n+                        break;\n+                    case \"energy counter total [w-h]\": // 3EM reports W/h\n+                    case \"energy counter total [w-min]\":\n+                        Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n+                        updateChannel(updates, rGroup, CHANNEL_METER_TOTALKWH,\n+                                toQuantityType(total, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n+                        break;\n+                    case \"voltage\":\n+                        updateChannel(updates, rGroup, CHANNEL_EMETER_VOLTAGE,\n+                                toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.VOLT));\n+                        break;\n+                    case \"current\":\n+                        updateChannel(updates, rGroup, CHANNEL_EMETER_CURRENT,\n+                                toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.AMPERE));\n+                        break;\n+                    case \"pf\":\n+                        updateChannel(updates, rGroup, CHANNEL_EMETER_PFACTOR, getDecimal(s.value));\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"input event\": // Shelly Button 1\n+                        handleInputEvent(sen, getString(s.valueStr), -1, updates);\n+                        break;\n+                    case \"input event counter\": // Shelly Button 1/ix3\n+                        handleInputEvent(sen, \"\", getInteger((int) s.value), updates);\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"tilt\": // DW with FW1.6.5+ //+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TILT,\n+                                toQuantityType(s.value, DIGITS_NONE, SmartHomeUnits.DEGREE_ANGLE));\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"temp\": // Shelly Bulb\n+                    case \"colortemperature\": // Shelly Duo\n+                        updateChannel(updates,\n+                                profile.inColor ? CHANNEL_GROUP_COLOR_CONTROL : CHANNEL_GROUP_WHITE_CONTROL,\n+                                CHANNEL_COLOR_TEMP,\n+                                ShellyColorUtils.toPercent((int) s.value, profile.minTemp, profile.maxTemp));\n+                        break;\n+                    case \"sensor state\": // Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_SSTATE, getStringType(s.valueStr));\n+                        break;\n+                    case \"alarm state\": // Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ALARM_STATE,\n+                                getStringType(s.valueStr));\n+                        break;\n+                    case \"self-test state\":// Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_SELFTTEST,\n+                                getStringType(s.valueStr));\n+                        break;\n+                    case \"concentration\":// Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_PPM, getDecimal(s.value));\n+                        break;\n+                    case \"sensorerror\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     *\n+     * Depending on the device type and firmware release there are significant bugs or incosistencies in the CoIoT\n+     * Device Description returned by the discovery request. Shelly is even not following it's own speicifcation. All of\n+     * that has been reported to Shelly and acknowledged. Firmware 1.6 brought significant improvements. However, the\n+     * old mapping stays in to support older firmware releases.\n+     *\n+     * @param sen Sensor description received from device\n+     * @return fixed Sensor description (sen)\n+     */\n+    @Override\n+    public CoIotDescrSen fixDescription(CoIotDescrSen sen, Map<String, CoIotDescrBlk> blkMap) {\n+        // Shelly1: reports null descr+type \"Switch\" -> map to S\n+        // Shelly1PM: reports null descr+type \"Overtemp\" -> map to O\n+        // Shelly1PM: reports null descr+type \"W\" -> add description\n+        // Shelly1PM: reports temp senmsors without desc -> add description\n+        // Shelly Dimmer: sensors are reported without descriptions -> map to S\n+        // SHelly Sense: multiple issues: Description should not be lower case, invalid type for Motion and Battery\n+        // Shelly Sense: Battery is reported with Desc \"battery\", but type \"H\" instead of \"B\"\n+        // Shelly Sense: Motion is reported with Desc \"battery\", but type \"H\" instead of \"B\"\n+        // Shelly Bulb: Colors are coded with Type=\"Red\" etc. rather than Type=\"S\" and color as Descr\n+        // Shelly RGBW2 is reporting Brightness, Power, VSwitch for each channel, but all with L=0\n+        if (sen.desc == null) {\n+            sen.desc = \"\";\n+        }\n+        String desc = sen.desc.toLowerCase();\n+\n+        // RGBW2 reports Power_0, Power_1, Power_2, Power_3; same for VSwitch and Brightness, all of them linkted to L:0\n+        // we break it up to Power with L:0, Power with L:1...\n+        if (desc.contains(\"_\") && (desc.contains(\"power\") || desc.contains(\"vswitch\") || desc.contains(\"brightness\"))) {\n+            String newDesc = StringUtils.substringBefore(sen.desc, \"_\");", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE2MTEwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471161100", "bodyText": "will be moved to next PR", "author": "markus7017", "createdAt": "2020-08-16T21:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java\ndeleted file mode 100644\nindex dedfd5c256..0000000000\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java\n+++ /dev/null\n\n@@ -1,364 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.shelly.internal.coap;\n-\n-import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n-import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n-import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n-import org.eclipse.smarthome.core.library.unit.SIUnits;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n-import org.eclipse.smarthome.core.types.State;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n-import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n-import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import tec.uom.se.unit.Units;\n-\n-/**\n- * The {@link ShellyCoIoTVersion1} implements the parsing for CoIoT version 1\n- *\n- * @author Markus Michels - Initial contribution\n- */\n-@NonNullByDefault\n-public class ShellyCoIoTVersion1 extends ShellyCoIoTProtocol implements ShellyCoIoTInterface {\n-    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTVersion1.class);\n-\n-    public ShellyCoIoTVersion1(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n-            Map<String, CoIotDescrSen> sensorMap) {\n-        super(thingName, thingHandler, blkMap, sensorMap);\n-    }\n-\n-    @Override\n-    public int getVersion() {\n-        return ShellyCoapJSonDTO.COIOT_VERSION_1;\n-    }\n-\n-    /**\n-     * Process CoIoT status update message. If a status update is received, but the device description has not been\n-     * received yet a GET is send to query device description.\n-     *\n-     * @param devId device id included in the status packet\n-     * @param payload CoAP payload (Json format), example: {\"G\":[[0,112,0]]}\n-     * @param serial Serial for this request. If this the the same as last serial\n-     *            the update was already sent and processed so this one gets\n-     *            ignored.\n-     */\n-    @Override\n-    public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n-            Map<String, State> updates) {\n-\n-        // first check the base implementation\n-        if (super.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n-            // process by the base class\n-            return true;\n-        }\n-\n-        // Process status information and convert into channel updates\n-        Integer rIndex = Integer.parseInt(sen.links) + 1;\n-        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n-                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n-        switch (sen.type.toLowerCase()) {\n-            case \"t\": // Temperature +\n-                Double value = getDouble(s.value);\n-                switch (sen.desc.toLowerCase()) {\n-                    case \"temperature\": // Sensor Temp\n-                        if (getString(getProfile().settings.temperatureUnits)\n-                                .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n-                            value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS).convert(getDouble(s.value))\n-                                    .doubleValue();\n-                        }\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n-                                toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                        break;\n-                    case \"temperature f\": // Device Temp -> ignore (we use C only)\n-                        break;\n-                    case \"temperature c\": // Device Tem\u00fc in C ++\n-                        // Device temperature\n-                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP,\n-                                toQuantityType(value, DIGITS_NONE, SIUnits.CELSIUS));\n-                        break;\n-                    case \"external temperature f\": // Shelly 1/1PM external temp sensors\n-                        // ignore F, we use C only\n-                        break;\n-                    case \"external temperature c\": // Shelly 1/1PM external temp sensors\n-                    case \"external_temperature\":\n-                        int idx = getExtTempId(sen.id);\n-                        if (idx > 0) {\n-                            updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP + idx,\n-                                    toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                        } else {\n-                            logger.debug(\"{}: Unable to get extSensorId {} from {}/{}\", thingName, sen.id, sen.type,\n-                                    sen.desc);\n-                        }\n-                        break;\n-                    default:\n-                        logger.debug(\"{}: Unknown temperatur type: {}\", thingName, sen.desc);\n-                }\n-                break;\n-            case \"p\": // Power/Watt\n-                // 3EM uses 1-based meter IDs, other 0-based\n-                String mGroup = profile.numMeters == 1 ? CHANNEL_GROUP_METER\n-                        : CHANNEL_GROUP_METER + (profile.isEMeter ? sen.links : rIndex);\n-                updateChannel(updates, mGroup, CHANNEL_METER_CURRENTWATTS,\n-                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                updateChannel(updates, mGroup, CHANNEL_LAST_UPDATE, getTimestamp());\n-                break;\n-            case \"s\" /* CatchAll */:\n-                switch (sen.desc.toLowerCase()) {\n-                    case \"overtemp\":\n-                        if (s.value == 1) {\n-                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n-                        }\n-                        break;\n-                    case \"energy counter 0 [w-min]\":\n-                        updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN1,\n-                                toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                        break;\n-                    case \"energy counter 1 [w-min]\":\n-                    case \"energy counter 2 [w-min]\":\n-                        // we don't use them\n-                        break;\n-                    case \"energy counter total [w-h]\": // 3EM reports W/h\n-                    case \"energy counter total [w-min]\":\n-                        Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n-                        updateChannel(updates, rGroup, CHANNEL_METER_TOTALKWH,\n-                                toQuantityType(total, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n-                        break;\n-                    case \"voltage\":\n-                        updateChannel(updates, rGroup, CHANNEL_EMETER_VOLTAGE,\n-                                toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.VOLT));\n-                        break;\n-                    case \"current\":\n-                        updateChannel(updates, rGroup, CHANNEL_EMETER_CURRENT,\n-                                toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.AMPERE));\n-                        break;\n-                    case \"pf\":\n-                        updateChannel(updates, rGroup, CHANNEL_EMETER_PFACTOR, getDecimal(s.value));\n-                        break;\n-                    case \"position\":\n-                        // work around: Roller reports 101% instead max 100\n-                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n-                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n-                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n-                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n-                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n-                        break;\n-                    case \"input event\": // Shelly Button 1\n-                        handleInputEvent(sen, getString(s.valueStr), -1, updates);\n-                        break;\n-                    case \"input event counter\": // Shelly Button 1/ix3\n-                        handleInputEvent(sen, \"\", getInteger((int) s.value), updates);\n-                        break;\n-                    case \"flood\":\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"tilt\": // DW with FW1.6.5+ //+\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TILT,\n-                                toQuantityType(s.value, DIGITS_NONE, SmartHomeUnits.DEGREE_ANGLE));\n-                        break;\n-                    case \"vibration\": // DW with FW1.6.5+\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"temp\": // Shelly Bulb\n-                    case \"colortemperature\": // Shelly Duo\n-                        updateChannel(updates,\n-                                profile.inColor ? CHANNEL_GROUP_COLOR_CONTROL : CHANNEL_GROUP_WHITE_CONTROL,\n-                                CHANNEL_COLOR_TEMP,\n-                                ShellyColorUtils.toPercent((int) s.value, profile.minTemp, profile.maxTemp));\n-                        break;\n-                    case \"sensor state\": // Shelly Gas\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_SSTATE, getStringType(s.valueStr));\n-                        break;\n-                    case \"alarm state\": // Shelly Gas\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ALARM_STATE,\n-                                getStringType(s.valueStr));\n-                        break;\n-                    case \"self-test state\":// Shelly Gas\n-                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_SELFTTEST,\n-                                getStringType(s.valueStr));\n-                        break;\n-                    case \"concentration\":// Shelly Gas\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_PPM, getDecimal(s.value));\n-                        break;\n-                    case \"sensorerror\":\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n-                        break;\n-                    default:\n-                        // Unknown\n-                        return false;\n-                }\n-                break;\n-\n-            default:\n-                // Unknown type\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     *\n-     * Depending on the device type and firmware release there are significant bugs or incosistencies in the CoIoT\n-     * Device Description returned by the discovery request. Shelly is even not following it's own speicifcation. All of\n-     * that has been reported to Shelly and acknowledged. Firmware 1.6 brought significant improvements. However, the\n-     * old mapping stays in to support older firmware releases.\n-     *\n-     * @param sen Sensor description received from device\n-     * @return fixed Sensor description (sen)\n-     */\n-    @Override\n-    public CoIotDescrSen fixDescription(CoIotDescrSen sen, Map<String, CoIotDescrBlk> blkMap) {\n-        // Shelly1: reports null descr+type \"Switch\" -> map to S\n-        // Shelly1PM: reports null descr+type \"Overtemp\" -> map to O\n-        // Shelly1PM: reports null descr+type \"W\" -> add description\n-        // Shelly1PM: reports temp senmsors without desc -> add description\n-        // Shelly Dimmer: sensors are reported without descriptions -> map to S\n-        // SHelly Sense: multiple issues: Description should not be lower case, invalid type for Motion and Battery\n-        // Shelly Sense: Battery is reported with Desc \"battery\", but type \"H\" instead of \"B\"\n-        // Shelly Sense: Motion is reported with Desc \"battery\", but type \"H\" instead of \"B\"\n-        // Shelly Bulb: Colors are coded with Type=\"Red\" etc. rather than Type=\"S\" and color as Descr\n-        // Shelly RGBW2 is reporting Brightness, Power, VSwitch for each channel, but all with L=0\n-        if (sen.desc == null) {\n-            sen.desc = \"\";\n-        }\n-        String desc = sen.desc.toLowerCase();\n-\n-        // RGBW2 reports Power_0, Power_1, Power_2, Power_3; same for VSwitch and Brightness, all of them linkted to L:0\n-        // we break it up to Power with L:0, Power with L:1...\n-        if (desc.contains(\"_\") && (desc.contains(\"power\") || desc.contains(\"vswitch\") || desc.contains(\"brightness\"))) {\n-            String newDesc = StringUtils.substringBefore(sen.desc, \"_\");\n-            String newLink = StringUtils.substringAfter(sen.desc, \"_\");\n-            sen.desc = newDesc;\n-            sen.links = newLink;\n-            if (!blkMap.containsKey(sen.links)) {\n-                // auto-insert a matching blk entry\n-                CoIotDescrBlk blk = new CoIotDescrBlk();\n-                CoIotDescrBlk blk0 = blkMap.get(\"0\"); // blk 0 is always there\n-                blk.id = sen.links;\n-                blk.desc = blk0.desc + \"_\" + blk.id;\n-                blkMap.put(blk.id, blk);\n-            }\n-        }\n-\n-        switch (sen.type.toLowerCase()) {\n-            case \"w\": // old devices/firmware releases use \"W\", new ones \"P\"\n-                sen.type = \"P\";\n-                sen.desc = \"Power\";\n-                break;\n-            case \"tc\":\n-                sen.type = \"T\";\n-                sen.desc = \"Temperature C\";\n-                break;\n-            case \"tf\":\n-                sen.type = \"T\";\n-                sen.desc = \"Temperature F\";\n-                break;\n-            case \"overtemp\":\n-                sen.type = \"S\";\n-                sen.desc = \"Overtemp\";\n-                break;\n-            case \"relay0\":\n-            case \"switch\":\n-            case \"vswitch\":\n-                sen.type = \"S\";\n-                sen.desc = \"State\";\n-                break;\n-        }\n-\n-        switch (sen.desc.toLowerCase()) {\n-            case \"motion\": // fix acc to spec it's T=M\n-                sen.type = \"M\";\n-                sen.desc = \"Motion\";\n-                break;\n-            case \"battery\": // fix: type is B not H\n-                sen.type = \"B\";\n-                sen.desc = \"Battery\";\n-                break;\n-            case \"overtemp\":\n-                sen.type = \"S\";\n-                sen.desc = \"Overtemp\";\n-                break;\n-            case \"relay0\":\n-            case \"switch\":\n-            case \"vswitch\":\n-                sen.type = \"S\";\n-                sen.desc = \"State\";\n-                break;\n-            case \"e cnt 0 [w-min]\": // 4 Pro\n-            case \"e cnt 1 [w-min]\":\n-            case \"e cnt 2 [w-min]\":\n-            case \"e cnt total [w-min]\": // 4 Pro\n-                sen.desc = sen.desc.toLowerCase().replace(\"e cnt\", \"energy counter\");\n-                break;\n-\n-        }\n-\n-        if (sen.desc.isEmpty()) {\n-            switch (sen.type.toLowerCase()) {\n-                case \"p\":\n-                    sen.desc = \"Power\";\n-                    break;\n-                case \"T\":\n-                    sen.desc = \"Temperature\";\n-                    break;\n-                case \"input\":\n-                    sen.type = \"S\";\n-                    sen.desc = \"Input\";\n-                    break;\n-                case \"output\":\n-                    sen.type = \"S\";\n-                    sen.desc = \"Output\";\n-                    break;\n-                case \"brightness\":\n-                    sen.type = \"S\";\n-                    sen.desc = \"Brightness\";\n-                    break;\n-                case \"red\":\n-                case \"green\":\n-                case \"blue\":\n-                case \"white\":\n-                case \"gain\":\n-                case \"temp\": // Bulb: Color temperature\n-                    sen.desc = sen.type;\n-                    sen.type = \"S\";\n-                    break;\n-                case \"vswitch\":\n-                    // it seems that Shelly tends to break their own spec: T is the description and D is no longer\n-                    // included -> map D to sen.T and set CatchAll for T\n-                    sen.desc = sen.type;\n-                    sen.type = \"S\";\n-                    break;\n-                // Default: set no description\n-                // (there are no T values defined in the CoIoT spec)\n-                case \"tostate\":\n-                default:\n-                    sen.desc = \"\";\n-            }\n-        }\n-        return sen;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTg0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089848", "bodyText": "Can you specify the concrete type you want to catch here?", "author": "fwolter", "createdAt": "2020-08-16T09:35:44Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -229,7 +235,7 @@ public void processResponse(@Nullable Response response) {\n                 reqStatus = sendRequest(reqStatus, config.deviceIp, COLOIT_URI_DEVSTATUS, Type.NON);\n                 discovering = true;\n             }\n-        } catch (IllegalArgumentException | NullPointerException e) {\n+        } catch (RuntimeException e) {", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTg1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135853", "bodyText": "change reverted to IllegalArgumentException | NullPointerException e", "author": "markus7017", "createdAt": "2020-08-16T17:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0OTczMA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471149730", "bodyText": "I'd like it very much if you'd refactor this to not catch a NPE, in a follow-up PR.", "author": "fwolter", "createdAt": "2020-08-16T19:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\nindex c485589556..3a9fa00b1e 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\n\n@@ -235,7 +234,7 @@ public class ShellyCoapHandler implements ShellyCoapListener {\n                 reqStatus = sendRequest(reqStatus, config.deviceIp, COLOIT_URI_DEVSTATUS, Type.NON);\n                 discovering = true;\n             }\n-        } catch (RuntimeException e) {\n+        } catch (IllegalArgumentException | NullPointerException | JsonSyntaxException e) {\n             logger.debug(\"{}: Unable to process CoIoT Message for payload={}\", thingName, payload, e);\n             resetSerial();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTk4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089981", "bodyText": "What type of exception do you expect here? Can you specify the concrete type?", "author": "fwolter", "createdAt": "2020-08-16T09:37:06Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -248,59 +254,88 @@ private void handleDeviceDescription(String devId, String payload) {\n         // Device description: payload = StringUtils.substringBefore(payload, \"}]}]}\") + \"}]}]}\";\n         logger.debug(\"{}: CoIoT Device Description for {}: {}\", thingName, devId, payload);\n \n-        // Decode Json\n-        CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n-\n-        int i;\n-        for (i = 0; i < descr.blk.size(); i++) {\n-            CoIotDescrBlk blk = descr.blk.get(i);\n-            logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n-            if (!blockMap.containsKey(blk.id)) {\n-                blockMap.put(blk.id, blk);\n-            } else {\n-                blockMap.replace(blk.id, blk);\n+        try {\n+            boolean valid = true;\n+\n+            // Decode Json\n+            CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n+            for (int i = 0; i < descr.blk.size(); i++) {\n+                CoIotDescrBlk blk = descr.blk.get(i);\n+                logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n+                if (!blkMap.containsKey(blk.id)) {\n+                    blkMap.put(blk.id, blk);\n+                } else {\n+                    blkMap.replace(blk.id, blk);\n+                }\n+                if ((blk.type != null) && !blk.type.isEmpty()) {\n+                    // in fact it is a sen entry - that's vioaling the Spec\n+                    logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id,\n+                            blk.desc);\n+                    CoIotDescrSen sen = new CoIotDescrSen();\n+                    sen.id = blk.id;\n+                    sen.desc = blk.desc;\n+                    sen.type = blk.type;\n+                    sen.range = blk.range;\n+                    sen.links = blk.links;\n+                    valid &= addSensor(sen);\n+                }\n             }\n-            if ((blk.type != null) && !blk.type.isEmpty()) {\n-                // in fact it is a sen entry - that's vioaling the Spec\n-                logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id, blk.desc);\n-                CoIotDescrSen sen = new CoIotDescrSen();\n-                sen.id = blk.id;\n-                sen.desc = blk.desc;\n-                sen.type = blk.type;\n-                sen.range = blk.range;\n-                sen.links = blk.links;\n-                addSensor(sen);\n+\n+            // Save to thing properties\n+            thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n+\n+            logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n+            if (descr.sen != null) {\n+                for (int i = 0; i < descr.sen.size(); i++) {\n+                    valid &= addSensor(descr.sen.get(i));\n+                }\n             }\n-        }\n-        logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n-        if (descr.sen != null) {\n-            for (i = 0; i < descr.sen.size(); i++) {\n-                addSensor(descr.sen.get(i));\n+\n+            if (!valid) {\n+                logger.debug(\n+                        \"{}: Incompatible device description detected for CoIoT version {} (id length mismatch), discarding!\",\n+                        thingName, coiot.getVersion());\n+                thingHandler.updateProperties(PROPERTY_COAP_DESCR, \"\");\n+                discover();\n+                return;\n             }\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload);\n+        } catch (RuntimeException e) {// incl JsonSyntaxException", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDIwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100203", "bodyText": "changed to NullPointerException | IllegalArgumentException", "author": "markus7017", "createdAt": "2020-08-22T15:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\nindex c485589556..3a9fa00b1e 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\n\n@@ -254,56 +253,39 @@ public class ShellyCoapHandler implements ShellyCoapListener {\n         // Device description: payload = StringUtils.substringBefore(payload, \"}]}]}\") + \"}]}]}\";\n         logger.debug(\"{}: CoIoT Device Description for {}: {}\", thingName, devId, payload);\n \n-        try {\n-            boolean valid = true;\n-\n-            // Decode Json\n-            CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n-            for (int i = 0; i < descr.blk.size(); i++) {\n-                CoIotDescrBlk blk = descr.blk.get(i);\n-                logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n-                if (!blkMap.containsKey(blk.id)) {\n-                    blkMap.put(blk.id, blk);\n-                } else {\n-                    blkMap.replace(blk.id, blk);\n-                }\n-                if ((blk.type != null) && !blk.type.isEmpty()) {\n-                    // in fact it is a sen entry - that's vioaling the Spec\n-                    logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id,\n-                            blk.desc);\n-                    CoIotDescrSen sen = new CoIotDescrSen();\n-                    sen.id = blk.id;\n-                    sen.desc = blk.desc;\n-                    sen.type = blk.type;\n-                    sen.range = blk.range;\n-                    sen.links = blk.links;\n-                    valid &= addSensor(sen);\n-                }\n-            }\n+        // Decode Json\n+        CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n \n-            // Save to thing properties\n-            thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n-\n-            logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n-            if (descr.sen != null) {\n-                for (int i = 0; i < descr.sen.size(); i++) {\n-                    valid &= addSensor(descr.sen.get(i));\n-                }\n+        int i;\n+        for (i = 0; i < descr.blk.size(); i++) {\n+            CoIotDescrBlk blk = descr.blk.get(i);\n+            logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n+            if (!blockMap.containsKey(blk.id)) {\n+                blockMap.put(blk.id, blk);\n+            } else {\n+                blockMap.replace(blk.id, blk);\n             }\n-\n-            if (!valid) {\n-                logger.debug(\n-                        \"{}: Incompatible device description detected for CoIoT version {} (id length mismatch), discarding!\",\n-                        thingName, coiot.getVersion());\n-                thingHandler.updateProperties(PROPERTY_COAP_DESCR, \"\");\n-                discover();\n-                return;\n+            if ((blk.type != null) && !blk.type.isEmpty()) {\n+                // in fact it is a sen entry - that's vioaling the Spec\n+                logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id, blk.desc);\n+                CoIotDescrSen sen = new CoIotDescrSen();\n+                sen.id = blk.id;\n+                sen.desc = blk.desc;\n+                sen.type = blk.type;\n+                sen.range = blk.range;\n+                sen.links = blk.links;\n+                addSensor(sen);\n+            }\n+        }\n+        logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n+        if (descr.sen != null) {\n+            for (i = 0; i < descr.sen.size(); i++) {\n+                addSensor(descr.sen.get(i));\n             }\n-        } catch (JsonSyntaxException e) {\n-            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload);\n-        } catch (RuntimeException e) {// incl JsonSyntaxException\n-            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload, e);\n         }\n+\n+        // Save to thing properties\n+        thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDA4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090086", "bodyText": "It's bad practice to use exceptions for the normal program flow. Better check if an element exists beforehand.", "author": "fwolter", "createdAt": "2020-08-16T09:38:35Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -248,59 +254,88 @@ private void handleDeviceDescription(String devId, String payload) {\n         // Device description: payload = StringUtils.substringBefore(payload, \"}]}]}\") + \"}]}]}\";\n         logger.debug(\"{}: CoIoT Device Description for {}: {}\", thingName, devId, payload);\n \n-        // Decode Json\n-        CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n-\n-        int i;\n-        for (i = 0; i < descr.blk.size(); i++) {\n-            CoIotDescrBlk blk = descr.blk.get(i);\n-            logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n-            if (!blockMap.containsKey(blk.id)) {\n-                blockMap.put(blk.id, blk);\n-            } else {\n-                blockMap.replace(blk.id, blk);\n+        try {\n+            boolean valid = true;\n+\n+            // Decode Json\n+            CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n+            for (int i = 0; i < descr.blk.size(); i++) {\n+                CoIotDescrBlk blk = descr.blk.get(i);\n+                logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n+                if (!blkMap.containsKey(blk.id)) {\n+                    blkMap.put(blk.id, blk);\n+                } else {\n+                    blkMap.replace(blk.id, blk);\n+                }\n+                if ((blk.type != null) && !blk.type.isEmpty()) {\n+                    // in fact it is a sen entry - that's vioaling the Spec\n+                    logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id,\n+                            blk.desc);\n+                    CoIotDescrSen sen = new CoIotDescrSen();\n+                    sen.id = blk.id;\n+                    sen.desc = blk.desc;\n+                    sen.type = blk.type;\n+                    sen.range = blk.range;\n+                    sen.links = blk.links;\n+                    valid &= addSensor(sen);\n+                }\n             }\n-            if ((blk.type != null) && !blk.type.isEmpty()) {\n-                // in fact it is a sen entry - that's vioaling the Spec\n-                logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id, blk.desc);\n-                CoIotDescrSen sen = new CoIotDescrSen();\n-                sen.id = blk.id;\n-                sen.desc = blk.desc;\n-                sen.type = blk.type;\n-                sen.range = blk.range;\n-                sen.links = blk.links;\n-                addSensor(sen);\n+\n+            // Save to thing properties\n+            thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n+\n+            logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n+            if (descr.sen != null) {\n+                for (int i = 0; i < descr.sen.size(); i++) {\n+                    valid &= addSensor(descr.sen.get(i));\n+                }\n             }\n-        }\n-        logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n-        if (descr.sen != null) {\n-            for (i = 0; i < descr.sen.size(); i++) {\n-                addSensor(descr.sen.get(i));\n+\n+            if (!valid) {\n+                logger.debug(\n+                        \"{}: Incompatible device description detected for CoIoT version {} (id length mismatch), discarding!\",\n+                        thingName, coiot.getVersion());\n+                thingHandler.updateProperties(PROPERTY_COAP_DESCR, \"\");\n+                discover();\n+                return;\n             }\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload);\n+        } catch (RuntimeException e) {// incl JsonSyntaxException\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload, e);\n         }\n-\n-        // Save to thing properties\n-        thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n     }\n \n     /**\n      * Add a new sensor to the sensor table\n      *\n      * @param sen CoIotDescrSen of the sensor\n      */\n-    private synchronized void addSensor(CoIotDescrSen sen) {\n+    private synchronized boolean addSensor(CoIotDescrSen sen) {\n         logger.debug(\"{}:    id {}: {}, Type={}, Range={}, Links={}\", thingName, sen.id, sen.desc, sen.type, sen.range,\n                 sen.links);\n+        // CoIoT version 2 changes from 3 digit IDs to 4 digit IDs\n+        // We need to make sure that the persisted device description matches,\n+        // otherwise the stored one is discarded and a new discovery is triggered\n+        // This happens on firmware up/downgrades (version 1.8 brings CoIoT v2 with 4 digit IDs)\n+        int vers = coiot.getVersion();\n+        if (((vers == COIOT_VERSION_1) && (sen.id.length() > 3))\n+                || ((vers >= COIOT_VERSION_2) && (sen.id.length() < 4))) {\n+            return false;\n+        }\n+\n         try {\n-            CoIotDescrSen fixed = fixDescription(sen);\n+            CoIotDescrSen fixed = coiot.fixDescription(sen, blkMap);\n             if (!sensorMap.containsKey(fixed.id)) {\n                 sensorMap.put(sen.id, fixed);\n             } else {\n                 sensorMap.replace(sen.id, fixed);\n             }\n-        } catch (NullPointerException e) { // depending on firmware release the CoAP device description is buggy\n+        } catch (RuntimeException e) { // depending on firmware release the CoAP device description is buggy", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjAwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471136005", "bodyText": "I already do my best, but depending on the firmware release there are various formatting issues, inconsisdent naming, syntax errors etc. (e.g. see fixDescription() for CoAP 1). The intention: If parse of one sensor field fails for such a reason try at least to process the other ones", "author": "markus7017", "createdAt": "2020-08-16T17:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0OTkwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471149909", "bodyText": "This might be a bit of boiler plate code, checking for null, but in any case it'd be more elegant than catching a NPE.", "author": "fwolter", "createdAt": "2020-08-16T19:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDMyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100327", "bodyText": "again I do my best to provent NPEs, but there are a lot of bug in old firmware releases and I want try to process as much sensor data as possible, NullPointerException | IllegalArgumentException", "author": "markus7017", "createdAt": "2020-08-22T15:14:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\nindex c485589556..3a9fa00b1e 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\n\n@@ -254,56 +253,39 @@ public class ShellyCoapHandler implements ShellyCoapListener {\n         // Device description: payload = StringUtils.substringBefore(payload, \"}]}]}\") + \"}]}]}\";\n         logger.debug(\"{}: CoIoT Device Description for {}: {}\", thingName, devId, payload);\n \n-        try {\n-            boolean valid = true;\n-\n-            // Decode Json\n-            CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n-            for (int i = 0; i < descr.blk.size(); i++) {\n-                CoIotDescrBlk blk = descr.blk.get(i);\n-                logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n-                if (!blkMap.containsKey(blk.id)) {\n-                    blkMap.put(blk.id, blk);\n-                } else {\n-                    blkMap.replace(blk.id, blk);\n-                }\n-                if ((blk.type != null) && !blk.type.isEmpty()) {\n-                    // in fact it is a sen entry - that's vioaling the Spec\n-                    logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id,\n-                            blk.desc);\n-                    CoIotDescrSen sen = new CoIotDescrSen();\n-                    sen.id = blk.id;\n-                    sen.desc = blk.desc;\n-                    sen.type = blk.type;\n-                    sen.range = blk.range;\n-                    sen.links = blk.links;\n-                    valid &= addSensor(sen);\n-                }\n-            }\n+        // Decode Json\n+        CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n \n-            // Save to thing properties\n-            thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n-\n-            logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n-            if (descr.sen != null) {\n-                for (int i = 0; i < descr.sen.size(); i++) {\n-                    valid &= addSensor(descr.sen.get(i));\n-                }\n+        int i;\n+        for (i = 0; i < descr.blk.size(); i++) {\n+            CoIotDescrBlk blk = descr.blk.get(i);\n+            logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n+            if (!blockMap.containsKey(blk.id)) {\n+                blockMap.put(blk.id, blk);\n+            } else {\n+                blockMap.replace(blk.id, blk);\n             }\n-\n-            if (!valid) {\n-                logger.debug(\n-                        \"{}: Incompatible device description detected for CoIoT version {} (id length mismatch), discarding!\",\n-                        thingName, coiot.getVersion());\n-                thingHandler.updateProperties(PROPERTY_COAP_DESCR, \"\");\n-                discover();\n-                return;\n+            if ((blk.type != null) && !blk.type.isEmpty()) {\n+                // in fact it is a sen entry - that's vioaling the Spec\n+                logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id, blk.desc);\n+                CoIotDescrSen sen = new CoIotDescrSen();\n+                sen.id = blk.id;\n+                sen.desc = blk.desc;\n+                sen.type = blk.type;\n+                sen.range = blk.range;\n+                sen.links = blk.links;\n+                addSensor(sen);\n+            }\n+        }\n+        logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n+        if (descr.sen != null) {\n+            for (i = 0; i < descr.sen.size(); i++) {\n+                addSensor(descr.sen.get(i));\n             }\n-        } catch (JsonSyntaxException e) {\n-            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload);\n-        } catch (RuntimeException e) {// incl JsonSyntaxException\n-            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload, e);\n         }\n+\n+        // Save to thing properties\n+        thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDExMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090111", "bodyText": "See above and below.", "author": "fwolter", "createdAt": "2020-08-16T09:38:56Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -353,195 +386,25 @@ private void handleStatusUpdate(String devId, String payload, int serial) {\n                 }\n                 CoIotDescrSen sen = sensorMap.get(s.id);\n                 // find matching sensor definition from device description, use the Link ID as index\n-                sen = fixDescription(sen);\n-                if (!blockMap.containsKey(sen.links)) {\n+                sen = coiot.fixDescription(sen, blkMap);\n+                if (!blkMap.containsKey(sen.links)) {\n                     logger.debug(\"{}: Invalid CoAP description: sen.links({}\", thingName, getString(sen.links));\n                     continue;\n                 }\n \n-                if (!blockMap.containsKey(sen.links)) {\n+                if (!blkMap.containsKey(sen.links)) {\n                     logger.debug(\"{}: Unable to find BLK for link {} from sen.id={}\", thingName, sen.links, sen.id);\n                     continue;\n                 }\n-                CoIotDescrBlk element = blockMap.get(sen.links);\n+                CoIotDescrBlk element = blkMap.get(sen.links);\n                 logger.trace(\"{}:  Sensor value[{}]: id={}, Value={} ({}, Type={}, Range={}, Link={}: {})\", thingName,\n                         i, s.id, s.value, sen.desc, sen.type, sen.range, sen.links, element.desc);\n \n-                // Process status information and convert into channel updates\n-                Integer rIndex = Integer.parseInt(sen.links) + 1;\n-                String rGroup = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n-                        : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n-\n-                switch (sen.type.toLowerCase()) {\n-                    case \"b\" /* BatteryLevel */:\n-                        updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n-                                toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n-                        break;\n-                    case \"t\" /* Temperature */:\n-                        Double value = getDouble(s.value);\n-                        switch (sen.desc.toLowerCase()) {\n-                            case \"temperature\": // Sensor Temp\n-                                if (getString(profile.settings.temperatureUnits)\n-                                        .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n-                                    value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS)\n-                                            .convert(getDouble(s.value)).doubleValue();\n-                                }\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n-                                        toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                                break;\n-                            case \"temperature f\": // Device Temp -> ignore (we use C only)\n-                                break;\n-                            case \"temperature c\": // Device Tem\u00fc in C\n-                                // Device temperature\n-                                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP,\n-                                        toQuantityType(value, DIGITS_NONE, SIUnits.CELSIUS));\n-                                break;\n-                            case \"external temperature f\": // Shelly 1/1PM external temp sensors\n-                                // ignore F, we use C only\n-                                break;\n-                            case \"external temperature c\": // Shelly 1/1PM external temp sensors\n-                            case \"external_temperature\":\n-                                int idx = getExtTempId(sen.id);\n-                                if (idx > 0) {\n-                                    updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP + idx,\n-                                            toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                                } else {\n-                                    logger.debug(\"{}: Unable to get extSensorId {} from {}/{}, payload={}\", thingName,\n-                                            sen.id, sen.type, sen.desc, payload);\n-                                }\n-                                break;\n-                            default:\n-                                logger.debug(\"{}: Unknown temperatur type: {}\", thingName, sen.desc);\n-                        }\n-                        break;\n-                    case \"h\" /* Humidity */:\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n-                                toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n-                        break;\n-                    case \"m\" /* Motion */:\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"l\" /* Luminosity */:\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n-                                toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n-                        break;\n-                    case \"p\" /* Power/Watt */:\n-                        String mGroup = profile.numMeters == 1 ? CHANNEL_GROUP_METER : CHANNEL_GROUP_METER + rIndex;\n-                        updateChannel(updates, mGroup, CHANNEL_METER_CURRENTWATTS,\n-                                toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                        updateChannel(updates, mGroup, CHANNEL_LAST_UPDATE, getTimestamp());\n-                        break;\n-                    case \"s\" /* CatchAll */:\n-                        String senValue = sen.desc.toLowerCase();\n-                        switch (senValue) {\n-                            case \"state\":\n-                            case \"output\":\n-                                updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n-                                break;\n-                            case \"brightness\":\n-                                // already handled by state/output\n-                                break;\n-                            case \"overtemp\":\n-                                if (s.value == 1) {\n-                                    thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n-                                }\n-                                break;\n-                            case \"energy counter 0 [w-min]\":\n-                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN1,\n-                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                                break;\n-                            case \"energy counter 1 [w-min]\":\n-                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN2,\n-                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                                break;\n-                            case \"energy counter 2 [w-min]\":\n-                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN3,\n-                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                                break;\n-                            case \"energy counter total [w-h]\": // EM3 reports W/h\n-                            case \"energy counter total [w-min]\":\n-                                Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n-                                updateChannel(updates, rGroup, CHANNEL_METER_TOTALKWH,\n-                                        toQuantityType(total, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n-                                break;\n-                            case \"voltage\":\n-                                updateChannel(updates, rGroup, CHANNEL_EMETER_VOLTAGE,\n-                                        toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.VOLT));\n-                                break;\n-                            case \"current\":\n-                                updateChannel(updates, rGroup, CHANNEL_EMETER_CURRENT,\n-                                        toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.AMPERE));\n-                                break;\n-                            case \"pf\":\n-                                updateChannel(updates, rGroup, CHANNEL_EMETER_PFACTOR, getDecimal(s.value));\n-                                break;\n-                            case \"position\":\n-                                // work around: Roller reports 101% instead max 100\n-                                double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n-                                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n-                                        toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n-                                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n-                                        toQuantityType(pos, SmartHomeUnits.PERCENT));\n-                                break;\n-                            case \"input\":\n-                                handleInput(sen, s, rGroup, updates);\n-                                break;\n-                            case \"flood\":\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n-                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                                break;\n-                            case \"tilt\": // DW with FW1.6.5+\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TILT,\n-                                        toQuantityType(s.value, DIGITS_NONE, SmartHomeUnits.DEGREE_ANGLE));\n-                                break;\n-                            case \"vibration\": // DW with FW1.6.5+\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n-                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                                break;\n-                            case \"charger\": // Sense\n-                                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n-                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                                break;\n-                            // RGBW2/Bulb\n-                            case \"red\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"green\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"blue\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"white\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"gain\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n-                                        ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n-                                break;\n-                            case \"temp\": // Shelly Bulb\n-                            case \"colortemperature\": // Shelly Duo\n-                                updateChannel(updates,\n-                                        profile.inColor ? CHANNEL_GROUP_COLOR_CONTROL : CHANNEL_GROUP_WHITE_CONTROL,\n-                                        CHANNEL_COLOR_TEMP,\n-                                        ShellyColorUtils.toPercent((int) s.value, profile.minTemp, profile.maxTemp));\n-                                break;\n-                            default:\n-                                logger.debug(\n-                                        \"{}: Update for unknown sensor with id {}, type {}/{} received, value={}, payload={}\",\n-                                        thingName, sen.id, sen.type, sen.desc, s.value, payload);\n-                        }\n-                        break;\n-                    default:\n-                        logger.debug(\"{}: Sensor data for id {}, type {}/{} not processed, value={}; payload={}\",\n-                                thingName, sen.id, sen.type, sen.desc, s.value, payload);\n+                if (!coiot.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n+                    logger.debug(\"{}: CoIoT data for id {}, type {}/{} not processed, value={}; payload={}\", thingName,\n+                            sen.id, sen.type, sen.desc, s.value, payload);\n                 }\n-            } catch (IllegalArgumentException | NullPointerException | ArrayIndexOutOfBoundsException e) {\n+            } catch (RuntimeException e) {", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDMzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100332", "bodyText": "NullPointerException | IllegalArgumentException", "author": "markus7017", "createdAt": "2020-08-22T15:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\nindex c485589556..3a9fa00b1e 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java\n\n@@ -386,25 +358,221 @@ public class ShellyCoapHandler implements ShellyCoapListener {\n                 }\n                 CoIotDescrSen sen = sensorMap.get(s.id);\n                 // find matching sensor definition from device description, use the Link ID as index\n-                sen = coiot.fixDescription(sen, blkMap);\n-                if (!blkMap.containsKey(sen.links)) {\n+                sen = fixDescription(sen);\n+                if (!blockMap.containsKey(sen.links)) {\n                     logger.debug(\"{}: Invalid CoAP description: sen.links({}\", thingName, getString(sen.links));\n                     continue;\n                 }\n \n-                if (!blkMap.containsKey(sen.links)) {\n+                if (!blockMap.containsKey(sen.links)) {\n                     logger.debug(\"{}: Unable to find BLK for link {} from sen.id={}\", thingName, sen.links, sen.id);\n                     continue;\n                 }\n-                CoIotDescrBlk element = blkMap.get(sen.links);\n+                CoIotDescrBlk element = blockMap.get(sen.links);\n                 logger.trace(\"{}:  Sensor value[{}]: id={}, Value={} ({}, Type={}, Range={}, Link={}: {})\", thingName,\n                         i, s.id, s.value, sen.desc, sen.type, sen.range, sen.links, element.desc);\n \n-                if (!coiot.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n-                    logger.debug(\"{}: CoIoT data for id {}, type {}/{} not processed, value={}; payload={}\", thingName,\n-                            sen.id, sen.type, sen.desc, s.value, payload);\n+                // Process status information and convert into channel updates\n+                Integer rIndex = Integer.parseInt(sen.links) + 1;\n+                String rGroup = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                        : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+\n+                switch (sen.type.toLowerCase()) {\n+                    case \"b\" /* BatteryLevel */:\n+                        updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n+                                toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"t\" /* Temperature */:\n+                        Double value = getDouble(s.value);\n+                        switch (sen.desc.toLowerCase()) {\n+                            case \"temperature\": // Sensor Temp\n+                                if (getString(profile.settings.temperatureUnits)\n+                                        .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n+                                    value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS)\n+                                            .convert(getDouble(s.value)).doubleValue();\n+                                }\n+                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n+                                        toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                                break;\n+                            case \"temperature f\": // Device Temp -> ignore (we use C only)\n+                                break;\n+                            case \"temperature c\": // Device Tem\u00fc in C\n+                                // Device temperature\n+                                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP,\n+                                        toQuantityType(value, DIGITS_NONE, SIUnits.CELSIUS));\n+                                break;\n+                            case \"external temperature f\": // Shelly 1/1PM external temp sensors\n+                                // ignore F, we use C only\n+                                break;\n+                            case \"external temperature c\": // Shelly 1/1PM external temp sensors\n+                            case \"external_temperature\":\n+                                int idx = getExtTempId(sen.id);\n+                                if (idx > 0) {\n+                                    updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP + idx,\n+                                            toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                                } else {\n+                                    logger.debug(\"{}: Unable to get extSensorId {} from {}/{}, payload={}\", thingName,\n+                                            sen.id, sen.type, sen.desc, payload);\n+                                }\n+                                break;\n+                            default:\n+                                logger.debug(\"{}: Unknown temperatur type: {}\", thingName, sen.desc);\n+                        }\n+                        break;\n+                    case \"h\" /* Humidity */:\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n+                                toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"m\" /* Motion */:\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"l\" /* Luminosity */:\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n+                                toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n+                        break;\n+                    case \"p\" /* Power/Watt */:\n+                        String mGroup = profile.numMeters == 1 ? CHANNEL_GROUP_METER : CHANNEL_GROUP_METER + rIndex;\n+                        updateChannel(updates, mGroup, CHANNEL_METER_CURRENTWATTS,\n+                                toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+                        updateChannel(updates, mGroup, CHANNEL_LAST_UPDATE, getTimestamp());\n+                        break;\n+                    case \"s\" /* CatchAll */:\n+                        String senValue = sen.desc.toLowerCase();\n+                        switch (senValue) {\n+                            case \"state\":\n+                            case \"output\":\n+                                updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n+                                break;\n+                            case \"brightness\":\n+                                // already handled by state/output\n+                                break;\n+                            case \"overtemp\":\n+                                if (s.value == 1) {\n+                                    thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                                }\n+                                break;\n+                            case \"energy counter 0 [w-min]\":\n+                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN1,\n+                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+                                break;\n+                            case \"energy counter 1 [w-min]\":\n+                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN2,\n+                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+                                break;\n+                            case \"energy counter 2 [w-min]\":\n+                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN3,\n+                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+                                break;\n+                            case \"energy counter total [w-h]\": // EM3 reports W/h\n+                            case \"energy counter total [w-min]\":\n+                                Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n+                                updateChannel(updates, rGroup, CHANNEL_METER_TOTALKWH,\n+                                        toQuantityType(total, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n+                                break;\n+                            case \"voltage\":\n+                                updateChannel(updates, rGroup, CHANNEL_EMETER_VOLTAGE,\n+                                        toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.VOLT));\n+                                break;\n+                            case \"current\":\n+                                updateChannel(updates, rGroup, CHANNEL_EMETER_CURRENT,\n+                                        toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.AMPERE));\n+                                break;\n+                            case \"pf\":\n+                                updateChannel(updates, rGroup, CHANNEL_EMETER_PFACTOR, getDecimal(s.value));\n+                                break;\n+                            case \"position\":\n+                                // work around: Roller reports 101% instead max 100\n+                                double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                        toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                        toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                                break;\n+                            case \"input\":\n+                                handleInput(sen, s, rGroup, updates);\n+                                break;\n+                            case \"input event\": // Shelly Button 1\n+                                String type = getString(s.valueStr);\n+                                updateChannel(updates, CHANNEL_GROUP_STATUS, CHANNEL_STATUS_EVENTTYPE,\n+                                        getStringType(type));\n+                                thingHandler.triggerChannel(CHANNEL_GROUP_STATUS, CHANNEL_BUTTON_TRIGGER,\n+                                        mapButtonEvent(type));\n+                                break;\n+                            case \"input event counter\": // Shelly Button 1\n+                                updateChannel(updates, CHANNEL_GROUP_STATUS, CHANNEL_STATUS_EVENTCOUNT,\n+                                        getDecimal(s.value));\n+                                break;\n+                            case \"flood\":\n+                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                                break;\n+                            case \"tilt\": // DW with FW1.6.5+\n+                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TILT,\n+                                        toQuantityType(s.value, DIGITS_NONE, SmartHomeUnits.DEGREE_ANGLE));\n+                                break;\n+                            case \"vibration\": // DW with FW1.6.5+\n+                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                                break;\n+                            case \"charger\": // Sense\n+                                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n+                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                                break;\n+                            // RGBW2/Bulb\n+                            case \"red\":\n+                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n+                                        ShellyColorUtils.toPercent((int) s.value));\n+                                break;\n+                            case \"green\":\n+                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n+                                        ShellyColorUtils.toPercent((int) s.value));\n+                                break;\n+                            case \"blue\":\n+                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n+                                        ShellyColorUtils.toPercent((int) s.value));\n+                                break;\n+                            case \"white\":\n+                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n+                                        ShellyColorUtils.toPercent((int) s.value));\n+                                break;\n+                            case \"gain\":\n+                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n+                                        ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n+                                break;\n+                            case \"temp\": // Shelly Bulb\n+                            case \"colortemperature\": // Shelly Duo\n+                                updateChannel(updates,\n+                                        profile.inColor ? CHANNEL_GROUP_COLOR_CONTROL : CHANNEL_GROUP_WHITE_CONTROL,\n+                                        CHANNEL_COLOR_TEMP,\n+                                        ShellyColorUtils.toPercent((int) s.value, profile.minTemp, profile.maxTemp));\n+                                break;\n+                            case \"sensor state\": // Shelly Gas\n+                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_STATE_STR,\n+                                        getStringType(s.valueStr));\n+                                break;\n+                            case \"alarm state\": // Shelly Gas\n+                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ALARM_STATE,\n+                                        getStringType(s.valueStr));\n+                                break;\n+                            case \"self-test state\":// Shelly Gas\n+                                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_SELFTTEST,\n+                                        getStringType(s.valueStr));\n+                                break;\n+                            case \"concentration\":// Shelly Gas\n+                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_PPM, getDecimal(s.value));\n+                                break;\n+                            default:\n+                                logger.debug(\n+                                        \"{}: Update for unknown sensor with id {}, type {}/{} received, value={}, payload={}\",\n+                                        thingName, sen.id, sen.type, sen.desc, s.value, payload);\n+                        }\n+                        break;\n+                    default:\n+                        logger.debug(\"{}: Sensor data for id {}, type {}/{} not processed, value={}; payload={}\",\n+                                thingName, sen.id, sen.type, sen.desc, s.value, payload);\n                 }\n-            } catch (RuntimeException e) {\n+            } catch (IllegalArgumentException | NullPointerException | ArrayIndexOutOfBoundsException e) {\n                 // even the processing of one value failed we continue with the next one (sometimes this is caused by\n                 // buggy formats provided by the device\n                 logger.debug(\"{}: Unable to process data from sensor[{}], devId={}, payload={}\", thingName, i, devId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDUxNA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090514", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-08-16T09:43:15Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -846,16 +867,76 @@ public boolean updateInputs(String groupName, ShellySettingsStatus status, int i\n         return updated;\n     }\n \n+    public boolean updateInputs(ShellySettingsStatus status) {\n+        boolean updated = false;\n+        String groupName = \"\";\n+\n+        if (status.input != null) {\n+            // RGBW2: a single int rather than an array\n+            return updateChannel(groupName, CHANNEL_INPUT,\n+                    getInteger(status.input) == 0 ? OnOffType.OFF : OnOffType.ON);\n+        }\n+        if (status.inputs != null) {\n+            int idx = 0;\n+            for (ShellyInputState input : status.inputs) {\n+                String group = profile.getControlGroup(idx);\n+                updated |= updateChannel(group, CHANNEL_INPUT, getOnOff(input.input));\n+                if (input.event != null) {\n+                    logger.debug(\"{}: REST update on inputEvent={}, count={}\", thingName, getStringType(input.event),\n+                            getDecimal(input.eventCount));\n+                    updated |= updateChannel(group, CHANNEL_STATUS_EVENTTYPE, getStringType(input.event));\n+                    updated |= updateChannel(group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(input.eventCount));\n+                }\n+                idx++;\n+            }\n+        }\n+        return updated;\n+    }\n+\n+    public void triggerButton(String group, String value) {\n+        String trigger = mapButtonEvent(value);\n+        if (trigger.isEmpty()) {\n+            return;\n+        }\n+\n+        logger.debug(\"{}: Update button state with {}/{}\", thingName, value, trigger);\n+        triggerChannel(group, CHANNEL_BUTTON_TRIGGER, trigger);\n+        updateChannel(group, CHANNEL_LAST_UPDATE, getTimestamp());\n+        if (!profile.hasBattery) {\n+            // refresh status of the input channel\n+            requestUpdates(1, false);\n+        }\n+\n+        /*\n+         * if (profile.isButton)/ {\n+         * // Button1 doesn't send a RELEASED, to make it consistent the binding simulates a RELEASED\n+         * ScheduledFuture<?> job = this.asyncButtonRelease;\n+         * if ((job != null) && !job.isCancelled()) {\n+         * job.cancel(true);\n+         * }\n+         * asyncButtonRelease = scheduler.schedule(() -> {\n+         * logger.debug(\"{}: Simulating Button RELEASED\", thingName);\n+         * triggerChannel(group, CHANNEL_BUTTON_TRIGGER, CommonTriggerEvents.RELEASED);\n+         * }, 1000, TimeUnit.MILLISECONDS);\n+         * }\n+         * }\n+         */", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjA0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471136040", "bodyText": "yep", "author": "markus7017", "createdAt": "2020-08-16T17:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\nindex cdf8addf32..b14d895363 100755\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n\n@@ -867,67 +868,8 @@ public class ShellyBaseHandler extends BaseThingHandler implements ShellyDeviceL\n         return updated;\n     }\n \n-    public boolean updateInputs(ShellySettingsStatus status) {\n-        boolean updated = false;\n-        String groupName = \"\";\n-\n-        if (status.input != null) {\n-            // RGBW2: a single int rather than an array\n-            return updateChannel(groupName, CHANNEL_INPUT,\n-                    getInteger(status.input) == 0 ? OnOffType.OFF : OnOffType.ON);\n-        }\n-        if (status.inputs != null) {\n-            int idx = 0;\n-            for (ShellyInputState input : status.inputs) {\n-                String group = profile.getControlGroup(idx);\n-                updated |= updateChannel(group, CHANNEL_INPUT, getOnOff(input.input));\n-                if (input.event != null) {\n-                    logger.debug(\"{}: REST update on inputEvent={}, count={}\", thingName, getStringType(input.event),\n-                            getDecimal(input.eventCount));\n-                    updated |= updateChannel(group, CHANNEL_STATUS_EVENTTYPE, getStringType(input.event));\n-                    updated |= updateChannel(group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(input.eventCount));\n-                }\n-                idx++;\n-            }\n-        }\n-        return updated;\n-    }\n-\n-    public void triggerButton(String group, String value) {\n-        String trigger = mapButtonEvent(value);\n-        if (trigger.isEmpty()) {\n-            return;\n-        }\n-\n-        logger.debug(\"{}: Update button state with {}/{}\", thingName, value, trigger);\n-        triggerChannel(group, CHANNEL_BUTTON_TRIGGER, trigger);\n-        updateChannel(group, CHANNEL_LAST_UPDATE, getTimestamp());\n-        if (!profile.hasBattery) {\n-            // refresh status of the input channel\n-            requestUpdates(1, false);\n-        }\n-\n-        /*\n-         * if (profile.isButton)/ {\n-         * // Button1 doesn't send a RELEASED, to make it consistent the binding simulates a RELEASED\n-         * ScheduledFuture<?> job = this.asyncButtonRelease;\n-         * if ((job != null) && !job.isCancelled()) {\n-         * job.cancel(true);\n-         * }\n-         * asyncButtonRelease = scheduler.schedule(() -> {\n-         * logger.debug(\"{}: Simulating Button RELEASED\", thingName);\n-         * triggerChannel(group, CHANNEL_BUTTON_TRIGGER, CommonTriggerEvents.RELEASED);\n-         * }, 1000, TimeUnit.MILLISECONDS);\n-         * }\n-         * }\n-         */\n-\n-    }\n-\n     public void publishState(String channelId, State value) {\n-        if (!stopping) {\n-            updateState(channelId.contains(\"$\") ? StringUtils.substringBefore(channelId, \"$\") : channelId, value);\n-        }\n+        updateState(channelId.contains(\"$\") ? StringUtils.substringBefore(channelId, \"$\") : channelId, value);\n     }\n \n     public boolean updateChannel(String group, String channel, State value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDU2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090560", "bodyText": "No harm in canceling a task that is already cancelled.", "author": "fwolter", "createdAt": "2020-08-16T09:43:44Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -1049,12 +1129,18 @@ public void triggerChannel(String group, String channel, String payload) {\n \n     public void stop() {\n         logger.debug(\"{}: Shutting down\", thingName);\n-        ScheduledFuture<?> statusJob = this.statusJob;\n-        if (statusJob != null) {\n-            statusJob.cancel(true);\n+        ScheduledFuture<?> job = this.statusJob;\n+        if (job != null) {\n+            job.cancel(true);\n             statusJob = null;\n             logger.debug(\"{}: Shelly statusJob stopped\", thingName);\n         }\n+        job = asyncButtonRelease;\n+        if ((job != null) && !job.isCancelled()) {", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDQ1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140454", "bodyText": "changed", "author": "markus7017", "createdAt": "2020-08-16T17:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\nindex cdf8addf32..b14d895363 100755\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n\n@@ -1129,18 +1071,12 @@ public class ShellyBaseHandler extends BaseThingHandler implements ShellyDeviceL\n \n     public void stop() {\n         logger.debug(\"{}: Shutting down\", thingName);\n-        ScheduledFuture<?> job = this.statusJob;\n-        if (job != null) {\n-            job.cancel(true);\n+        ScheduledFuture<?> statusJob = this.statusJob;\n+        if (statusJob != null) {\n+            statusJob.cancel(true);\n             statusJob = null;\n             logger.debug(\"{}: Shelly statusJob stopped\", thingName);\n         }\n-        job = asyncButtonRelease;\n-        if ((job != null) && !job.isCancelled()) {\n-            job.cancel(true);\n-            asyncButtonRelease = null;\n-        }\n-\n         coap.stop();\n         profile.initialized = false;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDgxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090811", "bodyText": "Can you remove this? You could create an issue instead.", "author": "fwolter", "createdAt": "2020-08-16T09:46:07Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java", "diffHunk": "@@ -181,6 +207,8 @@ public static ShellyChannel getDefinition(String channelName) throws IllegalArgu\n     public static Map<String, Channel> createRelayChannels(final Thing thing, final ShellyStatusRelay relays) {\n         Map<String, Channel> add = new LinkedHashMap<>();\n \n+        // TODO: Add the relay channels and remove them from the xml definition", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjE0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471136141", "bodyText": "done", "author": "markus7017", "createdAt": "2020-08-16T17:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java\nindex 7a6952b4c1..7da22e4801 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java\n\n@@ -207,8 +195,6 @@ public class ShellyChannelDefinitionsDTO {\n     public static Map<String, Channel> createRelayChannels(final Thing thing, final ShellyStatusRelay relays) {\n         Map<String, Channel> add = new LinkedHashMap<>();\n \n-        // TODO: Add the relay channels and remove them from the xml definition\n-\n         // Shelly 1/1PM Addon\n         if (relays.extTemperature != null) {\n             addChannel(thing, add, relays.extTemperature.sensor1 != null, CHGR_SENSOR, CHANNEL_ESENDOR_TEMP1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDg0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090842", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-08-16T09:46:28Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java", "diffHunk": "@@ -190,14 +218,14 @@ public static ShellyChannel getDefinition(String channelName) throws IllegalArgu\n         if (relays.extHumidity != null) {\n             addChannel(thing, add, relays.extHumidity.sensor1 != null, CHGR_SENSOR, CHANNEL_ESENDOR_HUMIDITY);\n         }\n+\n         return add;\n     }\n \n     public static Map<String, Channel> createRollerChannels(Thing thing, final ShellyControlRoller roller) {\n         Map<String, Channel> add = new LinkedHashMap<>();\n-\n-        // No dynamic channels so far, maybe added in the future\n-\n+        addChannel(thing, add, roller.state != null, CHGR_ROLLER, CHANNEL_ROL_CONTROL_STATE);\n+        // TODO: Add the other channels and remove them from the xml definition", "originalCommit": "c77b90901f304e8b5485257748dd96707b97256c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjE0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471136149", "bodyText": "done", "author": "markus7017", "createdAt": "2020-08-16T17:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java\nindex 7a6952b4c1..7da22e4801 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java\n\n@@ -218,14 +204,14 @@ public class ShellyChannelDefinitionsDTO {\n         if (relays.extHumidity != null) {\n             addChannel(thing, add, relays.extHumidity.sensor1 != null, CHGR_SENSOR, CHANNEL_ESENDOR_HUMIDITY);\n         }\n-\n         return add;\n     }\n \n     public static Map<String, Channel> createRollerChannels(Thing thing, final ShellyControlRoller roller) {\n         Map<String, Channel> add = new LinkedHashMap<>();\n-        addChannel(thing, add, roller.state != null, CHGR_ROLLER, CHANNEL_ROL_CONTROL_STATE);\n-        // TODO: Add the other channels and remove them from the xml definition\n+\n+        // No dynamic channels so far, maybe added in the future\n+\n         return add;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwOTA5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r474109097", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n          \n          \n            \n                            double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;", "author": "fwolter", "createdAt": "2020-08-20T16:21:20Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion2.java", "diffHunk": "@@ -199,8 +202,39 @@ public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen\n             case \"4403\": // relay_3: E, energy, Wmin, U32\n             case \"4104\": // roller_0: E, rollerEnergy, Wmin, U32, -1\n             case \"4204\": // roller_0: E, rollerEnergy, Wmin, U32, -1\n-                updateChannel(updates, mGroup, CHANNEL_METER_LASTMIN1,\n-                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+            case \"4106\": // emeter_0: E, energy, Wh, U32\n+            case \"4206\": // emeter_1: E, energy, Wh, U32\n+            case \"4306\": // emeter_2: E, energy, Wh, U32\n+                Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;", "originalCommit": "97cce6c7d9cc74261eeca548b9e2401a0573196b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDM5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100396", "bodyText": "changed", "author": "markus7017", "createdAt": "2020-08-22T15:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwOTA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion2.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion2.java\ndeleted file mode 100644\nindex 0e4bcf5bde..0000000000\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion2.java\n+++ /dev/null\n\n@@ -1,305 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-/**\n- * The {@link ShellyCoIoTVersion1} implements the parsing for CoIoT version 1\n- *\n- * @author Markus Michels - Initial contribution\n- */\n-package org.openhab.binding.shelly.internal.coap;\n-\n-import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n-import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n-import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.library.types.OpenClosedType;\n-import org.eclipse.smarthome.core.library.unit.SIUnits;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n-import org.eclipse.smarthome.core.types.State;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n-import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n-import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * The {@link ShellyCoIoTVersion1} implements the parsing for CoIoT version 2\n- *\n- * @author Markus Michels - Initial contribution\n- */\n-@NonNullByDefault\n-public class ShellyCoIoTVersion2 extends ShellyCoIoTProtocol implements ShellyCoIoTInterface {\n-    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTVersion2.class);\n-\n-    public ShellyCoIoTVersion2(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n-            Map<String, CoIotDescrSen> sensorMap) {\n-        super(thingName, thingHandler, blkMap, sensorMap);\n-    }\n-\n-    @Override\n-    public int getVersion() {\n-        return ShellyCoapJSonDTO.COIOT_VERSION_2;\n-    }\n-\n-    /**\n-     * Process CoIoT status update message. If a status update is received, but the device description has not been\n-     * received yet a GET is send to query device description.\n-     *\n-     * @param devId device id included in the status packet\n-     * @param payload CoAP payload (Json format), example: {\"G\":[[0,112,0]]}\n-     * @param serial Serial for this request. If this the the same as last serial\n-     *            the update was already sent and processed so this one gets\n-     *            ignored.\n-     */\n-    @Override\n-    public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n-            Map<String, State> updates) {\n-        // first check the base implementation\n-        if (super.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n-            // process by the base class\n-            return true;\n-        }\n-\n-        // Process status information and convert into channel updates\n-        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n-        int rIndex = getIdFromBlk(sen);\n-        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n-                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n-        String mGroup = profile.numMeters == 1 ? CHANNEL_GROUP_METER\n-                : CHANNEL_GROUP_METER + (profile.isEMeter ? getIdFromBlk(sen) : rIndex);\n-\n-        boolean processed = true;\n-        double value = getDouble(s.value);\n-        String reason = \"\";\n-        switch (sen.id) {\n-            case \"3103\": // H, humidity, 0-100 percent, unknown 999\n-            case \"3106\": // L, luminosity, lux, U32, -1\n-            case \"3109\": // S, tilt, 0-180deg, -1\n-            case \"3110\": // S, luminosityLevel, dark/twilight/bright, \"unknown\"=unknown\n-            case \"3111\": // B, battery, 0-100%, unknown -1\n-            case \"3112\": // S, charger, 0/1\n-            case \"3115\": // S, sensorError, 0/1\n-            case \"5101\": // S, brightness, 1-100%\n-                // processed by base handler\n-                break;\n-            case \"6109\": // P, overpowerValue, W, U32\n-            case \"9101\":\n-                // Relay: S, mode, relay/roller or\n-                // Dimmer: S, mode, color/white\n-                // skip, could check against thing mode...\n-                break;\n-\n-            case \"1101\": // S, output, 0/1\n-                updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n-                break;\n-            case \"1102\": // roler_0: S, roller, open/close/stop -> roller state\n-                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_STATE, getStringType(s.valueStr));\n-                break;\n-            case \"1103\": // roller_0: S, rollerPos, 0-100, unknown -1\n-                int pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min((int) value, SHELLY_MAX_ROLLER_POS));\n-                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n-                        toQuantityType(new Double(SHELLY_MAX_ROLLER_POS - pos), SmartHomeUnits.PERCENT));\n-                break;\n-            case \"1105\": // S, valvle, closed/opened/not_connected/failure/closing/opening/checking or unbknown\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VALVE, getStringType(s.valueStr));\n-                break;\n-\n-            case \"2101\": // Input_0: S, input, 0/1\n-            case \"2201\": // Input_1: S, input, 0/1\n-            case \"2301\": // Input_2: S, input, 0/1\n-            case \"2401\": // Input_3: S, input, 0/1\n-                handleInput(sen, s, rGroup, updates);\n-                break;\n-            case \"2102\": // Input_0: EV, inputEvent, S/SS/SSS/L\n-            case \"2202\": // Input_1: EV, inputEvent\n-            case \"2302\": // Input_2: EV, inputEvent\n-            case \"2402\": // Input_3: EV, inputEvent\n-                handleInputEvent(sen, getString(s.valueStr), -1, updates);\n-                break;\n-            case \"2103\": // EVC, inputEventCnt, U16\n-            case \"2203\": // EVC, inputEventCnt, U16\n-            case \"2303\": // EVC, inputEventCnt, U16\n-            case \"2403\": // EVC, inputEventCnt, U16\n-                handleInputEvent(sen, \"\", getInteger((int) s.value), updates);\n-                break;\n-            case \"3101\": // sensor_0: T, extTemp, C, -55/125; unknown 999\n-            case \"3201\": // sensor_1: T, extTemp, C, -55/125; unknown 999\n-            case \"3301\": // sensor_2: T, extTemp, C, -55/125; unknown 999\n-                int idx = getExtTempId(sen.id);\n-                if (idx >= 0) {\n-                    // H&T, Fllod, DW only have 1 channel, 1/1PM with Addon have up to to 3 sensors\n-                    String channel = profile.isSensor ? CHANNEL_SENSOR_TEMP : CHANNEL_SENSOR_TEMP + idx;\n-                    updateChannel(updates, CHANNEL_GROUP_SENSOR, channel,\n-                            toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                } else {\n-                    logger.debug(\"{}: Unable to get extSensorId {} from {}/{}\", thingName, sen.id, sen.type, sen.desc);\n-                }\n-                break;\n-            case \"3104\": // T, deviceTemp, Celsius -40/300; 999=unknown\n-                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP,\n-                        toQuantityType(value, DIGITS_NONE, SIUnits.CELSIUS));\n-                break;\n-            case \"3102\": // sensor_0: T, extTemp, F, -67/257, unknown 999\n-            case \"3202\": // sensor_1: T, extTemp, F, -67/257, unknown 999\n-            case \"3302\": // sensor_2: T, extTemp, F, -67/257, unknown 999\n-            case \"3105\": // T, deviceTemp, Fahrenheit -40/572\n-                // skip, we use only C\n-                break;\n-\n-            case \"3107\": // C, Gas concentration, U16\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_PPM, getDecimal(s.value));\n-                break;\n-            case \"3108\": // DW: S, dwIsOpened, 0/1, -1=unknown\n-                if (value != -1) {\n-                    updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n-                            value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n-                } else {\n-                    logger.debug(\"{}: Sensor error reported, check device, battery and installation\", thingName);\n-                }\n-                break;\n-            case \"3113\": // S, sensorOp, warmup/normal/fault\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_SSTATE, getStringType(s.valueStr));\n-                break;\n-            case \"3114\": // S, selfTest, not_completed/completed/running/pending\n-                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_SELFTTEST, getStringType(s.valueStr));\n-                break;\n-            case \"3117\": // S, extInput, 0/1\n-                handleInput(sen, s, rGroup, updates);\n-                break;\n-\n-            case \"4101\": // relay_0: P, power, W\n-            case \"4201\": // relay_1: P, power, W\n-            case \"4301\": // relay_2: P, power, W\n-            case \"4401\": // relay_3: P, power, W\n-            case \"4105\": // emeter_0: P, power, W\n-            case \"4205\": // emeter_1: P, power, W\n-            case \"4305\": // emeter_2: P, power, W\n-            case \"4102\": // roller_0: P, rollerPower, W, 0-2300, unknown -1\n-            case \"4202\": // roller_1: P, rollerPower, W, 0-2300, unknown -1\n-                updateChannel(updates, mGroup, CHANNEL_METER_CURRENTWATTS,\n-                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                updateChannel(updates, mGroup, CHANNEL_LAST_UPDATE, getTimestamp());\n-                break;\n-\n-            case \"4103\": // relay_0: E, energy, Wmin, U32\n-            case \"4203\": // relay_1: E, energy, Wmin, U32\n-            case \"4303\": // relay_2: E, energy, Wmin, U32\n-            case \"4403\": // relay_3: E, energy, Wmin, U32\n-            case \"4104\": // roller_0: E, rollerEnergy, Wmin, U32, -1\n-            case \"4204\": // roller_0: E, rollerEnergy, Wmin, U32, -1\n-            case \"4106\": // emeter_0: E, energy, Wh, U32\n-            case \"4206\": // emeter_1: E, energy, Wh, U32\n-            case \"4306\": // emeter_2: E, energy, Wh, U32\n-                Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n-                updateChannel(updates, mGroup, CHANNEL_METER_TOTALKWH,\n-                        toQuantityType(total, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n-                break;\n-\n-            case \"4107\": // emeter_0: E, energyReturned, Wh, U32, -1\n-            case \"4207\": // emeter_1: E, energyReturned, Wh, U32, -1\n-            case \"4307\": // emeter_2: E, energyReturned, Wh, U32, -1\n-                updateChannel(updates, mGroup, CHANNEL_EMETER_TOTALRET,\n-                        toQuantityType(getDouble(s.value) / 1000, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n-                break;\n-\n-            case \"4108\": // emeter_0: V, voltage, 0-265V, U32, -1\n-            case \"4208\": // emeter_1: V, voltage, 0-265V, U32, -1\n-            case \"4308\": // emeter_2: V, voltage, 0-265V, U32, -1\n-                updateChannel(updates, mGroup, CHANNEL_EMETER_VOLTAGE,\n-                        toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.VOLT));\n-                break;\n-\n-            case \"4109\": // emeter_0: A, current, 0/120A, -1\n-            case \"4209\": // emeter_1: A, current, 0/120A, -1\n-            case \"4309\": // emeter_2: A, current, 0/120A, -1\n-                updateChannel(updates, rGroup, CHANNEL_EMETER_CURRENT,\n-                        toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.AMPERE));\n-                break;\n-\n-            case \"4110\": // emeter_0: S, powerFactor, 0/1, -1\n-            case \"4210\": // emeter_1: S, powerFactor, 0/1, -1\n-            case \"4310\": // emeter_2: S, powerFactor, 0/1, -1\n-                updateChannel(updates, rGroup, CHANNEL_EMETER_PFACTOR, getDecimal(s.value));\n-                break;\n-\n-            case \"6101\": // A, overtemp, 0/1\n-                if (s.value == 1) {\n-                    thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n-                }\n-                break;\n-            case \"6102\": // relay_0: A, overpower, 0/1\n-            case \"6202\": // relay_1: A, overpower, 0/1\n-            case \"6302\": // relay_2: A, overpower, 0/1\n-            case \"6402\": // relay_3: A, overpower, 0/1\n-                if (s.value == 1) {\n-                    thingHandler.postEvent(ALARM_TYPE_OVERPOWER, true);\n-                }\n-                break;\n-            case \"6104\": // relay_0: A, loadError, 0/1\n-            case \"6204\": // relay_1: A, loadError, 0/1\n-            case \"6304\": // relay_2: A, loadError, 0/1\n-            case \"6404\": // relay_3: A, loadError, 0/1\n-                if (s.value == 1) {\n-                    thingHandler.postEvent(ALARM_TYPE_LOADERR, true);\n-                }\n-                break;\n-            case \"6103\": // roller_0: A, rollerStopReason, normal/safety_switch/obstacle/overpower\n-                reason = getString(s.valueStr);\n-                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_STOPR, getStringType(reason));\n-                if (!reason.isEmpty() && !reason.equalsIgnoreCase(SHELLY_API_STOPR_NORMAL)) {\n-                    thingHandler.postEvent(\"ROLLER_\" + reason.toUpperCase(), true);\n-                }\n-            case \"6106\": // A, flood, 0/1, -1\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n-                        value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                break;\n-            case \"6108\": // A, gas, none/mild/heavy/test or unknown\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ALARM_STATE, getStringType(s.valueStr));\n-                break;\n-            case \"6110\": // A, vibration, 0/1, -1=unknown\n-                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n-                        value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                break;\n-            case \"9102\": // EV, wakeupEvent, battery/button/periodic/poweron/sensor/ext_power, \"unknown\"=unknown\n-                if ((s.valueArray != null) && (s.valueArray.size() > 0)) {\n-                    reason = getString((String) s.valueArray.get(0));\n-                    boolean changed = thingHandler.updateChannel(CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_WAKEUP,\n-                            getStringType(reason));\n-                    if (changed) {\n-                        thingHandler.postEvent(reason.toUpperCase(), true);\n-                    }\n-                }\n-                break;\n-            case \"9103\": // EVC, cfgChanged, U16\n-                if ((lastCfgCount != -1) && (lastCfgCount != s.value)) {\n-                    thingHandler.requestUpdates(1, true); // refresh config\n-                }\n-                lastCfgCount = (int) s.value;\n-                break;\n-\n-            default:\n-                processed = false;\n-        }\n-        return processed;\n-    }\n-\n-    @Override\n-    public CoIotDescrSen fixDescription(CoIotDescrSen sen, Map<String, CoIotDescrBlk> blkMap) {\n-        return sen;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMTgyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r474111821", "bodyText": "What's the purpose of this code? Is there any case when the Thing is disabled and we come here?", "author": "fwolter", "createdAt": "2020-08-20T16:25:36Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -354,10 +352,13 @@ protected void refreshStatus() {\n             if (refreshSettings || (scheduledUpdates > 0) || (skipUpdate % skipCount == 0)) {\n                 if (!profile.isInitialized() || ((thingStatus == ThingStatus.OFFLINE))\n                         || (thingStatus == ThingStatus.UNKNOWN)) {\n+                    if (getThing().getStatusInfo().getStatusDetail() == ThingStatusDetail.DISABLED) {\n+                        logger.debug(\"{}: Thing is disabled, skip initialization\", thingName);\n+                        return;\n+                    }", "originalCommit": "97cce6c7d9cc74261eeca548b9e2401a0573196b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDQxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100415", "bodyText": "removed", "author": "markus7017", "createdAt": "2020-08-22T15:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMTgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\nindex 4ba8cbfe34..b14d895363 100755\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n\n@@ -347,18 +341,22 @@ public class ShellyBaseHandler extends BaseThingHandler implements ShellyDeviceL\n             boolean updated = false;\n \n             skipUpdate++;\n+            if (lockUpdates) {\n+                logger.trace(\"{}: Update locked, try on next cycle\", thingName);\n+                return;\n+            }\n+\n             ThingStatus thingStatus = getThing().getStatus();\n+            if ((skipUpdate % refreshCount == 0) && (profile.isInitialized()) && isThingOnline()) {\n+            }\n \n             if (refreshSettings || (scheduledUpdates > 0) || (skipUpdate % skipCount == 0)) {\n                 if (!profile.isInitialized() || ((thingStatus == ThingStatus.OFFLINE))\n                         || (thingStatus == ThingStatus.UNKNOWN)) {\n-                    if (getThing().getStatusInfo().getStatusDetail() == ThingStatusDetail.DISABLED) {\n-                        logger.debug(\"{}: Thing is disabled, skip initialization\", thingName);\n-                        return;\n-                    }\n                     logger.debug(\"{}: Status update triggered thing initialization\", thingName);\n                     initializeThing(); // may fire an exception if initialization failed\n                 }\n+\n                 // Get profile, if refreshSettings == true reload settings from device\n                 profile = getProfile(refreshSettings);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMjEwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r474112106", "bodyText": "Can you fix the formatting?", "author": "fwolter", "createdAt": "2020-08-20T16:26:03Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -389,7 +390,9 @@ protected void refreshStatus() {\n                     fillDeviceStatus(status, updated);\n                 }\n             }\n-        } catch (ShellyApiException e) {\n+        } catch (\n+\n+        ShellyApiException e) {", "originalCommit": "97cce6c7d9cc74261eeca548b9e2401a0573196b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDQ2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100466", "bodyText": "fixed", "author": "markus7017", "createdAt": "2020-08-22T15:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMjEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\nindex 4ba8cbfe34..b14d895363 100755\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n\n@@ -390,9 +382,7 @@ public class ShellyBaseHandler extends BaseThingHandler implements ShellyDeviceL\n                     fillDeviceStatus(status, updated);\n                 }\n             }\n-        } catch (\n-\n-        ShellyApiException e) {\n+        } catch (ShellyApiException e) {\n             // http call failed: go offline except for battery devices, which might be in\n             // sleep mode. Once the next update is successful the device goes back online\n             String status = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODU2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475118568", "bodyText": "Can you revert this, too?", "author": "fwolter", "createdAt": "2020-08-22T18:39:50Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -412,7 +415,7 @@ protected void refreshStatus() {\n             if (!status.isEmpty()) {\n                 setThingOffline(ThingStatusDetail.COMMUNICATION_ERROR, status);\n             }\n-        } catch (IllegalArgumentException | NullPointerException e) {\n+        } catch (RuntimeException e) {", "originalCommit": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0MDY2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475140662", "bodyText": "changed", "author": "markus7017", "createdAt": "2020-08-22T21:36:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\nindex 3d66b20739..b14d895363 100755\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n\n@@ -415,7 +412,7 @@ public class ShellyBaseHandler extends BaseThingHandler implements ShellyDeviceL\n             if (!status.isEmpty()) {\n                 setThingOffline(ThingStatusDetail.COMMUNICATION_ERROR, status);\n             }\n-        } catch (RuntimeException e) {\n+        } catch (IllegalArgumentException | NullPointerException e) {\n             logger.debug(\"{}: Unable to refresh status: {}\", thingName, messages.get(\"statusupdate.failed\"), e);\n         } finally {\n             if (scheduledUpdates > 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODgyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475118826", "bodyText": "Here", "author": "fwolter", "createdAt": "2020-08-22T18:43:16Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java", "diffHunk": "@@ -149,42 +150,46 @@ public DiscoveryResult createResult(final ServiceInfo service) {\n \n                 profile = api.getDeviceProfile(thingType);\n                 logger.debug(\"{}: Shelly settings : {}\", name, profile.settingsJson);\n+                deviceName = getString(profile.settings.name);\n                 model = getString(profile.settings.device.type);\n                 mode = profile.mode;\n \n                 properties = ShellyBaseHandler.fillDeviceProperties(profile);\n-                logger.trace(\"{}: thingType={}, deviceType={}, mode={}\", name, thingType, profile.deviceType,\n-                        mode.isEmpty() ? \"<standard>\" : mode);\n+                logger.trace(\"{}: thingType={}, deviceType={}, mode={}, symbolic name={}\", name, thingType,\n+                        profile.deviceType, mode.isEmpty() ? \"<standard>\" : mode, deviceName);\n \n                 // get thing type from device name\n-                thingUID = ShellyThingCreator.getThingUID(name, mode, false);\n+                thingUID = ShellyThingCreator.getThingUID(name, model, mode, false);\n             } catch (ShellyApiException e) {\n                 ShellyApiResult result = e.getApiResult();\n                 if (result.isHttpAccessUnauthorized()) {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.protected\", address));\n \n                     // create shellyunknown thing - will be changed during thing initialization with valid credentials\n-                    thingUID = ShellyThingCreator.getThingUID(name, mode, true);\n+                    thingUID = ShellyThingCreator.getThingUID(name, model, mode, true);\n                 } else {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.failed\", address, e.toString()));\n                     logger.debug(\"{}: Discovery failed\", name, e);\n                 }\n-            } catch (IllegalArgumentException | NullPointerException e) { // maybe some format description was buggy\n+            } catch (RuntimeException e) { // maybe some format description was buggy", "originalCommit": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0MDYyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475140627", "bodyText": "changed", "author": "markus7017", "createdAt": "2020-08-22T21:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java\nindex 0c660e2bdb..73666e2251 100755\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java\n\n@@ -150,28 +149,27 @@ public class ShellyDiscoveryParticipant implements MDNSDiscoveryParticipant {\n \n                 profile = api.getDeviceProfile(thingType);\n                 logger.debug(\"{}: Shelly settings : {}\", name, profile.settingsJson);\n-                deviceName = getString(profile.settings.name);\n                 model = getString(profile.settings.device.type);\n                 mode = profile.mode;\n \n                 properties = ShellyBaseHandler.fillDeviceProperties(profile);\n-                logger.trace(\"{}: thingType={}, deviceType={}, mode={}, symbolic name={}\", name, thingType,\n-                        profile.deviceType, mode.isEmpty() ? \"<standard>\" : mode, deviceName);\n+                logger.trace(\"{}: thingType={}, deviceType={}, mode={}\", name, thingType, profile.deviceType,\n+                        mode.isEmpty() ? \"<standard>\" : mode);\n \n                 // get thing type from device name\n-                thingUID = ShellyThingCreator.getThingUID(name, model, mode, false);\n+                thingUID = ShellyThingCreator.getThingUID(name, mode, false);\n             } catch (ShellyApiException e) {\n                 ShellyApiResult result = e.getApiResult();\n                 if (result.isHttpAccessUnauthorized()) {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.protected\", address));\n \n                     // create shellyunknown thing - will be changed during thing initialization with valid credentials\n-                    thingUID = ShellyThingCreator.getThingUID(name, model, mode, true);\n+                    thingUID = ShellyThingCreator.getThingUID(name, mode, true);\n                 } else {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.failed\", address, e.toString()));\n                     logger.debug(\"{}: Discovery failed\", name, e);\n                 }\n-            } catch (RuntimeException e) { // maybe some format description was buggy\n+            } catch (IllegalArgumentException | NullPointerException e) { // maybe some format description was buggy\n                 logger.debug(\"{}: Discovery failed!\", name, e);\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODgzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475118834", "bodyText": "Here", "author": "fwolter", "createdAt": "2020-08-22T18:43:24Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java", "diffHunk": "@@ -149,42 +150,46 @@ public DiscoveryResult createResult(final ServiceInfo service) {\n \n                 profile = api.getDeviceProfile(thingType);\n                 logger.debug(\"{}: Shelly settings : {}\", name, profile.settingsJson);\n+                deviceName = getString(profile.settings.name);\n                 model = getString(profile.settings.device.type);\n                 mode = profile.mode;\n \n                 properties = ShellyBaseHandler.fillDeviceProperties(profile);\n-                logger.trace(\"{}: thingType={}, deviceType={}, mode={}\", name, thingType, profile.deviceType,\n-                        mode.isEmpty() ? \"<standard>\" : mode);\n+                logger.trace(\"{}: thingType={}, deviceType={}, mode={}, symbolic name={}\", name, thingType,\n+                        profile.deviceType, mode.isEmpty() ? \"<standard>\" : mode, deviceName);\n \n                 // get thing type from device name\n-                thingUID = ShellyThingCreator.getThingUID(name, mode, false);\n+                thingUID = ShellyThingCreator.getThingUID(name, model, mode, false);\n             } catch (ShellyApiException e) {\n                 ShellyApiResult result = e.getApiResult();\n                 if (result.isHttpAccessUnauthorized()) {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.protected\", address));\n \n                     // create shellyunknown thing - will be changed during thing initialization with valid credentials\n-                    thingUID = ShellyThingCreator.getThingUID(name, mode, true);\n+                    thingUID = ShellyThingCreator.getThingUID(name, model, mode, true);\n                 } else {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.failed\", address, e.toString()));\n                     logger.debug(\"{}: Discovery failed\", name, e);\n                 }\n-            } catch (IllegalArgumentException | NullPointerException e) { // maybe some format description was buggy\n+            } catch (RuntimeException e) { // maybe some format description was buggy\n                 logger.debug(\"{}: Discovery failed!\", name, e);\n             }\n \n             if (thingUID != null) {\n                 addProperty(properties, CONFIG_DEVICEIP, address);\n                 addProperty(properties, PROPERTY_MODEL_ID, model);\n                 addProperty(properties, PROPERTY_SERVICE_NAME, name);\n+                addProperty(properties, PROPERTY_DEV_NAME, deviceName);\n                 addProperty(properties, PROPERTY_DEV_TYPE, thingType);\n                 addProperty(properties, PROPERTY_DEV_MODE, mode);\n \n-                logger.debug(\"{}: Adding Shelly thing, UID={}\", name, thingUID.getAsString());\n-                return DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n-                        .withLabel(name + \" - \" + address).withRepresentationProperty(name).build();\n+                logger.debug(\"{}: Adding Shelly {}, UID={}\", name, deviceName, thingUID.getAsString());\n+                String thingLabel = deviceName.isEmpty() ? name + \" - \" + address\n+                        : deviceName + \"(\" + name + \"@\" + address + \")\";\n+                return DiscoveryResultBuilder.create(thingUID).withProperties(properties).withLabel(thingLabel)\n+                        .withRepresentationProperty(name).build();\n             }\n-        } catch (IOException | IllegalArgumentException | NullPointerException e) {\n+        } catch (IOException | RuntimeException e) {", "originalCommit": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0MDY0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475140649", "bodyText": "changed", "author": "markus7017", "createdAt": "2020-08-22T21:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java\nindex 0c660e2bdb..73666e2251 100755\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java\n\n@@ -150,28 +149,27 @@ public class ShellyDiscoveryParticipant implements MDNSDiscoveryParticipant {\n \n                 profile = api.getDeviceProfile(thingType);\n                 logger.debug(\"{}: Shelly settings : {}\", name, profile.settingsJson);\n-                deviceName = getString(profile.settings.name);\n                 model = getString(profile.settings.device.type);\n                 mode = profile.mode;\n \n                 properties = ShellyBaseHandler.fillDeviceProperties(profile);\n-                logger.trace(\"{}: thingType={}, deviceType={}, mode={}, symbolic name={}\", name, thingType,\n-                        profile.deviceType, mode.isEmpty() ? \"<standard>\" : mode, deviceName);\n+                logger.trace(\"{}: thingType={}, deviceType={}, mode={}\", name, thingType, profile.deviceType,\n+                        mode.isEmpty() ? \"<standard>\" : mode);\n \n                 // get thing type from device name\n-                thingUID = ShellyThingCreator.getThingUID(name, model, mode, false);\n+                thingUID = ShellyThingCreator.getThingUID(name, mode, false);\n             } catch (ShellyApiException e) {\n                 ShellyApiResult result = e.getApiResult();\n                 if (result.isHttpAccessUnauthorized()) {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.protected\", address));\n \n                     // create shellyunknown thing - will be changed during thing initialization with valid credentials\n-                    thingUID = ShellyThingCreator.getThingUID(name, model, mode, true);\n+                    thingUID = ShellyThingCreator.getThingUID(name, mode, true);\n                 } else {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.failed\", address, e.toString()));\n                     logger.debug(\"{}: Discovery failed\", name, e);\n                 }\n-            } catch (RuntimeException e) { // maybe some format description was buggy\n+            } catch (IllegalArgumentException | NullPointerException e) { // maybe some format description was buggy\n                 logger.debug(\"{}: Discovery failed!\", name, e);\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODg2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475118868", "bodyText": "Here", "author": "fwolter", "createdAt": "2020-08-22T18:44:06Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -721,7 +742,7 @@ private void checkVersion(ShellyDeviceProfile prf, ShellySettingsStatus status)\n                 }\n                 autoCoIoT = true;\n             }\n-        } catch (IllegalArgumentException | NullPointerException e) { // could be inconsistant format of beta version\n+        } catch (RuntimeException e) { // could be inconsistant format of beta version", "originalCommit": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0MDYzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475140634", "bodyText": "changed", "author": "markus7017", "createdAt": "2020-08-22T21:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\nindex 3d66b20739..b14d895363 100755\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java\n\n@@ -742,7 +743,7 @@ public class ShellyBaseHandler extends BaseThingHandler implements ShellyDeviceL\n                 }\n                 autoCoIoT = true;\n             }\n-        } catch (RuntimeException e) { // could be inconsistant format of beta version\n+        } catch (IllegalArgumentException | NullPointerException e) { // could be inconsistant format of beta version\n             logger.debug(\"{}: {}\", thingName, messages.get(\"versioncheck.failed\", prf.fwVersion));\n         }\n         if (status.update.hasUpdate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExOTAxMw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475119013", "bodyText": "And here", "author": "fwolter", "createdAt": "2020-08-22T18:45:15Z", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyColorUtils.java", "diffHunk": "@@ -149,7 +149,7 @@ public HSBType toHSB() {\n             for (int i = 0; i < rgbw.length; i++) {\n                 values[i] = Integer.parseInt(rgbw[i]);\n             }\n-        } catch (NullPointerException e) { // might be a format problem\n+        } catch (RuntimeException e) { // might be a format problem", "originalCommit": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0MDY0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475140647", "bodyText": "changed", "author": "markus7017", "createdAt": "2020-08-22T21:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExOTAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "b698bd039b872106cf2ca140532bb3443b948807", "chunk": "diff --git a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyColorUtils.java b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyColorUtils.java\nindex c530c052ee..f72f3b788a 100644\n--- a/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyColorUtils.java\n+++ b/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyColorUtils.java\n\n@@ -149,7 +149,7 @@ public class ShellyColorUtils {\n             for (int i = 0; i < rgbw.length; i++) {\n                 values[i] = Integer.parseInt(rgbw[i]);\n             }\n-        } catch (RuntimeException e) { // might be a format problem\n+        } catch (NullPointerException e) { // might be a format problem\n             throw new IllegalArgumentException(\n                     \"Unable to convert fullColor value: \" + rgbwString + \", \" + e.getMessage());\n         }\n"}}, {"oid": "b698bd039b872106cf2ca140532bb3443b948807", "url": "https://github.com/openhab/openhab-addons/commit/b698bd039b872106cf2ca140532bb3443b948807", "message": "#7973, #7974: Support for Shelly Gas and Shelly Button added, WIP\n(localization missing)\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:20Z", "type": "commit"}, {"oid": "a3321b05f728d17a6dac03af117077187fb64c61", "url": "https://github.com/openhab/openhab-addons/commit/a3321b05f728d17a6dac03af117077187fb64c61", "message": "Button support; WIP\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:20Z", "type": "commit"}, {"oid": "233a22da2fb86c1f2ff57360fb000eb17a5601e2", "url": "https://github.com/openhab/openhab-addons/commit/233a22da2fb86c1f2ff57360fb000eb17a5601e2", "message": "Button/Gas support revised, README updated, missing device types added\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:20Z", "type": "commit"}, {"oid": "9736d2aa7b7981b14db9b62b7d1c14ca49ac3bf8", "url": "https://github.com/openhab/openhab-addons/commit/9736d2aa7b7981b14db9b62b7d1c14ca49ac3bf8", "message": "xml formatting fixed\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:20Z", "type": "commit"}, {"oid": "2be2e746f1d35340f41e8856e375d723b0572615", "url": "https://github.com/openhab/openhab-addons/commit/2be2e746f1d35340f41e8856e375d723b0572615", "message": "implementing ix3 and Button, WIP\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:20Z", "type": "commit"}, {"oid": "efc6f7eef704380ce7d44764c601375dad3ef9bc", "url": "https://github.com/openhab/openhab-addons/commit/efc6f7eef704380ce7d44764c601375dad3ef9bc", "message": "whitespace fixed\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:20Z", "type": "commit"}, {"oid": "a7b37c57115de3cf0da605a2c51219fbf7b0ecbc", "url": "https://github.com/openhab/openhab-addons/commit/a7b37c57115de3cf0da605a2c51219fbf7b0ecbc", "message": "fix duscivery issues for Vintage\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:20Z", "type": "commit"}, {"oid": "0502dd7b1756af3d4cf4f3c1d26e55e103ae81a8", "url": "https://github.com/openhab/openhab-addons/commit/0502dd7b1756af3d4cf4f3c1d26e55e103ae81a8", "message": "first support for Dimmer 2; fix for Vintage\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:20Z", "type": "commit"}, {"oid": "a95f30de05c9515561a1e4ab7989fd01462387fe", "url": "https://github.com/openhab/openhab-addons/commit/a95f30de05c9515561a1e4ab7989fd01462387fe", "message": "change to button handling/event triggering\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "e541130bd0b9082983bc636088da16b2951f57b3", "url": "https://github.com/openhab/openhab-addons/commit/e541130bd0b9082983bc636088da16b2951f57b3", "message": "button support improved, don't send button events on CoAP update for\n\"Input\"\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "bb620b07d44c393736e20ea7a7bd0f6a8e0da2d5", "url": "https://github.com/openhab/openhab-addons/commit/bb620b07d44c393736e20ea7a7bd0f6a8e0da2d5", "message": "Consolidate catching various runtime exceptions by catching\nRuntimeException\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "5aaac676d275db69facfdf10e60e0a3f5457e18d", "url": "https://github.com/openhab/openhab-addons/commit/5aaac676d275db69facfdf10e60e0a3f5457e18d", "message": "typo fixed\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "de6b1745d39851bc62e56159f20215118fd7f048", "url": "https://github.com/openhab/openhab-addons/commit/de6b1745d39851bc62e56159f20215118fd7f048", "message": "working on DW2 (no CoAP)\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "c44a8b17a306f511cf029ece982f454521f9093b", "url": "https://github.com/openhab/openhab-addons/commit/c44a8b17a306f511cf029ece982f454521f9093b", "message": "various fixes, action URLs for DW2, avoid exception on CoAPv2 JSON\n(requires parsing of R tag w/o array, same for values), trnaslations\nfixed (properties file), catch open/close action url for DW/DW, catch\ntemp_over/temp_under url (currently direct no processing)\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "37a8a8147c261e42c0988bdc58fa171f408143ac", "url": "https://github.com/openhab/openhab-addons/commit/37a8a8147c261e42c0988bdc58fa171f408143ac", "message": "CoAP v2 implementation started to support DW2 (doesn't supports CoAP v1\nanymore)\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "4f7509ce7ff33a2f1ce04a4cfe918342ac36c1b0", "url": "https://github.com/openhab/openhab-addons/commit/4f7509ce7ff33a2f1ce04a4cfe918342ac36c1b0", "message": "shelly3em changes reverted - this would be a breaking change. I noticed\nthat the device returns shellyem3 as service name and I keep this to\nbuild the thing name. I changed the README to include a note, but\ntechnically I'm back to use shellyem3 as thing name. Stupid that the\nAlterco developers can't read the product sheets, same Shelly i3 reports\nshellyix3\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "da5bf1991207bd9d7837912437c8ad1aaa389b12", "url": "https://github.com/openhab/openhab-addons/commit/da5bf1991207bd9d7837912437c8ad1aaa389b12", "message": "Break-up CoAP handler into V1 decoding, V2 decoding and general\ndecoding. This allows to support CoAP V1+V2 at the same time. The\nversion tag from the CoAP Optoons will be used to dynamically switch to\nV2 (V1 is default to support older firmwarte releases). CoAP V2 is part\nof firmware release 1.8. #8197 fixed.\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "c706cdd396977fb001e3ce440b77df7bc9005459", "url": "https://github.com/openhab/openhab-addons/commit/c706cdd396977fb001e3ce440b77df7bc9005459", "message": "various fixes\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "4fd06d21db2b6b7a40bf40376073408a48cf8227", "url": "https://github.com/openhab/openhab-addons/commit/4fd06d21db2b6b7a40bf40376073408a48cf8227", "message": "seperated CoAP 1 and 2 handling\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "139d84ac01f8c96e873f25aac30c0acdf103eade", "url": "https://github.com/openhab/openhab-addons/commit/139d84ac01f8c96e873f25aac30c0acdf103eade", "message": "Updated handling for input/inputEvent/inputCount, removed channels\nlastMin2, lastMin3, lastDirection; added channel roller#state; README\nupdated\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "7ed5f66e64d9e99d653a8c2e2a395f9c28e7e258", "url": "https://github.com/openhab/openhab-addons/commit/7ed5f66e64d9e99d653a8c2e2a395f9c28e7e258", "message": "bug fixes, README updated: consolidated channel group led into device,\nwith firmware 1.8 various devices now support the ledStatus channel, the\nbinding creates this on-the-fly. Moving the channels to group device\nsimplifies thing definition and property files\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "daafa194d840c7d9f07686411367263ce040be47", "url": "https://github.com/openhab/openhab-addons/commit/daafa194d840c7d9f07686411367263ce040be47", "message": "fix missing channel updates after thing config update, avoid duplicate\ndiscovery on initialization, check persisted device description format\nwhen changing from CiIoT v1 to v2 (after a firmware upgrade); re-enabled\nREST updates when CoAP 2 is active; README updated\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:21Z", "type": "commit"}, {"oid": "0166d6a0a171d89fdf1656cc2ceab4e749c79418", "url": "https://github.com/openhab/openhab-addons/commit/0166d6a0a171d89fdf1656cc2ceab4e749c79418", "message": "Detect the change of CoAP 1 to CoAP 2 message format (after upgrade from\n1.7 to 1.8) and re-discover; Use configured device name for building the\nlabel of discovered devices; fix: Support for CoAP 2 updates of multiple\nexternal sensors; CoAP updates for humidity verified; fix: Decoding for\nnew button event types SHORT_LONG and LONG_SHORT added (Shelly ix3)\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:22Z", "type": "commit"}, {"oid": "f870c6b7b8e5db1692f71ff5ee072038f665deb3", "url": "https://github.com/openhab/openhab-addons/commit/f870c6b7b8e5db1692f71ff5ee072038f665deb3", "message": "Review started; fixed some formatting/naming issues\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:22Z", "type": "commit"}, {"oid": "2c41bedaa9a637de7b2e799a1292de26c428c6c3", "url": "https://github.com/openhab/openhab-addons/commit/2c41bedaa9a637de7b2e799a1292de26c428c6c3", "message": "review changes\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:22Z", "type": "commit"}, {"oid": "e82d4f6d64911fb547d8f3b9906bb4bbcf9b56ab", "url": "https://github.com/openhab/openhab-addons/commit/e82d4f6d64911fb547d8f3b9906bb4bbcf9b56ab", "message": "missing sensor IDs for EM/EM3 added\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:22Z", "type": "commit"}, {"oid": "9bd3f42dc9513b6ed936cf02947b2c3905a953e0", "url": "https://github.com/openhab/openhab-addons/commit/9bd3f42dc9513b6ed936cf02947b2c3905a953e0", "message": "Missing sensor IDs for Shelly EM/EM3 added; Auto-Switching from CoIoT 1\nto CoIoT 2; Thing goes to state UNKNOWN when device was restarted and a\nnew initialization is triggered; Don't try to initialize Thing when in\nstate DISABLED\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:22Z", "type": "commit"}, {"oid": "3d3704c4adad645f2cbc131124e9914d29bf9470", "url": "https://github.com/openhab/openhab-addons/commit/3d3704c4adad645f2cbc131124e9914d29bf9470", "message": "output sensor value as String if not int in TRACE mode\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:22Z", "type": "commit"}, {"oid": "441928c0f0f4248e343d80c5094db9031b734097", "url": "https://github.com/openhab/openhab-addons/commit/441928c0f0f4248e343d80c5094db9031b734097", "message": "review comments applied\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:22Z", "type": "commit"}, {"oid": "973714391381ef2a5e0c166c112a98e45ba42c38", "url": "https://github.com/openhab/openhab-addons/commit/973714391381ef2a5e0c166c112a98e45ba42c38", "message": "review comments applied\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:22Z", "type": "commit"}, {"oid": "aeb6cefef4bf53fd3e9a42f936682de0a101dbea", "url": "https://github.com/openhab/openhab-addons/commit/aeb6cefef4bf53fd3e9a42f936682de0a101dbea", "message": "added some missing translations, bigger QA test passed with FW\n1.7+1.8,Coap/No Coap, almost all devices\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:22Z", "type": "commit"}, {"oid": "8fe6c3781948f8027b8815f2419e2990451aa359", "url": "https://github.com/openhab/openhab-addons/commit/8fe6c3781948f8027b8815f2419e2990451aa359", "message": "crap. forgot a file :-)\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:22Z", "type": "commit"}, {"oid": "b210e11b9403cf19f4a9ff709dcf5bd189c5bda1", "url": "https://github.com/openhab/openhab-addons/commit/b210e11b9403cf19f4a9ff709dcf5bd189c5bda1", "message": "fix: device index on Action events; preparing for 2.5.9\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:23Z", "type": "commit"}, {"oid": "7382d1db85d4c0a6ed805e374655247df47a9a0f", "url": "https://github.com/openhab/openhab-addons/commit/7382d1db85d4c0a6ed805e374655247df47a9a0f", "message": "fix: Process relay events correctly when Action URLs are activated; fix:\ntrigger wakeup events only once (e.g. don\u2019t send multiple BUTTON;\ntriggers); typo fixed\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:09:23Z", "type": "commit"}, {"oid": "a54a375d92c9ac3ef1ffd7b011b7e321b479c030", "url": "https://github.com/openhab/openhab-addons/commit/a54a375d92c9ac3ef1ffd7b011b7e321b479c030", "message": "set to 2.5.9\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:10:59Z", "type": "commit"}, {"oid": "a54a375d92c9ac3ef1ffd7b011b7e321b479c030", "url": "https://github.com/openhab/openhab-addons/commit/a54a375d92c9ac3ef1ffd7b011b7e321b479c030", "message": "set to 2.5.9\n\nSigned-off-by: Markus Michels <markus7017@gmail.com>", "committedDate": "2020-08-27T06:10:59Z", "type": "forcePushed"}]}