{"pr_number": 9131, "pr_title": "[openhabcloud] Code improvements", "pr_createdAt": "2020-11-25T20:43:11Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9131", "timeline": [{"oid": "84f40bb56e629e49f9d7c5ebdc487f505e43ec90", "url": "https://github.com/openhab/openhab-addons/commit/84f40bb56e629e49f9d7c5ebdc487f505e43ec90", "message": "Code improvements\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-11-25T12:51:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530638671", "bodyText": "This most likely won't generate an alphanumeric string. So this change isn't equivalent.", "author": "cpmeister", "createdAt": "2020-11-25T20:56:41Z", "path": "bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java", "diffHunk": "@@ -292,7 +298,9 @@ private String getSecret() {\n         String newSecretString = \"\";\n \n         if (!file.exists()) {\n-            newSecretString = RandomStringUtils.randomAlphanumeric(20);\n+            byte[] array = new byte[20];\n+            new Random().nextBytes(array);\n+            newSecretString = new String(array, StandardCharsets.UTF_8);", "originalCommit": "84f40bb56e629e49f9d7c5ebdc487f505e43ec90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY0NDMzNw==", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530644337", "bodyText": "Do you have an idea how it could be solved? Something like this\nUUID.randomUUID().toString().replaceAll(\"-\", \"\");", "author": "cweitkamp", "createdAt": "2020-11-25T21:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY0NjAzOA==", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530646038", "bodyText": "You could also do:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        byte[] array = new byte[20];\n          \n          \n            \n                        new Random().nextBytes(array);\n          \n          \n            \n                        newSecretString = new String(array, StandardCharsets.UTF_8);\n          \n          \n            \n                        byte[] array = new byte[10];\n          \n          \n            \n                        new Random().nextBytes(array);\n          \n          \n            \n                        newSecretString = HexUtils.bytesToHex(array);\n          \n      \n    \n    \n  \n\nThat should produce a random enough alphanumeric string.", "author": "cpmeister", "createdAt": "2020-11-25T21:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1Mzg5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530653891", "bodyText": "Alright, but is it secure enough?\nWhile touching it anyways we can ask @digitaldan for his opinion and if we maybe should increase the number of characters for the secret.", "author": "cweitkamp", "createdAt": "2020-11-25T21:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1NDY3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530654679", "bodyText": "If you want something truly equivalent to the original code, you could just make a utility method:\nstatic final String AB = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nstatic SecureRandom rnd = new SecureRandom();\n\nString randomString(int len){\n   StringBuilder sb = new StringBuilder(len);\n   for(int i = 0; i < len; i++)\n      sb.append(AB.charAt(rnd.nextInt(AB.length())));\n   return sb.toString();\n}", "author": "cpmeister", "createdAt": "2020-11-25T21:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2NTI0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530665245", "bodyText": "That sounds like the best option for me. Thanks for your help, I will incorporate it later.", "author": "cweitkamp", "createdAt": "2020-11-25T22:03:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ef5cf14cd7a3acb567108b4a4f37c50db635d9bd", "chunk": "diff --git a/bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java b/bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java\nindex af59e81d48..4e719bb5ae 100644\n--- a/bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java\n+++ b/bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java\n\n@@ -298,9 +308,7 @@ public class CloudService implements ActionService, CloudClientListener, EventSu\n         String newSecretString = \"\";\n \n         if (!file.exists()) {\n-            byte[] array = new byte[20];\n-            new Random().nextBytes(array);\n-            newSecretString = new String(array, StandardCharsets.UTF_8);\n+            newSecretString = randomString(20);\n             logger.debug(\"New secret = {}\", newSecretString);\n             writeFile(file, newSecretString);\n         } else {\n"}}, {"oid": "ef5cf14cd7a3acb567108b4a4f37c50db635d9bd", "url": "https://github.com/openhab/openhab-addons/commit/ef5cf14cd7a3acb567108b4a4f37c50db635d9bd", "message": "Add util method to create random alphanimeric string\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-11-26T19:26:43Z", "type": "commit"}]}