{"pr_number": 6838, "pr_title": "[mqtt] renenable outgoing formatting and address #6831", "pr_createdAt": "2020-01-14T22:29:47Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/6838", "timeline": [{"oid": "265a3b3805167f6da49600462b2dd39f39f69447", "url": "https://github.com/openhab/openhab-addons/commit/265a3b3805167f6da49600462b2dd39f39f69447", "message": "redo outgoing format\n\nSigned-off-by: Jochen Klein <git@jochen.susca.de>", "committedDate": "2020-01-14T21:45:07Z", "type": "commit"}, {"oid": "92ce13ed6d9f8a04bec165a89b7aba4f2330fe81", "url": "https://github.com/openhab/openhab-addons/commit/92ce13ed6d9f8a04bec165a89b7aba4f2330fe81", "message": "Fix scientific notation for percent type\n\nSigned-off-by: Jochen Klein <git@jochen.susca.de>", "committedDate": "2020-01-14T22:13:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzMzY4OA==", "url": "https://github.com/openhab/openhab-addons/pull/6838#discussion_r367033688", "bodyText": "This is the part, which is changed against the original PR.\nUse of the DecimalType.format to do the real work.", "author": "jochen314", "createdAt": "2020-01-15T18:22:56Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "diffHunk": "@@ -131,20 +134,27 @@ public void update(Command command) throws IllegalArgumentException {\n     }\n \n     @Override\n-    public String getMQTTpublishValue() {\n+    public String getMQTTpublishValue(@Nullable String pattern) {\n         if (state == UnDefType.UNDEF) {\n             return \"\";\n         }\n-        // Formular: From percentage to custom min/max: value*span/100+min\n+        // Formula: From percentage to custom min/max: value*span/100+min\n         // Calculation need to happen with big decimals to either return a straight integer or a decimal depending on\n         // the value.\n-        return ((PercentType) state).toBigDecimal().multiply(BigDecimal.valueOf(span)).divide(BigDecimal.valueOf(100))\n-                .add(BigDecimal.valueOf(min)).toString();\n+        BigDecimal value = ((PercentType) state).toBigDecimal().multiply(span).divide(DB100, MathContext.DECIMAL128)\n+                .add(min).stripTrailingZeros();\n+\n+        String formatPattern = pattern;\n+        if (formatPattern == null) {\n+            formatPattern = \"%s\";\n+        }\n+\n+        return new DecimalType(value).format(formatPattern);", "originalCommit": "92ce13ed6d9f8a04bec165a89b7aba4f2330fe81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78eb48fa1f43fdb81aecdcb6a1a212f06213dd34", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java\nindex adb7516453..7ccba62f7d 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java\n\n@@ -141,7 +140,7 @@ public class PercentageValue extends Value {\n         // Formula: From percentage to custom min/max: value*span/100+min\n         // Calculation need to happen with big decimals to either return a straight integer or a decimal depending on\n         // the value.\n-        BigDecimal value = ((PercentType) state).toBigDecimal().multiply(span).divide(DB100, MathContext.DECIMAL128)\n+        BigDecimal value = ((PercentType) state).toBigDecimal().multiply(span).divide(HUNDRED, MathContext.DECIMAL128)\n                 .add(min).stripTrailingZeros();\n \n         String formatPattern = pattern;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NzQ0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6838#discussion_r367087446", "bodyText": "I think HUNDRED would make more sense and/or you turned the letters of BigDecimal around", "author": "martinvw", "createdAt": "2020-01-15T20:20:41Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "diffHunk": "@@ -47,10 +48,11 @@\n  */\n @NonNullByDefault\n public class PercentageValue extends Value {\n-    private final double min;\n-    private final double max;\n-    private final double span;\n-    private final double step;\n+    private static final BigDecimal DB100 = BigDecimal.valueOf(100);", "originalCommit": "92ce13ed6d9f8a04bec165a89b7aba4f2330fe81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78eb48fa1f43fdb81aecdcb6a1a212f06213dd34", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java\nindex adb7516453..7ccba62f7d 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java\n\n@@ -48,7 +48,7 @@ import tec.uom.se.unit.Units;\n  */\n @NonNullByDefault\n public class PercentageValue extends Value {\n-    private static final BigDecimal DB100 = BigDecimal.valueOf(100);\n+    private static final BigDecimal HUNDRED = BigDecimal.valueOf(100);\n     private final BigDecimal min;\n     private final BigDecimal max;\n     private final BigDecimal span;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4ODQ5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6838#discussion_r367088496", "bodyText": "Why?", "author": "martinvw", "createdAt": "2020-01-15T20:23:08Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/NumberValue.java", "diffHunk": "@@ -56,7 +56,7 @@ public NumberValue(@Nullable BigDecimal min, @Nullable BigDecimal max, @Nullable\n                 .collect(Collectors.toList()));\n         this.min = min;\n         this.max = max;\n-        this.step = step == null ? BigDecimal.ONE : step;\n+        this.step = step == null ? new BigDecimal(1.0) : step;", "originalCommit": "92ce13ed6d9f8a04bec165a89b7aba4f2330fe81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNTI2OA==", "url": "https://github.com/openhab/openhab-addons/pull/6838#discussion_r367605268", "bodyText": "Good question....\nactually: bad manual merging", "author": "jochen314", "createdAt": "2020-01-16T19:24:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4ODQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "78eb48fa1f43fdb81aecdcb6a1a212f06213dd34", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/NumberValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/NumberValue.java\nindex b32b315180..8f6af258a9 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/NumberValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/NumberValue.java\n\n@@ -56,7 +56,7 @@ public class NumberValue extends Value {\n                 .collect(Collectors.toList()));\n         this.min = min;\n         this.max = max;\n-        this.step = step == null ? new BigDecimal(1.0) : step;\n+        this.step = step == null ? BigDecimal.ONE : step;\n         this.unit = unit == null ? \"\" : unit;\n     }\n \n"}}, {"oid": "78eb48fa1f43fdb81aecdcb6a1a212f06213dd34", "url": "https://github.com/openhab/openhab-addons/commit/78eb48fa1f43fdb81aecdcb6a1a212f06213dd34", "message": "review comments\n\nSigned-off-by: Jochen Klein <git@jochen.susca.de>", "committedDate": "2020-01-16T19:35:19Z", "type": "commit"}]}