{"pr_number": 8486, "pr_title": "[SynopAnalyzer] Binding review, and autodiscovery", "pr_createdAt": "2020-09-17T09:12:57Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8486", "timeline": [{"oid": "2ad070f0d8ab1939eca0bc95072371b3c26a0b06", "url": "https://github.com/openhab/openhab-addons/commit/2ad070f0d8ab1939eca0bc95072371b3c26a0b06", "message": "Initial work", "committedDate": "2020-06-08T09:52:30Z", "type": "commit"}, {"oid": "c8d16f643dbfb445dba911cb52aa62d2e5b9f523", "url": "https://github.com/openhab/openhab-addons/commit/c8d16f643dbfb445dba911cb52aa62d2e5b9f523", "message": "Wrong channel description\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-09-12T16:22:06Z", "type": "commit"}, {"oid": "b0e6e8f7e8fdaf6387b614a6cc90dade211ad540", "url": "https://github.com/openhab/openhab-addons/commit/b0e6e8f7e8fdaf6387b614a6cc90dade211ad540", "message": "Adding synop stations db.", "committedDate": "2020-09-14T04:49:56Z", "type": "commit"}, {"oid": "208db7e27883945984b486a1757e2c08571faec9", "url": "https://github.com/openhab/openhab-addons/commit/208db7e27883945984b486a1757e2c08571faec9", "message": "Review of the Synop Analyzer binding.\nAdded a French synop database, so auto discovery is now possible.\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-09-17T09:01:26Z", "type": "commit"}, {"oid": "6fe8958cdcf9009827104161a410483abbfa1c03", "url": "https://github.com/openhab/openhab-addons/commit/6fe8958cdcf9009827104161a410483abbfa1c03", "message": "Cleaning code\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-09-17T09:11:11Z", "type": "commit"}, {"oid": "a22504fa814160e649992e98d052ef8af118bf34", "url": "https://github.com/openhab/openhab-addons/commit/a22504fa814160e649992e98d052ef8af118bf34", "message": "Pleasing travis\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-09-17T09:36:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3MTQxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8486#discussion_r490771411", "bodyText": "Put it in a try-with-resources (and you can remove the close()):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/db/stations.json\");\n          \n          \n            \n                    try {\n          \n          \n            \n                        Reader reader = new InputStreamReader(is, \"UTF-8\");\n          \n          \n            \n                    try (InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/db/stations.json\"); \n          \n          \n            \n                        Reader reader = new InputStreamReader(is, \"UTF-8\");) {\n          \n      \n    \n    \n  \n\nAlso run mvn spotless:apply just to make sure it formats correctly.", "author": "Hilbrand", "createdAt": "2020-09-18T08:00:43Z", "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/SynopAnalyzerHandlerFactory.java", "diffHunk": "@@ -49,6 +76,42 @@ public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n     protected @Nullable ThingHandler createHandler(Thing thing) {\n         ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n \n-        return thingTypeUID.equals(THING_SYNOP) ? new SynopAnalyzerHandler(thing) : null;\n+        return thingTypeUID.equals(THING_SYNOP) ? new SynopAnalyzerHandler(thing, locationProvider, stationDB) : null;\n+    }\n+\n+    @Override\n+    protected void activate(ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/db/stations.json\");\n+        try {\n+            Reader reader = new InputStreamReader(is, \"UTF-8\");", "originalCommit": "a22504fa814160e649992e98d052ef8af118bf34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2127123dea7618a81d9fd0e5b1ed6f06558d212e", "chunk": "diff --git a/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/SynopAnalyzerHandlerFactory.java b/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/SynopAnalyzerHandlerFactory.java\nindex aaff62d495..a077be2846 100644\n--- a/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/SynopAnalyzerHandlerFactory.java\n+++ b/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/SynopAnalyzerHandlerFactory.java\n\n@@ -82,11 +82,11 @@ public class SynopAnalyzerHandlerFactory extends BaseThingHandlerFactory {\n     @Override\n     protected void activate(ComponentContext componentContext) {\n         super.activate(componentContext);\n-        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/db/stations.json\");\n-        try {\n-            Reader reader = new InputStreamReader(is, \"UTF-8\");\n+\n+        try (InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/db/stations.json\");\n+                Reader reader = new InputStreamReader(is, \"UTF-8\");) {\n+\n             stationDB = gson.fromJson(reader, StationDB.class);\n-            reader.close();\n             registerDiscoveryService();\n             logger.debug(\"Discovery service for Synop Stations registered.\");\n         } catch (IOException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3Mzg3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8486#discussion_r490773878", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import tec.uom.se.unit.Units;\n          \n          \n            \n            import org.eclipse.smarthome.core.library.unit.SIUnits;", "author": "Hilbrand", "createdAt": "2020-09-18T08:05:36Z", "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java", "diffHunk": "@@ -43,15 +47,20 @@\n import org.eclipse.smarthome.core.types.State;\n import org.eclipse.smarthome.core.types.UnDefType;\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n-import org.openhab.binding.synopanalyser.internal.synop.Constants;\n+import org.openhab.binding.synopanalyser.internal.synop.StationDB;\n+import org.openhab.binding.synopanalyser.internal.synop.StationDB.Station;\n import org.openhab.binding.synopanalyser.internal.synop.Synop;\n+import org.openhab.binding.synopanalyser.internal.synop.Synop.Overcast;\n import org.openhab.binding.synopanalyser.internal.synop.SynopLand;\n-import org.openhab.binding.synopanalyser.internal.synop.SynopMobileLand;\n+import org.openhab.binding.synopanalyser.internal.synop.SynopMobile;\n import org.openhab.binding.synopanalyser.internal.synop.SynopShip;\n+import org.openhab.binding.synopanalyser.internal.synop.WindDirections;\n import org.openhab.binding.synopanalyzer.internal.config.SynopAnalyzerConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import tec.uom.se.unit.Units;", "originalCommit": "a22504fa814160e649992e98d052ef8af118bf34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2127123dea7618a81d9fd0e5b1ed6f06558d212e", "chunk": "diff --git a/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java b/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java\nindex f4d38adcdd..0b62c518f4 100644\n--- a/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java\n+++ b/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java\n\n@@ -47,10 +47,10 @@ import org.eclipse.smarthome.core.types.RefreshType;\n import org.eclipse.smarthome.core.types.State;\n import org.eclipse.smarthome.core.types.UnDefType;\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.synopanalyser.internal.synop.Overcast;\n import org.openhab.binding.synopanalyser.internal.synop.StationDB;\n import org.openhab.binding.synopanalyser.internal.synop.StationDB.Station;\n import org.openhab.binding.synopanalyser.internal.synop.Synop;\n-import org.openhab.binding.synopanalyser.internal.synop.Synop.Overcast;\n import org.openhab.binding.synopanalyser.internal.synop.SynopLand;\n import org.openhab.binding.synopanalyser.internal.synop.SynopMobile;\n import org.openhab.binding.synopanalyser.internal.synop.SynopShip;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3NDE3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8486#discussion_r490774175", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            properties.put(\"Distance\", new QuantityType<>(distance, Units.METRE).toString());\n          \n          \n            \n                            properties.put(\"Distance\", new QuantityType<>(distance, SIUnits.METRE).toString());", "author": "Hilbrand", "createdAt": "2020-09-18T08:06:13Z", "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java", "diffHunk": "@@ -61,54 +70,81 @@\n  */\n @NonNullByDefault\n public class SynopAnalyzerHandler extends BaseThingHandler {\n-\n-    private static final String OGIMET_SYNOP_PATH = \"http://www.ogimet.com/cgi-bin/getsynop?block=\";\n-    private static final int REQUEST_TIMEOUT = 5000;\n+    private static final String OGIMET_SYNOP_PATH = \"http://www.ogimet.com/cgi-bin/getsynop?block=%s&begin=%s\";\n+    private static final int REQUEST_TIMEOUT_MS = 5000;\n     private static final DateTimeFormatter SYNOP_DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMddHH00\");\n     private static final double KASTEN_POWER = 3.4;\n     private static final double OCTA_MAX = 8.0;\n \n     private final Logger logger = LoggerFactory.getLogger(SynopAnalyzerHandler.class);\n \n-    private @NonNullByDefault({}) ScheduledFuture<?> executionJob;\n-    private @NonNullByDefault({}) SynopAnalyzerConfiguration configuration;\n+    private @Nullable ScheduledFuture<?> executionJob;\n+    // private @NonNullByDefault({}) SynopAnalyzerConfiguration configuration;\n+    private @NonNullByDefault({}) String formattedStationId;\n+    private final LocationProvider locationProvider;\n+    private final StationDB stationDB;\n \n-    public SynopAnalyzerHandler(Thing thing) {\n+    public SynopAnalyzerHandler(Thing thing, LocationProvider locationProvider, StationDB stationDB) {\n         super(thing);\n+        this.locationProvider = locationProvider;\n+        this.stationDB = stationDB;\n     }\n \n     @Override\n     public void initialize() {\n-        configuration = getConfigAs(SynopAnalyzerConfiguration.class);\n-\n+        SynopAnalyzerConfiguration configuration = getConfigAs(SynopAnalyzerConfiguration.class);\n+        formattedStationId = String.format(\"%05d\", configuration.stationId);\n         logger.info(\"Scheduling Synop update thread to run every {} minute for Station '{}'\",\n-                configuration.refreshInterval, configuration.stationId);\n+                configuration.refreshInterval, formattedStationId);\n \n-        executionJob = scheduler.scheduleWithFixedDelay(() -> {\n-            updateSynopChannels();\n-        }, 0, configuration.refreshInterval, TimeUnit.MINUTES);\n-        updateStatus(ThingStatus.ONLINE);\n+        if (thing.getProperties().isEmpty()) {\n+            discoverAttributes(configuration.stationId);\n+        }\n+\n+        executionJob = scheduler.scheduleWithFixedDelay(this::updateSynopChannels, 0, configuration.refreshInterval,\n+                TimeUnit.MINUTES);\n+        updateStatus(ThingStatus.UNKNOWN);\n+    }\n+\n+    protected void discoverAttributes(int stationId) {\n+        final Map<String, String> properties = new HashMap<>();\n+\n+        Optional<Station> station = stationDB.stations.stream().filter(s -> stationId == s.idOmm).findFirst();\n+        station.ifPresent(s -> {\n+            properties.put(\"Usual name\", s.usualName);\n+            properties.put(\"Location\", s.getLocation());\n+\n+            PointType stationLocation = new PointType(s.getLocation());\n+            PointType serverLocation = locationProvider.getLocation();\n+            if (serverLocation != null) {\n+                DecimalType distance = serverLocation.distanceFrom(stationLocation);\n+\n+                properties.put(\"Distance\", new QuantityType<>(distance, Units.METRE).toString());", "originalCommit": "a22504fa814160e649992e98d052ef8af118bf34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2127123dea7618a81d9fd0e5b1ed6f06558d212e", "chunk": "diff --git a/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java b/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java\nindex f4d38adcdd..0b62c518f4 100644\n--- a/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java\n+++ b/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java\n\n@@ -119,7 +117,7 @@ public class SynopAnalyzerHandler extends BaseThingHandler {\n             if (serverLocation != null) {\n                 DecimalType distance = serverLocation.distanceFrom(stationLocation);\n \n-                properties.put(\"Distance\", new QuantityType<>(distance, Units.METRE).toString());\n+                properties.put(\"Distance\", new QuantityType<>(distance, SIUnits.METRE).toString());\n             }\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3NTcwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8486#discussion_r490775701", "bodyText": "2 seconds seems relatively short. It means the discovery process is killed if it didn't finish in 2 seconds.", "author": "Hilbrand", "createdAt": "2020-09-18T08:09:03Z", "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyser/internal/discovery/SynopAnalyzerDiscoveryService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.synopanalyser.internal.discovery;\n+\n+import static org.openhab.binding.synopanalyzer.internal.SynopAnalyzerBindingConstants.THING_SYNOP;\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.i18n.LocationProvider;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.synopanalyser.internal.synop.StationDB;\n+import org.openhab.binding.synopanalyser.internal.synop.StationDB.Station;\n+import org.openhab.binding.synopanalyzer.internal.config.SynopAnalyzerConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SynopAnalyzerDiscoveryService} creates things based on the configured location.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class SynopAnalyzerDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(SynopAnalyzerDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 2;", "originalCommit": "a22504fa814160e649992e98d052ef8af118bf34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2127123dea7618a81d9fd0e5b1ed6f06558d212e", "chunk": "diff --git a/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyser/internal/discovery/SynopAnalyzerDiscoveryService.java b/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyser/internal/discovery/SynopAnalyzerDiscoveryService.java\nindex c6e37e2bde..90446a02c6 100644\n--- a/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyser/internal/discovery/SynopAnalyzerDiscoveryService.java\n+++ b/bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyser/internal/discovery/SynopAnalyzerDiscoveryService.java\n\n@@ -43,7 +43,7 @@ import org.slf4j.LoggerFactory;\n @NonNullByDefault\n public class SynopAnalyzerDiscoveryService extends AbstractDiscoveryService {\n     private final Logger logger = LoggerFactory.getLogger(SynopAnalyzerDiscoveryService.class);\n-    private static final int DISCOVER_TIMEOUT_SECONDS = 2;\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 5;\n     private LocationProvider locationProvider;\n     private final StationDB stationDB;\n     private final Map<Integer, Double> distances = new HashMap<>();\n"}}, {"oid": "2127123dea7618a81d9fd0e5b1ed6f06558d212e", "url": "https://github.com/openhab/openhab-addons/commit/2127123dea7618a81d9fd0e5b1ed6f06558d212e", "message": "Code review corrections\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-09-18T08:17:28Z", "type": "commit"}]}