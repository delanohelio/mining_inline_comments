{"pr_number": 7160, "pr_title": "[modbus] gracefully handle unexpected slave responses", "pr_createdAt": "2020-03-14T09:27:25Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7160", "timeline": [{"oid": "b88a2341a84790acc6db35dd7a920c62b424eea2", "url": "https://github.com/openhab/openhab-addons/commit/b88a2341a84790acc6db35dd7a920c62b424eea2", "message": "[modbus] Handle various invalid/illegal slave responses gracefully\n\n- slave responds with too little data. Instead of crashing later when\n  using the data, abort immediately.\n- slave responds with function code which does not match the request.\n  This is illegal according to protocol\n\nSince we have seen both of the errors in the wild it is better to handle\nthem gracefully, and print out good error message for the user.\n\nIn addition, we now catch all Exceptions in the runnable that polls the\ndata. This is to cover any unexpected / unknown errors that might arise.\nNow that we catch the error, the polling does not get halted (behaviour\nof the scheduler we use) but instead it will be retried again.\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-03-14T09:12:46Z", "type": "commit"}, {"oid": "49a1a8d60a3963e90232c86d3ed3af438612ab65", "url": "https://github.com/openhab/openhab-addons/commit/49a1a8d60a3963e90232c86d3ed3af438612ab65", "message": "[modbus] Fixed docstring\n\nObviously copy-pasted from jamod (the underlying modbus library)\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-03-14T09:13:29Z", "type": "commit"}, {"oid": "a5312790fe3da36f2e8e3ab5ad05794896970674", "url": "https://github.com/openhab/openhab-addons/commit/a5312790fe3da36f2e8e3ab5ad05794896970674", "message": "[modbus] More tests with coils and discretes to cover edge cases\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-03-14T09:14:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjAyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392596029", "bodyText": "why Throwable instead of ModbusException?", "author": "cpmeister", "createdAt": "2020-03-14T15:21:42Z", "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/SimpleStopWatch.java", "diffHunk": "@@ -38,8 +36,8 @@\n     }\n \n     @FunctionalInterface\n-    public abstract interface RunnableWithModbusException {\n-        public abstract void run() throws ModbusException;\n+    public abstract interface RunnableWithException<T extends Throwable> {", "originalCommit": "a5312790fe3da36f2e8e3ab5ad05794896970674", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1NzgyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392657829", "bodyText": "This made me look this a bit closer. The whole change with this interface with generic exception is unnecessary -- was related to a version of the code when I was working on this PR.\nRemoved the generics now, which means that there is actually no diff to SimpleStopWatch.java at all.", "author": "ssalonen", "createdAt": "2020-03-15T09:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1fe133ed3d1df19c79c36a17b1c498567a586b51", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/SimpleStopWatch.java b/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/SimpleStopWatch.java\nindex ae9e6fe09d..87e90fe9ea 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/SimpleStopWatch.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/SimpleStopWatch.java\n\n@@ -36,8 +38,8 @@ public class SimpleStopWatch {\n     }\n \n     @FunctionalInterface\n-    public abstract interface RunnableWithException<T extends Throwable> {\n-        public abstract void run() throws T;\n+    public abstract interface RunnableWithModbusException {\n+        public abstract void run() throws ModbusException;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjAzMw==", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392596033", "bodyText": "If you are going to include javadocs at least fill them out. Or get rid of the javadocs....", "author": "cpmeister", "createdAt": "2020-03-14T15:21:46Z", "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java", "diffHunk": "@@ -125,15 +135,53 @@ public void accept(AggregateStopWatch timer, T task, ModbusSlaveConnection conne\n         // Compare request and response transaction ID. NOTE: ModbusTransaction.getTransactionID() is static and\n         // not safe to use\n         if ((response.getTransactionID() != libRequest.getTransactionID()) && !response.isHeadless()) {\n-            logger.warn(\n-                    \"Transaction id of the response ({}) does not match request ({}) {}. Endpoint {}. Ignoring response. [operation ID {}]\",\n-                    response.getTransactionID(), libRequest.getTransactionID(), task.getRequest(), task.getEndpoint(),\n-                    operationId);\n             throw new ModbusUnexpectedTransactionIdException(libRequest.getTransactionID(),\n                     response.getTransactionID());\n         }\n     }\n \n+    /**\n+     * Check that function code of the response and request match\n+     *\n+     * @param response\n+     * @param libRequest\n+     * @param task\n+     * @param operationId\n+     * @throws ModbusUnexpectedTransactionIdException", "originalCommit": "a5312790fe3da36f2e8e3ab5ad05794896970674", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1NzY3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392657670", "bodyText": "You are right, added explanations.", "author": "ssalonen", "createdAt": "2020-03-15T09:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "1fe133ed3d1df19c79c36a17b1c498567a586b51", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java b/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java\nindex f14f8368fd..f9d6d74c0c 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java\n\n@@ -123,14 +123,13 @@ public class ModbusManagerImpl implements ModbusManager {\n     /**\n      * Check that transaction id of the response and request match\n      *\n-     * @param response\n-     * @param libRequest\n-     * @param task\n-     * @param operationId\n-     * @throws ModbusUnexpectedTransactionIdException\n+     * @param response response from the slave corresponding to request\n+     * @param libRequest modbus request\n+     * @param operationId operation id for logging\n+     * @throws ModbusUnexpectedTransactionIdException when transaction IDs of the request and\n+     *             response do not match\n      */\n-    private <R> void checkTransactionId(ModbusResponse response, ModbusRequest libRequest,\n-            TaskWithEndpoint<R, ? extends ModbusCallback> task, String operationId)\n+    private <R> void checkTransactionId(ModbusResponse response, ModbusRequest libRequest, String operationId)\n             throws ModbusUnexpectedTransactionIdException {\n         // Compare request and response transaction ID. NOTE: ModbusTransaction.getTransactionID() is static and\n         // not safe to use\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjA3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392596073", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.error(\n          \n          \n            \n                                logger.warn(", "author": "cpmeister", "createdAt": "2020-03-14T15:22:22Z", "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java", "diffHunk": "@@ -721,7 +774,16 @@ public void registerRegularPoll(@NonNull PollTask task, long pollPeriodMillis, l\n                 long started = System.currentTimeMillis();\n                 logger.debug(\"Executing scheduled ({}ms) poll task {}. Current millis: {}\", pollPeriodMillis, task,\n                         started);\n-                executeOperation(task, false, pollOperation);\n+                try {\n+                    executeOperation(task, false, pollOperation);\n+                } catch (Exception e) {\n+                    // We want to catch all unexpected exceptions since all unhandled exceptions make\n+                    // ScheduledExecutorService halt the polling. It is better to print out the exception, and try again\n+                    // (on next poll cycle)\n+                    logger.error(", "originalCommit": "a5312790fe3da36f2e8e3ab5ad05794896970674", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1NzY4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392657680", "bodyText": "Fixed.", "author": "ssalonen", "createdAt": "2020-03-15T09:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1fe133ed3d1df19c79c36a17b1c498567a586b51", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java b/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java\nindex f14f8368fd..f9d6d74c0c 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java\n\n@@ -780,7 +774,7 @@ public class ModbusManagerImpl implements ModbusManager {\n                     // We want to catch all unexpected exceptions since all unhandled exceptions make\n                     // ScheduledExecutorService halt the polling. It is better to print out the exception, and try again\n                     // (on next poll cycle)\n-                    logger.error(\n+                    logger.warn(\n                             \"Execution of scheduled ({}ms) poll task {} failed unexpectedly. Ignoring exception, polling again according to poll interval.\",\n                             pollPeriodMillis, task, e);\n                 }\n"}}, {"oid": "1fe133ed3d1df19c79c36a17b1c498567a586b51", "url": "https://github.com/openhab/openhab-addons/commit/1fe133ed3d1df19c79c36a17b1c498567a586b51", "message": "[modbus] improvements based on code review\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-03-15T09:47:42Z", "type": "commit"}, {"oid": "3e359c6f2d7acb0fcdfae346c59db9e51972d279", "url": "https://github.com/openhab/openhab-addons/commit/3e359c6f2d7acb0fcdfae346c59db9e51972d279", "message": "[modbus] simplify\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-03-15T09:49:25Z", "type": "commit"}]}