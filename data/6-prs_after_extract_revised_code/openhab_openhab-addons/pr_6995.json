{"pr_number": 6995, "pr_title": "[bluetooth.bluegiga] Fix BlueGiga discovery and manufacturerData handling", "pr_createdAt": "2020-02-10T23:31:25Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/6995", "timeline": [{"oid": "86fd8ca85f21fd18e1edc0f29086ca45761eaca6", "url": "https://github.com/openhab/openhab-addons/commit/86fd8ca85f21fd18e1edc0f29086ca45761eaca6", "message": "[bluetooth.bluegiga] Fix BlueGiga discovery and manufacturerData parsing\n\nSigned-off-by: Patrick Fink <mail@pfink.de>", "committedDate": "2019-12-15T18:07:19Z", "type": "commit"}, {"oid": "2ef03802271b106ebbf29538f8df8345fc8e0d9c", "url": "https://github.com/openhab/openhab-addons/commit/2ef03802271b106ebbf29538f8df8345fc8e0d9c", "message": "[bluetooth.bluegiga] Handle ClassCastException on manufacturerData parsing\n\nSigned-off-by: Patrick Fink <mail@pfink.de>", "committedDate": "2020-02-10T23:26:40Z", "type": "commit"}, {"oid": "0ae2e118a61fd6de37d9a860fa62ae77037ccd37", "url": "https://github.com/openhab/openhab-addons/commit/0ae2e118a61fd6de37d9a860fa62ae77037ccd37", "message": "[bluetooth.bluegiga] Prepend Company ID to manufacturerData\n\nSigned-off-by: Patrick Fink <mail@pfink.de>", "committedDate": "2020-02-10T23:27:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4MzY4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6995#discussion_r377383689", "bodyText": "If you are going to be catching a ClassCastException you might as well forego the instanceof check.", "author": "cpmeister", "createdAt": "2020-02-10T23:45:14Z", "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java", "diffHunk": "@@ -193,10 +194,28 @@ public void bluegigaEventReceived(BlueGigaResponse event) {\n                         case EIR_FLAGS:\n                             break;\n                         case EIR_MANUFACTURER_SPECIFIC:\n-                            manufacturerData = (byte[]) eir.getRecord(EirDataType.EIR_MANUFACTURER_SPECIFIC);\n-                            if (manufacturerData.length > 2) {\n-                                int id = manufacturerData[0] + (manufacturerData[1] << 8);\n-                                manufacturer = id;\n+                            Object obj = eir.getRecord(EirDataType.EIR_MANUFACTURER_SPECIFIC);\n+                            if (obj != null && obj instanceof Map<?, ?>) {\n+                                try {\n+                                    @SuppressWarnings(\"unchecked\")\n+                                    Map<Short, int[]> eirRecord = (Map<Short, int[]>) obj;\n+                                    Map.Entry<Short, int[]> eirEntry = eirRecord.entrySet().iterator().next();\n+\n+                                    manufacturer = (int) eirEntry.getKey();\n+\n+                                    int[] manufacturerInt = eirEntry.getValue();\n+                                    manufacturerData = new byte[manufacturerInt.length + 2];\n+                                    // Convert short Company ID to bytes and add it to manufacturerData\n+                                    manufacturerData[0] = (byte) (manufacturer & 0xff);\n+                                    manufacturerData[1] = (byte) ((manufacturer >> 8) & 0xff);\n+                                    // Add Convert int custom data nd add it to manufacturerData\n+                                    for (int i = 0; i < manufacturerInt.length; i++) {\n+                                        manufacturerData[i + 2] = (byte) manufacturerInt[i];\n+                                    }\n+                                } catch (ClassCastException e) {\n+                                    logger.debug(\"Unsupported manufacturer specific record received from device {}\",\n+                                            address);\n+                                }", "originalCommit": "0ae2e118a61fd6de37d9a860fa62ae77037ccd37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5ODkwMg==", "url": "https://github.com/openhab/openhab-addons/pull/6995#discussion_r377398902", "bodyText": "It doesn't disturb maintainability of the code (so it's not much extra boilerplate code) and I think in terms of performance it's a bit cheaper then the ClassCastException. Nevertheless, I have no trong opinion on this.", "author": "pfink", "createdAt": "2020-02-11T00:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4MzY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMjc5OA==", "url": "https://github.com/openhab/openhab-addons/pull/6995#discussion_r377402798", "bodyText": "The ideal solution would involve generics to discern the type for a EirRecord, but I think that makes things a bit more complicated than is necessary. At the very least, make the try/catch block as small as possible so it is easy to understand the cast that is \"expected\" to go wrong.", "author": "cpmeister", "createdAt": "2020-02-11T00:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4MzY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3MDY3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6995#discussion_r377870676", "bodyText": "I agree with generics, but I also agree it would exceed the scope of this PR.", "author": "pfink", "createdAt": "2020-02-11T20:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4MzY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3MTQ4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6995#discussion_r377871489", "bodyText": "I decided for removing the instanceof check to not further segregate the code.", "author": "pfink", "createdAt": "2020-02-11T20:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4MzY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a7f4062164ec00031975001bc372975c6f3dca2c", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java b/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java\nindex e267e37357..178576eabd 100644\n--- a/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java\n+++ b/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java\n\n@@ -195,7 +195,7 @@ public class BlueGigaBluetoothDevice extends BluetoothDevice implements BlueGiga\n                             break;\n                         case EIR_MANUFACTURER_SPECIFIC:\n                             Object obj = eir.getRecord(EirDataType.EIR_MANUFACTURER_SPECIFIC);\n-                            if (obj != null && obj instanceof Map<?, ?>) {\n+                            if (obj != null) {\n                                 try {\n                                     @SuppressWarnings(\"unchecked\")\n                                     Map<Short, int[]> eirRecord = (Map<Short, int[]>) obj;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4NDAxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6995#discussion_r377384015", "bodyText": "why are you getting rid of these? Aren't these checks important?", "author": "cpmeister", "createdAt": "2020-02-10T23:46:17Z", "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java", "diffHunk": "@@ -229,27 +248,18 @@ public void bluegigaEventReceived(BlueGigaResponse event) {\n             }\n \n             if (connectionState == ConnectionState.DISCOVERING) {\n-                // We want to wait for an advertisement and a scan response before we call this discovered.\n-                // The intention is to gather a reasonable amount of data about the device given devices send\n-                // different data in different packets...\n-                // Note that this is possible a bit arbitrary and may be refined later.\n                 scanResponses.add(scanEvent.getPacketType());\n \n-                if ((scanResponses.contains(ScanResponseType.CONNECTABLE_ADVERTISEMENT)\n-                        || scanResponses.contains(ScanResponseType.DISCOVERABLE_ADVERTISEMENT)\n-                        || scanResponses.contains(ScanResponseType.NON_CONNECTABLE_ADVERTISEMENT))\n-                        && scanResponses.contains(ScanResponseType.SCAN_RESPONSE)) {", "originalCommit": "0ae2e118a61fd6de37d9a860fa62ae77037ccd37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMTIzNw==", "url": "https://github.com/openhab/openhab-addons/pull/6995#discussion_r377401237", "bodyText": "As mentioned in the first PR:\nI removed waiting for a SCAN_RESPONSE, as not all devices do send a scan response at all (e.g. EnOcean PTM215B) which completely blocks discovery.  I don't really know for which use case it was added, so I'm not sure what would be a better implementation. I think Bluez has no such thing (because Bluez discovery also works for devices that don't send a scan response).\nMore detailed thoughts on this:\nIf you have an idea how to follow the original intention of these checks while getting devices that don't send a scan response discovered as well, I'm open to it. Unfortunately, I only have \"fire&forget\" BLE devices who all do not send a scan response.\nI'm not saying it's the best option to remove it, but for now afaik we have not a single binding that makes use of scan response data, all of them check discovery upon manufacturerId or (short) device name which is based on advertisement, not on scan response. Anyhow, we have a binding in the pipe which does not send scan responses and does not work with this check.\nSo by removing it, everything that currently exists will still work, and bindings in the pipe which don't send a scan response will additionally work.\nI'm not sure if there will be a big need to have the scan response before discovery in the near future, but if yes, it'll probably be more a convienience functionality than something which is required for the discovery to properly work. If there is such use case, I think this can still be (re-)implemented in a better way so it'll work for all devices.\nPersonally, I don't want to come up with an ideal implementation without having a possibility to test this implementation properly with a real device using it. So for now, I'd like to continue with this unpretentious implementation which works better than the current one for all existing and upcoming bindings.\nWe can also put it in comments so that future people who need a scan response can build up on the past (not working) code base and this discussion.", "author": "pfink", "createdAt": "2020-02-11T00:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4NDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwOTM0OA==", "url": "https://github.com/openhab/openhab-addons/pull/6995#discussion_r377409348", "bodyText": "Well you convinced me. Just get rid of the scanResponses field too since that now serves no purpose.", "author": "cpmeister", "createdAt": "2020-02-11T01:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4NDAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b45796acba6026470a448c2d77d9ec985d817c9d", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java b/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java\nindex e267e37357..3bc79e7828 100644\n--- a/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java\n+++ b/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java\n\n@@ -248,8 +245,6 @@ public class BlueGigaBluetoothDevice extends BluetoothDevice implements BlueGiga\n             }\n \n             if (connectionState == ConnectionState.DISCOVERING) {\n-                scanResponses.add(scanEvent.getPacketType());\n-\n                 // Set our state to disconnected\n                 connectionState = ConnectionState.DISCONNECTED;\n                 connection = -1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMDExOQ==", "url": "https://github.com/openhab/openhab-addons/pull/6995#discussion_r377410119", "bodyText": "I wouldn't remove this just yet. Discovery needs to be reworked here and I think some of that work is happening in PR #6921 . There is no harm in leaving this in for now.", "author": "cpmeister", "createdAt": "2020-02-11T01:22:58Z", "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -341,7 +341,6 @@ public void bluegigaEventReceived(@Nullable BlueGigaResponse event) {\n                 device = new BlueGigaBluetoothDevice(this, new BluetoothAddress(scanEvent.getSender()),\n                         scanEvent.getAddressType());\n                 devices.put(sender, device);\n-                deviceDiscovered(device);", "originalCommit": "0ae2e118a61fd6de37d9a860fa62ae77037ccd37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2252be2ceb35643e5b98c0e5e31fb41fdc342f36", "chunk": "diff --git a/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java b/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java\nindex 369b74d90c..eaf08050e5 100644\n--- a/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java\n+++ b/bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java\n\n@@ -341,6 +341,7 @@ public class BlueGigaBridgeHandler extends BaseBridgeHandler\n                 device = new BlueGigaBluetoothDevice(this, new BluetoothAddress(scanEvent.getSender()),\n                         scanEvent.getAddressType());\n                 devices.put(sender, device);\n+                deviceDiscovered(device);\n             }\n \n             return;\n"}}, {"oid": "a7f4062164ec00031975001bc372975c6f3dca2c", "url": "https://github.com/openhab/openhab-addons/commit/a7f4062164ec00031975001bc372975c6f3dca2c", "message": "[bluetooth.bluegiga] Remove instanceof check\n\nSigned-off-by: Patrick Fink <mail@pfink.de>", "committedDate": "2020-02-11T19:52:22Z", "type": "commit"}, {"oid": "b45796acba6026470a448c2d77d9ec985d817c9d", "url": "https://github.com/openhab/openhab-addons/commit/b45796acba6026470a448c2d77d9ec985d817c9d", "message": "[bluetooth.bluegiga] Remove obsolete scanResponses attribute\n\nSigned-off-by: Patrick Fink <mail@pfink.de>", "committedDate": "2020-02-11T19:55:01Z", "type": "commit"}, {"oid": "4c62190a1075321c1924e7c3f77a1bc836099586", "url": "https://github.com/openhab/openhab-addons/commit/4c62190a1075321c1924e7c3f77a1bc836099586", "message": "[bluetooth.bluegiga] Add comment regarding scan response discovery\n\nSigned-off-by: Patrick Fink <mail@pfink.de>", "committedDate": "2020-02-11T20:07:40Z", "type": "commit"}, {"oid": "2252be2ceb35643e5b98c0e5e31fb41fdc342f36", "url": "https://github.com/openhab/openhab-addons/commit/2252be2ceb35643e5b98c0e5e31fb41fdc342f36", "message": "[bluetooth.bluegiga] Keep deviceDiscovered for now to avoid conflict with #6921\n\nSigned-off-by: Patrick Fink <mail@pfink.de>", "committedDate": "2020-02-11T20:13:45Z", "type": "commit"}, {"oid": "fe25b4fa7f29b5056b97e2883f67d2500b4f458e", "url": "https://github.com/openhab/openhab-addons/commit/fe25b4fa7f29b5056b97e2883f67d2500b4f458e", "message": "[bluetooth.bluegiga] Fix comment position\n\nSigned-off-by: Patrick Fink <mail@pfink.de>", "committedDate": "2020-02-11T20:18:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyOTY4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6995#discussion_r379829681", "bodyText": "Are we sure that all needed data is always received by one scan event or could it possible that bluetooth device send them as a separated scan events?", "author": "paulianttila", "createdAt": "2020-02-15T12:49:16Z", "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java", "diffHunk": "@@ -229,27 +245,20 @@ public void bluegigaEventReceived(BlueGigaResponse event) {\n             }\n \n             if (connectionState == ConnectionState.DISCOVERING) {\n-                // We want to wait for an advertisement and a scan response before we call this discovered.\n-                // The intention is to gather a reasonable amount of data about the device given devices send\n-                // different data in different packets...\n-                // Note that this is possible a bit arbitrary and may be refined later.\n-                scanResponses.add(scanEvent.getPacketType());\n-\n-                if ((scanResponses.contains(ScanResponseType.CONNECTABLE_ADVERTISEMENT)\n-                        || scanResponses.contains(ScanResponseType.DISCOVERABLE_ADVERTISEMENT)\n-                        || scanResponses.contains(ScanResponseType.NON_CONNECTABLE_ADVERTISEMENT))\n-                        && scanResponses.contains(ScanResponseType.SCAN_RESPONSE)) {", "originalCommit": "fe25b4fa7f29b5056b97e2883f67d2500b4f458e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}