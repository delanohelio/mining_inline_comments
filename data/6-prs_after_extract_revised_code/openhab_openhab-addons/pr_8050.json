{"pr_number": 8050, "pr_title": "[automower] Initial contribution of the automower binding", "pr_createdAt": "2020-06-30T21:36:56Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8050", "timeline": [{"oid": "fd66c47681acb91ed4aff4335b6641614d70591d", "url": "https://github.com/openhab/openhab-addons/commit/fd66c47681acb91ed4aff4335b6641614d70591d", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-07-01T19:22:00Z", "type": "forcePushed"}, {"oid": "08dace32b5c6b16f4a54993b3d988a34ce995474", "url": "https://github.com/openhab/openhab-addons/commit/08dace32b5c6b16f4a54993b3d988a34ce995474", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-07-01T19:25:15Z", "type": "forcePushed"}, {"oid": "f3790bbf9bbfde1d07a45e45bc9681cafcf0fb09", "url": "https://github.com/openhab/openhab-addons/commit/f3790bbf9bbfde1d07a45e45bc9681cafcf0fb09", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-07-01T19:30:41Z", "type": "forcePushed"}, {"oid": "c56a179ca6e7f4639de8ac1dfa5466c04d5153d3", "url": "https://github.com/openhab/openhab-addons/commit/c56a179ca6e7f4639de8ac1dfa5466c04d5153d3", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-07-01T19:34:13Z", "type": "forcePushed"}, {"oid": "3471c08c69307eeedc32ae8f7536b91d9b65804e", "url": "https://github.com/openhab/openhab-addons/commit/3471c08c69307eeedc32ae8f7536b91d9b65804e", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-07-02T04:45:01Z", "type": "forcePushed"}, {"oid": "004ab69282d5a029551504b628aa3afd7ae50e04", "url": "https://github.com/openhab/openhab-addons/commit/004ab69282d5a029551504b628aa3afd7ae50e04", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-07-02T04:45:43Z", "type": "forcePushed"}, {"oid": "182f7aeac4edd1da3f3e101dc6c56f86feee783c", "url": "https://github.com/openhab/openhab-addons/commit/182f7aeac4edd1da3f3e101dc6c56f86feee783c", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-07-02T04:54:52Z", "type": "forcePushed"}, {"oid": "3b14293a303082555d98b6002f974458272ff139", "url": "https://github.com/openhab/openhab-addons/commit/3b14293a303082555d98b6002f974458272ff139", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-07-02T05:05:57Z", "type": "forcePushed"}, {"oid": "3b14293a303082555d98b6002f974458272ff139", "url": "https://github.com/openhab/openhab-addons/commit/3b14293a303082555d98b6002f974458272ff139", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-07-02T05:05:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4MTAxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452481012", "bodyText": "You could store authResponse to a local variable and check that for null to remove the suppression.", "author": "fwolter", "createdAt": "2020-07-09T20:48:28Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridge.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.automower.internal.rest.api.authentication.AuthenticationApi;\n+import org.openhab.binding.automower.internal.rest.api.authentication.dto.PostOAuth2Response;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.AutomowerConnectApi;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommand;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandAttributes;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+/**\n+ * The {@link AutomowerBridge} allows the communication to the various Husqvarna rest apis like the\n+ * AutomowerConnectApi or the AuthenticationApi\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridge {\n+\n+    private final String appKey;\n+    private final String userName;\n+    private final String password;\n+\n+    private @Nullable PostOAuth2Response authResponse;\n+    private final AutomowerConnectApi automowerApi;\n+    private final AuthenticationApi authApi;\n+\n+    public AutomowerBridge(String appKey, String userName, String password, HttpClient httpClient,\n+            ScheduledExecutorService scheduler) {\n+        this.appKey = appKey;\n+        this.userName = userName;\n+        this.password = password;\n+\n+        this.automowerApi = new AutomowerConnectApi(httpClient);\n+        this.authApi = new AuthenticationApi(httpClient);\n+    }\n+\n+    private PostOAuth2Response authenticate() throws AutomowerCommunicationException {\n+        PostOAuth2Response result = authResponse;\n+        if (result == null) {\n+            result = authApi.loginOAuth2(appKey, userName, password);\n+            authResponse = result;\n+        }\n+        return result;\n+    }\n+\n+    private PostOAuth2Response refreshAuthentication() throws AutomowerCommunicationException {\n+        if (authResponse == null) {\n+            throw new AutomowerCommunicationException(\"Unable to refresh authentication. Initial authentication has not been performed\");\n+        } else {\n+            @SuppressWarnings(\"null\")\n+            PostOAuth2Response result = authApi.loginWithRefreshToken(appKey, authResponse.getRefresh_token());", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NDQwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453164409", "bodyText": "Don't like such workarounds for a situation that clearly cannot happen (in the else branch of the null check). Still as it is nicer to work with the local variable compared to querying the same field multipe times, so it makes sense.", "author": "maxpg", "createdAt": "2020-07-11T06:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4MTAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridge.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridge.java\nindex 61842385a5..d3a9d800b1 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridge.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridge.java\n\n@@ -27,6 +27,7 @@ import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mowe\n import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+import org.openhab.binding.automower.internal.things.AutomowerCommand;\n \n /**\n  * The {@link AutomowerBridge} allows the communication to the various Husqvarna rest apis like the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDI2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452484267", "bodyText": "The default mentioned in the readme is 1h.", "author": "fwolter", "createdAt": "2020-07-09T20:54:39Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NDUyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453164522", "bodyText": "Wow, you really took a detailed look! Thanks a lot. Will fix that", "author": "maxpg", "createdAt": "2020-07-11T06:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDYwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452484607", "bodyText": "Inner classes don't need to be annotated with NonNullByDefault.", "author": "fwolter", "createdAt": "2020-07-09T20:55:16Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NDc4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453164789", "bodyText": "Thats an interesting one:\nEclipse: Shows a warning when I do this annotation on the inner class as you say\nBuild: Shows a warning (code analysis report) if I don't add this annotation to the inner class...\nI decided to go for the solution that has no build warning... How should I sove it?", "author": "maxpg", "createdAt": "2020-07-11T06:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3OTc5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453179797", "bodyText": "There has been a bug around in the static code analysis. It was fixed, but this repo still uses the unfixed version. You can remove the annotation, which will generate the false positive.", "author": "fwolter", "createdAt": "2020-07-11T10:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0NDY3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453844677", "bodyText": "ok, will do that", "author": "maxpg", "createdAt": "2020-07-13T18:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTI0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452485241", "bodyText": "Logging to info should be used rarely. This could be debug.", "author": "fwolter", "createdAt": "2020-07-09T20:56:28Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NDgzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453164838", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-07-11T06:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTgwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452485806", "bodyText": "Do you log the stack trace by intention? Would logging the message suffice?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.warn(\"Unable to fetch automowers\", e);\n          \n          \n            \n                            logger.warn(\"Unable to fetch automowers: {}\", e.getMessage());", "author": "fwolter", "createdAt": "2020-07-09T20:57:29Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NTEyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453165124", "bodyText": "Actually yes. The bridge.getAutomowers() might need to do authentication, refresh the authentication token and queries the actual api. The message alone might not give me enough information to distinguish that... But maybe I could log the stacktrace with level debug. What do you think?", "author": "maxpg", "createdAt": "2020-07-11T06:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4MTQyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453181422", "bodyText": "From the usability perspective the message should be meaningful by itself, so that the user don't need to read the stacktrace to tackle the problem. Also, it seems a bit unreasonable to log a stacktrace when the credentials are incorrect.", "author": "fwolter", "createdAt": "2020-07-11T10:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0NTkwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453845901", "bodyText": "makes sense", "author": "maxpg", "createdAt": "2020-07-13T18:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjA1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452486053", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "fwolter", "createdAt": "2020-07-09T20:57:59Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NTE5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453165190", "bodyText": "sure", "author": "maxpg", "createdAt": "2020-07-11T06:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjExOA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452486118", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "fwolter", "createdAt": "2020-07-09T20:58:06Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MDQ1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453170450", "bodyText": "Yes, I think I don't need it", "author": "maxpg", "createdAt": "2020-07-11T08:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjExOA=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4Njg3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452486876", "bodyText": "After the thing status is set to unknown, the framework starts to work with this Thing: handleCommand() and dispose() can be invoked (concurrently). You might want to move it to the end of the method.", "author": "fwolter", "createdAt": "2020-07-09T20:59:37Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NTQ3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453165474", "bodyText": "Is this enough to move it to the end of the method or should the handler methods be synchronized?\nBecause when multiple threads interact with the object and members might be updated from different threads I guess we would need some synchronization to ensure memory visibility accross threads?", "author": "maxpg", "createdAt": "2020-07-11T07:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4Njg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4MTgxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453181810", "bodyText": "It's enough to move it to the end. The framework takes care of thread-safety until setting it to unknown. The handlers shouldn't be synchronized but the code within should be thread-safe. I.e. using synchronized Lists, ConcurrentHashMap etc. if they can be updated concurrently.", "author": "fwolter", "createdAt": "2020-07-11T10:36:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4Njg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0NjE0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453846145", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-07-13T18:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4Njg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NzAyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452487026", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-07-09T20:59:55Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NTQ5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453165492", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-11T07:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NzAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NzEwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452487103", "bodyText": "No harm in canceling a task that is already cancelled. Same for below.", "author": "fwolter", "createdAt": "2020-07-09T21:00:05Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);\n+\n+                startAutomowerBridgePolling(bridge);\n+            }\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob == null || automowerBridgePollingJob.isCancelled()) {", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NTU5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453165597", "bodyText": "will do that", "author": "maxpg", "createdAt": "2020-07-11T07:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NzEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4ODE3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452488176", "bodyText": "You can eliminate the compiler warning by assigning the field to a local variable. See above.", "author": "fwolter", "createdAt": "2020-07-09T21:02:21Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);\n+\n+                startAutomowerBridgePolling(bridge);\n+            }\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob == null || automowerBridgePollingJob.isCancelled()) {\n+            if (bridgeConfiguration.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = bridgeConfiguration.getPollingInterval();\n+            }\n+            automowerBridgePollingJob = scheduler.scheduleWithFixedDelay(\n+                    new AutomowerBridgePollingRunnable(this, bridge), 1, automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob != null && !automowerBridgePollingJob.isCancelled()) {\n+            automowerBridgePollingJob.cancel(true);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NTY2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453165667", "bodyText": "Will do that", "author": "maxpg", "createdAt": "2020-07-11T07:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4ODE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4ODY3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452488670", "bodyText": "Catching Exception catches also all RuntimeExceptions. Better specify the concrete type.", "author": "fwolter", "createdAt": "2020-07-09T21:03:18Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);\n+\n+                startAutomowerBridgePolling(bridge);\n+            }\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob == null || automowerBridgePollingJob.isCancelled()) {\n+            if (bridgeConfiguration.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = bridgeConfiguration.getPollingInterval();\n+            }\n+            automowerBridgePollingJob = scheduler.scheduleWithFixedDelay(\n+                    new AutomowerBridgePollingRunnable(this, bridge), 1, automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob != null && !automowerBridgePollingJob.isCancelled()) {\n+            automowerBridgePollingJob.cancel(true);\n+            automowerBridgePollingJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+    }\n+\n+    public AutomowerBridge getAutomowerBridge() {\n+        return bridge;\n+    }\n+\n+    public Optional<MowerListResult> getAutomowers() {\n+        try {\n+            return Optional.of(bridge.getAutomowers());\n+        } catch (Exception e) {", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2NTcyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453165727", "bodyText": "Makes sense", "author": "maxpg", "createdAt": "2020-07-11T07:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4ODY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4OTI4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452489282", "bodyText": "Please add the NonNullByDefault annotation.", "author": "fwolter", "createdAt": "2020-07-09T21:04:35Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.discovery;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_AUTOMOWER;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+\n+/**\n+ * The {@link AutomowerDiscoveryService} is responsible for discovering new mowers available for the\n+ * configured app key.\n+ * \n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public class AutomowerDiscoveryService extends AbstractDiscoveryService {", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MDQ4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453170480", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-11T08:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4OTI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java\nindex cd282ca2f4..31db786f86 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java\n\n@@ -19,6 +19,7 @@ import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4OTc1OA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452489758", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (registeredMowers.isPresent()) {\n          \n          \n            \n            \n          \n          \n            \n                        for (Mower mower : registeredMowers.get().getData()) {\n          \n          \n            \n                    registeredMowers.ifPresent(mowers -> {\n          \n          \n            \n                        for (Mower mower : mowers.getData()) {", "author": "fwolter", "createdAt": "2020-07-09T21:05:32Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.discovery;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_AUTOMOWER;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+\n+/**\n+ * The {@link AutomowerDiscoveryService} is responsible for discovering new mowers available for the\n+ * configured app key.\n+ * \n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public class AutomowerDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final AutomowerBridgeHandler bridgeHandler;\n+\n+    public AutomowerDiscoveryService(AutomowerBridgeHandler bridgeHandler) {\n+        super(Collections.singleton(THING_TYPE_AUTOMOWER), 10, false);\n+        this.bridgeHandler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        Optional<MowerListResult> registeredMowers = bridgeHandler.getAutomowers();\n+        if (registeredMowers.isPresent()) {\n+\n+            for (Mower mower : registeredMowers.get().getData()) {", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2ODk2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453168968", "bodyText": "will change it", "author": "maxpg", "createdAt": "2020-07-11T07:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4OTc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java\nindex cd282ca2f4..31db786f86 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java\n\n@@ -19,6 +19,7 @@ import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5MDk5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452490997", "bodyText": "See above and below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                    } catch (InterruptedException | TimeoutException | ExecutionException e) {", "author": "fwolter", "createdAt": "2020-07-09T21:08:05Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.authentication;\n+\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.Fields;\n+import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n+import org.openhab.binding.automower.internal.rest.api.authentication.dto.PostOAuth2Response;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Gives access to the Husqvarna authentication api\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AuthenticationApi extends HusqvarnaApi {\n+\n+    public AuthenticationApi(HttpClient httpClient) {\n+        super(httpClient);\n+    }\n+\n+    @Override\n+    public String getBaseUrl() {\n+        return \"https://api.authentication.husqvarnagroup.dev/v1\";\n+    }\n+\n+    public PostOAuth2Response loginOAuth2(String appKey, String username, String password)\n+            throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/oauth2/token\");\n+        request.method(HttpMethod.POST);\n+\n+        Fields fields = new Fields();\n+        fields.put(\"grant_type\", \"password\");\n+        fields.put(\"client_id\", appKey);\n+        fields.put(\"username\", username);\n+        fields.put(\"password\", password);\n+\n+        request.content(new FormContentProvider(fields));\n+\n+        ContentResponse response;\n+\n+        try {\n+            response = request.send();\n+        } catch (Exception e) {", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MDcxMw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453170713", "bodyText": "Will change that. I tried to do this to have a defined exception even when the 3rd party lib would throw something unexpected (null pointer or whatever). Probably the framework has some handling of such runtime exceptions and keeps my thing/bridge in a consistent state, so I will change that.", "author": "maxpg", "createdAt": "2020-07-11T08:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5MDk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4Mjc5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453182798", "bodyText": "The framework will log any uncatched exceptions. Since this would be a bug in you binding or a third-party lib, it's good to fail hard. The framework takes care that this doesn't affect itself or any other bindings.", "author": "fwolter", "createdAt": "2020-07-11T10:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5MDk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java\nindex 73cdbd9ba7..2b25112249 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java\n\n@@ -12,13 +12,16 @@\n  */\n package org.openhab.binding.automower.internal.rest.api.authentication;\n \n-import org.apache.commons.httpclient.HttpStatus;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jetty.client.HttpClient;\n import org.eclipse.jetty.client.api.ContentResponse;\n import org.eclipse.jetty.client.api.Request;\n import org.eclipse.jetty.client.util.FormContentProvider;\n import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n import org.eclipse.jetty.util.Fields;\n import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n import org.openhab.binding.automower.internal.rest.api.authentication.dto.PostOAuth2Response;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5Mjk4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452492983", "bodyText": "Can you specify the SerializedName annotation and use camel case instead?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String access_token;\n          \n          \n            \n                private String accessToken;", "author": "fwolter", "createdAt": "2020-07-09T21:12:27Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/dto/PostOAuth2Response.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.authentication.dto;\n+\n+/**\n+ * Authentication response\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public class PostOAuth2Response {\n+    private String access_token;", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTAwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453169003", "bodyText": "Yes, will do that", "author": "maxpg", "createdAt": "2020-07-11T07:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5Mjk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/dto/PostOAuth2Response.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/dto/PostOAuth2Response.java\nindex 810ddb4e0e..5382cb7f1e 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/dto/PostOAuth2Response.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/dto/PostOAuth2Response.java\n\n@@ -12,26 +12,39 @@\n  */\n package org.openhab.binding.automower.internal.rest.api.authentication.dto;\n \n+import com.google.gson.annotations.SerializedName;\n+\n /**\n  * Authentication response\n  *\n  * @author Markus Pfleger - Initial contribution\n  */\n public class PostOAuth2Response {\n-    private String access_token;\n+    @SerializedName(value = \"access_token\")\n+    private String accessToken;\n+\n     private String scope;\n-    private long expires_in;\n-    private String refresh_token;\n+\n+    @SerializedName(value = \"expires_in\")\n+    private long expiresIn;\n+\n+    @SerializedName(value = \"refresh_token\")\n+    private String refreshToken;\n+\n     private String provider;\n-    private String user_id;\n-    private String token_type;\n \n-    public String getAccess_token() {\n-        return access_token;\n+    @SerializedName(value = \"user_id\")\n+    private String userId;\n+\n+    @SerializedName(value = \"token_type\")\n+    private String tokenType;\n+\n+    public String getAccessToken() {\n+        return accessToken;\n     }\n \n-    public void setAccess_token(String access_token) {\n-        this.access_token = access_token;\n+    public void setAccessToken(String access_token) {\n+        this.accessToken = access_token;\n     }\n \n     public String getScope() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NTA1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452495056", "bodyText": "It's good practice to append the unit to the field name e.g. commandDurationMin", "author": "fwolter", "createdAt": "2020-07-09T21:16:37Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTEwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453169102", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-11T07:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NTA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NjMwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452496305", "bodyText": "Can you put the static final fields together?", "author": "fwolter", "createdAt": "2020-07-09T21:19:20Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTEyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453169128", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-11T07:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NjMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NjQ1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452496452", "bodyText": "See above.", "author": "fwolter", "createdAt": "2020-07-09T21:19:35Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MDc1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453170759", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-11T08:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NjQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MTY2NA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462491664", "bodyText": "Can you change it? E.g. lastQueryTimeMs", "author": "fwolter", "createdAt": "2020-07-29T18:10:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NjQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NzExMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452497111", "bodyText": "The default mentioned in the readme is 5min.", "author": "fwolter", "createdAt": "2020-07-09T21:21:01Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTY0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453169640", "bodyText": "Thx", "author": "maxpg", "createdAt": "2020-07-11T07:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NzExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5ODQ1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452498453", "bodyText": "Is this used anywhere?", "author": "fwolter", "createdAt": "2020-07-09T21:24:00Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTY4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453169680", "bodyText": "Not anymore, thx", "author": "maxpg", "createdAt": "2020-07-11T07:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5ODQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDAxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452500017", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-07-09T21:27:13Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTc5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453169796", "bodyText": "Yes, one question. Do you know, when the bridge would go down (state offline), would the things automatically become offline as well or would i have to listen for the state of the bridge and  adapt the things state accordingly?\nBecause I would have assumed that this is framework functionality (if a thing requires a bridge for communication it would not be reachable when the bridge goes down). Other bindings seem to do this manually though...", "author": "maxpg", "createdAt": "2020-07-11T08:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4MjE0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453182149", "bodyText": "The child Things are set to offline with the detail BRIDGE_OFFLINE, when the bridge goes offline. Setting the child Things offline is not necessary.", "author": "fwolter", "createdAt": "2020-07-11T10:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NTY2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r454655660", "bodyText": "Perfect, thanks", "author": "maxpg", "createdAt": "2020-07-14T21:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDcwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452500708", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-07-09T21:28:48Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTkwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453169905", "bodyText": "thx", "author": "maxpg", "createdAt": "2020-07-11T08:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDgwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452500801", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-07-09T21:29:01Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MDk1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453170957", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-11T08:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDkyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452500921", "bodyText": "See above and below: Canceling and null check", "author": "fwolter", "createdAt": "2020-07-09T21:29:18Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MDAzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453170036", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-07-11T08:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMTkwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452501902", "bodyText": "mower cannot be null at this point. You could remove the null check.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n          \n          \n            \n                            && mower.getAttributes().getMetadata().isConnected()) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n          \n          \n            \n                            && mower.getAttributes().getMetadata().isConnected();", "author": "fwolter", "createdAt": "2020-07-09T21:31:24Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MDEzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453170135", "bodyText": "thx", "author": "maxpg", "createdAt": "2020-07-11T08:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMTkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMjM5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452502394", "bodyText": "getAutomowerBridge() can return null. Better add a null check. Same for below.", "author": "fwolter", "createdAt": "2020-07-09T21:32:31Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTime > maxQueryFrequencyNanos) {\n+            lastQueryTime = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                Mower mower = getAutomowerBridge().getAutomowerStatus(id);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTA0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453171045", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-11T08:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMjM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMjY5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452502691", "bodyText": "See above: logging stack trace", "author": "fwolter", "createdAt": "2020-07-09T21:33:15Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTime > maxQueryFrequencyNanos) {\n+            lastQueryTime = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                Mower mower = getAutomowerBridge().getAutomowerStatus(id);\n+\n+                if (isValidResult(mower)) {\n+                    initializeProperties(mower);\n+\n+                    updateChannelState(mower);\n+\n+                    if (isConnected(mower)) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"@text/comm-error-mower-not-connected-to-cloud\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"@text/comm-error-query-mower-failed\");\n+                }\n+            } catch (AutomowerCommunicationException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mower-failed\");\n+                logger.warn(\"Unable to query automower status for:  {}\", id, e);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NjE4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r454656185", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-07-14T21:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMjY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzU1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452503550", "bodyText": "Is there a reason why you feed the result back into a Channel instead of logging it?", "author": "fwolter", "createdAt": "2020-07-09T21:35:12Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTime > maxQueryFrequencyNanos) {\n+            lastQueryTime = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                Mower mower = getAutomowerBridge().getAutomowerStatus(id);\n+\n+                if (isValidResult(mower)) {\n+                    initializeProperties(mower);\n+\n+                    updateChannelState(mower);\n+\n+                    if (isConnected(mower)) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"@text/comm-error-mower-not-connected-to-cloud\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"@text/comm-error-query-mower-failed\");\n+                }\n+            } catch (AutomowerCommunicationException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mower-failed\");\n+                logger.warn(\"Unable to query automower status for:  {}\", id, e);\n+            }\n+        }\n+    }\n+\n+    private synchronized void sendAutomowerCommand(Command command) {\n+        String id = automowerId.get();\n+        try {\n+            if (getAutomowerBridge().sendAutomowerCommand(id, command.toString(), commandDuration.get())) {\n+                updateState(CHANNEL_COMMAND_RESPONSE,\n+                        new StringType(\"Successfully sent command \" + command.toString()));", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTIzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453171236", "bodyText": "So I can create an item where I can view the response to my command in the app... Basically you are right, it is for debugging mostly, because my command should have an affect on some other channels (mower action,...). If I send a command and nothing would change I am interested in that.", "author": "maxpg", "createdAt": "2020-07-11T08:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4MzM5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453183391", "bodyText": "It should be logged if the command could not be executed, because of a communication problem or bug. But if this is expected to fail e.g. because the mower is in a state where the command is rejected, I don't see any better solution to feedback via a Channel.", "author": "fwolter", "createdAt": "2020-07-11T10:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzA5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r454657098", "bodyText": "Ok, thanks. I still removed it. As I changed the whole command sending to actions instead of channels I also dropped the feedback through the channel. Usually the command will reflect in a change of the mower state, so you should see if it works.", "author": "maxpg", "createdAt": "2020-07-14T21:30:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzY4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452503685", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-07-09T21:35:30Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTime > maxQueryFrequencyNanos) {\n+            lastQueryTime = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                Mower mower = getAutomowerBridge().getAutomowerStatus(id);\n+\n+                if (isValidResult(mower)) {\n+                    initializeProperties(mower);\n+\n+                    updateChannelState(mower);\n+\n+                    if (isConnected(mower)) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"@text/comm-error-mower-not-connected-to-cloud\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"@text/comm-error-query-mower-failed\");\n+                }\n+            } catch (AutomowerCommunicationException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mower-failed\");\n+                logger.warn(\"Unable to query automower status for:  {}\", id, e);\n+            }\n+        }\n+    }\n+\n+    private synchronized void sendAutomowerCommand(Command command) {\n+        String id = automowerId.get();\n+        try {\n+            if (getAutomowerBridge().sendAutomowerCommand(id, command.toString(), commandDuration.get())) {\n+                updateState(CHANNEL_COMMAND_RESPONSE,\n+                        new StringType(\"Successfully sent command \" + command.toString()));\n+            } else {\n+                updateState(CHANNEL_COMMAND_RESPONSE, new StringType(\"Unable to send command \" + command.toString()));\n+            }\n+        } catch (AutomowerCommunicationException e) {\n+            updateState(CHANNEL_COMMAND_RESPONSE,\n+                    new StringType(\"Unable to send command \" + command.toString() + \": \" + e.getMessage()));\n+\n+            logger.warn(\"Unable to send command to automower: {}\", id, e);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzYwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r454657600", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-07-14T21:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzY4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzc5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452503791", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-07-09T21:35:46Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTime > maxQueryFrequencyNanos) {\n+            lastQueryTime = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                Mower mower = getAutomowerBridge().getAutomowerStatus(id);\n+\n+                if (isValidResult(mower)) {\n+                    initializeProperties(mower);\n+\n+                    updateChannelState(mower);\n+\n+                    if (isConnected(mower)) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"@text/comm-error-mower-not-connected-to-cloud\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"@text/comm-error-query-mower-failed\");\n+                }\n+            } catch (AutomowerCommunicationException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mower-failed\");\n+                logger.warn(\"Unable to query automower status for:  {}\", id, e);\n+            }\n+        }\n+    }\n+\n+    private synchronized void sendAutomowerCommand(Command command) {\n+        String id = automowerId.get();\n+        try {\n+            if (getAutomowerBridge().sendAutomowerCommand(id, command.toString(), commandDuration.get())) {\n+                updateState(CHANNEL_COMMAND_RESPONSE,\n+                        new StringType(\"Successfully sent command \" + command.toString()));\n+            } else {\n+                updateState(CHANNEL_COMMAND_RESPONSE, new StringType(\"Unable to send command \" + command.toString()));\n+            }\n+        } catch (AutomowerCommunicationException e) {\n+            updateState(CHANNEL_COMMAND_RESPONSE,\n+                    new StringType(\"Unable to send command \" + command.toString() + \": \" + e.getMessage()));\n+\n+            logger.warn(\"Unable to send command to automower: {}\", id, e);\n+        }\n+\n+        updateAutomowerState();\n+    }\n+\n+    private void updateChannelState(Mower mower) {\n+        if (isValidResult(mower)) {\n+            /*\n+             * if (info.getError() != null) {\n+             * updateErrorInfo(info.getError());\n+             * refreshLastErrorInfo();\n+             * } else {\n+             * clearErrorInfo();\n+             * }\n+             */", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTM1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453171355", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-11T08:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTM3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452511375", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-07-09T21:53:09Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);\n+\n+                startAutomowerBridgePolling(bridge);\n+            }\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob == null || automowerBridgePollingJob.isCancelled()) {\n+            if (bridgeConfiguration.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODM0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r454658340", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-07-14T21:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NjcyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r456886728", "bodyText": "Logging to info should be used rarely. This could be debug.", "author": "fwolter", "createdAt": "2020-07-19T09:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NzU1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462487554", "bodyText": "Can you change it or comment on this?", "author": "fwolter", "createdAt": "2020-07-29T18:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NTA0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462545041", "bodyText": "Hm, and how should a user of the plugin be informed about such a misconfiguration? When I use a binding and configure a value that is not used by the binding I definitely would expect that to be logged.\nFor me this would be a very rare log. It logs one line when the binding is loaded and when it was configured with wrong values.", "author": "maxpg", "createdAt": "2020-07-29T19:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NzQ5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462547499", "bodyText": "Best way would be to set the thing OFFLINE with the detail CONFIGURATION_ERROR and an appropriate message as a third parameter, which will be displayed in PaperUI.\nYou can log this to debug or warn.", "author": "fwolter", "createdAt": "2020-07-29T19:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1MTM0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462551341", "bodyText": "Ok, that makes sense. Then I will completely get rid of the log. If it is visible in the status message I think this should be enough", "author": "maxpg", "createdAt": "2020-07-29T19:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 5c414463cc..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,16 +46,13 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n-    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTYwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452511605", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-07-09T21:53:45Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);", "originalCommit": "3b14293a303082555d98b6002f974458272ff139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0NDMxMw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r453844313", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-07-13T18:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODQ0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r454658440", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-07-14T21:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5Mjc5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462492798", "bodyText": "Can you change it? Logging to info should be used rarely. This could be debug.", "author": "fwolter", "createdAt": "2020-07-29T18:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NTI2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462545265", "bodyText": "Same question as above: Hm, and how should a user of the plugin be informed about such a misconfiguration? When I use a binding and configure a value that is not used by the binding I definitely would expect that to be logged.\nFor me this would be a very rare log. It logs one line when the binding is loaded and when it was configured with wrong values.", "author": "maxpg", "createdAt": "2020-07-29T19:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1ODgyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462558820", "bodyText": "will also use the offline state", "author": "maxpg", "createdAt": "2020-07-29T20:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 406f6784bf..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,14 +14,15 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.text.DateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NDA5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r456884097", "bodyText": "Can you add the workaround for the bug discussed in #8116?", "author": "fwolter", "createdAt": "2020-07-19T09:18:52Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/AutomowerActions.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.actions;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.automower.internal.things.AutomowerCommand;\n+import org.openhab.binding.automower.internal.things.AutomowerHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@ThingActionsScope(name = \"automower\")\n+@NonNullByDefault\n+public class AutomowerActions implements ThingActions {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerActions.class);\n+    private @Nullable AutomowerHandler handler;\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        this.handler = (AutomowerHandler) handler;\n+    }\n+\n+    @Override\n+    public @Nullable AutomowerHandler getThingHandler() {\n+        return handler;\n+    }\n+\n+    @RuleAction(label = \"@text/action-start-label\", description = \"@text/action-start-desc\")\n+    public void start(\n+            @ActionInput(name = \"duration\", label = \"@text/action-input-duration-label\", description = \"@text/action-input-duration-desc\") int durationMin) {\n+        AutomowerHandler automowerHandler = handler;\n+        if (automowerHandler == null) {\n+            logger.warn(\"Automower Action service ThingHandler is null!\");\n+        } else {\n+            automowerHandler.sendAutomowerCommand(AutomowerCommand.START, durationMin);\n+        }\n+    }\n+\n+    public static void start(@Nullable ThingActions actions, int durationMin) {", "originalCommit": "84942d411a6d7df8f5935f6b9a9e594205c173ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyNjQ5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r457626499", "bodyText": "Hm, not sure. I think this is a really ugly workaround (if you mean the invokeMethodOf stuff)...\nIsn't there another solution? Can't I wait for a workaround in the framework and document that the binding suffers from this problem?", "author": "maxpg", "createdAt": "2020-07-20T19:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NDA5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyODg0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r457628848", "bodyText": "Since this will only be fixed in OH3, this workaround is getting implemented in all bindings, currently.", "author": "fwolter", "createdAt": "2020-07-20T19:04:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NDA5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMDAzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r457630039", "bodyText": "Ok. Btw. how is the workflow of bringing bindings to openhab 3. Should this be done short before the release? Or asap and then merge all fixes/changes to two branches?", "author": "maxpg", "createdAt": "2020-07-20T19:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NDA5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMTc2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r457631763", "bodyText": "Actually OH2 bindings should be compatible with OH3. The hack can be removed when OH3 has been released, I guess.", "author": "fwolter", "createdAt": "2020-07-20T19:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NDA5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNTM2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r457635362", "bodyText": "Thx, workaround will be applied in next update to the PR", "author": "maxpg", "createdAt": "2020-07-20T19:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NDA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/AutomowerActions.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/AutomowerActions.java\nindex 0c4f88b88e..9d71c34554 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/AutomowerActions.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/AutomowerActions.java\n\n@@ -12,6 +12,9 @@\n  */\n package org.openhab.binding.automower.internal.actions;\n \n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.thing.binding.ThingActions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NzAxMw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r456887013", "bodyText": "This will also catch RuntimeExceptions. Better specify the concrete execeptions. Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                        } catch (InterruptedException | TimeoutException | ExecutionException e) {", "author": "fwolter", "createdAt": "2020-07-19T09:49:40Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.automowerconnect;\n+\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Allows access to the AutomowerConnectApi\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerConnectApi extends HusqvarnaApi {\n+\n+    public AutomowerConnectApi(HttpClient httpClient) {\n+        super(httpClient);\n+    }\n+\n+    @Override\n+    public String getBaseUrl() {\n+        return \"https://api.amc.husqvarna.dev/v1\";\n+    }\n+\n+    public MowerListResult getMowers(String appKey, String token) throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers\");\n+        request.method(HttpMethod.GET);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (Exception e) {", "originalCommit": "84942d411a6d7df8f5935f6b9a9e594205c173ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyMjE4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r457622183", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-20T18:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NzAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java\nindex add39f87a7..fe885faaae 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java\n\n@@ -12,13 +12,16 @@\n  */\n package org.openhab.binding.automower.internal.rest.api.automowerconnect;\n \n-import org.apache.commons.httpclient.HttpStatus;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jetty.client.HttpClient;\n import org.eclipse.jetty.client.api.ContentResponse;\n import org.eclipse.jetty.client.api.Request;\n import org.eclipse.jetty.client.util.StringContentProvider;\n import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NzA5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462487096", "bodyText": "Can you make this @Nullable?", "author": "fwolter", "createdAt": "2020-07-29T18:02:54Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;", "originalCommit": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0MjY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462542672", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-29T19:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NzA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex f3f5dfef48..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,13 +46,11 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n     private static class AutomowerBridgePollingRunnable implements Runnable {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4ODY2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462488663", "bodyText": "Do you log the stack trace by intention?", "author": "fwolter", "createdAt": "2020-07-29T18:05:39Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                startAutomowerBridgePolling(bridge);\n+            }\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        ScheduledFuture<?> currentPollingJob = automowerBridgePollingJob;\n+        if (currentPollingJob == null) {\n+            if (bridgeConfiguration.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = bridgeConfiguration.getPollingInterval();\n+            }\n+            automowerBridgePollingJob = scheduler.scheduleWithFixedDelay(\n+                    new AutomowerBridgePollingRunnable(this, bridge), 1, automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerBridgePolling(AutomowerBridge bridge) {\n+        ScheduledFuture<?> currentPollingJob = automowerBridgePollingJob;\n+        if (currentPollingJob != null) {\n+            currentPollingJob.cancel(true);\n+            automowerBridgePollingJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public AutomowerBridge getAutomowerBridge() {\n+        return bridge;\n+    }\n+\n+    public Optional<MowerListResult> getAutomowers() {\n+        try {\n+            return Optional.of(bridge.getAutomowers());\n+        } catch (AutomowerCommunicationException e) {\n+            logger.debug(\"Bridge cannot get list of available automowers\", e);", "originalCommit": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NTkwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462545900", "bodyText": "no", "author": "maxpg", "createdAt": "2020-07-29T19:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4ODY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex f3f5dfef48..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,13 +46,11 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n-    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n-\n-    private @NonNullByDefault({}) AutomowerBridge bridge;\n-    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n+    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n     private static class AutomowerBridgePollingRunnable implements Runnable {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTcwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462489707", "bodyText": "Did you encounter a case where the HTTP client is not running?", "author": "fwolter", "createdAt": "2020-07-29T18:07:33Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * Base class for the Husqvarna apis\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class HusqvarnaApi {\n+\n+    private final HttpClient httpClient;\n+    protected final Gson gson;\n+\n+    protected HusqvarnaApi(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+\n+        GsonBuilder gsonBuilder = new GsonBuilder();\n+        gson = gsonBuilder.create();\n+    }\n+\n+    protected abstract String getBaseUrl();\n+\n+    protected HttpClient getHttpClient() throws AutomowerCommunicationException {\n+        if (!httpClient.isRunning()) {\n+            try {\n+                httpClient.start();\n+            } catch (Exception e) {\n+                throw new AutomowerCommunicationException(\"Exception while trying to start http client\", e);\n+            }\n+        }", "originalCommit": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0ODc1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462548756", "bodyText": "I was not sure about the status of the httpclient that I get. To avoid starting it multiple times, or having it not started at all, I added the isRunning check. I am not sure if it is already started or not as I get the httpClient from the framework...\nDo you think it is not required at all to start it?", "author": "maxpg", "createdAt": "2020-07-29T19:52:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTcwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1MDg4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462550889", "bodyText": "I think the framework takes care of starting it. I didn't see it in other bindings. But I can't give a definite answer. Let's wait for the opinion of the second reviewer.", "author": "fwolter", "createdAt": "2020-07-29T19:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTcwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1OTc3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462559779", "bodyText": "I will try without starting it explicitly. I think you are probably right, would be strange to get an httpclient injected that would need to be started. If the binding would be required to start it would also be required to stop it, I guess the client will be shared between bindings...", "author": "maxpg", "createdAt": "2020-07-29T20:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTcwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3NTc0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462575745", "bodyText": "Ok, seems to work, I completely removed this block", "author": "maxpg", "createdAt": "2020-07-29T20:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTcwNw=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java\nindex ec3b43e8a5..ae75a6b514 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java\n\n@@ -14,7 +14,6 @@ package org.openhab.binding.automower.internal.rest.api;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jetty.client.HttpClient;\n-import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5Mzg4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462493885", "bodyText": "This field is never read.", "author": "fwolter", "createdAt": "2020-07-29T18:14:32Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.actions.AutomowerActions;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+    private static final String NO_ID = \"NO_ID\";\n+    private static final long DEFAULT_COMMAND_DURATION_MIN = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+\n+    private @Nullable AutomowerConfiguration config;", "originalCommit": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0OTMzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462549336", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-29T19:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5Mzg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex 8e8ff2f2dc..bc6656f2c0 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,6 +14,9 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTY4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462499684", "bodyText": "Please add the @NonnullByDefault annotation.", "author": "fwolter", "createdAt": "2020-07-29T18:24:26Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/IAutomowerActions.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.actions;\n+\n+/**\n+ * Actions that can be executed for an automower\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public interface IAutomowerActions {", "originalCommit": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1MDYwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462550605", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-29T19:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/IAutomowerActions.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/IAutomowerActions.java\nindex 61436ec8da..553401b13e 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/IAutomowerActions.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/IAutomowerActions.java\n\n@@ -12,11 +12,14 @@\n  */\n package org.openhab.binding.automower.internal.actions;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * Actions that can be executed for an automower\n  *\n  * @author Markus Pfleger - Initial contribution\n  */\n+@NonNullByDefault\n public interface IAutomowerActions {\n \n     void resumeSchedule();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNTEyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462605125", "bodyText": "This throws declaration can be removed, then.", "author": "fwolter", "createdAt": "2020-07-29T21:38:51Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * Base class for the Husqvarna apis\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class HusqvarnaApi {\n+\n+    private final HttpClient httpClient;\n+    protected final Gson gson;\n+\n+    protected HusqvarnaApi(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+\n+        GsonBuilder gsonBuilder = new GsonBuilder();\n+        gson = gsonBuilder.create();\n+    }\n+\n+    protected abstract String getBaseUrl();\n+\n+    protected HttpClient getHttpClient() throws AutomowerCommunicationException {", "originalCommit": "dfe079491133704addb653e14296cbd797d2bc72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NzIzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r463267234", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-30T20:58:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNTEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java\nindex f70111b60d..ae75a6b514 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java\n\n@@ -14,7 +14,6 @@ package org.openhab.binding.automower.internal.rest.api;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jetty.client.HttpClient;\n-import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNTkyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462605921", "bodyText": "Can you handle the serializable compiler warnings in the exception classes?", "author": "fwolter", "createdAt": "2020-07-29T21:40:23Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/exceptions/AutomowerCommunicationException.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.exceptions;\n+\n+import java.io.IOException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * An exception that occurred while communicating with an automower or an automower bridge\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerCommunicationException extends IOException {", "originalCommit": "dfe079491133704addb653e14296cbd797d2bc72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NzYxMw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r463267613", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-07-30T20:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNTkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/exceptions/AutomowerCommunicationException.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/exceptions/AutomowerCommunicationException.java\nindex 6c772ba9d1..4b0cef23f8 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/exceptions/AutomowerCommunicationException.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/exceptions/AutomowerCommunicationException.java\n\n@@ -23,7 +23,7 @@ import org.eclipse.jdt.annotation.NonNullByDefault;\n  */\n @NonNullByDefault\n public class AutomowerCommunicationException extends IOException {\n-\n+    private static final long serialVersionUID = 1L;\n     private int statusCode = -1;\n \n     public AutomowerCommunicationException(Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNzA1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462607052", "bodyText": "bridge should be stored to a local variable before doing the null check. That fixes the compiler error.", "author": "fwolter", "createdAt": "2020-07-29T21:43:00Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+\n+    private @Nullable AutomowerBridge bridge;\n+    private final HttpClient httpClient;\n+\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);", "originalCommit": "dfe079491133704addb653e14296cbd797d2bc72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2ODM3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r463268378", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-07-30T21:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNzA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 198f4088dd..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -86,8 +86,9 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n \n     @Override\n     public void dispose() {\n-        if (bridge != null) {\n-            stopAutomowerBridgePolling(bridge);\n+        AutomowerBridge currentBridge = bridge;\n+        if (currentBridge != null) {\n+            stopAutomowerBridgePolling(currentBridge);\n             bridge = null;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk1MDg0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r463950842", "bodyText": "You might want to set bridge to null.", "author": "fwolter", "createdAt": "2020-08-01T10:59:56Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -86,9 +86,10 @@ public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n \n     @Override\n     public void dispose() {\n-        if (bridge != null) {\n-            stopAutomowerBridgePolling(bridge);\n-            bridge = null;\n+        AutomowerBridge currentBridge = bridge;\n+        if (currentBridge != null) {\n+            stopAutomowerBridgePolling(currentBridge);\n+            currentBridge = null;", "originalCommit": "412933faee7635dcd90bcaff827e3203ddcdc9a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMjE1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r464002155", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-08-01T21:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk1MDg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 3bbbd89666..628afebce2 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -89,7 +89,7 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n         AutomowerBridge currentBridge = bridge;\n         if (currentBridge != null) {\n             stopAutomowerBridgePolling(currentBridge);\n-            currentBridge = null;\n+            bridge = null;\n         }\n     }\n \n"}}, {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "url": "https://github.com/openhab/openhab-addons/commit/a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "message": "Rebase to latest 2.5.x (2.5.8) + Fixed new build warnings (usage of some apache http constant file + conversion from epoch millis to DateTimeType)\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-08-04T18:58:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2MjU5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480462595", "bodyText": "Is this class used?", "author": "cpmeister", "createdAt": "2020-08-31T23:10:32Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/dto/Calendar.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.automowerconnect.dto;\n+\n+/**\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public class Calendar {", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2Mjk3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487562979", "bodyText": "Not yet. I created the MowerData DTO according to the api specification. I always created either:\n\nfull dto with all members\nno members, so a placeholder to add fuctionality later\n\nThe MowerData is in use and Calendar is a part of it. Calendar itself is not used yet. Of course I can remove Calendar from the MowerData until it is needed. I just thought it would be a simpler change later on to just add to the calendar class when needed.\nWhatever you prefer.", "author": "maxpg", "createdAt": "2020-09-13T18:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2MjU5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2Mzc2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480463767", "bodyText": "Same question.", "author": "cpmeister", "createdAt": "2020-08-31T23:12:21Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/dto/Planner.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.automowerconnect.dto;\n+\n+/**\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public class Planner {", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2Mjk5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487562999", "bodyText": "Same answer ;-)", "author": "maxpg", "createdAt": "2020-09-13T18:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2Mzc2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2NTE3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480465174", "bodyText": "Instead of a nested class, could you just make AutomowerPollingRunnable a lambda instead?", "author": "cpmeister", "createdAt": "2020-08-31T23:14:30Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.actions.AutomowerActions;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+    private static final String NO_ID = \"NO_ID\";\n+    private static final long DEFAULT_COMMAND_DURATION_MIN = 60;\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.MINUTES.toSeconds(10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private long lastQueryTimeMs = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(AutomowerActions.class);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            AutomowerConfiguration currentConfig = getConfigAs(AutomowerConfiguration.class);\n+            final String configMowerId = currentConfig.getMowerId();\n+            final Integer pollingIntervalS = currentConfig.getPollingInterval();\n+\n+            if (configMowerId == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            } else if (pollingIntervalS != null && pollingIntervalS < 1) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-invalid-polling-interval\");\n+            } else {\n+                automowerId.set(configMowerId);\n+                startAutomowerPolling(pollingIntervalS);\n+            }\n+\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (!automowerId.get().equals(NO_ID)) {\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling(@Nullable Integer pollingIntervalS) {\n+        if (automowerPollingJob == null) {\n+            final long pollingIntervalToUse = pollingIntervalS == null ? DEFAULT_POLLING_INTERVAL_S : pollingIntervalS;\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MzUwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487563504", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-09-13T18:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2NTE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex bc6656f2c0..406f6784bf 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,15 +14,14 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.util.Collection;\n+import java.text.DateFormat;\n import java.util.Collections;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2OTcxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480469710", "bodyText": "This is only updated during initialization, why do you need it to be atomic?", "author": "cpmeister", "createdAt": "2020-08-31T23:23:04Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.actions.AutomowerActions;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+    private static final String NO_ID = \"NO_ID\";\n+    private static final long DEFAULT_COMMAND_DURATION_MIN = 60;\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.MINUTES.toSeconds(10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NTQ0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487565449", "bodyText": "Probably because I am not familiar how the framework works from a threading perspective. As I was not sure if the initialize and dispose methods are called by the same thread I assumed they might not.\nTo make sure a different thread would see the most recent value of the variable I would need some kind of synchronization. Volatile would be sufficient in that case but I thought using an AtomicReference would be nicer and would not hurt.", "author": "maxpg", "createdAt": "2020-09-13T19:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2OTcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex bc6656f2c0..406f6784bf 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,15 +14,14 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.util.Collection;\n+import java.text.DateFormat;\n import java.util.Collections;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxNzAzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477317035", "bodyText": "command param duplicated in JavaDoc", "author": "Hilbrand", "createdAt": "2020-08-26T13:51:40Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.actions.AutomowerActions;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+    private static final String NO_ID = \"NO_ID\";\n+    private static final long DEFAULT_COMMAND_DURATION_MIN = 60;\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.MINUTES.toSeconds(10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private long lastQueryTimeMs = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(AutomowerActions.class);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            AutomowerConfiguration currentConfig = getConfigAs(AutomowerConfiguration.class);\n+            final String configMowerId = currentConfig.getMowerId();\n+            final Integer pollingIntervalS = currentConfig.getPollingInterval();\n+\n+            if (configMowerId == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            } else if (pollingIntervalS != null && pollingIntervalS < 1) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-invalid-polling-interval\");\n+            } else {\n+                automowerId.set(configMowerId);\n+                startAutomowerPolling(pollingIntervalS);\n+            }\n+\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (!automowerId.get().equals(NO_ID)) {\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling(@Nullable Integer pollingIntervalS) {\n+        if (automowerPollingJob == null) {\n+            final long pollingIntervalToUse = pollingIntervalS == null ? DEFAULT_POLLING_INTERVAL_S : pollingIntervalS;\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    pollingIntervalToUse, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        return mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected();\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTimeMs > maxQueryFrequencyNanos) {\n+            lastQueryTimeMs = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                AutomowerBridge automowerBridge = getAutomowerBridge();\n+                if (automowerBridge != null) {\n+                    Mower mower = automowerBridge.getAutomowerStatus(id);\n+\n+                    if (isValidResult(mower)) {\n+                        initializeProperties(mower);\n+\n+                        updateChannelState(mower);\n+\n+                        if (isConnected(mower)) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"@text/comm-error-mower-not-connected-to-cloud\");\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"@text/comm-error-query-mower-failed\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"@text/conf-error-no-bridge\");\n+                }\n+            } catch (AutomowerCommunicationException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mower-failed\");\n+                logger.warn(\"Unable to query automower status for:  {}. Error: {}\", id, e.getMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Sends a command to the automower with the default duration of 60min\n+     *\n+     * @param command The command that should be sent. Valid values are: \"Start\", \"ResumeSchedule\", \"Pause\", \"Park\",\n+     *            \"ParkUntilNextSchedule\", \"ParkUntilFurtherNotice\"\n+     *\n+     * @param command", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2Njk3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487566975", "bodyText": "thx", "author": "maxpg", "createdAt": "2020-09-13T19:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxNzAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex bc6656f2c0..406f6784bf 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,15 +14,14 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.util.Collection;\n+import java.text.DateFormat;\n import java.util.Collections;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMDMzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477320337", "bodyText": "We have a class org.eclipse.smarthome.core.cache.ExpiringCache that is generally used for these kind of use cases. So you don't have to do the time calculation yourself.", "author": "Hilbrand", "createdAt": "2020-08-26T13:55:41Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.actions.AutomowerActions;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+    private static final String NO_ID = \"NO_ID\";\n+    private static final long DEFAULT_COMMAND_DURATION_MIN = 60;\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.MINUTES.toSeconds(10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private long lastQueryTimeMs = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(AutomowerActions.class);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            AutomowerConfiguration currentConfig = getConfigAs(AutomowerConfiguration.class);\n+            final String configMowerId = currentConfig.getMowerId();\n+            final Integer pollingIntervalS = currentConfig.getPollingInterval();\n+\n+            if (configMowerId == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            } else if (pollingIntervalS != null && pollingIntervalS < 1) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-invalid-polling-interval\");\n+            } else {\n+                automowerId.set(configMowerId);\n+                startAutomowerPolling(pollingIntervalS);\n+            }\n+\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (!automowerId.get().equals(NO_ID)) {\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling(@Nullable Integer pollingIntervalS) {\n+        if (automowerPollingJob == null) {\n+            final long pollingIntervalToUse = pollingIntervalS == null ? DEFAULT_POLLING_INTERVAL_S : pollingIntervalS;\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    pollingIntervalToUse, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        return mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected();\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTimeMs > maxQueryFrequencyNanos) {", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjQwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487566401", "bodyText": "So you already have a mechanism in the framework that makes sure when I query various values that a cached item is used so there are not multiple rest calls executed (of course this makes sense)?\nSo I can just do the query when I get a refreshChannels?", "author": "maxpg", "createdAt": "2020-09-13T19:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMDMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ4NTIwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r491485204", "bodyText": "Please have a look at my question. So you are basically saying that there is a mechanism in the framework that assures that refreshChannels is not called too often? I can remove my check completely?", "author": "maxpg", "createdAt": "2020-09-19T19:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMDMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU1MTEzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r491551134", "bodyText": "The expire class keeps track of the timeout and get a function as parameter. When the timeout exceeds it will call the function. So you can use it by simply calling getValue() it returns the value cached, when the time is exceeded. So it's not something the framework does. But it provides a class you can use to implement the timout functionallity you implemented here. Like not having to reinvent the wheel principle.", "author": "Hilbrand", "createdAt": "2020-09-19T21:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMDMzNw=="}], "type": "inlineReview", "revised_code": {"commit": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\nindex bc6656f2c0..406f6784bf 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java\n\n@@ -14,15 +14,14 @@ package org.openhab.binding.automower.internal.things;\n \n import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n \n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.util.Collection;\n+import java.text.DateFormat;\n import java.util.Collections;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMDgxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477320815", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public String mowerId;\n          \n          \n            \n                public @Nullable String mowerId;", "author": "Hilbrand", "createdAt": "2020-08-26T13:56:17Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerConfiguration.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link AutomowerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerConfiguration {\n+\n+    @Nullable\n+    public String mowerId;", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjUxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487566511", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-09-13T19:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMDgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerConfiguration.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerConfiguration.java\nindex 11ed4e8e4d..9b19a71dee 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerConfiguration.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerConfiguration.java\n\n@@ -25,9 +25,7 @@ public class AutomowerConfiguration {\n \n     @Nullable\n     public String mowerId;\n-\n-    @Nullable\n-    public Integer pollingInterval;\n+    public int pollingInterval;\n \n     @Nullable\n     public String getMowerId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMTA3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477321075", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                private String command;\n          \n          \n            \n            \n          \n          \n            \n                private final String command;", "author": "Hilbrand", "createdAt": "2020-08-26T13:56:36Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerCommand.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+/**\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public enum AutomowerCommand {\n+\n+    START(\"Start\"),\n+    RESUME_SCHEDULE(\"ResumeSchedule\"),\n+    PAUSE(\"Pause\"),\n+    PARK(\"Park\"),\n+    PARK_UNTIL_NEXT_SCHEDULE(\"ParkUntilNextSchedule\"),\n+    PARK_UNTIL_FURTHER_NOTICE(\"ParkUntilFurtherNotice\");\n+\n+    private String command;", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjU1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487566551", "bodyText": "ok", "author": "maxpg", "createdAt": "2020-09-13T19:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMTA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerCommand.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerCommand.java\ndeleted file mode 100644\nindex db66e5965a..0000000000\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerCommand.java\n+++ /dev/null\n\n@@ -1,36 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.automower.internal.things;\n-\n-/**\n- * @author Markus Pfleger - Initial contribution\n- */\n-public enum AutomowerCommand {\n-\n-    START(\"Start\"),\n-    RESUME_SCHEDULE(\"ResumeSchedule\"),\n-    PAUSE(\"Pause\"),\n-    PARK(\"Park\"),\n-    PARK_UNTIL_NEXT_SCHEDULE(\"ParkUntilNextSchedule\"),\n-    PARK_UNTIL_FURTHER_NOTICE(\"ParkUntilFurtherNotice\");\n-\n-    private String command;\n-\n-    private AutomowerCommand(String command) {\n-        this.command = command;\n-    }\n-\n-    public String getCommand() {\n-        return command;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3Mjc5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r478272797", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .flatMap(i -> i).collect(Collectors.toSet()));\n          \n          \n            \n                        .flatMap(Function.identity()).collect(Collectors.toSet()));", "author": "Hilbrand", "createdAt": "2020-08-27T09:11:49Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal;\n+\n+import java.util.Collections;\n+import java.util.Hashtable;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.discovery.AutomowerDiscoveryService;\n+import org.openhab.binding.automower.internal.things.AutomowerHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link AutomowerHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.automower\", service = ThingHandlerFactory.class)\n+public class AutomowerHandlerFactory extends BaseThingHandlerFactory {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n+            .of(AutomowerBridgeHandler.SUPPORTED_THING_TYPES.stream(), AutomowerHandler.SUPPORTED_THING_TYPES.stream())\n+            .flatMap(i -> i).collect(Collectors.toSet()));", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjYzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487566638", "bodyText": "yes", "author": "maxpg", "createdAt": "2020-09-13T19:18:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3Mjc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8147b8396a98f2d408b4a41c89667edaee744177", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java\nindex 951ab0f2f1..4153e94bbd 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java\n\n@@ -15,6 +15,7 @@ package org.openhab.binding.automower.internal;\n import java.util.Collections;\n import java.util.Hashtable;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MzcwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r478273702", "bodyText": "Please inject the factory in the constructor:\n@Activate\npublic AutomowerHandlerFactory(@Reference HttpClientFactory httpClientFactory) {\n...\n\nThis allows you to make httpClient also a final field.", "author": "Hilbrand", "createdAt": "2020-08-27T09:13:26Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal;\n+\n+import java.util.Collections;\n+import java.util.Hashtable;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.discovery.AutomowerDiscoveryService;\n+import org.openhab.binding.automower.internal.things.AutomowerHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link AutomowerHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.automower\", service = ThingHandlerFactory.class)\n+public class AutomowerHandlerFactory extends BaseThingHandlerFactory {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n+            .of(AutomowerBridgeHandler.SUPPORTED_THING_TYPES.stream(), AutomowerHandler.SUPPORTED_THING_TYPES.stream())\n+            .flatMap(i -> i).collect(Collectors.toSet()));\n+\n+    protected @NonNullByDefault({}) HttpClient httpClient;\n+    private @Nullable ServiceRegistration<?> automowerDiscoveryServiceRegistration;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        if (AutomowerBridgeHandler.SUPPORTED_THING_TYPES.contains(thing.getThingTypeUID())) {\n+            AutomowerBridgeHandler handler = new AutomowerBridgeHandler((Bridge) thing, httpClient);\n+            registerAutomowerDiscoveryService(handler);\n+            return handler;\n+        }\n+\n+        if (AutomowerHandler.SUPPORTED_THING_TYPES.contains(thing.getThingTypeUID())) {\n+            return new AutomowerHandler(thing);\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof AutomowerBridgeHandler) {\n+            if (automowerDiscoveryServiceRegistration != null) {\n+                // remove discovery service, if bridge handler is removed\n+                automowerDiscoveryServiceRegistration.unregister();\n+            }\n+        }\n+    }\n+\n+    private void registerAutomowerDiscoveryService(AutomowerBridgeHandler handler) {\n+        AutomowerDiscoveryService discoveryService = new AutomowerDiscoveryService(handler);\n+        this.automowerDiscoveryServiceRegistration = bundleContext.registerService(DiscoveryService.class.getName(),\n+                discoveryService, new Hashtable<>());\n+    }\n+\n+    @Reference\n+    protected void setHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClient = httpClientFactory.getCommonHttpClient();", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjkwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487566904", "bodyText": "cool", "author": "maxpg", "createdAt": "2020-09-13T19:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MzcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "8147b8396a98f2d408b4a41c89667edaee744177", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java\nindex 951ab0f2f1..4153e94bbd 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java\n\n@@ -15,6 +15,7 @@ package org.openhab.binding.automower.internal;\n import java.util.Collections;\n import java.util.Hashtable;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkwNTYwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480905601", "bodyText": "Please implement the registration of the discovery service as a ThingHandlerService. I've a pr on the documentation that explains how to implement it. This is a link to the preview documentation: https://deploy-preview-1262--openhab-docs-preview.netlify.app/docs/developer/bindings/#discovery-that-is-bound-to-a-thing", "author": "Hilbrand", "createdAt": "2020-09-01T07:13:29Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal;\n+\n+import java.util.Collections;\n+import java.util.Hashtable;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.discovery.AutomowerDiscoveryService;\n+import org.openhab.binding.automower.internal.things.AutomowerHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link AutomowerHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.automower\", service = ThingHandlerFactory.class)\n+public class AutomowerHandlerFactory extends BaseThingHandlerFactory {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n+            .of(AutomowerBridgeHandler.SUPPORTED_THING_TYPES.stream(), AutomowerHandler.SUPPORTED_THING_TYPES.stream())\n+            .flatMap(i -> i).collect(Collectors.toSet()));\n+\n+    protected @NonNullByDefault({}) HttpClient httpClient;\n+    private @Nullable ServiceRegistration<?> automowerDiscoveryServiceRegistration;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        if (AutomowerBridgeHandler.SUPPORTED_THING_TYPES.contains(thing.getThingTypeUID())) {\n+            AutomowerBridgeHandler handler = new AutomowerBridgeHandler((Bridge) thing, httpClient);\n+            registerAutomowerDiscoveryService(handler);", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8147b8396a98f2d408b4a41c89667edaee744177", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java\nindex 951ab0f2f1..4153e94bbd 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java\n\n@@ -15,6 +15,7 @@ package org.openhab.binding.automower.internal;\n import java.util.Collections;\n import java.util.Hashtable;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxNTQzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480915432", "bodyText": "You can put this in a separate method (except for the content call here) and then call that method from the 3 other methods to make the code simpler.", "author": "Hilbrand", "createdAt": "2020-09-01T07:25:38Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.automowerconnect;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Allows access to the AutomowerConnectApi\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerConnectApi extends HusqvarnaApi {\n+\n+    public AutomowerConnectApi(HttpClient httpClient) {\n+        super(httpClient);\n+    }\n+\n+    @Override\n+    public String getBaseUrl() {\n+        return \"https://api.amc.husqvarna.dev/v1\";\n+    }\n+\n+    public MowerListResult getMowers(String appKey, String token) throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers\");\n+        request.method(HttpMethod.GET);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new AutomowerCommunicationException(e);\n+        }\n+\n+        return parseResponse(response, MowerListResult.class);\n+    }\n+\n+    public MowerResult getMower(String appKey, String token, String mowerId) throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers/\" + mowerId);\n+        request.method(HttpMethod.GET);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new AutomowerCommunicationException(e);\n+        }\n+\n+        return parseResponse(response, MowerResult.class);\n+    }\n+\n+    public void sendCommand(String appKey, String token, String id, MowerCommandRequest command)\n+            throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers/\" + id + \"/actions\");\n+        request.method(HttpMethod.POST);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        request.content(new StringContentProvider(gson.toJson(command)));\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new AutomowerCommunicationException(e);\n+        }\n+\n+        checkForError(response, response.getStatus());", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NzM3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487567375", "bodyText": "yes, makes sense", "author": "maxpg", "createdAt": "2020-09-13T19:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxNTQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java\nindex fe885faaae..3240e80a2b 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java\n\n@@ -12,16 +12,13 @@\n  */\n package org.openhab.binding.automower.internal.rest.api.automowerconnect;\n \n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.TimeoutException;\n-\n+import org.apache.commons.httpclient.HttpStatus;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jetty.client.HttpClient;\n import org.eclipse.jetty.client.api.ContentResponse;\n import org.eclipse.jetty.client.api.Request;\n import org.eclipse.jetty.client.util.StringContentProvider;\n import org.eclipse.jetty.http.HttpMethod;\n-import org.eclipse.jetty.http.HttpStatus;\n import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxNjMyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480916322", "bodyText": "You need to add a timeout to the request. This can be set in the method I described in the other comment so you don't have to set it only in 1 place.", "author": "Hilbrand", "createdAt": "2020-09-01T07:26:43Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.automowerconnect;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Allows access to the AutomowerConnectApi\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerConnectApi extends HusqvarnaApi {\n+\n+    public AutomowerConnectApi(HttpClient httpClient) {\n+        super(httpClient);\n+    }\n+\n+    @Override\n+    public String getBaseUrl() {\n+        return \"https://api.amc.husqvarna.dev/v1\";\n+    }\n+\n+    public MowerListResult getMowers(String appKey, String token) throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers\");\n+        request.method(HttpMethod.GET);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new AutomowerCommunicationException(e);\n+        }\n+\n+        return parseResponse(response, MowerListResult.class);\n+    }\n+\n+    public MowerResult getMower(String appKey, String token, String mowerId) throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers/\" + mowerId);\n+        request.method(HttpMethod.GET);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new AutomowerCommunicationException(e);\n+        }\n+\n+        return parseResponse(response, MowerResult.class);\n+    }\n+\n+    public void sendCommand(String appKey, String token, String id, MowerCommandRequest command)\n+            throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers/\" + id + \"/actions\");", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NzY2NA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487567664", "bodyText": "Ok, I thought there would be a proper default timeout. I will use 10 seconds...", "author": "maxpg", "createdAt": "2020-09-13T19:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxNjMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java\nindex fe885faaae..3240e80a2b 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java\n\n@@ -12,16 +12,13 @@\n  */\n package org.openhab.binding.automower.internal.rest.api.automowerconnect;\n \n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.TimeoutException;\n-\n+import org.apache.commons.httpclient.HttpStatus;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jetty.client.HttpClient;\n import org.eclipse.jetty.client.api.ContentResponse;\n import org.eclipse.jetty.client.api.Request;\n import org.eclipse.jetty.client.util.StringContentProvider;\n import org.eclipse.jetty.http.HttpMethod;\n-import org.eclipse.jetty.http.HttpStatus;\n import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxOTAwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480919001", "bodyText": "This looks like a OAuth2 authentication process. Although I miss the callback part. Where normally the service authenticated calls back on a specific url. But that doesn't seem to be done here.\nIn openHAB we have a service for handling OAuth2 authentication. You can get the service via OAuthFactory. See for example the Spotify binding for how that works. It also persists the refresh key and access key. This means you don't have to implement your own. Can you have a look at it. We would prefer if you use it if this is a OAuth2 compatible process.", "author": "Hilbrand", "createdAt": "2020-09-01T07:29:58Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.authentication;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.util.Fields;\n+import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n+import org.openhab.binding.automower.internal.rest.api.authentication.dto.PostOAuth2Response;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Gives access to the Husqvarna authentication api\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AuthenticationApi extends HusqvarnaApi {", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2Nzg2NA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487567864", "bodyText": "Yes, it is OAuth2. For sure I will use the existing functionality. Thanks for the hint.", "author": "maxpg", "createdAt": "2020-09-13T19:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxOTAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3ODYxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487578611", "bodyText": "Hm, had a look at the Husqvarna documentation: https://developer.husqvarnagroup.cloud/apis/Authentication+API#/readme\nI did not work with oauth before. What I implemented was the \"Password Grant\" which allows a login by username and password.\nLooking at the OAuthFactory I guess this uses the \"Authorization Code Grant\" workflow. I am not sure how this redirect part works exactly, this is why I implemented the password grant.\nIn the OAuthFactory 2 urls are needed. tokenUrl and authorizationUrl. I have one where I get the token from, but not sure about the second...", "author": "maxpg", "createdAt": "2020-09-13T21:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxOTAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcwOTMyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r487709328", "bodyText": "In this case you can pass null for the authorizationUrl and call getAccessTokenByResourceOwnerPasswordCredentials on the OAuthClientService to get an AccessTokenResponse with the refresh/accesstoken. Then with getAccessTokenResponse() you get the token when you make a call. If the token is expired this method will first get a new token with the refreshtoken. You can also build in a fallback in case you make a call and the token turns out to be expired. You can call refreshToken() to force a refresh.", "author": "Hilbrand", "createdAt": "2020-09-14T07:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxOTAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg4MDI5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r488880295", "bodyText": "Thx, will try that", "author": "maxpg", "createdAt": "2020-09-15T18:34:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxOTAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ4NTEyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r491485120", "bodyText": "Thanks for the hint. Works very well. Was able to remove quite some code...", "author": "maxpg", "createdAt": "2020-09-19T19:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxOTAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java\nindex 2b25112249..73cdbd9ba7 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java\n\n@@ -12,16 +12,13 @@\n  */\n package org.openhab.binding.automower.internal.rest.api.authentication;\n \n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.TimeoutException;\n-\n+import org.apache.commons.httpclient.HttpStatus;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jetty.client.HttpClient;\n import org.eclipse.jetty.client.api.ContentResponse;\n import org.eclipse.jetty.client.api.Request;\n import org.eclipse.jetty.client.util.FormContentProvider;\n import org.eclipse.jetty.http.HttpMethod;\n-import org.eclipse.jetty.http.HttpStatus;\n import org.eclipse.jetty.util.Fields;\n import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n import org.openhab.binding.automower.internal.rest.api.authentication.dto.PostOAuth2Response;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkyMDY4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480920686", "bodyText": "You can simple make this with a method in this class and call the method as this::poller in the scheduleWithFixedDelay call. (overlaps a bit with the other comment about making it a lambda)", "author": "Hilbrand", "createdAt": "2020-09-01T07:31:53Z", "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+\n+    private @Nullable AutomowerBridge bridge;\n+    private final HttpClient httpClient;\n+\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers: {}\", e.getMessage());\n+            }\n+        }\n+    }", "originalCommit": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "chunk": "diff --git a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\nindex 628afebce2..5c414463cc 100644\n--- a/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n+++ b/bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java\n\n@@ -46,13 +46,16 @@ public class AutomowerBridgeHandler extends BaseBridgeHandler {\n     private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n-    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n \n     private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n \n-    private @Nullable AutomowerBridge bridge;\n     private final HttpClient httpClient;\n \n+    @NonNullByDefault\n     private static class AutomowerBridgePollingRunnable implements Runnable {\n         private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n \n"}}, {"oid": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "url": "https://github.com/openhab/openhab-addons/commit/7b0d9152a773b0abd47a4e13292c5bf433c3263b", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-09-13T18:40:06Z", "type": "commit"}, {"oid": "9c00464f6da73dc573830e99ab963e2c3ea00ae7", "url": "https://github.com/openhab/openhab-addons/commit/9c00464f6da73dc573830e99ab963e2c3ea00ae7", "message": "Applied feedback from fwolter\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-09-13T18:40:07Z", "type": "commit"}, {"oid": "bf00f7b3885746302018dd1c92733e014a9a5c91", "url": "https://github.com/openhab/openhab-addons/commit/bf00f7b3885746302018dd1c92733e014a9a5c91", "message": "Added missing file of last commit\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-09-13T18:40:07Z", "type": "commit"}, {"oid": "4bd7c24831be3f439c4afb067ec8e33d8bd1456c", "url": "https://github.com/openhab/openhab-addons/commit/4bd7c24831be3f439c4afb067ec8e33d8bd1456c", "message": "Applied feedback of PR\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-09-13T18:40:07Z", "type": "commit"}, {"oid": "e143f433611145142bc4e91dadf6331cb185e467", "url": "https://github.com/openhab/openhab-addons/commit/e143f433611145142bc4e91dadf6331cb185e467", "message": "Added feedback from PR\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-09-13T18:40:07Z", "type": "commit"}, {"oid": "06a8bea3c0d30c44b1e6b7a38d4426ed0c7aa59e", "url": "https://github.com/openhab/openhab-addons/commit/06a8bea3c0d30c44b1e6b7a38d4426ed0c7aa59e", "message": "Fixed bug in AutomowerActions (invokeMethodOf) + applied latest feedback\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-09-13T18:40:08Z", "type": "commit"}, {"oid": "c8e276349c40fa1e1a42b2093e960486bc497c9b", "url": "https://github.com/openhab/openhab-addons/commit/c8e276349c40fa1e1a42b2093e960486bc497c9b", "message": "Fixed resetting of bridge and fixed compiler error\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-09-13T18:40:08Z", "type": "commit"}, {"oid": "f3f3da78d62d6abc004d0ebf81cd5b43ff573813", "url": "https://github.com/openhab/openhab-addons/commit/f3f3da78d62d6abc004d0ebf81cd5b43ff573813", "message": "Rebase to latest 2.5.x (2.5.8) + Fixed new build warnings (usage of some apache http constant file + conversion from epoch millis to DateTimeType)\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-09-13T18:40:08Z", "type": "commit"}, {"oid": "f3f3da78d62d6abc004d0ebf81cd5b43ff573813", "url": "https://github.com/openhab/openhab-addons/commit/f3f3da78d62d6abc004d0ebf81cd5b43ff573813", "message": "Rebase to latest 2.5.x (2.5.8) + Fixed new build warnings (usage of some apache http constant file + conversion from epoch millis to DateTimeType)\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-09-13T18:40:08Z", "type": "forcePushed"}, {"oid": "8147b8396a98f2d408b4a41c89667edaee744177", "url": "https://github.com/openhab/openhab-addons/commit/8147b8396a98f2d408b4a41c89667edaee744177", "message": "Applied latest feedback from pull request\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>", "committedDate": "2020-09-19T19:23:56Z", "type": "commit"}]}