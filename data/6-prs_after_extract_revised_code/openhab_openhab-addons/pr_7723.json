{"pr_number": 7723, "pr_title": "[mqtt] Correctly unsubscribe after message is received", "pr_createdAt": "2020-05-21T19:54:59Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7723", "timeline": [{"oid": "4e4975407b45e69f87e6e5b91058b9a5d07609b6", "url": "https://github.com/openhab/openhab-addons/commit/4e4975407b45e69f87e6e5b91058b9a5d07609b6", "message": "Correctly unsubscribe after message is received\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-05-21T19:43:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNTQ0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r428905443", "bodyText": "The default charset varies from system to system so it is better to specify it yourself instead of using the default.", "author": "cpmeister", "createdAt": "2020-05-21T20:47:35Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java", "diffHunk": "@@ -46,11 +46,11 @@ public WaitForTopicValue(MqttBrokerConnection connection, String topic)\n         final MqttMessageSubscriber mqttMessageSubscriber = (t, payload) -> {\n             future.complete(new String(payload));", "originalCommit": "4e4975407b45e69f87e6e5b91058b9a5d07609b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd89d052d2db876073f7dae4b766b7209ec45d6f", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\nindex 5952f01a12..87530477d1 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n\n@@ -44,13 +46,19 @@ public class WaitForTopicValue {\n     public WaitForTopicValue(MqttBrokerConnection connection, String topic)\n             throws InterruptedException, ExecutionException {\n         final MqttMessageSubscriber mqttMessageSubscriber = (t, payload) -> {\n-            future.complete(new String(payload));\n+            try {\n+                future.complete(new String(payload, \"UTF-8\"));\n+            } catch (UnsupportedEncodingException e1) {\n+                future.complete(new String(payload));\n+            }\n         };\n         future.whenComplete((r, e) -> {\n             connection.unsubscribe(topic, mqttMessageSubscriber);\n         });\n \n         subscribeFuture = connection.subscribe(topic, mqttMessageSubscriber);\n+\n+        composeFuture = subscribeFuture.thenCompose(b -> future);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwODY5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r428908699", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private CompletableFuture<String> future = new CompletableFuture<>();\n          \n          \n            \n                private final CompletableFuture<String> future = new CompletableFuture<>();", "author": "cpmeister", "createdAt": "2020-05-21T20:54:01Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java", "diffHunk": "@@ -24,14 +24,14 @@\n import org.eclipse.smarthome.io.transport.mqtt.MqttMessageSubscriber;\n \n /**\n- * Waits for a topic value to appear on a MQTT topic. One-time useable only per instance.\n+ * Waits for a topic value to appear on a MQTT topic. One-time usable only per instance.\n  *\n  * @author David Graeff - Initial contribution\n  */\n @NonNullByDefault\n public class WaitForTopicValue {\n     private CompletableFuture<String> future = new CompletableFuture<>();", "originalCommit": "4e4975407b45e69f87e6e5b91058b9a5d07609b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd89d052d2db876073f7dae4b766b7209ec45d6f", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\nindex 5952f01a12..87530477d1 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n\n@@ -30,8 +31,9 @@ import org.eclipse.smarthome.io.transport.mqtt.MqttMessageSubscriber;\n  */\n @NonNullByDefault\n public class WaitForTopicValue {\n-    private CompletableFuture<String> future = new CompletableFuture<>();\n+    private final CompletableFuture<String> future = new CompletableFuture<>();\n     private final CompletableFuture<Boolean> subscribeFuture;\n+    private final CompletableFuture<String> composeFuture;\n \n     /**\n      * Creates an a instance.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwOTE4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r428909187", "bodyText": "seems a bit wasteful to create a new compose future every time. Could you cache subscribeFuture.thenCompose(b -> future) in a field?", "author": "cpmeister", "createdAt": "2020-05-21T20:55:03Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java", "diffHunk": "@@ -68,7 +68,7 @@ public void stop() {\n      */\n     public @Nullable String waitForTopicValue(int timeoutInMS) {\n         try {\n-            return subscripeFuture.thenCompose(b -> future).get(timeoutInMS, TimeUnit.MILLISECONDS);\n+            return subscribeFuture.thenCompose(b -> future).get(timeoutInMS, TimeUnit.MILLISECONDS);", "originalCommit": "4e4975407b45e69f87e6e5b91058b9a5d07609b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNzA5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r428937099", "bodyText": "Ok, I will modify it, but keep in mind that the WaitForTopicValue is a one-time use class and a new object should be created in each use. What would be the benefit?", "author": "bodiroga", "createdAt": "2020-05-21T21:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwOTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bd89d052d2db876073f7dae4b766b7209ec45d6f", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\nindex 5952f01a12..87530477d1 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n\n@@ -68,7 +76,7 @@ public class WaitForTopicValue {\n      */\n     public @Nullable String waitForTopicValue(int timeoutInMS) {\n         try {\n-            return subscribeFuture.thenCompose(b -> future).get(timeoutInMS, TimeUnit.MILLISECONDS);\n+            return composeFuture.get(timeoutInMS, TimeUnit.MILLISECONDS);\n         } catch (InterruptedException | ExecutionException | TimeoutException e) {\n             return null;\n         }\n"}}, {"oid": "bd89d052d2db876073f7dae4b766b7209ec45d6f", "url": "https://github.com/openhab/openhab-addons/commit/bd89d052d2db876073f7dae4b766b7209ec45d6f", "message": "Address review comments\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-05-21T21:59:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMjEzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r429022137", "bodyText": "You probably don't need the subscribeFuture field anymore.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    subscribeFuture = connection.subscribe(topic, mqttMessageSubscriber);\n          \n          \n            \n            \n          \n          \n            \n                    composeFuture = subscribeFuture.thenCompose(b -> future);\n          \n          \n            \n                    composeFuture = connection.subscribe(topic, mqttMessageSubscriber).thenCompose(b -> future);", "author": "cpmeister", "createdAt": "2020-05-22T03:18:07Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java", "diffHunk": "@@ -44,13 +46,19 @@\n     public WaitForTopicValue(MqttBrokerConnection connection, String topic)\n             throws InterruptedException, ExecutionException {\n         final MqttMessageSubscriber mqttMessageSubscriber = (t, payload) -> {\n-            future.complete(new String(payload));\n+            try {\n+                future.complete(new String(payload, \"UTF-8\"));\n+            } catch (UnsupportedEncodingException e1) {\n+                future.complete(new String(payload));\n+            }\n         };\n-        future = future.whenComplete((r, e) -> {\n+        future.whenComplete((r, e) -> {\n             connection.unsubscribe(topic, mqttMessageSubscriber);\n         });\n \n-        subscripeFuture = connection.subscribe(topic, mqttMessageSubscriber);\n+        subscribeFuture = connection.subscribe(topic, mqttMessageSubscriber);\n+\n+        composeFuture = subscribeFuture.thenCompose(b -> future);", "originalCommit": "bd89d052d2db876073f7dae4b766b7209ec45d6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTc0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r429369747", "bodyText": "\ud83d\udc4d", "author": "bodiroga", "createdAt": "2020-05-22T17:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMjEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "4f6810a2024d8e60c39ffd35d4e0c8a07697c70b", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\nindex 87530477d1..d692b1e3ce 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n\n@@ -56,16 +55,14 @@ public class WaitForTopicValue {\n             connection.unsubscribe(topic, mqttMessageSubscriber);\n         });\n \n-        subscribeFuture = connection.subscribe(topic, mqttMessageSubscriber);\n-\n-        composeFuture = subscribeFuture.thenCompose(b -> future);\n+        composeFuture = connection.subscribe(topic, mqttMessageSubscriber).thenCompose(b -> future);\n     }\n \n     /**\n      * Free any resources\n      */\n     public void stop() {\n-        future.completeExceptionally(new Exception(\"Stopped\"));\n+        composeFuture.completeExceptionally(new Exception(\"Stopped\"));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNDgyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r429024823", "bodyText": "I suspect that you should replace usages of future in this class with composeFuture.\nYour timeout  method completes the future but the result of that future isn't available until the subscribeFuture completes first so your timeout wouldn't actually cause the timeout as you would expect.\nHowever if you caused the timeout on the composeFuture everything would operate as you would expect.", "author": "cpmeister", "createdAt": "2020-05-22T03:30:49Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java", "diffHunk": "@@ -24,14 +25,15 @@\n import org.eclipse.smarthome.io.transport.mqtt.MqttMessageSubscriber;\n \n /**\n- * Waits for a topic value to appear on a MQTT topic. One-time useable only per instance.\n+ * Waits for a topic value to appear on a MQTT topic. One-time usable only per instance.\n  *\n  * @author David Graeff - Initial contribution\n  */\n @NonNullByDefault\n public class WaitForTopicValue {\n-    private CompletableFuture<String> future = new CompletableFuture<>();\n-    private final CompletableFuture<Boolean> subscripeFuture;\n+    private final CompletableFuture<String> future = new CompletableFuture<>();", "originalCommit": "bd89d052d2db876073f7dae4b766b7209ec45d6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NDQ3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r429374473", "bodyText": "Thanks @cpmeister, although we're going to change more lines than the class itself has \ud83d\ude04  Anyway, it seems that the Homie discovery process has another unnoticed error. The Homie300Discovery class does the following:\ntry {\n            WaitForTopicValue w = new WaitForTopicValue(connection, topic.replace(\"$homie\", \"$name\"));\n            w.waitForTopicValueAsync(scheduler, 700).thenAccept(name -> {\n                publishDevice(connectionBridge, connection, deviceID, topic, name);\n            });\n        } catch (InterruptedException | ExecutionException ignored) {\n            // The name is nice to have, but not required, use deviceId as fallback\n            publishDevice(connectionBridge, connection, deviceID, topic, deviceID);\n        }\nBut, if I intentionally remove the $name message and thus, trigger the timeout, the composeFuture.completeExceptionally function doesn't throw any error, so no discoveryResult is published. I'm sorry, but do you know how can I receive the completeExceptionally message in the w.waitForTopicValueAsync() sequence?\nThis CompleteFuture topic is driving me crazy, I'm more used to synchronous programming \ud83d\ude1e", "author": "bodiroga", "createdAt": "2020-05-22T17:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNDgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyNjc3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r429426776", "bodyText": "Would this work?\n            WaitForTopicValue w = new WaitForTopicValue(connection, topic.replace(\"$homie\", \"$name\"));\n            w.waitForTopicValueAsync(scheduler, 700).whenComplete((name, ex) -> {\n                String deviceName = ex == null ? deviceID : name;\n                publishDevice(connectionBridge, connection, deviceID, topic, deviceName);\n            });", "author": "cpmeister", "createdAt": "2020-05-22T19:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNDgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5NTExNw==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r429495117", "bodyText": "Awesome, it works! It seems that I need to read more about whenComplete, exceptionally, thenApply... \ud83d\ude09", "author": "bodiroga", "createdAt": "2020-05-23T00:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNDgyMw=="}], "type": "inlineReview", "revised_code": {"commit": "4f6810a2024d8e60c39ffd35d4e0c8a07697c70b", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\nindex 87530477d1..d692b1e3ce 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n\n@@ -32,7 +32,6 @@ import org.eclipse.smarthome.io.transport.mqtt.MqttMessageSubscriber;\n @NonNullByDefault\n public class WaitForTopicValue {\n     private final CompletableFuture<String> future = new CompletableFuture<>();\n-    private final CompletableFuture<Boolean> subscribeFuture;\n     private final CompletableFuture<String> composeFuture;\n \n     /**\n"}}, {"oid": "4f6810a2024d8e60c39ffd35d4e0c8a07697c70b", "url": "https://github.com/openhab/openhab-addons/commit/4f6810a2024d8e60c39ffd35d4e0c8a07697c70b", "message": "Address more review comments\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-05-23T00:13:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwMzEyNg==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r429503126", "bodyText": "I don't see anywhere this would be thrown. It should be safe to remove these exceptions.", "author": "cpmeister", "createdAt": "2020-05-23T01:42:48Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java", "diffHunk": "@@ -44,20 +45,24 @@\n     public WaitForTopicValue(MqttBrokerConnection connection, String topic)\n             throws InterruptedException, ExecutionException {", "originalCommit": "4f6810a2024d8e60c39ffd35d4e0c8a07697c70b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd85bb2f1cf3d7c6f9737caa8e76119255ccff", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\nindex d692b1e3ce..3ee6968eb8 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n\n@@ -42,8 +41,8 @@ public class WaitForTopicValue {\n      * @throws InterruptedException\n      * @throws ExecutionException\n      */\n-    public WaitForTopicValue(MqttBrokerConnection connection, String topic)\n-            throws InterruptedException, ExecutionException {\n+    public WaitForTopicValue(MqttBrokerConnection connection, String topic) {\n+        final CompletableFuture<String> future = new CompletableFuture<>();\n         final MqttMessageSubscriber mqttMessageSubscriber = (t, payload) -> {\n             try {\n                 future.complete(new String(payload, \"UTF-8\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwMzI1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r429503256", "bodyText": "I don't think this needs to be a field anymore since it isn't used outside of the constructor.", "author": "cpmeister", "createdAt": "2020-05-23T01:44:35Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java", "diffHunk": "@@ -24,14 +25,14 @@\n import org.eclipse.smarthome.io.transport.mqtt.MqttMessageSubscriber;\n \n /**\n- * Waits for a topic value to appear on a MQTT topic. One-time useable only per instance.\n+ * Waits for a topic value to appear on a MQTT topic. One-time usable only per instance.\n  *\n  * @author David Graeff - Initial contribution\n  */\n @NonNullByDefault\n public class WaitForTopicValue {\n-    private CompletableFuture<String> future = new CompletableFuture<>();\n-    private final CompletableFuture<Boolean> subscripeFuture;\n+    private final CompletableFuture<String> future = new CompletableFuture<>();", "originalCommit": "4f6810a2024d8e60c39ffd35d4e0c8a07697c70b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd85bb2f1cf3d7c6f9737caa8e76119255ccff", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\nindex d692b1e3ce..3ee6968eb8 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n\n@@ -31,7 +31,6 @@ import org.eclipse.smarthome.io.transport.mqtt.MqttMessageSubscriber;\n  */\n @NonNullByDefault\n public class WaitForTopicValue {\n-    private final CompletableFuture<String> future = new CompletableFuture<>();\n     private final CompletableFuture<String> composeFuture;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MDQ2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7723#discussion_r429540465", "bodyText": "Is it possible to use the String(byte[] bytes, Charset charset) method with const StandardCharsets.UTF_8 to omit the UnsupportedEncodingException?", "author": "cweitkamp", "createdAt": "2020-05-23T12:10:24Z", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java", "diffHunk": "@@ -44,20 +45,24 @@\n     public WaitForTopicValue(MqttBrokerConnection connection, String topic)\n             throws InterruptedException, ExecutionException {\n         final MqttMessageSubscriber mqttMessageSubscriber = (t, payload) -> {\n-            future.complete(new String(payload));\n+            try {\n+                future.complete(new String(payload, \"UTF-8\"));", "originalCommit": "4f6810a2024d8e60c39ffd35d4e0c8a07697c70b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd85bb2f1cf3d7c6f9737caa8e76119255ccff", "chunk": "diff --git a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\nindex d692b1e3ce..3ee6968eb8 100644\n--- a/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n+++ b/bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/WaitForTopicValue.java\n\n@@ -42,8 +41,8 @@ public class WaitForTopicValue {\n      * @throws InterruptedException\n      * @throws ExecutionException\n      */\n-    public WaitForTopicValue(MqttBrokerConnection connection, String topic)\n-            throws InterruptedException, ExecutionException {\n+    public WaitForTopicValue(MqttBrokerConnection connection, String topic) {\n+        final CompletableFuture<String> future = new CompletableFuture<>();\n         final MqttMessageSubscriber mqttMessageSubscriber = (t, payload) -> {\n             try {\n                 future.complete(new String(payload, \"UTF-8\"));\n"}}, {"oid": "ebcd85bb2f1cf3d7c6f9737caa8e76119255ccff", "url": "https://github.com/openhab/openhab-addons/commit/ebcd85bb2f1cf3d7c6f9737caa8e76119255ccff", "message": "Address even more review comments\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-05-23T12:25:31Z", "type": "commit"}, {"oid": "d284edd07aa2c2e33089c5527acf29fab0c198c8", "url": "https://github.com/openhab/openhab-addons/commit/d284edd07aa2c2e33089c5527acf29fab0c198c8", "message": "Use StandardCharset for UTF-8\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-05-23T12:39:59Z", "type": "commit"}]}