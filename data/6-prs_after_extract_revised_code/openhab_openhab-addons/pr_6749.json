{"pr_number": 6749, "pr_title": "[yeelight] Add support for yeelight 650 with ambient light (Closes #6\u2026", "pr_createdAt": "2020-01-02T20:45:08Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/6749", "timeline": [{"oid": "633d32e0a1ed3c91a2eb91513aea4c6d3518cf46", "url": "https://github.com/openhab/openhab-addons/commit/633d32e0a1ed3c91a2eb91513aea4c6d3518cf46", "message": "[yeelight] Add support for yeelight 650 with ambient light (Closes #6227)\n\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>", "committedDate": "2020-01-02T20:34:10Z", "type": "commit"}, {"oid": "8e258d4828c4b7f6a2ebd654729f16bd0773c2e5", "url": "https://github.com/openhab/openhab-addons/commit/8e258d4828c4b7f6a2ebd654729f16bd0773c2e5", "message": "[yeelight] Combine switch cases with similar logic\n\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>", "committedDate": "2020-01-04T00:18:55Z", "type": "commit"}, {"oid": "27d03d3f22082ff36aac99719c8e11228d0d8d29", "url": "https://github.com/openhab/openhab-addons/commit/27d03d3f22082ff36aac99719c8e11228d0d8d29", "message": "[yeelight] don't initialize variable with useless value\n\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>", "committedDate": "2020-01-04T00:18:55Z", "type": "commit"}, {"oid": "d8758365c4effa12325386f06fda9fdf52befc36", "url": "https://github.com/openhab/openhab-addons/commit/d8758365c4effa12325386f06fda9fdf52befc36", "message": "[yeelight] Instead of creating an executor service on every search we create a cached thread pool once.\n\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>", "committedDate": "2020-01-04T00:20:33Z", "type": "commit"}, {"oid": "c7c1fcb1ee65e2ce7f1e1b13c80cd73a6aefabd9", "url": "https://github.com/openhab/openhab-addons/commit/c7c1fcb1ee65e2ce7f1e1b13c80cd73a6aefabd9", "message": "[yeelight] Fixes code review remarks\n\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>", "committedDate": "2020-01-08T18:11:24Z", "type": "forcePushed"}, {"oid": "f0e0c2f780b37946e88121b3a207ea3033df8137", "url": "https://github.com/openhab/openhab-addons/commit/f0e0c2f780b37946e88121b3a207ea3033df8137", "message": "[yeelight] Fixes code review remarks\n\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>", "committedDate": "2020-01-11T17:20:36Z", "type": "commit"}, {"oid": "f0e0c2f780b37946e88121b3a207ea3033df8137", "url": "https://github.com/openhab/openhab-addons/commit/f0e0c2f780b37946e88121b3a207ea3033df8137", "message": "[yeelight] Fixes code review remarks\n\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>", "committedDate": "2020-01-11T17:20:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzAwMw==", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r373623003", "bodyText": "Is it really necessary to catch Exception here? Whatr type of exceptions do you expect? The problem with catching Exception is that it also catches NPE and therefore might hide programming errors.", "author": "J-N-K", "createdAt": "2020-01-31T18:33:45Z", "path": "bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/CeilingDeviceWithAmbientDevice.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.yeelight.internal.lib.device;\n+\n+import org.openhab.binding.yeelight.internal.lib.enums.ActiveMode;\n+import org.openhab.binding.yeelight.internal.lib.enums.DeviceType;\n+import org.openhab.binding.yeelight.internal.lib.enums.MethodAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * The {@link CeilingDeviceWithAmbientDevice} contains methods for handling the ceiling device with ambient light.\n+ *\n+ * @author Viktor Koop - Initial contribution\n+ */\n+public class CeilingDeviceWithAmbientDevice extends CeilingDevice\n+        implements DeviceWithAmbientLight, DeviceWithNightlight {\n+    private final Logger logger = LoggerFactory.getLogger(CeilingDeviceWithAmbientDevice.class);\n+\n+    public CeilingDeviceWithAmbientDevice(String id) {\n+        super(id);\n+\n+        mDeviceType = DeviceType.ceiling4;\n+    }\n+\n+    @Override\n+    public void onNotify(String msg) {\n+        logger.debug(\"Got state: {}\", msg);\n+\n+        JsonObject result = new JsonParser().parse(msg).getAsJsonObject();\n+\n+        try {\n+            if (result.has(\"id\")) {\n+                String id = result.get(\"id\").getAsString();\n+                // for cmd transaction.\n+\n+                if (mQueryList.contains(id)) {\n+                    JsonArray status = result.get(\"result\").getAsJsonArray();\n+\n+                    final String backgroundPowerState = status.get(4).toString();\n+                    if (\"\\\"off\\\"\".equals(backgroundPowerState)) {\n+                        mDeviceStatus.setBackgroundIsPowerOff(true);\n+                    } else if (\"\\\"on\\\"\".equals(backgroundPowerState)) {\n+                        mDeviceStatus.setBackgroundIsPowerOff(false);\n+                    }\n+\n+                    final int backgroundBrightness = status.get(5).getAsInt();\n+                    mDeviceStatus.setBackgroundBrightness(backgroundBrightness);\n+\n+                    final int backgroundHue = status.get(6).getAsInt();\n+                    mDeviceStatus.setBackgroundHue(backgroundHue);\n+\n+                    final int backgroundSaturation = status.get(7).getAsInt();\n+                    mDeviceStatus.setBackgroundSat(backgroundSaturation);\n+\n+                    final int activeMode = status.get(8).getAsInt();\n+                    mDeviceStatus.setActiveMode(ActiveMode.values()[activeMode]);\n+                }\n+            }\n+        } catch (Exception e) {", "originalCommit": "f0e0c2f780b37946e88121b3a207ea3033df8137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY2MDIzMw==", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r373660233", "bodyText": "I don't think the try/catch block is needed at all and will remove it.", "author": "vkoop", "createdAt": "2020-01-31T19:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "dbcbb991001a049858ddccafe8dd0b5f2e575713", "chunk": "diff --git a/bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/CeilingDeviceWithAmbientDevice.java b/bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/CeilingDeviceWithAmbientDevice.java\nindex e075a102bc..8b129c8429 100644\n--- a/bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/CeilingDeviceWithAmbientDevice.java\n+++ b/bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/CeilingDeviceWithAmbientDevice.java\n\n@@ -43,36 +43,32 @@ public class CeilingDeviceWithAmbientDevice extends CeilingDevice\n \n         JsonObject result = new JsonParser().parse(msg).getAsJsonObject();\n \n-        try {\n-            if (result.has(\"id\")) {\n-                String id = result.get(\"id\").getAsString();\n-                // for cmd transaction.\n-\n-                if (mQueryList.contains(id)) {\n-                    JsonArray status = result.get(\"result\").getAsJsonArray();\n-\n-                    final String backgroundPowerState = status.get(4).toString();\n-                    if (\"\\\"off\\\"\".equals(backgroundPowerState)) {\n-                        mDeviceStatus.setBackgroundIsPowerOff(true);\n-                    } else if (\"\\\"on\\\"\".equals(backgroundPowerState)) {\n-                        mDeviceStatus.setBackgroundIsPowerOff(false);\n-                    }\n+        if (result.has(\"id\")) {\n+            String id = result.get(\"id\").getAsString();\n+            // for cmd transaction.\n+\n+            if (mQueryList.contains(id)) {\n+                JsonArray status = result.get(\"result\").getAsJsonArray();\n+\n+                final String backgroundPowerState = status.get(4).toString();\n+                if (\"\\\"off\\\"\".equals(backgroundPowerState)) {\n+                    mDeviceStatus.setBackgroundIsPowerOff(true);\n+                } else if (\"\\\"on\\\"\".equals(backgroundPowerState)) {\n+                    mDeviceStatus.setBackgroundIsPowerOff(false);\n+                }\n \n-                    final int backgroundBrightness = status.get(5).getAsInt();\n-                    mDeviceStatus.setBackgroundBrightness(backgroundBrightness);\n+                final int backgroundBrightness = status.get(5).getAsInt();\n+                mDeviceStatus.setBackgroundBrightness(backgroundBrightness);\n \n-                    final int backgroundHue = status.get(6).getAsInt();\n-                    mDeviceStatus.setBackgroundHue(backgroundHue);\n+                final int backgroundHue = status.get(6).getAsInt();\n+                mDeviceStatus.setBackgroundHue(backgroundHue);\n \n-                    final int backgroundSaturation = status.get(7).getAsInt();\n-                    mDeviceStatus.setBackgroundSat(backgroundSaturation);\n+                final int backgroundSaturation = status.get(7).getAsInt();\n+                mDeviceStatus.setBackgroundSat(backgroundSaturation);\n \n-                    final int activeMode = status.get(8).getAsInt();\n-                    mDeviceStatus.setActiveMode(ActiveMode.values()[activeMode]);\n-                }\n+                final int activeMode = status.get(8).getAsInt();\n+                mDeviceStatus.setActiveMode(ActiveMode.values()[activeMode]);\n             }\n-        } catch (Exception e) {\n-            logger.debug(\"Problem setting values\", e);\n         }\n \n         super.onNotify(msg);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNDUwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r373624505", "bodyText": "Wouldn't it be possible to use switch (property)  here? Since Java 7 we can switch on strings.", "author": "J-N-K", "createdAt": "2020-01-31T18:37:11Z", "path": "bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/DeviceBase.java", "diffHunk": "@@ -79,48 +78,39 @@ public void onNotify(String response) {\n         boolean needNotify = true;\n         JsonObject message = new JsonParser().parse(response).getAsJsonObject();\n         try {\n-            String updateProp = \"\";\n             if (message.has(\"method\")) {\n                 String method = message.get(\"method\").toString().replace(\"\\\"\", \"\");\n                 if (method.equals(\"props\")) {// Property notify\n                     String params = message.get(\"params\").toString();\n                     JsonObject propsObject = new JsonParser().parse(params).getAsJsonObject();\n-                    Set<Entry<String, JsonElement>> props = propsObject.entrySet();\n-                    Iterator<Entry<String, JsonElement>> iterator = props.iterator();\n-                    while (iterator.hasNext()) {\n-                        Entry<String, JsonElement> prop = iterator.next();\n-                        if (prop.getKey().equals(\"power\")) {\n-                            updateProp += \" power\";\n+                    for (Entry<String, JsonElement> prop : propsObject.entrySet()) {\n+                        final YeelightDeviceProperty property = YeelightDeviceProperty.fromString(prop.getKey());\n+                        if (YeelightDeviceProperty.POWER.equals(property)) {", "originalCommit": "f0e0c2f780b37946e88121b3a207ea3033df8137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY2MTg4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r373661887", "bodyText": "Initially I didn't want to refactor to much of the code to simplify the review process.\nI've changed the if/else block to a switch statement.", "author": "vkoop", "createdAt": "2020-01-31T20:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNDUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "dbcbb991001a049858ddccafe8dd0b5f2e575713", "chunk": "diff --git a/bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/DeviceBase.java b/bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/DeviceBase.java\nindex d2ac22c285..ef78b5b1fe 100644\n--- a/bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/DeviceBase.java\n+++ b/bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/DeviceBase.java\n\n@@ -85,108 +85,136 @@ public abstract class DeviceBase {\n                     JsonObject propsObject = new JsonParser().parse(params).getAsJsonObject();\n                     for (Entry<String, JsonElement> prop : propsObject.entrySet()) {\n                         final YeelightDeviceProperty property = YeelightDeviceProperty.fromString(prop.getKey());\n-                        if (YeelightDeviceProperty.POWER.equals(property)) {\n-                            if (prop.getValue().toString().equals(\"\\\"off\\\"\")) {\n-                                mDeviceStatus.setPowerOff(true);\n-                            } else if (prop.getValue().toString().equals(\"\\\"on\\\"\")) {\n-                                mDeviceStatus.setPowerOff(false);\n-                            }\n-                        } else if (YeelightDeviceProperty.BRIGHT.equals(property)) {\n-                            mDeviceStatus.setBrightness(prop.getValue().getAsInt());\n-                        } else if (YeelightDeviceProperty.CT.equals(property)) {\n-                            mDeviceStatus.setCt(prop.getValue().getAsInt());\n-                            mDeviceStatus.setMode(DeviceMode.MODE_SUNHINE);\n-                        } else if (YeelightDeviceProperty.RGB.equals(property)) {\n-                            mDeviceStatus.setMode(DeviceMode.MODE_COLOR);\n-                            int color = prop.getValue().getAsInt();\n-                            mDeviceStatus.setColor(color);\n-\n-                            mDeviceStatus.setR((color >> 16) & 0xFF);\n-                            mDeviceStatus.setG((color >> 8) & 0xFF);\n-                            mDeviceStatus.setB(color & 0xFF);\n-                        } else if (YeelightDeviceProperty.HUE.equals(property)) {\n-                            mDeviceStatus.setMode(DeviceMode.MODE_HSV);\n-                            mDeviceStatus.setHue(prop.getValue().getAsInt());\n-                        } else if (YeelightDeviceProperty.SAT.equals(property)) {\n-                            mDeviceStatus.setMode(DeviceMode.MODE_HSV);\n-                            mDeviceStatus.setSat(prop.getValue().getAsInt());\n-                        } else if (YeelightDeviceProperty.COLOR_MODE.equals(property)) {\n-                            switch (prop.getValue().getAsInt()) {\n-                                case DeviceStatus.MODE_COLOR:\n-                                    mDeviceStatus.setMode(DeviceMode.MODE_COLOR);\n-                                    break;\n-                                case DeviceStatus.MODE_COLORTEMPERATURE:\n-                                    mDeviceStatus.setMode(DeviceMode.MODE_SUNHINE);\n-                                    break;\n-                                case DeviceStatus.MODE_HSV:\n-                                    mDeviceStatus.setMode(DeviceMode.MODE_HSV);\n-                                    break;\n-                                default:\n-                                    break;\n+                        if (null == property) {\n+                            logger.debug(\"Unhandled property: {}\", prop.getKey());\n+                            continue;\n+                        }\n+\n+                        switch (property) {\n+                            case POWER:\n+                                if (prop.getValue().toString().equals(\"\\\"off\\\"\")) {\n+                                    mDeviceStatus.setPowerOff(true);\n+                                } else if (prop.getValue().toString().equals(\"\\\"on\\\"\")) {\n+                                    mDeviceStatus.setPowerOff(false);\n+                                }\n+                                break;\n+                            case BRIGHT:\n+                                mDeviceStatus.setBrightness(prop.getValue().getAsInt());\n+                                break;\n+                            case CT:\n+                                mDeviceStatus.setCt(prop.getValue().getAsInt());\n+                                mDeviceStatus.setMode(DeviceMode.MODE_SUNHINE);\n+                                break;\n+                            case RGB: {\n+                                mDeviceStatus.setMode(DeviceMode.MODE_COLOR);\n+                                int color = prop.getValue().getAsInt();\n+                                mDeviceStatus.setColor(color);\n+\n+                                mDeviceStatus.setR((color >> 16) & 0xFF);\n+                                mDeviceStatus.setG((color >> 8) & 0xFF);\n+                                mDeviceStatus.setB(color & 0xFF);\n+                                break;\n                             }\n-                        } else if (YeelightDeviceProperty.FLOWING.equals(property)) {\n-                            mDeviceStatus.setIsFlowing(prop.getValue().getAsInt() == 1);\n-                        } else if (YeelightDeviceProperty.FLOW_PARAMS.equals(property)) {\n-                            // {\"method\":\"props\",\"params\":{\"flow_params\":\"0,0,1000,1,15935488,31,1000,1,13366016,31,1000,1,62370,31,1000,1,7995635,31\"}}\n-                            String[] flowStrs = prop.getValue().toString().replace(\"\\\"\", \"\").split(\",\");\n-                            if (flowStrs.length > 2 && (flowStrs.length - 2) % 4 == 0) {\n-                                mDeviceStatus.setFlowCount(Integer.parseInt(flowStrs[0]));\n-                                mDeviceStatus.setFlowEndAction(Integer.parseInt(flowStrs[1]));\n-                                if (mDeviceStatus.getFlowItems() == null) {\n-                                    mDeviceStatus.setFlowItems(new ArrayList<>());\n+                            case HUE:\n+                                mDeviceStatus.setMode(DeviceMode.MODE_HSV);\n+                                mDeviceStatus.setHue(prop.getValue().getAsInt());\n+                                break;\n+                            case SAT:\n+                                mDeviceStatus.setMode(DeviceMode.MODE_HSV);\n+                                mDeviceStatus.setSat(prop.getValue().getAsInt());\n+                                break;\n+                            case COLOR_MODE:\n+                                switch (prop.getValue().getAsInt()) {\n+                                    case DeviceStatus.MODE_COLOR:\n+                                        mDeviceStatus.setMode(DeviceMode.MODE_COLOR);\n+                                        break;\n+                                    case DeviceStatus.MODE_COLORTEMPERATURE:\n+                                        mDeviceStatus.setMode(DeviceMode.MODE_SUNHINE);\n+                                        break;\n+                                    case DeviceStatus.MODE_HSV:\n+                                        mDeviceStatus.setMode(DeviceMode.MODE_HSV);\n+                                        break;\n+                                    default:\n+                                        break;\n                                 }\n-                                mDeviceStatus.getFlowItems().clear();\n-                                for (int i = 0; i < ((flowStrs.length - 2) / 4); i++) {\n-                                    ColorFlowItem item = new ColorFlowItem();\n-                                    item.duration = Integer.valueOf(flowStrs[4 * i + 2]);\n-                                    item.mode = Integer.valueOf(flowStrs[4 * i + 3]);\n-                                    item.value = Integer.valueOf(flowStrs[4 * i + 4]);\n-                                    item.brightness = Integer.valueOf(flowStrs[4 * i + 5]);\n-                                    mDeviceStatus.getFlowItems().add(item);\n+                                break;\n+                            case FLOWING:\n+                                mDeviceStatus.setIsFlowing(prop.getValue().getAsInt() == 1);\n+                                break;\n+                            case FLOW_PARAMS:\n+                                // {\"method\":\"props\",\"params\":{\"flow_params\":\"0,0,1000,1,15935488,31,1000,1,13366016,31,1000,1,62370,31,1000,1,7995635,31\"}}\n+                                String[] flowStrs = prop.getValue().toString().replace(\"\\\"\", \"\").split(\",\");\n+                                if (flowStrs.length > 2 && (flowStrs.length - 2) % 4 == 0) {\n+                                    mDeviceStatus.setFlowCount(Integer.parseInt(flowStrs[0]));\n+                                    mDeviceStatus.setFlowEndAction(Integer.parseInt(flowStrs[1]));\n+                                    if (mDeviceStatus.getFlowItems() == null) {\n+                                        mDeviceStatus.setFlowItems(new ArrayList<>());\n+                                    }\n+                                    mDeviceStatus.getFlowItems().clear();\n+                                    for (int i = 0; i < ((flowStrs.length - 2) / 4); i++) {\n+                                        ColorFlowItem item = new ColorFlowItem();\n+                                        item.duration = Integer.valueOf(flowStrs[4 * i + 2]);\n+                                        item.mode = Integer.valueOf(flowStrs[4 * i + 3]);\n+                                        item.value = Integer.valueOf(flowStrs[4 * i + 4]);\n+                                        item.brightness = Integer.valueOf(flowStrs[4 * i + 5]);\n+                                        mDeviceStatus.getFlowItems().add(item);\n+                                    }\n                                 }\n+                                break;\n+                            case DELAYOFF:\n+                                int delayOff = prop.getValue().getAsInt();\n+                                if (delayOff > 0 && delayOff <= 60) {\n+                                    mDeviceStatus.setDelayOff(delayOff);\n+                                } else {\n+                                    mDeviceStatus.setDelayOff(DeviceStatus.DEFAULT_NO_DELAY);\n+                                }\n+                                break;\n+                            case MUSIC_ON:\n+                                mDeviceStatus.setMusicOn(prop.getValue().getAsInt() == 1);\n+                                break;\n+                            case NAME:\n+                                mDeviceName = prop.getValue().toString();\n+                                break;\n+                            case BG_RGB: {\n+                                int color = prop.getValue().getAsInt();\n+                                mDeviceStatus.setBackgroundR((color >> 16) & 0xFF);\n+                                mDeviceStatus.setBackgroundG((color >> 8) & 0xFF);\n+                                mDeviceStatus.setBackgroundB(color & 0xFF);\n+                                break;\n                             }\n-                        } else if (YeelightDeviceProperty.DELAYOFF.equals(property)) {\n-                            int delayOff = prop.getValue().getAsInt();\n-                            if (delayOff > 0 && delayOff <= 60) {\n-                                mDeviceStatus.setDelayOff(delayOff);\n-                            } else {\n-                                mDeviceStatus.setDelayOff(DeviceStatus.DEFAULT_NO_DELAY);\n-                            }\n-                        } else if (YeelightDeviceProperty.MUSIC_ON.equals(property)) {\n-                            mDeviceStatus.setMusicOn(prop.getValue().getAsInt() == 1);\n-                        } else if (YeelightDeviceProperty.NAME.equals(property)) {\n-                            mDeviceName = prop.getValue().toString();\n-                        } else if (YeelightDeviceProperty.BG_RGB.equals(property)) {\n-                            int color = prop.getValue().getAsInt();\n-                            mDeviceStatus.setBackgroundR((color >> 16) & 0xFF);\n-                            mDeviceStatus.setBackgroundG((color >> 8) & 0xFF);\n-                            mDeviceStatus.setBackgroundB(color & 0xFF);\n-                        } else if (YeelightDeviceProperty.BG_HUE.equals(property)) {\n-                            mDeviceStatus.setBackgroundHue(prop.getValue().getAsInt());\n-\n-                        } else if (YeelightDeviceProperty.BG_SAT.equals(property)) {\n-                            mDeviceStatus.setBackgroundSat(prop.getValue().getAsInt());\n-                        } else if (YeelightDeviceProperty.BG_BRIGHT.equals(property)) {\n-                            mDeviceStatus.setBackgroundBrightness(prop.getValue().getAsInt());\n-                        } else if (YeelightDeviceProperty.BG_POWER.equals(property)) {\n-                            if (\"\\\"off\\\"\".equals(prop.getValue().toString())) {\n-                                mDeviceStatus.setBackgroundIsPowerOff(true);\n-                            } else if (\"\\\"on\\\"\".equals(prop.getValue().toString())) {\n-                                mDeviceStatus.setBackgroundIsPowerOff(false);\n-                            }\n-                        } else if (YeelightDeviceProperty.NL_BR.equals(property)) {\n-                            // when the light is switched from nightlight-mode to sunlight-mode it will send nl_br:0\n-                            // therefore we have to ignore the case.\n-                            final int intValue = prop.getValue().getAsInt();\n-                            if (intValue > 0) {\n-                                mDeviceStatus.setBrightness(intValue);\n-                            }\n-                        } else if (YeelightDeviceProperty.ACTIVE_MODE.equals(property)) {\n-                            int activeModeInt = prop.getValue().getAsInt();\n-                            final ActiveMode activeMode = ActiveMode.values()[activeModeInt];\n-                            mDeviceStatus.setActiveMode(activeMode);\n-                        } else {\n-                            logger.debug(\"Maybe unsupported property: {} - {}\", property, prop.getKey());\n+                            case BG_HUE:\n+                                mDeviceStatus.setBackgroundHue(prop.getValue().getAsInt());\n+\n+                                break;\n+                            case BG_SAT:\n+                                mDeviceStatus.setBackgroundSat(prop.getValue().getAsInt());\n+                                break;\n+                            case BG_BRIGHT:\n+                                mDeviceStatus.setBackgroundBrightness(prop.getValue().getAsInt());\n+                                break;\n+                            case BG_POWER:\n+                                if (\"\\\"off\\\"\".equals(prop.getValue().toString())) {\n+                                    mDeviceStatus.setBackgroundIsPowerOff(true);\n+                                } else if (\"\\\"on\\\"\".equals(prop.getValue().toString())) {\n+                                    mDeviceStatus.setBackgroundIsPowerOff(false);\n+                                }\n+                                break;\n+                            case NL_BR:\n+                                // when the light is switched from nightlight-mode to sunlight-mode it will send nl_br:0\n+                                // therefore we have to ignore the case.\n+                                final int intValue = prop.getValue().getAsInt();\n+                                if (intValue > 0) {\n+                                    mDeviceStatus.setBrightness(intValue);\n+                                }\n+                                break;\n+                            case ACTIVE_MODE:\n+                                int activeModeInt = prop.getValue().getAsInt();\n+                                final ActiveMode activeMode = ActiveMode.values()[activeModeInt];\n+                                mDeviceStatus.setActiveMode(activeMode);\n+                                break;\n+                            default:\n+                                logger.debug(\"Maybe unsupported property: {} - {}\", property, prop.getKey());\n+                                break;\n                         }\n                     }\n                 }\n"}}, {"oid": "dbcbb991001a049858ddccafe8dd0b5f2e575713", "url": "https://github.com/openhab/openhab-addons/commit/dbcbb991001a049858ddccafe8dd0b5f2e575713", "message": "[yeelight] Fixed code review remarks.\n\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>", "committedDate": "2020-01-31T20:25:36Z", "type": "commit"}, {"oid": "dbcbb991001a049858ddccafe8dd0b5f2e575713", "url": "https://github.com/openhab/openhab-addons/commit/dbcbb991001a049858ddccafe8dd0b5f2e575713", "message": "[yeelight] Fixed code review remarks.\n\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>", "committedDate": "2020-01-31T20:25:36Z", "type": "forcePushed"}]}