{"pr_number": 7969, "pr_title": "[amazonechocontrol] add support for smarthome devices", "pr_createdAt": "2020-06-21T15:33:13Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7969", "timeline": [{"oid": "d35c69b823c9d02204dc6b12163c37858ca72f10", "url": "https://github.com/openhab/openhab-addons/commit/d35c69b823c9d02204dc6b12163c37858ca72f10", "message": "[amazonechocontrol]\nPolling Interval changed to minutes\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-12T05:06:31Z", "type": "commit"}, {"oid": "58984fda4597814e23b33d33614241fbe6cd7798", "url": "https://github.com/openhab/openhab-addons/commit/58984fda4597814e23b33d33614241fbe6cd7798", "message": "[amazonechocontrol]\nPolling Interval changed to minutes\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-12T05:07:47Z", "type": "commit"}, {"oid": "61a37f3c96cc775a178216f093a35963f682c1cd", "url": "https://github.com/openhab/openhab-addons/commit/61a37f3c96cc775a178216f093a35963f682c1cd", "message": "[amazonechocontrol]\nPolling Interval changed to minutes\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-12T05:11:26Z", "type": "commit"}, {"oid": "e908d22365eaec65a26302f4f08b09cce6abf668", "url": "https://github.com/openhab/openhab-addons/commit/e908d22365eaec65a26302f4f08b09cce6abf668", "message": "[amazonechocontrol]\nFix readme\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-13T16:50:58Z", "type": "commit"}, {"oid": "6783587c4be1edd7621bf2cb7bfd796357f8d956", "url": "https://github.com/openhab/openhab-addons/commit/6783587c4be1edd7621bf2cb7bfd796357f8d956", "message": "[amazonechocontrol]\nGuard support and code cleanup\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-21T08:23:19Z", "type": "commit"}, {"oid": "da9e8cc599ad67c00f971ad809782a52c7a18f6e", "url": "https://github.com/openhab/openhab-addons/commit/da9e8cc599ad67c00f971ad809782a52c7a18f6e", "message": "Merge branch 'master' of https://github.com/openhab/openhab2-addons", "committedDate": "2019-09-24T17:45:23Z", "type": "commit"}, {"oid": "a2ccc5cae5eea0674195e59c02c1b7577cde1178", "url": "https://github.com/openhab/openhab-addons/commit/a2ccc5cae5eea0674195e59c02c1b7577cde1178", "message": "[amazonechocontrol]\nFix delayed update\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-25T19:05:25Z", "type": "commit"}, {"oid": "1d28a5502330c097a141ec526cb8a534652fc9d8", "url": "https://github.com/openhab/openhab-addons/commit/1d28a5502330c097a141ec526cb8a534652fc9d8", "message": "Merge pull request #6 from mgeramb/HandleOnOffInPercentageChannel\n\n[amazonechocontrol]", "committedDate": "2019-09-27T19:05:54Z", "type": "commit"}, {"oid": "bb711ee07f78712c58d2919e7181826d6295a73d", "url": "https://github.com/openhab/openhab-addons/commit/bb711ee07f78712c58d2919e7181826d6295a73d", "message": "Conflicts resolved", "committedDate": "2019-09-27T19:44:14Z", "type": "commit"}, {"oid": "f3ac308e3b476f86ad0a8be6b1f485d1003b982e", "url": "https://github.com/openhab/openhab-addons/commit/f3ac308e3b476f86ad0a8be6b1f485d1003b982e", "message": "[amazonechocontrol]\nSmartHome update groups\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-10-02T18:11:28Z", "type": "commit"}, {"oid": "8365a5bfd3a32f485d16980048d95acf9796ac54", "url": "https://github.com/openhab/openhab-addons/commit/8365a5bfd3a32f485d16980048d95acf9796ac54", "message": "[amazonechocontrol]\nSmartHome update groups\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-10-02T18:20:18Z", "type": "commit"}, {"oid": "1dd4e208fc29b4e0dc582d9173b7e70d9036abb9", "url": "https://github.com/openhab/openhab-addons/commit/1dd4e208fc29b4e0dc582d9173b7e70d9036abb9", "message": "Merge branch 'master' of https://github.com/openhab/openhab2-addons", "committedDate": "2019-10-16T17:22:41Z", "type": "commit"}, {"oid": "f4dfe2d8a5d4e0e5f92e514c7114dffef3fbd904", "url": "https://github.com/openhab/openhab-addons/commit/f4dfe2d8a5d4e0e5f92e514c7114dffef3fbd904", "message": "[amazonechocontrol]\nFix spelling\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-10-16T17:31:13Z", "type": "commit"}, {"oid": "e12ba9cdfdc85ffb1cb90bbb095d78a7ac7c8c76", "url": "https://github.com/openhab/openhab-addons/commit/e12ba9cdfdc85ffb1cb90bbb095d78a7ac7c8c76", "message": "[amazonechocontrol]\nFix group initialization\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-10-16T18:57:02Z", "type": "commit"}, {"oid": "417f3f800a9b3723ca0e9c121bffaa19e2b044da", "url": "https://github.com/openhab/openhab-addons/commit/417f3f800a9b3723ca0e9c121bffaa19e2b044da", "message": "Merge branch 'master' of https://github.com/openhab/openhab2-addons", "committedDate": "2019-11-17T20:15:04Z", "type": "commit"}, {"oid": "b42de5dbca388dfa5b1cc51df1f2ccd4ea00444c", "url": "https://github.com/openhab/openhab-addons/commit/b42de5dbca388dfa5b1cc51df1f2ccd4ea00444c", "message": "[amazonechocontrol]\nMerge master\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-11-17T21:13:04Z", "type": "commit"}, {"oid": "f2ae58075b23e3e404556ea54f5c7c52b675eef7", "url": "https://github.com/openhab/openhab-addons/commit/f2ae58075b23e3e404556ea54f5c7c52b675eef7", "message": "Merge pull request #11 from mgeramb/SmartHomeDeviceHandling\n\nMerge of openhab master and improve readme", "committedDate": "2019-11-18T05:18:54Z", "type": "commit"}, {"oid": "892b51b11713d1afab37a09fd8fbedb58ecce57a", "url": "https://github.com/openhab/openhab-addons/commit/892b51b11713d1afab37a09fd8fbedb58ecce57a", "message": "Removed unused file", "committedDate": "2019-11-20T17:38:20Z", "type": "commit"}, {"oid": "11ce859e4838826af6227be5efd057377cbeb4f6", "url": "https://github.com/openhab/openhab-addons/commit/11ce859e4838826af6227be5efd057377cbeb4f6", "message": "Removed unused file", "committedDate": "2019-11-20T17:47:10Z", "type": "commit"}, {"oid": "306f57be2160044bb50dfa55c3c72b417f333e73", "url": "https://github.com/openhab/openhab-addons/commit/306f57be2160044bb50dfa55c3c72b417f333e73", "message": "Error fixes", "committedDate": "2019-11-20T18:16:10Z", "type": "commit"}, {"oid": "f37c709e0a670b5192777218a618fe3369598dab", "url": "https://github.com/openhab/openhab-addons/commit/f37c709e0a670b5192777218a618fe3369598dab", "message": "codestyle\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-06-20T08:07:29Z", "type": "commit"}, {"oid": "fc99c6ea3d99a0f14bb98ddc26b92eabfdbe4eec", "url": "https://github.com/openhab/openhab-addons/commit/fc99c6ea3d99a0f14bb98ddc26b92eabfdbe4eec", "message": "Merge branch '2.5.x' into lkn94_SmartHome\n\n# Conflicts:\n#\tbundles/org.openhab.binding.amazonechocontrol/README.md\n#\tbundles/org.openhab.binding.amazonechocontrol/pom.xml\n#\tbundles/org.openhab.binding.amazonechocontrol/src/main/feature/feature.xml\n#\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/AmazonEchoControlBindingConstants.java\n#\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/AmazonEchoControlHandlerFactory.java\n#\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/WebSocketConnection.java\n#\tbundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/AmazonEchoDiscovery.java\n#\tbundles/org.openhab.binding.amazonechocontrol/src/main/resources/ESH-INF/binding/binding.xml\n#\tbundles/org.openhab.binding.amazonechocontrol/src/main/resources/ESH-INF/thing/thing-types.xml", "committedDate": "2020-06-20T08:22:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4Mjg1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444482851", "bodyText": "Isn't ExtendedDiscoveryService deprecated?", "author": "cpmeister", "createdAt": "2020-06-23T20:19:28Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/AmazonEchoDiscovery.java", "diffHunk": "@@ -44,17 +54,24 @@\n  * @author Michael Geramb - Initial contribution\n  */\n @NonNullByDefault\n-public class AmazonEchoDiscovery extends AbstractDiscoveryService {\n+public class AmazonEchoDiscovery extends AbstractDiscoveryService implements ExtendedDiscoveryService {", "originalCommit": "1b5420d0c2985a42b5f8f8f5594ad63354a87216", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMjYwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444522600", "bodyText": "Ah, just read your comment @J-N-K, so feel free to ignore my comment.", "author": "cpmeister", "createdAt": "2020-06-23T21:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4Mjg1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MDE5MA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444490190", "bodyText": "What is the point of this using Function<String, HandlerBase>  values instead of Supplier<HandlerBase> values? None of the statically constructed values even use the String argument.", "author": "cpmeister", "createdAt": "2020-06-23T20:33:50Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/Constants.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.smarthome;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants;\n+\n+/**\n+ * @author Michael Geramb - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Constants {\n+    public static final Map<String, @Nullable Function<String, HandlerBase>> HANDLER_FACTORY = new HashMap<>();", "originalCommit": "1b5420d0c2985a42b5f8f8f5594ad63354a87216", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkwNTUxMw==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444905513", "bodyText": "Done", "author": "J-N-K", "createdAt": "2020-06-24T13:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MDE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/Constants.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/Constants.java\nindex 166607cd79..f6d8e393fe 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/Constants.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/Constants.java\n\n@@ -15,7 +15,7 @@ package org.openhab.binding.amazonechocontrol.internal.smarthome;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n-import java.util.function.Function;\n+import java.util.function.Supplier;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NDk2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444494966", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SmartHomeCapability capabilities[] = shd.capabilities;\n          \n          \n            \n                        SmartHomeCapability[] capabilities = shd.capabilities;", "author": "cpmeister", "createdAt": "2020-06-23T20:43:16Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);\n+        }\n+\n+        if (changed) {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(String channelId, String itemType, ChannelTypeUID channelTypeUID) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            if (channelTypeUID.equals(channel.getChannelTypeUID()) && itemType.equals(channel.getAcceptedItemType())) {\n+                // channel exist with the same settings\n+                return false;\n+            }\n+            // channel exist with other settings, remove it first\n+            removeChannelFromDevice(channelId);\n+        }\n+        updateThing(\n+                editThing().withChannel(ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                        .withType(channelTypeUID).build()).build());\n+        return true;\n+    }\n+\n+    private void removeChannelFromDevice(String channelId) {\n+        updateThing(editThing().withoutChannel(new ChannelUID(getThing().getUID(), channelId)).build());\n+    }\n+\n+    public void updateChannelStates(List<SmartHomeBaseDevice> allDevices,\n+            Map<String, JsonArray> applianceIdToCapabilityStates) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice!\");\n+            return;\n+        }\n+\n+        boolean stateFound = false;\n+        Map<String, List<JsonObject>> mapInterfaceToStates = new HashMap<>();\n+        SmartHomeDevice firstDevice = null;\n+        for (SmartHomeDevice shd : getSupportedSmartHomeDevices(smartHomeBaseDevice, allDevices)) {\n+            JsonArray states = applianceIdToCapabilityStates.get(shd.applianceId);\n+            String applianceId = shd.applianceId;\n+            if (applianceId == null) {\n+                continue;\n+            }\n+            if (states != null) {\n+                stateFound = true;\n+                if (smartHomeBaseDevice.isGroup()) {\n+                    // for groups, store the last state of all devices\n+                    lastStates.put(applianceId, states);\n+                }\n+            } else {\n+                states = lastStates.get(applianceId);\n+                if (states == null) {\n+                    continue;\n+                }\n+            }\n+            if (firstDevice == null) {\n+                firstDevice = shd;\n+            }\n+            for (JsonElement stateElement : states) {\n+                String stateJson = stateElement.getAsString();\n+                if (stateJson.startsWith(\"{\") && stateJson.endsWith(\"}\")) {\n+                    JsonObject state = gson.fromJson(stateJson, JsonObject.class);\n+                    String interfaceName = state.get(\"namespace\").getAsString();\n+                    mapInterfaceToStates.computeIfAbsent(interfaceName, k -> new ArrayList<>()).add(state);\n+                }\n+            }\n+        }\n+        for (HandlerBase handlerBase : handlers.values()) {\n+            if (handlerBase == null) {\n+                continue;\n+            }\n+            UpdateChannelResult result = new UpdateChannelResult();\n+\n+            for (String interfaceName : handlerBase.getSupportedInterface()) {\n+                List<JsonObject> stateList = mapInterfaceToStates.getOrDefault(interfaceName, Collections.emptyList());\n+                try {\n+                    handlerBase.updateChannels(interfaceName, stateList, result);\n+                } catch (Exception e) {\n+                    // We catch all exceptions, otherwise all other things are not updated!\n+                    logger.debug(\"Updating states failed\", e);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+                }\n+            }\n+\n+            if (result.needSingleUpdate && smartHomeBaseDevice instanceof SmartHomeDevice && accountHandler != null) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeBaseDevice;\n+                accountHandler.forceDelayedSmartHomeStateUpdate(shd.findId());\n+            }\n+        }\n+\n+        if (stateFound) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"State not found\");\n+        }\n+    }\n+\n+    private @Nullable AccountHandler getAccountHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof AccountHandler) {\n+                return (AccountHandler) bridgeHandler;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler == null) {\n+            logger.debug(\"accountHandler is null in {}\", thing.getUID());\n+            return;\n+        }\n+        Connection connection = accountHandler.findConnection();\n+        if (connection == null) {\n+            logger.debug(\"connection is null in {}\", thing.getUID());\n+            return;\n+        }\n+\n+        try {\n+            if (command instanceof RefreshType) {\n+                accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+                return;\n+            }\n+            SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+            if (smartHomeBaseDevice == null) {\n+                logger.debug(\"smarthomeBaseDevice is null in {}\", thing.getUID());\n+                return;\n+            }\n+            Set<SmartHomeDevice> devices = getSupportedSmartHomeDevices(smartHomeBaseDevice,\n+                    accountHandler.getLastKnownSmartHomeDevice());\n+            String channelId = channelUID.getId();\n+\n+            for (String interfaceName : handlers.keySet()) {\n+                HandlerBase handlerBase = handlers.get(interfaceName);\n+                if (handlerBase == null || !handlerBase.hasChannel(channelId)) {\n+                    continue;\n+                }\n+                for (SmartHomeDevice shd : devices) {\n+                    String entityId = shd.entityId;\n+                    if (entityId == null) {\n+                        continue;\n+                    }\n+                    SmartHomeCapability[] capabilities = shd.capabilities;\n+                    if (capabilities == null) {\n+                        logger.debug(\"capabilities is null in {}\", thing.getUID());\n+                        return;\n+                    }\n+                    accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // block updates\n+                    if (handlerBase.handleCommand(connection, shd, entityId, capabilities, channelUID.getId(),\n+                            command)) {\n+                        accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // force update again to restart\n+                        // update timer\n+                        logger.debug(\"Command {} sent to {}\", command, shd.findId());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Handle command failed\", e);\n+        }\n+    }\n+\n+    private static void getCapabilities(Map<String, List<SmartHomeCapability>> result, AccountHandler accountHandler,\n+            SmartHomeBaseDevice device) {\n+        if (device instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) device;\n+            SmartHomeCapability capabilities[] = shd.capabilities;\n+            if (capabilities == null) {\n+                return;\n+            }\n+            for (SmartHomeCapability capability : capabilities) {\n+                String interfaceName = capability.interfaceName;\n+                if (interfaceName != null) {\n+                    result.computeIfAbsent(interfaceName, name -> new ArrayList<>()).add(capability);\n+                }\n+            }\n+        }\n+        if (device instanceof SmartHomeGroup) {\n+            for (SmartHomeDevice shd : getSupportedSmartHomeDevices(device,\n+                    accountHandler.getLastKnownSmartHomeDevice())) {\n+                getCapabilities(result, accountHandler, shd);\n+            }\n+        }\n+    }\n+\n+    public static Set<SmartHomeDevice> getSupportedSmartHomeDevices(@Nullable SmartHomeBaseDevice baseDevice,\n+            List<SmartHomeBaseDevice> allDevices) {\n+        Set<SmartHomeDevice> result = new HashSet<>();\n+        if (baseDevice == null) {\n+            return Collections.emptySet();\n+        }\n+        if (baseDevice instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) baseDevice;\n+            SmartHomeCapability capabilities[] = shd.capabilities;", "originalCommit": "1b5420d0c2985a42b5f8f8f5594ad63354a87216", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\nindex 573581f2bd..ccd55db530 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n\n@@ -25,7 +25,7 @@ import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import java.util.function.Function;\n+import java.util.function.Supplier;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NTE1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444495153", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    SmartHomeCapability capabilities[] = shd.capabilities;\n          \n          \n            \n                                    SmartHomeCapability[] capabilities = shd.capabilities;", "author": "cpmeister", "createdAt": "2020-06-23T20:43:38Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);\n+        }\n+\n+        if (changed) {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(String channelId, String itemType, ChannelTypeUID channelTypeUID) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            if (channelTypeUID.equals(channel.getChannelTypeUID()) && itemType.equals(channel.getAcceptedItemType())) {\n+                // channel exist with the same settings\n+                return false;\n+            }\n+            // channel exist with other settings, remove it first\n+            removeChannelFromDevice(channelId);\n+        }\n+        updateThing(\n+                editThing().withChannel(ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                        .withType(channelTypeUID).build()).build());\n+        return true;\n+    }\n+\n+    private void removeChannelFromDevice(String channelId) {\n+        updateThing(editThing().withoutChannel(new ChannelUID(getThing().getUID(), channelId)).build());\n+    }\n+\n+    public void updateChannelStates(List<SmartHomeBaseDevice> allDevices,\n+            Map<String, JsonArray> applianceIdToCapabilityStates) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice!\");\n+            return;\n+        }\n+\n+        boolean stateFound = false;\n+        Map<String, List<JsonObject>> mapInterfaceToStates = new HashMap<>();\n+        SmartHomeDevice firstDevice = null;\n+        for (SmartHomeDevice shd : getSupportedSmartHomeDevices(smartHomeBaseDevice, allDevices)) {\n+            JsonArray states = applianceIdToCapabilityStates.get(shd.applianceId);\n+            String applianceId = shd.applianceId;\n+            if (applianceId == null) {\n+                continue;\n+            }\n+            if (states != null) {\n+                stateFound = true;\n+                if (smartHomeBaseDevice.isGroup()) {\n+                    // for groups, store the last state of all devices\n+                    lastStates.put(applianceId, states);\n+                }\n+            } else {\n+                states = lastStates.get(applianceId);\n+                if (states == null) {\n+                    continue;\n+                }\n+            }\n+            if (firstDevice == null) {\n+                firstDevice = shd;\n+            }\n+            for (JsonElement stateElement : states) {\n+                String stateJson = stateElement.getAsString();\n+                if (stateJson.startsWith(\"{\") && stateJson.endsWith(\"}\")) {\n+                    JsonObject state = gson.fromJson(stateJson, JsonObject.class);\n+                    String interfaceName = state.get(\"namespace\").getAsString();\n+                    mapInterfaceToStates.computeIfAbsent(interfaceName, k -> new ArrayList<>()).add(state);\n+                }\n+            }\n+        }\n+        for (HandlerBase handlerBase : handlers.values()) {\n+            if (handlerBase == null) {\n+                continue;\n+            }\n+            UpdateChannelResult result = new UpdateChannelResult();\n+\n+            for (String interfaceName : handlerBase.getSupportedInterface()) {\n+                List<JsonObject> stateList = mapInterfaceToStates.getOrDefault(interfaceName, Collections.emptyList());\n+                try {\n+                    handlerBase.updateChannels(interfaceName, stateList, result);\n+                } catch (Exception e) {\n+                    // We catch all exceptions, otherwise all other things are not updated!\n+                    logger.debug(\"Updating states failed\", e);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+                }\n+            }\n+\n+            if (result.needSingleUpdate && smartHomeBaseDevice instanceof SmartHomeDevice && accountHandler != null) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeBaseDevice;\n+                accountHandler.forceDelayedSmartHomeStateUpdate(shd.findId());\n+            }\n+        }\n+\n+        if (stateFound) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"State not found\");\n+        }\n+    }\n+\n+    private @Nullable AccountHandler getAccountHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof AccountHandler) {\n+                return (AccountHandler) bridgeHandler;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler == null) {\n+            logger.debug(\"accountHandler is null in {}\", thing.getUID());\n+            return;\n+        }\n+        Connection connection = accountHandler.findConnection();\n+        if (connection == null) {\n+            logger.debug(\"connection is null in {}\", thing.getUID());\n+            return;\n+        }\n+\n+        try {\n+            if (command instanceof RefreshType) {\n+                accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+                return;\n+            }\n+            SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+            if (smartHomeBaseDevice == null) {\n+                logger.debug(\"smarthomeBaseDevice is null in {}\", thing.getUID());\n+                return;\n+            }\n+            Set<SmartHomeDevice> devices = getSupportedSmartHomeDevices(smartHomeBaseDevice,\n+                    accountHandler.getLastKnownSmartHomeDevice());\n+            String channelId = channelUID.getId();\n+\n+            for (String interfaceName : handlers.keySet()) {\n+                HandlerBase handlerBase = handlers.get(interfaceName);\n+                if (handlerBase == null || !handlerBase.hasChannel(channelId)) {\n+                    continue;\n+                }\n+                for (SmartHomeDevice shd : devices) {\n+                    String entityId = shd.entityId;\n+                    if (entityId == null) {\n+                        continue;\n+                    }\n+                    SmartHomeCapability[] capabilities = shd.capabilities;\n+                    if (capabilities == null) {\n+                        logger.debug(\"capabilities is null in {}\", thing.getUID());\n+                        return;\n+                    }\n+                    accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // block updates\n+                    if (handlerBase.handleCommand(connection, shd, entityId, capabilities, channelUID.getId(),\n+                            command)) {\n+                        accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // force update again to restart\n+                        // update timer\n+                        logger.debug(\"Command {} sent to {}\", command, shd.findId());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Handle command failed\", e);\n+        }\n+    }\n+\n+    private static void getCapabilities(Map<String, List<SmartHomeCapability>> result, AccountHandler accountHandler,\n+            SmartHomeBaseDevice device) {\n+        if (device instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) device;\n+            SmartHomeCapability capabilities[] = shd.capabilities;\n+            if (capabilities == null) {\n+                return;\n+            }\n+            for (SmartHomeCapability capability : capabilities) {\n+                String interfaceName = capability.interfaceName;\n+                if (interfaceName != null) {\n+                    result.computeIfAbsent(interfaceName, name -> new ArrayList<>()).add(capability);\n+                }\n+            }\n+        }\n+        if (device instanceof SmartHomeGroup) {\n+            for (SmartHomeDevice shd : getSupportedSmartHomeDevices(device,\n+                    accountHandler.getLastKnownSmartHomeDevice())) {\n+                getCapabilities(result, accountHandler, shd);\n+            }\n+        }\n+    }\n+\n+    public static Set<SmartHomeDevice> getSupportedSmartHomeDevices(@Nullable SmartHomeBaseDevice baseDevice,\n+            List<SmartHomeBaseDevice> allDevices) {\n+        Set<SmartHomeDevice> result = new HashSet<>();\n+        if (baseDevice == null) {\n+            return Collections.emptySet();\n+        }\n+        if (baseDevice instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) baseDevice;\n+            SmartHomeCapability capabilities[] = shd.capabilities;\n+            if (capabilities == null) {\n+                return Collections.emptySet();\n+            }\n+            if (Arrays.stream(capabilities).map(capability -> capability.interfaceName)\n+                    .anyMatch(SUPPORTED_INTERFACES::contains)) {\n+                result.add(shd);\n+            }\n+        } else {\n+            SmartHomeGroup shg = (SmartHomeGroup) baseDevice;\n+            for (SmartHomeBaseDevice device : allDevices) {\n+                if (device instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) device;\n+                    if (shd.tags != null && shd.tags.tagNameToValueSetMap != null\n+                            && shd.tags.tagNameToValueSetMap.groupIdentity != null\n+                            && shg.applianceGroupIdentifier != null && shg.applianceGroupIdentifier.value != null\n+                            && Arrays.asList(shd.tags.tagNameToValueSetMap.groupIdentity)\n+                                    .contains(shg.applianceGroupIdentifier.value)) {\n+                        SmartHomeCapability capabilities[] = shd.capabilities;", "originalCommit": "1b5420d0c2985a42b5f8f8f5594ad63354a87216", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\nindex 573581f2bd..ccd55db530 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n\n@@ -25,7 +25,7 @@ import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import java.util.function.Function;\n+import java.util.function.Supplier;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5Njc0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444496749", "bodyText": "This is highly inefficient, each iteration of the loop results in a fresh edit of the Thing and thus triggers a lot of events that could be avoided if you just called editThing once, removed all the unwanted channels from the builder, then called updateThing.", "author": "cpmeister", "createdAt": "2020-06-23T20:46:47Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);", "originalCommit": "1b5420d0c2985a42b5f8f8f5594ad63354a87216", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkzMTU5OA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444931598", "bodyText": "done.", "author": "J-N-K", "createdAt": "2020-06-24T14:23:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5Njc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\nindex 573581f2bd..ccd55db530 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n\n@@ -25,7 +25,7 @@ import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import java.util.function.Function;\n+import java.util.function.Supplier;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NzQ1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444497459", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SmartHomeCapability capabilities[] = shd.capabilities;\n          \n          \n            \n                        SmartHomeCapability[] capabilities = shd.capabilities;", "author": "cpmeister", "createdAt": "2020-06-23T20:48:05Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);\n+        }\n+\n+        if (changed) {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(String channelId, String itemType, ChannelTypeUID channelTypeUID) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            if (channelTypeUID.equals(channel.getChannelTypeUID()) && itemType.equals(channel.getAcceptedItemType())) {\n+                // channel exist with the same settings\n+                return false;\n+            }\n+            // channel exist with other settings, remove it first\n+            removeChannelFromDevice(channelId);\n+        }\n+        updateThing(\n+                editThing().withChannel(ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                        .withType(channelTypeUID).build()).build());\n+        return true;\n+    }\n+\n+    private void removeChannelFromDevice(String channelId) {\n+        updateThing(editThing().withoutChannel(new ChannelUID(getThing().getUID(), channelId)).build());\n+    }\n+\n+    public void updateChannelStates(List<SmartHomeBaseDevice> allDevices,\n+            Map<String, JsonArray> applianceIdToCapabilityStates) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice!\");\n+            return;\n+        }\n+\n+        boolean stateFound = false;\n+        Map<String, List<JsonObject>> mapInterfaceToStates = new HashMap<>();\n+        SmartHomeDevice firstDevice = null;\n+        for (SmartHomeDevice shd : getSupportedSmartHomeDevices(smartHomeBaseDevice, allDevices)) {\n+            JsonArray states = applianceIdToCapabilityStates.get(shd.applianceId);\n+            String applianceId = shd.applianceId;\n+            if (applianceId == null) {\n+                continue;\n+            }\n+            if (states != null) {\n+                stateFound = true;\n+                if (smartHomeBaseDevice.isGroup()) {\n+                    // for groups, store the last state of all devices\n+                    lastStates.put(applianceId, states);\n+                }\n+            } else {\n+                states = lastStates.get(applianceId);\n+                if (states == null) {\n+                    continue;\n+                }\n+            }\n+            if (firstDevice == null) {\n+                firstDevice = shd;\n+            }\n+            for (JsonElement stateElement : states) {\n+                String stateJson = stateElement.getAsString();\n+                if (stateJson.startsWith(\"{\") && stateJson.endsWith(\"}\")) {\n+                    JsonObject state = gson.fromJson(stateJson, JsonObject.class);\n+                    String interfaceName = state.get(\"namespace\").getAsString();\n+                    mapInterfaceToStates.computeIfAbsent(interfaceName, k -> new ArrayList<>()).add(state);\n+                }\n+            }\n+        }\n+        for (HandlerBase handlerBase : handlers.values()) {\n+            if (handlerBase == null) {\n+                continue;\n+            }\n+            UpdateChannelResult result = new UpdateChannelResult();\n+\n+            for (String interfaceName : handlerBase.getSupportedInterface()) {\n+                List<JsonObject> stateList = mapInterfaceToStates.getOrDefault(interfaceName, Collections.emptyList());\n+                try {\n+                    handlerBase.updateChannels(interfaceName, stateList, result);\n+                } catch (Exception e) {\n+                    // We catch all exceptions, otherwise all other things are not updated!\n+                    logger.debug(\"Updating states failed\", e);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+                }\n+            }\n+\n+            if (result.needSingleUpdate && smartHomeBaseDevice instanceof SmartHomeDevice && accountHandler != null) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeBaseDevice;\n+                accountHandler.forceDelayedSmartHomeStateUpdate(shd.findId());\n+            }\n+        }\n+\n+        if (stateFound) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"State not found\");\n+        }\n+    }\n+\n+    private @Nullable AccountHandler getAccountHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof AccountHandler) {\n+                return (AccountHandler) bridgeHandler;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler == null) {\n+            logger.debug(\"accountHandler is null in {}\", thing.getUID());\n+            return;\n+        }\n+        Connection connection = accountHandler.findConnection();\n+        if (connection == null) {\n+            logger.debug(\"connection is null in {}\", thing.getUID());\n+            return;\n+        }\n+\n+        try {\n+            if (command instanceof RefreshType) {\n+                accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+                return;\n+            }\n+            SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+            if (smartHomeBaseDevice == null) {\n+                logger.debug(\"smarthomeBaseDevice is null in {}\", thing.getUID());\n+                return;\n+            }\n+            Set<SmartHomeDevice> devices = getSupportedSmartHomeDevices(smartHomeBaseDevice,\n+                    accountHandler.getLastKnownSmartHomeDevice());\n+            String channelId = channelUID.getId();\n+\n+            for (String interfaceName : handlers.keySet()) {\n+                HandlerBase handlerBase = handlers.get(interfaceName);\n+                if (handlerBase == null || !handlerBase.hasChannel(channelId)) {\n+                    continue;\n+                }\n+                for (SmartHomeDevice shd : devices) {\n+                    String entityId = shd.entityId;\n+                    if (entityId == null) {\n+                        continue;\n+                    }\n+                    SmartHomeCapability[] capabilities = shd.capabilities;\n+                    if (capabilities == null) {\n+                        logger.debug(\"capabilities is null in {}\", thing.getUID());\n+                        return;\n+                    }\n+                    accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // block updates\n+                    if (handlerBase.handleCommand(connection, shd, entityId, capabilities, channelUID.getId(),\n+                            command)) {\n+                        accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // force update again to restart\n+                        // update timer\n+                        logger.debug(\"Command {} sent to {}\", command, shd.findId());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Handle command failed\", e);\n+        }\n+    }\n+\n+    private static void getCapabilities(Map<String, List<SmartHomeCapability>> result, AccountHandler accountHandler,\n+            SmartHomeBaseDevice device) {\n+        if (device instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) device;\n+            SmartHomeCapability capabilities[] = shd.capabilities;", "originalCommit": "1b5420d0c2985a42b5f8f8f5594ad63354a87216", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\nindex 573581f2bd..ccd55db530 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n\n@@ -25,7 +25,7 @@ import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import java.util.function.Function;\n+import java.util.function.Supplier;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5ODYwOA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444498608", "bodyText": "Same issue as I mentioned earlier.", "author": "cpmeister", "createdAt": "2020-06-23T20:50:15Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);\n+        }\n+\n+        if (changed) {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(String channelId, String itemType, ChannelTypeUID channelTypeUID) {", "originalCommit": "1b5420d0c2985a42b5f8f8f5594ad63354a87216", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkzMTY4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444931685", "bodyText": "done", "author": "J-N-K", "createdAt": "2020-06-24T14:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5ODYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\nindex 573581f2bd..ccd55db530 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n\n@@ -25,7 +25,7 @@ import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import java.util.function.Function;\n+import java.util.function.Supplier;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMTkyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445121921", "bodyText": "This log can be removed", "author": "cpmeister", "createdAt": "2020-06-24T19:29:07Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        ThingBuilder thingBuilder = editThing();\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Supplier<HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.get();\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(thingBuilder, channelInfo.channelId, channelInfo.itemType,\n+                            channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.stream().map(id -> new ChannelUID(thing.getUID(), id)).forEach(thingBuilder::withoutChannel);\n+        }\n+\n+        if (changed) {\n+            updateThing(thingBuilder.build());\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\nindex e4e81f2166..ccd55db530 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n\n@@ -129,11 +129,11 @@ public class SmartHomeDeviceHandler extends BaseThingHandler {\n         if (changed) {\n             updateThing(thingBuilder.build());\n             updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n-            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+            accountHandler.forceDelayedSmartHomeStateUpdate(getId());\n         }\n     }\n \n-    public String findId() {\n+    public String getId() {\n         String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n         if (id == null) {\n             return \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMjMwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445122304", "bodyText": "Is there a reason this was overriden?", "author": "cpmeister", "createdAt": "2020-06-24T19:29:55Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        ThingBuilder thingBuilder = editThing();\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Supplier<HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.get();\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(thingBuilder, channelInfo.channelId, channelInfo.itemType,\n+                            channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.stream().map(id -> new ChannelUID(thing.getUID(), id)).forEach(thingBuilder::withoutChannel);\n+        }\n+\n+        if (changed) {\n+            updateThing(thingBuilder.build());\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE4MzUzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445183534", "bodyText": "Visibility is changed (protected -> public).", "author": "J-N-K", "createdAt": "2020-06-24T21:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMjMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\nindex e4e81f2166..ccd55db530 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n\n@@ -129,11 +129,11 @@ public class SmartHomeDeviceHandler extends BaseThingHandler {\n         if (changed) {\n             updateThing(thingBuilder.build());\n             updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n-            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+            accountHandler.forceDelayedSmartHomeStateUpdate(getId());\n         }\n     }\n \n-    public String findId() {\n+    public String getId() {\n         String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n         if (id == null) {\n             return \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTAwOA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445125008", "bodyText": "So if a single device has null capabilities you have to return an empty collection? I'm not sure this is correct and should instead just continue;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        return Collections.emptySet();\n          \n          \n            \n                                        continue;", "author": "cpmeister", "createdAt": "2020-06-24T19:35:13Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        ThingBuilder thingBuilder = editThing();\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Supplier<HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.get();\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(thingBuilder, channelInfo.channelId, channelInfo.itemType,\n+                            channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.stream().map(id -> new ChannelUID(thing.getUID(), id)).forEach(thingBuilder::withoutChannel);\n+        }\n+\n+        if (changed) {\n+            updateThing(thingBuilder.build());\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(ThingBuilder thingBuilder, String channelId, String itemType,\n+            ChannelTypeUID channelTypeUID) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            if (channelTypeUID.equals(channel.getChannelTypeUID()) && itemType.equals(channel.getAcceptedItemType())) {\n+                // channel exist with the same settings\n+                return false;\n+            }\n+            // channel exist with other settings, remove it first\n+            thingBuilder.withoutChannel(channel.getUID());\n+        }\n+        thingBuilder.withChannel(ChannelBuilder.create(new ChannelUID(thing.getUID(), channelId), itemType)\n+                .withType(channelTypeUID).build());\n+        return true;\n+    }\n+\n+    public void updateChannelStates(List<SmartHomeBaseDevice> allDevices,\n+            Map<String, JsonArray> applianceIdToCapabilityStates) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice!\");\n+            return;\n+        }\n+\n+        boolean stateFound = false;\n+        Map<String, List<JsonObject>> mapInterfaceToStates = new HashMap<>();\n+        SmartHomeDevice firstDevice = null;\n+        for (SmartHomeDevice shd : getSupportedSmartHomeDevices(smartHomeBaseDevice, allDevices)) {\n+            JsonArray states = applianceIdToCapabilityStates.get(shd.applianceId);\n+            String applianceId = shd.applianceId;\n+            if (applianceId == null) {\n+                continue;\n+            }\n+            if (states != null) {\n+                stateFound = true;\n+                if (smartHomeBaseDevice.isGroup()) {\n+                    // for groups, store the last state of all devices\n+                    lastStates.put(applianceId, states);\n+                }\n+            } else {\n+                states = lastStates.get(applianceId);\n+                if (states == null) {\n+                    continue;\n+                }\n+            }\n+            if (firstDevice == null) {\n+                firstDevice = shd;\n+            }\n+            for (JsonElement stateElement : states) {\n+                String stateJson = stateElement.getAsString();\n+                if (stateJson.startsWith(\"{\") && stateJson.endsWith(\"}\")) {\n+                    JsonObject state = gson.fromJson(stateJson, JsonObject.class);\n+                    String interfaceName = state.get(\"namespace\").getAsString();\n+                    mapInterfaceToStates.computeIfAbsent(interfaceName, k -> new ArrayList<>()).add(state);\n+                }\n+            }\n+        }\n+        for (HandlerBase handlerBase : handlers.values()) {\n+            if (handlerBase == null) {\n+                continue;\n+            }\n+            UpdateChannelResult result = new UpdateChannelResult();\n+\n+            for (String interfaceName : handlerBase.getSupportedInterface()) {\n+                List<JsonObject> stateList = mapInterfaceToStates.getOrDefault(interfaceName, Collections.emptyList());\n+                try {\n+                    handlerBase.updateChannels(interfaceName, stateList, result);\n+                } catch (Exception e) {\n+                    // We catch all exceptions, otherwise all other things are not updated!\n+                    logger.debug(\"Updating states failed\", e);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+                }\n+            }\n+\n+            if (result.needSingleUpdate && smartHomeBaseDevice instanceof SmartHomeDevice && accountHandler != null) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeBaseDevice;\n+                accountHandler.forceDelayedSmartHomeStateUpdate(shd.findId());\n+            }\n+        }\n+\n+        if (stateFound) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"State not found\");\n+        }\n+    }\n+\n+    private @Nullable AccountHandler getAccountHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof AccountHandler) {\n+                return (AccountHandler) bridgeHandler;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler == null) {\n+            logger.debug(\"accountHandler is null in {}\", thing.getUID());\n+            return;\n+        }\n+        Connection connection = accountHandler.findConnection();\n+        if (connection == null) {\n+            logger.debug(\"connection is null in {}\", thing.getUID());\n+            return;\n+        }\n+\n+        try {\n+            if (command instanceof RefreshType) {\n+                accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+                return;\n+            }\n+            SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+            if (smartHomeBaseDevice == null) {\n+                logger.debug(\"smarthomeBaseDevice is null in {}\", thing.getUID());\n+                return;\n+            }\n+            Set<SmartHomeDevice> devices = getSupportedSmartHomeDevices(smartHomeBaseDevice,\n+                    accountHandler.getLastKnownSmartHomeDevice());\n+            String channelId = channelUID.getId();\n+\n+            for (String interfaceName : handlers.keySet()) {\n+                HandlerBase handlerBase = handlers.get(interfaceName);\n+                if (handlerBase == null || !handlerBase.hasChannel(channelId)) {\n+                    continue;\n+                }\n+                for (SmartHomeDevice shd : devices) {\n+                    String entityId = shd.entityId;\n+                    if (entityId == null) {\n+                        continue;\n+                    }\n+                    SmartHomeCapability[] capabilities = shd.capabilities;\n+                    if (capabilities == null) {\n+                        logger.debug(\"capabilities is null in {}\", thing.getUID());\n+                        return;\n+                    }\n+                    accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // block updates\n+                    if (handlerBase.handleCommand(connection, shd, entityId, capabilities, channelUID.getId(),\n+                            command)) {\n+                        accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // force update again to restart\n+                        // update timer\n+                        logger.debug(\"Command {} sent to {}\", command, shd.findId());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Handle command failed\", e);\n+        }\n+    }\n+\n+    private static void getCapabilities(Map<String, List<SmartHomeCapability>> result, AccountHandler accountHandler,\n+            SmartHomeBaseDevice device) {\n+        if (device instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) device;\n+            SmartHomeCapability[] capabilities = shd.capabilities;\n+            if (capabilities == null) {\n+                return;\n+            }\n+            for (SmartHomeCapability capability : capabilities) {\n+                String interfaceName = capability.interfaceName;\n+                if (interfaceName != null) {\n+                    result.computeIfAbsent(interfaceName, name -> new ArrayList<>()).add(capability);\n+                }\n+            }\n+        }\n+        if (device instanceof SmartHomeGroup) {\n+            for (SmartHomeDevice shd : getSupportedSmartHomeDevices(device,\n+                    accountHandler.getLastKnownSmartHomeDevice())) {\n+                getCapabilities(result, accountHandler, shd);\n+            }\n+        }\n+    }\n+\n+    public static Set<SmartHomeDevice> getSupportedSmartHomeDevices(@Nullable SmartHomeBaseDevice baseDevice,\n+            List<SmartHomeBaseDevice> allDevices) {\n+        Set<SmartHomeDevice> result = new HashSet<>();\n+        if (baseDevice == null) {\n+            return Collections.emptySet();\n+        }\n+        if (baseDevice instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) baseDevice;\n+            SmartHomeCapability[] capabilities = shd.capabilities;\n+            if (capabilities == null) {\n+                return Collections.emptySet();\n+            }\n+            if (Arrays.stream(capabilities).map(capability -> capability.interfaceName)\n+                    .anyMatch(SUPPORTED_INTERFACES::contains)) {\n+                result.add(shd);\n+            }\n+        } else {\n+            SmartHomeGroup shg = (SmartHomeGroup) baseDevice;\n+            for (SmartHomeBaseDevice device : allDevices) {\n+                if (device instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) device;\n+                    if (shd.tags != null && shd.tags.tagNameToValueSetMap != null\n+                            && shd.tags.tagNameToValueSetMap.groupIdentity != null\n+                            && shg.applianceGroupIdentifier != null && shg.applianceGroupIdentifier.value != null\n+                            && Arrays.asList(shd.tags.tagNameToValueSetMap.groupIdentity)\n+                                    .contains(shg.applianceGroupIdentifier.value)) {\n+                        SmartHomeCapability[] capabilities = shd.capabilities;\n+                        if (capabilities == null) {\n+                            return Collections.emptySet();", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\nindex e4e81f2166..ccd55db530 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n\n@@ -129,11 +129,11 @@ public class SmartHomeDeviceHandler extends BaseThingHandler {\n         if (changed) {\n             updateThing(thingBuilder.build());\n             updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n-            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+            accountHandler.forceDelayedSmartHomeStateUpdate(getId());\n         }\n     }\n \n-    public String findId() {\n+    public String getId() {\n         String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n         if (id == null) {\n             return \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTMzMw==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445125333", "bodyText": "This continue doesn't do anything, it can be removed.", "author": "cpmeister", "createdAt": "2020-06-24T19:35:54Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        ThingBuilder thingBuilder = editThing();\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Supplier<HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.get();\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(thingBuilder, channelInfo.channelId, channelInfo.itemType,\n+                            channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.stream().map(id -> new ChannelUID(thing.getUID(), id)).forEach(thingBuilder::withoutChannel);\n+        }\n+\n+        if (changed) {\n+            updateThing(thingBuilder.build());\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(ThingBuilder thingBuilder, String channelId, String itemType,\n+            ChannelTypeUID channelTypeUID) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            if (channelTypeUID.equals(channel.getChannelTypeUID()) && itemType.equals(channel.getAcceptedItemType())) {\n+                // channel exist with the same settings\n+                return false;\n+            }\n+            // channel exist with other settings, remove it first\n+            thingBuilder.withoutChannel(channel.getUID());\n+        }\n+        thingBuilder.withChannel(ChannelBuilder.create(new ChannelUID(thing.getUID(), channelId), itemType)\n+                .withType(channelTypeUID).build());\n+        return true;\n+    }\n+\n+    public void updateChannelStates(List<SmartHomeBaseDevice> allDevices,\n+            Map<String, JsonArray> applianceIdToCapabilityStates) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice!\");\n+            return;\n+        }\n+\n+        boolean stateFound = false;\n+        Map<String, List<JsonObject>> mapInterfaceToStates = new HashMap<>();\n+        SmartHomeDevice firstDevice = null;\n+        for (SmartHomeDevice shd : getSupportedSmartHomeDevices(smartHomeBaseDevice, allDevices)) {\n+            JsonArray states = applianceIdToCapabilityStates.get(shd.applianceId);\n+            String applianceId = shd.applianceId;\n+            if (applianceId == null) {\n+                continue;\n+            }\n+            if (states != null) {\n+                stateFound = true;\n+                if (smartHomeBaseDevice.isGroup()) {\n+                    // for groups, store the last state of all devices\n+                    lastStates.put(applianceId, states);\n+                }\n+            } else {\n+                states = lastStates.get(applianceId);\n+                if (states == null) {\n+                    continue;\n+                }\n+            }\n+            if (firstDevice == null) {\n+                firstDevice = shd;\n+            }\n+            for (JsonElement stateElement : states) {\n+                String stateJson = stateElement.getAsString();\n+                if (stateJson.startsWith(\"{\") && stateJson.endsWith(\"}\")) {\n+                    JsonObject state = gson.fromJson(stateJson, JsonObject.class);\n+                    String interfaceName = state.get(\"namespace\").getAsString();\n+                    mapInterfaceToStates.computeIfAbsent(interfaceName, k -> new ArrayList<>()).add(state);\n+                }\n+            }\n+        }\n+        for (HandlerBase handlerBase : handlers.values()) {\n+            if (handlerBase == null) {\n+                continue;\n+            }\n+            UpdateChannelResult result = new UpdateChannelResult();\n+\n+            for (String interfaceName : handlerBase.getSupportedInterface()) {\n+                List<JsonObject> stateList = mapInterfaceToStates.getOrDefault(interfaceName, Collections.emptyList());\n+                try {\n+                    handlerBase.updateChannels(interfaceName, stateList, result);\n+                } catch (Exception e) {\n+                    // We catch all exceptions, otherwise all other things are not updated!\n+                    logger.debug(\"Updating states failed\", e);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+                }\n+            }\n+\n+            if (result.needSingleUpdate && smartHomeBaseDevice instanceof SmartHomeDevice && accountHandler != null) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeBaseDevice;\n+                accountHandler.forceDelayedSmartHomeStateUpdate(shd.findId());\n+            }\n+        }\n+\n+        if (stateFound) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"State not found\");\n+        }\n+    }\n+\n+    private @Nullable AccountHandler getAccountHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof AccountHandler) {\n+                return (AccountHandler) bridgeHandler;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler == null) {\n+            logger.debug(\"accountHandler is null in {}\", thing.getUID());\n+            return;\n+        }\n+        Connection connection = accountHandler.findConnection();\n+        if (connection == null) {\n+            logger.debug(\"connection is null in {}\", thing.getUID());\n+            return;\n+        }\n+\n+        try {\n+            if (command instanceof RefreshType) {\n+                accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+                return;\n+            }\n+            SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+            if (smartHomeBaseDevice == null) {\n+                logger.debug(\"smarthomeBaseDevice is null in {}\", thing.getUID());\n+                return;\n+            }\n+            Set<SmartHomeDevice> devices = getSupportedSmartHomeDevices(smartHomeBaseDevice,\n+                    accountHandler.getLastKnownSmartHomeDevice());\n+            String channelId = channelUID.getId();\n+\n+            for (String interfaceName : handlers.keySet()) {\n+                HandlerBase handlerBase = handlers.get(interfaceName);\n+                if (handlerBase == null || !handlerBase.hasChannel(channelId)) {\n+                    continue;\n+                }\n+                for (SmartHomeDevice shd : devices) {\n+                    String entityId = shd.entityId;\n+                    if (entityId == null) {\n+                        continue;\n+                    }\n+                    SmartHomeCapability[] capabilities = shd.capabilities;\n+                    if (capabilities == null) {\n+                        logger.debug(\"capabilities is null in {}\", thing.getUID());\n+                        return;\n+                    }\n+                    accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // block updates\n+                    if (handlerBase.handleCommand(connection, shd, entityId, capabilities, channelUID.getId(),\n+                            command)) {\n+                        accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // force update again to restart\n+                        // update timer\n+                        logger.debug(\"Command {} sent to {}\", command, shd.findId());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Handle command failed\", e);\n+        }\n+    }\n+\n+    private static void getCapabilities(Map<String, List<SmartHomeCapability>> result, AccountHandler accountHandler,\n+            SmartHomeBaseDevice device) {\n+        if (device instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) device;\n+            SmartHomeCapability[] capabilities = shd.capabilities;\n+            if (capabilities == null) {\n+                return;\n+            }\n+            for (SmartHomeCapability capability : capabilities) {\n+                String interfaceName = capability.interfaceName;\n+                if (interfaceName != null) {\n+                    result.computeIfAbsent(interfaceName, name -> new ArrayList<>()).add(capability);\n+                }\n+            }\n+        }\n+        if (device instanceof SmartHomeGroup) {\n+            for (SmartHomeDevice shd : getSupportedSmartHomeDevices(device,\n+                    accountHandler.getLastKnownSmartHomeDevice())) {\n+                getCapabilities(result, accountHandler, shd);\n+            }\n+        }\n+    }\n+\n+    public static Set<SmartHomeDevice> getSupportedSmartHomeDevices(@Nullable SmartHomeBaseDevice baseDevice,\n+            List<SmartHomeBaseDevice> allDevices) {\n+        Set<SmartHomeDevice> result = new HashSet<>();\n+        if (baseDevice == null) {\n+            return Collections.emptySet();\n+        }\n+        if (baseDevice instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) baseDevice;\n+            SmartHomeCapability[] capabilities = shd.capabilities;\n+            if (capabilities == null) {\n+                return Collections.emptySet();\n+            }\n+            if (Arrays.stream(capabilities).map(capability -> capability.interfaceName)\n+                    .anyMatch(SUPPORTED_INTERFACES::contains)) {\n+                result.add(shd);\n+            }\n+        } else {\n+            SmartHomeGroup shg = (SmartHomeGroup) baseDevice;\n+            for (SmartHomeBaseDevice device : allDevices) {\n+                if (device instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) device;\n+                    if (shd.tags != null && shd.tags.tagNameToValueSetMap != null\n+                            && shd.tags.tagNameToValueSetMap.groupIdentity != null\n+                            && shg.applianceGroupIdentifier != null && shg.applianceGroupIdentifier.value != null\n+                            && Arrays.asList(shd.tags.tagNameToValueSetMap.groupIdentity)\n+                                    .contains(shg.applianceGroupIdentifier.value)) {\n+                        SmartHomeCapability[] capabilities = shd.capabilities;\n+                        if (capabilities == null) {\n+                            return Collections.emptySet();\n+                        }\n+                        if (Arrays.stream(capabilities).map(capability -> capability.interfaceName)\n+                                .anyMatch(SUPPORTED_INTERFACES::contains)) {\n+                            result.add(shd);\n+                            continue;", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\nindex e4e81f2166..ccd55db530 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java\n\n@@ -129,11 +129,11 @@ public class SmartHomeDeviceHandler extends BaseThingHandler {\n         if (changed) {\n             updateThing(thingBuilder.build());\n             updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n-            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+            accountHandler.forceDelayedSmartHomeStateUpdate(getId());\n         }\n     }\n \n-    public String findId() {\n+    public String getId() {\n         String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n         if (id == null) {\n             return \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNDQ3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445134478", "bodyText": "You can remove all the synchronization used around this field if you just make it thread-safe to begin with.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Set<SmartHomeDeviceHandler> smartHomeDeviceHandlers = new HashSet<>();\n          \n          \n            \n                private final Set<SmartHomeDeviceHandler> smartHomeDeviceHandlers = new CopyOnWriteArraySet<>();", "author": "cpmeister", "createdAt": "2020-06-24T19:53:29Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -83,24 +91,32 @@\n  */\n @NonNullByDefault\n public class AccountHandler extends BaseBridgeHandler implements IWebSocketCommandHandler, IAmazonThingHandler {\n-\n     private final Logger logger = LoggerFactory.getLogger(AccountHandler.class);\n     private Storage<String> stateStorage;\n     private @Nullable Connection connection;\n     private @Nullable WebSocketConnection webSocketConnection;\n+\n     private final Set<EchoHandler> echoHandlers = new HashSet<>();\n+    private final Set<SmartHomeDeviceHandler> smartHomeDeviceHandlers = new HashSet<>();", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\nindex d33075bd0d..ee9f443306 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n\n@@ -96,13 +96,15 @@ public class AccountHandler extends BaseBridgeHandler implements IWebSocketComma\n     private @Nullable Connection connection;\n     private @Nullable WebSocketConnection webSocketConnection;\n \n-    private final Set<EchoHandler> echoHandlers = new HashSet<>();\n-    private final Set<SmartHomeDeviceHandler> smartHomeDeviceHandlers = new HashSet<>();\n-    private final Set<FlashBriefingProfileHandler> flashBriefingProfileHandlers = new HashSet<>();\n+    private final Set<EchoHandler> echoHandlers = new CopyOnWriteArraySet<>();\n+    private final Set<SmartHomeDeviceHandler> smartHomeDeviceHandlers = new CopyOnWriteArraySet<>();\n+    private final Set<FlashBriefingProfileHandler> flashBriefingProfileHandlers = new CopyOnWriteArraySet<>();\n \n     private final Object synchronizeConnection = new Object();\n     private Map<String, Device> jsonSerialNumberDeviceMapping = new HashMap<>();\n-    private final Map<String, SmartHomeBaseDevice> jsonIdSmartHomeDeviceMapping = new HashMap<>();\n+    private Map<String, SmartHomeBaseDevice> jsonIdSmartHomeDeviceMapping = new HashMap<>();\n+    private Map<String, SmartHomeDevice> jsonSerialNumberSmartHomeDeviceMapping = new HashMap<>();\n+\n     private @Nullable ScheduledFuture<?> checkDataJob;\n     private @Nullable ScheduledFuture<?> checkLoginJob;\n     private @Nullable ScheduledFuture<?> updateSmartHomeStateJob;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNTE2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445135168", "bodyText": "Either change the name of this method or make it return a boolean instead.", "author": "cpmeister", "createdAt": "2020-06-24T19:54:50Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -800,4 +862,187 @@ private void handlePushActivity(@Nullable String payload) {\n     void refreshAfterCommand() {\n         refreshData();\n     }\n+\n+    private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n+        String id = handler.findId();\n+        if (!id.isEmpty()) {\n+            return jsonIdSmartHomeDeviceMapping.get(id);\n+        }\n+        return null;\n+    }\n+\n+    public int shouldDiscoverSmartHomeDevices() {", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\nindex d33075bd0d..ee9f443306 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n\n@@ -864,34 +836,15 @@ public class AccountHandler extends BaseBridgeHandler implements IWebSocketComma\n     }\n \n     private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n-        String id = handler.findId();\n+        String id = handler.getId();\n         if (!id.isEmpty()) {\n             return jsonIdSmartHomeDeviceMapping.get(id);\n         }\n         return null;\n     }\n \n-    public int shouldDiscoverSmartHomeDevices() {\n-        Configuration config = getThing().getConfiguration();\n-        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n-        int discoverSmartHome = 0;\n-        if (discoverSmartHomeConfig instanceof Boolean) {\n-            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n-        }\n-        if (discoverSmartHomeConfig instanceof BigDecimal) {\n-            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n-        }\n-        return discoverSmartHome;\n-    }\n-\n-    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n-        Configuration config = getThing().getConfiguration();\n-        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n-                .get(\"discoverOpenHabSmartHomeDevices\");\n-        if (discoverOpenHabSmartHomeDevices == null) {\n-            return false;\n-        }\n-        return discoverOpenHabSmartHomeDevices;\n+    public int getSmartHomeDevicesDiscoveryMode() {\n+        return handlerConfig.discoverSmartHome;\n     }\n \n     public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNjQxNA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445136414", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(\"updateSmartHomeState fails with unexpected error\", e);\n          \n          \n            \n                        logger.warn(\"updateSmartHomeState fails with unexpected error\", e);", "author": "cpmeister", "createdAt": "2020-06-24T19:57:09Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -800,4 +862,187 @@ private void handlePushActivity(@Nullable String payload) {\n     void refreshAfterCommand() {\n         refreshData();\n     }\n+\n+    private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n+        String id = handler.findId();\n+        if (!id.isEmpty()) {\n+            return jsonIdSmartHomeDeviceMapping.get(id);\n+        }\n+        return null;\n+    }\n+\n+    public int shouldDiscoverSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n+        int discoverSmartHome = 0;\n+        if (discoverSmartHomeConfig instanceof Boolean) {\n+            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n+        }\n+        if (discoverSmartHomeConfig instanceof BigDecimal) {\n+            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n+        }\n+        return discoverSmartHome;\n+    }\n+\n+    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n+                .get(\"discoverOpenHabSmartHomeDevices\");\n+        if (discoverOpenHabSmartHomeDevices == null) {\n+            return false;\n+        }\n+        return discoverOpenHabSmartHomeDevices;\n+    }\n+\n+    public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n+        Connection currentConnection = connection;\n+        if (currentConnection == null) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (!forceUpdate && this.smartHomeDeviceHandlers.isEmpty() && shouldDiscoverSmartHomeDevices() == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<SmartHomeBaseDevice> smartHomeDevices = null;\n+        try {\n+            if (currentConnection.getIsLoggedIn()) {\n+                smartHomeDevices = currentConnection.getSmarthomeDeviceList();\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+        }\n+        if (smartHomeDevices != null) {\n+            // create new id map\n+            Map<String, SmartHomeBaseDevice> newJsonIdSmartHomeDeviceMapping = new HashMap<>();\n+            for (Object smartHomeDevice : smartHomeDevices) {\n+                if (smartHomeDevice instanceof SmartHomeBaseDevice) {\n+                    SmartHomeBaseDevice smartHomeBaseDevice = (SmartHomeBaseDevice) smartHomeDevice;\n+                    String id = smartHomeBaseDevice.findId();\n+                    if (id != null) {\n+                        newJsonIdSmartHomeDeviceMapping.put(id, smartHomeBaseDevice);\n+                    }\n+                }\n+            }\n+            jsonIdSmartHomeDeviceMapping.clear();\n+            jsonIdSmartHomeDeviceMapping.putAll(newJsonIdSmartHomeDeviceMapping);\n+        }\n+        // update handlers\n+        synchronized (smartHomeDeviceHandlers) {\n+            smartHomeDeviceHandlers\n+                    .forEach(child -> child.setDeviceAndUpdateThingState(this, findSmartDeviceHomeJson(child)));\n+        }\n+\n+        if (smartHomeDevices != null) {\n+            Map<String, SmartHomeDevice> newJsonSerialDeviceMapping = new HashMap<>();\n+            for (Object smartDevice : smartHomeDevices) {\n+                if (smartDevice instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) smartDevice;\n+                    String entityId = shd.entityId;\n+                    if (entityId != null) {\n+                        newJsonSerialDeviceMapping.put(entityId, shd);\n+                    }\n+                }\n+            }\n+        }\n+        if (smartHomeDevices != null) {\n+            return smartHomeDevices;\n+        }\n+\n+        return Collections.emptyList();\n+    }\n+\n+    public void forceDelayedSmartHomeStateUpdate(@Nullable String deviceId) {\n+        if (deviceId == null) {\n+            return;\n+        }\n+        synchronized (synchronizeSmartHomeJobScheduler) {\n+            requestedDeviceUpdates.add(deviceId);\n+            ScheduledFuture<?> refreshSmartHomeAfterCommandJob = this.refreshSmartHomeAfterCommandJob;\n+            if (refreshSmartHomeAfterCommandJob != null) {\n+                refreshSmartHomeAfterCommandJob.cancel(false);\n+            }\n+            this.refreshSmartHomeAfterCommandJob = scheduler.schedule(this::updateSmartHomeStateJob, 500,\n+                    TimeUnit.MILLISECONDS);\n+        }\n+    }\n+\n+    private void updateSmartHomeStateJob() {\n+        Set<String> deviceUpdates = new HashSet<>();\n+\n+        synchronized (synchronizeSmartHomeJobScheduler) {\n+            Connection connection = this.connection;\n+            if (connection == null || !connection.getIsLoggedIn()) {\n+                this.refreshSmartHomeAfterCommandJob = scheduler.schedule(this::updateSmartHomeStateJob, 1000,\n+                        TimeUnit.MILLISECONDS);\n+                return;\n+            }\n+            requestedDeviceUpdates.drainTo(deviceUpdates);\n+            this.refreshSmartHomeAfterCommandJob = null;\n+        }\n+\n+        deviceUpdates.forEach(this::updateSmartHomeState);\n+    }\n+\n+    private synchronized void updateSmartHomeState(@Nullable String deviceFilterId) {\n+        try {\n+            logger.debug(\"updateSmartHomeState started\");\n+            Connection connection = this.connection;\n+            if (connection == null || !connection.getIsLoggedIn()) {\n+                return;\n+            }\n+            List<SmartHomeBaseDevice> allDevices = this.getLastKnownSmartHomeDevice();\n+            Set<String> applianceIds = new HashSet<>();\n+            if (deviceFilterId != null) {\n+                applianceIds.add(deviceFilterId);\n+            } else {\n+                SmartHomeDeviceStateGroupUpdateCalculator smartHomeDeviceStateGroupUpdateCalculator = this.smartHomeDeviceStateGroupUpdateCalculator;\n+                if (smartHomeDeviceStateGroupUpdateCalculator == null) {\n+                    return;\n+                }\n+                synchronized (this.smartHomeDeviceHandlers) {\n+                    if (this.smartHomeDeviceHandlers.size() == 0) {\n+                        return;\n+                    }\n+                    List<SmartHomeDevice> devicesToUpdate = new ArrayList<>();\n+                    for (SmartHomeDeviceHandler device : smartHomeDeviceHandlers) {\n+                        String id = device.findId();\n+                        SmartHomeBaseDevice baseDevice = jsonIdSmartHomeDeviceMapping.get(id);\n+                        SmartHomeDeviceHandler.getSupportedSmartHomeDevices(baseDevice, allDevices)\n+                                .forEach(devicesToUpdate::add);\n+                    }\n+                    smartHomeDeviceStateGroupUpdateCalculator.removeDevicesWithNoUpdate(devicesToUpdate);\n+                    for (SmartHomeDevice shd : devicesToUpdate) {\n+                        String applianceId = shd.applianceId;\n+                        if (applianceId != null) {\n+                            applianceIds.add(applianceId);\n+                        }\n+                    }\n+                    if (applianceIds.size() == 0) {\n+                        return;\n+                    }\n+                }\n+            }\n+            Map<String, JsonArray> applianceIdToCapabilityStates = connection\n+                    .getSmartHomeDeviceStatesJson(applianceIds);\n+\n+            synchronized (this.smartHomeDeviceHandlers) {\n+                for (SmartHomeDeviceHandler smartHomeDeviceHandler : smartHomeDeviceHandlers) {\n+                    String id = smartHomeDeviceHandler.findId();\n+                    if (requestedDeviceUpdates.contains(id)) {\n+                        logger.debug(\"Device update {} suspended\", id);\n+                        continue;\n+                    }\n+                    if (deviceFilterId == null || deviceFilterId.equals(id)) {\n+                        smartHomeDeviceHandler.updateChannelStates(allDevices, applianceIdToCapabilityStates);\n+                    }\n+                }\n+            }\n+            logger.debug(\"updateSmartHomeState finished\");\n+        } catch (HttpException | JsonSyntaxException | ConnectionException e) {\n+            logger.debug(\"updateSmartHomeState fails\", e);\n+        } catch (Exception e) { // this handler can be removed later, if we know that nothing else can fail.\n+            logger.error(\"updateSmartHomeState fails with unexpected error\", e);", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\nindex d33075bd0d..ee9f443306 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n\n@@ -864,34 +836,15 @@ public class AccountHandler extends BaseBridgeHandler implements IWebSocketComma\n     }\n \n     private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n-        String id = handler.findId();\n+        String id = handler.getId();\n         if (!id.isEmpty()) {\n             return jsonIdSmartHomeDeviceMapping.get(id);\n         }\n         return null;\n     }\n \n-    public int shouldDiscoverSmartHomeDevices() {\n-        Configuration config = getThing().getConfiguration();\n-        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n-        int discoverSmartHome = 0;\n-        if (discoverSmartHomeConfig instanceof Boolean) {\n-            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n-        }\n-        if (discoverSmartHomeConfig instanceof BigDecimal) {\n-            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n-        }\n-        return discoverSmartHome;\n-    }\n-\n-    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n-        Configuration config = getThing().getConfiguration();\n-        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n-                .get(\"discoverOpenHabSmartHomeDevices\");\n-        if (discoverOpenHabSmartHomeDevices == null) {\n-            return false;\n-        }\n-        return discoverOpenHabSmartHomeDevices;\n+    public int getSmartHomeDevicesDiscoveryMode() {\n+        return handlerConfig.discoverSmartHome;\n     }\n \n     public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0MTc2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445141766", "bodyText": "Since this class isn't an osgi service I don't know if adding @Activate serves any purpose here.", "author": "cpmeister", "createdAt": "2020-06-24T20:07:20Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.discovery;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.SUPPORTED_SMART_HOME_THING_TYPES_UIDS;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_SMART_HOME_DEVICE;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_SMART_HOME_DEVICE_GROUP;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryServiceCallback;\n+import org.eclipse.smarthome.config.discovery.ExtendedDiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.handler.AccountHandler;\n+import org.openhab.binding.amazonechocontrol.internal.handler.SmartHomeDeviceHandler;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.DriverIdentity;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDevicesDiscovery extends AbstractDiscoveryService implements ExtendedDiscoveryService {\n+\n+    private AccountHandler accountHandler;\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDevicesDiscovery.class);\n+\n+    private @Nullable ScheduledFuture<?> startScanStateJob;\n+    private @Nullable Long activateTimeStamp;\n+\n+    private @Nullable DiscoveryServiceCallback discoveryServiceCallback;\n+\n+    @Override\n+    public void setDiscoveryServiceCallback(DiscoveryServiceCallback discoveryServiceCallback) {\n+        this.discoveryServiceCallback = discoveryServiceCallback;\n+    }\n+\n+    public SmartHomeDevicesDiscovery(AccountHandler accountHandler) {\n+        super(SUPPORTED_SMART_HOME_THING_TYPES_UIDS, 10);\n+        this.accountHandler = accountHandler;\n+    }\n+\n+    public void activate() {\n+        activate(new Hashtable<String, @Nullable Object>());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        stopScanJob();\n+        Long activateTimeStamp = this.activateTimeStamp;\n+        if (activateTimeStamp != null) {\n+            removeOlderResults(activateTimeStamp);\n+        }\n+        setSmartHomeDevices(accountHandler.updateSmartHomeDeviceList(false));\n+    }\n+\n+    protected void startAutomaticScan() {\n+        if (!this.accountHandler.getThing().getThings().isEmpty()) {\n+            stopScanJob();\n+            return;\n+        }\n+        Connection connection = this.accountHandler.findConnection();\n+        if (connection == null) {\n+            return;\n+        }\n+        Date verifyTime = connection.tryGetVerifyTime();\n+        if (verifyTime == null) {\n+            return;\n+        }\n+        if (new Date().getTime() - verifyTime.getTime() < 10000) {\n+            return;\n+        }\n+        startScan();\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        stopScanJob();\n+        startScanStateJob = scheduler.scheduleWithFixedDelay(this::startAutomaticScan, 3000, 1000,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        stopScanJob();\n+    }\n+\n+    void stopScanJob() {\n+        ScheduledFuture<?> currentStartScanStateJob = startScanStateJob;\n+        if (currentStartScanStateJob != null) {\n+            currentStartScanStateJob.cancel(false);\n+            startScanStateJob = null;\n+        }\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    @Activate", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMDk2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445200962", "bodyText": "Not sure either. It's the same in the \"old\" AmazonEchoDiscovery. Since it does no harm, I would suggest to leave  it here (since the discovery needs to be rewritten anyway).", "author": "J-N-K", "createdAt": "2020-06-24T22:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0MTc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java\nindex b4757c1340..ba48397429 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java\n\n@@ -25,6 +25,7 @@ import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.stream.Stream;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0MzUyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445143524", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean supportedDevice = false;\n          \n          \n            \n                            for (SmartHomeCapability capability : shd.capabilities) {\n          \n          \n            \n                                if (capability != null && Constants.SUPPORTED_INTERFACES.contains(capability.interfaceName)) {\n          \n          \n            \n                                    supportedDevice = true;\n          \n          \n            \n                                    break;\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            if (!supportedDevice) {\n          \n          \n            \n                            if (Stream.of(shd.capabilities).noneMatch(capability -> capability != null && Constants.SUPPORTED_INTERFACES.contains(capability.interfaceName))) {", "author": "cpmeister", "createdAt": "2020-06-24T20:10:55Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.discovery;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.SUPPORTED_SMART_HOME_THING_TYPES_UIDS;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_SMART_HOME_DEVICE;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_SMART_HOME_DEVICE_GROUP;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryServiceCallback;\n+import org.eclipse.smarthome.config.discovery.ExtendedDiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.handler.AccountHandler;\n+import org.openhab.binding.amazonechocontrol.internal.handler.SmartHomeDeviceHandler;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.DriverIdentity;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDevicesDiscovery extends AbstractDiscoveryService implements ExtendedDiscoveryService {\n+\n+    private AccountHandler accountHandler;\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDevicesDiscovery.class);\n+\n+    private @Nullable ScheduledFuture<?> startScanStateJob;\n+    private @Nullable Long activateTimeStamp;\n+\n+    private @Nullable DiscoveryServiceCallback discoveryServiceCallback;\n+\n+    @Override\n+    public void setDiscoveryServiceCallback(DiscoveryServiceCallback discoveryServiceCallback) {\n+        this.discoveryServiceCallback = discoveryServiceCallback;\n+    }\n+\n+    public SmartHomeDevicesDiscovery(AccountHandler accountHandler) {\n+        super(SUPPORTED_SMART_HOME_THING_TYPES_UIDS, 10);\n+        this.accountHandler = accountHandler;\n+    }\n+\n+    public void activate() {\n+        activate(new Hashtable<String, @Nullable Object>());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        stopScanJob();\n+        Long activateTimeStamp = this.activateTimeStamp;\n+        if (activateTimeStamp != null) {\n+            removeOlderResults(activateTimeStamp);\n+        }\n+        setSmartHomeDevices(accountHandler.updateSmartHomeDeviceList(false));\n+    }\n+\n+    protected void startAutomaticScan() {\n+        if (!this.accountHandler.getThing().getThings().isEmpty()) {\n+            stopScanJob();\n+            return;\n+        }\n+        Connection connection = this.accountHandler.findConnection();\n+        if (connection == null) {\n+            return;\n+        }\n+        Date verifyTime = connection.tryGetVerifyTime();\n+        if (verifyTime == null) {\n+            return;\n+        }\n+        if (new Date().getTime() - verifyTime.getTime() < 10000) {\n+            return;\n+        }\n+        startScan();\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        stopScanJob();\n+        startScanStateJob = scheduler.scheduleWithFixedDelay(this::startAutomaticScan, 3000, 1000,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        stopScanJob();\n+    }\n+\n+    void stopScanJob() {\n+        ScheduledFuture<?> currentStartScanStateJob = startScanStateJob;\n+        if (currentStartScanStateJob != null) {\n+            currentStartScanStateJob.cancel(false);\n+            startScanStateJob = null;\n+        }\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+        if (config != null) {\n+            modified(config);\n+        }\n+        Long activateTimeStamp = this.activateTimeStamp;\n+        if (activateTimeStamp == null) {\n+            this.activateTimeStamp = new Date().getTime();\n+        }\n+    };\n+\n+    synchronized void setSmartHomeDevices(List<SmartHomeBaseDevice> deviceList) {\n+        DiscoveryServiceCallback discoveryServiceCallback = this.discoveryServiceCallback;\n+\n+        if (discoveryServiceCallback == null) {\n+            return;\n+        }\n+        int shouldDiscoverSmartHomeDevice = accountHandler.shouldDiscoverSmartHomeDevices();\n+        if (shouldDiscoverSmartHomeDevice == 0) {\n+            return;\n+        }\n+        boolean shouldDiscoverOpenHabDevices = accountHandler.shouldDiscoverOpenHABSmartHomeDevices();\n+\n+        for (Object smartHomeDevice : deviceList) {\n+            ThingUID bridgeThingUID = this.accountHandler.getThing().getUID();\n+            ThingUID thingUID = null;\n+            String deviceName = null;\n+            Map<String, Object> props = new HashMap<>();\n+\n+            if (smartHomeDevice instanceof SmartHomeDevice) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeDevice;\n+\n+                String entityId = shd.entityId;\n+                if (entityId == null) {\n+                    // No entity id\n+                    continue;\n+                }\n+                String id = shd.findId();\n+                if (id == null) {\n+                    // No id\n+                    continue;\n+                }\n+                boolean isSkillDevice = false;\n+                DriverIdentity driverIdentity = shd.driverIdentity;\n+                isSkillDevice = driverIdentity != null && \"SKILL\".equals(driverIdentity.namespace);\n+\n+                if (shouldDiscoverSmartHomeDevice == 1 && isSkillDevice) {\n+                    // Connected through skill\n+                    continue;\n+                }\n+                if (!shouldDiscoverOpenHabDevices && \"openHAB\".equalsIgnoreCase(shd.manufacturerName)) {\n+                    // OpenHAB device\n+                    continue;\n+                }\n+\n+                boolean supportedDevice = false;\n+                for (SmartHomeCapability capability : shd.capabilities) {\n+                    if (capability != null && Constants.SUPPORTED_INTERFACES.contains(capability.interfaceName)) {\n+                        supportedDevice = true;\n+                        break;\n+                    }\n+                }\n+                if (!supportedDevice) {", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java\nindex b4757c1340..ba48397429 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java\n\n@@ -25,6 +25,7 @@ import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.stream.Stream;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0NTY4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445145682", "bodyText": "Why replace the contents when you can just replace the instance?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        jsonIdSmartHomeDeviceMapping.clear();\n          \n          \n            \n                        jsonIdSmartHomeDeviceMapping.putAll(newJsonIdSmartHomeDeviceMapping);\n          \n          \n            \n                        jsonIdSmartHomeDeviceMapping = newJsonIdSmartHomeDeviceMapping;", "author": "cpmeister", "createdAt": "2020-06-24T20:15:17Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -800,4 +862,187 @@ private void handlePushActivity(@Nullable String payload) {\n     void refreshAfterCommand() {\n         refreshData();\n     }\n+\n+    private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n+        String id = handler.findId();\n+        if (!id.isEmpty()) {\n+            return jsonIdSmartHomeDeviceMapping.get(id);\n+        }\n+        return null;\n+    }\n+\n+    public int shouldDiscoverSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n+        int discoverSmartHome = 0;\n+        if (discoverSmartHomeConfig instanceof Boolean) {\n+            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n+        }\n+        if (discoverSmartHomeConfig instanceof BigDecimal) {\n+            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n+        }\n+        return discoverSmartHome;\n+    }\n+\n+    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n+                .get(\"discoverOpenHabSmartHomeDevices\");\n+        if (discoverOpenHabSmartHomeDevices == null) {\n+            return false;\n+        }\n+        return discoverOpenHabSmartHomeDevices;\n+    }\n+\n+    public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n+        Connection currentConnection = connection;\n+        if (currentConnection == null) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (!forceUpdate && this.smartHomeDeviceHandlers.isEmpty() && shouldDiscoverSmartHomeDevices() == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<SmartHomeBaseDevice> smartHomeDevices = null;\n+        try {\n+            if (currentConnection.getIsLoggedIn()) {\n+                smartHomeDevices = currentConnection.getSmarthomeDeviceList();\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+        }\n+        if (smartHomeDevices != null) {\n+            // create new id map\n+            Map<String, SmartHomeBaseDevice> newJsonIdSmartHomeDeviceMapping = new HashMap<>();\n+            for (Object smartHomeDevice : smartHomeDevices) {\n+                if (smartHomeDevice instanceof SmartHomeBaseDevice) {\n+                    SmartHomeBaseDevice smartHomeBaseDevice = (SmartHomeBaseDevice) smartHomeDevice;\n+                    String id = smartHomeBaseDevice.findId();\n+                    if (id != null) {\n+                        newJsonIdSmartHomeDeviceMapping.put(id, smartHomeBaseDevice);\n+                    }\n+                }\n+            }\n+            jsonIdSmartHomeDeviceMapping.clear();\n+            jsonIdSmartHomeDeviceMapping.putAll(newJsonIdSmartHomeDeviceMapping);", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\nindex d33075bd0d..ee9f443306 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n\n@@ -864,34 +836,15 @@ public class AccountHandler extends BaseBridgeHandler implements IWebSocketComma\n     }\n \n     private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n-        String id = handler.findId();\n+        String id = handler.getId();\n         if (!id.isEmpty()) {\n             return jsonIdSmartHomeDeviceMapping.get(id);\n         }\n         return null;\n     }\n \n-    public int shouldDiscoverSmartHomeDevices() {\n-        Configuration config = getThing().getConfiguration();\n-        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n-        int discoverSmartHome = 0;\n-        if (discoverSmartHomeConfig instanceof Boolean) {\n-            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n-        }\n-        if (discoverSmartHomeConfig instanceof BigDecimal) {\n-            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n-        }\n-        return discoverSmartHome;\n-    }\n-\n-    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n-        Configuration config = getThing().getConfiguration();\n-        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n-                .get(\"discoverOpenHabSmartHomeDevices\");\n-        if (discoverOpenHabSmartHomeDevices == null) {\n-            return false;\n-        }\n-        return discoverOpenHabSmartHomeDevices;\n+    public int getSmartHomeDevicesDiscoveryMode() {\n+        return handlerConfig.discoverSmartHome;\n     }\n \n     public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0NjAzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445146035", "bodyText": "Is this code incomplete? It doesn't look like it does anything.", "author": "cpmeister", "createdAt": "2020-06-24T20:16:00Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -800,4 +862,187 @@ private void handlePushActivity(@Nullable String payload) {\n     void refreshAfterCommand() {\n         refreshData();\n     }\n+\n+    private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n+        String id = handler.findId();\n+        if (!id.isEmpty()) {\n+            return jsonIdSmartHomeDeviceMapping.get(id);\n+        }\n+        return null;\n+    }\n+\n+    public int shouldDiscoverSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n+        int discoverSmartHome = 0;\n+        if (discoverSmartHomeConfig instanceof Boolean) {\n+            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n+        }\n+        if (discoverSmartHomeConfig instanceof BigDecimal) {\n+            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n+        }\n+        return discoverSmartHome;\n+    }\n+\n+    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n+                .get(\"discoverOpenHabSmartHomeDevices\");\n+        if (discoverOpenHabSmartHomeDevices == null) {\n+            return false;\n+        }\n+        return discoverOpenHabSmartHomeDevices;\n+    }\n+\n+    public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n+        Connection currentConnection = connection;\n+        if (currentConnection == null) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (!forceUpdate && this.smartHomeDeviceHandlers.isEmpty() && shouldDiscoverSmartHomeDevices() == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<SmartHomeBaseDevice> smartHomeDevices = null;\n+        try {\n+            if (currentConnection.getIsLoggedIn()) {\n+                smartHomeDevices = currentConnection.getSmarthomeDeviceList();\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+        }\n+        if (smartHomeDevices != null) {\n+            // create new id map\n+            Map<String, SmartHomeBaseDevice> newJsonIdSmartHomeDeviceMapping = new HashMap<>();\n+            for (Object smartHomeDevice : smartHomeDevices) {\n+                if (smartHomeDevice instanceof SmartHomeBaseDevice) {\n+                    SmartHomeBaseDevice smartHomeBaseDevice = (SmartHomeBaseDevice) smartHomeDevice;\n+                    String id = smartHomeBaseDevice.findId();\n+                    if (id != null) {\n+                        newJsonIdSmartHomeDeviceMapping.put(id, smartHomeBaseDevice);\n+                    }\n+                }\n+            }\n+            jsonIdSmartHomeDeviceMapping.clear();\n+            jsonIdSmartHomeDeviceMapping.putAll(newJsonIdSmartHomeDeviceMapping);\n+        }\n+        // update handlers\n+        synchronized (smartHomeDeviceHandlers) {\n+            smartHomeDeviceHandlers\n+                    .forEach(child -> child.setDeviceAndUpdateThingState(this, findSmartDeviceHomeJson(child)));\n+        }\n+\n+        if (smartHomeDevices != null) {\n+            Map<String, SmartHomeDevice> newJsonSerialDeviceMapping = new HashMap<>();\n+            for (Object smartDevice : smartHomeDevices) {\n+                if (smartDevice instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) smartDevice;\n+                    String entityId = shd.entityId;\n+                    if (entityId != null) {\n+                        newJsonSerialDeviceMapping.put(entityId, shd);\n+                    }\n+                }\n+            }\n+        }", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxMzAwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445213005", "bodyText": "Agreed. I'm not sure if this was intended to enable the AccountServlet to provide more information (like it already does for the echo devices). I have added a field, so the mapping is kept and this can be extended later", "author": "J-N-K", "createdAt": "2020-06-24T22:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0NjAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\nindex d33075bd0d..ee9f443306 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java\n\n@@ -864,34 +836,15 @@ public class AccountHandler extends BaseBridgeHandler implements IWebSocketComma\n     }\n \n     private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n-        String id = handler.findId();\n+        String id = handler.getId();\n         if (!id.isEmpty()) {\n             return jsonIdSmartHomeDeviceMapping.get(id);\n         }\n         return null;\n     }\n \n-    public int shouldDiscoverSmartHomeDevices() {\n-        Configuration config = getThing().getConfiguration();\n-        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n-        int discoverSmartHome = 0;\n-        if (discoverSmartHomeConfig instanceof Boolean) {\n-            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n-        }\n-        if (discoverSmartHomeConfig instanceof BigDecimal) {\n-            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n-        }\n-        return discoverSmartHome;\n-    }\n-\n-    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n-        Configuration config = getThing().getConfiguration();\n-        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n-                .get(\"discoverOpenHabSmartHomeDevices\");\n-        if (discoverOpenHabSmartHomeDevices == null) {\n-            return false;\n-        }\n-        return discoverOpenHabSmartHomeDevices;\n+    public int getSmartHomeDevicesDiscoveryMode() {\n+        return handlerConfig.discoverSmartHome;\n     }\n \n     public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0ODA5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445148095", "bodyText": "Perhaps you should increase/decrease by more than just a single percent. A change of a single percent is probably unnoticeable to the user so I think 10% is probably a better value.", "author": "cpmeister", "createdAt": "2020-06-24T20:20:03Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.smarthome;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.ITEM_TYPE_DIMMER;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * The {@link HandlerPercentageController} is responsible for the Alexa.PowerControllerInterface\n+ *\n+ * @author Lukas Knoeller - Initial contribution\n+ * @author Michael Geramb - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HandlerPercentageController extends HandlerBase {\n+    // Interface\n+    public static final String INTERFACE = \"Alexa.PercentageController\";\n+\n+    // Channel types\n+    private static final ChannelTypeUID CHANNEL_TYPE_PERCENTAGE = new ChannelTypeUID(\n+            AmazonEchoControlBindingConstants.BINDING_ID, \"percentage\");\n+\n+    // Channel definitions\n+    private static final ChannelInfo PERCENTAGE = new ChannelInfo(\"percentage\" /* propertyName */ ,\n+            \"percentage\" /* ChannelId */, CHANNEL_TYPE_PERCENTAGE /* Channel Type */ ,\n+            ITEM_TYPE_DIMMER /* Item Type */);\n+\n+    private @Nullable Integer lastPercentage;\n+\n+    @Override\n+    public String[] getSupportedInterface() {\n+        return new String[] { INTERFACE };\n+    }\n+\n+    @Override\n+    protected ChannelInfo @Nullable [] findChannelInfos(SmartHomeCapability capability, String property) {\n+        if (PERCENTAGE.propertyName.equals(property)) {\n+            return new ChannelInfo[] { PERCENTAGE };\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void updateChannels(String interfaceName, List<JsonObject> stateList, UpdateChannelResult result) {\n+        Integer percentageValue = null;\n+        for (JsonObject state : stateList) {\n+            if (PERCENTAGE.propertyName.equals(state.get(\"name\").getAsString())) {\n+                int value = state.get(\"value\").getAsInt();\n+                // For groups take the maximum\n+                if (percentageValue == null) {\n+                    percentageValue = value;\n+                } else if (value > percentageValue) {\n+                    percentageValue = value;\n+                }\n+            }\n+        }\n+        if (percentageValue != null) {\n+            lastPercentage = percentageValue;\n+        }\n+        updateState(PERCENTAGE.channelId, percentageValue == null ? UnDefType.UNDEF : new PercentType(percentageValue));\n+    }\n+\n+    @Override\n+    public boolean handleCommand(Connection connection, SmartHomeDevice shd, String entityId,\n+            SmartHomeCapability[] capabilties, String channelId, Command command) throws IOException {\n+        if (channelId.equals(PERCENTAGE.channelId)) {\n+            if (containsCapabilityProperty(capabilties, PERCENTAGE.propertyName)) {\n+                if (command.equals(IncreaseDecreaseType.INCREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage++;\n+                        if (newValue > 100) {\n+                            newValue = 100;\n+                        }\n+                        this.lastPercentage = newValue;\n+                        connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, newValue);\n+                        return true;\n+                    }\n+                } else if (command.equals(IncreaseDecreaseType.DECREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage--;\n+                        if (newValue < 0) {\n+                            newValue = 0;\n+                        }", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxNDIzMA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445214230", "bodyText": "Since according to the forum thread quite a bunch of users already use this enhancements (since month), I wouldprefer to keep it like this.", "author": "J-N-K", "createdAt": "2020-06-24T22:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0ODA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java\nindex d2478eb7f7..11037a893a 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java\n\n@@ -126,8 +126,7 @@ public class HandlerPercentageController extends HandlerBase {\n                     return true;\n                 } else if (command instanceof PercentType) {\n                     lastPercentage = ((PercentType) command).intValue();\n-                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName,\n-                            ((PercentType) command).floatValue() / 100);\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, lastPercentage);\n                     return true;\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0OTQyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445149425", "bodyText": "All of other methods suggest that setPercentage is supposed to range from 0-100, not 0-1. Is it supposed to be this instead?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName,\n          \n          \n            \n                                        ((PercentType) command).floatValue() / 100);\n          \n          \n            \n                                connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName,\n          \n          \n            \n                                        lastPercentage);", "author": "cpmeister", "createdAt": "2020-06-24T20:22:34Z", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.smarthome;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.ITEM_TYPE_DIMMER;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * The {@link HandlerPercentageController} is responsible for the Alexa.PowerControllerInterface\n+ *\n+ * @author Lukas Knoeller - Initial contribution\n+ * @author Michael Geramb - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HandlerPercentageController extends HandlerBase {\n+    // Interface\n+    public static final String INTERFACE = \"Alexa.PercentageController\";\n+\n+    // Channel types\n+    private static final ChannelTypeUID CHANNEL_TYPE_PERCENTAGE = new ChannelTypeUID(\n+            AmazonEchoControlBindingConstants.BINDING_ID, \"percentage\");\n+\n+    // Channel definitions\n+    private static final ChannelInfo PERCENTAGE = new ChannelInfo(\"percentage\" /* propertyName */ ,\n+            \"percentage\" /* ChannelId */, CHANNEL_TYPE_PERCENTAGE /* Channel Type */ ,\n+            ITEM_TYPE_DIMMER /* Item Type */);\n+\n+    private @Nullable Integer lastPercentage;\n+\n+    @Override\n+    public String[] getSupportedInterface() {\n+        return new String[] { INTERFACE };\n+    }\n+\n+    @Override\n+    protected ChannelInfo @Nullable [] findChannelInfos(SmartHomeCapability capability, String property) {\n+        if (PERCENTAGE.propertyName.equals(property)) {\n+            return new ChannelInfo[] { PERCENTAGE };\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void updateChannels(String interfaceName, List<JsonObject> stateList, UpdateChannelResult result) {\n+        Integer percentageValue = null;\n+        for (JsonObject state : stateList) {\n+            if (PERCENTAGE.propertyName.equals(state.get(\"name\").getAsString())) {\n+                int value = state.get(\"value\").getAsInt();\n+                // For groups take the maximum\n+                if (percentageValue == null) {\n+                    percentageValue = value;\n+                } else if (value > percentageValue) {\n+                    percentageValue = value;\n+                }\n+            }\n+        }\n+        if (percentageValue != null) {\n+            lastPercentage = percentageValue;\n+        }\n+        updateState(PERCENTAGE.channelId, percentageValue == null ? UnDefType.UNDEF : new PercentType(percentageValue));\n+    }\n+\n+    @Override\n+    public boolean handleCommand(Connection connection, SmartHomeDevice shd, String entityId,\n+            SmartHomeCapability[] capabilties, String channelId, Command command) throws IOException {\n+        if (channelId.equals(PERCENTAGE.channelId)) {\n+            if (containsCapabilityProperty(capabilties, PERCENTAGE.propertyName)) {\n+                if (command.equals(IncreaseDecreaseType.INCREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage++;\n+                        if (newValue > 100) {\n+                            newValue = 100;\n+                        }\n+                        this.lastPercentage = newValue;\n+                        connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, newValue);\n+                        return true;\n+                    }\n+                } else if (command.equals(IncreaseDecreaseType.DECREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage--;\n+                        if (newValue < 0) {\n+                            newValue = 0;\n+                        }\n+                        this.lastPercentage = newValue;\n+                        connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, newValue);\n+                        return true;\n+                    }\n+                } else if (command.equals(OnOffType.OFF)) {\n+                    lastPercentage = 0;\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, 0);\n+                    return true;\n+                } else if (command.equals(OnOffType.ON)) {\n+                    lastPercentage = 100;\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, 100);\n+                    return true;\n+                } else if (command instanceof PercentType) {\n+                    lastPercentage = ((PercentType) command).intValue();\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName,\n+                            ((PercentType) command).floatValue() / 100);", "originalCommit": "9596b49de93355da60e75d6284c239b5192e958f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxMzgzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445213834", "bodyText": "Also changed to int, as states are stored with int.", "author": "J-N-K", "createdAt": "2020-06-24T22:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0OTQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fea431286f0ab2d1801526d861d518296e10121", "chunk": "diff --git a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java\nindex d2478eb7f7..11037a893a 100644\n--- a/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java\n+++ b/bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java\n\n@@ -126,8 +126,7 @@ public class HandlerPercentageController extends HandlerBase {\n                     return true;\n                 } else if (command instanceof PercentType) {\n                     lastPercentage = ((PercentType) command).intValue();\n-                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName,\n-                            ((PercentType) command).floatValue() / 100);\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, lastPercentage);\n                     return true;\n                 }\n             }\n"}}, {"oid": "0fea431286f0ab2d1801526d861d518296e10121", "url": "https://github.com/openhab/openhab-addons/commit/0fea431286f0ab2d1801526d861d518296e10121", "message": "Fix issues, codestyle and refactoring\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-06-26T14:53:50Z", "type": "commit"}, {"oid": "0fea431286f0ab2d1801526d861d518296e10121", "url": "https://github.com/openhab/openhab-addons/commit/0fea431286f0ab2d1801526d861d518296e10121", "message": "Fix issues, codestyle and refactoring\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-06-26T14:53:50Z", "type": "forcePushed"}, {"oid": "c84020e109229e2822aced482ed9b3546454bf41", "url": "https://github.com/openhab/openhab-addons/commit/c84020e109229e2822aced482ed9b3546454bf41", "message": "address review comment\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>", "committedDate": "2020-07-05T11:01:59Z", "type": "commit"}, {"oid": "7c839a7c1a25e13fbe5ae926861eb9360e8c8052", "url": "https://github.com/openhab/openhab-addons/commit/7c839a7c1a25e13fbe5ae926861eb9360e8c8052", "message": "[amazonechocontrol]\nFix json parsing\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-05-11T11:12:52Z", "type": "commit"}, {"oid": "35154c11a43fd0d49630d86f34bc36e1442b2559", "url": "https://github.com/openhab/openhab-addons/commit/35154c11a43fd0d49630d86f34bc36e1442b2559", "message": "[amazonechocontrol]\nImprove error handling\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-05-12T06:19:52Z", "type": "commit"}, {"oid": "94494da65440dbe8ee1a48e3edfca2af736f63de", "url": "https://github.com/openhab/openhab-addons/commit/94494da65440dbe8ee1a48e3edfca2af736f63de", "message": "[amazonechocontrol]\nRemove unused Exception\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)\n\nSigned-off-by: Michael Geramb <mail@michael-geramb.at>", "committedDate": "2019-05-12T08:27:17Z", "type": "commit"}, {"oid": "d75261f09cddae509cdcebccd631217f563e3fcd", "url": "https://github.com/openhab/openhab-addons/commit/d75261f09cddae509cdcebccd631217f563e3fcd", "message": "Merge branch 'master' of https://github.com/openhab/openhab2-addons", "committedDate": "2019-05-15T16:07:13Z", "type": "commit"}, {"oid": "eef3b2eb37c873095432a972f6aab59f4558c385", "url": "https://github.com/openhab/openhab-addons/commit/eef3b2eb37c873095432a972f6aab59f4558c385", "message": "Merge branch 'master' of https://github.com/openhab/openhab2-addons", "committedDate": "2019-05-20T18:04:57Z", "type": "commit"}, {"oid": "43e814448bdf0c34be07e8ab5fde1ae41e6a4871", "url": "https://github.com/openhab/openhab-addons/commit/43e814448bdf0c34be07e8ab5fde1ae41e6a4871", "message": "Changes for new build system", "committedDate": "2019-06-08T20:44:31Z", "type": "commit"}, {"oid": "611b9fd6ba39a4583ae3018502dd300ba62e0e89", "url": "https://github.com/openhab/openhab-addons/commit/611b9fd6ba39a4583ae3018502dd300ba62e0e89", "message": "Original", "committedDate": "2019-06-09T17:29:50Z", "type": "commit"}, {"oid": "bbdcbf8c5586f7ae2f973e84eb54087b02b2c17c", "url": "https://github.com/openhab/openhab-addons/commit/bbdcbf8c5586f7ae2f973e84eb54087b02b2c17c", "message": "Bugfixed for new version and merge request", "committedDate": "2019-06-09T19:35:14Z", "type": "commit"}, {"oid": "987d8ebe73d35694ba8d1bfe1b5084e806f61cee", "url": "https://github.com/openhab/openhab-addons/commit/987d8ebe73d35694ba8d1bfe1b5084e806f61cee", "message": "Added license information and author", "committedDate": "2019-06-09T19:39:48Z", "type": "commit"}, {"oid": "b2d9d0f5e74d93c39dff5fcd834e9d40e344838e", "url": "https://github.com/openhab/openhab-addons/commit/b2d9d0f5e74d93c39dff5fcd834e9d40e344838e", "message": "Added contributor and readme information", "committedDate": "2019-06-10T07:52:00Z", "type": "commit"}, {"oid": "286eb47bca61d60e13e36173442151de4c9bf1ee", "url": "https://github.com/openhab/openhab-addons/commit/286eb47bca61d60e13e36173442151de4c9bf1ee", "message": "Uncommented test comment for production use", "committedDate": "2019-06-22T14:35:06Z", "type": "commit"}, {"oid": "336a7e1cf4bb9d46eb2edc7ff0bc8d50bea82581", "url": "https://github.com/openhab/openhab-addons/commit/336a7e1cf4bb9d46eb2edc7ff0bc8d50bea82581", "message": "Removed the waitForUpdate variable - not used", "committedDate": "2019-06-22T14:40:23Z", "type": "commit"}, {"oid": "4b8a52083a3e8cc4eebef6f7b6d2792d6b1dd8bd", "url": "https://github.com/openhab/openhab-addons/commit/4b8a52083a3e8cc4eebef6f7b6d2792d6b1dd8bd", "message": "Added two configurations params for pulling interval and activating the smart bulbs", "committedDate": "2019-06-30T10:55:17Z", "type": "commit"}, {"oid": "01f74fb46e6dd0a48438bc0175982e9dc19f060a", "url": "https://github.com/openhab/openhab-addons/commit/01f74fb46e6dd0a48438bc0175982e9dc19f060a", "message": "Merge branch 'master' of https://github.com/openhab/openhab2-addons", "committedDate": "2019-07-04T19:05:03Z", "type": "commit"}, {"oid": "18603269aa9450969997e2db6e60eecce25c4dd7", "url": "https://github.com/openhab/openhab-addons/commit/18603269aa9450969997e2db6e60eecce25c4dd7", "message": "Merge branch 'SmartHome' into original", "committedDate": "2019-07-04T19:22:43Z", "type": "commit"}, {"oid": "59c9d18c0d90585b714b7769cea6be07f7fd1613", "url": "https://github.com/openhab/openhab-addons/commit/59c9d18c0d90585b714b7769cea6be07f7fd1613", "message": "Merge pull request #2 from lkn94/original\n\nAdded new functions for the binding", "committedDate": "2019-07-04T19:23:42Z", "type": "commit"}, {"oid": "7e234da391317dd73dcd868caf8e6e12fff0ed38", "url": "https://github.com/openhab/openhab-addons/commit/7e234da391317dd73dcd868caf8e6e12fff0ed38", "message": "[amazonechocontrol]\nFormatting change\nSigned-off-by: Michael Geramb <mail@michael-geramb.at>", "committedDate": "2019-07-04T19:47:35Z", "type": "commit"}, {"oid": "08d8636f165d978517a4b82af6374bf9e122bfd9", "url": "https://github.com/openhab/openhab-addons/commit/08d8636f165d978517a4b82af6374bf9e122bfd9", "message": "[amazonechocontrol]\nFix for Announcment Channel\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-07-14T20:11:05Z", "type": "commit"}, {"oid": "35434d9ddf1e7806ae6a387a1c3ebee24eaf15b8", "url": "https://github.com/openhab/openhab-addons/commit/35434d9ddf1e7806ae6a387a1c3ebee24eaf15b8", "message": "[amazonechocontrol]\nFix for Announcment Channel\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-07-14T20:26:00Z", "type": "commit"}, {"oid": "717cded710c60d0c8326bf23644f5a64ff3c960a", "url": "https://github.com/openhab/openhab-addons/commit/717cded710c60d0c8326bf23644f5a64ff3c960a", "message": "[amazonechocontrol]\nFix for Announcment Channel\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-07-14T20:37:13Z", "type": "commit"}, {"oid": "1f352a411c10feaa7b1a49f1343e58e87ed72af5", "url": "https://github.com/openhab/openhab-addons/commit/1f352a411c10feaa7b1a49f1343e58e87ed72af5", "message": "[amazonechocontrol]\nFix for Announcment Channel\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-07-14T20:42:38Z", "type": "commit"}, {"oid": "0b9b4387caf732ff02dbe1673d773875b3fb12af", "url": "https://github.com/openhab/openhab-addons/commit/0b9b4387caf732ff02dbe1673d773875b3fb12af", "message": "[amazonechocontrol]\nFix for Announcment Channel\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-07-14T20:54:52Z", "type": "commit"}, {"oid": "3dd6b570aeb9c013ee14f2015daedb72ef0f53fe", "url": "https://github.com/openhab/openhab-addons/commit/3dd6b570aeb9c013ee14f2015daedb72ef0f53fe", "message": "Merge pull request #1 from mgeramb/SmartHome\n\nSmart home", "committedDate": "2019-07-17T18:04:52Z", "type": "commit"}, {"oid": "208d6f55229c78ae79a0513bfd224719424d037b", "url": "https://github.com/openhab/openhab-addons/commit/208d6f55229c78ae79a0513bfd224719424d037b", "message": "Bugfixed discovery", "committedDate": "2019-07-17T20:49:44Z", "type": "commit"}, {"oid": "5def872ba7609e573950ec96516401c7ee6be167", "url": "https://github.com/openhab/openhab-addons/commit/5def872ba7609e573950ec96516401c7ee6be167", "message": "Merge branch 'original' of https://github.com/lkn94/openhab2-addons into original", "committedDate": "2019-07-17T20:50:28Z", "type": "commit"}, {"oid": "0ea5cde20ab0ca8d105ae2bb7a7ff0a670330d02", "url": "https://github.com/openhab/openhab-addons/commit/0ea5cde20ab0ca8d105ae2bb7a7ff0a670330d02", "message": "Bugfixed wrong entries of the amazon echo devices as lights", "committedDate": "2019-07-17T20:57:53Z", "type": "commit"}, {"oid": "4d44bdaef1ac325c225281a01d0d40b4990ea7a7", "url": "https://github.com/openhab/openhab-addons/commit/4d44bdaef1ac325c225281a01d0d40b4990ea7a7", "message": "Merge pull request #2 from lkn94/original\n\nOriginal", "committedDate": "2019-07-17T20:59:41Z", "type": "commit"}, {"oid": "a0f751be66701019778f99835438f0fc3c589339", "url": "https://github.com/openhab/openhab-addons/commit/a0f751be66701019778f99835438f0fc3c589339", "message": "Merge pull request #3 from lkn94/SmartHome\n\nBugfixed amazon echo/smart home discovery", "committedDate": "2019-07-18T11:36:10Z", "type": "commit"}, {"oid": "73796fb917048631235f2b0e07fbe5aabab3ccba", "url": "https://github.com/openhab/openhab-addons/commit/73796fb917048631235f2b0e07fbe5aabab3ccba", "message": "[amazonechocontrol]\nFix for Announcment Channel\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-07-18T12:42:23Z", "type": "commit"}, {"oid": "340e4f6e41cf01bae12feee7b2e4b82b50fc0048", "url": "https://github.com/openhab/openhab-addons/commit/340e4f6e41cf01bae12feee7b2e4b82b50fc0048", "message": "Merge pull request #3 from mgeramb/TestSmartHomeDeviceList\n\nTest smart home device list", "committedDate": "2019-07-18T13:26:35Z", "type": "commit"}, {"oid": "49901188ef004464dfa26e7b389106e930c839d2", "url": "https://github.com/openhab/openhab-addons/commit/49901188ef004464dfa26e7b389106e930c839d2", "message": "Implemented recursive searching for devices, filtered smart plugs", "committedDate": "2019-07-25T22:09:24Z", "type": "commit"}, {"oid": "0eb5d490a76bbea2a7acab29265f745b4cfaa65e", "url": "https://github.com/openhab/openhab-addons/commit/0eb5d490a76bbea2a7acab29265f745b4cfaa65e", "message": "Added smart plugs", "committedDate": "2019-07-26T08:33:44Z", "type": "commit"}, {"oid": "7683a3e09fd89f389387d3d58ff52f54ea8dcd08", "url": "https://github.com/openhab/openhab-addons/commit/7683a3e09fd89f389387d3d58ff52f54ea8dcd08", "message": "Removed unused code, renamed new function and it's references", "committedDate": "2019-07-26T22:14:28Z", "type": "commit"}, {"oid": "7fdb24c6087ae5ffed66d494c78e1f37139a3d45", "url": "https://github.com/openhab/openhab-addons/commit/7fdb24c6087ae5ffed66d494c78e1f37139a3d45", "message": "Added translation", "committedDate": "2019-07-27T11:25:22Z", "type": "commit"}, {"oid": "e9586a4798529d7d1796d1a3cefe5d55daf3d564", "url": "https://github.com/openhab/openhab-addons/commit/e9586a4798529d7d1796d1a3cefe5d55daf3d564", "message": "Added documentation", "committedDate": "2019-07-27T11:31:11Z", "type": "commit"}, {"oid": "9f22076f10c36959bb42080f0f2350e59ee49c2d", "url": "https://github.com/openhab/openhab-addons/commit/9f22076f10c36959bb42080f0f2350e59ee49c2d", "message": "Added capabilities to smart home device", "committedDate": "2019-07-28T16:07:29Z", "type": "commit"}, {"oid": "a679e716fbde6411752f8fcb95ee3895cc02836e", "url": "https://github.com/openhab/openhab-addons/commit/a679e716fbde6411752f8fcb95ee3895cc02836e", "message": "Added dynamic channel adding", "committedDate": "2019-07-31T21:19:18Z", "type": "commit"}, {"oid": "a5210e693f43d6ba467145bbced96a6e722666fa", "url": "https://github.com/openhab/openhab-addons/commit/a5210e693f43d6ba467145bbced96a6e722666fa", "message": "Merge pull request #4 from lkn94/TestSmartHomeDeviceList\n\nTest smart home device list", "committedDate": "2019-07-31T21:25:05Z", "type": "commit"}, {"oid": "e85bea82cb8ded6fe6e8cb3c16ffb49526780ffa", "url": "https://github.com/openhab/openhab-addons/commit/e85bea82cb8ded6fe6e8cb3c16ffb49526780ffa", "message": "Merge pull request #4 from lkn94/SmartHome\n\nSmart home", "committedDate": "2019-08-05T17:41:05Z", "type": "commit"}, {"oid": "58e54cd97f61aad9ba0a9c05db0352a3fe308e2c", "url": "https://github.com/openhab/openhab-addons/commit/58e54cd97f61aad9ba0a9c05db0352a3fe308e2c", "message": "[amazonechocontrol]\nImprove smart home discover and and add options for openHAB smarthome devices\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-08-05T18:42:45Z", "type": "commit"}, {"oid": "bc792118ee777f1ebc12aa223f74939be8a432e5", "url": "https://github.com/openhab/openhab-addons/commit/bc792118ee777f1ebc12aa223f74939be8a432e5", "message": "Merge branch 'master' of https://github.com/openhab/openhab2-addons", "committedDate": "2019-08-15T07:16:09Z", "type": "commit"}, {"oid": "6cd3a7cb6c865728694cd7a27da6d24b73480225", "url": "https://github.com/openhab/openhab-addons/commit/6cd3a7cb6c865728694cd7a27da6d24b73480225", "message": "Merge pull request #5 from mgeramb/SmartHome\n\nSmart home", "committedDate": "2019-08-18T11:50:56Z", "type": "commit"}, {"oid": "4879687490219a610bf28f0659f71209ad9aa6d5", "url": "https://github.com/openhab/openhab-addons/commit/4879687490219a610bf28f0659f71209ad9aa6d5", "message": "[amazonechocontrol]\nHandle on/off in percentage channel\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-01T08:17:57Z", "type": "commit"}, {"oid": "a87ca63eb842196cc85e2b140f3afdd17234739b", "url": "https://github.com/openhab/openhab-addons/commit/a87ca63eb842196cc85e2b140f3afdd17234739b", "message": "[amazonechocontrol]\nSmart Home Device Handling\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-01T13:08:26Z", "type": "commit"}, {"oid": "018b7d1bc390d35c262ca842a178e84d97f37747", "url": "https://github.com/openhab/openhab-addons/commit/018b7d1bc390d35c262ca842a178e84d97f37747", "message": "[amazonechocontrol]\nUpdate Smart Home Device Handling\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-02T21:28:00Z", "type": "commit"}, {"oid": "37e83877443035d1923c94caa605ecc815847d8d", "url": "https://github.com/openhab/openhab-addons/commit/37e83877443035d1923c94caa605ecc815847d8d", "message": "[amazonechocontrol]\nMove Polling Timer to Account Handler\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-03T05:59:33Z", "type": "commit"}, {"oid": "981c903bf4f69e7dc4c367691d0a2ff6dea2b112", "url": "https://github.com/openhab/openhab-addons/commit/981c903bf4f69e7dc4c367691d0a2ff6dea2b112", "message": "[amazonechocontrol]\nRemove polling from smart home handler\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-03T06:07:12Z", "type": "commit"}, {"oid": "ce86f74517bed867a522b59d9b020062d36af7b4", "url": "https://github.com/openhab/openhab-addons/commit/ce86f74517bed867a522b59d9b020062d36af7b4", "message": "[amazonechocontrol]\nupdate state\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-04T18:52:41Z", "type": "commit"}, {"oid": "a39a2510085d861c93824b6f2e49ab87df61b11f", "url": "https://github.com/openhab/openhab-addons/commit/a39a2510085d861c93824b6f2e49ab87df61b11f", "message": "[amazonechocontrol]\nUpdate State\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-04T20:40:04Z", "type": "commit"}, {"oid": "4c4dd8558ff83bc5d16f7c0642f1bf19378aac26", "url": "https://github.com/openhab/openhab-addons/commit/4c4dd8558ff83bc5d16f7c0642f1bf19378aac26", "message": "[amazonechocontrol]\nupdate state handling and readme\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-05T18:29:51Z", "type": "commit"}, {"oid": "32c9cd0fa4bad7ab858dc7916fc88399b65b049d", "url": "https://github.com/openhab/openhab-addons/commit/32c9cd0fa4bad7ab858dc7916fc88399b65b049d", "message": "[amazonechocontrol]\nAlexa guard support\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-05T19:44:37Z", "type": "commit"}, {"oid": "47c8a5ee1d9b9f732adf4baf00b2aaafbfcc651f", "url": "https://github.com/openhab/openhab-addons/commit/47c8a5ee1d9b9f732adf4baf00b2aaafbfcc651f", "message": "[amazonechocontrol]\nMerge master from OH\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-06T15:53:24Z", "type": "commit"}, {"oid": "e757bdebaddad0d0dfa4793cbd607ea05aa6cf42", "url": "https://github.com/openhab/openhab-addons/commit/e757bdebaddad0d0dfa4793cbd607ea05aa6cf42", "message": "Merge branch 'master' of https://github.com/openhab/openhab2-addons", "committedDate": "2019-09-06T17:09:35Z", "type": "commit"}, {"oid": "be69b72df9533892c9f39eb87c9031f2f987342f", "url": "https://github.com/openhab/openhab-addons/commit/be69b72df9533892c9f39eb87c9031f2f987342f", "message": "[amazonechocontrol] Bugfix for login in Australia (#6034)\n\nSigned-off-by: Michael Geramb <mail@michael-geramb.at>", "committedDate": "2019-09-06T17:11:47Z", "type": "commit"}, {"oid": "529dcf3feddba1ac724b4428d9dc27f30c0bf429", "url": "https://github.com/openhab/openhab-addons/commit/529dcf3feddba1ac724b4428d9dc27f30c0bf429", "message": "[amazonechocontrol]\nFix invalid device state\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-07T08:13:39Z", "type": "commit"}, {"oid": "842bf2fa1bf52d1db40094ee347a1047acf70b3b", "url": "https://github.com/openhab/openhab-addons/commit/842bf2fa1bf52d1db40094ee347a1047acf70b3b", "message": "[amazonechocontrol]\nBugfix and docu for announcment\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-07T09:00:06Z", "type": "commit"}, {"oid": "de011da6ea701678bd88fcec89573c5a7c9133b9", "url": "https://github.com/openhab/openhab-addons/commit/de011da6ea701678bd88fcec89573c5a7c9133b9", "message": "[amazonechocontrol]\nMerge from master\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-07T09:21:26Z", "type": "commit"}, {"oid": "e6469bd6b04fdf7a29cccc4c292c639bb902a629", "url": "https://github.com/openhab/openhab-addons/commit/e6469bd6b04fdf7a29cccc4c292c639bb902a629", "message": "[amazonechocontrol]\nBugfix and docu for announcment\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-07T09:31:39Z", "type": "commit"}, {"oid": "8751a781a6b397c7237d9a6efeaa149d748e9305", "url": "https://github.com/openhab/openhab-addons/commit/8751a781a6b397c7237d9a6efeaa149d748e9305", "message": "[amazonechocontrol]\nRefactoring\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-07T19:16:46Z", "type": "commit"}, {"oid": "06e817d05f0c44b52385fa3bb96b4ccbe26d1ef5", "url": "https://github.com/openhab/openhab-addons/commit/06e817d05f0c44b52385fa3bb96b4ccbe26d1ef5", "message": "[amazonechocontrol]\nFix duplicate channel registration\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-07T20:27:04Z", "type": "commit"}, {"oid": "9511d971a7f39568f458e82a12793579d51a3640", "url": "https://github.com/openhab/openhab-addons/commit/9511d971a7f39568f458e82a12793579d51a3640", "message": "[amazonechocontrol]\nFix updates\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-07T22:01:45Z", "type": "commit"}, {"oid": "f190c7e9c0210f8699e7045c8bd50389cc1eab75", "url": "https://github.com/openhab/openhab-addons/commit/f190c7e9c0210f8699e7045c8bd50389cc1eab75", "message": "[amazonechocontrol]\nSkill device detection\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-08T07:02:34Z", "type": "commit"}, {"oid": "7f14476a8b59f60796d0fa9787c10faa83e9747d", "url": "https://github.com/openhab/openhab-addons/commit/7f14476a8b59f60796d0fa9787c10faa83e9747d", "message": "[amazonechocontrol]\nImprove channel handling\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-08T08:04:11Z", "type": "commit"}, {"oid": "af25daf001532f86b50a1565f0337cb4e0b4c87e", "url": "https://github.com/openhab/openhab-addons/commit/af25daf001532f86b50a1565f0337cb4e0b4c87e", "message": "[amazonechocontrol]\nColor Name handling\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-08T08:43:33Z", "type": "commit"}, {"oid": "60d884ac1a208ff59d13a545db7fb6c1582032c8", "url": "https://github.com/openhab/openhab-addons/commit/60d884ac1a208ff59d13a545db7fb6c1582032c8", "message": "[amazonechocontrol]\nSingle device update\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-08T10:05:37Z", "type": "commit"}, {"oid": "7263e92f08c248792a981fa6e53da3db3ef01ac5", "url": "https://github.com/openhab/openhab-addons/commit/7263e92f08c248792a981fa6e53da3db3ef01ac5", "message": "[amazonechocontrol]\nColor handling\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-08T10:52:26Z", "type": "commit"}, {"oid": "32f943f23e4b458182e4a50ff99a1e8ea672e408", "url": "https://github.com/openhab/openhab-addons/commit/32f943f23e4b458182e4a50ff99a1e8ea672e408", "message": "[amazonechocontrol]\nHandle Security Panel Controller\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-09T04:57:07Z", "type": "commit"}, {"oid": "8a5b69a6393db3d4279ed9ed038c429c8224fa0e", "url": "https://github.com/openhab/openhab-addons/commit/8a5b69a6393db3d4279ed9ed038c429c8224fa0e", "message": "[amazonechocontrol]\nColor handling\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-09T16:45:53Z", "type": "commit"}, {"oid": "6addb5885d86b08c7ee5540cab9d3c0c3b2a6d58", "url": "https://github.com/openhab/openhab-addons/commit/6addb5885d86b08c7ee5540cab9d3c0c3b2a6d58", "message": "[amazonechocontrol]\nAlexa.AcousticEventSensor added\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-09T18:05:04Z", "type": "commit"}, {"oid": "b46f8ec7d8ed50f860b7b1813f97bf3e64b6440f", "url": "https://github.com/openhab/openhab-addons/commit/b46f8ec7d8ed50f860b7b1813f97bf3e64b6440f", "message": "[amazonechocontrol]\nCode cleanup\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-09T18:31:10Z", "type": "commit"}, {"oid": "e33ba2842960a42b056103f36dd8b983732f5aa3", "url": "https://github.com/openhab/openhab-addons/commit/e33ba2842960a42b056103f36dd8b983732f5aa3", "message": "[amazonechocontrol]\nAlexa.TemperatureSensor Interface\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-09T19:26:46Z", "type": "commit"}, {"oid": "083c53278ab3a19c9b8d55408456dc61f685b27b", "url": "https://github.com/openhab/openhab-addons/commit/083c53278ab3a19c9b8d55408456dc61f685b27b", "message": "[amazonechocontrol]\nPowerLevelController, PercentageController\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-09T19:54:22Z", "type": "commit"}, {"oid": "cf83c0e9b2f5b29fc0e293b8f3a9b2fcfadded71", "url": "https://github.com/openhab/openhab-addons/commit/cf83c0e9b2f5b29fc0e293b8f3a9b2fcfadded71", "message": "[amazonechocontrol]\nAdd readme\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-10T05:03:10Z", "type": "commit"}, {"oid": "cc13a4a8c5ab5f7dfe6b993244c71f545db6591b", "url": "https://github.com/openhab/openhab-addons/commit/cc13a4a8c5ab5f7dfe6b993244c71f545db6591b", "message": "[amazonechocontrol]\nAdd To Do List\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-10T05:04:29Z", "type": "commit"}, {"oid": "7d296bf89bde522da1e3e3fd6037f8b74b2a6790", "url": "https://github.com/openhab/openhab-addons/commit/7d296bf89bde522da1e3e3fd6037f8b74b2a6790", "message": "[amazonechocontrol]\nFix nullable warning in Announcment\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-10T20:02:59Z", "type": "commit"}, {"oid": "da6e2e562b36e53a1c2c340e1b133267870723d9", "url": "https://github.com/openhab/openhab-addons/commit/da6e2e562b36e53a1c2c340e1b133267870723d9", "message": "[amazonechocontrol]\nFix nullable warnings\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-10T20:04:47Z", "type": "commit"}, {"oid": "ece83d3efb51c2044a82d754aa023141662f3c1b", "url": "https://github.com/openhab/openhab-addons/commit/ece83d3efb51c2044a82d754aa023141662f3c1b", "message": "Merge branch 'master' of https://github.com/openhab/openhab2-addons", "committedDate": "2019-09-10T20:05:16Z", "type": "commit"}, {"oid": "abfe19098b34026ad96c2bb1ebd3c9d8ce06e306", "url": "https://github.com/openhab/openhab-addons/commit/abfe19098b34026ad96c2bb1ebd3c9d8ce06e306", "message": "Update ___Do_To's___.md", "committedDate": "2019-09-11T15:53:43Z", "type": "commit"}, {"oid": "184a6dcf17fcc76688f8543da9ae82224e290f49", "url": "https://github.com/openhab/openhab-addons/commit/184a6dcf17fcc76688f8543da9ae82224e290f49", "message": "Update ___Do_To's___.md", "committedDate": "2019-09-11T15:59:58Z", "type": "commit"}, {"oid": "4775940d6b0ac7aa90bcd83447b58d17515b8333", "url": "https://github.com/openhab/openhab-addons/commit/4775940d6b0ac7aa90bcd83447b58d17515b8333", "message": "Update README.md", "committedDate": "2019-09-11T16:32:46Z", "type": "commit"}, {"oid": "33e541217cdc5228ab4e6a4ac076ad502eead8b1", "url": "https://github.com/openhab/openhab-addons/commit/33e541217cdc5228ab4e6a4ac076ad502eead8b1", "message": "Update README.md", "committedDate": "2019-09-11T16:33:20Z", "type": "commit"}, {"oid": "47a190d8634d9663b6fab3562b91c66dc70bdbcd", "url": "https://github.com/openhab/openhab-addons/commit/47a190d8634d9663b6fab3562b91c66dc70bdbcd", "message": "[amazonechocontrol]\nBugfixing\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T16:41:21Z", "type": "commit"}, {"oid": "6669eedd64ef65b1969ea82d6de4fa11cfac226c", "url": "https://github.com/openhab/openhab-addons/commit/6669eedd64ef65b1969ea82d6de4fa11cfac226c", "message": "Merge branch 'SmartHomeDeviceHandling' of https://github.com/mgeramb/openhab2-addons into SmartHomeDeviceHandling", "committedDate": "2019-09-11T16:42:51Z", "type": "commit"}, {"oid": "c4cf560d25999d19085f11e068615f4103d3fea7", "url": "https://github.com/openhab/openhab-addons/commit/c4cf560d25999d19085f11e068615f4103d3fea7", "message": "[amazonechocontrol]\nPrepare Release Notes\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T17:14:52Z", "type": "commit"}, {"oid": "62be95d5ac2b537d527136ab69fea00b0ceef8bf", "url": "https://github.com/openhab/openhab-addons/commit/62be95d5ac2b537d527136ab69fea00b0ceef8bf", "message": "Update README.md", "committedDate": "2019-09-11T17:26:42Z", "type": "commit"}, {"oid": "6cb3702553cb9c432f4969ab576519a8d979c7a4", "url": "https://github.com/openhab/openhab-addons/commit/6cb3702553cb9c432f4969ab576519a8d979c7a4", "message": "[amazonechocontrol]\nPrepare Relase notes\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T17:28:16Z", "type": "commit"}, {"oid": "53573c63aaf6dc47542c5e021fed64ae02f6a535", "url": "https://github.com/openhab/openhab-addons/commit/53573c63aaf6dc47542c5e021fed64ae02f6a535", "message": "[amazonechocontrol]\nWelcome message\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T17:31:03Z", "type": "commit"}, {"oid": "0b505fcf813a9a695037b4324dab0043475a7b7a", "url": "https://github.com/openhab/openhab-addons/commit/0b505fcf813a9a695037b4324dab0043475a7b7a", "message": "Merge branch 'SmartHomeDeviceHandling' of https://github.com/mgeramb/openhab2-addons into SmartHomeDeviceHandling", "committedDate": "2019-09-11T17:31:20Z", "type": "commit"}, {"oid": "a967c658b41aec658a7a75a7819870b6e43e2b98", "url": "https://github.com/openhab/openhab-addons/commit/a967c658b41aec658a7a75a7819870b6e43e2b98", "message": "Update ___Release_Notes___.md", "committedDate": "2019-09-11T17:38:22Z", "type": "commit"}, {"oid": "abfdba8e4dffb95a2964a669b1aa18325d4596f8", "url": "https://github.com/openhab/openhab-addons/commit/abfdba8e4dffb95a2964a669b1aa18325d4596f8", "message": "[amazonechocontrol]\nTop most posting old thread\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T17:40:24Z", "type": "commit"}, {"oid": "ef3e63ae2d46230eda638bd00bed215376a99b94", "url": "https://github.com/openhab/openhab-addons/commit/ef3e63ae2d46230eda638bd00bed215376a99b94", "message": "Merge branch 'SmartHomeDeviceHandling' of https://github.com/mgeramb/openhab2-addons into SmartHomeDeviceHandling", "committedDate": "2019-09-11T17:40:38Z", "type": "commit"}, {"oid": "b74ac50e10ceeb1461714f96b1d361a9f3aec783", "url": "https://github.com/openhab/openhab-addons/commit/b74ac50e10ceeb1461714f96b1d361a9f3aec783", "message": "[amazonechocontrol]\nTop most posting old thread\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T17:54:16Z", "type": "commit"}, {"oid": "05f1c845d949c618ba77b85711a5f7c84f6fb0fe", "url": "https://github.com/openhab/openhab-addons/commit/05f1c845d949c618ba77b85711a5f7c84f6fb0fe", "message": "[amazonechocontrol]\nTop most posting old thread\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T17:56:36Z", "type": "commit"}, {"oid": "3aff30cce8e54f0eb08929886c2d9eff45db3d2c", "url": "https://github.com/openhab/openhab-addons/commit/3aff30cce8e54f0eb08929886c2d9eff45db3d2c", "message": "[amazonechocontrol]\nTop most posting new thread\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T18:12:37Z", "type": "commit"}, {"oid": "7922e7d78788b89d92c1f3d14ed86f1e3e6d8ed2", "url": "https://github.com/openhab/openhab-addons/commit/7922e7d78788b89d92c1f3d14ed86f1e3e6d8ed2", "message": "[amazonechocontrol]\nTop most posting new thread\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T18:15:55Z", "type": "commit"}, {"oid": "9ad4a7ad392b35bfe4dc3762861464cb11b69da5", "url": "https://github.com/openhab/openhab-addons/commit/9ad4a7ad392b35bfe4dc3762861464cb11b69da5", "message": "[amazonechocontrol]\nTop most posting new thread\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T18:16:35Z", "type": "commit"}, {"oid": "b45f51e0fb4afb72e2a350a820e5540954b48c1e", "url": "https://github.com/openhab/openhab-addons/commit/b45f51e0fb4afb72e2a350a820e5540954b48c1e", "message": "[amazonechocontrol]\nTop most posting old thread\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T18:22:20Z", "type": "commit"}, {"oid": "f569693e908fbcd31b6264092897f873af0413e4", "url": "https://github.com/openhab/openhab-addons/commit/f569693e908fbcd31b6264092897f873af0413e4", "message": "[amazonechocontrol]\nTop most posting old thread\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T18:49:50Z", "type": "commit"}, {"oid": "a5dffba5c1c2c00d218f0d1b35db037bb323f5a3", "url": "https://github.com/openhab/openhab-addons/commit/a5dffba5c1c2c00d218f0d1b35db037bb323f5a3", "message": "[amazonechocontrol]\nTop most posting new thread\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T19:22:54Z", "type": "commit"}, {"oid": "b799b1310c4b1b04c74f3f1333791e83da3ab246", "url": "https://github.com/openhab/openhab-addons/commit/b799b1310c4b1b04c74f3f1333791e83da3ab246", "message": "[amazonechocontrol]\nTemporary files removed\nSigned-off-by: Michael Geramb <mail@michael-geramb.at> (github: mgeramb)", "committedDate": "2019-09-11T20:20:11Z", "type": "commit"}]}