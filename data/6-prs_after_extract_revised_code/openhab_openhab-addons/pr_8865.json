{"pr_number": 8865, "pr_title": "[modbus] Modbus register array backed by bytes and other simplifications", "pr_createdAt": "2020-10-25T18:53:36Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8865", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNDYxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511634611", "bodyText": "fix", "author": "ssalonen", "createdAt": "2020-10-25T18:54:40Z", "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/discovery/internal/ModbusDiscoveryService.java", "diffHunk": "@@ -44,7 +44,7 @@\n  * @author Nagy Attila Gabor - initial contribution\n  *\n  */\n-@Component(service = DiscoveryService.class, configurationPid = \"discovery.modbus\")\n+@Component(immediate = true, service = DiscoveryService.class, configurationPid = \"discovery.modbus\")", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/discovery/internal/ModbusDiscoveryService.java b/bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/discovery/internal/ModbusDiscoveryService.java\nindex 628e17f905..73fed96e31 100644\n--- a/bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/discovery/internal/ModbusDiscoveryService.java\n+++ b/bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/discovery/internal/ModbusDiscoveryService.java\n\n@@ -44,7 +44,7 @@ import org.slf4j.LoggerFactory;\n  * @author Nagy Attila Gabor - initial contribution\n  *\n  */\n-@Component(immediate = true, service = DiscoveryService.class, configurationPid = \"discovery.modbus\")\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.modbus\")\n @NonNullByDefault\n public class ModbusDiscoveryService extends AbstractDiscoveryService {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNDc4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511634789", "bodyText": "revert changed annotations", "author": "ssalonen", "createdAt": "2020-10-25T18:56:10Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesCommandToRegistersTest.java", "diffHunk": "@@ -307,24 +325,22 @@\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    @ParameterizedTest\n-    @MethodSource(\"data\")\n-    public void testCommandToRegisters(Command command, ValueType type, Object expectedResult) {\n+    @Test\n+    public void testCommandToRegisters() {", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesCommandToRegistersTest.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesCommandToRegistersTest.java\nindex 0effa94e08..f4e562df61 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesCommandToRegistersTest.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesCommandToRegistersTest.java\n\n@@ -325,13 +307,15 @@ public class BitUtilitiesCommandToRegistersTest {\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    @Test\n-    public void testCommandToRegisters() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testCommandToRegisters(Command command, ValueType type, Object expectedResult) {\n         if (expectedResult instanceof Class && Exception.class.isAssignableFrom((Class) expectedResult)) {\n-            shouldThrow.expect((Class) expectedResult);\n+            assertThrows((Class) expectedResult, () -> ModbusBitUtilities.commandToRegisters(command, type));\n+            return;\n         }\n \n-        ModbusRegisterArray registers = ModbusBitUtilities.commandToRegisters(this.command, this.type);\n+        ModbusRegisterArray registers = ModbusBitUtilities.commandToRegisters(command, type);\n         short[] expectedRegisters = (short[]) expectedResult;\n \n         assertThat(String.format(\"register index command=%s, type=%s\", command, type), registers.size(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNDgwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511634802", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T18:56:16Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesCommandToRegistersTest.java", "diffHunk": "@@ -47,6 +64,7 @@\n         return shorts;\n     }\n \n+    @Parameters", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesCommandToRegistersTest.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesCommandToRegistersTest.java\nindex 0effa94e08..f4e562df61 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesCommandToRegistersTest.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesCommandToRegistersTest.java\n\n@@ -64,7 +47,6 @@ public class BitUtilitiesCommandToRegistersTest {\n         return shorts;\n     }\n \n-    @Parameters\n     public static Collection<Object[]> data() {\n         return Collections.unmodifiableList(Stream\n                 .of(new Object[] { new DecimalType(\"1.0\"), ValueType.BIT, IllegalArgumentException.class },\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNDg0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511634849", "bodyText": "follow example set in other tests, removing this", "author": "ssalonen", "createdAt": "2020-10-25T18:56:45Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesExtractIndividualMethodsTest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.transport.modbus.test;\n+\n+import static org.junit.Assert.*;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.Stream.Builder;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+\n+/**\n+ * @author Sami Salonen - Initial contribution\n+ */\n+@RunWith(Parameterized.class)\n+public class BitUtilitiesExtractIndividualMethodsTest {\n+\n+    final byte[] bytes;\n+    final ValueType type;\n+    final int byteIndex;\n+    final Object expectedResult;\n+\n+    @Rule\n+    public final ExpectedException shouldThrow = ExpectedException.none();\n+\n+    public BitUtilitiesExtractIndividualMethodsTest(Object expectedResult, ValueType type, byte[] bytes,\n+            int byteIndex) {\n+        this.expectedResult = expectedResult; // Exception or DecimalType\n+        this.type = type;\n+        this.bytes = bytes;\n+        this.byteIndex = byteIndex;\n+    }\n+\n+    @Parameters", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesExtractIndividualMethodsTest.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesExtractIndividualMethodsTest.java\nindex f3afb4e161..83f1a629a2 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesExtractIndividualMethodsTest.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/BitUtilitiesExtractIndividualMethodsTest.java\n\n@@ -12,22 +12,20 @@\n  */\n package org.openhab.io.transport.modbus.test;\n \n-import static org.junit.Assert.*;\n-import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.*;\n \n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import java.util.stream.Stream.Builder;\n \n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.openhab.core.library.types.DecimalType;\n import org.openhab.io.transport.modbus.ModbusBitUtilities;\n import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNTEzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511635139", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T18:59:36Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java", "diffHunk": "@@ -118,9 +113,14 @@\n \n     private static AtomicCounter udpServerIndex = new AtomicCounter(0);\n \n-    protected @Spy TCPSlaveConnectionFactory tcpConnectionFactory = new TCPSlaveConnectionFactoryImpl();\n-    protected @Spy UDPSlaveTerminalFactory udpTerminalFactory = new UDPSlaveTerminalFactoryImpl();\n-    protected @Spy SerialConnectionFactory serialConnectionFactory = new SerialConnectionFactoryImpl();\n+    @Spy", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java\nindex 428ed46325..ae573be304 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java\n\n@@ -113,14 +118,9 @@ public class IntegrationTestSupport extends JavaTest {\n \n     private static AtomicCounter udpServerIndex = new AtomicCounter(0);\n \n-    @Spy\n-    protected TCPSlaveConnectionFactory tcpConnectionFactory = new TCPSlaveConnectionFactoryImpl();\n-\n-    @Spy\n-    protected UDPSlaveTerminalFactory udpTerminalFactory = new UDPSlaveTerminalFactoryImpl();\n-\n-    @Spy\n-    protected SerialConnectionFactory serialConnectionFactory = new SerialConnectionFactoryImpl();\n+    protected @Spy TCPSlaveConnectionFactory tcpConnectionFactory = new TCPSlaveConnectionFactoryImpl();\n+    protected @Spy UDPSlaveTerminalFactory udpTerminalFactory = new UDPSlaveTerminalFactoryImpl();\n+    protected @Spy SerialConnectionFactory serialConnectionFactory = new SerialConnectionFactoryImpl();\n \n     protected ResultCaptor<ModbusRequest> modbustRequestCaptor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNTE0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511635146", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T18:59:39Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java", "diffHunk": "@@ -65,8 +62,6 @@\n /**\n  * @author Sami Salonen - Initial contribution\n  */\n-@ExtendWith(MockitoExtension.class)", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java\nindex 428ed46325..ae573be304 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java\n\n@@ -62,6 +65,8 @@ import net.wimpi.modbus.util.SerialParameters;\n /**\n  * @author Sami Salonen - Initial contribution\n  */\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.WARN)\n public class IntegrationTestSupport extends JavaTest {\n \n     public enum ServerType {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNTE2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511635167", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T18:59:50Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java", "diffHunk": "@@ -146,7 +146,7 @@ protected static InetAddress localAddress() throws UnknownHostException {\n         return InetAddress.getByName(\"127.0.0.1\");\n     }\n \n-    @BeforeEach\n+    @Before", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java\nindex 428ed46325..ae573be304 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/IntegrationTestSupport.java\n\n@@ -146,7 +146,7 @@ public class IntegrationTestSupport extends JavaTest {\n         return InetAddress.getByName(\"127.0.0.1\");\n     }\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n         modbustRequestCaptor = new ResultCaptor<>(new LongSupplier() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNTIxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511635212", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T19:00:16Z", "path": "itests/org.openhab.binding.modbus.tests/src/main/java/org/openhab/binding/modbus/tests/ModbusDataHandlerTest.java", "diffHunk": "@@ -88,6 +88,7 @@\n /**\n  * @author Sami Salonen - Initial contribution\n  */\n+@RunWith(MockitoJUnitRunner.class)", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/itests/org.openhab.binding.modbus.tests/src/main/java/org/openhab/binding/modbus/tests/ModbusDataHandlerTest.java b/itests/org.openhab.binding.modbus.tests/src/main/java/org/openhab/binding/modbus/tests/ModbusDataHandlerTest.java\nindex 3f735c4e73..c8f12de51a 100644\n--- a/itests/org.openhab.binding.modbus.tests/src/main/java/org/openhab/binding/modbus/tests/ModbusDataHandlerTest.java\n+++ b/itests/org.openhab.binding.modbus.tests/src/main/java/org/openhab/binding/modbus/tests/ModbusDataHandlerTest.java\n\n@@ -88,7 +87,6 @@ import org.osgi.framework.InvalidSyntaxException;\n /**\n  * @author Sami Salonen - Initial contribution\n  */\n-@RunWith(MockitoJUnitRunner.class)\n public class ModbusDataHandlerTest extends AbstractModbusOSGiTest {\n \n     private final class MultiplyTransformation implements TransformationService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNTIzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511635235", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T19:00:27Z", "path": "itests/org.openhab.binding.modbus.tests/src/main/java/org/openhab/binding/modbus/tests/ModbusDataHandlerTest.java", "diffHunk": "@@ -113,7 +114,7 @@ public String transform(String function, String source) throws TransformationExc\n     }\n     private List<ModbusWriteRequestBlueprint> writeRequests = new ArrayList<>();\n \n-    @AfterEach", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/itests/org.openhab.binding.modbus.tests/src/main/java/org/openhab/binding/modbus/tests/ModbusDataHandlerTest.java b/itests/org.openhab.binding.modbus.tests/src/main/java/org/openhab/binding/modbus/tests/ModbusDataHandlerTest.java\nindex 3f735c4e73..c8f12de51a 100644\n--- a/itests/org.openhab.binding.modbus.tests/src/main/java/org/openhab/binding/modbus/tests/ModbusDataHandlerTest.java\n+++ b/itests/org.openhab.binding.modbus.tests/src/main/java/org/openhab/binding/modbus/tests/ModbusDataHandlerTest.java\n\n@@ -114,7 +112,7 @@ public class ModbusDataHandlerTest extends AbstractModbusOSGiTest {\n     }\n     private List<ModbusWriteRequestBlueprint> writeRequests = new ArrayList<>();\n \n-    @After\n+    @AfterEach\n     public void tearDown() {\n         writeRequests.clear();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNTI2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511635265", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T19:00:44Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java", "diffHunk": "@@ -84,22 +83,22 @@ public void testFC6SingleRegisterMaxTries99() {\n                         (Matcher) new RegisterMatcher(55, 5412, 99, ModbusWriteFunctionCode.WRITE_SINGLE_REGISTER, 3)));\n     }\n \n-    @Test\n+    @Test(expected = IllegalArgumentException.class)\n     public void testFC6MultipleRegisters() {\n-        assertThrows(IllegalArgumentException.class, () -> WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n+        WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n                 + \"\\\"functionCode\\\": 6,\"//\n                 + \"\\\"address\\\": 5412,\"//\n                 + \"\\\"value\\\": [3, 4]\"//\n-                + \"}]\"));\n+                + \"}]\");\n     }\n \n-    @Test\n+    @Test(expected = IllegalArgumentException.class)", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\nindex 241ec40582..22fa402309 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\n\n@@ -83,22 +84,22 @@ public class WriteRequestJsonUtilitiesTest {\n                         (Matcher) new RegisterMatcher(55, 5412, 99, ModbusWriteFunctionCode.WRITE_SINGLE_REGISTER, 3)));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testFC6MultipleRegisters() {\n-        WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n+        assertThrows(IllegalArgumentException.class, () -> WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n                 + \"\\\"functionCode\\\": 6,\"//\n                 + \"\\\"address\\\": 5412,\"//\n                 + \"\\\"value\\\": [3, 4]\"//\n-                + \"}]\");\n+                + \"}]\"));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testFC16NoRegister() {\n-        WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n+        assertThrows(IllegalArgumentException.class, () -> WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n                 + \"\\\"functionCode\\\": 16,\"//\n                 + \"\\\"address\\\": 5412,\"//\n                 + \"\\\"value\\\": []\"//\n-                + \"}]\");\n+                + \"}]\"));\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNTI3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511635270", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T19:00:46Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java", "diffHunk": "@@ -84,22 +83,22 @@ public void testFC6SingleRegisterMaxTries99() {\n                         (Matcher) new RegisterMatcher(55, 5412, 99, ModbusWriteFunctionCode.WRITE_SINGLE_REGISTER, 3)));\n     }\n \n-    @Test\n+    @Test(expected = IllegalArgumentException.class)", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\nindex 241ec40582..22fa402309 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\n\n@@ -83,22 +84,22 @@ public class WriteRequestJsonUtilitiesTest {\n                         (Matcher) new RegisterMatcher(55, 5412, 99, ModbusWriteFunctionCode.WRITE_SINGLE_REGISTER, 3)));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testFC6MultipleRegisters() {\n-        WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n+        assertThrows(IllegalArgumentException.class, () -> WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n                 + \"\\\"functionCode\\\": 6,\"//\n                 + \"\\\"address\\\": 5412,\"//\n                 + \"\\\"value\\\": [3, 4]\"//\n-                + \"}]\");\n+                + \"}]\"));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testFC16NoRegister() {\n-        WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n+        assertThrows(IllegalArgumentException.class, () -> WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n                 + \"\\\"functionCode\\\": 16,\"//\n                 + \"\\\"address\\\": 5412,\"//\n                 + \"\\\"value\\\": []\"//\n-                + \"}]\");\n+                + \"}]\"));\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNTI5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511635291", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T19:00:52Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java", "diffHunk": "@@ -50,13 +49,13 @@ public void testEmptyArray() {\n         assertThat(WriteRequestJsonUtilities.fromJson(3, \"[]\").size(), is(equalTo(0)));\n     }\n \n-    @Test\n+    @Test(expected = IllegalArgumentException.class)", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\nindex 241ec40582..22fa402309 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\n\n@@ -49,13 +50,13 @@ public class WriteRequestJsonUtilitiesTest {\n         assertThat(WriteRequestJsonUtilities.fromJson(3, \"[]\").size(), is(equalTo(0)));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testFC6NoRegister() {\n-        WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n+        assertThrows(IllegalArgumentException.class, () -> WriteRequestJsonUtilities.fromJson(55, \"[{\"//\n                 + \"\\\"functionCode\\\": 6,\"//\n                 + \"\\\"address\\\": 5412,\"//\n                 + \"\\\"value\\\": []\"//\n-                + \"}]\");\n+                + \"}]\"));\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNTMwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511635301", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T19:00:58Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java", "diffHunk": "@@ -25,7 +24,7 @@\n \n import org.eclipse.jdt.annotation.NonNull;\n import org.hamcrest.Matcher;\n-import org.junit.jupiter.api.Test;", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\nindex 241ec40582..22fa402309 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\n\n@@ -24,7 +25,7 @@ import java.util.stream.IntStream;\n \n import org.eclipse.jdt.annotation.NonNull;\n import org.hamcrest.Matcher;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.openhab.io.transport.modbus.ModbusWriteFunctionCode;\n import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n import org.openhab.io.transport.modbus.json.WriteRequestJsonUtilities;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzNTMxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511635311", "bodyText": "revert", "author": "ssalonen", "createdAt": "2020-10-25T19:01:05Z", "path": "bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java", "diffHunk": "@@ -13,9 +13,8 @@\n package org.openhab.io.transport.modbus.test;\n \n import static org.hamcrest.CoreMatchers.*;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.collection.ArrayMatching.arrayContaining;", "originalCommit": "376f2a499fa3ebe72d74cb5cb3ab26c66e54f0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\nindex 241ec40582..22fa402309 100644\n--- a/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\n+++ b/bundles/org.openhab.io.transport.modbus/src/test/java/org/openhab/io/transport/modbus/test/WriteRequestJsonUtilitiesTest.java\n\n@@ -13,8 +13,9 @@\n package org.openhab.io.transport.modbus.test;\n \n import static org.hamcrest.CoreMatchers.*;\n-import static org.hamcrest.collection.IsArrayContainingInOrder.arrayContaining;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.ArrayMatching.arrayContaining;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.openhab.io.transport.modbus.ModbusConstants.*;\n \n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY0MzI2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511643266", "bodyText": "Revert", "author": "ssalonen", "createdAt": "2020-10-25T20:17:11Z", "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java", "diffHunk": "@@ -47,60 +47,80 @@ public void setThingHandler(@Nullable ThingHandler handler) {\n \n     private void triggerSwitch(String variableName) {\n         try {\n-            if (handler != null) {\n-                handler.writeValue(variableName, \"1\");\n+            if (this.handler != null) {\n+                this.handler.writeValue(variableName, \"1\");", "originalCommit": "338e61d0414047d8c81a16bace25c89ddca55fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA0MTIxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r514041211", "bodyText": "These changes were the result of  #8755 and should therefore remain.", "author": "bern77", "createdAt": "2020-10-29T07:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY0MzI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2ODM1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r514068356", "bodyText": "agreed. I meant that this part of the code should not change at all", "author": "ssalonen", "createdAt": "2020-10-29T08:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY0MzI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java b/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java\nindex ffa561ce94..8efc8bb174 100644\n--- a/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java\n+++ b/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java\n\n@@ -47,67 +47,51 @@ public class HeliosEasyControlsActions implements ThingActions {\n \n     private void triggerSwitch(String variableName) {\n         try {\n-            if (this.handler != null) {\n-                this.handler.writeValue(variableName, \"1\");\n+            if (handler != null) {\n+                handler.writeValue(variableName, \"1\");\n             }\n         } catch (HeliosException e) {\n             logger.warn(\"Error executing action 'resetFilterChangeTimer': {}\", e.getMessage());\n         }\n     }\n \n-    @RuleAction(label = \"Reset filter change timer\", description = \"Sets the filter change timer back to the configured interval\")\n+    @RuleAction(label = \"reset filter change timer\", description = \"Sets the filter change timer back to the configured interval.\")\n     public void resetFilterChangeTimer() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.FILTER_CHANGE_RESET);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.FILTER_CHANGE_RESET);\n     }\n \n-    public static void resetFilterChangeTimer(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetFilterChangeTimer();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetFilterChangeTimer(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetFilterChangeTimer();\n     }\n \n-    @RuleAction(label = \"Reset error messages\", description = \"Reset error/warning/info messages\")\n+    @RuleAction(label = \"reset error messages\", description = \"Reset error/warning/info messages.\")\n     public void resetErrors() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.RESET_FLAG);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.RESET_FLAG);\n     }\n \n-    public static void resetErrors(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetErrors();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetErrors(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetErrors();\n     }\n \n-    @RuleAction(label = \"Reset to factory defaults\", description = \"Reset device to factory defaults\")\n+    @RuleAction(label = \"reset to factory defaults\", description = \"Reset device to factory defaults.\")\n     public void resetToFactoryDefaults() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_RESET);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_RESET);\n     }\n \n-    public static void resetToFactoryDefaults(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetToFactoryDefaults();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetToFactoryDefaults(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetToFactoryDefaults();\n     }\n \n-    @RuleAction(label = \"Reset individual switching times\", description = \"Reset individual switching times\")\n+    @RuleAction(label = \"reset individual switching times\", description = \"Reset individual switching times.\")\n     public void resetSwitchingTimes() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_SETTING_WZU);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_SETTING_WZU);\n     }\n \n-    public static void resetSwitchingTimes(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetSwitchingTimes();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetSwitchingTimes(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetSwitchingTimes();\n     }\n \n-    @RuleAction(label = \"Set system date and time\", description = \"Sets the device's system date and time based on OH's system date and time\")\n+    @RuleAction(label = \"set system date and time\", description = \"Sets the device's system date and time based on OH's system date and time.\")\n     public void setSysDateTime() {\n         HeliosEasyControlsHandler handler = this.handler;\n         if (handler != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY0MzI3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511643278", "bodyText": "Revert", "author": "ssalonen", "createdAt": "2020-10-25T20:17:28Z", "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java", "diffHunk": "@@ -47,60 +47,80 @@ public void setThingHandler(@Nullable ThingHandler handler) {\n \n     private void triggerSwitch(String variableName) {\n         try {\n-            if (handler != null) {\n-                handler.writeValue(variableName, \"1\");\n+            if (this.handler != null) {\n+                this.handler.writeValue(variableName, \"1\");\n             }\n         } catch (HeliosException e) {\n             logger.warn(\"Error executing action 'resetFilterChangeTimer': {}\", e.getMessage());\n         }\n     }\n \n-    @RuleAction(label = \"reset filter change timer\", description = \"Sets the filter change timer back to the configured interval.\")\n+    @RuleAction(label = \"Reset filter change timer\", description = \"Sets the filter change timer back to the configured interval\")\n     public void resetFilterChangeTimer() {\n-        triggerSwitch(HeliosEasyControlsBindingConstants.FILTER_CHANGE_RESET);\n+        this.triggerSwitch(HeliosEasyControlsBindingConstants.FILTER_CHANGE_RESET);\n     }\n \n-    public static void resetFilterChangeTimer(ThingActions actions) {\n-        ((HeliosEasyControlsActions) actions).resetFilterChangeTimer();\n+    public static void resetFilterChangeTimer(@Nullable ThingActions actions) {", "originalCommit": "338e61d0414047d8c81a16bace25c89ddca55fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA0MTgwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r514041803", "bodyText": "These changes were the result of  #8755 and should therefore remain.", "author": "bern77", "createdAt": "2020-10-29T07:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY0MzI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java b/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java\nindex ffa561ce94..8efc8bb174 100644\n--- a/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java\n+++ b/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java\n\n@@ -47,67 +47,51 @@ public class HeliosEasyControlsActions implements ThingActions {\n \n     private void triggerSwitch(String variableName) {\n         try {\n-            if (this.handler != null) {\n-                this.handler.writeValue(variableName, \"1\");\n+            if (handler != null) {\n+                handler.writeValue(variableName, \"1\");\n             }\n         } catch (HeliosException e) {\n             logger.warn(\"Error executing action 'resetFilterChangeTimer': {}\", e.getMessage());\n         }\n     }\n \n-    @RuleAction(label = \"Reset filter change timer\", description = \"Sets the filter change timer back to the configured interval\")\n+    @RuleAction(label = \"reset filter change timer\", description = \"Sets the filter change timer back to the configured interval.\")\n     public void resetFilterChangeTimer() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.FILTER_CHANGE_RESET);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.FILTER_CHANGE_RESET);\n     }\n \n-    public static void resetFilterChangeTimer(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetFilterChangeTimer();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetFilterChangeTimer(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetFilterChangeTimer();\n     }\n \n-    @RuleAction(label = \"Reset error messages\", description = \"Reset error/warning/info messages\")\n+    @RuleAction(label = \"reset error messages\", description = \"Reset error/warning/info messages.\")\n     public void resetErrors() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.RESET_FLAG);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.RESET_FLAG);\n     }\n \n-    public static void resetErrors(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetErrors();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetErrors(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetErrors();\n     }\n \n-    @RuleAction(label = \"Reset to factory defaults\", description = \"Reset device to factory defaults\")\n+    @RuleAction(label = \"reset to factory defaults\", description = \"Reset device to factory defaults.\")\n     public void resetToFactoryDefaults() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_RESET);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_RESET);\n     }\n \n-    public static void resetToFactoryDefaults(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetToFactoryDefaults();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetToFactoryDefaults(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetToFactoryDefaults();\n     }\n \n-    @RuleAction(label = \"Reset individual switching times\", description = \"Reset individual switching times\")\n+    @RuleAction(label = \"reset individual switching times\", description = \"Reset individual switching times.\")\n     public void resetSwitchingTimes() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_SETTING_WZU);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_SETTING_WZU);\n     }\n \n-    public static void resetSwitchingTimes(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetSwitchingTimes();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetSwitchingTimes(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetSwitchingTimes();\n     }\n \n-    @RuleAction(label = \"Set system date and time\", description = \"Sets the device's system date and time based on OH's system date and time\")\n+    @RuleAction(label = \"set system date and time\", description = \"Sets the device's system date and time based on OH's system date and time.\")\n     public void setSysDateTime() {\n         HeliosEasyControlsHandler handler = this.handler;\n         if (handler != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY0MzI4MA==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511643280", "bodyText": "Revert", "author": "ssalonen", "createdAt": "2020-10-25T20:17:34Z", "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java", "diffHunk": "@@ -47,60 +47,80 @@ public void setThingHandler(@Nullable ThingHandler handler) {\n \n     private void triggerSwitch(String variableName) {\n         try {\n-            if (handler != null) {\n-                handler.writeValue(variableName, \"1\");\n+            if (this.handler != null) {\n+                this.handler.writeValue(variableName, \"1\");\n             }\n         } catch (HeliosException e) {\n             logger.warn(\"Error executing action 'resetFilterChangeTimer': {}\", e.getMessage());\n         }\n     }\n \n-    @RuleAction(label = \"reset filter change timer\", description = \"Sets the filter change timer back to the configured interval.\")\n+    @RuleAction(label = \"Reset filter change timer\", description = \"Sets the filter change timer back to the configured interval\")\n     public void resetFilterChangeTimer() {\n-        triggerSwitch(HeliosEasyControlsBindingConstants.FILTER_CHANGE_RESET);\n+        this.triggerSwitch(HeliosEasyControlsBindingConstants.FILTER_CHANGE_RESET);", "originalCommit": "338e61d0414047d8c81a16bace25c89ddca55fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA0MTkyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r514041923", "bodyText": "These changes were the result of  #8755 and should therefore remain.", "author": "bern77", "createdAt": "2020-10-29T07:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY0MzI4MA=="}], "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java b/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java\nindex ffa561ce94..8efc8bb174 100644\n--- a/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java\n+++ b/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java\n\n@@ -47,67 +47,51 @@ public class HeliosEasyControlsActions implements ThingActions {\n \n     private void triggerSwitch(String variableName) {\n         try {\n-            if (this.handler != null) {\n-                this.handler.writeValue(variableName, \"1\");\n+            if (handler != null) {\n+                handler.writeValue(variableName, \"1\");\n             }\n         } catch (HeliosException e) {\n             logger.warn(\"Error executing action 'resetFilterChangeTimer': {}\", e.getMessage());\n         }\n     }\n \n-    @RuleAction(label = \"Reset filter change timer\", description = \"Sets the filter change timer back to the configured interval\")\n+    @RuleAction(label = \"reset filter change timer\", description = \"Sets the filter change timer back to the configured interval.\")\n     public void resetFilterChangeTimer() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.FILTER_CHANGE_RESET);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.FILTER_CHANGE_RESET);\n     }\n \n-    public static void resetFilterChangeTimer(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetFilterChangeTimer();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetFilterChangeTimer(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetFilterChangeTimer();\n     }\n \n-    @RuleAction(label = \"Reset error messages\", description = \"Reset error/warning/info messages\")\n+    @RuleAction(label = \"reset error messages\", description = \"Reset error/warning/info messages.\")\n     public void resetErrors() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.RESET_FLAG);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.RESET_FLAG);\n     }\n \n-    public static void resetErrors(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetErrors();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetErrors(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetErrors();\n     }\n \n-    @RuleAction(label = \"Reset to factory defaults\", description = \"Reset device to factory defaults\")\n+    @RuleAction(label = \"reset to factory defaults\", description = \"Reset device to factory defaults.\")\n     public void resetToFactoryDefaults() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_RESET);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_RESET);\n     }\n \n-    public static void resetToFactoryDefaults(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetToFactoryDefaults();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetToFactoryDefaults(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetToFactoryDefaults();\n     }\n \n-    @RuleAction(label = \"Reset individual switching times\", description = \"Reset individual switching times\")\n+    @RuleAction(label = \"reset individual switching times\", description = \"Reset individual switching times.\")\n     public void resetSwitchingTimes() {\n-        this.triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_SETTING_WZU);\n+        triggerSwitch(HeliosEasyControlsBindingConstants.FACTORY_SETTING_WZU);\n     }\n \n-    public static void resetSwitchingTimes(@Nullable ThingActions actions) {\n-        if (actions instanceof HeliosEasyControlsActions) {\n-            ((HeliosEasyControlsActions) actions).resetSwitchingTimes();\n-        } else {\n-            throw new IllegalArgumentException(\"Instance is not an HeliosEasyControlsActions class.\");\n-        }\n+    public static void resetSwitchingTimes(ThingActions actions) {\n+        ((HeliosEasyControlsActions) actions).resetSwitchingTimes();\n     }\n \n-    @RuleAction(label = \"Set system date and time\", description = \"Sets the device's system date and time based on OH's system date and time\")\n+    @RuleAction(label = \"set system date and time\", description = \"Sets the device's system date and time based on OH's system date and time.\")\n     public void setSysDateTime() {\n         HeliosEasyControlsHandler handler = this.handler;\n         if (handler != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY0MzQxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r511643417", "bodyText": "Revert", "author": "ssalonen", "createdAt": "2020-10-25T20:19:03Z", "path": "bundles/org.openhab.binding.modbus.sunspec/src/main/java/org/openhab/binding/modbus/sunspec/internal/discovery/SunspecDiscoveryParticipant.java", "diffHunk": "@@ -33,7 +33,7 @@\n  * @author Nagy Attila Gabor - initial contribution\n  *\n  */\n-@Component\n+@Component(immediate = true)", "originalCommit": "338e61d0414047d8c81a16bace25c89ddca55fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db68bada556c2fb5619098ba8b481a420a3c459", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.sunspec/src/main/java/org/openhab/binding/modbus/sunspec/internal/discovery/SunspecDiscoveryParticipant.java b/bundles/org.openhab.binding.modbus.sunspec/src/main/java/org/openhab/binding/modbus/sunspec/internal/discovery/SunspecDiscoveryParticipant.java\nindex 708f395ec9..3fc3a57eb5 100644\n--- a/bundles/org.openhab.binding.modbus.sunspec/src/main/java/org/openhab/binding/modbus/sunspec/internal/discovery/SunspecDiscoveryParticipant.java\n+++ b/bundles/org.openhab.binding.modbus.sunspec/src/main/java/org/openhab/binding/modbus/sunspec/internal/discovery/SunspecDiscoveryParticipant.java\n\n@@ -33,7 +33,7 @@ import org.slf4j.LoggerFactory;\n  * @author Nagy Attila Gabor - initial contribution\n  *\n  */\n-@Component(immediate = true)\n+@Component\n @NonNullByDefault\n public class SunspecDiscoveryParticipant implements ModbusDiscoveryParticipant {\n \n"}}, {"oid": "8db68bada556c2fb5619098ba8b481a420a3c459", "url": "https://github.com/openhab/openhab-addons/commit/8db68bada556c2fb5619098ba8b481a420a3c459", "message": "[modbus.sunspec] Simplifications\n\nNow extractStringFromRegisters returns String, not StringType\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-02T18:35:58Z", "type": "forcePushed"}, {"oid": "0420f601eb059c24a1681e5d7c841d4041093b7b", "url": "https://github.com/openhab/openhab-addons/commit/0420f601eb059c24a1681e5d7c841d4041093b7b", "message": "[modbus.sunspec] Simplifications\n\nNow extractStringFromRegisters returns String, not StringType\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-02T18:49:28Z", "type": "forcePushed"}, {"oid": "cb2d241b90fb65e20192956fffe275f26b5e9a79", "url": "https://github.com/openhab/openhab-addons/commit/cb2d241b90fb65e20192956fffe275f26b5e9a79", "message": "[modbus.sunspec] Simplifications\n\nNow extractStringFromRegisters returns String, not StringType\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-02T19:00:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyMjg4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r520122886", "bodyText": "This test not needed anymore?", "author": "cpmeister", "createdAt": "2020-11-09T21:12:10Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/test/java/org/openhab/binding/modbus/e3dc/util/DataConverterTest.java", "diffHunk": "@@ -30,17 +30,58 @@\n public class DataConverterTest {\n \n     @Test\n-    public void testE3DCSwapValueNegative() {\n-        // Reg 69 value 65098 bytes [-2, 74]\n-        // Reg 70 value 65535 bytes [-1, -1]\n-        byte[] b = new byte[] { -2, -74, -1, -1 };\n-        assertEquals(-330, DataConverter.getInt32Swap(ByteBuffer.wrap(b)), \"Negative Value\");", "originalCommit": "87392b695e8de84e8ca2bb3bbcdf47d7e5068270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzgwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r520293806", "bodyText": "Correct. Method under test no longer exist. It was in fact a more convoluted implementation of a conversion that exists in transport module.\nWhile this test has been added, you should be able to find the same \"byte sequence\", representing negative value, tested in a new test introduced in data block test.", "author": "ssalonen", "createdAt": "2020-11-10T05:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyMjg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "95c3f3d6b9e1317faa247bafea40689f0bb1e1a7", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/test/java/org/openhab/binding/modbus/e3dc/util/DataConverterTest.java b/bundles/org.openhab.binding.modbus.e3dc/src/test/java/org/openhab/binding/modbus/e3dc/util/DataConverterTest.java\nindex bef20dc55c..bac8734812 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/test/java/org/openhab/binding/modbus/e3dc/util/DataConverterTest.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/test/java/org/openhab/binding/modbus/e3dc/util/DataConverterTest.java\n\n@@ -30,58 +30,17 @@ import org.openhab.io.transport.modbus.ValueBuffer;\n public class DataConverterTest {\n \n     @Test\n-    public void testRoundPositive() {\n-        assertEquals(2.3, DataConverter.round(2.34, 1), 0.01);\n+    public void testE3DCSwapValueNegative() {\n+        // Reg 69 value 65098 bytes [-2, 74]\n+        // Reg 70 value 65535 bytes [-1, -1]\n+        byte[] b = new byte[] { -2, -74, -1, -1 };\n+        assertEquals(-330, DataConverter.getInt32Swap(ByteBuffer.wrap(b)), \"Negative Value\");\n     }\n \n     @Test\n-    public void testRoundPositive2() {\n-        assertEquals(2.4, DataConverter.round(2.37, 1), 0.01);\n-    }\n-\n-    @Test\n-    public void testRoundPositive3() {\n-        assertEquals(2.4, DataConverter.round(2.35, 1), 0.01);\n-    }\n-\n-    @Test\n-    public void testRoundNegative() {\n-        assertEquals(-2.3, DataConverter.round(-2.34, 1), 0.01);\n-    }\n-\n-    @Test\n-    public void testRoundNegative2() {\n-        assertEquals(-2.4, DataConverter.round(-2.37, 1), 0.01);\n-    }\n-\n-    @Test\n-    public void testRoundNegative3() {\n-        // rounding towards positive infinity. Note difference to testRoundPositive3\n-        assertEquals(-2.3, DataConverter.round(-2.35, 1), 0.01);\n-    }\n-\n-    @Test\n-    public void testUDoubleValue() {\n-        assertEquals(0.5, DataConverter.getUDoubleValue(ValueBuffer.wrap(new byte[] { 0, 5 }), 0.1), 0.01);\n-    }\n-\n-    @Test\n-    public void testUDoubleValue2() {\n-        assertEquals(6159.9,\n-                DataConverter.getUDoubleValue(ValueBuffer.wrap(new byte[] { (byte) 0xf0, (byte) 0x9f }), 0.1), 0.01);\n-    }\n-\n-    @Test\n-    public void testUDoubleValue3() {\n-        assertEquals(123198,\n-                DataConverter.getUDoubleValue(ValueBuffer.wrap(new byte[] { (byte) 0xf0, (byte) 0x9f }), 2), 0.01);\n-    }\n-\n-    @Test\n-    public void testBitsetToInt() {\n+    public void testBitset() {\n         byte[] b = new byte[] { 3, 16 };\n         BitSet s = BitSet.valueOf(b);\n-        // Bit0 is the least significant bit to DataConverter.toInt\n         assertEquals(true, s.get(0), \"Bit0\");\n         assertEquals(true, s.get(1), \"Bit1\");\n         assertEquals(false, s.get(2), \"Bit2\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNDE2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r520124162", "bodyText": "are these throws necessary?", "author": "cpmeister", "createdAt": "2020-11-09T21:14:42Z", "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/test/java/org/openhab/binding/modbus/helioseasycontrols/internal/PreparePayloadTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+\n+/**\n+ * @author Sami Salonen - Initial contribution\n+ */\n+public class PreparePayloadTest {\n+\n+    private Method preparePayloadMethod;\n+\n+    public PreparePayloadTest() throws NoSuchMethodException, SecurityException {\n+        preparePayloadMethod = HeliosEasyControlsHandler.class.getDeclaredMethod(\"preparePayload\", String.class);\n+        preparePayloadMethod.setAccessible(true);\n+    }\n+\n+    private ModbusRegisterArray preparePayload(String payload) {\n+        try {\n+            return (ModbusRegisterArray) preparePayloadMethod.invoke(null, payload);\n+        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+            fail(\"Reflection failure:\" + e.getMessage());\n+            throw new RuntimeException(); // to make compiler happy\n+        }\n+    }\n+\n+    public static Collection<Object[]> data() {\n+        return Collections.unmodifiableList(Stream\n+                // Due to nul byte, full register full of nul bytes added\n+                .of(new Object[] { \"v00020=a\", new ModbusRegisterArray(0x7630, 0x3030, 0x3230, 0x3d61, 0x0000) },\n+                        new Object[] { \"v00020=aa\", new ModbusRegisterArray(0x7630, 0x3030, 0x3230, 0x3d61, 0x6100) })\n+                .collect(Collectors.toList()));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testPreparePayload(String payload, ModbusRegisterArray expectedRegisters)\n+            throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {", "originalCommit": "87392b695e8de84e8ca2bb3bbcdf47d7e5068270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NDEzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r520294137", "bodyText": "These are from the reflection, so I believe they are? Alternatively I could try catch and fail/throw unchecked exception", "author": "ssalonen", "createdAt": "2020-11-10T05:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNDE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkzNzIyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r523937227", "bodyText": "The checked exceptions IllegalAccessException and InvocationTargetException are never thrown. So they could be removed. Specifying an unchecked exception like IllegalArgumentException has no effect in tests, AFAIK. So, that could be removed, too.", "author": "fwolter", "createdAt": "2020-11-16T07:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNDE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMjA1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r528922056", "bodyText": "Resolved in e43bdc6", "author": "ssalonen", "createdAt": "2020-11-23T18:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNDE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "95c3f3d6b9e1317faa247bafea40689f0bb1e1a7", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.helioseasycontrols/src/test/java/org/openhab/binding/modbus/helioseasycontrols/internal/PreparePayloadTest.java b/bundles/org.openhab.binding.modbus.helioseasycontrols/src/test/java/org/openhab/binding/modbus/helioseasycontrols/internal/PreparePayloadTest.java\ndeleted file mode 100644\nindex 012f4f201a..0000000000\n--- a/bundles/org.openhab.binding.modbus.helioseasycontrols/src/test/java/org/openhab/binding/modbus/helioseasycontrols/internal/PreparePayloadTest.java\n+++ /dev/null\n\n@@ -1,60 +0,0 @@\n-package org.openhab.binding.modbus.helioseasycontrols.internal;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.MethodSource;\n-import org.openhab.io.transport.modbus.ModbusRegisterArray;\n-\n-/**\n- * @author Sami Salonen - Initial contribution\n- */\n-public class PreparePayloadTest {\n-\n-    private Method preparePayloadMethod;\n-\n-    public PreparePayloadTest() throws NoSuchMethodException, SecurityException {\n-        preparePayloadMethod = HeliosEasyControlsHandler.class.getDeclaredMethod(\"preparePayload\", String.class);\n-        preparePayloadMethod.setAccessible(true);\n-    }\n-\n-    private ModbusRegisterArray preparePayload(String payload) {\n-        try {\n-            return (ModbusRegisterArray) preparePayloadMethod.invoke(null, payload);\n-        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n-            fail(\"Reflection failure:\" + e.getMessage());\n-            throw new RuntimeException(); // to make compiler happy\n-        }\n-    }\n-\n-    public static Collection<Object[]> data() {\n-        return Collections.unmodifiableList(Stream\n-                // Due to nul byte, full register full of nul bytes added\n-                .of(new Object[] { \"v00020=a\", new ModbusRegisterArray(0x7630, 0x3030, 0x3230, 0x3d61, 0x0000) },\n-                        new Object[] { \"v00020=aa\", new ModbusRegisterArray(0x7630, 0x3030, 0x3230, 0x3d61, 0x6100) })\n-                .collect(Collectors.toList()));\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource(\"data\")\n-    public void testPreparePayload(String payload, ModbusRegisterArray expectedRegisters)\n-            throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n-        ModbusRegisterArray actual = preparePayload(payload);\n-\n-        assertEquals(actual.size(), expectedRegisters.size(), String.format(\"payload=%s\", payload));\n-        for (int i = 0; i < expectedRegisters.size(); i++) {\n-            int expectedRegisterDataUnsigned = expectedRegisters.getRegister(i);\n-            int actualUnsigned = actual.getRegister(i);\n-\n-            assertEquals(actualUnsigned, expectedRegisterDataUnsigned,\n-                    String.format(\"register index i=%d, payload=%s\", i, payload));\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzNDg0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r520134843", "bodyText": "Are these equivalent?", "author": "cpmeister", "createdAt": "2020-11-09T21:34:42Z", "path": "bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/Parser.java", "diffHunk": "@@ -59,17 +58,10 @@ public Parser(DataType type) {\n     }\n \n     public void handle(AsyncModbusReadResult result) {\n-        byte[] newArray = new byte[size];\n         long startTime = System.currentTimeMillis();\n         Optional<ModbusRegisterArray> opt = result.getRegisters();\n         if (opt.isPresent()) {\n-            ModbusRegisterArray registers = opt.get();\n-            int i = 0;\n-            for (ModbusRegister reg : registers) {\n-                System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n-                i += 2;\n-            }\n-            setArray(newArray);\n+            setArray(opt.get().getBytes());", "originalCommit": "87392b695e8de84e8ca2bb3bbcdf47d7e5068270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5ODY1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8865#discussion_r520298652", "bodyText": "Yes, that should be equivalent. Tests should further give confirmation on this.\nPreviously it was hard to get raw bytes \"abstracted\" by ModbusRegisterArray and this type of copying of bytes was needed.\nA bit of modbus terminology: register means 16 bit (big endian) word returned by the modbus device. You could consider modbus being a remotely accessible memory, memory locations represented by register addresses.\nOften in these bindings the register data is converted to 16/32 bit integers and floats, that we give meaning to that raw data.", "author": "ssalonen", "createdAt": "2020-11-10T05:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzNDg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "95c3f3d6b9e1317faa247bafea40689f0bb1e1a7", "chunk": "diff --git a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/Parser.java b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/Parser.java\nindex 645f67686f..e1524f44c4 100644\n--- a/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/Parser.java\n+++ b/bundles/org.openhab.binding.modbus.e3dc/src/main/java/org/openhab/binding/modbus/e3dc/internal/modbus/Parser.java\n\n@@ -58,10 +59,17 @@ public class Parser {\n     }\n \n     public void handle(AsyncModbusReadResult result) {\n+        byte[] newArray = new byte[size];\n         long startTime = System.currentTimeMillis();\n         Optional<ModbusRegisterArray> opt = result.getRegisters();\n         if (opt.isPresent()) {\n-            setArray(opt.get().getBytes());\n+            ModbusRegisterArray registers = opt.get();\n+            int i = 0;\n+            for (ModbusRegister reg : registers) {\n+                System.arraycopy(reg.getBytes(), 0, newArray, i, 2);\n+                i += 2;\n+            }\n+            setArray(newArray);\n \n             long duration = System.currentTimeMillis() - startTime;\n             avgDuration += duration;\n"}}, {"oid": "95c3f3d6b9e1317faa247bafea40689f0bb1e1a7", "url": "https://github.com/openhab/openhab-addons/commit/95c3f3d6b9e1317faa247bafea40689f0bb1e1a7", "message": "[modbus] Back register arrays directly by bytes\n\nIn addition, bring specialized value extraction methods and\nByteBuffer-like interface to work with data\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-24T05:50:12Z", "type": "commit"}, {"oid": "6322480f3cdc3a264baff2ac6b278df17f2039b8", "url": "https://github.com/openhab/openhab-addons/commit/6322480f3cdc3a264baff2ac6b278df17f2039b8", "message": "[modbus.e3dc] Simplify data extraction using utilities from transport\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-24T05:50:12Z", "type": "commit"}, {"oid": "c0fb454cf4c3007f86e4a7749bbad72cb0b2806c", "url": "https://github.com/openhab/openhab-addons/commit/c0fb454cf4c3007f86e4a7749bbad72cb0b2806c", "message": "[modbus.helioseasycontrols] Simplify data extraction using utilities\n\n...from transport\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-24T05:50:12Z", "type": "commit"}, {"oid": "5d404484e030aeb8862da50b526c222959469b61", "url": "https://github.com/openhab/openhab-addons/commit/5d404484e030aeb8862da50b526c222959469b61", "message": "[modbus.stiebeleltron] Accomodate to new API\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-24T05:50:13Z", "type": "commit"}, {"oid": "1ec4223cdf9f82c083a10c17ca2784ad443bc0dd", "url": "https://github.com/openhab/openhab-addons/commit/1ec4223cdf9f82c083a10c17ca2784ad443bc0dd", "message": "[modbus.studer] Simplify data extraction using utilities from transport\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-24T05:50:13Z", "type": "commit"}, {"oid": "cfe09d0d9a81a8ee8479948f1d382b2e00e2b0ef", "url": "https://github.com/openhab/openhab-addons/commit/cfe09d0d9a81a8ee8479948f1d382b2e00e2b0ef", "message": "[modbus.sunspec] Simplifications\n\nNow extractStringFromRegisters returns String, not StringType\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-24T05:50:13Z", "type": "commit"}, {"oid": "c6fbbbdd902a2dd35d6cb0bb3127d05a555d14be", "url": "https://github.com/openhab/openhab-addons/commit/c6fbbbdd902a2dd35d6cb0bb3127d05a555d14be", "message": "[modbus] spotless:apply\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-24T05:50:13Z", "type": "commit"}, {"oid": "5466780dbd0fb3b70cbd46cf4e8c0dadb881235d", "url": "https://github.com/openhab/openhab-addons/commit/5466780dbd0fb3b70cbd46cf4e8c0dadb881235d", "message": "[modbus] fix import (accidentally using org.bouncycastle.util.Arrays)\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-24T05:50:13Z", "type": "commit"}, {"oid": "fd5b895767da292e64222d9459b7e75d39d932c3", "url": "https://github.com/openhab/openhab-addons/commit/fd5b895767da292e64222d9459b7e75d39d932c3", "message": "[modbus.helioseasycontrols] Remove unnecessary throws in test method\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-24T05:50:13Z", "type": "commit"}, {"oid": "fd5b895767da292e64222d9459b7e75d39d932c3", "url": "https://github.com/openhab/openhab-addons/commit/fd5b895767da292e64222d9459b7e75d39d932c3", "message": "[modbus.helioseasycontrols] Remove unnecessary throws in test method\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-24T05:50:13Z", "type": "forcePushed"}, {"oid": "2dbaa39733f1913fa0551f5e684d9422c5006bb7", "url": "https://github.com/openhab/openhab-addons/commit/2dbaa39733f1913fa0551f5e684d9422c5006bb7", "message": "[modbus.e3dc] tests fixed (new JUnit assertEquals parameter order)\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-26T16:21:26Z", "type": "commit"}, {"oid": "a599a01a730ce064b81d97afd1bd1b0bdd0debad", "url": "https://github.com/openhab/openhab-addons/commit/a599a01a730ce064b81d97afd1bd1b0bdd0debad", "message": "[modbus.helioseasycontrols] Test fixed\n\n- Copyright notice added\n- assertEquals parameter order fixed\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>", "committedDate": "2020-11-26T16:21:58Z", "type": "commit"}]}