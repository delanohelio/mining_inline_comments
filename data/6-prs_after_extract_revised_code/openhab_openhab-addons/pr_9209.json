{"pr_number": 9209, "pr_title": "[fronius] Add support for Fronius Smart Meter", "pr_createdAt": "2020-12-03T12:40:20Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9209", "timeline": [{"oid": "f615d5b7358965fcaa219f55320e9d3ed5b48808", "url": "https://github.com/openhab/openhab-addons/commit/f615d5b7358965fcaa219f55320e9d3ed5b48808", "message": "[fronius] Add support for Fronius Smart Meter\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>", "committedDate": "2020-12-03T12:37:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4MDcxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9209#discussion_r538680715", "bodyText": "You could move this into a package called dto or append DTO to the class name to get rid of the checkstyle warning about missing NonNullByDefault annotation.", "author": "fwolter", "createdAt": "2020-12-08T18:12:09Z", "path": "bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/api/MeterRealtimeBody.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.fronius.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link MeterRealtimeBody} is responsible for storing\n+ * the \"body\" node of the JSON response\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+public class MeterRealtimeBody {", "originalCommit": "f615d5b7358965fcaa219f55320e9d3ed5b48808", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgxODMwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9209#discussion_r545818302", "bodyText": "done", "author": "jimtng", "createdAt": "2020-12-18T13:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4MDcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc1cbbe9fcdb0094014857fa4a8a981beff9a6dc", "chunk": "diff --git a/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/api/MeterRealtimeBody.java b/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/api/MeterRealtimeBodyDTO.java\nsimilarity index 72%\nrename from bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/api/MeterRealtimeBody.java\nrename to bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/api/MeterRealtimeBodyDTO.java\nindex ce24b0a211..a61476b826 100644\n--- a/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/api/MeterRealtimeBody.java\n+++ b/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/api/MeterRealtimeBodyDTO.java\n\n@@ -20,15 +20,18 @@ import com.google.gson.annotations.SerializedName;\n  *\n  * @author Jimmy Tanagra - Initial contribution\n  */\n-public class MeterRealtimeBody {\n+public class MeterRealtimeBodyDTO {\n     @SerializedName(\"Data\")\n-    private MeterRealtimeBodyData data;\n+    private MeterRealtimeBodyDataDTO data;\n \n-    public MeterRealtimeBodyData getData() {\n+    public MeterRealtimeBodyDataDTO getData() {\n+        if (data == null) {\n+            data = new MeterRealtimeBodyDataDTO();\n+        }\n         return data;\n     }\n \n-    public void setData(MeterRealtimeBodyData data) {\n+    public void setData(MeterRealtimeBodyDataDTO data) {\n         this.data = data;\n     }\n }\n"}}, {"oid": "f922dc354141039c12bda58cb03f0889607add09", "url": "https://github.com/openhab/openhab-addons/commit/f922dc354141039c12bda58cb03f0889607add09", "message": "Merge branch 'main' of https://github.com/openhab/openhab-addons into fronius-smart-meter", "committedDate": "2020-12-17T13:05:21Z", "type": "commit"}, {"oid": "cc1cbbe9fcdb0094014857fa4a8a981beff9a6dc", "url": "https://github.com/openhab/openhab-addons/commit/cc1cbbe9fcdb0094014857fa4a8a981beff9a6dc", "message": "[fronius] Use DTO, implement UoM\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>", "committedDate": "2020-12-18T13:02:51Z", "type": "commit"}, {"oid": "5baf6350439b875569f8d6740589c7d414d38501", "url": "https://github.com/openhab/openhab-addons/commit/5baf6350439b875569f8d6740589c7d414d38501", "message": "[fronius] fix README.md\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>", "committedDate": "2020-12-20T12:05:13Z", "type": "commit"}, {"oid": "13f72adf59061965b3ab503cd282ddd4c3060bb3", "url": "https://github.com/openhab/openhab-addons/commit/13f72adf59061965b3ab503cd282ddd4c3060bb3", "message": "[fronius] Add mandatory label for channel-type and fix property update\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>", "committedDate": "2020-12-21T10:48:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzNzUzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9209#discussion_r548337535", "bodyText": "Shouldn't you fill out the errorMsg here?", "author": "cpmeister", "createdAt": "2020-12-24T01:05:24Z", "path": "bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusBaseThingHandler.java", "diffHunk": "@@ -149,4 +165,52 @@ protected void updateChannel(String channelId) {\n      * @param bridgeConfiguration the connected bridge configuration\n      */\n     public abstract void refresh(FroniusBridgeConfiguration bridgeConfiguration);\n+\n+    /**\n+     *\n+     * @param type response class type\n+     * @param url to request\n+     * @return the object representation of the json response\n+     */\n+    protected <T extends BaseFroniusResponse> T collectDataFormUrl(Class<T> type, String url) {\n+        T result = null;\n+        boolean resultOk = false;\n+        String errorMsg = null;\n+\n+        try {\n+            logger.debug(\"URL = {}\", url);\n+            String response = HttpUtil.executeUrl(\"GET\", url, API_TIMEOUT);\n+\n+            if (response != null) {\n+                logger.debug(\"aqiResponse = {}\", response);\n+                result = gson.fromJson(response, type);\n+            }\n+\n+            if (result == null) {\n+                errorMsg = \"no data returned\";\n+            } else {\n+                if (result.getHead().getStatus().getCode() == 0) {\n+                    resultOk = true;\n+                } else {\n+                    errorMsg = result.getHead().getStatus().getReason();\n+                }\n+            }\n+            if (!resultOk) {\n+                logger.debug(\"Error in fronius response: {}\", errorMsg);\n+            }\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = \"Configuration is incorrect\";\n+            logger.debug(\"Error running fronius request: {}\", errorMsg);\n+        } catch (IOException | IllegalStateException e) {\n+            logger.debug(\"Error running fronius request: {}\", e.getMessage());\n+        }", "originalCommit": "13f72adf59061965b3ab503cd282ddd4c3060bb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTI5NA==", "url": "https://github.com/openhab/openhab-addons/pull/9209#discussion_r548419294", "bodyText": "This was original code, just moved to this class. Nevertheless, good catch. I have assigned e.getMessage() to errorMsg.", "author": "jimtng", "createdAt": "2020-12-24T06:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzNzUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7e0f600ef3b3f9e39e20d7bae2690d515a4cc7af", "chunk": "diff --git a/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusBaseThingHandler.java b/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusBaseThingHandler.java\nindex ad83ce7c80..add6097c0a 100644\n--- a/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusBaseThingHandler.java\n+++ b/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusBaseThingHandler.java\n\n@@ -199,10 +199,11 @@ public abstract class FroniusBaseThingHandler extends BaseThingHandler {\n                 logger.debug(\"Error in fronius response: {}\", errorMsg);\n             }\n         } catch (JsonSyntaxException e) {\n-            errorMsg = \"Configuration is incorrect\";\n+            errorMsg = \"Invalid JSON data received\";\n             logger.debug(\"Error running fronius request: {}\", errorMsg);\n         } catch (IOException | IllegalStateException e) {\n-            logger.debug(\"Error running fronius request: {}\", e.getMessage());\n+            errorMsg = e.getMessage();\n+            logger.debug(\"Error running fronius request: {}\", errorMsg);\n         }\n \n         // Update the thing status\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzODA5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9209#discussion_r548338095", "bodyText": "Please cache meterRealtimeResponse.getBody().getData() to a local variable and use it instead of calling it a million times.", "author": "cpmeister", "createdAt": "2020-12-24T01:08:03Z", "path": "bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusMeterHandler.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.fronius.internal.handler;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.openhab.binding.fronius.internal.FroniusBaseDeviceConfiguration;\n+import org.openhab.binding.fronius.internal.FroniusBindingConstants;\n+import org.openhab.binding.fronius.internal.FroniusBridgeConfiguration;\n+import org.openhab.binding.fronius.internal.api.MeterRealtimeResponseDTO;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Thing;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link FroniusMeterHandler} is responsible for updating the data, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+public class FroniusMeterHandler extends FroniusBaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FroniusMeterHandler.class);\n+    private MeterRealtimeResponseDTO meterRealtimeResponse;\n+    private FroniusBaseDeviceConfiguration config;\n+\n+    public FroniusMeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"Fronius Smart Meter\";\n+    }\n+\n+    @Override\n+    public void refresh(FroniusBridgeConfiguration bridgeConfiguration) {\n+        updateData(bridgeConfiguration, config);\n+        updateChannels();\n+        updateProperties();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(FroniusBaseDeviceConfiguration.class);\n+        super.initialize();\n+    }\n+\n+    /**\n+     * Update the channel from the last data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     * @return the last retrieved data\n+     */\n+    @Override\n+    protected Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        String fieldName = fields[0];\n+\n+        if (meterRealtimeResponse == null) {\n+            return null;\n+        }\n+        switch (fieldName) {\n+            case FroniusBindingConstants.MeterEnable:\n+                return meterRealtimeResponse.getBody().getData().getEnable();", "originalCommit": "13f72adf59061965b3ab503cd282ddd4c3060bb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTAzNw==", "url": "https://github.com/openhab/openhab-addons/pull/9209#discussion_r548419037", "bodyText": "changed as suggested", "author": "jimtng", "createdAt": "2020-12-24T06:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzODA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7e0f600ef3b3f9e39e20d7bae2690d515a4cc7af", "chunk": "diff --git a/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusMeterHandler.java b/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusMeterHandler.java\nindex 0b12fb21fe..f28ae23075 100644\n--- a/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusMeterHandler.java\n+++ b/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusMeterHandler.java\n\n@@ -18,6 +18,7 @@ import org.apache.commons.lang.StringUtils;\n import org.openhab.binding.fronius.internal.FroniusBaseDeviceConfiguration;\n import org.openhab.binding.fronius.internal.FroniusBindingConstants;\n import org.openhab.binding.fronius.internal.FroniusBridgeConfiguration;\n+import org.openhab.binding.fronius.internal.api.MeterRealtimeBodyDataDTO;\n import org.openhab.binding.fronius.internal.api.MeterRealtimeResponseDTO;\n import org.openhab.core.library.types.QuantityType;\n import org.openhab.core.library.unit.Units;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzODI5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9209#discussion_r548338297", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, String> properties = editProperties();\n          \n          \n            \n            \n          \n          \n            \n                    if (meterRealtimeResponse == null) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (meterRealtimeResponse == null) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    Map<String, String> properties = editProperties();", "author": "cpmeister", "createdAt": "2020-12-24T01:08:55Z", "path": "bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusMeterHandler.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.fronius.internal.handler;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.openhab.binding.fronius.internal.FroniusBaseDeviceConfiguration;\n+import org.openhab.binding.fronius.internal.FroniusBindingConstants;\n+import org.openhab.binding.fronius.internal.FroniusBridgeConfiguration;\n+import org.openhab.binding.fronius.internal.api.MeterRealtimeResponseDTO;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Thing;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link FroniusMeterHandler} is responsible for updating the data, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+public class FroniusMeterHandler extends FroniusBaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FroniusMeterHandler.class);\n+    private MeterRealtimeResponseDTO meterRealtimeResponse;\n+    private FroniusBaseDeviceConfiguration config;\n+\n+    public FroniusMeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"Fronius Smart Meter\";\n+    }\n+\n+    @Override\n+    public void refresh(FroniusBridgeConfiguration bridgeConfiguration) {\n+        updateData(bridgeConfiguration, config);\n+        updateChannels();\n+        updateProperties();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(FroniusBaseDeviceConfiguration.class);\n+        super.initialize();\n+    }\n+\n+    /**\n+     * Update the channel from the last data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     * @return the last retrieved data\n+     */\n+    @Override\n+    protected Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        String fieldName = fields[0];\n+\n+        if (meterRealtimeResponse == null) {\n+            return null;\n+        }\n+        switch (fieldName) {\n+            case FroniusBindingConstants.MeterEnable:\n+                return meterRealtimeResponse.getBody().getData().getEnable();\n+            case FroniusBindingConstants.MeterLocation:\n+                return meterRealtimeResponse.getBody().getData().getMeterLocationCurrent();\n+            case FroniusBindingConstants.MeterCurrentAcPhase1:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getCurrentACPhase1(), Units.AMPERE);\n+            case FroniusBindingConstants.MeterCurrentAcPhase2:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getCurrentACPhase2(), Units.AMPERE);\n+            case FroniusBindingConstants.MeterCurrentAcPhase3:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getCurrentACPhase3(), Units.AMPERE);\n+            case FroniusBindingConstants.MeterVoltageAcPhase1:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getVoltageACPhase1(), Units.VOLT);\n+            case FroniusBindingConstants.MeterVoltageAcPhase2:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getVoltageACPhase2(), Units.VOLT);\n+            case FroniusBindingConstants.MeterVoltageAcPhase3:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getVoltageACPhase3(), Units.VOLT);\n+            case FroniusBindingConstants.MeterPowerPhase1:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getPowerRealPPhase1(), Units.WATT);\n+            case FroniusBindingConstants.MeterPowerPhase2:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getPowerRealPPhase2(), Units.WATT);\n+            case FroniusBindingConstants.MeterPowerPhase3:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getPowerRealPPhase3(), Units.WATT);\n+            case FroniusBindingConstants.MeterPowerFactorPhase1:\n+                return meterRealtimeResponse.getBody().getData().getPowerFactorPhase1();\n+            case FroniusBindingConstants.MeterPowerFactorPhase2:\n+                return meterRealtimeResponse.getBody().getData().getPowerFactorPhase2();\n+            case FroniusBindingConstants.MeterPowerFactorPhase3:\n+                return meterRealtimeResponse.getBody().getData().getPowerFactorPhase3();\n+            case FroniusBindingConstants.MeterEnergyRealSumConsumed:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getEnergyRealWACSumConsumed(),\n+                        Units.WATT_HOUR);\n+            case FroniusBindingConstants.MeterEnergyRealSumProduced:\n+                return new QuantityType(meterRealtimeResponse.getBody().getData().getEnergyRealWACSumProduced(),\n+                        Units.WATT_HOUR);\n+        }\n+\n+        return null;\n+    }\n+\n+    private void updateProperties() {\n+        Map<String, String> properties = editProperties();\n+\n+        if (meterRealtimeResponse == null) {\n+            return;\n+        }\n+", "originalCommit": "13f72adf59061965b3ab503cd282ddd4c3060bb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxODk3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9209#discussion_r548418977", "bodyText": "changed as requested", "author": "jimtng", "createdAt": "2020-12-24T06:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzODI5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7e0f600ef3b3f9e39e20d7bae2690d515a4cc7af", "chunk": "diff --git a/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusMeterHandler.java b/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusMeterHandler.java\nindex 0b12fb21fe..f28ae23075 100644\n--- a/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusMeterHandler.java\n+++ b/bundles/org.openhab.binding.fronius/src/main/java/org/openhab/binding/fronius/internal/handler/FroniusMeterHandler.java\n\n@@ -18,6 +18,7 @@ import org.apache.commons.lang.StringUtils;\n import org.openhab.binding.fronius.internal.FroniusBaseDeviceConfiguration;\n import org.openhab.binding.fronius.internal.FroniusBindingConstants;\n import org.openhab.binding.fronius.internal.FroniusBridgeConfiguration;\n+import org.openhab.binding.fronius.internal.api.MeterRealtimeBodyDataDTO;\n import org.openhab.binding.fronius.internal.api.MeterRealtimeResponseDTO;\n import org.openhab.core.library.types.QuantityType;\n import org.openhab.core.library.unit.Units;\n"}}, {"oid": "7e0f600ef3b3f9e39e20d7bae2690d515a4cc7af", "url": "https://github.com/openhab/openhab-addons/commit/7e0f600ef3b3f9e39e20d7bae2690d515a4cc7af", "message": "[fronius] Store meterRealtimeBodyData instead of meterRealtimeResponse\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>", "committedDate": "2020-12-24T06:48:51Z", "type": "commit"}]}