{"pr_number": 7552, "pr_title": "[homekit] New accessories Garage Door Opener and Outlet", "pr_createdAt": "2020-05-04T23:07:11Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7552", "timeline": [{"oid": "f51cc55b7b10193e9007b8b5706ae35ca176cb58", "url": "https://github.com/openhab/openhab-addons/commit/f51cc55b7b10193e9007b8b5706ae35ca176cb58", "message": "incorporate J-N-K review\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-05-04T16:52:39Z", "type": "commit"}, {"oid": "432bfd99fccb671925d2329bf70ce2f87f213542", "url": "https://github.com/openhab/openhab-addons/commit/432bfd99fccb671925d2329bf70ce2f87f213542", "message": "align on heating current and target mode naming\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-05-04T17:46:57Z", "type": "commit"}, {"oid": "aeef422be872afb5144e0f60844552fea06820bf", "url": "https://github.com/openhab/openhab-addons/commit/aeef422be872afb5144e0f60844552fea06820bf", "message": "add support for Outlet and GarageDoorOpener. incorporate feedback from reviews\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-05-04T23:00:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4NDkxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7552#discussion_r420284916", "bodyText": "So it won't return the configuration value if no default value is provided? That doesn't seem right...", "author": "cpmeister", "createdAt": "2020-05-05T17:31:43Z", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "diffHunk": "@@ -160,10 +161,14 @@ protected void unsubscribe(HomekitCharacteristicType characteristicType) {\n         return null;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     protected <T> T getAccessoryConfiguration(String key, T defaultValue) {\n         final @Nullable Map<String, Object> configuration = accessory.getConfiguration();\n-        if ((configuration != null) && (configuration.get(key) != null)) {\n-            return (T) configuration.get(key);\n+        if (configuration != null) {\n+            Object value = configuration.get(key);\n+            if (value != null && defaultValue != null && value.getClass().equals(defaultValue.getClass())) {", "originalCommit": "aeef422be872afb5144e0f60844552fea06820bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNTc2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7552#discussion_r420325768", "bodyText": "Didn't think about that. Another way would be to check for value != null and catch ClassCastException instead of trying to check the class before.", "author": "J-N-K", "createdAt": "2020-05-05T18:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4NDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MTMwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7552#discussion_r420341304", "bodyText": "Well the ClassCastException wouldn't occur in this method but it would occur on the caller when it attempts to cast the return value into what it thinks it should be.", "author": "cpmeister", "createdAt": "2020-05-05T19:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4NDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0NDM2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7552#discussion_r420344369", "bodyText": "In fact, defaultValue could be annotated as @NonNull at least in the use-cases we have so far.", "author": "J-N-K", "createdAt": "2020-05-05T19:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4NDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1MTM2NA==", "url": "https://github.com/openhab/openhab-addons/pull/7552#discussion_r420651364", "bodyText": "if defaultValue is null we dont know to which class to cast to. So,  it must be not null. we can add @NotNull.\nalternative would be to create separate methods like getAccessoryConfigurationAsString, getAccessoryConfigurationAsInteger\ncurrently we have only these 2 cases: String and Integer and cannot think of anything else.\nit is configuration from metadata - so, it will be either String \"\" or number.\nSwitch MyFan \"My Fan\" { homekit=\"Fan.v2\", alexa=\"Fan\" [ type=\"oscillating\", speedSteps=3 ] }", "author": "yfre", "createdAt": "2020-05-06T09:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4NDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2MTY4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7552#discussion_r420961680", "bodyText": "I think the generic version is better. is theer any reason why we can't add null-annotations to these classes`?", "author": "J-N-K", "createdAt": "2020-05-06T17:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4NDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExNTMxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7552#discussion_r421115317", "bodyText": "NonNull will not hurt here. added.", "author": "yfre", "createdAt": "2020-05-06T21:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4NDkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "63281e23cf8c38828fa08abeba52669419ad1b63", "chunk": "diff --git a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java\nindex 1fe934287f..fab3ceab42 100644\n--- a/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java\n+++ b/bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java\n\n@@ -162,11 +163,11 @@ abstract class AbstractHomekitAccessoryImpl implements HomekitAccessory {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T> T getAccessoryConfiguration(String key, T defaultValue) {\n+    protected <T> T getAccessoryConfiguration(String key, @NonNull T defaultValue) {\n         final @Nullable Map<String, Object> configuration = accessory.getConfiguration();\n         if (configuration != null) {\n             Object value = configuration.get(key);\n-            if (value != null && defaultValue != null && value.getClass().equals(defaultValue.getClass())) {\n+            if (value != null && value.getClass().equals(defaultValue.getClass())) {\n                 return (T) value;\n             }\n         }\n"}}, {"oid": "63281e23cf8c38828fa08abeba52669419ad1b63", "url": "https://github.com/openhab/openhab-addons/commit/63281e23cf8c38828fa08abeba52669419ad1b63", "message": "mark defaultValue as NonNull\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-05-06T21:53:41Z", "type": "commit"}, {"oid": "63281e23cf8c38828fa08abeba52669419ad1b63", "url": "https://github.com/openhab/openhab-addons/commit/63281e23cf8c38828fa08abeba52669419ad1b63", "message": "mark defaultValue as NonNull\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>", "committedDate": "2020-05-06T21:53:41Z", "type": "forcePushed"}]}