{"pr_number": 7621, "pr_title": "[onewire] Fix error handling for connection issues (#7149)", "pr_createdAt": "2020-05-12T22:47:13Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7621", "timeline": [{"oid": "dc29a21b4d78bff811fc1731346712c761db5a83", "url": "https://github.com/openhab/openhab-addons/commit/dc29a21b4d78bff811fc1731346712c761db5a83", "message": "binding does not recover from dead and restarted owserver #7149\nbut when server goes down, something explodes...\n\nSigned-off-by: Alexander Behring <alex@behrings.eu>", "committedDate": "2020-05-12T22:51:42Z", "type": "commit"}, {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "url": "https://github.com/openhab/openhab-addons/commit/107145853c94c22639ce8fc4d1c164ee6f38c7f6", "message": "Fixes for Onewire binding issue 7149.\n* Unsynchronized access to OwserverConnection.java\n* Bridge erroneously allows refreshes although connection is in state FAILED\n* OwserverBridgeHandler.refresh does not abort refresh in all places when the connection state goes to FAILED.\n* OwserverConnection.checkPresence() needs a throws declaration.\n* The new CLOSED state in OwserverConnection.close was set after error handling - overwriting a potential FAILED state set by try-catch block.\n* Error handling of output stream unavailability in OwserverConnection.write was inconsistent with handling other issues. An OwException needs to be thrown.\n* Error handling in OwserverConnection.read has too broad of a try-block\n\nIn addition, some code documentation and some more tracing output which might be generally helpful.\n\nSigned-off-by: Alexander Behring <alex@behrings.eu>", "committedDate": "2020-05-12T22:51:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNDcwNw==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424624707", "bodyText": "Nope. Don't catch Exception.", "author": "J-N-K", "createdAt": "2020-05-13T17:54:06Z", "path": "bundles/org.openhab.binding.onewire/src/test/java/org/openhab/binding/onewire/owserver/OwserverConnectionTest.java", "diffHunk": "@@ -154,8 +152,8 @@ public void testCheckPresence() {\n \n             presence = owserverConnection.checkPresence(\"notpresent\");\n             assertEquals(OnOffType.OFF, presence);\n-        } catch (OwException e) {\n-            Assert.fail(\"caught unexpected OwException\");\n+        } catch (Exception e) {", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b80392a685f779951fe4d8c4818033114ebeef1", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/test/java/org/openhab/binding/onewire/owserver/OwserverConnectionTest.java b/bundles/org.openhab.binding.onewire/src/test/java/org/openhab/binding/onewire/owserver/OwserverConnectionTest.java\nindex 015686e156..18fe1026e2 100644\n--- a/bundles/org.openhab.binding.onewire/src/test/java/org/openhab/binding/onewire/owserver/OwserverConnectionTest.java\n+++ b/bundles/org.openhab.binding.onewire/src/test/java/org/openhab/binding/onewire/owserver/OwserverConnectionTest.java\n\n@@ -146,15 +146,11 @@ public class OwserverConnectionTest extends JavaTest {\n             return;\n         }\n         owserverConnection.start();\n-        try {\n-            State presence = owserverConnection.checkPresence(\"present\");\n-            assertEquals(OnOffType.ON, presence);\n+        State presence = owserverConnection.checkPresence(\"present\");\n+        assertEquals(OnOffType.ON, presence);\n \n-            presence = owserverConnection.checkPresence(\"notpresent\");\n-            assertEquals(OnOffType.OFF, presence);\n-        } catch (Exception e) {\n-            Assert.fail(\"caught unexpected Exception\");\n-        }\n+        presence = owserverConnection.checkPresence(\"notpresent\");\n+        assertEquals(OnOffType.OFF, presence);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNjQzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424626431", "bodyText": "I would suhggest to check !refreshable, log the error and return. That wax the rest of the method can stay as it is (which is more clear IMO).", "author": "J-N-K", "createdAt": "2020-05-13T17:56:52Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java", "diffHunk": "@@ -145,29 +165,37 @@ private void refresh() {\n                     thingCount--;\n                 }\n \n-                refreshBridgeChannels(now);\n+                if (refreshable) {", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMzY0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424713644", "bodyText": "Good idea - I also did that for the outermost check for refresheable.", "author": "Urmel", "createdAt": "2020-05-13T20:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNjQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "addd9485ef993fb7a2bcb473877079368307c979", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java\nindex 1a2e8368e8..33b53e68df 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java\n\n@@ -138,65 +133,69 @@ public class OwserverBridgeHandler extends BaseBridgeHandler {\n      */\n     private void refresh() {\n         try {\n-            if (refreshable) {\n-                long now = System.currentTimeMillis();\n-\n-                // refresh thing channels\n-                List<Thing> thingList = getThing().getThings();\n-                int thingCount = thingList.size();\n-                Iterator<Thing> childListIterator = thingList.iterator();\n-                logger.trace(\"refreshTask with thread ID {} starts at {}, {} childs\", Thread.currentThread().getId(),\n-                        now, thingCount);\n-                while (childListIterator.hasNext() && refreshable) {\n-                    Thing owThing = childListIterator.next();\n-\n-                    logger.trace(\"refresh: getting handler for {} ({} to go)\", owThing.getUID(), thingCount);\n-                    OwBaseThingHandler owHandler = (OwBaseThingHandler) owThing.getHandler();\n-                    if (owHandler != null) {\n-                        if (owHandler.isRefreshable()) {\n-                            logger.trace(\"{} initialized, refreshing\", owThing.getUID());\n-                            owHandler.refresh(OwserverBridgeHandler.this, now);\n-                        } else {\n-                            logger.trace(\"{} not initialized, skipping refresh\", owThing.getUID());\n-                        }\n+            long now = System.currentTimeMillis();\n+            if (!refreshable) {\n+                logger.trace(\"refresh requested by thread ID {} denied, as not refresheable\",\n+                        Thread.currentThread().getId());\n+                return;\n+            }\n+\n+            // refresh thing channels\n+            List<Thing> thingList = getThing().getThings();\n+            int thingCount = thingList.size();\n+            Iterator<Thing> childListIterator = thingList.iterator();\n+            logger.trace(\"refreshTask with thread ID {} starts at {}, {} childs\", Thread.currentThread().getId(), now,\n+                    thingCount);\n+            while (childListIterator.hasNext() && refreshable) {\n+                Thing owThing = childListIterator.next();\n+\n+                logger.trace(\"refresh: getting handler for {} ({} to go)\", owThing.getUID(), thingCount);\n+                OwBaseThingHandler owHandler = (OwBaseThingHandler) owThing.getHandler();\n+                if (owHandler != null) {\n+                    if (owHandler.isRefreshable()) {\n+                        logger.trace(\"{} initialized, refreshing\", owThing.getUID());\n+                        owHandler.refresh(OwserverBridgeHandler.this, now);\n                     } else {\n-                        logger.debug(\"{} handler missing\", owThing.getUID());\n+                        logger.trace(\"{} not initialized, skipping refresh\", owThing.getUID());\n                     }\n-                    thingCount--;\n+                } else {\n+                    logger.debug(\"{} handler missing\", owThing.getUID());\n                 }\n+                thingCount--;\n+            }\n \n-                if (refreshable) {\n-                    refreshBridgeChannels(now);\n-                }\n+            if (!refreshable) {\n+                logger.trace(\"refresh aborted, as brige became non-refresheable.\");\n+                return;\n+            }\n+            refreshBridgeChannels(now);\n \n-                // update thing properties (only one per refresh cycle)\n-                if (refreshable) {\n-                    Thing updateThing = thingPropertiesUpdateQueue.poll();\n-                    if (updateThing != null) {\n-                        logger.trace(\"update: getting handler for {} ({} total in list)\", updateThing.getUID(),\n-                                thingPropertiesUpdateQueue.size());\n-                        OwBaseThingHandler owHandler = (OwBaseThingHandler) updateThing.getHandler();\n-                        if (owHandler != null) {\n-                            try {\n-                                owHandler.updateSensorProperties(this);\n-                                owHandler.initialize();\n-                                logger.debug(\"{} sucessfully updated properties, removing from property update list\",\n-                                        updateThing.getUID());\n-                            } catch (OwException e) {\n-                                thingPropertiesUpdateQueue.add(updateThing);\n-                                logger.debug(\"updating thing properties for {} failed: {}, adding to end of list\",\n-                                        updateThing.getUID(), e.getMessage());\n-                            }\n-                        } else {\n-                            logger.debug(\"{} is missing handler, removing from property update list\",\n-                                    updateThing.getUID());\n-                        }\n+            // update thing properties (only one per refresh cycle)\n+            if (!refreshable) {\n+                logger.trace(\"refresh aborted, as brige became non-refresheable.\");\n+                return;\n+            }\n+            Thing updateThing = thingPropertiesUpdateQueue.poll();\n+            if (updateThing != null) {\n+                logger.trace(\"update: getting handler for {} ({} total in list)\", updateThing.getUID(),\n+                        thingPropertiesUpdateQueue.size());\n+                OwBaseThingHandler owHandler = (OwBaseThingHandler) updateThing.getHandler();\n+                if (owHandler != null) {\n+                    try {\n+                        owHandler.updateSensorProperties(this);\n+                        owHandler.initialize();\n+                        logger.debug(\"{} sucessfully updated properties, removing from property update list\",\n+                                updateThing.getUID());\n+                    } catch (OwException e) {\n+                        thingPropertiesUpdateQueue.add(updateThing);\n+                        logger.debug(\"updating thing properties for {} failed: {}, adding to end of list\",\n+                                updateThing.getUID(), e.getMessage());\n                     }\n+                } else {\n+                    logger.debug(\"{} is missing handler, removing from property update list\", updateThing.getUID());\n                 }\n-            } else {\n-                logger.trace(\"refresh requested by thread ID {} denied, as not refresheable\",\n-                        Thread.currentThread().getId());\n             }\n+\n         } catch (RuntimeException e) {\n             // catching RuntimeException because scheduled tasks finish once an exception occurs\n             logger.error(\"refresh encountered exception of {}: {}, please report bug\", e.getClass(), e.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNzA5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424627096", "bodyText": "I don't think we need this log-message. Logging the new connection state is sufficient. You can remove oldConnectionState then.", "author": "J-N-K", "createdAt": "2020-05-13T17:57:53Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java", "diffHunk": "@@ -342,12 +370,15 @@ public boolean isRefreshable() {\n      * @param connectionState current connection state\n      */\n     public void reportConnectionState(OwserverConnectionState connectionState) {\n+        logger.debug(\"Updating owserverconnectionstate from {} to {}\", oldConnectionState, connectionState);", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNDU0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424714545", "bodyText": "Done.", "author": "Urmel", "createdAt": "2020-05-13T20:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNzA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "addd9485ef993fb7a2bcb473877079368307c979", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java\nindex 1a2e8368e8..33b53e68df 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java\n\n@@ -370,7 +369,7 @@ public class OwserverBridgeHandler extends BaseBridgeHandler {\n      * @param connectionState current connection state\n      */\n     public void reportConnectionState(OwserverConnectionState connectionState) {\n-        logger.debug(\"Updating owserverconnectionstate from {} to {}\", oldConnectionState, connectionState);\n+        logger.debug(\"Updating owserverconnectionstate to {}\", connectionState);\n         switch (connectionState) {\n             case FAILED:\n                 refreshable = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNzc5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424627795", "bodyText": "Why does this need to be synchronized? I don't see any concurrency issue here.", "author": "J-N-K", "createdAt": "2020-05-13T17:59:07Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java", "diffHunk": "@@ -106,7 +123,9 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n \n         scheduler.execute(() -> {\n-            owserverConnection.start();\n+            synchronized (owserverConnection) {", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMDg1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424710850", "bodyText": "Thanks - I do take your point that during intialization there shouldn't be any parallel threads accessing the object. However just from the signatures of the methods, a parallel call to one of the reads / writes would be possible. Furthermore, the owserverConnection could also be an already existing object.\nSo my suggestion would be to play it safe...", "author": "Urmel", "createdAt": "2020-05-13T20:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNzc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyNDc2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r425424763", "bodyText": "For now, I'm leaving it in... if that's an issue, please get back to me. Thanks.", "author": "Urmel", "createdAt": "2020-05-14T20:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNzc5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODMyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424628321", "bodyText": "remove empty line", "author": "J-N-K", "createdAt": "2020-05-13T17:59:55Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -37,7 +37,22 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * The {@link OwserverConnection} defines the protocol for connections to owservers\n+ * The {@link OwserverConnection} defines the protocol for connections to owservers.\n+ *\n+ *\n+ * Data is requested by using one of the read / write methods. In case of errors, an {@link OwException}\n+ * is thrown. All other exceptions are caught and handled.\n+ *\n+ * The data request methods follow a general pattern:\n+ * * build the appropriate {@link OwserverPacket} for the request\n+ * * call {@link #request(OwserverPacket)} to ask for the data, which then\n+ * * uses {@link #write(OwserverPacket)} to get the request to the server and\n+ * * uses {@link #read(boolean)} to get the result\n+ *\n+ *", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNjY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424716645", "bodyText": "Done (multiple places).", "author": "Urmel", "createdAt": "2020-05-13T20:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -51,7 +51,7 @@ import org.slf4j.LoggerFactory;\n  *\n  *\n  * Hereby, the resulting packet is examined on an appropriate return code (!= -1) and whether the\n- * expected payload is attached. If not, an {@link OwException} is raised.\n+ * expected payload is attached. If not, an {@link OwException} is thrown.\n  *\n  *\n  * @author Jan N. Klug - Initial contribution\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODU2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424628563", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * expected payload is attached. If not, an {@link OwException} is raised.\n          \n          \n            \n             * expected payload is attached. If not, an {@link OwException} is thrown.", "author": "J-N-K", "createdAt": "2020-05-13T18:00:17Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -37,7 +37,22 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * The {@link OwserverConnection} defines the protocol for connections to owservers\n+ * The {@link OwserverConnection} defines the protocol for connections to owservers.\n+ *\n+ *\n+ * Data is requested by using one of the read / write methods. In case of errors, an {@link OwException}\n+ * is thrown. All other exceptions are caught and handled.\n+ *\n+ * The data request methods follow a general pattern:\n+ * * build the appropriate {@link OwserverPacket} for the request\n+ * * call {@link #request(OwserverPacket)} to ask for the data, which then\n+ * * uses {@link #write(OwserverPacket)} to get the request to the server and\n+ * * uses {@link #read(boolean)} to get the result\n+ *\n+ *\n+ * Hereby, the resulting packet is examined on an appropriate return code (!= -1) and whether the\n+ * expected payload is attached. If not, an {@link OwException} is raised.", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -51,7 +51,7 @@ import org.slf4j.LoggerFactory;\n  *\n  *\n  * Hereby, the resulting packet is examined on an appropriate return code (!= -1) and whether the\n- * expected payload is attached. If not, an {@link OwException} is raised.\n+ * expected payload is attached. If not, an {@link OwException} is thrown.\n  *\n  *\n  * @author Jan N. Klug - Initial contribution\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODY5OA==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424628698", "bodyText": "remove empty line", "author": "J-N-K", "createdAt": "2020-05-13T18:00:31Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -37,7 +37,22 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * The {@link OwserverConnection} defines the protocol for connections to owservers\n+ * The {@link OwserverConnection} defines the protocol for connections to owservers.\n+ *\n+ *\n+ * Data is requested by using one of the read / write methods. In case of errors, an {@link OwException}\n+ * is thrown. All other exceptions are caught and handled.\n+ *\n+ * The data request methods follow a general pattern:\n+ * * build the appropriate {@link OwserverPacket} for the request\n+ * * call {@link #request(OwserverPacket)} to ask for the data, which then\n+ * * uses {@link #write(OwserverPacket)} to get the request to the server and\n+ * * uses {@link #read(boolean)} to get the result\n+ *\n+ *\n+ * Hereby, the resulting packet is examined on an appropriate return code (!= -1) and whether the\n+ * expected payload is attached. If not, an {@link OwException} is raised.\n+ *", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNjY5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424716696", "bodyText": "Done.", "author": "Urmel", "createdAt": "2020-05-13T20:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -51,7 +51,7 @@ import org.slf4j.LoggerFactory;\n  *\n  *\n  * Hereby, the resulting packet is examined on an appropriate return code (!= -1) and whether the\n- * expected payload is attached. If not, an {@link OwException} is raised.\n+ * expected payload is attached. If not, an {@link OwException} is thrown.\n  *\n  *\n  * @author Jan N. Klug - Initial contribution\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODk4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424628985", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * stop the owserver connection\n          \n          \n            \n                 *\n          \n          \n            \n                 * and report new {@link OwserverConnectionState} to {@link #thingHandlerCallback}.\n          \n          \n            \n                 * stop the owserver connection and report new {@link OwserverConnectionState} to {@link #thingHandlerCallback}.", "author": "J-N-K", "createdAt": "2020-05-13T18:00:56Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -95,16 +111,24 @@ public void setPort(int port) {\n      * start the owserver connection\n      */\n     public void start() {\n+        logger.debug(\"Trying to (re)start OW server connection - previous state: {}\",\n+                owserverConnectionState.toString());\n         connectionErrorCounter = 0;\n-        owserverConnectionState = OwserverConnectionState.CLOSED;\n+        tryingConnectionRecovery = true;\n+        // owserverConnectionState = OwserverConnectionState.CLOSED;\n         boolean success = false;\n         do {\n             success = open();\n-        } while (!success && owserverConnectionState != OwserverConnectionState.FAILED);\n+            if (success && owserverConnectionState != OwserverConnectionState.FAILED) {\n+                tryingConnectionRecovery = false;\n+            }\n+        } while (!success && (owserverConnectionState != OwserverConnectionState.FAILED || tryingConnectionRecovery));\n     }\n \n     /**\n      * stop the owserver connection\n+     *\n+     * and report new {@link OwserverConnectionState} to {@link #thingHandlerCallback}.", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -126,9 +126,7 @@ public class OwserverConnection {\n     }\n \n     /**\n-     * stop the owserver connection\n-     *\n-     * and report new {@link OwserverConnectionState} to {@link #thingHandlerCallback}.\n+     * stop the owserver connection and report new {@link OwserverConnectionState} to {@link #thingHandlerCallback}.\n      */\n     public void stop() {\n         close();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTEyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424629125", "bodyText": "remove commented code", "author": "J-N-K", "createdAt": "2020-05-13T18:01:12Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -122,11 +146,11 @@ public void stop() {\n         OwserverPacket returnPacket = request(requestPacket);\n \n         if ((returnPacket.getReturnCode() != -1) && returnPacket.hasPayload()) {\n-            connectionErrorCounter = 0;\n+            // connectionErrorCounter = 0; -> done by request method!!", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNzI4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424717283", "bodyText": "Done.", "author": "Urmel", "createdAt": "2020-05-13T20:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "addd9485ef993fb7a2bcb473877079368307c979", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..111b9224f4 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -146,7 +142,6 @@ public class OwserverConnection {\n         OwserverPacket returnPacket = request(requestPacket);\n \n         if ((returnPacket.getReturnCode() != -1) && returnPacket.hasPayload()) {\n-            // connectionErrorCounter = 0; -> done by request method!!\n             return Arrays.stream(returnPacket.getPayloadString().split(\",\")).map(this::stringToSensorId)\n                     .filter(Objects::nonNull).collect(Collectors.toList());\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTMzMg==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424629332", "bodyText": "good catch!", "author": "J-N-K", "createdAt": "2020-05-13T18:01:38Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -141,11 +165,12 @@ public void stop() {\n     /**\n      * check sensor presence\n      *\n+     * Errors are caught and interpreted as sensor not present.\n+     *\n      * @param path full owfs path to sensor\n      * @return OnOffType, ON=present, OFF=not present\n-     * @throws OwException\n      */\n-    public State checkPresence(String path) throws OwException {\n+    public State checkPresence(String path) {", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxODQzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424718437", "bodyText": "Thanks.", "author": "Urmel", "createdAt": "2020-05-13T20:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTMzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTYyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424629621", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * In case of issues, the connection is close using {@link #closeOnError()} and false is returned.\n          \n          \n            \n                 * In case of issues, the connection is closed using {@link #closeOnError()} and false is returned.", "author": "J-N-K", "createdAt": "2020-05-13T18:02:08Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -291,18 +323,22 @@ private OwserverPacket request(OwserverPacket requestPacket) throws OwException\n             close();\n         }\n \n+        // Success! Reset error counter.\n         connectionErrorCounter = 0;\n         return returnPacket;\n     }\n \n     /**\n      * open/reopen the connection to the owserver\n      *\n+     * In case of issues, the connection is close using {@link #closeOnError()} and false is returned.", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -331,7 +329,7 @@ public class OwserverConnection {\n     /**\n      * open/reopen the connection to the owserver\n      *\n-     * In case of issues, the connection is close using {@link #closeOnError()} and false is returned.\n+     * In case of issues, the connection is closed using {@link #closeOnError()} and false is returned.\n      * If the {@link #owserverConnectionState} is in STOPPED or FAILED, the method directly returns false.\n      *\n      * @return true if open\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMDM3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424630376", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Calls {@link #close(boolean)} with reportConnectionState = true.\n          \n          \n            \n                 * close connection and report connection state to callback", "author": "J-N-K", "createdAt": "2020-05-13T18:03:25Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -340,13 +376,25 @@ private boolean open() {\n     }\n \n     /**\n-     * close the connection to the owserver instance\n+     * Calls {@link #close(boolean)} with reportConnectionState = true.", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -376,7 +374,7 @@ public class OwserverConnection {\n     }\n \n     /**\n-     * Calls {@link #close(boolean)} with reportConnectionState = true.\n+     * close connection and report connection state to callback\n      */\n     private void close() {\n         this.close(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMDczNA==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424630734", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * close the connection to the owserver instance.\n          \n          \n            \n                 * issues during closing are ignored.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param reportConnectionState - report the CLOSED state to\n          \n          \n            \n                 */\n          \n          \n            \n                private void close(boolean reportConnectionState) {\n          \n          \n            \n                /**\n          \n          \n            \n                 * close the connection to the owserver instance.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param reportConnectionState  true, if connection state shall be reported to callback\n          \n          \n            \n                 */\n          \n          \n            \n                private void close(boolean reportConnectionState) {", "author": "J-N-K", "createdAt": "2020-05-13T18:04:02Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -340,13 +376,25 @@ private boolean open() {\n     }\n \n     /**\n-     * close the connection to the owserver instance\n+     * Calls {@link #close(boolean)} with reportConnectionState = true.\n      */\n     private void close() {\n+        this.close(true);\n+    }\n+\n+    /**\n+     * close the connection to the owserver instance.\n+     * issues during closing are ignored.\n+     *\n+     * @param reportConnectionState - report the CLOSED state to\n+     */\n+    private void close(boolean reportConnectionState) {", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -376,7 +374,7 @@ public class OwserverConnection {\n     }\n \n     /**\n-     * Calls {@link #close(boolean)} with reportConnectionState = true.\n+     * close connection and report connection state to callback\n      */\n     private void close() {\n         this.close(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMTg0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424631842", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * if {@link #CONNECTION_MAX_RETRY} is exceeded, the {@link #owserverConnectionState} is set to FAILED\n          \n          \n            \n                 * and reported to the {@link #thingHandlerCallback}.\n          \n          \n            \n                 * after {@link #CONNECTION_MAX_RETRY} is exceeded, connection state is reported to callback", "author": "J-N-K", "createdAt": "2020-05-13T18:05:57Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -378,19 +425,29 @@ private void checkConnection() {\n \n     /**\n      * close the connection to the owserver instance after an error occured\n+     * if {@link #CONNECTION_MAX_RETRY} is exceeded, the {@link #owserverConnectionState} is set to FAILED\n+     * and reported to the {@link #thingHandlerCallback}.", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyNDAyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r425424029", "bodyText": "Pushing a commit with ... hope that's ok...\nif {@link #CONNECTION_MAX_RETRY} is exceeded, {@link #owserverConnectionState} is set to FAILED and state is reported to callback.", "author": "Urmel", "createdAt": "2020-05-14T20:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMTg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9b80392a685f779951fe4d8c4818033114ebeef1", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..13b8270963 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -424,9 +416,9 @@ public class OwserverConnection {\n     }\n \n     /**\n-     * close the connection to the owserver instance after an error occured\n-     * if {@link #CONNECTION_MAX_RETRY} is exceeded, the {@link #owserverConnectionState} is set to FAILED\n-     * and reported to the {@link #thingHandlerCallback}.\n+     * close the connection to the owserver instance after an error occured.\n+     * if {@link #CONNECTION_MAX_RETRY} is exceeded, {@link #owserverConnectionState} is set to FAILED\n+     * and state is reported to callback.\n      */\n     private void closeOnError() {\n         connectionErrorCounter++;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjE2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424632169", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *\n          \n          \n            \n                 * If", "author": "J-N-K", "createdAt": "2020-05-13T18:06:31Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMDAyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424720020", "bodyText": "Whoops :)", "author": "Urmel", "createdAt": "2020-05-13T20:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -481,8 +478,6 @@ public class OwserverConnection {\n      * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n      * using {@link #checkConnection()}.\n      *\n-     * If\n-     *\n      * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjY5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424632692", "bodyText": "remove empty line", "author": "J-N-K", "createdAt": "2020-05-13T18:07:29Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If\n+     *\n+     * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n      */\n     private OwserverPacket read(boolean noTimeoutException) throws OwException {\n         OwserverPacket returnPacket = new OwserverPacket(OwserverPacketType.RETURN);\n-        try {\n-            final DataInputStream owserverInputStream = this.owserverInputStream;\n-            if (owserverInputStream != null) {\n-                DataInputStream inputStream = owserverInputStream;\n+        final DataInputStream owserverInputStream = this.owserverInputStream;\n+", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -481,8 +478,6 @@ public class OwserverConnection {\n      * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n      * using {@link #checkConnection()}.\n      *\n-     * If\n-     *\n      * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjgyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424632820", "bodyText": "remove empty line", "author": "J-N-K", "createdAt": "2020-05-13T18:07:44Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If\n+     *\n+     * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n      */\n     private OwserverPacket read(boolean noTimeoutException) throws OwException {\n         OwserverPacket returnPacket = new OwserverPacket(OwserverPacketType.RETURN);\n-        try {\n-            final DataInputStream owserverInputStream = this.owserverInputStream;\n-            if (owserverInputStream != null) {\n-                DataInputStream inputStream = owserverInputStream;\n+        final DataInputStream owserverInputStream = this.owserverInputStream;\n+\n+        if (owserverInputStream != null) {\n+            DataInputStream inputStream = owserverInputStream;\n+            try {\n                 returnPacket = new OwserverPacket(inputStream, OwserverPacketType.RETURN);\n-                logger.trace(\"read: {}\", returnPacket);\n-            } else {\n-                logger.debug(\"input stream not available on read\");\n-                closeOnError();\n-            }\n-        } catch (EOFException e) {\n-            // nothing to read\n-        } catch (OwException e) {\n-            checkConnection();\n-            throw e;\n-        } catch (IOException e) {\n-            if (e.getMessage().equals(\"Read timed out\") && noTimeoutException) {\n-                logger.trace(\"timeout - setting error code to -1\");\n-                returnPacket.setPayload(\"timeout\");\n-                returnPacket.setReturnCode(-1);\n-            } else {\n+", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -481,8 +478,6 @@ public class OwserverConnection {\n      * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n      * using {@link #checkConnection()}.\n      *\n-     * If\n-     *\n      * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjk5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424632991", "bodyText": "remove empty line", "author": "J-N-K", "createdAt": "2020-05-13T18:08:00Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If\n+     *\n+     * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n      */\n     private OwserverPacket read(boolean noTimeoutException) throws OwException {\n         OwserverPacket returnPacket = new OwserverPacket(OwserverPacketType.RETURN);\n-        try {\n-            final DataInputStream owserverInputStream = this.owserverInputStream;\n-            if (owserverInputStream != null) {\n-                DataInputStream inputStream = owserverInputStream;\n+        final DataInputStream owserverInputStream = this.owserverInputStream;\n+\n+        if (owserverInputStream != null) {\n+            DataInputStream inputStream = owserverInputStream;\n+            try {\n                 returnPacket = new OwserverPacket(inputStream, OwserverPacketType.RETURN);\n-                logger.trace(\"read: {}\", returnPacket);\n-            } else {\n-                logger.debug(\"input stream not available on read\");\n-                closeOnError();\n-            }\n-        } catch (EOFException e) {\n-            // nothing to read\n-        } catch (OwException e) {\n-            checkConnection();\n-            throw e;\n-        } catch (IOException e) {\n-            if (e.getMessage().equals(\"Read timed out\") && noTimeoutException) {\n-                logger.trace(\"timeout - setting error code to -1\");\n-                returnPacket.setPayload(\"timeout\");\n-                returnPacket.setReturnCode(-1);\n-            } else {\n+\n+            } catch (EOFException e) {\n+                // Read suddenly ended ....\n+                logger.warn(\"EOFException: exception while reading packet - {}\", e.getMessage());\n+                checkConnection();\n+                throw new OwException(\"EOFException: exception while reading packet - \" + e.getMessage());\n+            } catch (OwException e) {\n+                // Some other issue\n                 checkConnection();\n-                throw new OwException(\"I/O error: exception while reading packet - \" + e.getMessage());\n+                throw e;\n+            } catch (IOException e) {\n+                // Read time out\n+                if (e.getMessage().equals(\"Read timed out\") && noTimeoutException) {\n+                    logger.trace(\"timeout - setting error code to -1\");\n+                    // will lead to re-try reading in request method!!!\n+                    returnPacket.setPayload(\"timeout\");\n+                    returnPacket.setReturnCode(-1);\n+", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -481,8 +478,6 @@ public class OwserverConnection {\n      * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n      * using {@link #checkConnection()}.\n      *\n-     * If\n-     *\n      * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMzEzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424633134", "bodyText": "remove empty line", "author": "J-N-K", "createdAt": "2020-05-13T18:08:13Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If\n+     *\n+     * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n      */\n     private OwserverPacket read(boolean noTimeoutException) throws OwException {\n         OwserverPacket returnPacket = new OwserverPacket(OwserverPacketType.RETURN);\n-        try {\n-            final DataInputStream owserverInputStream = this.owserverInputStream;\n-            if (owserverInputStream != null) {\n-                DataInputStream inputStream = owserverInputStream;\n+        final DataInputStream owserverInputStream = this.owserverInputStream;\n+\n+        if (owserverInputStream != null) {\n+            DataInputStream inputStream = owserverInputStream;\n+            try {\n                 returnPacket = new OwserverPacket(inputStream, OwserverPacketType.RETURN);\n-                logger.trace(\"read: {}\", returnPacket);\n-            } else {\n-                logger.debug(\"input stream not available on read\");\n-                closeOnError();\n-            }\n-        } catch (EOFException e) {\n-            // nothing to read\n-        } catch (OwException e) {\n-            checkConnection();\n-            throw e;\n-        } catch (IOException e) {\n-            if (e.getMessage().equals(\"Read timed out\") && noTimeoutException) {\n-                logger.trace(\"timeout - setting error code to -1\");\n-                returnPacket.setPayload(\"timeout\");\n-                returnPacket.setReturnCode(-1);\n-            } else {\n+\n+            } catch (EOFException e) {\n+                // Read suddenly ended ....\n+                logger.warn(\"EOFException: exception while reading packet - {}\", e.getMessage());\n+                checkConnection();\n+                throw new OwException(\"EOFException: exception while reading packet - \" + e.getMessage());\n+            } catch (OwException e) {\n+                // Some other issue\n                 checkConnection();\n-                throw new OwException(\"I/O error: exception while reading packet - \" + e.getMessage());\n+                throw e;\n+            } catch (IOException e) {\n+                // Read time out\n+                if (e.getMessage().equals(\"Read timed out\") && noTimeoutException) {\n+                    logger.trace(\"timeout - setting error code to -1\");\n+                    // will lead to re-try reading in request method!!!\n+                    returnPacket.setPayload(\"timeout\");\n+                    returnPacket.setReturnCode(-1);\n+\n+                } else {\n+                    // Other I/O issue\n+                    checkConnection();\n+                    throw new OwException(\"I/O error: exception while reading packet - \" + e.getMessage());\n+                }\n             }\n+            logger.trace(\"read: {}\", returnPacket);\n+", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -481,8 +478,6 @@ public class OwserverConnection {\n      * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n      * using {@link #checkConnection()}.\n      *\n-     * If\n-     *\n      * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMzQyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424633424", "bodyText": "remove empty line", "author": "J-N-K", "createdAt": "2020-05-13T18:08:38Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java", "diffHunk": "@@ -342,5 +343,7 @@ public String toString() {\n \n         return String.format(\"%s, size %d, controlFlags 0x%08x, payload '%s'\", prefix, HEADER_SIZE + payloadLength,\n                 controlFlags, getPayloadString().replaceAll(\"\\\\p{C}\", \"?\"));\n+", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "addd9485ef993fb7a2bcb473877079368307c979", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java\nindex 6a77e6db2b..92f1ca5afe 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java\n\n@@ -343,7 +343,5 @@ public class OwserverPacket {\n \n         return String.format(\"%s, size %d, controlFlags 0x%08x, payload '%s'\", prefix, HEADER_SIZE + payloadLength,\n                 controlFlags, getPayloadString().replaceAll(\"\\\\p{C}\", \"?\"));\n-\n     }\n-\n-}\n+}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMzUzMw==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424633533", "bodyText": "remove empty line", "author": "J-N-K", "createdAt": "2020-05-13T18:08:48Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java", "diffHunk": "@@ -342,5 +343,7 @@ public String toString() {\n \n         return String.format(\"%s, size %d, controlFlags 0x%08x, payload '%s'\", prefix, HEADER_SIZE + payloadLength,\n                 controlFlags, getPayloadString().replaceAll(\"\\\\p{C}\", \"?\"));\n+\n     }\n+", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "addd9485ef993fb7a2bcb473877079368307c979", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java\nindex 6a77e6db2b..92f1ca5afe 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java\n\n@@ -343,7 +343,5 @@ public class OwserverPacket {\n \n         return String.format(\"%s, size %d, controlFlags 0x%08x, payload '%s'\", prefix, HEADER_SIZE + payloadLength,\n                 controlFlags, getPayloadString().replaceAll(\"\\\\p{C}\", \"?\"));\n-\n     }\n-\n-}\n+}\n\\ No newline at end of file\n"}}, {"oid": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "url": "https://github.com/openhab/openhab-addons/commit/e8601889cb237c13551668ba39e6d3fc50dfb65b", "message": "Apply suggestions from code review\r\n\r\nThe ones that were directly commiteable in github...\n\nCo-authored-by: J-N-K <J-N-K@users.noreply.github.com>", "committedDate": "2020-05-13T20:51:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxODA2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424718063", "bodyText": "I will also remove this commented code...", "author": "Urmel", "createdAt": "2020-05-13T20:40:56Z", "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -95,16 +111,24 @@ public void setPort(int port) {\n      * start the owserver connection\n      */\n     public void start() {\n+        logger.debug(\"Trying to (re)start OW server connection - previous state: {}\",\n+                owserverConnectionState.toString());\n         connectionErrorCounter = 0;\n-        owserverConnectionState = OwserverConnectionState.CLOSED;\n+        tryingConnectionRecovery = true;\n+        // owserverConnectionState = OwserverConnectionState.CLOSED;", "originalCommit": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "chunk": "diff --git a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\nindex f9b66cba0e..c303f4d942 100644\n--- a/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n+++ b/bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java\n\n@@ -126,9 +126,7 @@ public class OwserverConnection {\n     }\n \n     /**\n-     * stop the owserver connection\n-     *\n-     * and report new {@link OwserverConnectionState} to {@link #thingHandlerCallback}.\n+     * stop the owserver connection and report new {@link OwserverConnectionState} to {@link #thingHandlerCallback}.\n      */\n     public void stop() {\n         close();\n"}}, {"oid": "addd9485ef993fb7a2bcb473877079368307c979", "url": "https://github.com/openhab/openhab-addons/commit/addd9485ef993fb7a2bcb473877079368307c979", "message": "Added further changes due to review by J-N-K.\n\nSigned-off-by: Alexander Behring <alex@behrings.eu>", "committedDate": "2020-05-13T21:04:32Z", "type": "commit"}, {"oid": "fb8ca0bda9827be7b462fd0bad0858662eb75c83", "url": "https://github.com/openhab/openhab-addons/commit/fb8ca0bda9827be7b462fd0bad0858662eb75c83", "message": "Merge branch 'openHAB-Bind-Onewire-Fix7149' of https://github.com/Urmel/openhab-addons into openHAB-Bind-Onewire-Fix7149\n\nSigned-off-by: Alexander Behring <alex@behrings.eu>", "committedDate": "2020-05-13T21:15:31Z", "type": "commit"}, {"oid": "9b80392a685f779951fe4d8c4818033114ebeef1", "url": "https://github.com/openhab/openhab-addons/commit/9b80392a685f779951fe4d8c4818033114ebeef1", "message": "Fixes for PR7621 Onewire binding...\n* Remove try-catch in OwserverConnectionTest.java\n* Fixed missing new line at EOF (static code analysis issue) in OwserverPacket.java\n* Updated comment in OwserverConnection.java\n\nSigned-off-by: Alexander Behring <alex@behrings.eu>", "committedDate": "2020-05-14T21:15:41Z", "type": "commit"}]}