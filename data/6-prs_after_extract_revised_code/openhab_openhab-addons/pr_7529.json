{"pr_number": 7529, "pr_title": "[pioneeravr] support REFRESH command type where applicable", "pr_createdAt": "2020-05-02T15:38:02Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7529", "timeline": [{"oid": "76d723f4d685a991c40bfdccfd671710b30da23b", "url": "https://github.com/openhab/openhab-addons/commit/76d723f4d685a991c40bfdccfd671710b30da23b", "message": "support REFRESH command type where applicable\n\nSigned-off-by: Nils Schnabel <github@to.nilsschnabel.de>", "committedDate": "2020-05-02T15:44:51Z", "type": "forcePushed"}, {"oid": "c1962a1dd13787d0712957d73b5f26f7a7cb2dac", "url": "https://github.com/openhab/openhab-addons/commit/c1962a1dd13787d0712957d73b5f26f7a7cb2dac", "message": "support REFRESH command type where applicable\n\nSigned-off-by: Nils Schnabel <github@to.nilsschnabel.de>", "committedDate": "2020-05-02T15:50:22Z", "type": "commit"}, {"oid": "c1962a1dd13787d0712957d73b5f26f7a7cb2dac", "url": "https://github.com/openhab/openhab-addons/commit/c1962a1dd13787d0712957d73b5f26f7a7cb2dac", "message": "support REFRESH command type where applicable\n\nSigned-off-by: Nils Schnabel <github@to.nilsschnabel.de>", "committedDate": "2020-05-02T15:50:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NTI4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7529#discussion_r418995287", "bodyText": "How does the channel get refreshed though? I don't see you using the result of the query to update the state of the channel.", "author": "cpmeister", "createdAt": "2020-05-02T19:03:38Z", "path": "bundles/org.openhab.binding.pioneeravr/src/main/java/org/openhab/binding/pioneeravr/internal/handler/AbstractAvrHandler.java", "diffHunk": "@@ -166,16 +167,37 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             boolean unknownCommand = false;\n \n             if (channelUID.getId().contains(PioneerAvrBindingConstants.POWER_CHANNEL)) {\n-                commandSent = connection.sendPowerCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendPowerQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendPowerCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.VOLUME_DIMMER_CHANNEL)\n                     || channelUID.getId().contains(PioneerAvrBindingConstants.VOLUME_DB_CHANNEL)) {\n-                commandSent = connection.sendVolumeCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendVolumeQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendVolumeCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.SET_INPUT_SOURCE_CHANNEL)) {\n-                commandSent = connection.sendInputSourceCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendInputSourceQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendInputSourceCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.LISTENING_MODE_CHANNEL)) {\n-                commandSent = connection.sendListeningModeCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendListeningModeQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendListeningModeCommand(command,\n+                            getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.MUTE_CHANNEL)) {\n-                commandSent = connection.sendMuteCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendMuteQuery(getZoneFromChannelUID(channelUID.getId()));", "originalCommit": "c1962a1dd13787d0712957d73b5f26f7a7cb2dac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA3NTk2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7529#discussion_r419075961", "bodyText": "The protocol allows for both device-initiated (e.g. when pressing a remote control button) as well as client-initiated (e.g. from OpenHAB) status updates.\nThe update message will look the same regardless of how it was triggered and in both cases the update will be handled by StreamAvrConnection.IpControlInputStreamReader.run() and forwared to AbstractAvrHandler.statusUpdateReceived() where the actual channel update will happen.", "author": "nils", "createdAt": "2020-05-03T09:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NTI4Nw=="}], "type": "inlineReview", "revised_code": null}]}