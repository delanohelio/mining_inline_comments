{"pr_number": 1234, "pr_title": "Chore: Add tests for ResultResource", "pr_createdAt": "2020-02-09T22:06:17Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1234", "timeline": [{"oid": "727319029a9ffc6e2f847475d668240ab224dc6b", "url": "https://github.com/ls1intum/Artemis/commit/727319029a9ffc6e2f847475d668240ab224dc6b", "message": "Add test case for get result endpoint", "committedDate": "2020-02-09T19:14:28Z", "type": "commit"}, {"oid": "4bef6dfd7a93985476b229085088837bd317b17f", "url": "https://github.com/ls1intum/Artemis/commit/4bef6dfd7a93985476b229085088837bd317b17f", "message": "Add test case for get latest result endpoint", "committedDate": "2020-02-09T20:11:05Z", "type": "commit"}, {"oid": "8d2e5adb5c86c389e00a9fe9052a0d18bd61c71a", "url": "https://github.com/ls1intum/Artemis/commit/8d2e5adb5c86c389e00a9fe9052a0d18bd61c71a", "message": "Add test case for delete result endpoint", "committedDate": "2020-02-09T20:53:19Z", "type": "commit"}, {"oid": "2a97d2e7bcc84b477e524a320775366704e40ccb", "url": "https://github.com/ls1intum/Artemis/commit/2a97d2e7bcc84b477e524a320775366704e40ccb", "message": "Add test case for get result for submission endpoint", "committedDate": "2020-02-09T21:12:08Z", "type": "commit"}, {"oid": "dd437989d6fb8b22dfb81fa2a0e15825e2678426", "url": "https://github.com/ls1intum/Artemis/commit/dd437989d6fb8b22dfb81fa2a0e15825e2678426", "message": "Add test case for create example result endpoint", "committedDate": "2020-02-09T21:39:06Z", "type": "commit"}, {"oid": "e1061568d064d257225cc2f23ceffdaf3ba29be0", "url": "https://github.com/ls1intum/Artemis/commit/e1061568d064d257225cc2f23ceffdaf3ba29be0", "message": "Add test case for create result for external submission endpoint", "committedDate": "2020-02-09T22:02:32Z", "type": "commit"}, {"oid": "a2e0a76ed738120acc533b233f0015d0dad9d63f", "url": "https://github.com/ls1intum/Artemis/commit/a2e0a76ed738120acc533b233f0015d0dad9d63f", "message": "Additional test case for create result for external submission endpoint", "committedDate": "2020-02-10T10:39:59Z", "type": "commit"}, {"oid": "04a9313269f44ee5f85f2dfd04d5209e84205e33", "url": "https://github.com/ls1intum/Artemis/commit/04a9313269f44ee5f85f2dfd04d5209e84205e33", "message": "Simplified existing test cases for creating manual result for programming exercise", "committedDate": "2020-02-10T11:04:44Z", "type": "commit"}, {"oid": "a1c706b10af45f6c13b9c28e16cb6fd018493fb2", "url": "https://github.com/ls1intum/Artemis/commit/a1c706b10af45f6c13b9c28e16cb6fd018493fb2", "message": "Add more test cases for create manual programming result endpoint", "committedDate": "2020-02-10T12:07:57Z", "type": "commit"}, {"oid": "561c5f120dec552d32716bf7aa9fb65fdac668d0", "url": "https://github.com/ls1intum/Artemis/commit/561c5f120dec552d32716bf7aa9fb65fdac668d0", "message": "Add test case for create result for external submission due date not passed endpoint", "committedDate": "2020-02-10T13:50:52Z", "type": "commit"}, {"oid": "dc1d780f1cf106707898a1e7e6631d05a640b3ef", "url": "https://github.com/ls1intum/Artemis/commit/dc1d780f1cf106707898a1e7e6631d05a640b3ef", "message": "Simplified test cases", "committedDate": "2020-02-10T15:31:50Z", "type": "commit"}, {"oid": "5bd37f73260057528f2dd92c712bb9f525491b63", "url": "https://github.com/ls1intum/Artemis/commit/5bd37f73260057528f2dd92c712bb9f525491b63", "message": "Merge branch 'develop' into chore/test-coverage/result-resource", "committedDate": "2020-02-10T15:40:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNzk3NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r377917975", "bodyText": "wrong style, please use doReturn...when\nMake sure to check other tests before implementing something wrong", "author": "krusche", "createdAt": "2020-02-11T21:44:42Z", "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "diffHunk": "@@ -294,23 +289,66 @@ public void createManualProgrammingExerciseResult() throws Exception {\n         assertThat(response.getFeedbacks().size()).isEqualTo(result.getFeedbacks().size());\n     }\n \n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_manualResultsNotAllowed() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));", "originalCommit": "5bd37f73260057528f2dd92c712bb9f525491b63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2MTM1Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r380361357", "bodyText": "Well I used the current test implementation. But yes I switched to this syntax. I see it offers a bit better type check.", "author": "maxr96", "createdAt": "2020-02-17T20:49:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNzk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "267f5b10bf06c23083b099fc750edf6cdcf75e3b", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java\nindex aba4f342db..f9365a088e 100644\n--- a/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java\n\n@@ -273,15 +271,8 @@ public class ResultServiceIntegrationTest extends AbstractSpringIntegrationTest\n     @WithMockUser(value = \"tutor1\", roles = \"TA\")\n     public void createManualProgrammingExerciseResult() throws Exception {\n         var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n-\n-        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n-        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n-        result.setFeedbacks(feedbacks);\n         result.setParticipation(participation);\n \n-        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n-        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n-\n         Result response = request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class);\n         assertThat(response.getResultString()).isEqualTo(result.getResultString());\n         assertThat(response.getSubmission()).isNotNull();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxODMxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r377918315", "bodyText": "if you mock this multiple times, please move it into the method\n@beforeeach\npublic void init() {}", "author": "krusche", "createdAt": "2020-02-11T21:45:27Z", "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "diffHunk": "@@ -294,23 +289,66 @@ public void createManualProgrammingExerciseResult() throws Exception {\n         assertThat(response.getFeedbacks().size()).isEqualTo(result.getFeedbacks().size());\n     }\n \n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_manualResultsNotAllowed() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n+\n+        request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_resultExists() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+        result = resultRepository.save(result);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";", "originalCommit": "5bd37f73260057528f2dd92c712bb9f525491b63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2MTU0Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r380361546", "bodyText": "True. I moved the part of creating result and mocking with dummy hash into the @BeforeEach method", "author": "maxr96", "createdAt": "2020-02-17T20:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxODMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "267f5b10bf06c23083b099fc750edf6cdcf75e3b", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java\nindex aba4f342db..f9365a088e 100644\n--- a/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java\n\n@@ -273,15 +271,8 @@ public class ResultServiceIntegrationTest extends AbstractSpringIntegrationTest\n     @WithMockUser(value = \"tutor1\", roles = \"TA\")\n     public void createManualProgrammingExerciseResult() throws Exception {\n         var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n-\n-        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n-        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n-        result.setFeedbacks(feedbacks);\n         result.setParticipation(participation);\n \n-        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n-        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n-\n         Result response = request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class);\n         assertThat(response.getResultString()).isEqualTo(result.getResultString());\n         assertThat(response.getSubmission()).isNotNull();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxODM3Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r377918373", "bodyText": "wrong style", "author": "krusche", "createdAt": "2020-02-11T21:45:36Z", "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "diffHunk": "@@ -294,23 +289,66 @@ public void createManualProgrammingExerciseResult() throws Exception {\n         assertThat(response.getFeedbacks().size()).isEqualTo(result.getFeedbacks().size());\n     }\n \n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_manualResultsNotAllowed() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n+\n+        request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_resultExists() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+        result = resultRepository.save(result);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n+\n+        request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_resultPropertyMissing() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n+        Result result = new Result();\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));", "originalCommit": "5bd37f73260057528f2dd92c712bb9f525491b63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2MTU4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r380361587", "bodyText": "Changed it", "author": "maxr96", "createdAt": "2020-02-17T20:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxODM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "267f5b10bf06c23083b099fc750edf6cdcf75e3b", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java\nindex aba4f342db..f9365a088e 100644\n--- a/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java\n\n@@ -273,15 +271,8 @@ public class ResultServiceIntegrationTest extends AbstractSpringIntegrationTest\n     @WithMockUser(value = \"tutor1\", roles = \"TA\")\n     public void createManualProgrammingExerciseResult() throws Exception {\n         var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n-\n-        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n-        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n-        result.setFeedbacks(feedbacks);\n         result.setParticipation(participation);\n \n-        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n-        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n-\n         Result response = request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class);\n         assertThat(response.getResultString()).isEqualTo(result.getResultString());\n         assertThat(response.getSubmission()).isNotNull();\n"}}, {"oid": "74e4f681cfa53d49bdd8b01fda1e71c4b5e33d2c", "url": "https://github.com/ls1intum/Artemis/commit/74e4f681cfa53d49bdd8b01fda1e71c4b5e33d2c", "message": "Merge branch 'develop' into chore/test-coverage/result-resource", "committedDate": "2020-02-17T19:14:00Z", "type": "commit"}, {"oid": "267f5b10bf06c23083b099fc750edf6cdcf75e3b", "url": "https://github.com/ls1intum/Artemis/commit/267f5b10bf06c23083b099fc750edf6cdcf75e3b", "message": "Changes according to code review comments", "committedDate": "2020-02-17T20:48:33Z", "type": "commit"}, {"oid": "7ac5bc4c266ee28465825e24e13d26962770b395", "url": "https://github.com/ls1intum/Artemis/commit/7ac5bc4c266ee28465825e24e13d26962770b395", "message": "Merge remote-tracking branch 'origin/chore/test-coverage/result-resource' into chore/test-coverage/result-resource", "committedDate": "2020-02-17T20:48:43Z", "type": "commit"}]}