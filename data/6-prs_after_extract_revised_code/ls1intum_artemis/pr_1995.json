{"pr_number": 1995, "pr_title": "Plagiarism checks for programming exercises", "pr_createdAt": "2020-08-05T08:22:29Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1995", "timeline": [{"oid": "3cfc7811b8a35ef304f845aadaa04b8104ccef7a", "url": "https://github.com/ls1intum/Artemis/commit/3cfc7811b8a35ef304f845aadaa04b8104ccef7a", "message": "add plagiarism check for programming exercises using JPlag", "committedDate": "2020-08-05T05:57:05Z", "type": "commit"}, {"oid": "f024eb5f3ba0cc34128be4e30c68f3c0da9d36e4", "url": "https://github.com/ls1intum/Artemis/commit/f024eb5f3ba0cc34128be4e30c68f3c0da9d36e4", "message": "refactor zip util service", "committedDate": "2020-08-05T07:09:13Z", "type": "commit"}, {"oid": "e8ef5a03a3660c995d4fc9f39f6292cd3c98554d", "url": "https://github.com/ls1intum/Artemis/commit/e8ef5a03a3660c995d4fc9f39f6292cd3c98554d", "message": "fix warnings", "committedDate": "2020-08-05T07:53:17Z", "type": "commit"}, {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68", "url": "https://github.com/ls1intum/Artemis/commit/2202db9899161f18be9e38be9c3788fc62bd7a68", "message": "fix refactoring mistake", "committedDate": "2020-08-05T11:08:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNzU0MA==", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465807540", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId);\n          \n          \n            \n                    if (programmingExercise.isPresent()) {\n          \n          \n            \n                        return programmingExercise.get();\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        throw new EntityNotFoundException(\"programming exercise not found\");\n          \n          \n            \n                    }\n          \n          \n            \n                    return programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId)\n          \n          \n            \n                        .orElseThrow(() -> new EntityNotFoundException(\"programming exercise not found\"));", "author": "jpbernius", "createdAt": "2020-08-05T15:21:49Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseService.java", "diffHunk": "@@ -480,6 +485,23 @@ public ProgrammingExercise findByIdWithEagerStudentParticipations(long programmi\n         }\n     }\n \n+    /**\n+     * Find a programming exercise by its id, with eagerly loaded studentParticipations, template and solution participation\n+     *\n+     * @param programmingExerciseId of the programming exercise.\n+     * @return The programming exercise related to the given id\n+     * @throws EntityNotFoundException the programming exercise could not be found.\n+     */\n+    public ProgrammingExercise findByIdWithAllParticipations(long programmingExerciseId) throws EntityNotFoundException {\n+        Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId);\n+        if (programmingExercise.isPresent()) {\n+            return programmingExercise.get();\n+        }\n+        else {\n+            throw new EntityNotFoundException(\"programming exercise not found\");\n+        }", "originalCommit": "2202db9899161f18be9e38be9c3788fc62bd7a68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49d8529f4a3a6964d4e98bdbd3da46cacb049192", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseService.java\nindex 85a43844b7..3b4c5ed8b5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseService.java\n\n@@ -493,13 +493,7 @@ public class ProgrammingExerciseService {\n      * @throws EntityNotFoundException the programming exercise could not be found.\n      */\n     public ProgrammingExercise findByIdWithAllParticipations(long programmingExerciseId) throws EntityNotFoundException {\n-        Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId);\n-        if (programmingExercise.isPresent()) {\n-            return programmingExercise.get();\n-        }\n-        else {\n-            throw new EntityNotFoundException(\"programming exercise not found\");\n-        }\n+        return programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).orElseThrow(() -> new EntityNotFoundException(\"programming exercise not found\"));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMDg1MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465810851", "bodyText": "If I run this while an exercise is still open: Would this discard changes in the online code editor?", "author": "jpbernius", "createdAt": "2020-08-05T15:26:34Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "diffHunk": "@@ -149,6 +157,116 @@ private void deleteTempZipRepoFiles(List<Path> pathsToZipeedRepos) {\n         }\n     }\n \n+    /**\n+     * downloads all repos of the exercise and runs JPlag\n+     *\n+     * @param programmingExerciseId the id of the programming exercises which should be checked\n+     * @return a zip file that can be returned to the client\n+     * @throws ExitException is thrown if JPlag exits unexpectedly\n+     * @throws IOException is thrown for file handling errors\n+     */\n+    public File checkPlagiarism(long programmingExerciseId) throws ExitException, IOException {\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).get();\n+\n+        programmingExercise.getStudentParticipations().parallelStream().forEach(participation -> {\n+            var programmingExerciseParticipation = (ProgrammingExerciseParticipation) participation;\n+            try {\n+                if (programmingExerciseParticipation.getRepositoryUrlAsUrl() == null) {\n+                    log.warn(\"Ignore participation \" + participation.getId() + \" for export, because its repository URL is null\");\n+                    return;\n+                }\n+                Repository repo = gitService.getOrCheckoutRepository(programmingExerciseParticipation, REPO_DOWNLOAD_CLONE_PATH);\n+                gitService.resetToOriginMaster(repo); // start with clean state", "originalCommit": "2202db9899161f18be9e38be9c3788fc62bd7a68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzNzA1MA==", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465937050", "bodyText": "no, this is done in a separate path REPO_DOWNLOAD_CLONE_PATH", "author": "krusche", "createdAt": "2020-08-05T18:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMDg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "49d8529f4a3a6964d4e98bdbd3da46cacb049192", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java\nindex 4345e934f6..473ba9a84e 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java\n\n@@ -205,8 +205,7 @@ public class ProgrammingExerciseExportService {\n         }\n \n         var projectKey = programmingExercise.getProjectKey();\n-        var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n-                : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;\n+        var outputFolder = REPO_DOWNLOAD_CLONE_PATH + (REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? \"\" : File.separator) + projectKey + \"-\" + output;\n \n         File outputFolderFile = new File(outputFolder);\n         outputFolderFile.mkdirs();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMzgxOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465813819", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n          \n          \n            \n                            : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;\n          \n          \n            \n                    var outputFolder = REPO_DOWNLOAD_CLONE_PATH + (REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? \"\" : File.separator) + projectKey + \"-\" + output;", "author": "jpbernius", "createdAt": "2020-08-05T15:30:52Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "diffHunk": "@@ -149,6 +157,116 @@ private void deleteTempZipRepoFiles(List<Path> pathsToZipeedRepos) {\n         }\n     }\n \n+    /**\n+     * downloads all repos of the exercise and runs JPlag\n+     *\n+     * @param programmingExerciseId the id of the programming exercises which should be checked\n+     * @return a zip file that can be returned to the client\n+     * @throws ExitException is thrown if JPlag exits unexpectedly\n+     * @throws IOException is thrown for file handling errors\n+     */\n+    public File checkPlagiarism(long programmingExerciseId) throws ExitException, IOException {\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).get();\n+\n+        programmingExercise.getStudentParticipations().parallelStream().forEach(participation -> {\n+            var programmingExerciseParticipation = (ProgrammingExerciseParticipation) participation;\n+            try {\n+                if (programmingExerciseParticipation.getRepositoryUrlAsUrl() == null) {\n+                    log.warn(\"Ignore participation \" + participation.getId() + \" for export, because its repository URL is null\");\n+                    return;\n+                }\n+                Repository repo = gitService.getOrCheckoutRepository(programmingExerciseParticipation, REPO_DOWNLOAD_CLONE_PATH);\n+                gitService.resetToOriginMaster(repo); // start with clean state\n+\n+                // TODO: offer the following options in the client\n+                // 1) filter empty submissions, i.e. repositories with no student commits\n+                // 2) filter submissions with a result score of 0%\n+\n+                repo.close();\n+            }\n+            catch (GitException | GitAPIException | InterruptedException ex) {\n+                log.error(\"clone student repository \" + programmingExerciseParticipation.getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                        + \"' did not work as expected: \" + ex.getMessage());\n+            }\n+        });\n+\n+        var output = \"output\";\n+        var templateRepoName = \"\";\n+        // clone the template repo\n+        try {\n+            Repository templateRepo = gitService.getOrCheckoutRepository(programmingExercise.getTemplateParticipation(), REPO_DOWNLOAD_CLONE_PATH);\n+            templateRepoName = versionControlService.get().getRepositorySlugFromUrl(programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl());\n+            gitService.resetToOriginMaster(templateRepo); // start with clean state\n+            templateRepo.close();\n+        }\n+        catch (GitException | GitAPIException | InterruptedException ex) {\n+            log.error(\"clone template repository \" + programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                    + \"' did not work as expected: \" + ex.getMessage());\n+        }\n+\n+        var projectKey = programmingExercise.getProjectKey();\n+        var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n+                : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;", "originalCommit": "2202db9899161f18be9e38be9c3788fc62bd7a68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49d8529f4a3a6964d4e98bdbd3da46cacb049192", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java\nindex 4345e934f6..473ba9a84e 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java\n\n@@ -205,8 +205,7 @@ public class ProgrammingExerciseExportService {\n         }\n \n         var projectKey = programmingExercise.getProjectKey();\n-        var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n-                : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;\n+        var outputFolder = REPO_DOWNLOAD_CLONE_PATH + (REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? \"\" : File.separator) + projectKey + \"-\" + output;\n \n         File outputFolderFile = new File(outputFolder);\n         outputFolderFile.mkdirs();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxNDY2OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465814669", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var repoFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey;\n          \n          \n            \n                    var repoFolder = REPO_DOWNLOAD_CLONE_PATH + (REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? \"\" : File.separator) + projectKey;", "author": "jpbernius", "createdAt": "2020-08-05T15:32:08Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "diffHunk": "@@ -149,6 +157,116 @@ private void deleteTempZipRepoFiles(List<Path> pathsToZipeedRepos) {\n         }\n     }\n \n+    /**\n+     * downloads all repos of the exercise and runs JPlag\n+     *\n+     * @param programmingExerciseId the id of the programming exercises which should be checked\n+     * @return a zip file that can be returned to the client\n+     * @throws ExitException is thrown if JPlag exits unexpectedly\n+     * @throws IOException is thrown for file handling errors\n+     */\n+    public File checkPlagiarism(long programmingExerciseId) throws ExitException, IOException {\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).get();\n+\n+        programmingExercise.getStudentParticipations().parallelStream().forEach(participation -> {\n+            var programmingExerciseParticipation = (ProgrammingExerciseParticipation) participation;\n+            try {\n+                if (programmingExerciseParticipation.getRepositoryUrlAsUrl() == null) {\n+                    log.warn(\"Ignore participation \" + participation.getId() + \" for export, because its repository URL is null\");\n+                    return;\n+                }\n+                Repository repo = gitService.getOrCheckoutRepository(programmingExerciseParticipation, REPO_DOWNLOAD_CLONE_PATH);\n+                gitService.resetToOriginMaster(repo); // start with clean state\n+\n+                // TODO: offer the following options in the client\n+                // 1) filter empty submissions, i.e. repositories with no student commits\n+                // 2) filter submissions with a result score of 0%\n+\n+                repo.close();\n+            }\n+            catch (GitException | GitAPIException | InterruptedException ex) {\n+                log.error(\"clone student repository \" + programmingExerciseParticipation.getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                        + \"' did not work as expected: \" + ex.getMessage());\n+            }\n+        });\n+\n+        var output = \"output\";\n+        var templateRepoName = \"\";\n+        // clone the template repo\n+        try {\n+            Repository templateRepo = gitService.getOrCheckoutRepository(programmingExercise.getTemplateParticipation(), REPO_DOWNLOAD_CLONE_PATH);\n+            templateRepoName = versionControlService.get().getRepositorySlugFromUrl(programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl());\n+            gitService.resetToOriginMaster(templateRepo); // start with clean state\n+            templateRepo.close();\n+        }\n+        catch (GitException | GitAPIException | InterruptedException ex) {\n+            log.error(\"clone template repository \" + programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                    + \"' did not work as expected: \" + ex.getMessage());\n+        }\n+\n+        var projectKey = programmingExercise.getProjectKey();\n+        var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n+                : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;\n+\n+        File outputFolderFile = new File(outputFolder);\n+        outputFolderFile.mkdirs();\n+\n+        var programmingLanguage = \"\";\n+        switch (programmingExercise.getProgrammingLanguage()) {\n+            case JAVA:\n+                programmingLanguage = \"java19\";\n+                break;\n+            case C:\n+                programmingLanguage = \"c\";\n+                break;\n+            case PYTHON:\n+                programmingLanguage = \"python3\";\n+                break;\n+        }\n+\n+        var repoFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey;", "originalCommit": "2202db9899161f18be9e38be9c3788fc62bd7a68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49d8529f4a3a6964d4e98bdbd3da46cacb049192", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java\nindex 4345e934f6..473ba9a84e 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java\n\n@@ -205,8 +205,7 @@ public class ProgrammingExerciseExportService {\n         }\n \n         var projectKey = programmingExercise.getProjectKey();\n-        var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n-                : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;\n+        var outputFolder = REPO_DOWNLOAD_CLONE_PATH + (REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? \"\" : File.separator) + projectKey + \"-\" + output;\n \n         File outputFolderFile = new File(outputFolder);\n         outputFolderFile.mkdirs();\n"}}, {"oid": "49d8529f4a3a6964d4e98bdbd3da46cacb049192", "url": "https://github.com/ls1intum/Artemis/commit/49d8529f4a3a6964d4e98bdbd3da46cacb049192", "message": "implement suggestions in PR reviews. Thank you\n\nAlso removed unnecessary $window variable in download.util", "committedDate": "2020-08-06T07:17:41Z", "type": "commit"}, {"oid": "1bfa76e27d6cf2bd82d91152261b29e0b06a2d7a", "url": "https://github.com/ls1intum/Artemis/commit/1bfa76e27d6cf2bd82d91152261b29e0b06a2d7a", "message": "remove WindowRef", "committedDate": "2020-08-06T07:56:11Z", "type": "commit"}, {"oid": "6d798b28eac2133801a0abfac08f52f9286ffc25", "url": "https://github.com/ls1intum/Artemis/commit/6d798b28eac2133801a0abfac08f52f9286ffc25", "message": "fix warning", "committedDate": "2020-08-06T08:27:49Z", "type": "commit"}, {"oid": "8b032ce7e5fb315721f170deb6b0ee857e2e0a2b", "url": "https://github.com/ls1intum/Artemis/commit/8b032ce7e5fb315721f170deb6b0ee857e2e0a2b", "message": "fix jplag for c programming exercises", "committedDate": "2020-08-06T08:55:17Z", "type": "commit"}, {"oid": "975c6dc05c42056e198d944c7e37f12b412edd40", "url": "https://github.com/ls1intum/Artemis/commit/975c6dc05c42056e198d944c7e37f12b412edd40", "message": "fix codacy issues", "committedDate": "2020-08-06T09:03:30Z", "type": "commit"}, {"oid": "1ffb45bb255f4582aa21ad38f11767efcf30c727", "url": "https://github.com/ls1intum/Artemis/commit/1ffb45bb255f4582aa21ad38f11767efcf30c727", "message": "refactor long method into multiple ones", "committedDate": "2020-08-06T09:35:35Z", "type": "commit"}, {"oid": "ca2efa39cb8fc83db183fd9c22d81bec959923da", "url": "https://github.com/ls1intum/Artemis/commit/ca2efa39cb8fc83db183fd9c22d81bec959923da", "message": "Merge branch 'develop' into feature/jplag", "committedDate": "2020-08-06T09:43:09Z", "type": "commit"}, {"oid": "d6ccbad910b925d567416f71f0ff646c5e5311df", "url": "https://github.com/ls1intum/Artemis/commit/d6ccbad910b925d567416f71f0ff646c5e5311df", "message": "further code improvements", "committedDate": "2020-08-06T09:54:35Z", "type": "commit"}, {"oid": "867d7d8ee131335773460c919e311192252a82e3", "url": "https://github.com/ls1intum/Artemis/commit/867d7d8ee131335773460c919e311192252a82e3", "message": "Merge branch 'feature/jplag' of https://github.com/ls1intum/Artemis into feature/jplag", "committedDate": "2020-08-06T09:54:42Z", "type": "commit"}, {"oid": "052c9e160f67b12588b691e427c84dd5c084e2e5", "url": "https://github.com/ls1intum/Artemis/commit/052c9e160f67b12588b691e427c84dd5c084e2e5", "message": "fix doc issue", "committedDate": "2020-08-06T10:44:42Z", "type": "commit"}, {"oid": "b9a150990123ece58edeb4e4581db170f168f533", "url": "https://github.com/ls1intum/Artemis/commit/b9a150990123ece58edeb4e4581db170f168f533", "message": "Merge branch 'develop' into feature/jplag", "committedDate": "2020-08-06T10:45:01Z", "type": "commit"}, {"oid": "844a5f20090634c3834a6a439e65c8df693d08ca", "url": "https://github.com/ls1intum/Artemis/commit/844a5f20090634c3834a6a439e65c8df693d08ca", "message": "Merge branch 'develop' into feature/jplag", "committedDate": "2020-08-06T11:26:46Z", "type": "commit"}, {"oid": "35fe2c3bedd4bf7ac1b382acdd9c5c65ca344f21", "url": "https://github.com/ls1intum/Artemis/commit/35fe2c3bedd4bf7ac1b382acdd9c5c65ca344f21", "message": "improve code quality", "committedDate": "2020-08-06T11:54:28Z", "type": "commit"}, {"oid": "139286cb954ce87301683f57739e705f55db0bc3", "url": "https://github.com/ls1intum/Artemis/commit/139286cb954ce87301683f57739e705f55db0bc3", "message": "Merge branch 'develop' into feature/jplag", "committedDate": "2020-08-06T13:15:58Z", "type": "commit"}]}