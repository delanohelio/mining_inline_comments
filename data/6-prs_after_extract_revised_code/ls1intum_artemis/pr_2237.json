{"pr_number": 2237, "pr_title": "Improve server side git url handling and server test improvements", "pr_createdAt": "2020-10-20T00:09:32Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2237", "timeline": [{"oid": "fee37851ba86ce01052e396a9e3b2ee391b51f90", "url": "https://github.com/ls1intum/Artemis/commit/fee37851ba86ce01052e396a9e3b2ee391b51f90", "message": "extract new UrlService to remove duplicated code\n\nalso add ProgrammingExerciseTestService based on delegation to align Bitbucket+Bamboo with Gitlab+Jenkins tests and to avoid duplicated code in those", "committedDate": "2020-10-19T23:28:39Z", "type": "commit"}, {"oid": "cbd19540ae573d73e9674f572547fc956d4627b5", "url": "https://github.com/ls1intum/Artemis/commit/cbd19540ae573d73e9674f572547fc956d4627b5", "message": "Merge branch 'develop' into chore/url-service-test-improvements", "committedDate": "2020-10-19T23:30:58Z", "type": "commit"}, {"oid": "18fc3563d804f873486f12cdb52f5aaabf30275e", "url": "https://github.com/ls1intum/Artemis/commit/18fc3563d804f873486f12cdb52f5aaabf30275e", "message": "Merge branch 'develop' into chore/url-service-test-improvements\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "committedDate": "2020-10-20T00:14:37Z", "type": "commit"}, {"oid": "d59f944e1fdbba7a5c22929a46a23bbb661c73cf", "url": "https://github.com/ls1intum/Artemis/commit/d59f944e1fdbba7a5c22929a46a23bbb661c73cf", "message": "Merge branch 'develop' into chore/url-service-test-improvements", "committedDate": "2020-10-20T00:19:06Z", "type": "commit"}, {"oid": "2e50ef9e61e981efa8557b20e941423a296608ec", "url": "https://github.com/ls1intum/Artemis/commit/2e50ef9e61e981efa8557b20e941423a296608ec", "message": "update kotlin version in pom.xml", "committedDate": "2020-10-20T00:23:44Z", "type": "commit"}, {"oid": "6c25a466d04728ee3f92f95c05ec048a66ff0303", "url": "https://github.com/ls1intum/Artemis/commit/6c25a466d04728ee3f92f95c05ec048a66ff0303", "message": "fix testing issues", "committedDate": "2020-10-20T00:38:59Z", "type": "commit"}, {"oid": "c3b202c2fc9b2028f1545ba01e36da3e97b1df19", "url": "https://github.com/ls1intum/Artemis/commit/c3b202c2fc9b2028f1545ba01e36da3e97b1df19", "message": "fix another test issue", "committedDate": "2020-10-20T00:47:37Z", "type": "commit"}, {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391", "url": "https://github.com/ls1intum/Artemis/commit/2551e13a2f95576995b120d70b67de4bcdb74391", "message": "remove duplicated code for kotlin + java test by using parameterized tests", "committedDate": "2020-10-20T01:04:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU0OA==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149548", "bodyText": "Codacy found an issue: Perhaps 'continuousIntegrationService' could be replaced by a local variable.", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:28Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+\n+    public final static String REPOBASEURL = \"/api/repository/\";\n+\n+    public final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n+\n+    public LocalRepository exerciseRepo = new LocalRepository();\n+\n+    public LocalRepository testRepo = new LocalRepository();\n+\n+    public LocalRepository solutionRepo = new LocalRepository();\n+\n+    public LocalRepository studentRepo = new LocalRepository();\n+\n+    public LocalRepository studentTeamRepo = new LocalRepository();\n+\n+    private VersionControlService versionControlService;\n+\n+    // not needed right now but maybe in the future\n+    private ContinuousIntegrationService continuousIntegrationService;\n+\n+    private MockDelegate mockDelegate;\n+\n+    public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n+        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+    }\n+\n+    public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n+        this.mockDelegate = mockDelegate;\n+        this.versionControlService = versionControlService;", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\nindex 0c4ca135f1..83819d4b61 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n\n@@ -115,7 +115,7 @@ public class ProgrammingExerciseTestService {\n     private MockDelegate mockDelegate;\n \n     public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n-        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+        return database.addUsers(ProgrammingExerciseTestService.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n     }\n \n     public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU1MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149551", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:29Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU1Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149553", "bodyText": "Codacy found an issue: The public constant name 'studentLogin' doesn't match '[A-Z][A-Z_0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:30Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\nindex 0c4ca135f1..83819d4b61 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n\n@@ -115,7 +115,7 @@ public class ProgrammingExerciseTestService {\n     private MockDelegate mockDelegate;\n \n     public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n-        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+        return database.addUsers(ProgrammingExerciseTestService.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n     }\n \n     public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU1Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149557", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:31Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @Autowired\n-    protected RequestUtilService request;\n+    @Override\n+    public void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149567", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:32Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU3NA==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149574", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:32Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+\n+    public final static String REPOBASEURL = \"/api/repository/\";\n+\n+    public final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n+\n+    public LocalRepository exerciseRepo = new LocalRepository();\n+\n+    public LocalRepository testRepo = new LocalRepository();\n+\n+    public LocalRepository solutionRepo = new LocalRepository();\n+\n+    public LocalRepository studentRepo = new LocalRepository();\n+\n+    public LocalRepository studentTeamRepo = new LocalRepository();\n+\n+    private VersionControlService versionControlService;\n+\n+    // not needed right now but maybe in the future\n+    private ContinuousIntegrationService continuousIntegrationService;\n+\n+    private MockDelegate mockDelegate;\n+\n+    public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n+        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+    }\n+\n+    public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n+        this.mockDelegate = mockDelegate;\n+        this.versionControlService = versionControlService;\n+        this.continuousIntegrationService = continuousIntegrationService;\n+\n+        course = database.addEmptyCourse();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        examExercise = ModelFactory.generateProgrammingExerciseForExam(exerciseGroup);\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+\n+        exerciseRepo.configureRepos(\"exerciseLocalRepo\", \"exerciseOriginRepo\");\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+        solutionRepo.configureRepos(\"solutionLocalRepo\", \"solutionOriginRepo\");\n+        studentRepo.configureRepos(\"studentRepo\", \"studentOriginRepo\");\n+        studentTeamRepo.configureRepos(\"studentTeamRepo\", \"studentTeamOriginRepo\");\n+\n+        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n+        setupRepositoryMocksParticipant(exercise, studentLogin, studentRepo);\n+        setupRepositoryMocksParticipant(exercise, teamShortName, studentTeamRepo);\n+    }\n+\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        exerciseRepo.resetLocalRepo();\n+        testRepo.resetLocalRepo();\n+        solutionRepo.resetLocalRepo();\n+        studentRepo.resetLocalRepo();\n+        studentTeamRepo.resetLocalRepo();\n+    }\n+\n+    public void setupRepositoryMocks(ProgrammingExercise exercise) throws Exception {\n+        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n+    }\n+\n+    public void setupRepositoryMocks(ProgrammingExercise exercise, LocalRepository exerciseRepository, LocalRepository solutionRepository, LocalRepository testRepository)\n+            throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        var exerciseRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(exerciseRepository.originRepoFile);\n+        var testRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(testRepository.originRepoFile);\n+        var solutionRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(solutionRepository.originRepoFile);\n+\n+        doReturn(exerciseRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, exerciseRepoName);\n+        doReturn(testRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, testRepoName);\n+        doReturn(solutionRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, solutionRepoName);\n+\n+        doReturn(gitService.getRepositoryByLocalPath(exerciseRepository.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(exerciseRepoTestUrl.getURL(), true);", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\nindex 0c4ca135f1..83819d4b61 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n\n@@ -115,7 +115,7 @@ public class ProgrammingExerciseTestService {\n     private MockDelegate mockDelegate;\n \n     public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n-        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+        return database.addUsers(ProgrammingExerciseTestService.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n     }\n \n     public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU4MA==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149580", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:33Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU4NA==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149584", "bodyText": "Codacy found an issue: Avoid unused private fields such as 'log'.", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:34Z", "path": "src/main/java/de/tum/in/www1/artemis/service/UrlService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.exception.VersionControlException;\n+\n+@Service\n+public class UrlService {\n+\n+    private final Logger log = LoggerFactory.getLogger(UrlService.class);", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU4OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149589", "bodyText": "Codacy found an issue: Expected @param tag for 'exercise'.", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:35Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+\n+    public final static String REPOBASEURL = \"/api/repository/\";\n+\n+    public final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n+\n+    public LocalRepository exerciseRepo = new LocalRepository();\n+\n+    public LocalRepository testRepo = new LocalRepository();\n+\n+    public LocalRepository solutionRepo = new LocalRepository();\n+\n+    public LocalRepository studentRepo = new LocalRepository();\n+\n+    public LocalRepository studentTeamRepo = new LocalRepository();\n+\n+    private VersionControlService versionControlService;\n+\n+    // not needed right now but maybe in the future\n+    private ContinuousIntegrationService continuousIntegrationService;\n+\n+    private MockDelegate mockDelegate;\n+\n+    public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n+        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+    }\n+\n+    public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n+        this.mockDelegate = mockDelegate;\n+        this.versionControlService = versionControlService;\n+        this.continuousIntegrationService = continuousIntegrationService;\n+\n+        course = database.addEmptyCourse();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        examExercise = ModelFactory.generateProgrammingExerciseForExam(exerciseGroup);\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+\n+        exerciseRepo.configureRepos(\"exerciseLocalRepo\", \"exerciseOriginRepo\");\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+        solutionRepo.configureRepos(\"solutionLocalRepo\", \"solutionOriginRepo\");\n+        studentRepo.configureRepos(\"studentRepo\", \"studentOriginRepo\");\n+        studentTeamRepo.configureRepos(\"studentTeamRepo\", \"studentTeamOriginRepo\");\n+\n+        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n+        setupRepositoryMocksParticipant(exercise, studentLogin, studentRepo);\n+        setupRepositoryMocksParticipant(exercise, teamShortName, studentTeamRepo);\n+    }\n+\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        exerciseRepo.resetLocalRepo();\n+        testRepo.resetLocalRepo();\n+        solutionRepo.resetLocalRepo();\n+        studentRepo.resetLocalRepo();\n+        studentTeamRepo.resetLocalRepo();\n+    }\n+\n+    public void setupRepositoryMocks(ProgrammingExercise exercise) throws Exception {\n+        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n+    }\n+\n+    public void setupRepositoryMocks(ProgrammingExercise exercise, LocalRepository exerciseRepository, LocalRepository solutionRepository, LocalRepository testRepository)\n+            throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        var exerciseRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(exerciseRepository.originRepoFile);\n+        var testRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(testRepository.originRepoFile);\n+        var solutionRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(solutionRepository.originRepoFile);\n+\n+        doReturn(exerciseRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, exerciseRepoName);\n+        doReturn(testRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, testRepoName);\n+        doReturn(solutionRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, solutionRepoName);\n+\n+        doReturn(gitService.getRepositoryByLocalPath(exerciseRepository.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(exerciseRepoTestUrl.getURL(), true);\n+        doReturn(gitService.getRepositoryByLocalPath(testRepository.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(testRepoTestUrl.getURL(), true);\n+        doReturn(gitService.getRepositoryByLocalPath(solutionRepository.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(solutionRepoTestUrl.getURL(), true);\n+\n+        mockDelegate.mockGetRepositorySlugFromUrl(exerciseRepoName, exerciseRepoTestUrl.getURL());\n+        mockDelegate.mockGetRepositorySlugFromUrl(testRepoName, testRepoTestUrl.getURL());\n+        mockDelegate.mockGetRepositorySlugFromUrl(solutionRepoName, solutionRepoTestUrl.getURL());\n+\n+        mockDelegate.mockGetProjectKeyFromUrl(projectKey, exerciseRepoTestUrl.getURL());\n+        mockDelegate.mockGetProjectKeyFromUrl(projectKey, testRepoTestUrl.getURL());\n+        mockDelegate.mockGetProjectKeyFromUrl(projectKey, solutionRepoTestUrl.getURL());\n+        mockDelegate.mockGetProjectKeyFromAnyUrl(projectKey);\n+    }\n+\n+    /**\n+     * can be invoked for teams and students\n+     */\n+    public void setupRepositoryMocksParticipant(ProgrammingExercise exercise, String participantName, LocalRepository studentRepo) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String participantRepoName = projectKey.toLowerCase() + \"-\" + participantName;\n+        var participantRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(studentRepo.originRepoFile);\n+        doReturn(participantRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, participantRepoName);\n+        doReturn(gitService.getRepositoryByLocalPath(studentRepo.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(participantRepoTestUrl.getURL(), true);\n+        mockDelegate.mockGetRepositorySlugFromUrl(participantRepoName, participantRepoTestUrl.getURL());\n+        mockDelegate.mockGetProjectKeyFromUrl(projectKey, participantRepoTestUrl.getURL());\n+    }\n+\n+    // TEST\n+    public void createProgrammingExercise_sequential_validExercise_created() throws Exception {\n+        exercise.setSequentialTestRuns(true);\n+        mockDelegate.mockConnectorRequestsForSetup(exercise);\n+        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+    }\n+", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\nindex 0c4ca135f1..83819d4b61 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n\n@@ -115,7 +115,7 @@ public class ProgrammingExerciseTestService {\n     private MockDelegate mockDelegate;\n \n     public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n-        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+        return database.addUsers(ProgrammingExerciseTestService.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n     }\n \n     public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU5Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149593", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:36Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @Autowired\n-    protected RequestUtilService request;\n+    @Override\n+    public void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n+            throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @AfterEach\n-    public void resetSpyBeans() {\n-        Mockito.reset(ltiService, continuousIntegrationService, versionControlService, jenkinsServer, gitService, groupNotificationService, websocketMessagingService,\n-                plantUmlService, messagingTemplate, programmingSubmissionService);\n+    @Override\n+    public void mockRemoveRepositoryAccess(ProgrammingExercise exercise, Team team, User firstStudent) throws URISyntaxException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockRepositoryWritePermissions(Team team, User newStudent, ProgrammingExercise exercise) throws URISyntaxException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockRetrieveArtifacts(ProgrammingExerciseStudentParticipation participation) throws MalformedURLException, URISyntaxException, JsonProcessingException {", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU5OA==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149598", "bodyText": "Codacy found an issue: Avoid unused private fields such as 'continuousIntegrationService'.", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:37Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+\n+    public final static String REPOBASEURL = \"/api/repository/\";\n+\n+    public final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n+\n+    public LocalRepository exerciseRepo = new LocalRepository();\n+\n+    public LocalRepository testRepo = new LocalRepository();\n+\n+    public LocalRepository solutionRepo = new LocalRepository();\n+\n+    public LocalRepository studentRepo = new LocalRepository();\n+\n+    public LocalRepository studentTeamRepo = new LocalRepository();\n+\n+    private VersionControlService versionControlService;\n+\n+    // not needed right now but maybe in the future\n+    private ContinuousIntegrationService continuousIntegrationService;\n+\n+    private MockDelegate mockDelegate;\n+\n+    public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n+        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+    }\n+\n+    public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n+        this.mockDelegate = mockDelegate;\n+        this.versionControlService = versionControlService;", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\nindex 0c4ca135f1..83819d4b61 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n\n@@ -115,7 +115,7 @@ public class ProgrammingExerciseTestService {\n     private MockDelegate mockDelegate;\n \n     public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n-        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+        return database.addUsers(ProgrammingExerciseTestService.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n     }\n \n     public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYwMA==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149600", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:38Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @Autowired\n-    protected RequestUtilService request;\n+    @Override\n+    public void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n+            throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @AfterEach\n-    public void resetSpyBeans() {\n-        Mockito.reset(ltiService, continuousIntegrationService, versionControlService, jenkinsServer, gitService, groupNotificationService, websocketMessagingService,\n-                plantUmlService, messagingTemplate, programmingSubmissionService);\n+    @Override\n+    public void mockRemoveRepositoryAccess(ProgrammingExercise exercise, Team team, User firstStudent) throws URISyntaxException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockRepositoryWritePermissions(Team team, User newStudent, ProgrammingExercise exercise) throws URISyntaxException {", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYxMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149611", "bodyText": "Codacy found an issue: The public constant name 'teamShortName' doesn't match '[A-Z][A-Z_0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:38Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\nindex 0c4ca135f1..83819d4b61 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n\n@@ -115,7 +115,7 @@ public class ProgrammingExerciseTestService {\n     private MockDelegate mockDelegate;\n \n     public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n-        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+        return database.addUsers(ProgrammingExerciseTestService.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n     }\n \n     public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYxOA==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149618", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:39Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+\n+    public final static String REPOBASEURL = \"/api/repository/\";\n+\n+    public final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n+\n+    public LocalRepository exerciseRepo = new LocalRepository();\n+\n+    public LocalRepository testRepo = new LocalRepository();\n+\n+    public LocalRepository solutionRepo = new LocalRepository();\n+\n+    public LocalRepository studentRepo = new LocalRepository();\n+\n+    public LocalRepository studentTeamRepo = new LocalRepository();\n+\n+    private VersionControlService versionControlService;\n+\n+    // not needed right now but maybe in the future\n+    private ContinuousIntegrationService continuousIntegrationService;\n+\n+    private MockDelegate mockDelegate;\n+\n+    public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n+        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+    }\n+\n+    public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n+        this.mockDelegate = mockDelegate;\n+        this.versionControlService = versionControlService;\n+        this.continuousIntegrationService = continuousIntegrationService;\n+\n+        course = database.addEmptyCourse();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        examExercise = ModelFactory.generateProgrammingExerciseForExam(exerciseGroup);\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+\n+        exerciseRepo.configureRepos(\"exerciseLocalRepo\", \"exerciseOriginRepo\");\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\nindex 0c4ca135f1..83819d4b61 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n\n@@ -115,7 +115,7 @@ public class ProgrammingExerciseTestService {\n     private MockDelegate mockDelegate;\n \n     public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n-        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+        return database.addUsers(ProgrammingExerciseTestService.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n     }\n \n     public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYyMw==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149623", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:40Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @Autowired\n-    protected RequestUtilService request;\n+    @Override\n+    public void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n+            throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @AfterEach\n-    public void resetSpyBeans() {\n-        Mockito.reset(ltiService, continuousIntegrationService, versionControlService, jenkinsServer, gitService, groupNotificationService, websocketMessagingService,\n-                plantUmlService, messagingTemplate, programmingSubmissionService);\n+    @Override\n+    public void mockRemoveRepositoryAccess(ProgrammingExercise exercise, Team team, User firstStudent) throws URISyntaxException {", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYyOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149629", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:41Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @Autowired\n-    protected RequestUtilService request;\n+    @Override\n+    public void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n+            throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @AfterEach\n-    public void resetSpyBeans() {\n-        Mockito.reset(ltiService, continuousIntegrationService, versionControlService, jenkinsServer, gitService, groupNotificationService, websocketMessagingService,\n-                plantUmlService, messagingTemplate, programmingSubmissionService);\n+    @Override\n+    public void mockRemoveRepositoryAccess(ProgrammingExercise exercise, Team team, User firstStudent) throws URISyntaxException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockRepositoryWritePermissions(Team team, User newStudent, ProgrammingExercise exercise) throws URISyntaxException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockRetrieveArtifacts(ProgrammingExerciseStudentParticipation participation) throws MalformedURLException, URISyntaxException, JsonProcessingException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockGetBuildLogs(ProgrammingExerciseStudentParticipation participation, List<BambooBuildResultDTO.BambooBuildLogEntryDTO> logs)", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYzMg==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149632", "bodyText": "Codacy found an issue: The public constant name 'numberOfStudents' doesn't match '[A-Z][A-Z_0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:42Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\nindex 0c4ca135f1..83819d4b61 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java\n\n@@ -115,7 +115,7 @@ public class ProgrammingExerciseTestService {\n     private MockDelegate mockDelegate;\n \n     public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n-        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+        return database.addUsers(ProgrammingExerciseTestService.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n     }\n \n     public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYzNg==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149636", "bodyText": "Codacy found an issue: The instance method name 'runTemplateTests_exercise' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:43Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseTemplateIntegrationTest.java", "diffHunk": "@@ -115,64 +115,36 @@ public void tearDown() throws IOException {\n         solutionRepo.resetLocalRepo();\n     }\n \n-    @Test\n+    @ParameterizedTest\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void runTemplateTests_java_exercise() throws Exception {\n-        mockConnectorRequestsForSetup(exercise);\n-        request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        moveAssignmentSourcesOf(exerciseRepo);\n-        int exitCode = invokeMaven();\n-        assertThat(exitCode).isNotEqualTo(0);\n-\n-        var testResults = readTestReports();\n-        assertThat(testResults).containsExactlyInAnyOrderEntriesOf(Map.of(TestResult.FAILED, 13));\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"KOTLIN\", \"JAVA\" }, mode = EnumSource.Mode.INCLUDE)\n+    public void runTemplateTests_exercise(ProgrammingLanguage language) throws Exception {", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTY0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149641", "bodyText": "Codacy found an issue: The instance method name 'runTemplateTests_solution' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:44Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseTemplateIntegrationTest.java", "diffHunk": "@@ -115,64 +115,36 @@ public void tearDown() throws IOException {\n         solutionRepo.resetLocalRepo();\n     }\n \n-    @Test\n+    @ParameterizedTest\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void runTemplateTests_java_exercise() throws Exception {\n-        mockConnectorRequestsForSetup(exercise);\n-        request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        moveAssignmentSourcesOf(exerciseRepo);\n-        int exitCode = invokeMaven();\n-        assertThat(exitCode).isNotEqualTo(0);\n-\n-        var testResults = readTestReports();\n-        assertThat(testResults).containsExactlyInAnyOrderEntriesOf(Map.of(TestResult.FAILED, 13));\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"KOTLIN\", \"JAVA\" }, mode = EnumSource.Mode.INCLUDE)\n+    public void runTemplateTests_exercise(ProgrammingLanguage language) throws Exception {\n+        runTests(language, exerciseRepo, TestResult.FAILED);\n     }\n \n-    @Test\n+    @ParameterizedTest\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void runTemplateTests_java_solution() throws Exception {\n-        mockConnectorRequestsForSetup(exercise);\n-        request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        moveAssignmentSourcesOf(solutionRepo);\n-        int exitCode = invokeMaven();\n-        assertThat(exitCode).isEqualTo(0);\n-\n-        var testResults = readTestReports();\n-        assertThat(testResults).containsExactlyInAnyOrderEntriesOf(Map.of(TestResult.SUCCESSFUL, 13));\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"KOTLIN\", \"JAVA\" }, mode = EnumSource.Mode.INCLUDE)\n+    public void runTemplateTests_solution(ProgrammingLanguage language) throws Exception {", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTY0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149649", "bodyText": "Codacy found an issue: The field name 'ARTEMIS_SERVER_URL' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-20T01:10:45Z", "path": "src/test/java/de/tum/in/www1/artemis/util/AbstractArtemisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.net.URL;\n+\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.mock.mockito.SpyBean;\n+import org.springframework.messaging.simp.SimpMessageSendingOperations;\n+\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.LtiService;\n+import de.tum.in.www1.artemis.service.messaging.InstanceMessageSendService;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+/**\n+ * this test should be completely independent of any profiles or configurations (e.g. VCS, CIS)\n+ */\n+public abstract class AbstractArtemisIntegrationTest implements MockDelegate {\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;", "originalCommit": "2551e13a2f95576995b120d70b67de4bcdb74391", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "5e612216dbe1fb6275562c58326403ad839c1102", "url": "https://github.com/ls1intum/Artemis/commit/5e612216dbe1fb6275562c58326403ad839c1102", "message": "Merge remote-tracking branch 'origin/develop' into chore/url-service-test-improvements\n\n# Conflicts:\n#\tsrc/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseGitlabJenkinsIntegrationTest.java", "committedDate": "2020-10-20T10:51:52Z", "type": "commit"}, {"oid": "5274bdd28507ed0c467d10216e9a29ef6d13e4da", "url": "https://github.com/ls1intum/Artemis/commit/5274bdd28507ed0c467d10216e9a29ef6d13e4da", "message": "Create Service for testing of incoming programming exercise results", "committedDate": "2020-10-20T12:40:08Z", "type": "commit"}, {"oid": "4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "url": "https://github.com/ls1intum/Artemis/commit/4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "message": "fix warning", "committedDate": "2020-10-20T14:06:50Z", "type": "commit"}, {"oid": "4e4f06aaa5ee932c17233b0031357a8c4facc69e", "url": "https://github.com/ls1intum/Artemis/commit/4e4f06aaa5ee932c17233b0031357a8c4facc69e", "message": "Merge branch 'develop' into chore/url-service-test-improvements", "committedDate": "2020-10-20T14:08:41Z", "type": "commit"}, {"oid": "e70817b227ea3abf8dce4c499192b992258412a1", "url": "https://github.com/ls1intum/Artemis/commit/e70817b227ea3abf8dce4c499192b992258412a1", "message": "set min coverage for server tests to 80%", "committedDate": "2020-10-20T14:09:13Z", "type": "commit"}, {"oid": "45ec52f826dd38a9ff5017aaabe977f7b4ff4310", "url": "https://github.com/ls1intum/Artemis/commit/45ec52f826dd38a9ff5017aaabe977f7b4ff4310", "message": "Fix translation in programming ex detail view", "committedDate": "2020-10-20T14:48:05Z", "type": "commit"}, {"oid": "f946951c234f79f5edde5f294c2cae159b737190", "url": "https://github.com/ls1intum/Artemis/commit/f946951c234f79f5edde5f294c2cae159b737190", "message": "Merge branch 'chore/url-service-test-improvements' of https://github.com/ls1intum/Artemis into chore/url-service-test-improvements", "committedDate": "2020-10-20T14:48:21Z", "type": "commit"}]}