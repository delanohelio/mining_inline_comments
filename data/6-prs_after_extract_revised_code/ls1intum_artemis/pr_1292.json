{"pr_number": 1292, "pr_title": "Feature/programming exercise/simplify submission and result generation in the local setup", "pr_createdAt": "2020-04-06T22:43:19Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1292", "timeline": [{"oid": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "url": "https://github.com/ls1intum/Artemis/commit/fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "message": "now the submission button has to be clicked at least once, before it is possible to click the result button", "committedDate": "2020-04-14T03:14:44Z", "type": "commit"}, {"oid": "438bc0018554a0ff5f9fb6e3f666e30a2bbd69a9", "url": "https://github.com/ls1intum/Artemis/commit/438bc0018554a0ff5f9fb6e3f666e30a2bbd69a9", "message": "removed the id since it is not used", "committedDate": "2020-04-14T03:18:35Z", "type": "commit"}, {"oid": "90d6cf32eb75700ee9da5398cd7f10259d3ac90a", "url": "https://github.com/ls1intum/Artemis/commit/90d6cf32eb75700ee9da5398cd7f10259d3ac90a", "message": "removed the template string", "committedDate": "2020-04-14T03:24:13Z", "type": "commit"}, {"oid": "a88bf7c6f44eed539d36e588409504e6af005481", "url": "https://github.com/ls1intum/Artemis/commit/a88bf7c6f44eed539d36e588409504e6af005481", "message": "Changed the ResponseEntity code 200->201", "committedDate": "2020-04-14T04:10:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMTM5NA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408131394", "bodyText": "I would prefer something like https://artemislocal.ase.in.tum.de", "author": "krusche", "createdAt": "2020-04-14T13:22:32Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public final String domain = \"nolocalsetup:7990/scm/\";", "originalCommit": "a88bf7c6f44eed539d36e588409504e6af005481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMTg4MA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408131880", "bodyText": "or something like artemislocalhost:7990/scm/", "author": "krusche", "createdAt": "2020-04-14T13:23:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MDA4Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408870086", "bodyText": "i changed the URL. The new URL is artemislocalhost:7990/scm/", "author": "F4lka", "createdAt": "2020-04-15T14:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMTM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "975a5126a7ff6a9a816ec97eabdfaba1343df5e5", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\nindex beb65a6098..48c3278cda 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n\n@@ -21,6 +21,10 @@ import de.tum.in.www1.artemis.repository.*;\n import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n \n+/**\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n @Profile(\"dev\")\n @Service\n public class ProgrammingExerciseSimulationService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NTQ5Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408145496", "bodyText": "please rename to templateResult", "author": "krusche", "createdAt": "2020-04-14T13:42:27Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public final String domain = \"nolocalsetup:7990/scm/\";\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://\" + domain + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://\" + domain + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://\" + domain + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = VCSSimulationUtils.simulateCommitHash();\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();", "originalCommit": "a88bf7c6f44eed539d36e588409504e6af005481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NjQ1OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r409046459", "bodyText": "i renamed the variable", "author": "F4lka", "createdAt": "2020-04-15T18:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NTQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "975a5126a7ff6a9a816ec97eabdfaba1343df5e5", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\nindex beb65a6098..48c3278cda 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n\n@@ -21,6 +21,10 @@ import de.tum.in.www1.artemis.repository.*;\n import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n \n+/**\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n @Profile(\"dev\")\n @Service\n public class ProgrammingExerciseSimulationService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NTU5OA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408145598", "bodyText": "solutionResult", "author": "krusche", "createdAt": "2020-04-14T13:42:36Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public final String domain = \"nolocalsetup:7990/scm/\";\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://\" + domain + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://\" + domain + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://\" + domain + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = VCSSimulationUtils.simulateCommitHash();\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();\n+        resultBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        resultBase.setSubmission(programmingSubmissionBase);\n+        resultBase.setRated(true);\n+        resultBase.resultString(\"0 of 13 passed\");\n+        resultBase.setAssessmentType(AssessmentType.AUTOMATIC);\n+        resultBase.score(0L);\n+        resultBase.setCompletionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        resultRepository.save(resultBase);\n+\n+        ProgrammingSubmission programmingSubmissionSolution = new ProgrammingSubmission();\n+        String commitHashSolution = VCSSimulationUtils.simulateCommitHash();\n+        programmingSubmissionSolution.setParticipation(solutionProgrammingExerciseParticipation.get());\n+        programmingSubmissionSolution.setSubmitted(true);\n+        programmingSubmissionSolution.setType(SubmissionType.OTHER);\n+        programmingSubmissionSolution.setCommitHash(commitHashSolution);\n+        programmingSubmissionSolution.setSubmissionDate(solutionProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionSolution);\n+        Result resultSolution = new Result();", "originalCommit": "a88bf7c6f44eed539d36e588409504e6af005481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NjUwOA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r409046508", "bodyText": "i renamed the variable", "author": "F4lka", "createdAt": "2020-04-15T18:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NTU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "975a5126a7ff6a9a816ec97eabdfaba1343df5e5", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\nindex beb65a6098..48c3278cda 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n\n@@ -21,6 +21,10 @@ import de.tum.in.www1.artemis.repository.*;\n import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n \n+/**\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n @Profile(\"dev\")\n @Service\n public class ProgrammingExerciseSimulationService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NjQwMA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408146400", "bodyText": "the feedback objects are missing with the corresponding test case name and the error message, look at one real example", "author": "krusche", "createdAt": "2020-04-14T13:43:42Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin().toUpperCase());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@\" + programmingExerciseSimulationService.domain\n+                + programmingExercise.getProjectKey() + \"/\" + programmingExercise.getProjectKey().toLowerCase() + \"-\" + user.getLogin() + \".git\");\n+        programmingExerciseStudentParticipation.setInitializationDate(ZonedDateTime.now());\n+        programmingExerciseStudentParticipation.setProgrammingExercise(programmingExercise);\n+        participationRepository.save(programmingExerciseStudentParticipation);\n+        return programmingExerciseStudentParticipation;\n+    }\n+\n+    /**\n+     * This method creates a new submission for the provided user\n+     * @param exerciseId the exerciseId of the exercise for which a submission should be created\n+     * @return the newly created and stored submission\n+     */\n+    public ProgrammingSubmission createSubmission(Long exerciseId) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndStudentLoginWithEagerSubmissionsAnyState(programmingExercise,\n+                user.getLogin());\n+        if (optionalStudentParticipation.isEmpty()) {\n+            programmingExerciseStudentParticipation = createParticipation(programmingExercise, participant, user);\n+        }\n+        else {\n+            programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = new ProgrammingSubmission();\n+        programmingSubmission.setCommitHash(VCSSimulationUtils.simulateCommitHash());\n+        programmingSubmission.setSubmitted(true);\n+        programmingSubmission.setSubmissionDate(ZonedDateTime.now());\n+        programmingSubmission.setType(SubmissionType.MANUAL);\n+        programmingExerciseStudentParticipation.addSubmissions(programmingSubmission);\n+\n+        programmingSubmissionRepository.save(programmingSubmission);\n+        return programmingSubmission;\n+    }\n+\n+    /**\n+     *  This method creates a new result for the provided participation\n+     * @param programmingExerciseStudentParticipation the participation for which the new result should be created\n+     * @return the newly created and stored result\n+     */\n+    public Result createResult(ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation) {\n+        Optional<ProgrammingSubmission> programmingSubmission = programmingSubmissionRepository\n+                .findFirstByParticipationIdOrderBySubmissionDateDesc(programmingExerciseStudentParticipation.getId());\n+        Result result = new Result();\n+        result.setSubmission(programmingSubmission.get());\n+        result.setParticipation(programmingExerciseStudentParticipation);\n+        result.setRated(true);\n+        result.resultString(\"7 of 13 passed\");\n+        result.score(54L);", "originalCommit": "a88bf7c6f44eed539d36e588409504e6af005481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMDcxNg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r409600716", "bodyText": "i added the feedback objects", "author": "F4lka", "createdAt": "2020-04-16T14:27:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NjQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "975a5126a7ff6a9a816ec97eabdfaba1343df5e5", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\nindex 61081beac2..824b683d0c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n\n@@ -23,6 +23,12 @@ import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n import de.tum.in.www1.artemis.repository.ResultRepository;\n import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n \n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n @Profile(\"dev\")\n @Service\n public class ProgrammingSubmissionResultSimulationService {\n"}}, {"oid": "c59c57077c0295a12095f7172519d8d055c65bdd", "url": "https://github.com/ls1intum/Artemis/commit/c59c57077c0295a12095f7172519d8d055c65bdd", "message": "Added html comments", "committedDate": "2020-04-15T10:01:56Z", "type": "commit"}, {"oid": "8781e57e90b252aa1f0254681546bbd6c2332eb2", "url": "https://github.com/ls1intum/Artemis/commit/8781e57e90b252aa1f0254681546bbd6c2332eb2", "message": "added and use variables in html instead of method calls, start of rearranging the code", "committedDate": "2020-04-15T11:09:35Z", "type": "commit"}, {"oid": "049ab666f1d2e7a48ad01101baefda560615d083", "url": "https://github.com/ls1intum/Artemis/commit/049ab666f1d2e7a48ad01101baefda560615d083", "message": "renamed and commented the checkbox name. Also adjusted the translation of the checkbox", "committedDate": "2020-04-15T11:24:31Z", "type": "commit"}, {"oid": "fc7c3d8c7cae4989607f972a17a28fec11d9bac9", "url": "https://github.com/ls1intum/Artemis/commit/fc7c3d8c7cae4989607f972a17a28fec11d9bac9", "message": "added comments to highlight that the particular functionality is only for testing, also added the key word noVersionControlAndContinuousIntegrationAvailable, so that these kind of areas are easier to find", "committedDate": "2020-04-15T11:57:02Z", "type": "commit"}, {"oid": "bf1eeecbcf3b23b4f6e22cf755ed8494e689bc6c", "url": "https://github.com/ls1intum/Artemis/commit/bf1eeecbcf3b23b4f6e22cf755ed8494e689bc6c", "message": "adjusted the naming noLocalSetup -> noVersionControlAndContinuousIntegrationAvailable", "committedDate": "2020-04-15T12:08:03Z", "type": "commit"}, {"oid": "1f192f53266addee0067e9f462b05623b7a4715d", "url": "https://github.com/ls1intum/Artemis/commit/1f192f53266addee0067e9f462b05623b7a4715d", "message": "minor changes", "committedDate": "2020-04-15T12:15:26Z", "type": "commit"}, {"oid": "975a5126a7ff6a9a816ec97eabdfaba1343df5e5", "url": "https://github.com/ls1intum/Artemis/commit/975a5126a7ff6a9a816ec97eabdfaba1343df5e5", "message": "adjusted the comments and the method names", "committedDate": "2020-04-15T12:44:43Z", "type": "commit"}, {"oid": "478fc2318a1b57b5329a375b27748b4b277faddb", "url": "https://github.com/ls1intum/Artemis/commit/478fc2318a1b57b5329a375b27748b4b277faddb", "message": "adjusted the naming of the endpoints and added comments", "committedDate": "2020-04-15T13:36:28Z", "type": "commit"}, {"oid": "465b9500fa8f82ca834dfc782e3fd84115280e85", "url": "https://github.com/ls1intum/Artemis/commit/465b9500fa8f82ca834dfc782e3fd84115280e85", "message": "adjusted the integration tests", "committedDate": "2020-04-15T13:51:39Z", "type": "commit"}, {"oid": "ecd109062c32dd6e334cfb3bb76d93606e1fe181", "url": "https://github.com/ls1intum/Artemis/commit/ecd109062c32dd6e334cfb3bb76d93606e1fe181", "message": "adjusted the domain name of the simulations and renamed the method hasNoLocalSetup", "committedDate": "2020-04-15T14:05:37Z", "type": "commit"}, {"oid": "ce1bbef4704d47772ffc3750e1e855a657f2119f", "url": "https://github.com/ls1intum/Artemis/commit/ce1bbef4704d47772ffc3750e1e855a657f2119f", "message": "Merge branch 'develop' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup\n\n# Conflicts:\n#\tsrc/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java", "committedDate": "2020-04-15T14:09:34Z", "type": "commit"}, {"oid": "a4acfdfed6673a3f566ec25061c034a6cb55281c", "url": "https://github.com/ls1intum/Artemis/commit/a4acfdfed6673a3f566ec25061c034a6cb55281c", "message": "created new test classes for the tests with the dev profile and moved the particular test cases form the existing classes to the new classes", "committedDate": "2020-04-15T15:30:25Z", "type": "commit"}, {"oid": "6c38ccaf26d6c6d39dfdfed7fd8a0b11fdecf749", "url": "https://github.com/ls1intum/Artemis/commit/6c38ccaf26d6c6d39dfdfed7fd8a0b11fdecf749", "message": "prettier:format", "committedDate": "2020-04-15T16:50:48Z", "type": "commit"}, {"oid": "6686780b8990f3b3c92ca8a33f480ef485535cb2", "url": "https://github.com/ls1intum/Artemis/commit/6686780b8990f3b3c92ca8a33f480ef485535cb2", "message": "added guards for methods which should not used in production", "committedDate": "2020-04-15T18:21:44Z", "type": "commit"}, {"oid": "7a5fc1b334fc11827dc0ab2d21bcb28de9ecc2e2", "url": "https://github.com/ls1intum/Artemis/commit/7a5fc1b334fc11827dc0ab2d21bcb28de9ecc2e2", "message": "adjusted the naming scheme", "committedDate": "2020-04-15T18:26:29Z", "type": "commit"}, {"oid": "5e43d260a65b7b83b3b789b47c3472c31a1b6c9f", "url": "https://github.com/ls1intum/Artemis/commit/5e43d260a65b7b83b3b789b47c3472c31a1b6c9f", "message": "added Feedback to the result", "committedDate": "2020-04-16T14:14:04Z", "type": "commit"}, {"oid": "f9eece320f0c583de0de0e861f2ff26a4c4e7970", "url": "https://github.com/ls1intum/Artemis/commit/f9eece320f0c583de0de0e861f2ff26a4c4e7970", "message": "Merge branch 'develop' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup", "committedDate": "2020-04-16T14:27:33Z", "type": "commit"}, {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a", "url": "https://github.com/ls1intum/Artemis/commit/7f9aff848146beedbbaab1d771f169a2dee8a69a", "message": "Merge branch 'develop' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup", "committedDate": "2020-04-20T11:52:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzEyNg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411417126", "bodyText": "please add something like \"currently only the Java standard template is supported\"", "author": "krusche", "createdAt": "2020-04-20T14:19:45Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.FeedbackType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin().toUpperCase());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@\" + programmingExerciseSimulationService.domain\n+                + programmingExercise.getProjectKey() + \"/\" + programmingExercise.getProjectKey().toLowerCase() + \"-\" + user.getLogin() + \".git\");\n+        programmingExerciseStudentParticipation.setInitializationDate(ZonedDateTime.now());\n+        programmingExerciseStudentParticipation.setProgrammingExercise(programmingExercise);\n+        participationRepository.save(programmingExerciseStudentParticipation);\n+        return programmingExerciseStudentParticipation;\n+    }\n+\n+    /**\n+     * This method creates a new submission for the provided user\n+     * @param exerciseId the exerciseId of the exercise for which a submission should be created\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @return the newly created and stored submission\n+     */\n+    public ProgrammingSubmission createSubmission(Long exerciseId) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndStudentLoginWithEagerSubmissionsAnyState(programmingExercise,\n+                user.getLogin());\n+        if (optionalStudentParticipation.isEmpty()) {\n+            programmingExerciseStudentParticipation = createParticipation(programmingExercise, participant, user);\n+        }\n+        else {\n+            programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = new ProgrammingSubmission();\n+        programmingSubmission.setCommitHash(VCSSimulationUtils.simulateCommitHash());\n+        programmingSubmission.setSubmitted(true);\n+        programmingSubmission.setSubmissionDate(ZonedDateTime.now());\n+        programmingSubmission.setType(SubmissionType.MANUAL);\n+        programmingExerciseStudentParticipation.addSubmissions(programmingSubmission);\n+\n+        programmingSubmissionRepository.save(programmingSubmission);\n+        return programmingSubmission;\n+    }\n+\n+    /**\n+     *  This method creates a new result for the provided participation\n+     *  This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param programmingExerciseStudentParticipation the participation for which the new result should be created\n+     * @return the newly created and stored result\n+     */\n+    public Result createResult(ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation) {\n+        Optional<ProgrammingSubmission> programmingSubmission = programmingSubmissionRepository\n+                .findFirstByParticipationIdOrderBySubmissionDateDesc(programmingExerciseStudentParticipation.getId());\n+        Result result = new Result();\n+        result.setSubmission(programmingSubmission.get());\n+        result.setParticipation(programmingExerciseStudentParticipation);\n+        result.setRated(true);\n+        result.resultString(\"7 of 13 passed\");\n+        result.score(54L);\n+        result.setAssessmentType(AssessmentType.AUTOMATIC);\n+        result.setCompletionDate(ZonedDateTime.now());\n+        this.addFeedback(result);\n+        resultRepository.save(result);\n+        return result;\n+    }\n+\n+    /**\n+     * Creates feedback for the provided result\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param result for which the feedback should be created\n+     * @param methodName of the testcase\n+     * @param positive is the testcase positive or not\n+     * @param errorMessageString will only added if the test case fails otherwise use null\n+     */\n+    public void createFeedback(Result result, String methodName, boolean positive, @Nullable String errorMessageString) {\n+        Feedback feedback = new Feedback();\n+        feedback.setText(methodName);\n+        feedback.setDetailText(errorMessageString);\n+        feedback.setType(FeedbackType.AUTOMATIC);\n+        feedback.setPositive(positive);\n+        result.addFeedback(feedback);\n+    }\n+\n+    /**\n+     * adds the feedback to the result", "originalCommit": "7f9aff848146beedbbaab1d771f169a2dee8a69a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjYxNg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411482616", "bodyText": "i added the comment", "author": "F4lka", "createdAt": "2020-04-20T15:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "a10551f7ec15366494dc1ed2f3a64741ff8663ff", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\nindex aa17dd85e3..e36dda8e04 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n\n@@ -154,6 +154,7 @@ public class ProgrammingSubmissionResultSimulationService {\n \n     /**\n      * adds the feedback to the result\n+     * currently only the Java standard template is supported\n      * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n      * @param result to which the feedback should be added\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjA0Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411422047", "bodyText": "Either use SecureRandom or UUID.randomUUID().toString()\nYou might need to replace \"-\" with a random number then.", "author": "krusche", "createdAt": "2020-04-20T14:25:49Z", "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package de.tum.in.www1.artemis.service.util;\n+\n+import java.util.Random;\n+\n+import org.springframework.context.annotation.Profile;\n+\n+@Profile(\"dev\")\n+public class VCSSimulationUtils {\n+\n+    /**\n+     * Simulates a commit Hash, the returned string consist out of 40 times the same number\n+     * @return the simulated commitHash\n+     */\n+    public static String simulateCommitHash() {\n+        Random random = new Random();", "originalCommit": "7f9aff848146beedbbaab1d771f169a2dee8a69a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjgyNw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411482827", "bodyText": "i added secureRandom", "author": "F4lka", "createdAt": "2020-04-20T15:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dc9815f7984dbebbce19ea04673669cc98920b65", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java b/src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java\nindex a7bb97131c..0be4242059 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java\n\n@@ -1,6 +1,6 @@\n package de.tum.in.www1.artemis.service.util;\n \n-import java.util.Random;\n+import java.security.SecureRandom;\n \n import org.springframework.context.annotation.Profile;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjkzOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411422939", "bodyText": "/exercises/{exerciseId}/submissions/no-vcs-and-ci-available", "author": "krusche", "createdAt": "2020-04-20T14:26:56Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * Only for local development\n+ * Simulates submission and results for a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingSubmissionResultSimulationResource.Endpoints.ROOT)\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService, ExerciseService exerciseService,\n+            AuthorizationCheckService authCheckService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+        this.exerciseService = exerciseService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without a connection to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(Endpoints.SUBMISSIONS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseId) {\n+\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseId);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/submissions\" + programmingSubmission.getId())).body(programmingSubmission);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a submission\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a submission: \" + e.getMessage(), \"errorSubmission\")).body(null);\n+        }\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without a connection\n+     * to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(Endpoints.RESULTS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseId) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+\n+        if (optionalStudentParticipation.isEmpty()) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/results\" + result.getId())).body(result);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a result\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a result: \" + e.getMessage(), \"errorResult\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String SUBMISSIONS_SIMULATION = \"/submissions/no-vcs-and-ci-available/{exerciseId}\";", "originalCommit": "7f9aff848146beedbbaab1d771f169a2dee8a69a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMzE0MA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411433140", "bodyText": "!", "author": "krusche", "createdAt": "2020-04-20T14:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2NTI1NA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411565254", "bodyText": "i adapted the url", "author": "F4lka", "createdAt": "2020-04-20T17:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "83d71b6120aa34766de44381f772cecd113e5db3", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex 1f89a1e889..d0b84c2eec 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -140,9 +140,9 @@ public class ProgrammingSubmissionResultSimulationResource {\n \n         public static final String ROOT = \"/api\";\n \n-        public static final String SUBMISSIONS_SIMULATION = \"/submissions/no-vcs-and-ci-available/{exerciseId}\";\n+        public static final String SUBMISSIONS_SIMULATION = \"/exercises/{exerciseId}/submissions/no-vcs-and-ci-available\";\n \n-        public static final String RESULTS_SIMULATION = \"/results/no-vcs-and-ci-available/{exerciseId}\";\n+        public static final String RESULTS_SIMULATION = \"/exercises/{exerciseId}/results/no-vcs-and-ci-available\";\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzA2Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411423062", "bodyText": "/exercises/{exerciseId}/results/no-vcs-and-ci-available", "author": "krusche", "createdAt": "2020-04-20T14:27:07Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * Only for local development\n+ * Simulates submission and results for a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingSubmissionResultSimulationResource.Endpoints.ROOT)\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService, ExerciseService exerciseService,\n+            AuthorizationCheckService authCheckService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+        this.exerciseService = exerciseService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without a connection to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(Endpoints.SUBMISSIONS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseId) {\n+\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseId);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/submissions\" + programmingSubmission.getId())).body(programmingSubmission);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a submission\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a submission: \" + e.getMessage(), \"errorSubmission\")).body(null);\n+        }\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without a connection\n+     * to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(Endpoints.RESULTS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseId) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+\n+        if (optionalStudentParticipation.isEmpty()) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/results\" + result.getId())).body(result);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a result\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a result: \" + e.getMessage(), \"errorResult\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String SUBMISSIONS_SIMULATION = \"/submissions/no-vcs-and-ci-available/{exerciseId}\";\n+\n+        public static final String RESULTS_SIMULATION = \"/results/no-vcs-and-ci-available/{exerciseId}\";", "originalCommit": "7f9aff848146beedbbaab1d771f169a2dee8a69a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMzE5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411433192", "bodyText": "!", "author": "krusche", "createdAt": "2020-04-20T14:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2NTMzMg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411565332", "bodyText": "i adapted the url", "author": "F4lka", "createdAt": "2020-04-20T17:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "83d71b6120aa34766de44381f772cecd113e5db3", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex 1f89a1e889..d0b84c2eec 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -140,9 +140,9 @@ public class ProgrammingSubmissionResultSimulationResource {\n \n         public static final String ROOT = \"/api\";\n \n-        public static final String SUBMISSIONS_SIMULATION = \"/submissions/no-vcs-and-ci-available/{exerciseId}\";\n+        public static final String SUBMISSIONS_SIMULATION = \"/exercises/{exerciseId}/submissions/no-vcs-and-ci-available\";\n \n-        public static final String RESULTS_SIMULATION = \"/results/no-vcs-and-ci-available/{exerciseId}\";\n+        public static final String RESULTS_SIMULATION = \"/exercises/{exerciseId}/results/no-vcs-and-ci-available\";\n \n     }\n \n"}}, {"oid": "dc9815f7984dbebbce19ea04673669cc98920b65", "url": "https://github.com/ls1intum/Artemis/commit/dc9815f7984dbebbce19ea04673669cc98920b65", "message": "changed random to secureRandom", "committedDate": "2020-04-20T15:39:16Z", "type": "commit"}, {"oid": "82aa64e950689f4aca9fe5b797369d5127c896bb", "url": "https://github.com/ls1intum/Artemis/commit/82aa64e950689f4aca9fe5b797369d5127c896bb", "message": "Merge remote-tracking branch 'origin/feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup", "committedDate": "2020-04-20T15:39:53Z", "type": "commit"}, {"oid": "a10551f7ec15366494dc1ed2f3a64741ff8663ff", "url": "https://github.com/ls1intum/Artemis/commit/a10551f7ec15366494dc1ed2f3a64741ff8663ff", "message": "added comments", "committedDate": "2020-04-20T15:41:09Z", "type": "commit"}, {"oid": "1c26158c0e9a9309495eb1e4fcc934beab01842b", "url": "https://github.com/ls1intum/Artemis/commit/1c26158c0e9a9309495eb1e4fcc934beab01842b", "message": "added subscription for the profileInfo", "committedDate": "2020-04-20T16:03:57Z", "type": "commit"}, {"oid": "e37a2aa839dfb7c280087184bd29fea7c10b0c64", "url": "https://github.com/ls1intum/Artemis/commit/e37a2aa839dfb7c280087184bd29fea7c10b0c64", "message": "removed the variable programmingExercise and commented the variables with are only used for the simulations", "committedDate": "2020-04-20T16:24:51Z", "type": "commit"}, {"oid": "236cd83000a1e85f3992126205102a62a9515a88", "url": "https://github.com/ls1intum/Artemis/commit/236cd83000a1e85f3992126205102a62a9515a88", "message": "adapted the result button, now the button will be disabled after a click", "committedDate": "2020-04-20T16:29:31Z", "type": "commit"}, {"oid": "83d71b6120aa34766de44381f772cecd113e5db3", "url": "https://github.com/ls1intum/Artemis/commit/83d71b6120aa34766de44381f772cecd113e5db3", "message": "refactoring of the rest URL paths", "committedDate": "2020-04-20T17:37:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NzEwNg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411657106", "bodyText": "This can be changed in the follow-up PR:\nYou can simplify this code (and make it more readable in my opinion) by using the Strings class from com.google.common.base.Strings.\nThe code then looks like this:\nreturn Strings.repeat(number, 40);", "author": "sleiss", "createdAt": "2020-04-20T20:07:23Z", "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package de.tum.in.www1.artemis.service.util;\n+\n+import java.security.SecureRandom;\n+\n+import org.springframework.context.annotation.Profile;\n+\n+@Profile(\"dev\")\n+public class VCSSimulationUtils {\n+\n+    /**\n+     * Simulates a commit Hash, the returned string consist out of 40 times the same number\n+     * @return the simulated commitHash\n+     */\n+    public static String simulateCommitHash() {\n+        SecureRandom secureRandom = new SecureRandom();\n+        String number = String.valueOf(secureRandom.nextInt(10));\n+        String commitHash = number;", "originalCommit": "83d71b6120aa34766de44381f772cecd113e5db3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e3a9cb7b2b4c5ed3098bc2681a394124d983b4c4", "url": "https://github.com/ls1intum/Artemis/commit/e3a9cb7b2b4c5ed3098bc2681a394124d983b4c4", "message": "Added checkbox for no local Setup, name display of the checkbox doesn't work", "committedDate": "2020-03-31T05:50:37Z", "type": "commit"}, {"oid": "ce8054886d536fb9cb7f64583e7501a931445882", "url": "https://github.com/ls1intum/Artemis/commit/ce8054886d536fb9cb7f64583e7501a931445882", "message": "New Exercises are added to the database, submissions are missing", "committedDate": "2020-04-01T20:42:52Z", "type": "commit"}, {"oid": "d22a30091d69d8324b58091a180646cf5ebe3ae9", "url": "https://github.com/ls1intum/Artemis/commit/d22a30091d69d8324b58091a180646cf5ebe3ae9", "message": "fixed bug, that the exercise was created twice", "committedDate": "2020-04-02T12:33:22Z", "type": "commit"}, {"oid": "e2133c8368d73f4cda9c416107192537fd05eb2b", "url": "https://github.com/ls1intum/Artemis/commit/e2133c8368d73f4cda9c416107192537fd05eb2b", "message": "Merge branch 'develop' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup", "committedDate": "2020-04-02T12:42:59Z", "type": "commit"}, {"oid": "a5c6d3f19d4badf949c3699e1d949698ae03b519", "url": "https://github.com/ls1intum/Artemis/commit/a5c6d3f19d4badf949c3699e1d949698ae03b519", "message": "refactored the setup, removed the button and now the initial submission and results are created", "committedDate": "2020-04-02T21:41:43Z", "type": "commit"}, {"oid": "886aad211c30a88bead12b54202ad9c80655c1c5", "url": "https://github.com/ls1intum/Artemis/commit/886aad211c30a88bead12b54202ad9c80655c1c5", "message": "refactored the setup, now both configurations work", "committedDate": "2020-04-03T11:46:02Z", "type": "commit"}, {"oid": "0fc037a26b2312d4c66b0b8024444b17aff12952", "url": "https://github.com/ls1intum/Artemis/commit/0fc037a26b2312d4c66b0b8024444b17aff12952", "message": "fixed small error", "committedDate": "2020-04-03T14:23:36Z", "type": "commit"}, {"oid": "72ed7c9a9a53b44e4164b7e80f922f9ffa1ab794", "url": "https://github.com/ls1intum/Artemis/commit/72ed7c9a9a53b44e4164b7e80f922f9ffa1ab794", "message": "simulation of participation and submission works", "committedDate": "2020-04-03T22:57:09Z", "type": "commit"}, {"oid": "41e51c41dba3e245bd39e71bee60deb539794303", "url": "https://github.com/ls1intum/Artemis/commit/41e51c41dba3e245bd39e71bee60deb539794303", "message": "added new Restroute courses/result/no-local-setup/{exerciseID}", "committedDate": "2020-04-03T23:37:22Z", "type": "commit"}, {"oid": "388204098845578bb15527a3fcaf0bfe3f6580d0", "url": "https://github.com/ls1intum/Artemis/commit/388204098845578bb15527a3fcaf0bfe3f6580d0", "message": "resolved bug of the simulation of the submission and implemented the result simulation", "committedDate": "2020-04-04T15:27:50Z", "type": "commit"}, {"oid": "6533916ac2bba89c27ae86cfabb7b94140da5c4d", "url": "https://github.com/ls1intum/Artemis/commit/6533916ac2bba89c27ae86cfabb7b94140da5c4d", "message": "modified Url, the userid was removed", "committedDate": "2020-04-05T16:38:51Z", "type": "commit"}, {"oid": "23757431e3dd35e667eb49eeaa554b7040cccbd9", "url": "https://github.com/ls1intum/Artemis/commit/23757431e3dd35e667eb49eeaa554b7040cccbd9", "message": "removed the noLocalSetup sorting option", "committedDate": "2020-04-05T16:40:41Z", "type": "commit"}, {"oid": "ba892027d3e09ac6e45f477c772f7bd91875f6b5", "url": "https://github.com/ls1intum/Artemis/commit/ba892027d3e09ac6e45f477c772f7bd91875f6b5", "message": "fixed the bug that the name of the checkbox was not translated", "committedDate": "2020-04-05T16:43:29Z", "type": "commit"}, {"oid": "6eea247fc5496fdf7bfb1a92c4b0438e4f149ae3", "url": "https://github.com/ls1intum/Artemis/commit/6eea247fc5496fdf7bfb1a92c4b0438e4f149ae3", "message": "added comments to functions", "committedDate": "2020-04-05T16:46:18Z", "type": "commit"}, {"oid": "bb0b9f96dc02cf17d54633f565cc6505fd79c631", "url": "https://github.com/ls1intum/Artemis/commit/bb0b9f96dc02cf17d54633f565cc6505fd79c631", "message": "added checks for the buttons, so that they are not visible in production", "committedDate": "2020-04-05T16:50:46Z", "type": "commit"}, {"oid": "da24bdaaf4fd651eaa3fc6d92af704b2faca8f08", "url": "https://github.com/ls1intum/Artemis/commit/da24bdaaf4fd651eaa3fc6d92af704b2faca8f08", "message": "added Testcases for the setup/creation of programming exercises without local setup", "committedDate": "2020-04-06T09:10:09Z", "type": "commit"}, {"oid": "c657e44e02dcab6c9d30f7c4260b06369a7230ab", "url": "https://github.com/ls1intum/Artemis/commit/c657e44e02dcab6c9d30f7c4260b06369a7230ab", "message": "Fixed bug for the noLocalSetup Checkbox, now it will be rendered as expected", "committedDate": "2020-04-06T10:11:13Z", "type": "commit"}, {"oid": "6eabbbb064ee9b649e6125e16cfd7c661d83270e", "url": "https://github.com/ls1intum/Artemis/commit/6eabbbb064ee9b649e6125e16cfd7c661d83270e", "message": "replaced resource call with service call", "committedDate": "2020-04-06T10:28:07Z", "type": "commit"}, {"oid": "ca8bbd6f09e786e4ce7abf846291bc432d40279f", "url": "https://github.com/ls1intum/Artemis/commit/ca8bbd6f09e786e4ce7abf846291bc432d40279f", "message": "created serves and moved methods from the resource to the service", "committedDate": "2020-04-06T16:55:06Z", "type": "commit"}, {"oid": "e9e77dcf458ee0ce33e228988a95645df70c20b8", "url": "https://github.com/ls1intum/Artemis/commit/e9e77dcf458ee0ce33e228988a95645df70c20b8", "message": "modified the subscriptions", "committedDate": "2020-04-06T16:56:43Z", "type": "commit"}, {"oid": "f0ef08da523f5f4949e537d7b1b176b09f2e9bc4", "url": "https://github.com/ls1intum/Artemis/commit/f0ef08da523f5f4949e537d7b1b176b09f2e9bc4", "message": "added two integration test to test if the submissions, participation and the result are created", "committedDate": "2020-04-06T16:58:59Z", "type": "commit"}, {"oid": "3cdd888b8ea0a9016ca47d28885faa9ed8fe5e0d", "url": "https://github.com/ls1intum/Artemis/commit/3cdd888b8ea0a9016ca47d28885faa9ed8fe5e0d", "message": "added method visibilityCheck, now the buttons should be also visible on the test server", "committedDate": "2020-04-06T17:48:18Z", "type": "commit"}, {"oid": "01502ca0080a541d48f3bbc420150172f85c2b89", "url": "https://github.com/ls1intum/Artemis/commit/01502ca0080a541d48f3bbc420150172f85c2b89", "message": "added additional checks to the tests", "committedDate": "2020-04-06T17:49:43Z", "type": "commit"}, {"oid": "f484c661b7362a39ec05e564817106e8daae2341", "url": "https://github.com/ls1intum/Artemis/commit/f484c661b7362a39ec05e564817106e8daae2341", "message": "added two endpoint descriptions", "committedDate": "2020-04-06T17:50:52Z", "type": "commit"}, {"oid": "8cf3d97475a63e1a8529cbdd158617453fec8c9b", "url": "https://github.com/ls1intum/Artemis/commit/8cf3d97475a63e1a8529cbdd158617453fec8c9b", "message": "modified http methods", "committedDate": "2020-04-06T17:52:12Z", "type": "commit"}, {"oid": "e80a585936762938c9ec6f48f425fa45b1a37c83", "url": "https://github.com/ls1intum/Artemis/commit/e80a585936762938c9ec6f48f425fa45b1a37c83", "message": "improved integration test and specified more specific ResponseEntities", "committedDate": "2020-04-06T21:36:32Z", "type": "commit"}, {"oid": "bab3ec2571b78497cc40071106b7cc92fe96f218", "url": "https://github.com/ls1intum/Artemis/commit/bab3ec2571b78497cc40071106b7cc92fe96f218", "message": "Merge branch 'develop' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup", "committedDate": "2020-04-06T21:54:51Z", "type": "commit"}, {"oid": "f154c460dc3ce65ba71bb2318a3f662d80790d9d", "url": "https://github.com/ls1intum/Artemis/commit/f154c460dc3ce65ba71bb2318a3f662d80790d9d", "message": "modified JEST tests", "committedDate": "2020-04-06T22:29:30Z", "type": "commit"}, {"oid": "0b963f30038285d105baacf4f9ab3d70f8a15e0b", "url": "https://github.com/ls1intum/Artemis/commit/0b963f30038285d105baacf4f9ab3d70f8a15e0b", "message": "modified naming scheme", "committedDate": "2020-04-06T22:29:55Z", "type": "commit"}, {"oid": "6658e4f6f21cf74098e7e4cd0aa0f7ccb74db1ca", "url": "https://github.com/ls1intum/Artemis/commit/6658e4f6f21cf74098e7e4cd0aa0f7ccb74db1ca", "message": "fixed typo, now the buttons are styled as intended", "committedDate": "2020-04-07T10:04:04Z", "type": "commit"}, {"oid": "9f7f76a7cbae54b792f9b575fd5e9e90ac5705b6", "url": "https://github.com/ls1intum/Artemis/commit/9f7f76a7cbae54b792f9b575fd5e9e90ac5705b6", "message": "fixed existing jest test cases", "committedDate": "2020-04-07T11:30:28Z", "type": "commit"}, {"oid": "77c6efba62b6b98c8ecaf0b50ab7f783ed32c392", "url": "https://github.com/ls1intum/Artemis/commit/77c6efba62b6b98c8ecaf0b50ab7f783ed32c392", "message": "updated the javadoc", "committedDate": "2020-04-07T11:53:26Z", "type": "commit"}, {"oid": "d6b83e37fb5fad59950d048d8543e87c9f8fa31b", "url": "https://github.com/ls1intum/Artemis/commit/d6b83e37fb5fad59950d048d8543e87c9f8fa31b", "message": "added and modified comments", "committedDate": "2020-04-07T13:24:18Z", "type": "commit"}, {"oid": "449c73eaf2f04093306302b5c140a117226b5771", "url": "https://github.com/ls1intum/Artemis/commit/449c73eaf2f04093306302b5c140a117226b5771", "message": "added comments", "committedDate": "2020-04-07T17:56:11Z", "type": "commit"}, {"oid": "b09d31cd539f15d12e1266862214aa0ac20ddf11", "url": "https://github.com/ls1intum/Artemis/commit/b09d31cd539f15d12e1266862214aa0ac20ddf11", "message": "minor changes", "committedDate": "2020-04-07T18:34:59Z", "type": "commit"}, {"oid": "62bcbecf44999075699a5015d1c7c8435fc338b5", "url": "https://github.com/ls1intum/Artemis/commit/62bcbecf44999075699a5015d1c7c8435fc338b5", "message": "moved the new introduced exercise simulation functionality in their own resource and service", "committedDate": "2020-04-07T18:36:53Z", "type": "commit"}, {"oid": "b5063b9bb3fa4400f10dc829d43961f0c10e34e7", "url": "https://github.com/ls1intum/Artemis/commit/b5063b9bb3fa4400f10dc829d43961f0c10e34e7", "message": "added missing comment", "committedDate": "2020-04-07T18:42:45Z", "type": "commit"}, {"oid": "9aaf84c0f351968bf43a174a845fdd9feb755402", "url": "https://github.com/ls1intum/Artemis/commit/9aaf84c0f351968bf43a174a845fdd9feb755402", "message": "changed folder structure, move to noLocalSetup folder", "committedDate": "2020-04-07T19:05:07Z", "type": "commit"}, {"oid": "ae6f3d58395a8139abf5d1c7366bc95a4a2d92b6", "url": "https://github.com/ls1intum/Artemis/commit/ae6f3d58395a8139abf5d1c7366bc95a4a2d92b6", "message": "changed folder structure, in order to pass the tests", "committedDate": "2020-04-07T19:22:02Z", "type": "commit"}, {"oid": "7b48d1ff046f1ee1b19937aed02d373a6b21c288", "url": "https://github.com/ls1intum/Artemis/commit/7b48d1ff046f1ee1b19937aed02d373a6b21c288", "message": "Merge branch 'develop' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup", "committedDate": "2020-04-08T07:41:00Z", "type": "commit"}, {"oid": "1d23ee84c96212e4253457ccc60c6be03bc5ef42", "url": "https://github.com/ls1intum/Artemis/commit/1d23ee84c96212e4253457ccc60c6be03bc5ef42", "message": "now the buttons are only visible in dev", "committedDate": "2020-04-08T08:42:30Z", "type": "commit"}, {"oid": "72e78e0271fee16aafe7cf2d721be7e92b87d3e9", "url": "https://github.com/ls1intum/Artemis/commit/72e78e0271fee16aafe7cf2d721be7e92b87d3e9", "message": "Merge remote-tracking branch 'origin/feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup", "committedDate": "2020-04-08T08:42:51Z", "type": "commit"}, {"oid": "7fe360939192476f2b835976f6127965688f3ab4", "url": "https://github.com/ls1intum/Artemis/commit/7fe360939192476f2b835976f6127965688f3ab4", "message": "Merge branch 'develop' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup", "committedDate": "2020-04-08T08:50:26Z", "type": "commit"}, {"oid": "fe8bd66028d519132936437d2cb77912d0aef5e8", "url": "https://github.com/ls1intum/Artemis/commit/fe8bd66028d519132936437d2cb77912d0aef5e8", "message": "restore original method ordering, in order to avoid possible unwanted side effects", "committedDate": "2020-04-08T09:20:51Z", "type": "commit"}, {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a", "url": "https://github.com/ls1intum/Artemis/commit/2dfd1001010c3b9b429edec634b84892bc62276a", "message": "Merge remote-tracking branch 'origin/feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup", "committedDate": "2020-04-08T09:21:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MTc3NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406191775", "bodyText": "I would prefer a commitHash that is as long as a normal SHA-1 commitHash (I believe 40 chars) as the commit hash might be displayed somewhere in the future and we should be consistent here.", "author": "sleiss", "createdAt": "2020-04-09T13:10:27Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = \"abcdef01\";", "originalCommit": "2dfd1001010c3b9b429edec634b84892bc62276a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1MDg4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406450881", "bodyText": "I added a random function, which creates a 40 char commit hash", "author": "F4lka", "createdAt": "2020-04-09T20:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MTc3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\nindex a955359b4b..beb65a6098 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n\n@@ -5,6 +5,7 @@ import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n \n import java.util.Optional;\n \n+import org.springframework.context.annotation.Profile;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MjU4Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406192583", "bodyText": "I will address this in a different PR for the other occurences, but we should change this to 0 of 13 passed to be consistent with this: \n  \n    \n      Artemis/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java\n    \n    \n         Line 251\n      in\n      044f7aa\n    \n    \n    \n    \n\n        \n          \n           String newResultString = successfulTestCases.size() + \" of \" + allTests.size() + \" passed\"; \n        \n    \n  \n\n\nThis is not a problem introduced by your PR, but we should change it.", "author": "sleiss", "createdAt": "2020-04-09T13:11:55Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = \"abcdef01\";\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();\n+        resultBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        resultBase.setSubmission(programmingSubmissionBase);\n+        resultBase.setRated(true);\n+        resultBase.resultString(\"13 of 13 failed\");", "originalCommit": "2dfd1001010c3b9b429edec634b84892bc62276a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMjQ0Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406432442", "bodyText": "I adpated the naming scheme", "author": "F4lka", "createdAt": "2020-04-09T19:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MjU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\nindex a955359b4b..beb65a6098 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n\n@@ -5,6 +5,7 @@ import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n \n import java.util.Optional;\n \n+import org.springframework.context.annotation.Profile;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MjY4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406192687", "bodyText": "Same as above (length of hash).", "author": "sleiss", "createdAt": "2020-04-09T13:12:07Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = \"abcdef01\";\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();\n+        resultBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        resultBase.setSubmission(programmingSubmissionBase);\n+        resultBase.setRated(true);\n+        resultBase.resultString(\"13 of 13 failed\");\n+        resultBase.setAssessmentType(AssessmentType.AUTOMATIC);\n+        resultBase.score(0L);\n+        resultBase.setCompletionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        resultRepository.save(resultBase);\n+\n+        ProgrammingSubmission programmingSubmissionSolution = new ProgrammingSubmission();\n+        String commitHashSolution = \"abcdef23\";", "originalCommit": "2dfd1001010c3b9b429edec634b84892bc62276a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1MDk2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406450961", "bodyText": "I added a random function, which creates a 40 char commit hash", "author": "F4lka", "createdAt": "2020-04-09T20:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MjY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\nindex a955359b4b..beb65a6098 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n\n@@ -5,6 +5,7 @@ import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n \n import java.util.Optional;\n \n+import org.springframework.context.annotation.Profile;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MzM1MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406193351", "bodyText": "I would also prefer a longer commit hash here.", "author": "sleiss", "createdAt": "2020-04-09T13:13:12Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@localhost7990/scm/\" + programmingExercise.getProjectKey() + \"/\"\n+                + programmingExercise.getProjectKey().toLowerCase() + \"-\" + user.getLogin() + \".git\");\n+        programmingExerciseStudentParticipation.setInitializationDate(ZonedDateTime.now());\n+        programmingExerciseStudentParticipation.setProgrammingExercise(programmingExercise);\n+        participationRepository.save(programmingExerciseStudentParticipation);\n+        return programmingExerciseStudentParticipation;\n+    }\n+\n+    /**\n+     * This method creates a new submission for the provided user\n+     * @param exerciseID the exerciseId of the exercise for which a submission should be created\n+     * @return the newly created and stored submission\n+     */\n+    public ProgrammingSubmission createSubmission(Long exerciseID) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        if (optionalStudentParticipation.isEmpty()) {\n+            programmingExerciseStudentParticipation = createParticipation(programmingExercise, participant, user);\n+        }\n+        else {\n+            programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = new ProgrammingSubmission();\n+        Random random = new Random();\n+        programmingSubmission.setCommitHash(String.valueOf(random.nextInt(100000)));", "originalCommit": "2dfd1001010c3b9b429edec634b84892bc62276a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\nindex 2df636c7fe..61081beac2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n\n@@ -2,10 +2,10 @@ package de.tum.in.www1.artemis.service;\n \n import java.time.ZonedDateTime;\n import java.util.Optional;\n-import java.util.Random;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.stereotype.Service;\n \n import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDExMA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406194110", "bodyText": "This already exists in the ProgrammingExerciseResource, maybe we create a Constant to avoid duplication.\nSee TITLE_NAME_PATTERN for an example.", "author": "sleiss", "createdAt": "2020-04-09T13:14:23Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final String packageNameRegex = \"^[a-z][a-z0-9_]*(\\\\.[a-z0-9_]+)+[0-9a-z_]$\";", "originalCommit": "2dfd1001010c3b9b429edec634b84892bc62276a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\nindex 0c607b9c73..4d2b5dbc30 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n\n@@ -1,18 +1,14 @@\n package de.tum.in.www1.artemis.web.rest;\n \n-import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n-import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n \n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMTA0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406201049", "bodyText": "Are all these <p> changes intended?", "author": "sleiss", "createdAt": "2020-04-09T13:24:58Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "diffHunk": "@@ -134,7 +135,7 @@ public void tearDown() {\n     /**\n      * The student commits, the code change is pushed to the VCS.\n      * The VCS notifies Artemis about a new submission.\n-     *\n+     * <p>", "originalCommit": "2dfd1001010c3b9b429edec634b84892bc62276a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTMyNA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406431324", "bodyText": "I removed the p's. I'm not sure how they got there", "author": "F4lka", "createdAt": "2020-04-09T19:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMTA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java\nindex 6a5dadbbfd..d60eb04f79 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java\n\n@@ -135,7 +137,7 @@ class ProgrammingSubmissionAndResultIntegrationTest extends AbstractSpringIntegr\n     /**\n      * The student commits, the code change is pushed to the VCS.\n      * The VCS notifies Artemis about a new submission.\n-     * <p>\n+     *\n      * However the participation id provided by the VCS on the request is invalid.\n      */\n     @Test\n"}}, {"oid": "0e15845267216b97f7765429d36d50080c51ada2", "url": "https://github.com/ls1intum/Artemis/commit/0e15845267216b97f7765429d36d50080c51ada2", "message": "Update src/main/webapp/i18n/en/programmingExercise.json\r\n\r\nchanged printed test\n\nCo-Authored-By: Simon Lei\u00df <5084100+sleiss@users.noreply.github.com>", "committedDate": "2020-04-09T19:23:07Z", "type": "commit"}, {"oid": "c70d9731e368ba9978ab0d7a12f3e2be7ac9afe8", "url": "https://github.com/ls1intum/Artemis/commit/c70d9731e368ba9978ab0d7a12f3e2be7ac9afe8", "message": "Update src/main/webapp/i18n/de/programmingExercise.json\r\n\r\napplied change to the printed name\n\nCo-Authored-By: Simon Lei\u00df <5084100+sleiss@users.noreply.github.com>", "committedDate": "2020-04-09T19:24:23Z", "type": "commit"}, {"oid": "589eb3c74afc5bffb70614169f2a2ce5c4ad0bb8", "url": "https://github.com/ls1intum/Artemis/commit/589eb3c74afc5bffb70614169f2a2ce5c4ad0bb8", "message": "removed unintended commit characters", "committedDate": "2020-04-09T19:28:36Z", "type": "commit"}, {"oid": "45d3337f17d1584f99497c540c9efdb5d6cdc8bf", "url": "https://github.com/ls1intum/Artemis/commit/45d3337f17d1584f99497c540c9efdb5d6cdc8bf", "message": "Merge remote-tracking branch 'origin/feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup' into feature/programming-exercise/simplify-submission-and-result-generation-in-the-local-setup", "committedDate": "2020-04-09T19:29:29Z", "type": "commit"}, {"oid": "0d0caabd0f2c7aa938c8f042045a0bdb30205e70", "url": "https://github.com/ls1intum/Artemis/commit/0d0caabd0f2c7aa938c8f042045a0bdb30205e70", "message": "adapted translation", "committedDate": "2020-04-09T19:32:26Z", "type": "commit"}, {"oid": "be1da70339f61451ee18c7fd56326428a5bd7a8e", "url": "https://github.com/ls1intum/Artemis/commit/be1da70339f61451ee18c7fd56326428a5bd7a8e", "message": "adapted naming scheme", "committedDate": "2020-04-09T19:36:48Z", "type": "commit"}, {"oid": "c726d03b8fa3b0ad3ef2f3f99e572d61e15e620c", "url": "https://github.com/ls1intum/Artemis/commit/c726d03b8fa3b0ad3ef2f3f99e572d61e15e620c", "message": "modified gitignore", "committedDate": "2020-04-09T19:44:31Z", "type": "commit"}, {"oid": "7ab5ce12f90f8d6b3be9636ec4bb7ba4d182a451", "url": "https://github.com/ls1intum/Artemis/commit/7ab5ce12f90f8d6b3be9636ec4bb7ba4d182a451", "message": "added method to simulate the commit hash", "committedDate": "2020-04-09T20:21:56Z", "type": "commit"}, {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "url": "https://github.com/ls1intum/Artemis/commit/690ac363a5edb4ff9265837913689d57d0a9a9d4", "message": "added comment to method", "committedDate": "2020-04-10T10:49:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMxNg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406737316", "bodyText": "this should only be available in DEV mode, please use a profile here", "author": "krusche", "createdAt": "2020-04-10T12:33:18Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Service", "originalCommit": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MzY5MA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407093690", "bodyText": "I added the profile", "author": "F4lka", "createdAt": "2020-04-11T18:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\nindex 96d6f18872..beb65a6098 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n\n@@ -5,6 +5,7 @@ import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n \n import java.util.Optional;\n \n+import org.springframework.context.annotation.Profile;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzM4MA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406737380", "bodyText": "this should only be available in DEV mode, please use a profile here", "author": "krusche", "createdAt": "2020-04-10T12:33:27Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Service", "originalCommit": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MzY4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407093681", "bodyText": "I added the profile", "author": "F4lka", "createdAt": "2020-04-11T18:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzM4MA=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\nindex 1abee7bb88..61081beac2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n\n@@ -5,6 +5,7 @@ import java.util.Optional;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.stereotype.Service;\n \n import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzQyMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406737421", "bodyText": "this should only be available in DEV mode, please use a profile here", "author": "krusche", "createdAt": "2020-04-10T12:33:35Z", "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package de.tum.in.www1.artemis.service.util;\n+\n+import java.util.Random;\n+\n+public class VCSSimulationUtils {", "originalCommit": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODA4MA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407108080", "bodyText": "I added the dev profile annotation", "author": "F4lka", "createdAt": "2020-04-11T20:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java b/src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java\nindex 74f45e537e..a7bb97131c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java\n\n@@ -2,6 +2,9 @@ package de.tum.in.www1.artemis.service.util;\n \n import java.util.Random;\n \n+import org.springframework.context.annotation.Profile;\n+\n+@Profile(\"dev\")\n public class VCSSimulationUtils {\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzY2OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406737669", "bodyText": "please move these constants to another file and do not change ProgrammingExerciseResource at all", "author": "krusche", "createdAt": "2020-04-10T12:34:11Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -734,6 +733,12 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n \n         public static final String SETUP = PROGRAMMING_EXERCISES + \"/setup\";\n \n+        public static final String NO_LOCAL_SETUP = PROGRAMMING_EXERCISES + \"/no-local-setup\";", "originalCommit": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDczNg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406920736", "bodyText": "i moved the endpoints to the corresponding simulation classes", "author": "F4lka", "createdAt": "2020-04-10T20:05:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex bcb4cc2150..6a14839811 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -733,12 +733,6 @@ public class ProgrammingExerciseResource {\n \n         public static final String SETUP = PROGRAMMING_EXERCISES + \"/setup\";\n \n-        public static final String NO_LOCAL_SETUP = PROGRAMMING_EXERCISES + \"/no-local-setup\";\n-\n-        public static final String SUBMISSIONS_NO_LOCAL_SETUP = \"/submissions/no-local-setup\";\n-\n-        public static final String RESULTS_NO_LOCAL_SETUP = \"/results/no-local-setup\";\n-\n         public static final String GET_FOR_COURSE = \"/courses/{courseId}/programming-exercises\";\n \n         public static final String IMPORT = PROGRAMMING_EXERCISES + \"/import/{sourceExerciseId}\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzcwMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406737701", "bodyText": "this should only be available in DEV mode, please use a profile here", "author": "krusche", "createdAt": "2020-04-10T12:34:18Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController", "originalCommit": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MzY0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407093649", "bodyText": "I added the profile", "author": "F4lka", "createdAt": "2020-04-11T18:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\nindex 0c607b9c73..4d2b5dbc30 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n\n@@ -1,18 +1,14 @@\n package de.tum.in.www1.artemis.web.rest;\n \n-import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n-import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n \n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODU0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406738549", "bodyText": "I think some of the checks below are not necessary for a local setup, which would greatly reduce the code complexity here, e.g. title and short name checks, all programming language and package related checks, even the max score can be left out", "author": "krusche", "createdAt": "2020-04-10T12:37:00Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final String packageNameRegex = \"^[a-z][a-z0-9_]*(\\\\.[a-z0-9_]+)+[0-9a-z_]$\";\n+\n+    private final Pattern packageNamePattern = Pattern.compile(packageNameRegex);\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingExerciseSimulationResource(CourseService courseService, UserService userService, AuthorizationCheckService authCheckService,\n+            ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.courseService = courseService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * POST /programming-exercises/no-local-setup: Setup a new programmingExercise\n+     * This method creates a new exercise\n+     * This exercise is only a SIMULATION for the testing of programming exercises without local setup\n+     * @param programmingExercise the input to create/setup new exercise\n+     * @return a Response Entity\n+     */\n+    @PostMapping(ProgrammingExerciseSimulationResource.Endpoints.NO_LOCAL_SETUP)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    public ResponseEntity<ProgrammingExercise> setupProgrammingExerciseWithoutLocalSetup(@RequestBody ProgrammingExercise programmingExercise) {\n+        log.debug(\"REST request to setup ProgrammingExercise : {}\", programmingExercise);\n+        if (programmingExercise.getId() != null) {", "originalCommit": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNjMxOA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406926318", "bodyText": "I removed the input checks and the connected test cases", "author": "F4lka", "createdAt": "2020-04-10T20:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODU0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\nindex 0c607b9c73..4d2b5dbc30 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n\n@@ -1,18 +1,14 @@\n package de.tum.in.www1.artemis.web.rest;\n \n-import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n-import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n \n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODYxNw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406738617", "bodyText": "please remove Transactional here", "author": "krusche", "createdAt": "2020-04-10T12:37:16Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional", "originalCommit": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMzY0NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407213645", "bodyText": "I removed the annotation", "author": "F4lka", "createdAt": "2020-04-12T15:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex 43a9e5a504..845a491edb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -1,12 +1,14 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.util.Optional;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.*;\n \n import de.tum.in.www1.artemis.domain.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODYzOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406738639", "bodyText": "this should only be available in DEV mode, please use a profile here", "author": "krusche", "createdAt": "2020-04-10T12:37:21Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class ProgrammingSubmissionResultSimulationResource {", "originalCommit": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MzY5Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407093697", "bodyText": "I added the profile", "author": "F4lka", "createdAt": "2020-04-11T18:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODYzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex 43a9e5a504..845a491edb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -1,12 +1,14 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.util.Optional;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.*;\n \n import de.tum.in.www1.artemis.domain.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODc0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406738741", "bodyText": "please remove the comment, this will never work for LTI", "author": "krusche", "createdAt": "2020-04-10T12:37:43Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseID) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        // TODO: can we avoid to invoke this code for non LTI students? (to improve performance) // if (participation.isLti()) { // }", "originalCommit": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDQ1OA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406920458", "bodyText": "i removed the comment", "author": "F4lka", "createdAt": "2020-04-10T20:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODc0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex 43a9e5a504..845a491edb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -1,12 +1,14 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.util.Optional;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.*;\n \n import de.tum.in.www1.artemis.domain.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODkyNw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406738927", "bodyText": "I don't really like this name. Either call it \"local-setup\" or something with \"simulation\"", "author": "krusche", "createdAt": "2020-04-10T12:38:14Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final String packageNameRegex = \"^[a-z][a-z0-9_]*(\\\\.[a-z0-9_]+)+[0-9a-z_]$\";\n+\n+    private final Pattern packageNamePattern = Pattern.compile(packageNameRegex);\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingExerciseSimulationResource(CourseService courseService, UserService userService, AuthorizationCheckService authCheckService,\n+            ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.courseService = courseService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * POST /programming-exercises/no-local-setup: Setup a new programmingExercise\n+     * This method creates a new exercise\n+     * This exercise is only a SIMULATION for the testing of programming exercises without local setup\n+     * @param programmingExercise the input to create/setup new exercise\n+     * @return a Response Entity\n+     */\n+    @PostMapping(ProgrammingExerciseSimulationResource.Endpoints.NO_LOCAL_SETUP)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    public ResponseEntity<ProgrammingExercise> setupProgrammingExerciseWithoutLocalSetup(@RequestBody ProgrammingExercise programmingExercise) {\n+        log.debug(\"REST request to setup ProgrammingExercise : {}\", programmingExercise);\n+        if (programmingExercise.getId() != null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"A new programmingExercise cannot already have an ID\", \"idexists\")).body(null);\n+        }\n+\n+        if (programmingExercise.getCourse() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The course is not set\", \"courseNotSet\")).body(null);\n+        }\n+\n+        // fetch course from database to make sure client didn't change groups\n+        Course course = courseService.findOne(programmingExercise.getCourse().getId());\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+            return forbidden();\n+        }\n+\n+        // security mechanism: make sure that we use the values from the database and not the once which might have been altered in the client\n+        programmingExercise.setCourse(course);\n+\n+        // Check if exercise title is set\n+        if (programmingExercise.getTitle() == null || programmingExercise.getTitle().length() < 3) {\n+            return ResponseEntity.badRequest()\n+                    .headers(HeaderUtil.createAlert(applicationName, \"The title of the programming exercise is too short\", \"programmingExerciseTitleInvalid\")).body(null);\n+        }\n+\n+        // Check if the exercise title matches regex\n+        Matcher titleMatcher = TITLE_NAME_PATTERN.matcher(programmingExercise.getTitle());\n+        if (!titleMatcher.matches()) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The title is invalid\", \"titleInvalid\")).body(null);\n+        }\n+\n+        // Check if exercise shortname is set\n+        if (programmingExercise.getShortName() == null || programmingExercise.getShortName().length() < 3) {\n+            return ResponseEntity.badRequest()\n+                    .headers(HeaderUtil.createAlert(applicationName, \"The shortname of the programming exercise is not set or too short\", \"programmingExerciseShortnameInvalid\"))\n+                    .body(null);\n+        }\n+\n+        // Check if course shortname is set\n+        if (course.getShortName() == null || course.getShortName().length() < 3) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The shortname of the course is not set or too short\", \"courseShortnameInvalid\"))\n+                    .body(null);\n+        }\n+\n+        // Check if exercise shortname matches regex\n+        Matcher shortNameMatcher = SHORT_NAME_PATTERN.matcher(programmingExercise.getShortName());\n+        if (!shortNameMatcher.matches()) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The shortname is invalid\", \"shortnameInvalid\")).body(null);\n+        }\n+\n+        List<ProgrammingExercise> programmingExercisesWithSameShortName = programmingExerciseRepository.findAllByShortNameAndCourse(programmingExercise.getShortName(), course);\n+        if (programmingExercisesWithSameShortName.size() > 0) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName,\n+                    \"A programming exercise with the same short name already exists. Please choose a different short name.\", \"shortnameAlreadyExists\")).body(null);\n+        }\n+\n+        // Check if programming language is set\n+        if (programmingExercise.getProgrammingLanguage() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"No programming language was specified\", \"programmingLanguageNotSet\")).body(null);\n+        }\n+\n+        // Check if package name is set\n+        if (programmingExercise.getProgrammingLanguage() == ProgrammingLanguage.JAVA) {\n+            // only Java needs a valid package name at the moment\n+            if (programmingExercise.getPackageName() == null || programmingExercise.getPackageName().length() < 3) {\n+                return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The package name is invalid\", \"packagenameInvalid\")).body(null);\n+            }\n+\n+            // Check if package name matches regex\n+            Matcher packageNameMatcher = packageNamePattern.matcher(programmingExercise.getPackageName());\n+            if (!packageNameMatcher.matches()) {\n+                return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The package name is invalid\", \"packagenameInvalid\")).body(null);\n+            }\n+        }\n+\n+        // Check if max score is set\n+        if (programmingExercise.getMaxScore() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The max score is invalid\", \"maxscoreInvalid\")).body(null);\n+        }\n+\n+        programmingExercise.generateAndSetProjectKey();\n+        try {\n+            ProgrammingExercise newProgrammingExercise = programmingExerciseSimulationService.setupProgrammingExerciseWithoutLocalSetup(programmingExercise); // Setup all\n+                                                                                                                                                              // repositories etc\n+            programmingExerciseSimulationService.setupInitialSubmissionsAndResults(programmingExercise);\n+            return ResponseEntity.created(new URI(\"/api/programming-exercises\" + newProgrammingExercise.getId()))\n+                    .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, newProgrammingExercise.getTitle())).body(newProgrammingExercise);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while setting up programming exercise\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while setting up the exercise: \" + e.getMessage(), \"errorProgrammingExercise\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String PROGRAMMING_EXERCISES = \"/programming-exercises\";\n+\n+        public static final String NO_LOCAL_SETUP = PROGRAMMING_EXERCISES + \"/no-local-setup\";", "originalCommit": "690ac363a5edb4ff9265837913689d57d0a9a9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDM4MA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406920380", "bodyText": "i renamed the endpoint, now it is called EXERCISES_SIMULATION", "author": "F4lka", "createdAt": "2020-04-10T20:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\nindex 0c607b9c73..4d2b5dbc30 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n\n@@ -1,18 +1,14 @@\n package de.tum.in.www1.artemis.web.rest;\n \n-import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n-import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n \n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n"}}, {"oid": "9cb93deedb3dece5b35f6c1a42a6ec2ce8a28ab0", "url": "https://github.com/ls1intum/Artemis/commit/9cb93deedb3dece5b35f6c1a42a6ec2ce8a28ab0", "message": "added button feedback, hover and click effect", "committedDate": "2020-04-10T16:40:36Z", "type": "commit"}, {"oid": "a5a25a420453e3f686a45fca291904453e688ab1", "url": "https://github.com/ls1intum/Artemis/commit/a5a25a420453e3f686a45fca291904453e688ab1", "message": "adjusted the visualization of the repositories and build plan links, for the no local setup scenario.\nAlso adjusted the urls of the no local setup repos", "committedDate": "2020-04-10T19:15:44Z", "type": "commit"}, {"oid": "0942a9229f53a510307d8db1864e80d5f2559e2c", "url": "https://github.com/ls1intum/Artemis/commit/0942a9229f53a510307d8db1864e80d5f2559e2c", "message": "moved the simulation endpoints to the simulation classes and adjusted the naming\nremoved an unnecessary comment", "committedDate": "2020-04-10T20:02:34Z", "type": "commit"}, {"oid": "98631c3e0c0743de500f5a521c9d16b03a4c4d34", "url": "https://github.com/ls1intum/Artemis/commit/98631c3e0c0743de500f5a521c9d16b03a4c4d34", "message": "adjusted and resolved the dependency problems of the tests caused by to the move of the endpoints", "committedDate": "2020-04-10T20:03:49Z", "type": "commit"}, {"oid": "02830866454cce9d491734b1685a96c47ee73509", "url": "https://github.com/ls1intum/Artemis/commit/02830866454cce9d491734b1685a96c47ee73509", "message": "remove input checks and the connected test cases", "committedDate": "2020-04-10T20:22:17Z", "type": "commit"}, {"oid": "cf7d016806dae8654f41d24969f60d156144e683", "url": "https://github.com/ls1intum/Artemis/commit/cf7d016806dae8654f41d24969f60d156144e683", "message": "created new simulation service and moved the method declaration of automaticSetupWithoutLocalSetup there", "committedDate": "2020-04-11T09:34:51Z", "type": "commit"}, {"oid": "be78a6611c6a9c440e017a2d3c8d464e2c196920", "url": "https://github.com/ls1intum/Artemis/commit/be78a6611c6a9c440e017a2d3c8d464e2c196920", "message": "created new simulation service and moved the method declaration of simulationSubmission/Result there", "committedDate": "2020-04-11T13:20:02Z", "type": "commit"}, {"oid": "6b7c7c31cb46bca79f8a25bf8d2d760f30f440d2", "url": "https://github.com/ls1intum/Artemis/commit/6b7c7c31cb46bca79f8a25bf8d2d760f30f440d2", "message": "added Profile annotation dev and adjusted the testcases", "committedDate": "2020-04-11T18:11:07Z", "type": "commit"}, {"oid": "5f13253c0205c68be000e257122e124bf1fe9708", "url": "https://github.com/ls1intum/Artemis/commit/5f13253c0205c68be000e257122e124bf1fe9708", "message": "added method to profile service, to check if the current profile is production", "committedDate": "2020-04-11T19:46:41Z", "type": "commit"}, {"oid": "62fae67c3dabc2460deba26535be8d1edbe6d362", "url": "https://github.com/ls1intum/Artemis/commit/62fae67c3dabc2460deba26535be8d1edbe6d362", "message": "now the buttons are only visible in the course exercise detail view", "committedDate": "2020-04-11T20:32:30Z", "type": "commit"}, {"oid": "5f500b5f74c5a21a33692523a0cf2797798590ae", "url": "https://github.com/ls1intum/Artemis/commit/5f500b5f74c5a21a33692523a0cf2797798590ae", "message": "added the dev profile annotation", "committedDate": "2020-04-11T20:34:12Z", "type": "commit"}, {"oid": "bfe3e4b3f1c1bb32fe443042b6a3e2a5f9d9faa8", "url": "https://github.com/ls1intum/Artemis/commit/bfe3e4b3f1c1bb32fe443042b6a3e2a5f9d9faa8", "message": "removed unused dependencies", "committedDate": "2020-04-12T09:20:08Z", "type": "commit"}, {"oid": "a6587fbdf5afed6da34c6999686dd4b7471ca08e", "url": "https://github.com/ls1intum/Artemis/commit/a6587fbdf5afed6da34c6999686dd4b7471ca08e", "message": "now the submission and the result buttons are only visible for the programming exercises without a setup", "committedDate": "2020-04-12T11:40:40Z", "type": "commit"}, {"oid": "f0b2b072287a5a73602aa0a28ff8d52aa0e4663a", "url": "https://github.com/ls1intum/Artemis/commit/f0b2b072287a5a73602aa0a28ff8d52aa0e4663a", "message": "additional changes of the previous commit", "committedDate": "2020-04-12T11:41:56Z", "type": "commit"}, {"oid": "42273b69a13bf5da434b041fa66ab404fde7328e", "url": "https://github.com/ls1intum/Artemis/commit/42273b69a13bf5da434b041fa66ab404fde7328e", "message": "removed this part, because the value of the variable will be never assigned", "committedDate": "2020-04-12T12:00:23Z", "type": "commit"}, {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "url": "https://github.com/ls1intum/Artemis/commit/bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "message": "removed the transactional annotation", "committedDate": "2020-04-12T12:36:46Z", "type": "commit"}, {"oid": "a79be88983b5f13228ed95a18fc294d47976fd9b", "url": "https://github.com/ls1intum/Artemis/commit/a79be88983b5f13228ed95a18fc294d47976fd9b", "message": "adjusted the simulated url format", "committedDate": "2020-04-12T17:28:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzA3NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407253075", "bodyText": "Can you add a constant for the duplicated string value? Maybe as a static final variable in the class?", "author": "madwau", "createdAt": "2020-04-12T21:14:44Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://nolocalsetup:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://nolocalsetup:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://nolocalsetup:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\nindex 168fad1b78..beb65a6098 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java\n\n@@ -41,6 +41,8 @@ public class ProgrammingExerciseSimulationService {\n \n     private final ResultRepository resultRepository;\n \n+    public final String domain = \"nolocalsetup:7990/scm/\";\n+\n     public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n             GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n             TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzIwNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407253205", "bodyText": "Colon : before port missing.", "author": "madwau", "createdAt": "2020-04-12T21:16:23Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@localhost7990/scm/\" + programmingExercise.getProjectKey() + \"/\"", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjQxNg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407582416", "bodyText": "i added the :", "author": "F4lka", "createdAt": "2020-04-13T16:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\nindex 0ffd074ca6..61081beac2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n\n@@ -41,15 +41,18 @@ public class ProgrammingSubmissionResultSimulationService {\n \n     private final ResultRepository resultRepository;\n \n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n     public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n             ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n-            ResultRepository resultRepository) {\n+            ResultRepository resultRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n         this.participationRepository = participationRepository;\n         this.userService = userService;\n         this.programmingSubmissionRepository = programmingSubmissionRepository;\n         this.resultRepository = resultRepository;\n         this.programmingExerciseService = programmingExerciseService;\n         this.participationService = participationService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzI2NA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407253264", "bodyText": "exerciseId", "author": "madwau", "createdAt": "2020-04-12T21:16:57Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@localhost7990/scm/\" + programmingExercise.getProjectKey() + \"/\"\n+                + programmingExercise.getProjectKey().toLowerCase() + \"-\" + user.getLogin() + \".git\");\n+        programmingExerciseStudentParticipation.setInitializationDate(ZonedDateTime.now());\n+        programmingExerciseStudentParticipation.setProgrammingExercise(programmingExercise);\n+        participationRepository.save(programmingExerciseStudentParticipation);\n+        return programmingExerciseStudentParticipation;\n+    }\n+\n+    /**\n+     * This method creates a new submission for the provided user\n+     * @param exerciseID the exerciseId of the exercise for which a submission should be created\n+     * @return the newly created and stored submission\n+     */\n+    public ProgrammingSubmission createSubmission(Long exerciseID) {", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\nindex 0ffd074ca6..61081beac2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java\n\n@@ -41,15 +41,18 @@ public class ProgrammingSubmissionResultSimulationService {\n \n     private final ResultRepository resultRepository;\n \n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n     public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n             ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n-            ResultRepository resultRepository) {\n+            ResultRepository resultRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n         this.participationRepository = participationRepository;\n         this.userService = userService;\n         this.programmingSubmissionRepository = programmingSubmissionRepository;\n         this.resultRepository = resultRepository;\n         this.programmingExerciseService = programmingExerciseService;\n         this.participationService = participationService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1NDAzMw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407254033", "bodyText": "It also needs to be checked that the user is not just any kind of instructor but an instructor for this specific course. This can be done via isAtLeastInstructorInCourse or isAtLeastInstructorForExercise.", "author": "madwau", "createdAt": "2020-04-12T21:24:58Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingExerciseSimulationResource(CourseService courseService, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.courseService = courseService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * POST /programming-exercises/no-local-setup: Setup a new programmingExercise\n+     * This method creates a new exercise\n+     * This exercise is only a SIMULATION for the testing of programming exercises without local setup\n+     * @param programmingExercise the input to create/setup new exercise\n+     * @return a Response Entity\n+     */\n+    @PostMapping(ProgrammingExerciseSimulationResource.Endpoints.EXERCISES_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    public ResponseEntity<ProgrammingExercise> setupProgrammingExerciseWithoutLocalSetup(@RequestBody ProgrammingExercise programmingExercise) {\n+        log.debug(\"REST request to setup ProgrammingExercise : {}\", programmingExercise);\n+\n+        // fetch course from database to make sure client didn't change groups\n+        Course course = courseService.findOne(programmingExercise.getCourse().getId());", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\nindex 8ccc5361ab..4d2b5dbc30 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n\n@@ -1,5 +1,7 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.net.URI;\n import java.net.URISyntaxException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1NDMxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407254315", "bodyText": "This is not actually doing anything in terms of security. You are finding the course based on the course id specified on the programming exercise from the payload. If the client actually manipulated the course id in the payload, you would end up fetching the wrong course and transferring the programming exercise into it from its original course.", "author": "madwau", "createdAt": "2020-04-12T21:28:10Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingExerciseSimulationResource(CourseService courseService, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.courseService = courseService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * POST /programming-exercises/no-local-setup: Setup a new programmingExercise\n+     * This method creates a new exercise\n+     * This exercise is only a SIMULATION for the testing of programming exercises without local setup\n+     * @param programmingExercise the input to create/setup new exercise\n+     * @return a Response Entity\n+     */\n+    @PostMapping(ProgrammingExerciseSimulationResource.Endpoints.EXERCISES_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    public ResponseEntity<ProgrammingExercise> setupProgrammingExerciseWithoutLocalSetup(@RequestBody ProgrammingExercise programmingExercise) {\n+        log.debug(\"REST request to setup ProgrammingExercise : {}\", programmingExercise);\n+\n+        // fetch course from database to make sure client didn't change groups\n+        Course course = courseService.findOne(programmingExercise.getCourse().getId());\n+\n+        // security mechanism: make sure that we use the values from the database and not the once which might have been altered in the client\n+        programmingExercise.setCourse(course);", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\nindex 8ccc5361ab..4d2b5dbc30 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java\n\n@@ -1,5 +1,7 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.net.URI;\n import java.net.URISyntaxException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1ODk0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407258941", "bodyText": "exerciseId", "author": "madwau", "createdAt": "2020-04-12T22:15:10Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex aa61b9e2f2..845a491edb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -1,5 +1,7 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.util.Optional;\n \n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTAwMg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407259002", "bodyText": "Check missing whether instructor is instructor for this exercise.", "author": "madwau", "createdAt": "2020-04-12T22:15:54Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex aa61b9e2f2..845a491edb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -1,5 +1,7 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.util.Optional;\n \n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTA0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407259049", "bodyText": "exerciseId", "author": "madwau", "createdAt": "2020-04-12T22:16:26Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex aa61b9e2f2..845a491edb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -1,5 +1,7 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.util.Optional;\n \n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTE3Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407259173", "bodyText": "Could it be that no participation exists when this endpoint is called? What happens if the user clicks on Result before clicking on Submission?", "author": "madwau", "createdAt": "2020-04-12T22:17:42Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseID) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MTYyNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407841625", "bodyText": "i added a check if there is no participation and now the submission button must be clicked at least once before the user can click the result button", "author": "F4lka", "createdAt": "2020-04-14T03:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex aa61b9e2f2..845a491edb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -1,5 +1,7 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.util.Optional;\n \n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDg2Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407260866", "bodyText": "Should this be removed if it is commented out?", "author": "madwau", "createdAt": "2020-04-12T22:35:19Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -217,6 +218,21 @@ public void setupProgrammingExercise_validExercise_created(ExerciseMode mode) th\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @ParameterizedTest\n+    @EnumSource(ExerciseMode.class)\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void setupProgrammingExerciseWithoutLocalSetup_validExercise_created(ExerciseMode mode) throws Exception {\n+        exercise.setMode(mode);\n+        // mockConnectorRequestsForSetup(exercise);", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 51b1d6455f..489c1c8a61 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n\n@@ -223,13 +223,12 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void setupProgrammingExerciseWithoutLocalSetup_validExercise_created(ExerciseMode mode) throws Exception {\n         exercise.setMode(mode);\n-        // mockConnectorRequestsForSetup(exercise);\n+        assertThat(programmingExerciseRepository.count()).isEqualTo(0);\n         final var generatedExercise = request.postWithResponseBody(\n                 ProgrammingExerciseSimulationResource.Endpoints.ROOT + ProgrammingExerciseSimulationResource.Endpoints.EXERCISES_SIMULATION, exercise, ProgrammingExercise.class,\n                 HttpStatus.CREATED);\n \n-        exercise.setId(generatedExercise.getId());\n-        assertThat(exercise).isEqualTo(generatedExercise);\n+        assertThat(programmingExerciseRepository.findById(generatedExercise.getId()).isPresent());\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTAwMw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407261003", "bodyText": "Together with the previous line, this is trivially true. You are setting the id of exercise to the id of generatedExercise and then you are checking if the ids are equal (isEqualTo used the equals method of Exercise which does nothing more then comparing the ids).", "author": "madwau", "createdAt": "2020-04-12T22:37:10Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -217,6 +218,21 @@ public void setupProgrammingExercise_validExercise_created(ExerciseMode mode) th\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @ParameterizedTest\n+    @EnumSource(ExerciseMode.class)\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void setupProgrammingExerciseWithoutLocalSetup_validExercise_created(ExerciseMode mode) throws Exception {\n+        exercise.setMode(mode);\n+        // mockConnectorRequestsForSetup(exercise);\n+        final var generatedExercise = request.postWithResponseBody(\n+                ProgrammingExerciseSimulationResource.Endpoints.ROOT + ProgrammingExerciseSimulationResource.Endpoints.EXERCISES_SIMULATION, exercise, ProgrammingExercise.class,\n+                HttpStatus.CREATED);\n+\n+        exercise.setId(generatedExercise.getId());\n+        assertThat(exercise).isEqualTo(generatedExercise);", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyOTQ3MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407829471", "bodyText": "i adjusted the test case", "author": "F4lka", "createdAt": "2020-04-14T02:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\nindex 51b1d6455f..489c1c8a61 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java\n\n@@ -223,13 +223,12 @@ public class ProgrammingExerciseBitbucketBambooIntegrationTest extends AbstractS\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void setupProgrammingExerciseWithoutLocalSetup_validExercise_created(ExerciseMode mode) throws Exception {\n         exercise.setMode(mode);\n-        // mockConnectorRequestsForSetup(exercise);\n+        assertThat(programmingExerciseRepository.count()).isEqualTo(0);\n         final var generatedExercise = request.postWithResponseBody(\n                 ProgrammingExerciseSimulationResource.Endpoints.ROOT + ProgrammingExerciseSimulationResource.Endpoints.EXERCISES_SIMULATION, exercise, ProgrammingExercise.class,\n                 HttpStatus.CREATED);\n \n-        exercise.setId(generatedExercise.getId());\n-        assertThat(exercise).isEqualTo(generatedExercise);\n+        assertThat(programmingExerciseRepository.findById(generatedExercise.getId()).isPresent());\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTM4OA==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407261388", "bodyText": "Should return 201 Created instead of 200 OK.", "author": "madwau", "createdAt": "2020-04-12T22:41:50Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTQ0Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407849443", "bodyText": "i changed it to 201", "author": "F4lka", "createdAt": "2020-04-14T03:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex aa61b9e2f2..845a491edb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -1,5 +1,7 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.util.Optional;\n \n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQwOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407261409", "bodyText": "Should return 201 Created instead of 200 OK.", "author": "madwau", "createdAt": "2020-04-12T22:41:58Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseID) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        return ResponseEntity.ok().body(result);", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTQ3Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407849477", "bodyText": "i changed it to 201", "author": "F4lka", "createdAt": "2020-04-14T03:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc21c3e751707b74e0d0c9eab35bbb3fed076e81", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\nindex aa61b9e2f2..845a491edb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java\n\n@@ -1,5 +1,7 @@\n package de.tum.in.www1.artemis.web.rest;\n \n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n import java.util.Optional;\n \n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQ0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407261449", "bodyText": "Should return 201 Created instead of 200 OK.", "author": "madwau", "createdAt": "2020-04-12T22:42:28Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "diffHunk": "@@ -462,6 +464,42 @@ void shouldCreateSubmissionsForAllParticipationsOfExerciseAfterTestRepositoryCom\n         }\n     }\n \n+    /**\n+     * This tests if the submission is created for programming exercises without local setup\n+     */\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void shouldCreateSubmissionWithoutLocalSetup() throws Exception {\n+        assertThat(submissionRepository.findAll()).hasSize(0);\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTU4Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407849582", "bodyText": "i changed it to 201", "author": "F4lka", "createdAt": "2020-04-14T03:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a88bf7c6f44eed539d36e588409504e6af005481", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java\nindex d60eb04f79..30969d5016 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java\n\n@@ -472,7 +472,7 @@ class ProgrammingSubmissionAndResultIntegrationTest extends AbstractSpringIntegr\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     void shouldCreateSubmissionWithoutLocalSetup() throws Exception {\n         assertThat(submissionRepository.findAll()).hasSize(0);\n-        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.CREATED);\n         assertThat(submissionRepository.findAll()).hasSize(1);\n         ProgrammingSubmission submission = submissionRepository.findAll().get(0);\n         assertThat(returnedSubmission).isEqualTo(submission);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQ1Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407261457", "bodyText": "Should return 201 Created instead of 200 OK.", "author": "madwau", "createdAt": "2020-04-12T22:42:36Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "diffHunk": "@@ -462,6 +464,42 @@ void shouldCreateSubmissionsForAllParticipationsOfExerciseAfterTestRepositoryCom\n         }\n     }\n \n+    /**\n+     * This tests if the submission is created for programming exercises without local setup\n+     */\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void shouldCreateSubmissionWithoutLocalSetup() throws Exception {\n+        assertThat(submissionRepository.findAll()).hasSize(0);\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);\n+        assertThat(submissionRepository.findAll()).hasSize(1);\n+        ProgrammingSubmission submission = submissionRepository.findAll().get(0);\n+        assertThat(returnedSubmission).isEqualTo(submission);\n+        assertThat(participationRepository.findById(submission.getParticipation().getId()));\n+        assertThat(participationIds.contains(submission.getParticipation().getId()));\n+        assertThat(submission.getType()).isEqualTo(SubmissionType.MANUAL);\n+        assertThat(submission.isSubmitted()).isTrue();\n+    }\n+\n+    /**\n+     * This tests if the result is created for programming exercises without local setup\n+     */\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void shouldCreateResultWithoutLocalSetup() throws Exception {\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);\n+        assertThat(resultRepository.findAll()).hasSize(0);\n+        Result returnedResult = request.postWithResponseBody(\"/api\" + RESULTS_SIMULATION + \"/\" + exerciseId, null, Result.class, HttpStatus.OK);", "originalCommit": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTY2Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407849663", "bodyText": "i changed it to 201", "author": "F4lka", "createdAt": "2020-04-14T03:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a88bf7c6f44eed539d36e588409504e6af005481", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java\nindex d60eb04f79..30969d5016 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java\n\n@@ -472,7 +472,7 @@ class ProgrammingSubmissionAndResultIntegrationTest extends AbstractSpringIntegr\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     void shouldCreateSubmissionWithoutLocalSetup() throws Exception {\n         assertThat(submissionRepository.findAll()).hasSize(0);\n-        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.CREATED);\n         assertThat(submissionRepository.findAll()).hasSize(1);\n         ProgrammingSubmission submission = submissionRepository.findAll().get(0);\n         assertThat(returnedSubmission).isEqualTo(submission);\n"}}, {"oid": "ac2df73e373f557d7c8dcae4593bcd0993f47433", "url": "https://github.com/ls1intum/Artemis/commit/ac2df73e373f557d7c8dcae4593bcd0993f47433", "message": "renaming of the parameters exerciseID -> exerciseId", "committedDate": "2020-04-13T17:07:06Z", "type": "commit"}, {"oid": "c88994698573f3c5f62bcdfb972e387fa290cb71", "url": "https://github.com/ls1intum/Artemis/commit/c88994698573f3c5f62bcdfb972e387fa290cb71", "message": "renaming of the parameters exerciseID -> exerciseId part2", "committedDate": "2020-04-13T17:07:33Z", "type": "commit"}, {"oid": "997be49128b6d46aab701fd93e48d46fd106e8d8", "url": "https://github.com/ls1intum/Artemis/commit/997be49128b6d46aab701fd93e48d46fd106e8d8", "message": "added final variable for the domain", "committedDate": "2020-04-13T17:24:22Z", "type": "commit"}, {"oid": "4e14df10e85a95d386e82f75b997de2f902d841b", "url": "https://github.com/ls1intum/Artemis/commit/4e14df10e85a95d386e82f75b997de2f902d841b", "message": "adjusted the hardcoded urls with the final variable", "committedDate": "2020-04-13T17:35:01Z", "type": "commit"}, {"oid": "4d14a696ddbc2c83e6b391220e8d3fd3bce0f79d", "url": "https://github.com/ls1intum/Artemis/commit/4d14a696ddbc2c83e6b391220e8d3fd3bce0f79d", "message": "removed button id's of the submission and result button", "committedDate": "2020-04-13T17:48:09Z", "type": "commit"}, {"oid": "080229addc7bc143537a1a485800b7549b2c9400", "url": "https://github.com/ls1intum/Artemis/commit/080229addc7bc143537a1a485800b7549b2c9400", "message": "modified methods in to computed properties and adjusted a check in an if-clause", "committedDate": "2020-04-14T01:18:17Z", "type": "commit"}, {"oid": "07b1a6842410717df55ae42a06b7d122ad0c40af", "url": "https://github.com/ls1intum/Artemis/commit/07b1a6842410717df55ae42a06b7d122ad0c40af", "message": "added security check if the user is an instructor in course or an admin", "committedDate": "2020-04-14T01:28:44Z", "type": "commit"}, {"oid": "05e5db45d62f09a055c9cf6430d2e784f6eabfdf", "url": "https://github.com/ls1intum/Artemis/commit/05e5db45d62f09a055c9cf6430d2e784f6eabfdf", "message": "adjusted the check", "committedDate": "2020-04-14T01:43:07Z", "type": "commit"}, {"oid": "e641058e2d80c7b38dd86f771b7cfa01dfc1c5cd", "url": "https://github.com/ls1intum/Artemis/commit/e641058e2d80c7b38dd86f771b7cfa01dfc1c5cd", "message": "added security check for the method createParticipationAndSubmissionSimulation", "committedDate": "2020-04-14T01:43:50Z", "type": "commit"}, {"oid": "8009f80563a22575cd117fd3a1c50626704710e3", "url": "https://github.com/ls1intum/Artemis/commit/8009f80563a22575cd117fd3a1c50626704710e3", "message": "removed unnecessary comment", "committedDate": "2020-04-14T01:46:53Z", "type": "commit"}, {"oid": "b585fc9d8c6239c734070a55d1b2f9c679fdb108", "url": "https://github.com/ls1intum/Artemis/commit/b585fc9d8c6239c734070a55d1b2f9c679fdb108", "message": "added jhi alerts for the submission and result buttons", "committedDate": "2020-04-14T02:20:20Z", "type": "commit"}, {"oid": "171373cc53beb5191088f80565349e7ebe4af71d", "url": "https://github.com/ls1intum/Artemis/commit/171373cc53beb5191088f80565349e7ebe4af71d", "message": "modified the test case", "committedDate": "2020-04-14T02:30:55Z", "type": "commit"}]}