{"pr_number": 1756, "pr_title": "[Exam] Evaluate (quiz) exercises by instructor.", "pr_createdAt": "2020-06-29T20:46:57Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1756", "timeline": [{"oid": "240417b13f201d2db5fd7324409650d4fffb7768", "url": "https://github.com/ls1intum/Artemis/commit/240417b13f201d2db5fd7324409650d4fffb7768", "message": "Add evaluate exercises button, add client -> server connection.", "committedDate": "2020-06-29T20:45:17Z", "type": "commit"}, {"oid": "c06ffcba1498b2bfdb7ed040ff3b06f189c44e6b", "url": "https://github.com/ls1intum/Artemis/commit/c06ffcba1498b2bfdb7ed040ff3b06f189c44e6b", "message": "Rename to evaluateQuiz, disable action buttons if not applicable.", "committedDate": "2020-06-29T21:24:11Z", "type": "commit"}, {"oid": "ac97a04c0b7d4a66384579e87581973404cbadae", "url": "https://github.com/ls1intum/Artemis/commit/ac97a04c0b7d4a66384579e87581973404cbadae", "message": "Merge branch 'develop' into exam/management/exercise-evaluate", "committedDate": "2020-07-01T08:35:53Z", "type": "commit"}, {"oid": "142f763f8ee27f9285ca899874431738ba3a6417", "url": "https://github.com/ls1intum/Artemis/commit/142f763f8ee27f9285ca899874431738ba3a6417", "message": "Add first version of evaluate quiz for exams.", "committedDate": "2020-07-01T09:49:30Z", "type": "commit"}, {"oid": "07298d0f08deed0844843ee7d073ee12c07a20c1", "url": "https://github.com/ls1intum/Artemis/commit/07298d0f08deed0844843ee7d073ee12c07a20c1", "message": "Update comments.", "committedDate": "2020-07-01T10:02:41Z", "type": "commit"}, {"oid": "4811e3b684eb68b9ebb539d30ea24d73a3f3f66a", "url": "https://github.com/ls1intum/Artemis/commit/4811e3b684eb68b9ebb539d30ea24d73a3f3f66a", "message": "Add missing comments.", "committedDate": "2020-07-01T10:04:29Z", "type": "commit"}, {"oid": "8f929e02c12b155259505d02a5657e33b58be819", "url": "https://github.com/ls1intum/Artemis/commit/8f929e02c12b155259505d02a5657e33b58be819", "message": "Handle multiple submissions correctly. Add test cases.", "committedDate": "2020-07-01T14:54:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODI0NA==", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448478244", "bodyText": "check if this already exists", "author": "krusche", "createdAt": "2020-07-01T16:24:29Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;\n+                if (submissions.size() == 0) {\n+                    log.warn(\"Found no submissions for participation {} (Participant {}) in quiz {}\", participation.getId(), participation.getParticipant().getName(),\n+                            quizExercise.getId());\n+                    continue;\n+                }\n+                else {\n+                    List<Submission> submissionsList = new ArrayList<>(submissions);\n+\n+                    // Load submission with highest id\n+                    submissionsList.sort(Comparator.comparing(Submission::getId).reversed());\n+                    quizSubmission = (QuizSubmission) submissionsList.get(0);\n+                }\n+\n+                // Update attributes for submission and participations\n+                quizSubmission.setType(SubmissionType.TIMEOUT);\n+                participation.setInitializationState(InitializationState.FINISHED);\n+\n+                // create new result\n+                Result result = new Result().participation(participation).submission(quizSubmission);", "originalCommit": "8f929e02c12b155259505d02a5657e33b58be819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyODAxMA==", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448628010", "bodyText": "I've changed it", "author": "sleiss", "createdAt": "2020-07-01T21:33:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "5026aec22772e6b9d90cdda2ba5c0f2d402dfcc2", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\nindex 8335b8289..f296a4c3b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\n\n@@ -1,5 +1,6 @@\n package de.tum.in.www1.artemis.service;\n \n+import java.time.ZonedDateTime;\n import java.util.*;\n \n import javax.validation.constraints.NotNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODU0OA==", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448478548", "bodyText": "you can assume that there is one submission, but it might still make sense to warn or even throw if there are multiple ones or no ones", "author": "krusche", "createdAt": "2020-07-01T16:25:02Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;", "originalCommit": "8f929e02c12b155259505d02a5657e33b58be819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNzk1NA==", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448627954", "bodyText": "I've changed it", "author": "sleiss", "createdAt": "2020-07-01T21:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "5026aec22772e6b9d90cdda2ba5c0f2d402dfcc2", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\nindex 8335b8289..f296a4c3b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\n\n@@ -1,5 +1,6 @@\n package de.tum.in.www1.artemis.service;\n \n+import java.time.ZonedDateTime;\n import java.util.*;\n \n import javax.validation.constraints.NotNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODczMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448478731", "bodyText": "is already set to manually", "author": "krusche", "createdAt": "2020-07-01T16:25:20Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;\n+                if (submissions.size() == 0) {\n+                    log.warn(\"Found no submissions for participation {} (Participant {}) in quiz {}\", participation.getId(), participation.getParticipant().getName(),\n+                            quizExercise.getId());\n+                    continue;\n+                }\n+                else {\n+                    List<Submission> submissionsList = new ArrayList<>(submissions);\n+\n+                    // Load submission with highest id\n+                    submissionsList.sort(Comparator.comparing(Submission::getId).reversed());\n+                    quizSubmission = (QuizSubmission) submissionsList.get(0);\n+                }\n+\n+                // Update attributes for submission and participations\n+                quizSubmission.setType(SubmissionType.TIMEOUT);", "originalCommit": "8f929e02c12b155259505d02a5657e33b58be819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyODA5Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448628097", "bodyText": "I've removed it", "author": "sleiss", "createdAt": "2020-07-01T21:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5026aec22772e6b9d90cdda2ba5c0f2d402dfcc2", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\nindex 8335b8289..f296a4c3b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\n\n@@ -1,5 +1,6 @@\n package de.tum.in.www1.artemis.service;\n \n+import java.time.ZonedDateTime;\n import java.util.*;\n \n import javax.validation.constraints.NotNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3OTQ3Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448479473", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n          \n          \n            \n                private Set<Result> evaluateSubmissions(@NotNull QuizExercise quizExercise) {", "author": "krusche", "createdAt": "2020-07-01T16:26:35Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {", "originalCommit": "8f929e02c12b155259505d02a5657e33b58be819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyODE4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448628187", "bodyText": "I've renamed it", "author": "sleiss", "createdAt": "2020-07-01T21:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3OTQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5026aec22772e6b9d90cdda2ba5c0f2d402dfcc2", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\nindex 8335b8289..f296a4c3b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java\n\n@@ -1,5 +1,6 @@\n package de.tum.in.www1.artemis.service;\n \n+import java.time.ZonedDateTime;\n import java.util.*;\n \n import javax.validation.constraints.NotNull;\n"}}, {"oid": "5026aec22772e6b9d90cdda2ba5c0f2d402dfcc2", "url": "https://github.com/ls1intum/Artemis/commit/5026aec22772e6b9d90cdda2ba5c0f2d402dfcc2", "message": "Rename methods, add more tests, implement feedback.", "committedDate": "2020-07-01T21:34:45Z", "type": "commit"}, {"oid": "9e4e6b9c412bdbd4a5ab535f1913660a0d718a2b", "url": "https://github.com/ls1intum/Artemis/commit/9e4e6b9c412bdbd4a5ab535f1913660a0d718a2b", "message": "Merge branch 'develop' into exam/management/exercise-evaluate", "committedDate": "2020-07-01T21:35:03Z", "type": "commit"}, {"oid": "c70f2c310317e7f44133148066443ca0796e3d92", "url": "https://github.com/ls1intum/Artemis/commit/c70f2c310317e7f44133148066443ca0796e3d92", "message": "Fix test cases, fix recalculate.", "committedDate": "2020-07-02T07:43:42Z", "type": "commit"}, {"oid": "bbbb57778a2dc3b4c2844d65b15578e8d04d973a", "url": "https://github.com/ls1intum/Artemis/commit/bbbb57778a2dc3b4c2844d65b15578e8d04d973a", "message": "Merge remote-tracking branch 'origin/exam/management/exercise-evaluate' into exam/management/exercise-evaluate", "committedDate": "2020-07-02T07:47:33Z", "type": "commit"}, {"oid": "866b8fc4137ee3c1364fac80b51cfa8c4b2021a8", "url": "https://github.com/ls1intum/Artemis/commit/866b8fc4137ee3c1364fac80b51cfa8c4b2021a8", "message": "Add statistics button to exam groups page.", "committedDate": "2020-07-02T08:50:58Z", "type": "commit"}, {"oid": "ba41305e544910cda735c8892c737aa51b3c24cf", "url": "https://github.com/ls1intum/Artemis/commit/ba41305e544910cda735c8892c737aa51b3c24cf", "message": "Clarify method returns.", "committedDate": "2020-07-02T08:54:49Z", "type": "commit"}, {"oid": "320c3f96cc194a3783d9f700ead1caa792d77f12", "url": "https://github.com/ls1intum/Artemis/commit/320c3f96cc194a3783d9f700ead1caa792d77f12", "message": "Fix scores page.", "committedDate": "2020-07-02T09:31:13Z", "type": "commit"}, {"oid": "b5323dd53ad877b8e21c259c142231e3845c30a8", "url": "https://github.com/ls1intum/Artemis/commit/b5323dd53ad877b8e21c259c142231e3845c30a8", "message": "Fix statistics selection for exam quiz exercises.", "committedDate": "2020-07-02T12:42:34Z", "type": "commit"}]}