{"pr_number": 2137, "pr_title": "[Enhancement] AssessmentDueDate for programming exercises", "pr_createdAt": "2020-09-29T17:14:00Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2137", "timeline": [{"oid": "bcd3682ca133744a2116bc85694be8f8b20c9ff0", "url": "https://github.com/ls1intum/Artemis/commit/bcd3682ca133744a2116bc85694be8f8b20c9ff0", "message": "fix result for participation endpoint", "committedDate": "2020-09-28T14:48:28Z", "type": "commit"}, {"oid": "333ab1960a7a95c154f81e838e0c89479b8bd35b", "url": "https://github.com/ls1intum/Artemis/commit/333ab1960a7a95c154f81e838e0c89479b8bd35b", "message": "filter out results when the assessment due date is not over", "committedDate": "2020-09-29T16:13:18Z", "type": "commit"}, {"oid": "cf949d8b1d7ff4f8d6b5ec10ff84c1976804bb9b", "url": "https://github.com/ls1intum/Artemis/commit/cf949d8b1d7ff4f8d6b5ec10ff84c1976804bb9b", "message": "override for programming exercises, show only manual result when assessment due date is passed or null, else show automatic result", "committedDate": "2020-09-29T16:14:32Z", "type": "commit"}, {"oid": "bea84dcbf72e8ae97f982375557623418c0a9cd4", "url": "https://github.com/ls1intum/Artemis/commit/bea84dcbf72e8ae97f982375557623418c0a9cd4", "message": "add override for for-dashboard call", "committedDate": "2020-09-29T16:55:52Z", "type": "commit"}, {"oid": "c89a7e23e8b1041d3da4697cc914323c9f372348", "url": "https://github.com/ls1intum/Artemis/commit/c89a7e23e8b1041d3da4697cc914323c9f372348", "message": "add todo", "committedDate": "2020-09-29T17:05:24Z", "type": "commit"}, {"oid": "9cff4394293365451e8e5415304b85b2679c960f", "url": "https://github.com/ls1intum/Artemis/commit/9cff4394293365451e8e5415304b85b2679c960f", "message": "Merge branch 'develop' into bugfix/hide-manual-assessment-draft", "committedDate": "2020-09-29T17:35:18Z", "type": "commit"}, {"oid": "bfb133bc5f27fb493528570c2540b217ddc0dfda", "url": "https://github.com/ls1intum/Artemis/commit/bfb133bc5f27fb493528570c2540b217ddc0dfda", "message": "Merge branch 'develop' into bugfix/hide-manual-assessment-draft", "committedDate": "2020-10-01T16:28:57Z", "type": "commit"}, {"oid": "f75369a08f23efd5be14d64c84ddfd51e28880d3", "url": "https://github.com/ls1intum/Artemis/commit/f75369a08f23efd5be14d64c84ddfd51e28880d3", "message": "Fix and improve tests for GET /student-participaton-with-latest-result-and-feedbacks", "committedDate": "2020-10-01T18:18:43Z", "type": "commit"}, {"oid": "cc7205852c9c0b69b359cb8c59e50bf905d6a4e0", "url": "https://github.com/ls1intum/Artemis/commit/cc7205852c9c0b69b359cb8c59e50bf905d6a4e0", "message": "fix empty results array error", "committedDate": "2020-10-02T19:01:28Z", "type": "commit"}, {"oid": "980464363638f2633ce7887732ff82043512c7a4", "url": "https://github.com/ls1intum/Artemis/commit/980464363638f2633ce7887732ff82043512c7a4", "message": "Merge branch 'develop' into bugfix/hide-manual-assessment-draft", "committedDate": "2020-10-02T19:04:16Z", "type": "commit"}, {"oid": "2d72346e1dd8e8ec7ecc416f68981fe6b793881c", "url": "https://github.com/ls1intum/Artemis/commit/2d72346e1dd8e8ec7ecc416f68981fe6b793881c", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into bugfix/hide-manual-assessment-draft", "committedDate": "2020-10-05T06:14:13Z", "type": "commit"}, {"oid": "641d19fa646e553f797a095ddc17a94174fcaacc", "url": "https://github.com/ls1intum/Artemis/commit/641d19fa646e553f797a095ddc17a94174fcaacc", "message": "add check for manual assessment for programming exercises", "committedDate": "2020-10-05T10:24:15Z", "type": "commit"}, {"oid": "170a1cf5250b9dd26d3e93da31273e6de1bb8b59", "url": "https://github.com/ls1intum/Artemis/commit/170a1cf5250b9dd26d3e93da31273e6de1bb8b59", "message": "remove manual result button from scores page after assessment due date", "committedDate": "2020-10-05T13:26:54Z", "type": "commit"}, {"oid": "4c5de816dd5f713ba977180c7f64b4fbe32566d2", "url": "https://github.com/ls1intum/Artemis/commit/4c5de816dd5f713ba977180c7f64b4fbe32566d2", "message": "add warning when assessment due date is over", "committedDate": "2020-10-06T01:53:01Z", "type": "commit"}, {"oid": "93f0f3d373b5c273f5636589267af0e232eb3efb", "url": "https://github.com/ls1intum/Artemis/commit/93f0f3d373b5c273f5636589267af0e232eb3efb", "message": "add client test", "committedDate": "2020-10-06T06:50:13Z", "type": "commit"}, {"oid": "183816508443aeb2ebc2b83182bf8d87809baee4", "url": "https://github.com/ls1intum/Artemis/commit/183816508443aeb2ebc2b83182bf8d87809baee4", "message": "run spotless", "committedDate": "2020-10-06T07:24:37Z", "type": "commit"}, {"oid": "7114332197a05bb1fc7fbdee184be1f7222ba84e", "url": "https://github.com/ls1intum/Artemis/commit/7114332197a05bb1fc7fbdee184be1f7222ba84e", "message": "add server test", "committedDate": "2020-10-06T12:07:57Z", "type": "commit"}, {"oid": "9eaad59a156264e98b97c6930267d0cb94313897", "url": "https://github.com/ls1intum/Artemis/commit/9eaad59a156264e98b97c6930267d0cb94313897", "message": "adapt databaseUtil", "committedDate": "2020-10-06T15:56:38Z", "type": "commit"}, {"oid": "fc5129f17d72ce0128d041a07f0455e9a37af353", "url": "https://github.com/ls1intum/Artemis/commit/fc5129f17d72ce0128d041a07f0455e9a37af353", "message": "add more server tests", "committedDate": "2020-10-06T16:15:11Z", "type": "commit"}, {"oid": "ba2c8d85e14db5c3c494a5ed36858011b97800ea", "url": "https://github.com/ls1intum/Artemis/commit/ba2c8d85e14db5c3c494a5ed36858011b97800ea", "message": "fix failing tests and run spotless", "committedDate": "2020-10-06T16:53:11Z", "type": "commit"}, {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae", "url": "https://github.com/ls1intum/Artemis/commit/1e02996fd53c7a1a360240aa03fb334b780529ae", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into bugfix/hide-manual-assessment-draft", "committedDate": "2020-10-06T16:53:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459641", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:06Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY1Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459657", "bodyText": "Codacy found an issue: Useless parentheses.", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:07Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "diffHunk": "@@ -482,6 +486,44 @@ public void filterSensitiveInformation() {\n         super.filterSensitiveInformation();\n     }\n \n+    @Override\n+    public Set<Result> findResultsFilteredForStudents(Participation participation) {\n+        boolean isAssessmentOver = getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+        return participation.getResults().stream()\n+                .filter(result -> (result.getAssessmentType().equals(AssessmentType.MANUAL) && isAssessmentOver) || result.getAssessmentType().equals(AssessmentType.AUTOMATIC))", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459672", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExerciseDetails_assessmentDueDate_notPassed' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:09Z", "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY4Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459686", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'filterForCourseDashboard_assessmentDueDate_passed' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:10Z", "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should only have one automatic result\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                    assertThat(participation.getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+                }\n+                // Quiz exercises should only have one automatic result\n+                else if (exercise instanceof QuizExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+                else {\n+                    // All other exercises should not display a result at all\n+                    assertThat(participation.getResults().size()).isEqualTo(0);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_passed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(true);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add an manual result, to check whether this is correctly displayed after the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should now how two results and the latest one is the manual result.\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(2);\n+                    assertThat(participation.getResults().stream().sorted(Comparator.comparing(Result::getId).reversed()).iterator().next().getAssessmentType())\n+                            .isEqualTo(AssessmentType.MANUAL);\n+                }\n+                else {\n+                    // All other exercises have only one visible result now\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void filterForCourseDashboard_assessmentDueDate_notPassed() {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                exercise.getStudentParticipations().iterator().next().setResults(Set\n+                        .of(database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next())));\n+            }\n+            exerciseService.filterForCourseDashboard(exercise, List.copyOf(exercise.getStudentParticipations()), \"student1\", true);\n+            // Programming exercises should only have one automatic result\n+            if (exercise instanceof ProgrammingExercise) {\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().size()).isEqualTo(1);\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+            }\n+            else if (exercise instanceof QuizExercise) {\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().size()).isEqualTo(1);\n+            }\n+            else {\n+                // All other exercises have only one visible result now\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().size()).isEqualTo(0);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void filterForCourseDashboard_assessmentDueDate_passed() {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY5OA==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459698", "bodyText": "Codacy found an issue: Useless parentheses.", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:11Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "diffHunk": "@@ -482,6 +486,44 @@ public void filterSensitiveInformation() {\n         super.filterSensitiveInformation();\n     }\n \n+    @Override\n+    public Set<Result> findResultsFilteredForStudents(Participation participation) {\n+        boolean isAssessmentOver = getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+        return participation.getResults().stream()\n+                .filter(result -> (result.getAssessmentType().equals(AssessmentType.MANUAL) && isAssessmentOver) || result.getAssessmentType().equals(AssessmentType.AUTOMATIC))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    @Nullable\n+    public Submission findLatestSubmissionWithRatedResultWithCompletionDate(Participation participation, Boolean ignoreAssessmentDueDate) {\n+        // for most types of exercises => return latest result (all results are relevant)\n+        Submission latestSubmission = null;\n+        // we get the results over the submissions\n+        if (participation.getSubmissions() == null || participation.getSubmissions().isEmpty()) {\n+            return null;\n+        }\n+        for (var submission : participation.getSubmissions()) {\n+            var result = submission.getResult();\n+            if (result == null) {\n+                continue;\n+            }\n+            // NOTE: for the dashboard we only use rated results with completion date or automatic result\n+            boolean isAssessmentOver = ignoreAssessmentDueDate || getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+            if ((result.getAssessmentType().equals(AssessmentType.MANUAL) && isAssessmentOver) || result.getAssessmentType().equals(AssessmentType.AUTOMATIC)) {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTcxMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459711", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:12Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        // Add an automatic result first\n+        var firstResult = addStudentParticipationWithResult(AssessmentType.AUTOMATIC, null);\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        // Add a parameterized second result\n+        var secondResult = database.addResultToParticipation(assessmentType, completionDate, programmingExerciseParticipation);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+\n+        // Expect the request to always be ok because it should at least return the first automatic result\n+        var requestedParticipation = request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+                ProgrammingExerciseStudentParticipation.class);\n+\n+        assertThat(requestedParticipation.getResults()).hasSize(1);\n+        var requestedResult = requestedParticipation.getResults().iterator().next();\n+        // Depending on the parameters we expect to get the first or the second created result from the server\n+        if (expectLastCreatedResult) {\n+            assertThat(requestedResult).isEqualTo(secondResult);\n+        }\n+        else {\n+            assertThat(requestedResult).isEqualTo(firstResult);\n+        }\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void getParticipationWithLatestResultAsAnInstructor() throws Exception {\n-        addStudentParticipationWithResult();\n+    public void getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound() throws Exception {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTcyMw==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459723", "bodyText": "Codacy found an issue: Useless parentheses.", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:13Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "diffHunk": "@@ -286,7 +288,9 @@ public void generateAndSetProjectKey() {\n     public Submission findAppropriateSubmissionByResults(Set<Submission> submissions) {\n         return submissions.stream().filter(submission -> {\n             if (submission.getResult() != null) {\n-                return submission.getResult().isRated();\n+                return (submission.getResult().isRated() && !submission.getResult().getAssessmentType().equals(AssessmentType.MANUAL))", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTczMw==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459733", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'setArgumentsForGetParticipationWithLatestResult()'.", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:14Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc0MA==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459740", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'filterForCourseDashboard_assessmentDueDate_notPassed' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:15Z", "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should only have one automatic result\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                    assertThat(participation.getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+                }\n+                // Quiz exercises should only have one automatic result\n+                else if (exercise instanceof QuizExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+                else {\n+                    // All other exercises should not display a result at all\n+                    assertThat(participation.getResults().size()).isEqualTo(0);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_passed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(true);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add an manual result, to check whether this is correctly displayed after the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should now how two results and the latest one is the manual result.\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(2);\n+                    assertThat(participation.getResults().stream().sorted(Comparator.comparing(Result::getId).reversed()).iterator().next().getAssessmentType())\n+                            .isEqualTo(AssessmentType.MANUAL);\n+                }\n+                else {\n+                    // All other exercises have only one visible result now\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void filterForCourseDashboard_assessmentDueDate_notPassed() {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc0Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459742", "bodyText": "Codacy found an issue: Linguistics Antipattern - The setter 'setArgumentsForGetParticipationWithLatestResult' should not return any type except void linguistically", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:15Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc1NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459755", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:16Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -316,6 +316,15 @@ public static ModelingSubmission generateModelingSubmission(String model, boolea\n         return submission;\n     }\n \n+    public static QuizSubmission generateQuizSubmission(boolean submitted) {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc2Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459766", "bodyText": "Codacy found an issue: The instance method name 'getParticipationWithLatestResult_multipleResultsAvailable' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:17Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459776", "bodyText": "Codacy found an issue: Linguistics Antipattern - The getter 'getParticipationWithLatestResultAsAStudent' should not return void linguistically", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:19Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc4Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459783", "bodyText": "Codacy found an issue: Avoid really long methods.", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:20Z", "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -563,6 +563,164 @@ public Course createCourseWithExamAndExerciseGroupAndExercises(User user) {\n         return studentQuestions;\n     }\n \n+    public Course createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(boolean hasAssessmentDueDatePassed) {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc4OA==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459788", "bodyText": "Codacy found an issue: Linguistics Antipattern - The getter 'getParticipationWithLatestResult_multipleResultsAvailable' should not return void linguistically", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:20Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc5OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459799", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExerciseDetails_assessmentDueDate_passed' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:21Z", "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should only have one automatic result\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                    assertThat(participation.getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+                }\n+                // Quiz exercises should only have one automatic result\n+                else if (exercise instanceof QuizExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+                else {\n+                    // All other exercises should not display a result at all\n+                    assertThat(participation.getResults().size()).isEqualTo(0);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_passed() throws Exception {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTgwNg==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459806", "bodyText": "Codacy found an issue: Linguistics Antipattern - The getter 'getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound' should not return void linguistically", "author": "artemis-bot", "createdAt": "2020-10-06T17:07:22Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        // Add an automatic result first\n+        var firstResult = addStudentParticipationWithResult(AssessmentType.AUTOMATIC, null);\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        // Add a parameterized second result\n+        var secondResult = database.addResultToParticipation(assessmentType, completionDate, programmingExerciseParticipation);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+\n+        // Expect the request to always be ok because it should at least return the first automatic result\n+        var requestedParticipation = request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+                ProgrammingExerciseStudentParticipation.class);\n+\n+        assertThat(requestedParticipation.getResults()).hasSize(1);\n+        var requestedResult = requestedParticipation.getResults().iterator().next();\n+        // Depending on the parameters we expect to get the first or the second created result from the server\n+        if (expectLastCreatedResult) {\n+            assertThat(requestedResult).isEqualTo(secondResult);\n+        }\n+        else {\n+            assertThat(requestedResult).isEqualTo(firstResult);\n+        }\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void getParticipationWithLatestResultAsAnInstructor() throws Exception {\n-        addStudentParticipationWithResult();\n+    public void getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound() throws Exception {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"oid": "1db642cf737eb35cf60b95c3529e5552f4551cf9", "url": "https://github.com/ls1intum/Artemis/commit/1db642cf737eb35cf60b95c3529e5552f4551cf9", "message": "add translation", "committedDate": "2020-10-06T19:23:30Z", "type": "commit"}, {"oid": "f587050d3f1091246a2c5ebe0dc232283a2c5626", "url": "https://github.com/ls1intum/Artemis/commit/f587050d3f1091246a2c5ebe0dc232283a2c5626", "message": "fix flaky test", "committedDate": "2020-10-06T19:38:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2OTkyNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500569925", "bodyText": "See reason given by Codacy.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n          \n          \n            \n                private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {", "author": "MaisiKoleni", "createdAt": "2020-10-06T20:16:50Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MDAyOA==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500570028", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n          \n          \n            \n                @MethodSource(\"argumentsForGetParticipationWithLatestResult\")", "author": "MaisiKoleni", "createdAt": "2020-10-06T20:17:01Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")", "originalCommit": "1e02996fd53c7a1a360240aa03fb334b780529ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MDk1OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500570959", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return participation.getResults().stream().filter(result -> result.getCompletionDate() != null && isAssessmentOver).collect(Collectors.toSet());\n          \n          \n            \n                    if (!isAssessmentOver) {\n          \n          \n            \n                        return Set.of();\n          \n          \n            \n                    }\n          \n          \n            \n                    return participation.getResults().stream().filter(result -> result.getCompletionDate() != null).collect(Collectors.toSet());", "author": "sleiss", "createdAt": "2020-10-06T20:18:52Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -591,7 +591,8 @@ else if (resultDate1.isAfter(resultDate2)) {\n      * @return all results of given participation, or null, if none exist\n      */\n     public Set<Result> findResultsFilteredForStudents(Participation participation) {\n-        return participation.getResults().stream().filter(result -> result.getCompletionDate() != null).collect(Collectors.toSet());\n+        boolean isAssessmentOver = getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+        return participation.getResults().stream().filter(result -> result.getCompletionDate() != null && isAssessmentOver).collect(Collectors.toSet());", "originalCommit": "f587050d3f1091246a2c5ebe0dc232283a2c5626", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Exercise.java b/src/main/java/de/tum/in/www1/artemis/domain/Exercise.java\nindex ea5aff58c9..3bcb8251d0 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Exercise.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Exercise.java\n\n@@ -592,7 +592,10 @@ public abstract class Exercise extends DomainObject {\n      */\n     public Set<Result> findResultsFilteredForStudents(Participation participation) {\n         boolean isAssessmentOver = getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n-        return participation.getResults().stream().filter(result -> result.getCompletionDate() != null && isAssessmentOver).collect(Collectors.toSet());\n+        if (!isAssessmentOver) {\n+            return Set.of();\n+        }\n+        return participation.getResults().stream().filter(result -> result.getCompletionDate() != null).collect(Collectors.toSet());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MTQ0MA==", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500571440", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n          \n          \n            \n                @MethodSource(\"argumentsForGetParticipationWithLatestResult\")", "author": "MaisiKoleni", "createdAt": "2020-10-06T20:19:46Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")", "originalCommit": "f587050d3f1091246a2c5ebe0dc232283a2c5626", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\nindex 437b2225e5..418a0d6713 100644\n--- a/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java\n\n@@ -74,7 +74,7 @@ public class ProgrammingExerciseParticipationIntegrationTest extends AbstractSpr\n         database.resetDatabase();\n     }\n \n-    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+    private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {\n         ZonedDateTime someDate = ZonedDateTime.now();\n         ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n         ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n"}}, {"oid": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "url": "https://github.com/ls1intum/Artemis/commit/65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "message": "Apply suggestions from code review\n\nCo-authored-by: Simon Lei\u00df <5084100+sleiss@users.noreply.github.com>\nCo-authored-by: Christian Femers <c.femers@tum.de>", "committedDate": "2020-10-06T21:10:27Z", "type": "commit"}, {"oid": "8283f3c0e2a658ad8153bfe6a887abb34ff9b566", "url": "https://github.com/ls1intum/Artemis/commit/8283f3c0e2a658ad8153bfe6a887abb34ff9b566", "message": "Merge branch 'develop' into bugfix/hide-manual-assessment-draft", "committedDate": "2020-10-06T21:18:55Z", "type": "commit"}]}