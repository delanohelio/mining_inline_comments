{"pr_number": 1721, "pr_title": "Create Exam Scores Page", "pr_createdAt": "2020-06-26T14:27:23Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1721", "timeline": [{"oid": "7729657fcf40a887adcbc682f671a759b8532c4a", "url": "https://github.com/ls1intum/Artemis/commit/7729657fcf40a887adcbc682f671a759b8532c4a", "message": "Set Up Routing, Component and Modules", "committedDate": "2020-06-26T14:24:51Z", "type": "commit"}, {"oid": "f9a26feab0c46e39a565ec9d526dd33e13a81d66", "url": "https://github.com/ls1intum/Artemis/commit/f9a26feab0c46e39a565ec9d526dd33e13a81d66", "message": "Secured Routes correctly", "committedDate": "2020-06-26T14:40:29Z", "type": "commit"}, {"oid": "5cd2e59ebf912e298eab6f7d7adb06e7b4f7c9a6", "url": "https://github.com/ls1intum/Artemis/commit/5cd2e59ebf912e298eab6f7d7adb06e7b4f7c9a6", "message": "Provided correct page title and started i18 section", "committedDate": "2020-06-26T14:40:48Z", "type": "commit"}, {"oid": "3cf36c425d9003bde0b04c03bf26d5db7cc4aa12", "url": "https://github.com/ls1intum/Artemis/commit/3cf36c425d9003bde0b04c03bf26d5db7cc4aa12", "message": "page draft", "committedDate": "2020-06-27T16:43:09Z", "type": "commit"}, {"oid": "5a8a799249bb4caf4875154405b48fe9bb51b787", "url": "https://github.com/ls1intum/Artemis/commit/5a8a799249bb4caf4875154405b48fe9bb51b787", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores", "committedDate": "2020-06-29T07:53:21Z", "type": "commit"}, {"oid": "d1f0bcc423b9c2be85bb1157d4e325f99799ce4d", "url": "https://github.com/ls1intum/Artemis/commit/d1f0bcc423b9c2be85bb1157d4e325f99799ce4d", "message": "Simple Dummy Table Implementation and DTO Idea", "committedDate": "2020-06-29T15:04:27Z", "type": "commit"}, {"oid": "c9fdb9d6827491acfd7cc181aa703fc826d23d81", "url": "https://github.com/ls1intum/Artemis/commit/c9fdb9d6827491acfd7cc181aa703fc826d23d81", "message": "page prepare", "committedDate": "2020-06-29T20:06:47Z", "type": "commit"}, {"oid": "1ad345955c08311124698e26796120789d25ed76", "url": "https://github.com/ls1intum/Artemis/commit/1ad345955c08311124698e26796120789d25ed76", "message": "Implemented REST Endpoint", "committedDate": "2020-06-30T13:02:33Z", "type": "commit"}, {"oid": "d36a57a5fb4681b9b4889de127b7da1d8f17f394", "url": "https://github.com/ls1intum/Artemis/commit/d36a57a5fb4681b9b4889de127b7da1d8f17f394", "message": "score table", "committedDate": "2020-06-30T16:09:46Z", "type": "commit"}, {"oid": "b013fff08445344b6b0b3709d019f559bf75b5da", "url": "https://github.com/ls1intum/Artemis/commit/b013fff08445344b6b0b3709d019f559bf75b5da", "message": "exerciseGroup average", "committedDate": "2020-06-30T16:19:16Z", "type": "commit"}, {"oid": "faec91d53b48d5dc68a7514cc615266dce359526", "url": "https://github.com/ls1intum/Artemis/commit/faec91d53b48d5dc68a7514cc615266dce359526", "message": "fixed looks", "committedDate": "2020-06-30T16:21:24Z", "type": "commit"}, {"oid": "59af2f3e9371a3db10c8b6a2fab273a367d6d62d", "url": "https://github.com/ls1intum/Artemis/commit/59af2f3e9371a3db10c8b6a2fab273a367d6d62d", "message": "server side comments", "committedDate": "2020-06-30T16:40:29Z", "type": "commit"}, {"oid": "cda4342e9773cf385fa69f72636016d576f66093", "url": "https://github.com/ls1intum/Artemis/commit/cda4342e9773cf385fa69f72636016d576f66093", "message": "more comments", "committedDate": "2020-06-30T17:03:20Z", "type": "commit"}, {"oid": "484eccd29f0eeda80fd307240d1274553cdec69b", "url": "https://github.com/ls1intum/Artemis/commit/484eccd29f0eeda80fd307240d1274553cdec69b", "message": "Fixed case when no result exists", "committedDate": "2020-06-30T21:02:12Z", "type": "commit"}, {"oid": "35f1e4f8c968de01dca358cf2d219692ee7c60b2", "url": "https://github.com/ls1intum/Artemis/commit/35f1e4f8c968de01dca358cf2d219692ee7c60b2", "message": "clean up", "committedDate": "2020-07-01T07:45:03Z", "type": "commit"}, {"oid": "87349ab4997a951926ad6196fe74499b6379b2ec", "url": "https://github.com/ls1intum/Artemis/commit/87349ab4997a951926ad6196fe74499b6379b2ec", "message": "first export work", "committedDate": "2020-07-01T08:19:48Z", "type": "commit"}, {"oid": "1fde546702fad8b7bf163a2251cbc9ea292c0bfa", "url": "https://github.com/ls1intum/Artemis/commit/1fde546702fad8b7bf163a2251cbc9ea292c0bfa", "message": "runden", "committedDate": "2020-07-01T08:56:41Z", "type": "commit"}, {"oid": "5a927366844c0d9326d9d9133cd8150ddeb8b65c", "url": "https://github.com/ls1intum/Artemis/commit/5a927366844c0d9326d9d9133cd8150ddeb8b65c", "message": "unfinished export auskommentiert", "committedDate": "2020-07-01T08:58:00Z", "type": "commit"}, {"oid": "682645d3e7099694e9199dad7074f5a0b8d85af1", "url": "https://github.com/ls1intum/Artemis/commit/682645d3e7099694e9199dad7074f5a0b8d85af1", "message": "Merge remote-tracking branch 'origin/develop' into exam-mode/variants/exam-scores", "committedDate": "2020-07-01T11:30:00Z", "type": "commit"}, {"oid": "b599590d6438a59c82fba4c7e11e052e09f21e35", "url": "https://github.com/ls1intum/Artemis/commit/b599590d6438a59c82fba4c7e11e052e09f21e35", "message": "Merge remote-tracking branch 'origin/develop' into exam-mode/variants/exam-scores", "committedDate": "2020-07-01T12:02:31Z", "type": "commit"}, {"oid": "f8e72a12b53f38b1a8c45c24a9c279153b3e7245", "url": "https://github.com/ls1intum/Artemis/commit/f8e72a12b53f38b1a8c45c24a9c279153b3e7245", "message": "fix", "committedDate": "2020-07-01T12:03:26Z", "type": "commit"}, {"oid": "462f3123c2547deeae18f9a24a0567ef157b9ff5", "url": "https://github.com/ls1intum/Artemis/commit/462f3123c2547deeae18f9a24a0567ef157b9ff5", "message": "Moved calculation logic to server", "committedDate": "2020-07-01T23:59:03Z", "type": "commit"}, {"oid": "0cf48952e261e79cac7cf9a435225af2438e9b22", "url": "https://github.com/ls1intum/Artemis/commit/0cf48952e261e79cac7cf9a435225af2438e9b22", "message": "Improved Layout", "committedDate": "2020-07-02T09:39:38Z", "type": "commit"}, {"oid": "114e444e6372e963e5a92a40c630e2fb116c1522", "url": "https://github.com/ls1intum/Artemis/commit/114e444e6372e963e5a92a40c630e2fb116c1522", "message": "Further layout tweaks", "committedDate": "2020-07-02T09:42:56Z", "type": "commit"}, {"oid": "8bfe3f3be5536381d56b724ee2b7e01c1e60d6f6", "url": "https://github.com/ls1intum/Artemis/commit/8bfe3f3be5536381d56b724ee2b7e01c1e60d6f6", "message": "Added missing javadoc", "committedDate": "2020-07-02T09:51:04Z", "type": "commit"}, {"oid": "ae4f47c327296ea3fa91b49c824af98b9df99e89", "url": "https://github.com/ls1intum/Artemis/commit/ae4f47c327296ea3fa91b49c824af98b9df99e89", "message": "Fixed javadoc again...", "committedDate": "2020-07-02T10:02:05Z", "type": "commit"}, {"oid": "62e1134d3095d733107e2fb98214d3ca1499a873", "url": "https://github.com/ls1intum/Artemis/commit/62e1134d3095d733107e2fb98214d3ca1499a873", "message": "Added CSV Export", "committedDate": "2020-07-02T10:56:15Z", "type": "commit"}, {"oid": "4d9fc2b0167487c3c5aa5db6d67598bb8db3b2b4", "url": "https://github.com/ls1intum/Artemis/commit/4d9fc2b0167487c3c5aa5db6d67598bb8db3b2b4", "message": "Added Types to Frontend", "committedDate": "2020-07-02T12:59:47Z", "type": "commit"}, {"oid": "6f67702d6a139ae3d316e697fc35d3acbfeb670b", "url": "https://github.com/ls1intum/Artemis/commit/6f67702d6a139ae3d316e697fc35d3acbfeb670b", "message": "Added achieved score to table and csv", "committedDate": "2020-07-02T13:07:20Z", "type": "commit"}, {"oid": "7d8d7c04c76dc70c4270ee472b2735d0998fe6bf", "url": "https://github.com/ls1intum/Artemis/commit/7d8d7c04c76dc70c4270ee472b2735d0998fe6bf", "message": "Added error handling", "committedDate": "2020-07-02T13:12:16Z", "type": "commit"}, {"oid": "b3f4de4e483831b72daedda9daacc43990b1c010", "url": "https://github.com/ls1intum/Artemis/commit/b3f4de4e483831b72daedda9daacc43990b1c010", "message": "Added loading indicator", "committedDate": "2020-07-02T13:16:41Z", "type": "commit"}, {"oid": "e22878fe320d758aaa31823330f315373ba60043", "url": "https://github.com/ls1intum/Artemis/commit/e22878fe320d758aaa31823330f315373ba60043", "message": "Added translations to everything", "committedDate": "2020-07-02T13:48:12Z", "type": "commit"}, {"oid": "cd04fc824efdfff37f4eeb6ed4670b2c6c5c8129", "url": "https://github.com/ls1intum/Artemis/commit/cd04fc824efdfff37f4eeb6ed4670b2c6c5c8129", "message": "Took out exam average score calculation for the moment", "committedDate": "2020-07-02T14:21:19Z", "type": "commit"}, {"oid": "40a7a34576525ec65e9086d71f7c6787443a32c6", "url": "https://github.com/ls1intum/Artemis/commit/40a7a34576525ec65e9086d71f7c6787443a32c6", "message": "Fixes average score calculation", "committedDate": "2020-07-02T14:24:39Z", "type": "commit"}, {"oid": "d2ba10febb2898f1ccd0fd11d0ce57a78bf0e96a", "url": "https://github.com/ls1intum/Artemis/commit/d2ba10febb2898f1ccd0fd11d0ce57a78bf0e96a", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores", "committedDate": "2020-07-02T14:32:30Z", "type": "commit"}, {"oid": "4e02b017c0a74298d268a65cd2ff7e794ec0a18c", "url": "https://github.com/ls1intum/Artemis/commit/4e02b017c0a74298d268a65cd2ff7e794ec0a18c", "message": "Formatted wrongly formatted file", "committedDate": "2020-07-02T14:46:39Z", "type": "commit"}, {"oid": "1ad784ff68ccc4ae992813422239cbda18b4109e", "url": "https://github.com/ls1intum/Artemis/commit/1ad784ff68ccc4ae992813422239cbda18b4109e", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores", "committedDate": "2020-07-02T14:58:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNzkzNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449237935", "bodyText": "I'd prefer returning an Optional instead of null.", "author": "kloessst", "createdAt": "2020-07-02T19:58:14Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return relevant result of student participation or null if none exists\n+     */\n+    private Result getRelevantResult(StudentParticipation studentParticipation) {", "originalCommit": "1ad784ff68ccc4ae992813422239cbda18b4109e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxMDA1OA==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449310058", "bodyText": "Adressed both points in\n7a4e807\nand\nfd02505", "author": "stefanwaldhauser", "createdAt": "2020-07-02T23:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNzkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "048929dd6f5323765c9f43ea4699a7536d0d4e15", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\nindex 79b5a91e26..90253b98a3 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n\n@@ -332,23 +332,72 @@ public class ExamService {\n      * @return the list of student exams with their corresponding users\n      */\n     public List<StudentExam> generateStudentExams(Long examId) {\n-        List<StudentExam> studentExams = new ArrayList<>();\n-        SecureRandom random = new SecureRandom();\n-\n         // Delete all existing student exams via orphan removal\n         Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n         studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n \n         Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();\n+\n+        // Validate settings of the exam\n+        validateStudentExamGeneration(exam, numberOfOptionalExercises);\n+\n+        // StudentExams are saved in the called method\n+        List<StudentExam> studentExams = createRandomStudentExams(exam, exam.getRegisteredUsers(), numberOfOptionalExercises);\n+\n+        // TODO: make sure the student exams still contain non proxy users\n+\n+        return studentExams;\n+    }\n+\n+    /**\n+     * Generates the missing student exams randomly based on the exam configuration and the exercise groups.\n+     * The difference between all registered users and the users who already have an individual exam\n+     * is the set of users for which student exams will be created.\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateMissingStudentExams(Long examId) {\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exam.getExerciseGroups().stream().filter(ExerciseGroup::getIsMandatory).count();\n+\n+        // Validate settings of the exam\n+        validateStudentExamGeneration(exam, numberOfOptionalExercises);\n+\n+        // Get all users who already have an individual exam\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        Set<User> usersWithExam = examWithExistingStudentExams.getStudentExams().stream().map(studentExam -> studentExam.getUser()).collect(Collectors.toSet());\n+\n+        // Get all registered users\n+        Set<User> allRegisteredUsers = exam.getRegisteredUsers();\n+\n+        // Get all students who don't have an exam yet\n+        Set<User> missingUsers = new HashSet<>(allRegisteredUsers);\n+        missingUsers.removeAll(usersWithExam);\n+\n+        // StudentExams are saved in the called method\n+        List<StudentExam> missingStudentExams = createRandomStudentExams(exam, missingUsers, numberOfOptionalExercises);\n+\n+        // TODO: make sure the student exams still contain non proxy users\n \n+        return missingStudentExams;\n+    }\n+\n+    /**\n+     * Validates exercise settings.\n+     *\n+     * @param exam exam which is validated\n+     * @param numberOfOptionalExercises number of optional exercises in the exam\n+     * @throws BadRequestAlertException\n+     */\n+    private void validateStudentExamGeneration(Exam exam, long numberOfOptionalExercises) throws BadRequestAlertException {\n         // Check that the start and end date of the exam is set\n         if (exam.getStartDate() == null || exam.getEndDate() == null) {\n             throw new BadRequestAlertException(\"The start and end date must be set for the exam\", \"Exam\", \"artemisApp.exam.validation.startAndEndMustBeSet\");\n         }\n \n-        // Determine the default working time by computing the duration between start and end date of the exam\n-        Integer defaultWorkingTime = Math.toIntExact(Duration.between(exam.getStartDate(), exam.getEndDate()).toSeconds());\n-\n         // Ensure that all exercise groups have at least one exercise\n         for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n             if (exerciseGroup.getExercises().isEmpty()) {\n"}}, {"oid": "048929dd6f5323765c9f43ea4699a7536d0d4e15", "url": "https://github.com/ls1intum/Artemis/commit/048929dd6f5323765c9f43ea4699a7536d0d4e15", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores", "committedDate": "2020-07-02T23:16:47Z", "type": "commit"}, {"oid": "7a4e80748dfa1479a0955c14117c3381c79865f7", "url": "https://github.com/ls1intum/Artemis/commit/7a4e80748dfa1479a0955c14117c3381c79865f7", "message": "Added ngIf checks to frontend code", "committedDate": "2020-07-02T23:31:33Z", "type": "commit"}, {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68", "url": "https://github.com/ls1intum/Artemis/commit/fd0250513c752c1f9f2dbcdc4e1237652146dc68", "message": "Changed Code to Usage of Optional", "committedDate": "2020-07-02T23:35:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjkzNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449466935", "bodyText": "I don't think you need \"exerciseGroups.exercises.studentParticipations.submissions\" here.", "author": "krusche", "createdAt": "2020-07-03T09:00:18Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/ExamRepository.java", "diffHunk": "@@ -46,6 +46,10 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exerciseGroups\", \"exerciseGroups.exercises\", \"registeredUsers\", \"studentExams\" })\n     Optional<Exam> findWithExercisesRegisteredUsersStudentExamsById(Long id);\n \n+    @EntityGraph(type = LOAD, attributePaths = { \"registeredUsers\", \"exerciseGroups\", \"exerciseGroups.exercises\", \"exerciseGroups.exercises.studentParticipations\",\n+            \"exerciseGroups.exercises.studentParticipations.results\", \"exerciseGroups.exercises.studentParticipations.submissions\" })", "originalCommit": "fd0250513c752c1f9f2dbcdc4e1237652146dc68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NzIzMg==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449467232", "bodyText": "The DB query is already quite extensive, in particular if we have >1000 students and 6-10 exercises, so we should try to avoid unnecessary data here", "author": "krusche", "createdAt": "2020-07-03T09:00:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MjUwOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449472509", "bodyText": "Changed in 1ebbac8", "author": "stefanwaldhauser", "createdAt": "2020-07-03T09:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ebbac866821187dcff834d922b67f799d305262", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/ExamRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/ExamRepository.java\nindex 8c8e58cfc3..0a3deb792b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/ExamRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/ExamRepository.java\n\n@@ -47,7 +47,7 @@ public interface ExamRepository extends JpaRepository<Exam, Long> {\n     Optional<Exam> findWithExercisesRegisteredUsersStudentExamsById(Long id);\n \n     @EntityGraph(type = LOAD, attributePaths = { \"registeredUsers\", \"exerciseGroups\", \"exerciseGroups.exercises\", \"exerciseGroups.exercises.studentParticipations\",\n-            \"exerciseGroups.exercises.studentParticipations.results\", \"exerciseGroups.exercises.studentParticipations.submissions\" })\n+            \"exerciseGroups.exercises.studentParticipations.results\" })\n     Optional<Exam> findForScoreCalculationById(Long id);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NzMyNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449467325", "bodyText": "please add { }", "author": "krusche", "createdAt": "2020-07-03T09:01:03Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,147 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0)", "originalCommit": "fd0250513c752c1f9f2dbcdc4e1237652146dc68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3Mjk2Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449472966", "bodyText": "Changed in 5011dbd", "author": "stefanwaldhauser", "createdAt": "2020-07-03T09:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NzMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "5011dbdf2b222a17c0674381032e8a6712c329a8", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\nindex aea7149e7f..6c725fd4bd 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n\n@@ -212,8 +212,9 @@ public class ExamService {\n      * @return rounded number\n      */\n     public static double round(double value, int places) {\n-        if (places < 0)\n+        if (places < 0) {\n             throw new IllegalArgumentException();\n+        }\n \n         BigDecimal bd = BigDecimal.valueOf(value);\n         bd = bd.setScale(places, RoundingMode.HALF_UP);\n"}}, {"oid": "1ebbac866821187dcff834d922b67f799d305262", "url": "https://github.com/ls1intum/Artemis/commit/1ebbac866821187dcff834d922b67f799d305262", "message": "Removed unnecessary entity graph attribute", "committedDate": "2020-07-03T09:10:39Z", "type": "commit"}, {"oid": "5011dbdf2b222a17c0674381032e8a6712c329a8", "url": "https://github.com/ls1intum/Artemis/commit/5011dbdf2b222a17c0674381032e8a6712c329a8", "message": "Added brackets", "committedDate": "2020-07-03T09:11:30Z", "type": "commit"}, {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed", "url": "https://github.com/ls1intum/Artemis/commit/d617bd79f9689495de67a3a3f0c59ed3cf942eed", "message": "template for a test case", "committedDate": "2020-07-03T14:00:22Z", "type": "commit"}, {"oid": "0c2e8c210d8bb9228133e2bc1353f11327264b03", "url": "https://github.com/ls1intum/Artemis/commit/0c2e8c210d8bb9228133e2bc1353f11327264b03", "message": "Better doc", "committedDate": "2020-07-04T18:12:18Z", "type": "commit"}, {"oid": "955bd6daad21269e21d976f0c62db53557707c4f", "url": "https://github.com/ls1intum/Artemis/commit/955bd6daad21269e21d976f0c62db53557707c4f", "message": "Written the mother of all tests", "committedDate": "2020-07-04T21:18:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNjY0OA==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449806648", "bodyText": "Why do we return \"\" instead of null if no registrationNumber is present?", "author": "kloessst", "createdAt": "2020-07-04T21:24:29Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));", "originalCommit": "d617bd79f9689495de67a3a3f0c59ed3cf942eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODE5Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808197", "bodyText": "yes, we should return null, trim() is also not necessary", "author": "krusche", "createdAt": "2020-07-04T21:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNjY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "e76851cc9ef44dac8dea8ee819f7704329029f29", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\nindex 6c725fd4bd..b73d2b6ac2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n\n@@ -312,7 +312,7 @@ public class ExamService {\n             }\n         }\n \n-        // Uptading exam information in DTO\n+        // Updating exam information in DTO\n         Double sumOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null)\n                 .map(studentResult -> studentResult.overallPointsAchieved).reduce(0.0, Double::sum);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzA4MA==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807080", "bodyText": "Why not initialize studentResult.overallPointsAchieved with 0. Then you don't need the conditional.", "author": "kloessst", "createdAt": "2020-07-04T21:31:41Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {", "originalCommit": "d617bd79f9689495de67a3a3f0c59ed3cf942eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODIzNw==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808237", "bodyText": "makes more sense", "author": "krusche", "createdAt": "2020-07-04T21:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "e76851cc9ef44dac8dea8ee819f7704329029f29", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\nindex 6c725fd4bd..b73d2b6ac2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n\n@@ -312,7 +312,7 @@ public class ExamService {\n             }\n         }\n \n-        // Uptading exam information in DTO\n+        // Updating exam information in DTO\n         Double sumOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null)\n                 .map(studentResult -> studentResult.overallPointsAchieved).reduce(0.0, Double::sum);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzM3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807372", "bodyText": "scores.maxPoints is equalTo exam.maxPoints. The assumption here is, that the exam.maxPoints = sum(all exercise.maxPoints) but at the moment the scores of the exercises are set independently.", "author": "kloessst", "createdAt": "2020-07-04T21:37:03Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);", "originalCommit": "d617bd79f9689495de67a3a3f0c59ed3cf942eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODI2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808265", "bodyText": "I think we should take exam.maxPoints. The instructor needs to make sure that this is set correctly", "author": "krusche", "createdAt": "2020-07-04T21:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e76851cc9ef44dac8dea8ee819f7704329029f29", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\nindex 6c725fd4bd..b73d2b6ac2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n\n@@ -312,7 +312,7 @@ public class ExamService {\n             }\n         }\n \n-        // Uptading exam information in DTO\n+        // Updating exam information in DTO\n         Double sumOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null)\n                 .map(studentResult -> studentResult.overallPointsAchieved).reduce(0.0, Double::sum);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQzNw==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807437", "bodyText": "Compares Long with double", "author": "kloessst", "createdAt": "2020-07-04T21:38:11Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;\n+            Double sumOfPoints = 0.0;\n+\n+            for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+                if (studentResult.exerciseGroupIdToExerciseResult.containsKey(exerciseGroup.id)) {\n+                    ExamScoresDTO.ExerciseResult exerciseResult = studentResult.exerciseGroupIdToExerciseResult.get(exerciseGroup.id);\n+                    noOfFoundResults++;\n+                    sumOfPoints = sumOfPoints + exerciseResult.achievedPoints;\n+                }\n+            }\n+\n+            if (noOfFoundResults != 0.0) {\n+                exerciseGroup.averagePointsAchieved = round((sumOfPoints / noOfFoundResults), 2);\n+            }\n+        }\n+\n+        // Uptading exam information in DTO\n+        Double sumOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null)\n+                .map(studentResult -> studentResult.overallPointsAchieved).reduce(0.0, Double::sum);\n+\n+        Long numberOfStudentResultsWithOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null).count();\n+\n+        if (numberOfStudentResultsWithOverallPoints != 0.0) {", "originalCommit": "d617bd79f9689495de67a3a3f0c59ed3cf942eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODI4OA==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808288", "bodyText": "not good", "author": "krusche", "createdAt": "2020-07-04T21:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "e76851cc9ef44dac8dea8ee819f7704329029f29", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\nindex 6c725fd4bd..b73d2b6ac2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n\n@@ -312,7 +312,7 @@ public class ExamService {\n             }\n         }\n \n-        // Uptading exam information in DTO\n+        // Updating exam information in DTO\n         Double sumOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null)\n                 .map(studentResult -> studentResult.overallPointsAchieved).reduce(0.0, Double::sum);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQ1Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807452", "bodyText": "Could use an int here", "author": "kloessst", "createdAt": "2020-07-04T21:38:47Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;", "originalCommit": "d617bd79f9689495de67a3a3f0c59ed3cf942eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODI3OA==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808278", "bodyText": "int makes more sense", "author": "krusche", "createdAt": "2020-07-04T21:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e76851cc9ef44dac8dea8ee819f7704329029f29", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\nindex 6c725fd4bd..b73d2b6ac2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n\n@@ -312,7 +312,7 @@ public class ExamService {\n             }\n         }\n \n-        // Uptading exam information in DTO\n+        // Updating exam information in DTO\n         Double sumOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null)\n                 .map(studentResult -> studentResult.overallPointsAchieved).reduce(0.0, Double::sum);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQ4OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807489", "bodyText": "See above", "author": "kloessst", "createdAt": "2020-07-04T21:39:19Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;\n+            Double sumOfPoints = 0.0;\n+\n+            for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+                if (studentResult.exerciseGroupIdToExerciseResult.containsKey(exerciseGroup.id)) {\n+                    ExamScoresDTO.ExerciseResult exerciseResult = studentResult.exerciseGroupIdToExerciseResult.get(exerciseGroup.id);\n+                    noOfFoundResults++;\n+                    sumOfPoints = sumOfPoints + exerciseResult.achievedPoints;\n+                }\n+            }\n+\n+            if (noOfFoundResults != 0.0) {", "originalCommit": "d617bd79f9689495de67a3a3f0c59ed3cf942eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODI4Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808282", "bodyText": "!", "author": "krusche", "createdAt": "2020-07-04T21:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e76851cc9ef44dac8dea8ee819f7704329029f29", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\nindex 6c725fd4bd..b73d2b6ac2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExamService.java\n\n@@ -312,7 +312,7 @@ public class ExamService {\n             }\n         }\n \n-        // Uptading exam information in DTO\n+        // Updating exam information in DTO\n         Double sumOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null)\n                 .map(studentResult -> studentResult.overallPointsAchieved).reduce(0.0, Double::sum);\n \n"}}, {"oid": "e76851cc9ef44dac8dea8ee819f7704329029f29", "url": "https://github.com/ls1intum/Artemis/commit/e76851cc9ef44dac8dea8ee819f7704329029f29", "message": "Fix tests", "committedDate": "2020-07-04T21:41:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzc2NA==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807764", "bodyText": "Should we use @JsonInclude(JsonInclude.Include.NON_EMPTY) like with the other entities. I'm not sure what the client expects.", "author": "kloessst", "createdAt": "2020-07-04T21:44:18Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/ExamScoresDTO.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.tum.in.www1.artemis.web.rest.dto;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+", "originalCommit": "e76851cc9ef44dac8dea8ee819f7704329029f29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODI5MA==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808290", "bodyText": "yes", "author": "krusche", "createdAt": "2020-07-04T21:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "9ebcec51780386d379a5b06862a5dec6243865d4", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/dto/ExamScoresDTO.java b/src/main/java/de/tum/in/www1/artemis/web/rest/dto/ExamScoresDTO.java\nindex 7307965e9d..3284983cba 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/dto/ExamScoresDTO.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/dto/ExamScoresDTO.java\n\n@@ -5,6 +5,9 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n public class ExamScoresDTO {\n \n     // examId\n"}}, {"oid": "9ebcec51780386d379a5b06862a5dec6243865d4", "url": "https://github.com/ls1intum/Artemis/commit/9ebcec51780386d379a5b06862a5dec6243865d4", "message": "Small fixes", "committedDate": "2020-07-04T22:13:04Z", "type": "commit"}, {"oid": "4e8b20a1b6751afa604df50b3e0b3ee541f6be4b", "url": "https://github.com/ls1intum/Artemis/commit/4e8b20a1b6751afa604df50b3e0b3ee541f6be4b", "message": "Fix test", "committedDate": "2020-07-04T22:38:18Z", "type": "commit"}, {"oid": "5d77660f92bf19ac90f7172c913f10ecdf890bfd", "url": "https://github.com/ls1intum/Artemis/commit/5d77660f92bf19ac90f7172c913f10ecdf890bfd", "message": "Fix NPE", "committedDate": "2020-07-04T23:13:22Z", "type": "commit"}, {"oid": "310ee01c94e1e4ab3647a416c88401c1c45f2834", "url": "https://github.com/ls1intum/Artemis/commit/310ee01c94e1e4ab3647a416c88401c1c45f2834", "message": "Merge develop resolve conflicts", "committedDate": "2020-07-04T23:45:45Z", "type": "commit"}, {"oid": "3cdec228e6651e45766600e63fa055bc075343dd", "url": "https://github.com/ls1intum/Artemis/commit/3cdec228e6651e45766600e63fa055bc075343dd", "message": "adjust rounding for achieved points", "committedDate": "2020-07-05T11:18:05Z", "type": "commit"}, {"oid": "780e383399600ff640786276f440d5f1ceb38ac2", "url": "https://github.com/ls1intum/Artemis/commit/780e383399600ff640786276f440d5f1ceb38ac2", "message": "clean up", "committedDate": "2020-07-05T11:18:19Z", "type": "commit"}, {"oid": "3962dfbd2bf2cbc0f7d39f4e438a313ea90b13df", "url": "https://github.com/ls1intum/Artemis/commit/3962dfbd2bf2cbc0f7d39f4e438a313ea90b13df", "message": "runden client-side", "committedDate": "2020-07-05T12:46:56Z", "type": "commit"}, {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010", "url": "https://github.com/ls1intum/Artemis/commit/24106d7495a9eb3c01bffdb66a4a4c7560d23010", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores", "committedDate": "2020-07-05T13:10:23Z", "type": "commit"}, {"oid": "601c000da0e3b01d1399b656aaf3d90897221d0e", "url": "https://github.com/ls1intum/Artemis/commit/601c000da0e3b01d1399b656aaf3d90897221d0e", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores", "committedDate": "2020-07-05T19:41:48Z", "type": "commit"}, {"oid": "a872b3ccb22836d698fd9610f059699d6fa74814", "url": "https://github.com/ls1intum/Artemis/commit/a872b3ccb22836d698fd9610f059699d6fa74814", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores", "committedDate": "2020-07-05T20:07:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDI5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449914292", "bodyText": "Why do we use a title here instead of an ID?", "author": "sleiss", "createdAt": "2020-07-05T20:12:37Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -187,10 +190,120 @@ public void delete(Long examId) {\n         return exams.stream().filter(exam -> Boolean.TRUE.equals(exam.isVisibleToStudents())).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());", "originalCommit": "a872b3ccb22836d698fd9610f059699d6fa74814", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTU5Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449915593", "bodyText": "I think Stefan intended to send only necessary data. This is one reason why he used DTOs here.", "author": "sascha11110", "createdAt": "2020-07-05T20:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTY1MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449915651", "bodyText": "I guess these are used for the columns in the export, but I can't tell you for sure", "author": "krusche", "createdAt": "2020-07-05T20:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTg3Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449915877", "bodyText": "I just looked it up, this is used to display the title of the exercise in the html.\nThere is no other usage, so I think it should be fine!", "author": "krusche", "createdAt": "2020-07-05T20:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDI5Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c99e1d7bf8e54a9b340b1cec93be39c9451a65a3", "url": "https://github.com/ls1intum/Artemis/commit/c99e1d7bf8e54a9b340b1cec93be39c9451a65a3", "message": "Apply requested changes", "committedDate": "2020-07-05T20:27:33Z", "type": "commit"}, {"oid": "dccb3256e8586cf2cea8ca23aee22413a0480774", "url": "https://github.com/ls1intum/Artemis/commit/dccb3256e8586cf2cea8ca23aee22413a0480774", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores", "committedDate": "2020-07-05T20:27:49Z", "type": "commit"}]}