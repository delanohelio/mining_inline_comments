{"pr_number": 1644, "pr_title": "Distributed Quiz Scheduling", "pr_createdAt": "2020-06-13T14:29:17Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1644", "timeline": [{"oid": "2bd7e1f391dc8615ad5bb51118b0038b0db79022", "url": "https://github.com/ls1intum/Artemis/commit/2bd7e1f391dc8615ad5bb51118b0038b0db79022", "message": "Remove static modifiers from QuizScheduleService methods and fields", "committedDate": "2020-06-13T14:25:39Z", "type": "commit"}, {"oid": "22a4f094d3eb4ec6f13359a8d04893cb37cf0830", "url": "https://github.com/ls1intum/Artemis/commit/22a4f094d3eb4ec6f13359a8d04893cb37cf0830", "message": "Add documentation for the new exercise parameter", "committedDate": "2020-06-13T15:00:26Z", "type": "commit"}, {"oid": "32b595d0dab05844977d6ba988f9792f46ca58a0", "url": "https://github.com/ls1intum/Artemis/commit/32b595d0dab05844977d6ba988f9792f46ca58a0", "message": "Use SpringManagedContext for Hazelcast Config", "committedDate": "2020-06-16T01:03:18Z", "type": "commit"}, {"oid": "cbb327bcdff9b877f744264a64f74d12e7a37bdf", "url": "https://github.com/ls1intum/Artemis/commit/cbb327bcdff9b877f744264a64f74d12e7a37bdf", "message": "Make FileService Java-transient as well because it is not serializable\n\nShould we want to use it after deserialization by Hazelcast, we need to\nmake the domain classes SpringAware.", "committedDate": "2020-06-16T01:20:38Z", "type": "commit"}, {"oid": "74c2c91b79a3053116b8a35c22f0f7859e75ed16", "url": "https://github.com/ls1intum/Artemis/commit/74c2c91b79a3053116b8a35c22f0f7859e75ed16", "message": "Move QuizScheduleService into its own sub-package", "committedDate": "2020-06-16T01:25:30Z", "type": "commit"}, {"oid": "e54412a0c773d69fafaf1ac6893a2fe6852756bc", "url": "https://github.com/ls1intum/Artemis/commit/e54412a0c773d69fafaf1ac6893a2fe6852756bc", "message": "Basic distributed QuizScheduleService\n\nThis implementation state works, but is still work in progress and might\nhave some problems and documentation inconsistencies.", "committedDate": "2020-06-16T01:30:52Z", "type": "commit"}, {"oid": "5a28a7ec6680d195b721c207f2c7f57fa250b8f4", "url": "https://github.com/ls1intum/Artemis/commit/5a28a7ec6680d195b721c207f2c7f57fa250b8f4", "message": "Schedule sending the quiz start to users only on one node\n\nThis might depend on the network configuration, should we make that\nconfigurable?", "committedDate": "2020-06-16T01:36:15Z", "type": "commit"}, {"oid": "32d53d11c27732f33a827557b78ac69e4c23cf8b", "url": "https://github.com/ls1intum/Artemis/commit/32d53d11c27732f33a827557b78ac69e4c23cf8b", "message": "Fix ScheduledFuture distribution for stopSchedule()", "committedDate": "2020-06-16T03:08:23Z", "type": "commit"}, {"oid": "1b3b524037d56cc829cd9885de1295b20c4d944c", "url": "https://github.com/ls1intum/Artemis/commit/1b3b524037d56cc829cd9885de1295b20c4d944c", "message": "Remove comment because it does make some difference\n\nNot in the K6 test but in the submission integration test", "committedDate": "2020-06-16T03:09:48Z", "type": "commit"}, {"oid": "9e8d0f6bacdaebda324cafcf9b20697655782084", "url": "https://github.com/ls1intum/Artemis/commit/9e8d0f6bacdaebda324cafcf9b20697655782084", "message": "Move executeQuizStartTask() to a better position", "committedDate": "2020-06-16T03:10:43Z", "type": "commit"}, {"oid": "c6e8a576c15bfd68a88e48cb89a2edaf8dd13eaa", "url": "https://github.com/ls1intum/Artemis/commit/c6e8a576c15bfd68a88e48cb89a2edaf8dd13eaa", "message": "Refactor quizExerciseId into local variable as it is used very often", "committedDate": "2020-06-16T03:12:54Z", "type": "commit"}, {"oid": "17ca5a4c35e43da031a003fd9cb4d48371fcf545", "url": "https://github.com/ls1intum/Artemis/commit/17ca5a4c35e43da031a003fd9cb4d48371fcf545", "message": "Fix potential problem with local caching", "committedDate": "2020-06-16T03:13:44Z", "type": "commit"}, {"oid": "eeaa4acb38b846a1fcaafbc73aa957cadb51304c", "url": "https://github.com/ls1intum/Artemis/commit/eeaa4acb38b846a1fcaafbc73aa957cadb51304c", "message": "Add clearAllQuizData() to the tear down tasks", "committedDate": "2020-06-16T03:15:02Z", "type": "commit"}, {"oid": "ba6cc13b2c6554ac174b1f5f3dd6b63291796afb", "url": "https://github.com/ls1intum/Artemis/commit/ba6cc13b2c6554ac174b1f5f3dd6b63291796afb", "message": "Merge branch 'develop' into enhancement/quiz/distributed-scheduling\n\nConflicts:\n\tsrc/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n\tsrc/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n\tsrc/main/java/de/tum/in/www1/artemis/service/scheduled/QuizScheduleService.java", "committedDate": "2020-06-16T06:40:38Z", "type": "commit"}, {"oid": "342d8d335e67437c42805096f131b23fbbe3ed19", "url": "https://github.com/ls1intum/Artemis/commit/342d8d335e67437c42805096f131b23fbbe3ed19", "message": "Merge branch 'develop' into enhancement/quiz/distributed-scheduling", "committedDate": "2020-06-16T09:58:45Z", "type": "commit"}, {"oid": "8b47ebe884082b024587d420234f34fc6cf642d7", "url": "https://github.com/ls1intum/Artemis/commit/8b47ebe884082b024587d420234f34fc6cf642d7", "message": "Remove commented-out logging statement", "committedDate": "2020-06-16T10:43:06Z", "type": "commit"}, {"oid": "ba911ccb0cc40e6bef7d6c5dbb296c2c8e61df9c", "url": "https://github.com/ls1intum/Artemis/commit/ba911ccb0cc40e6bef7d6c5dbb296c2c8e61df9c", "message": "Remove commented-out pre-loader configuration", "committedDate": "2020-06-16T10:43:55Z", "type": "commit"}, {"oid": "616106fd5ec18bd44df305db91f3878b6d82a401", "url": "https://github.com/ls1intum/Artemis/commit/616106fd5ec18bd44df305db91f3878b6d82a401", "message": "Fix typo", "committedDate": "2020-06-16T14:32:09Z", "type": "commit"}, {"oid": "9648ea55c9361ee01475d2aca672f6fef33cebf7", "url": "https://github.com/ls1intum/Artemis/commit/9648ea55c9361ee01475d2aca672f6fef33cebf7", "message": "Fix logging in destroy()", "committedDate": "2020-06-16T14:47:54Z", "type": "commit"}, {"oid": "5bd6e404bc1eaff5ae8954224b265ba023384430", "url": "https://github.com/ls1intum/Artemis/commit/5bd6e404bc1eaff5ae8954224b265ba023384430", "message": "Fix object caching implementation", "committedDate": "2020-06-16T18:23:04Z", "type": "commit"}, {"oid": "c3e8a2bdc1c340f757db046f9cfc447cd5be042c", "url": "https://github.com/ls1intum/Artemis/commit/c3e8a2bdc1c340f757db046f9cfc447cd5be042c", "message": "Change log message and location", "committedDate": "2020-06-16T18:23:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3ODAwOA==", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r441778008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Long id;\n          \n          \n            \n                private Long exerciseId;", "author": "krusche", "createdAt": "2020-06-17T19:18:35Z", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseCache.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.util.*;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+\n+abstract class QuizExerciseCache {\n+\n+    private Long id;", "originalCommit": "c3e8a2bdc1c340f757db046f9cfc447cd5be042c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d80b77848245f44d17895774677e51ef80bf863", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseCache.java b/src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseCache.java\nindex 171dcab841..6bd618e836 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseCache.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseCache.java\n\n@@ -26,7 +26,8 @@ abstract class QuizExerciseCache {\n     }\n \n     /**\n-     * Returns the quiz exercise.\n+     * Returns the cached quiz exercise object.\n+     *\n      * @return the actual QuizExercise object, may be null.\n      */\n     abstract QuizExercise getExercise();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTQzMg==", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r441781432", "bodyText": "why is this coming so late now?", "author": "krusche", "createdAt": "2020-06-17T19:25:17Z", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizScheduleService.java", "diffHunk": "@@ -341,87 +464,101 @@ public void processCachedQuizSubmissions() {\n         log.debug(\"Process cached quiz submissions\");\n         // global try-catch for error logging\n         try {\n-            long start = System.nanoTime();\n-\n-            // create Participations and Results if the submission was submitted or if the quiz has ended and save them to Database (DB Write)\n-            for (long quizExerciseId : submissionHashMap.keySet()) {\n-\n-                QuizExercise quizExercise = quizExerciseService.findOneWithQuestions(quizExerciseId);\n+            for (QuizExerciseCache cachedQuiz : cachedQuizExercises.values()) {\n+                Long quizExerciseId = cachedQuiz.getId();\n+                // Get fresh QuizExercise from DB\n+                QuizExercise quizExercise = quizExerciseService.findOne(quizExerciseId);\n                 // check if quiz has been deleted\n                 if (quizExercise == null) {\n-                    submissionHashMap.remove(quizExerciseId);\n+                    log.debug(\"Remove quiz \" + quizExerciseId + \" from resultHashMap\");\n+                    cachedQuizExercises.remove(quizExerciseId);\n+                    cachedQuiz.destroy();\n                     continue;\n                 }\n \n-                // if quiz has ended, all submissions will be processed => we can remove the inner HashMap for this quiz\n-                // if quiz hasn't ended, some submissions (those that are not submitted) will stay in HashMap => keep inner HashMap\n-                Map<String, QuizSubmission> submissions;\n-                if (quizExercise.isEnded()) {\n-                    submissions = submissionHashMap.remove(quizExerciseId);\n-                }\n-                else {\n-                    submissions = submissionHashMap.get(quizExerciseId);\n+                // (Boolean wrapper is safe to auto-unbox here)\n+                boolean hasEnded = quizExercise.isEnded();\n+                // Note that those might not be true later on due to concurrency and a distributed system,\n+                // do not rely on that for actions upon the whole set, such as clear()\n+                boolean hasNewSubmissions = !cachedQuiz.getSubmissions().isEmpty();\n+                boolean hasNewParticipations = !cachedQuiz.getParticipations().isEmpty();\n+                boolean hasNewResults = !cachedQuiz.getResults().isEmpty();\n+\n+                // Skip quizzes with no cached changes\n+                if (!hasNewSubmissions && !hasNewParticipations && !hasNewResults) {\n+                    // Remove quiz if it is not scheduled for start\n+                    if (hasEnded && cachedQuiz.getQuizStart().isEmpty()) {\n+                        removeCachedQuiz(cachedQuiz);\n+                    }\n+                    continue;\n                 }\n \n-                int numberOfSubmittedSubmissions = saveQuizSubmissionWithParticipationAndResultToDatabase(quizExercise, submissions);\n+                // Update cached exercise object (use the expensive operation upfront)\n+                quizExercise = quizExerciseService.findOneWithQuestionsAndStatistics(quizExerciseId);\n+                cachedQuiz.setExercise(quizExercise);\n+                updateQuizExercise(quizExercise);\n \n-                if (numberOfSubmittedSubmissions > 0) {\n-                    log.info(\"Saved {} submissions to database in {} in quiz {}\", numberOfSubmittedSubmissions, printDuration(start), quizExercise.getTitle());\n-                }\n-            }\n+                // Save cached Submissions (this will also generate results and participations and place them in the cache)\n+                long start = System.nanoTime();", "originalCommit": "c3e8a2bdc1c340f757db046f9cfc447cd5be042c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5OTg2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r441799867", "bodyText": "I decided to move it there because it is first used as duration in Saved {} submissions to database in {} in quiz {}. I could also move it before Long quizExerciseId = cachedQuiz.getId(); at the beginning of the loop. It would then of course measure more than saving the submissions to DB.", "author": "MaisiKoleni", "createdAt": "2020-06-17T20:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "8d80b77848245f44d17895774677e51ef80bf863", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizScheduleService.java b/src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizScheduleService.java\nindex 52625c3f54..3e28bb37c9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizScheduleService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizScheduleService.java\n\n@@ -428,36 +422,40 @@ public class QuizScheduleService {\n         quizExerciseService.sendQuizExerciseToSubscribedClients(quizExercise, \"start-now\");\n     }\n \n-    /*\n-     * Clears all quiz data for all quiz exercises from the 4 hash maps for quizzes\n+    /**\n+     * Clears all cached quiz data for all quiz exercises for quizzes.\n+     * <p>\n+     * This will cause cached submissions, participations and results to be lost!\n      */\n     public void clearAllQuizData() {\n-        cachedQuizExercises.values().forEach(QuizExerciseCache::destroy);\n+        cachedQuizExercises.values().forEach(QuizExerciseCache::clear);\n         cachedQuizExercises.clear();\n     }\n \n     /**\n-     * Clears all quiz data for one specific quiz exercise from the 4 hash maps for quizzes\n+     * Clears all quiz data for one specific quiz exercise for quizzes\n+     * <p>\n+     * This will cause cached submissions, participations and results to be lost!\n      * @param quizExerciseId refers to one specific quiz exercise for which the data should be cleared\n      */\n     public void clearQuizData(Long quizExerciseId) {\n         QuizExerciseCache quizCache = cachedQuizExercises.remove(quizExerciseId);\n         if (quizCache != null) {\n-            quizCache.destroy();\n+            quizCache.clear();\n         }\n     }\n \n     /**\n      * // @formatter:off\n-     * 1. Check SubmissionHashMap for new submissions with \u201cisSubmitted() == true\u201d\n+     * 1. Check cached submissions for new submissions with \u201cisSubmitted() == true\u201d\n      *      a. Process each Submission (set submissionType to \u201cSubmissionType.MANUAL\u201d) and create Participation and Result and save them to Database (DB WRITE)\n      *      b. Remove processed Submissions from SubmissionHashMap and write Participation with Result into ParticipationHashMap and write Result into ResultHashMap\n      * 2. If Quiz has ended:\n-     *      a. Process all Submissions in SubmissionHashMap that belong to this quiz i. set \u201cisSubmitted\u201d to \u201ctrue\u201d and submissionType to \u201cSubmissionType.TIMEOUT\u201d\n+     *      a. Process all cached Submissions that belong to this quiz i. set \u201cisSubmitted\u201d to \u201ctrue\u201d and submissionType to \u201cSubmissionType.TIMEOUT\u201d\n      *          ii. Create Participation and Result and save to Database (DB WRITE)\n-     *          iii. Remove processed Submissions from SubmissionHashMap and write Participations with Result into ParticipationHashMap and Results into ResultHashMap\n-     *      b. Send out Participations (including QuizExercise and Result) from ParticipationHashMap to each participant and remove them from ParticipationHashMap (WEBSOCKET SEND)\n-     * 3. Update Statistics with Results from ResultHashMap (DB READ and DB WRITE) and remove from ResultHashMap\n+     *          iii. Remove processed Submissions from cache and write the Participations with Result and the Results into the cache\n+     *      b. Send out cached Participations (including QuizExercise and Result) from to each participant and remove them from the cache (WEBSOCKET SEND)\n+     * 3. Update Statistics with Results from ResultHashMap (DB READ and DB WRITE) and remove from cache\n      * 4. Send out new Statistics to instructors (WEBSOCKET SEND)\n      */\n     public void processCachedQuizSubmissions() {\n"}}, {"oid": "8d80b77848245f44d17895774677e51ef80bf863", "url": "https://github.com/ls1intum/Artemis/commit/8d80b77848245f44d17895774677e51ef80bf863", "message": "Clean up code, refactor some parts and fix/add documentation", "committedDate": "2020-06-17T19:54:24Z", "type": "commit"}, {"oid": "7d84d89c92bae23e4239b9ce8389a6f471f77c28", "url": "https://github.com/ls1intum/Artemis/commit/7d84d89c92bae23e4239b9ce8389a6f471f77c28", "message": "Rename some variables and methods", "committedDate": "2020-06-17T20:11:00Z", "type": "commit"}, {"oid": "063945a3507f034be4b4f000af2c757bd14f9fd6", "url": "https://github.com/ls1intum/Artemis/commit/063945a3507f034be4b4f000af2c757bd14f9fd6", "message": "Increase time the tests waits for processing all submissions and results", "committedDate": "2020-06-18T17:15:40Z", "type": "commit"}, {"oid": "dd653f7982cd5350024e565a430f589e4aea7687", "url": "https://github.com/ls1intum/Artemis/commit/dd653f7982cd5350024e565a430f589e4aea7687", "message": "Merge branch 'develop' into enhancement/quiz/distributed-scheduling", "committedDate": "2020-06-18T17:20:01Z", "type": "commit"}, {"oid": "cf097885c70d44d311448970adb29e7dcb012d39", "url": "https://github.com/ls1intum/Artemis/commit/cf097885c70d44d311448970adb29e7dcb012d39", "message": "Change from values() to keySet().", "committedDate": "2020-06-21T09:47:59Z", "type": "commit"}, {"oid": "0305a8442c5f57f6600017854aab4d0060482c8f", "url": "https://github.com/ls1intum/Artemis/commit/0305a8442c5f57f6600017854aab4d0060482c8f", "message": "Fix cache hazelcast configuration", "committedDate": "2020-06-21T09:52:04Z", "type": "commit"}, {"oid": "9b6f78d3d7f97fbcf4d27ff7995ffe8e62f57746", "url": "https://github.com/ls1intum/Artemis/commit/9b6f78d3d7f97fbcf4d27ff7995ffe8e62f57746", "message": "Fix test so that I is not dependent on system performance", "committedDate": "2020-06-21T11:38:54Z", "type": "commit"}, {"oid": "b304f954bb5d0d862af920f4afe2e09c467093e3", "url": "https://github.com/ls1intum/Artemis/commit/b304f954bb5d0d862af920f4afe2e09c467093e3", "message": "Implement NamedTask for the custom quiz tasks", "committedDate": "2020-06-21T12:25:51Z", "type": "commit"}, {"oid": "e14fcdb9732f6d34499c6c7186bfb50d95cc1140", "url": "https://github.com/ls1intum/Artemis/commit/e14fcdb9732f6d34499c6c7186bfb50d95cc1140", "message": "Remove blank line between import groups", "committedDate": "2020-06-21T13:39:03Z", "type": "commit"}, {"oid": "da81b76c9323db6044e30ecce5d9edf2ad6a1c19", "url": "https://github.com/ls1intum/Artemis/commit/da81b76c9323db6044e30ecce5d9edf2ad6a1c19", "message": "Switch to exerciseRepository save", "committedDate": "2020-06-21T13:48:42Z", "type": "commit"}, {"oid": "736e7a247aa948fd9863ae477b605e0396a6d5b2", "url": "https://github.com/ls1intum/Artemis/commit/736e7a247aa948fd9863ae477b605e0396a6d5b2", "message": "Improve and document task cancellation", "committedDate": "2020-06-21T15:21:08Z", "type": "commit"}, {"oid": "810fa5e6e93fa597fbd14f035066e47b99b8fbfe", "url": "https://github.com/ls1intum/Artemis/commit/810fa5e6e93fa597fbd14f035066e47b99b8fbfe", "message": "Use ClassLoader from Spring ApplicationContext", "committedDate": "2020-06-21T15:21:08Z", "type": "commit"}, {"oid": "63a1d9fdcae0b93471b583f33cd8dec23b07b470", "url": "https://github.com/ls1intum/Artemis/commit/63a1d9fdcae0b93471b583f33cd8dec23b07b470", "message": "Document why we use get here after object creation", "committedDate": "2020-06-21T15:27:53Z", "type": "commit"}, {"oid": "9036dd8946894b268faae490c3f9873698bd6163", "url": "https://github.com/ls1intum/Artemis/commit/9036dd8946894b268faae490c3f9873698bd6163", "message": "Small schedule task stopping improvement", "committedDate": "2020-06-21T16:19:44Z", "type": "commit"}, {"oid": "23b7f3eb0c6a16183af63ea92b199c805baeb5a3", "url": "https://github.com/ls1intum/Artemis/commit/23b7f3eb0c6a16183af63ea92b199c805baeb5a3", "message": "Add cancel-call again", "committedDate": "2020-06-21T16:37:09Z", "type": "commit"}, {"oid": "fa617e27a1fe945dc2700a17b83ea0b93ac8a5cb", "url": "https://github.com/ls1intum/Artemis/commit/fa617e27a1fe945dc2700a17b83ea0b93ac8a5cb", "message": "Switch to non-interrupting cancel", "committedDate": "2020-06-21T17:17:44Z", "type": "commit"}, {"oid": "e9ad1d60d16ac5718012c6e89efc332448ec9fe7", "url": "https://github.com/ls1intum/Artemis/commit/e9ad1d60d16ac5718012c6e89efc332448ec9fe7", "message": "Make cached QuizExercise not transient", "committedDate": "2020-06-21T17:56:49Z", "type": "commit"}, {"oid": "f68c7ea7b95bc8bf4f61b3764f751e2b2436040c", "url": "https://github.com/ls1intum/Artemis/commit/f68c7ea7b95bc8bf4f61b3764f751e2b2436040c", "message": "Log if cancel was successful", "committedDate": "2020-06-21T17:57:26Z", "type": "commit"}, {"oid": "30368e610defa64a3d7a3281354601011e4b76a3", "url": "https://github.com/ls1intum/Artemis/commit/30368e610defa64a3d7a3281354601011e4b76a3", "message": "Use ScheduledTaskHandler as reference if the processing is running", "committedDate": "2020-06-21T18:45:14Z", "type": "commit"}, {"oid": "3366d4ba30fff293efa1b9815368b3020e042a70", "url": "https://github.com/ls1intum/Artemis/commit/3366d4ba30fff293efa1b9815368b3020e042a70", "message": "Fix missing QuizExercise serialization", "committedDate": "2020-06-21T19:20:49Z", "type": "commit"}, {"oid": "32d6b5b5390e0d3a1367195b0c9f48261e9561e5", "url": "https://github.com/ls1intum/Artemis/commit/32d6b5b5390e0d3a1367195b0c9f48261e9561e5", "message": "Merge branch 'develop' into enhancement/quiz/distributed-scheduling", "committedDate": "2020-06-21T19:31:56Z", "type": "commit"}, {"oid": "1fa8f0ee578439055012892e4acb80e453fe3cca", "url": "https://github.com/ls1intum/Artemis/commit/1fa8f0ee578439055012892e4acb80e453fe3cca", "message": "Revert \"Make cached QuizExercise not transient\"\n\nThis reverts commit e9ad1d60d16ac5718012c6e89efc332448ec9fe7.", "committedDate": "2020-06-23T09:31:49Z", "type": "commit"}, {"oid": "c2ca3c48e9483a7f0d04654df2ae28d69d6eb9bf", "url": "https://github.com/ls1intum/Artemis/commit/c2ca3c48e9483a7f0d04654df2ae28d69d6eb9bf", "message": "Improve quiz exercise caching", "committedDate": "2020-06-23T10:03:45Z", "type": "commit"}, {"oid": "5f5191795e0430c755b3c699ced7c80d54f33dfe", "url": "https://github.com/ls1intum/Artemis/commit/5f5191795e0430c755b3c699ced7c80d54f33dfe", "message": "Add safety check and documentation", "committedDate": "2020-06-23T10:05:45Z", "type": "commit"}, {"oid": "dd48b54252b653f7cbc124835db9942d5c63d932", "url": "https://github.com/ls1intum/Artemis/commit/dd48b54252b653f7cbc124835db9942d5c63d932", "message": "Merge branch 'develop' into enhancement/quiz/distributed-scheduling\n\nConflicts:\n\tsrc/main/java/de/tum/in/www1/artemis/service/scheduled/QuizScheduleService.java", "committedDate": "2020-06-23T10:31:41Z", "type": "commit"}, {"oid": "b92a662f256f9936321f314e7fa6e4c7556a5295", "url": "https://github.com/ls1intum/Artemis/commit/b92a662f256f9936321f314e7fa6e4c7556a5295", "message": "Fix getQuizExercise and quiz exercise caching", "committedDate": "2020-06-23T10:45:15Z", "type": "commit"}, {"oid": "b92a662f256f9936321f314e7fa6e4c7556a5295", "url": "https://github.com/ls1intum/Artemis/commit/b92a662f256f9936321f314e7fa6e4c7556a5295", "message": "Fix getQuizExercise and quiz exercise caching", "committedDate": "2020-06-23T10:45:15Z", "type": "forcePushed"}, {"oid": "a45180291c5328ac8130761fbc7f8d3ed0c3ca04", "url": "https://github.com/ls1intum/Artemis/commit/a45180291c5328ac8130761fbc7f8d3ed0c3ca04", "message": "Add Javadoc to getQuizExercise(Long)", "committedDate": "2020-06-23T11:27:20Z", "type": "commit"}, {"oid": "54096037dedaade0c68622c4265a0e1b8289387b", "url": "https://github.com/ls1intum/Artemis/commit/54096037dedaade0c68622c4265a0e1b8289387b", "message": "Invalidate the cached exercise on all Hazelcast members", "committedDate": "2020-06-23T15:06:34Z", "type": "commit"}, {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2", "url": "https://github.com/ls1intum/Artemis/commit/83e40eae6a5e9666d9e0ccbb518953521393abc2", "message": "Reduce cached quiz exercise updates\n\nThis is closer to the original behavior again.", "committedDate": "2020-06-23T17:56:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4Njg2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445586865", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {\n          \n          \n            \n                QuizExerciseDistributedCache(Long exerciseId, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {", "author": "krusche", "createdAt": "2020-06-25T14:09:05Z", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseDistributedCache.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.HazelcastInstanceAware;\n+import com.hazelcast.internal.serialization.impl.SerializationServiceV1;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+\n+final class QuizExerciseDistributedCache extends QuizExerciseCache implements HazelcastInstanceAware {\n+\n+    private static final Logger log = LoggerFactory.getLogger(QuizExerciseDistributedCache.class);\n+\n+    private static final String HAZELCAST_CACHE_PARTICIPATIONS = \"-participations\";\n+\n+    private static final String HAZELCAST_CACHE_SUBMISSIONS = \"-submissions\";\n+\n+    private static final String HAZELCAST_CACHE_RESULTS = \"-results\";\n+\n+    private static final Set<Class<?>> SUPPORTED_LIST_CLASSES = Set.of(ArrayList.class, LinkedList.class, CopyOnWriteArrayList.class);\n+\n+    /**\n+     * Make sure this is a class of SUPPORTED_LIST_CLASSES to make easy serialization possible, see {@link SerializationServiceV1}\n+     */\n+    List<ScheduledTaskHandler> quizStart;\n+\n+    private transient QuizExercise exercise;\n+\n+    private transient IMap<String, StudentParticipation> participations;\n+\n+    private transient IMap<String, QuizSubmission> submissions;\n+\n+    /**\n+     * Must be a Map because Hazelcast uses serialized objects for set operations and not hashCode()/equals()\n+     */\n+    private transient IMap<Long, Result> results;\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {", "originalCommit": "83e40eae6a5e9666d9e0ccbb518953521393abc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4ODkyOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445588929", "bodyText": "is automatically created if it does not exist yet", "author": "krusche", "createdAt": "2020-06-25T14:11:59Z", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseDistributedCache.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.HazelcastInstanceAware;\n+import com.hazelcast.internal.serialization.impl.SerializationServiceV1;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+\n+final class QuizExerciseDistributedCache extends QuizExerciseCache implements HazelcastInstanceAware {\n+\n+    private static final Logger log = LoggerFactory.getLogger(QuizExerciseDistributedCache.class);\n+\n+    private static final String HAZELCAST_CACHE_PARTICIPATIONS = \"-participations\";\n+\n+    private static final String HAZELCAST_CACHE_SUBMISSIONS = \"-submissions\";\n+\n+    private static final String HAZELCAST_CACHE_RESULTS = \"-results\";\n+\n+    private static final Set<Class<?>> SUPPORTED_LIST_CLASSES = Set.of(ArrayList.class, LinkedList.class, CopyOnWriteArrayList.class);\n+\n+    /**\n+     * Make sure this is a class of SUPPORTED_LIST_CLASSES to make easy serialization possible, see {@link SerializationServiceV1}\n+     */\n+    List<ScheduledTaskHandler> quizStart;\n+\n+    private transient QuizExercise exercise;\n+\n+    private transient IMap<String, StudentParticipation> participations;\n+\n+    private transient IMap<String, QuizSubmission> submissions;\n+\n+    /**\n+     * Must be a Map because Hazelcast uses serialized objects for set operations and not hashCode()/equals()\n+     */\n+    private transient IMap<Long, Result> results;\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {\n+        super(id);\n+        setQuizStart(quizStart);\n+        setExercise(exercise);\n+        log.debug(\"Creating new QuizExerciseDistributedCache, id {}\", getExerciseId());\n+    }\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart) {\n+        this(id, quizStart, null);\n+    }\n+\n+    QuizExerciseDistributedCache(Long id) {\n+        this(id, getEmptyQuizStartList());\n+    }\n+\n+    @Override\n+    QuizExercise getExercise() {\n+        return exercise;\n+    }\n+\n+    @Override\n+    Map<String, QuizSubmission> getSubmissions() {\n+        return submissions;\n+    }\n+\n+    @Override\n+    Map<String, StudentParticipation> getParticipations() {\n+        return participations;\n+    }\n+\n+    @Override\n+    List<ScheduledTaskHandler> getQuizStart() {\n+        return quizStart;\n+    }\n+\n+    @Override\n+    Map<Long, Result> getResults() {\n+        return results;\n+    }\n+\n+    @Override\n+    void setExercise(QuizExercise newExercise) {\n+        this.exercise = newExercise;\n+    }\n+\n+    @Override\n+    void setQuizStart(List<ScheduledTaskHandler> quizStart) {\n+        Objects.requireNonNull(quizStart);\n+        if (SUPPORTED_LIST_CLASSES.contains(quizStart.getClass())) {\n+            this.quizStart = quizStart;\n+        }\n+        else {\n+            this.quizStart = new ArrayList<>(quizStart);\n+        }\n+    }\n+\n+    @Override\n+    void clear() {\n+        int participationsSize = participations.size();\n+        int submissionsSize = submissions.size();\n+        int resultsSize = results.size();\n+        if (participationsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} participations cached\", getExerciseId(), participationsSize);\n+        if (submissionsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} submissions cached\", getExerciseId(), submissionsSize);\n+        if (resultsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} results cached\", getExerciseId(), resultsSize);\n+\n+        participations.destroy();\n+        submissions.destroy();\n+        results.destroy();\n+        exercise = null;\n+    }\n+\n+    @Override\n+    public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {\n+        participations = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_PARTICIPATIONS);", "originalCommit": "83e40eae6a5e9666d9e0ccbb518953521393abc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4OTExOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445589119", "bodyText": "rename", "author": "krusche", "createdAt": "2020-06-25T14:12:17Z", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseDistributedCache.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.HazelcastInstanceAware;\n+import com.hazelcast.internal.serialization.impl.SerializationServiceV1;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+\n+final class QuizExerciseDistributedCache extends QuizExerciseCache implements HazelcastInstanceAware {\n+\n+    private static final Logger log = LoggerFactory.getLogger(QuizExerciseDistributedCache.class);\n+\n+    private static final String HAZELCAST_CACHE_PARTICIPATIONS = \"-participations\";\n+\n+    private static final String HAZELCAST_CACHE_SUBMISSIONS = \"-submissions\";\n+\n+    private static final String HAZELCAST_CACHE_RESULTS = \"-results\";\n+\n+    private static final Set<Class<?>> SUPPORTED_LIST_CLASSES = Set.of(ArrayList.class, LinkedList.class, CopyOnWriteArrayList.class);\n+\n+    /**\n+     * Make sure this is a class of SUPPORTED_LIST_CLASSES to make easy serialization possible, see {@link SerializationServiceV1}\n+     */\n+    List<ScheduledTaskHandler> quizStart;\n+\n+    private transient QuizExercise exercise;\n+\n+    private transient IMap<String, StudentParticipation> participations;\n+\n+    private transient IMap<String, QuizSubmission> submissions;\n+\n+    /**\n+     * Must be a Map because Hazelcast uses serialized objects for set operations and not hashCode()/equals()\n+     */\n+    private transient IMap<Long, Result> results;\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {\n+        super(id);\n+        setQuizStart(quizStart);\n+        setExercise(exercise);\n+        log.debug(\"Creating new QuizExerciseDistributedCache, id {}\", getExerciseId());\n+    }\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart) {\n+        this(id, quizStart, null);\n+    }\n+\n+    QuizExerciseDistributedCache(Long id) {\n+        this(id, getEmptyQuizStartList());\n+    }\n+\n+    @Override\n+    QuizExercise getExercise() {\n+        return exercise;\n+    }\n+\n+    @Override\n+    Map<String, QuizSubmission> getSubmissions() {\n+        return submissions;\n+    }\n+\n+    @Override\n+    Map<String, StudentParticipation> getParticipations() {\n+        return participations;\n+    }\n+\n+    @Override\n+    List<ScheduledTaskHandler> getQuizStart() {\n+        return quizStart;\n+    }\n+\n+    @Override\n+    Map<Long, Result> getResults() {\n+        return results;\n+    }\n+\n+    @Override\n+    void setExercise(QuizExercise newExercise) {\n+        this.exercise = newExercise;\n+    }\n+\n+    @Override\n+    void setQuizStart(List<ScheduledTaskHandler> quizStart) {\n+        Objects.requireNonNull(quizStart);\n+        if (SUPPORTED_LIST_CLASSES.contains(quizStart.getClass())) {\n+            this.quizStart = quizStart;\n+        }\n+        else {\n+            this.quizStart = new ArrayList<>(quizStart);\n+        }\n+    }\n+\n+    @Override\n+    void clear() {\n+        int participationsSize = participations.size();\n+        int submissionsSize = submissions.size();\n+        int resultsSize = results.size();\n+        if (participationsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} participations cached\", getExerciseId(), participationsSize);\n+        if (submissionsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} submissions cached\", getExerciseId(), submissionsSize);\n+        if (resultsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} results cached\", getExerciseId(), resultsSize);\n+\n+        participations.destroy();\n+        submissions.destroy();\n+        results.destroy();\n+        exercise = null;\n+    }\n+\n+    @Override\n+    public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {\n+        participations = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_PARTICIPATIONS);\n+        submissions = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_SUBMISSIONS);\n+        results = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_RESULTS);\n+    }\n+\n+    static class QuizExerciseCacheImplStreamSerializer implements StreamSerializer<QuizExerciseDistributedCache> {", "originalCommit": "83e40eae6a5e9666d9e0ccbb518953521393abc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4OTMyNA==", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445589324", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Long id = in.readLong();\n          \n          \n            \n                        Long exerciseId = in.readLong();", "author": "krusche", "createdAt": "2020-06-25T14:12:33Z", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseDistributedCache.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.HazelcastInstanceAware;\n+import com.hazelcast.internal.serialization.impl.SerializationServiceV1;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+\n+final class QuizExerciseDistributedCache extends QuizExerciseCache implements HazelcastInstanceAware {\n+\n+    private static final Logger log = LoggerFactory.getLogger(QuizExerciseDistributedCache.class);\n+\n+    private static final String HAZELCAST_CACHE_PARTICIPATIONS = \"-participations\";\n+\n+    private static final String HAZELCAST_CACHE_SUBMISSIONS = \"-submissions\";\n+\n+    private static final String HAZELCAST_CACHE_RESULTS = \"-results\";\n+\n+    private static final Set<Class<?>> SUPPORTED_LIST_CLASSES = Set.of(ArrayList.class, LinkedList.class, CopyOnWriteArrayList.class);\n+\n+    /**\n+     * Make sure this is a class of SUPPORTED_LIST_CLASSES to make easy serialization possible, see {@link SerializationServiceV1}\n+     */\n+    List<ScheduledTaskHandler> quizStart;\n+\n+    private transient QuizExercise exercise;\n+\n+    private transient IMap<String, StudentParticipation> participations;\n+\n+    private transient IMap<String, QuizSubmission> submissions;\n+\n+    /**\n+     * Must be a Map because Hazelcast uses serialized objects for set operations and not hashCode()/equals()\n+     */\n+    private transient IMap<Long, Result> results;\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {\n+        super(id);\n+        setQuizStart(quizStart);\n+        setExercise(exercise);\n+        log.debug(\"Creating new QuizExerciseDistributedCache, id {}\", getExerciseId());\n+    }\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart) {\n+        this(id, quizStart, null);\n+    }\n+\n+    QuizExerciseDistributedCache(Long id) {\n+        this(id, getEmptyQuizStartList());\n+    }\n+\n+    @Override\n+    QuizExercise getExercise() {\n+        return exercise;\n+    }\n+\n+    @Override\n+    Map<String, QuizSubmission> getSubmissions() {\n+        return submissions;\n+    }\n+\n+    @Override\n+    Map<String, StudentParticipation> getParticipations() {\n+        return participations;\n+    }\n+\n+    @Override\n+    List<ScheduledTaskHandler> getQuizStart() {\n+        return quizStart;\n+    }\n+\n+    @Override\n+    Map<Long, Result> getResults() {\n+        return results;\n+    }\n+\n+    @Override\n+    void setExercise(QuizExercise newExercise) {\n+        this.exercise = newExercise;\n+    }\n+\n+    @Override\n+    void setQuizStart(List<ScheduledTaskHandler> quizStart) {\n+        Objects.requireNonNull(quizStart);\n+        if (SUPPORTED_LIST_CLASSES.contains(quizStart.getClass())) {\n+            this.quizStart = quizStart;\n+        }\n+        else {\n+            this.quizStart = new ArrayList<>(quizStart);\n+        }\n+    }\n+\n+    @Override\n+    void clear() {\n+        int participationsSize = participations.size();\n+        int submissionsSize = submissions.size();\n+        int resultsSize = results.size();\n+        if (participationsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} participations cached\", getExerciseId(), participationsSize);\n+        if (submissionsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} submissions cached\", getExerciseId(), submissionsSize);\n+        if (resultsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} results cached\", getExerciseId(), resultsSize);\n+\n+        participations.destroy();\n+        submissions.destroy();\n+        results.destroy();\n+        exercise = null;\n+    }\n+\n+    @Override\n+    public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {\n+        participations = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_PARTICIPATIONS);\n+        submissions = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_SUBMISSIONS);\n+        results = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_RESULTS);\n+    }\n+\n+    static class QuizExerciseCacheImplStreamSerializer implements StreamSerializer<QuizExerciseDistributedCache> {\n+\n+        @Override\n+        public int getTypeId() {\n+            return Constants.HAZELCAST_QUIZ_EXERCISE_CACHE_SERIALIZER_ID;\n+        }\n+\n+        @Override\n+        public void write(ObjectDataOutput out, QuizExerciseDistributedCache exerciseCacheImpl) throws IOException {\n+            out.writeLong(exerciseCacheImpl.getExerciseId());\n+            out.writeObject(exerciseCacheImpl.quizStart);\n+            out.writeObject(exerciseCacheImpl.exercise);\n+        }\n+\n+        @Override\n+        public QuizExerciseDistributedCache read(ObjectDataInput in) throws IOException {\n+            Long id = in.readLong();", "originalCommit": "83e40eae6a5e9666d9e0ccbb518953521393abc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5Mzg5Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445593893", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (cachedQuiz != null)\n          \n          \n            \n                        return cachedQuiz;\n          \n          \n            \n                    if (cachedQuiz != null) {\n          \n          \n            \n                        return cachedQuiz;\n          \n          \n            \n                    }", "author": "krusche", "createdAt": "2020-06-25T14:18:29Z", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizScheduleService.java", "diffHunk": "@@ -0,0 +1,743 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.UnaryOperator;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.messaging.simp.SimpMessageSendingOperations;\n+import org.springframework.stereotype.Service;\n+\n+import com.hazelcast.config.*;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.cp.IAtomicReference;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.scheduledexecutor.*;\n+import com.hazelcast.topic.ITopic;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.SubmittedAnswer;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+import de.tum.in.www1.artemis.service.QuizExerciseService;\n+import de.tum.in.www1.artemis.service.QuizStatisticService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+@Service\n+public class QuizScheduleService {\n+\n+    static final Logger log = LoggerFactory.getLogger(QuizScheduleService.class);\n+\n+    private static final String HAZELCAST_PROCESS_CACHE_HANDLER = QuizProcessCacheTask.HAZELCAST_PROCESS_CACHE_TASK + \"-handler\";\n+\n+    private static final String HAZELCAST_CACHED_EXERCISE_UPDATE_TOPIC = Constants.HAZELCAST_QUIZ_PREFIX + \"cached-exercise-invalidation\";\n+\n+    private IMap<Long, QuizExerciseCache> cachedQuizExercises;\n+\n+    private ITopic<QuizExercise> cachedQuizExerciseUpdates;\n+\n+    private volatile IScheduledExecutorService threadPoolTaskScheduler;\n+\n+    private IAtomicReference<ScheduledTaskHandler> scheduledProcessQuizSubmissions;\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final UserService userService;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private QuizExerciseService quizExerciseService;\n+\n+    private QuizStatisticService quizStatisticService;\n+\n+    private SimpMessageSendingOperations messagingTemplate;\n+\n+    private HazelcastInstance hazelcastInstance;\n+\n+    public QuizScheduleService(SimpMessageSendingOperations messagingTemplate, StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository,\n+            UserService userService, QuizSubmissionRepository quizSubmissionRepository, HazelcastInstance hazelcastInstance) {\n+        this.messagingTemplate = messagingTemplate;\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.userService = userService;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.hazelcastInstance = hazelcastInstance;\n+        this.scheduledProcessQuizSubmissions = hazelcastInstance.getCPSubsystem().getAtomicReference(HAZELCAST_PROCESS_CACHE_HANDLER);\n+        this.cachedQuizExercises = hazelcastInstance.getMap(Constants.HAZELCAST_EXERCISE_CACHE);\n+        this.threadPoolTaskScheduler = hazelcastInstance.getScheduledExecutorService(Constants.HAZELCAST_QUIZ_SCHEDULER);\n+        this.cachedQuizExerciseUpdates = hazelcastInstance.getTopic(HAZELCAST_CACHED_EXERCISE_UPDATE_TOPIC);\n+        this.cachedQuizExerciseUpdates.addMessageListener(newQuizExerciseMessage -> updateQuizExerciseLocally(newQuizExerciseMessage.getMessageObject()));\n+    }\n+\n+    /**\n+     * Configures Hazelcast for the QuizScheduleService before the HazelcastInstance is created.\n+     *\n+     * @param config the {@link Config} the QuizScheduleService-specific configuration should be added to\n+     */\n+    public static void configureHazelcast(Config config) {\n+        QuizExerciseCache.registerSerializers(config);\n+        // Pool size default 16, increased capacity (as we could have many quizzes) and default durability for now\n+        config.getScheduledExecutorConfig(Constants.HAZELCAST_QUIZ_SCHEDULER).setPoolSize(16).setCapacity(1000).setDurability(1);\n+        // Important to avoid continuous serialization and de-serialization and the implications on transient fields of QuizExerciseCache\n+        EvictionConfig evictionConfig = new EvictionConfig() //\n+                .setEvictionPolicy(EvictionPolicy.NONE);\n+        NearCacheConfig nearCacheConfig = new NearCacheConfig() //\n+                .setName(Constants.HAZELCAST_EXERCISE_CACHE + \"-local\") //\n+                .setInMemoryFormat(InMemoryFormat.OBJECT) //\n+                .setSerializeKeys(true) //\n+                .setInvalidateOnChange(true) //\n+                .setTimeToLiveSeconds(0) //\n+                .setMaxIdleSeconds(0) //\n+                .setEvictionConfig(evictionConfig) //\n+                .setCacheLocalEntries(true);\n+        config.getMapConfig(Constants.HAZELCAST_EXERCISE_CACHE).setNearCacheConfig(nearCacheConfig);\n+    }\n+\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void applicationReady() {\n+        // activate Quiz Schedule Service\n+        startSchedule(5 * 1000);                          // every 5 seconds\n+    }\n+\n+    @Autowired\n+    // break the dependency cycle\n+    public void setQuizExerciseService(QuizExerciseService quizExerciseService) {\n+        this.quizExerciseService = quizExerciseService;\n+    }\n+\n+    @Autowired\n+    // break the dependency cycle\n+    public void setQuizStatisticService(QuizStatisticService quizStatisticService) {\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Only for reading from QuizExerciseCache\n+     *\n+     * @param quizExerciseId the id of the quiz exercise, must not be null\n+     */\n+    private QuizExerciseCache getReadCacheFor(Long quizExerciseId) {\n+        return cachedQuizExercises.getOrDefault(quizExerciseId, QuizExerciseCache.empty());\n+    }\n+\n+    /**\n+     * Only for the modification of transient properties, e.g. the exercise and the maps.\n+     * <p>\n+     * Creates new QuizExerciseCache if required.\n+     *\n+     * @param quizExerciseId the id of the quiz exercise, must not be null\n+     */\n+    private QuizExerciseCache getTransientWriteCacheFor(Long quizExerciseId) {\n+        var cachedQuiz = cachedQuizExercises.get(quizExerciseId);\n+        if (cachedQuiz != null)\n+            return cachedQuiz;", "originalCommit": "83e40eae6a5e9666d9e0ccbb518953521393abc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDMzMg==", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445594332", "bodyText": "explain in java doc why we need to lock", "author": "krusche", "createdAt": "2020-06-25T14:19:07Z", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizScheduleService.java", "diffHunk": "@@ -0,0 +1,743 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.UnaryOperator;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.messaging.simp.SimpMessageSendingOperations;\n+import org.springframework.stereotype.Service;\n+\n+import com.hazelcast.config.*;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.cp.IAtomicReference;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.scheduledexecutor.*;\n+import com.hazelcast.topic.ITopic;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.SubmittedAnswer;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+import de.tum.in.www1.artemis.service.QuizExerciseService;\n+import de.tum.in.www1.artemis.service.QuizStatisticService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+@Service\n+public class QuizScheduleService {\n+\n+    static final Logger log = LoggerFactory.getLogger(QuizScheduleService.class);\n+\n+    private static final String HAZELCAST_PROCESS_CACHE_HANDLER = QuizProcessCacheTask.HAZELCAST_PROCESS_CACHE_TASK + \"-handler\";\n+\n+    private static final String HAZELCAST_CACHED_EXERCISE_UPDATE_TOPIC = Constants.HAZELCAST_QUIZ_PREFIX + \"cached-exercise-invalidation\";\n+\n+    private IMap<Long, QuizExerciseCache> cachedQuizExercises;\n+\n+    private ITopic<QuizExercise> cachedQuizExerciseUpdates;\n+\n+    private volatile IScheduledExecutorService threadPoolTaskScheduler;\n+\n+    private IAtomicReference<ScheduledTaskHandler> scheduledProcessQuizSubmissions;\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final UserService userService;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private QuizExerciseService quizExerciseService;\n+\n+    private QuizStatisticService quizStatisticService;\n+\n+    private SimpMessageSendingOperations messagingTemplate;\n+\n+    private HazelcastInstance hazelcastInstance;\n+\n+    public QuizScheduleService(SimpMessageSendingOperations messagingTemplate, StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository,\n+            UserService userService, QuizSubmissionRepository quizSubmissionRepository, HazelcastInstance hazelcastInstance) {\n+        this.messagingTemplate = messagingTemplate;\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.userService = userService;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.hazelcastInstance = hazelcastInstance;\n+        this.scheduledProcessQuizSubmissions = hazelcastInstance.getCPSubsystem().getAtomicReference(HAZELCAST_PROCESS_CACHE_HANDLER);\n+        this.cachedQuizExercises = hazelcastInstance.getMap(Constants.HAZELCAST_EXERCISE_CACHE);\n+        this.threadPoolTaskScheduler = hazelcastInstance.getScheduledExecutorService(Constants.HAZELCAST_QUIZ_SCHEDULER);\n+        this.cachedQuizExerciseUpdates = hazelcastInstance.getTopic(HAZELCAST_CACHED_EXERCISE_UPDATE_TOPIC);\n+        this.cachedQuizExerciseUpdates.addMessageListener(newQuizExerciseMessage -> updateQuizExerciseLocally(newQuizExerciseMessage.getMessageObject()));\n+    }\n+\n+    /**\n+     * Configures Hazelcast for the QuizScheduleService before the HazelcastInstance is created.\n+     *\n+     * @param config the {@link Config} the QuizScheduleService-specific configuration should be added to\n+     */\n+    public static void configureHazelcast(Config config) {\n+        QuizExerciseCache.registerSerializers(config);\n+        // Pool size default 16, increased capacity (as we could have many quizzes) and default durability for now\n+        config.getScheduledExecutorConfig(Constants.HAZELCAST_QUIZ_SCHEDULER).setPoolSize(16).setCapacity(1000).setDurability(1);\n+        // Important to avoid continuous serialization and de-serialization and the implications on transient fields of QuizExerciseCache\n+        EvictionConfig evictionConfig = new EvictionConfig() //\n+                .setEvictionPolicy(EvictionPolicy.NONE);\n+        NearCacheConfig nearCacheConfig = new NearCacheConfig() //\n+                .setName(Constants.HAZELCAST_EXERCISE_CACHE + \"-local\") //\n+                .setInMemoryFormat(InMemoryFormat.OBJECT) //\n+                .setSerializeKeys(true) //\n+                .setInvalidateOnChange(true) //\n+                .setTimeToLiveSeconds(0) //\n+                .setMaxIdleSeconds(0) //\n+                .setEvictionConfig(evictionConfig) //\n+                .setCacheLocalEntries(true);\n+        config.getMapConfig(Constants.HAZELCAST_EXERCISE_CACHE).setNearCacheConfig(nearCacheConfig);\n+    }\n+\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void applicationReady() {\n+        // activate Quiz Schedule Service\n+        startSchedule(5 * 1000);                          // every 5 seconds\n+    }\n+\n+    @Autowired\n+    // break the dependency cycle\n+    public void setQuizExerciseService(QuizExerciseService quizExerciseService) {\n+        this.quizExerciseService = quizExerciseService;\n+    }\n+\n+    @Autowired\n+    // break the dependency cycle\n+    public void setQuizStatisticService(QuizStatisticService quizStatisticService) {\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Only for reading from QuizExerciseCache\n+     *\n+     * @param quizExerciseId the id of the quiz exercise, must not be null\n+     */\n+    private QuizExerciseCache getReadCacheFor(Long quizExerciseId) {\n+        return cachedQuizExercises.getOrDefault(quizExerciseId, QuizExerciseCache.empty());\n+    }\n+\n+    /**\n+     * Only for the modification of transient properties, e.g. the exercise and the maps.\n+     * <p>\n+     * Creates new QuizExerciseCache if required.\n+     *\n+     * @param quizExerciseId the id of the quiz exercise, must not be null\n+     */\n+    private QuizExerciseCache getTransientWriteCacheFor(Long quizExerciseId) {\n+        var cachedQuiz = cachedQuizExercises.get(quizExerciseId);\n+        if (cachedQuiz != null)\n+            return cachedQuiz;\n+        cachedQuizExercises.lock(quizExerciseId);", "originalCommit": "83e40eae6a5e9666d9e0ccbb518953521393abc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}