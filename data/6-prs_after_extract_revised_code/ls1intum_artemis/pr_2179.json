{"pr_number": 2179, "pr_title": "Support Petri Nets and Syntax Trees", "pr_createdAt": "2020-10-08T11:45:07Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2179", "timeline": [{"oid": "16ad79ab2cdfc038cbae400c2b2e0de1fbd50c15", "url": "https://github.com/ls1intum/Artemis/commit/16ad79ab2cdfc038cbae400c2b2e0de1fbd50c15", "message": "update apollon version", "committedDate": "2020-10-06T06:00:16Z", "type": "commit"}, {"oid": "15c36d28418edd03e47a9b42df9716e3af191d09", "url": "https://github.com/ls1intum/Artemis/commit/15c36d28418edd03e47a9b42df9716e3af191d09", "message": "Merge branch 'develop' into feature/update-apollon", "committedDate": "2020-10-06T06:08:27Z", "type": "commit"}, {"oid": "a94754fe6c6d6bf50d75581c96ba3dda628e3247", "url": "https://github.com/ls1intum/Artemis/commit/a94754fe6c6d6bf50d75581c96ba3dda628e3247", "message": "Merge branch 'develop' into feature/update-apollon", "committedDate": "2020-10-06T20:32:36Z", "type": "commit"}, {"oid": "827a8a46ce6bee5b768a78f22c1c7f3d2150a424", "url": "https://github.com/ls1intum/Artemis/commit/827a8a46ce6bee5b768a78f22c1c7f3d2150a424", "message": "update apollon version", "committedDate": "2020-10-06T21:21:10Z", "type": "commit"}, {"oid": "9ab0d2de8e9761e97fbbea5a289fbbb2e8230d21", "url": "https://github.com/ls1intum/Artemis/commit/9ab0d2de8e9761e97fbbea5a289fbbb2e8230d21", "message": "Merge branch 'develop' into feature/update-apollon-version-2.2.0", "committedDate": "2020-10-06T21:51:37Z", "type": "commit"}, {"oid": "9c14cf41e7723d111798d6e2e182183830689a4a", "url": "https://github.com/ls1intum/Artemis/commit/9c14cf41e7723d111798d6e2e182183830689a4a", "message": "Merge branch 'develop' into feature/update-apollon-version-2.2.0", "committedDate": "2020-10-08T11:09:01Z", "type": "commit"}, {"oid": "2cb9a50044c610994f288da244ecdf649a4a3b37", "url": "https://github.com/ls1intum/Artemis/commit/2cb9a50044c610994f288da244ecdf649a4a3b37", "message": "Add PetriNet and SyntaxTree diagram types", "committedDate": "2020-10-08T11:16:52Z", "type": "commit"}, {"oid": "0bfdb4c0df55d7b7ab13aaf8a6ce1d2e42a81c37", "url": "https://github.com/ls1intum/Artemis/commit/0bfdb4c0df55d7b7ab13aaf8a6ce1d2e42a81c37", "message": "Add PetriNet and SyntaxTree diagram type localization", "committedDate": "2020-10-08T11:17:52Z", "type": "commit"}, {"oid": "25de9aae7f868c14603091020adc653117fff54e", "url": "https://github.com/ls1intum/Artemis/commit/25de9aae7f868c14603091020adc653117fff54e", "message": "Add PetriNet diagram type compass model", "committedDate": "2020-10-08T11:18:53Z", "type": "commit"}, {"oid": "2b02d104831ce050e8c7059b3f77d1757cdbc7d3", "url": "https://github.com/ls1intum/Artemis/commit/2b02d104831ce050e8c7059b3f77d1757cdbc7d3", "message": "Add SyntaxTree diagram type compass model", "committedDate": "2020-10-08T11:19:22Z", "type": "commit"}, {"oid": "c66598d75c679c321ef5e9dafa9681bb1bce440a", "url": "https://github.com/ls1intum/Artemis/commit/c66598d75c679c321ef5e9dafa9681bb1bce440a", "message": "Support PetriNet and SyntaxTree diagram types in compass UMLModelParser", "committedDate": "2020-10-08T11:21:00Z", "type": "commit"}, {"oid": "4175e89b415f0f4aa3dbe702254766e29577b64d", "url": "https://github.com/ls1intum/Artemis/commit/4175e89b415f0f4aa3dbe702254766e29577b64d", "message": "Add tests for PetriNet diagram type compass model", "committedDate": "2020-10-08T11:21:35Z", "type": "commit"}, {"oid": "382963be9b2390e4b466d8545090dba8016c439f", "url": "https://github.com/ls1intum/Artemis/commit/382963be9b2390e4b466d8545090dba8016c439f", "message": "Add tests for SyntaxTree diagram type compass model", "committedDate": "2020-10-08T11:21:55Z", "type": "commit"}, {"oid": "a6807bceb32a6bbb0d3c661a14fae81bef64b4dd", "url": "https://github.com/ls1intum/Artemis/commit/a6807bceb32a6bbb0d3c661a14fae81bef64b4dd", "message": "Add PetriNet and SyntaxTree diagram models in the Artemis client", "committedDate": "2020-10-08T11:53:31Z", "type": "commit"}, {"oid": "8fec4c0d6857558af4481f12f4e13667e4392021", "url": "https://github.com/ls1intum/Artemis/commit/8fec4c0d6857558af4481f12f4e13667e4392021", "message": "Add PetriNet and SyntaxTree diagram type to form selectors in the client", "committedDate": "2020-10-08T15:03:21Z", "type": "commit"}, {"oid": "7289fc1d8139154ad9fcc2eed8d13932f2aa048b", "url": "https://github.com/ls1intum/Artemis/commit/7289fc1d8139154ad9fcc2eed8d13932f2aa048b", "message": "Merge branch 'develop' into feature/update-apollon-version-2.2.0", "committedDate": "2020-10-09T08:30:24Z", "type": "commit"}, {"oid": "70fb1fd97aa52dc9492930d84fbaa6e26f6140c0", "url": "https://github.com/ls1intum/Artemis/commit/70fb1fd97aa52dc9492930d84fbaa6e26f6140c0", "message": "update to apollon 2.2.1", "committedDate": "2020-10-09T18:34:40Z", "type": "commit"}, {"oid": "ad3780d05342907d5b39c99f38fc785c6e6736d7", "url": "https://github.com/ls1intum/Artemis/commit/ad3780d05342907d5b39c99f38fc785c6e6736d7", "message": "Merge branch 'feature/update-apollon-version-2.2.0' into feature/petri-nets-and-syntax-trees", "committedDate": "2020-10-09T19:03:29Z", "type": "commit"}, {"oid": "76b29da98454e858842f063b2e6c3cb48308ef93", "url": "https://github.com/ls1intum/Artemis/commit/76b29da98454e858842f063b2e6c3cb48308ef93", "message": "Merge branch 'develop' into feature/update-apollon-version-2.2.0", "committedDate": "2020-10-13T09:27:30Z", "type": "commit"}, {"oid": "d4892b3d0e818372c20ca04b3b6cb678fd97bd4b", "url": "https://github.com/ls1intum/Artemis/commit/d4892b3d0e818372c20ca04b3b6cb678fd97bd4b", "message": "update apollon version", "committedDate": "2020-10-13T09:28:24Z", "type": "commit"}, {"oid": "af1b08411a0d627c8f7a2abeb23ef7d4a3ea0c5d", "url": "https://github.com/ls1intum/Artemis/commit/af1b08411a0d627c8f7a2abeb23ef7d4a3ea0c5d", "message": "Merge branch 'develop' into feature/update-apollon-version-2.2.0", "committedDate": "2020-10-13T09:29:36Z", "type": "commit"}, {"oid": "77feb0389ae83ed795cd90063f76500190a9e914", "url": "https://github.com/ls1intum/Artemis/commit/77feb0389ae83ed795cd90063f76500190a9e914", "message": "Merge branch 'develop' into feature/petri-nets-and-syntax-trees", "committedDate": "2020-10-13T09:56:55Z", "type": "commit"}, {"oid": "152f657c54360c3de601b888267b05cb88882bf2", "url": "https://github.com/ls1intum/Artemis/commit/152f657c54360c3de601b888267b05cb88882bf2", "message": "Merge branch 'feature/update-apollon-version-2.2.0' into feature/petri-nets-and-syntax-trees", "committedDate": "2020-10-13T11:56:36Z", "type": "commit"}, {"oid": "5f69e5b5d57eee2df8e04235321d01e1750bfaa1", "url": "https://github.com/ls1intum/Artemis/commit/5f69e5b5d57eee2df8e04235321d01e1750bfaa1", "message": "Move JSON from text blocks to .json files (see #2122)", "committedDate": "2020-10-13T12:19:35Z", "type": "commit"}, {"oid": "45159c59e73e69361e65ff109f14e6a9d75d261f", "url": "https://github.com/ls1intum/Artemis/commit/45159c59e73e69361e65ff109f14e6a9d75d261f", "message": "Merge branch 'develop' into feature/update-apollon-version-2.2.0", "committedDate": "2020-10-13T13:55:41Z", "type": "commit"}, {"oid": "6dbe2f028e08b5d28595244d2b1f0e87c055eab1", "url": "https://github.com/ls1intum/Artemis/commit/6dbe2f028e08b5d28595244d2b1f0e87c055eab1", "message": "update apollon version to 2.2.4", "committedDate": "2020-10-13T13:56:17Z", "type": "commit"}, {"oid": "9c0fca9fd5c77f469dbcb382056470d37afc7301", "url": "https://github.com/ls1intum/Artemis/commit/9c0fca9fd5c77f469dbcb382056470d37afc7301", "message": "Merge remote-tracking branch 'origin/feature/update-apollon-version-2.2.0' into feature/update-apollon-version-2.2.0", "committedDate": "2020-10-13T13:56:31Z", "type": "commit"}, {"oid": "bee3f365cd7057c0abeb7ecc1000da02f46aefce", "url": "https://github.com/ls1intum/Artemis/commit/bee3f365cd7057c0abeb7ecc1000da02f46aefce", "message": "update apollon version to 2.2.5", "committedDate": "2020-10-13T14:02:46Z", "type": "commit"}, {"oid": "2dcedaf8c22a43f66660f0c90a2d0500ba5c063a", "url": "https://github.com/ls1intum/Artemis/commit/2dcedaf8c22a43f66660f0c90a2d0500ba5c063a", "message": "Merge branch 'feature/update-apollon-version-2.2.0' into feature/petri-nets-and-syntax-trees", "committedDate": "2020-10-13T14:48:30Z", "type": "commit"}, {"oid": "d7151ae601d4843613532eb5dcdc748c73e62400", "url": "https://github.com/ls1intum/Artemis/commit/d7151ae601d4843613532eb5dcdc748c73e62400", "message": "Merge branch 'develop' into feature/petri-nets-and-syntax-trees", "committedDate": "2020-10-13T15:19:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MTAwOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504081009", "bodyText": "weird name for petri net arc", "author": "TobiasPr", "createdAt": "2020-10-13T16:13:44Z", "path": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java", "diffHunk": "@@ -813,6 +814,161 @@ private static UMLControlFlow parseControlFlow(JsonObject controlFlowJson, Map<S\n         }\n     }\n \n+    /**\n+     * Create a petri net from the model and relationship elements given as JSON arrays. It parses the JSON objects to corresponding Java objects and creates a\n+     * petri net containing these UML model elements.\n+     *\n+     * @param modelElements the model elements as JSON array\n+     * @param relationships the relationship elements as JSON array\n+     * @param modelSubmissionId the ID of the corresponding modeling submission\n+     * @return a petri net containing the parsed model elements and relationships\n+     * @throws IOException when no corresponding model elements could be found for the source and target IDs in the relationship JSON objects\n+     */\n+    private static PetriNet buildPetriNetFromJSON(JsonArray modelElements, JsonArray relationships, long modelSubmissionId) throws IOException {\n+        List<PetriNetArc> arcs = new ArrayList<>();\n+        Map<String, PetriNetPlace> places = new HashMap<>();\n+        Map<String, PetriNetTransition> transitions = new HashMap<>();\n+        Map<String, UMLElement> allElementsMap = new HashMap<>();\n+\n+        // loop over all JSON elements and create the UML objects\n+        for (JsonElement jsonElement : modelElements) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            String elementType = jsonObject.get(ELEMENT_TYPE).getAsString();\n+            // elementType is never null\n+            switch (elementType) {\n+                case PetriNetPlace.PETRI_NET_PLACE_TYPE -> {\n+                    PetriNetPlace place = parsePetriNetPlace(jsonObject);\n+                    places.put(place.getJSONElementID(), place);\n+                    allElementsMap.put(place.getJSONElementID(), place);\n+                }\n+                case PetriNetTransition.PETRI_NET_TRANSITION_TYPE -> {\n+                    PetriNetTransition transition = parsePetriNetTransition(jsonObject);\n+                    transitions.put(transition.getJSONElementID(), transition);\n+                    allElementsMap.put(transition.getJSONElementID(), transition);\n+                }\n+                default -> {\n+                    // ignore unknown elements\n+                }\n+            }\n+        }\n+\n+        // loop over all JSON control flow elements and create syntax tree links\n+        for (JsonElement rel : relationships) {\n+            Optional<PetriNetArc> useCaseAssociation = parsePetriNetArc(rel.getAsJsonObject(), allElementsMap);", "originalCommit": "d7151ae601d4843613532eb5dcdc748c73e62400", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08f288d64f10bd2d55c6881d6c76b4ce105a1fb2", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java\nindex 96bed3303..806b3d660 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java\n\n@@ -854,8 +854,8 @@ public class UMLModelParser {\n \n         // loop over all JSON control flow elements and create syntax tree links\n         for (JsonElement rel : relationships) {\n-            Optional<PetriNetArc> useCaseAssociation = parsePetriNetArc(rel.getAsJsonObject(), allElementsMap);\n-            useCaseAssociation.ifPresent(arcs::add);\n+            Optional<PetriNetArc> petriNetArc = parsePetriNetArc(rel.getAsJsonObject(), allElementsMap);\n+            petriNetArc.ifPresent(arcs::add);\n         }\n \n         return new PetriNet(modelSubmissionId, List.copyOf(places.values()), List.copyOf(transitions.values()), arcs);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4Mjc2Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504082762", "bodyText": "same here, shouldn't useCaseAssociation be something like syntacTreeLink?", "author": "TobiasPr", "createdAt": "2020-10-13T16:16:15Z", "path": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java", "diffHunk": "@@ -813,6 +814,161 @@ private static UMLControlFlow parseControlFlow(JsonObject controlFlowJson, Map<S\n         }\n     }\n \n+    /**\n+     * Create a petri net from the model and relationship elements given as JSON arrays. It parses the JSON objects to corresponding Java objects and creates a\n+     * petri net containing these UML model elements.\n+     *\n+     * @param modelElements the model elements as JSON array\n+     * @param relationships the relationship elements as JSON array\n+     * @param modelSubmissionId the ID of the corresponding modeling submission\n+     * @return a petri net containing the parsed model elements and relationships\n+     * @throws IOException when no corresponding model elements could be found for the source and target IDs in the relationship JSON objects\n+     */\n+    private static PetriNet buildPetriNetFromJSON(JsonArray modelElements, JsonArray relationships, long modelSubmissionId) throws IOException {\n+        List<PetriNetArc> arcs = new ArrayList<>();\n+        Map<String, PetriNetPlace> places = new HashMap<>();\n+        Map<String, PetriNetTransition> transitions = new HashMap<>();\n+        Map<String, UMLElement> allElementsMap = new HashMap<>();\n+\n+        // loop over all JSON elements and create the UML objects\n+        for (JsonElement jsonElement : modelElements) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            String elementType = jsonObject.get(ELEMENT_TYPE).getAsString();\n+            // elementType is never null\n+            switch (elementType) {\n+                case PetriNetPlace.PETRI_NET_PLACE_TYPE -> {\n+                    PetriNetPlace place = parsePetriNetPlace(jsonObject);\n+                    places.put(place.getJSONElementID(), place);\n+                    allElementsMap.put(place.getJSONElementID(), place);\n+                }\n+                case PetriNetTransition.PETRI_NET_TRANSITION_TYPE -> {\n+                    PetriNetTransition transition = parsePetriNetTransition(jsonObject);\n+                    transitions.put(transition.getJSONElementID(), transition);\n+                    allElementsMap.put(transition.getJSONElementID(), transition);\n+                }\n+                default -> {\n+                    // ignore unknown elements\n+                }\n+            }\n+        }\n+\n+        // loop over all JSON control flow elements and create syntax tree links\n+        for (JsonElement rel : relationships) {\n+            Optional<PetriNetArc> useCaseAssociation = parsePetriNetArc(rel.getAsJsonObject(), allElementsMap);\n+            useCaseAssociation.ifPresent(arcs::add);\n+        }\n+\n+        return new PetriNet(modelSubmissionId, List.copyOf(places.values()), List.copyOf(transitions.values()), arcs);\n+    }\n+\n+    private static PetriNetPlace parsePetriNetPlace(JsonObject componentJson) {\n+        String name = componentJson.get(ELEMENT_NAME).getAsString();\n+        String amountOfTokens = componentJson.get(\"amountOfTokens\").getAsString();\n+        String capacity = componentJson.get(\"capacity\").getAsString();\n+        return new PetriNetPlace(name, amountOfTokens, capacity, componentJson.get(ELEMENT_ID).getAsString());\n+    }\n+\n+    private static PetriNetTransition parsePetriNetTransition(JsonObject componentJson) {\n+        String name = componentJson.get(ELEMENT_NAME).getAsString();\n+        return new PetriNetTransition(name, componentJson.get(ELEMENT_ID).getAsString());\n+    }\n+\n+    /**\n+     * Parses the given JSON representation of a UML relationship to a PetriNetArc Java object.\n+     *\n+     * @param relationshipJson the JSON object containing the relationship\n+     * @param objectMap a map containing all objects of the corresponding syntax tree, necessary for assigning source and target element of the relationships\n+     * @return the PetriNetArc object parsed from the JSON object\n+     * @throws IOException when no class could be found in the classMap for the source and target ID in the JSON object\n+     */\n+    private static Optional<PetriNetArc> parsePetriNetArc(JsonObject relationshipJson, Map<String, UMLElement> allSyntaxTreeElements) throws IOException {\n+        String multiplicity = relationshipJson.get(ELEMENT_NAME).getAsString();\n+        UMLElement source = findElement(relationshipJson, allSyntaxTreeElements, RELATIONSHIP_SOURCE);\n+        UMLElement target = findElement(relationshipJson, allSyntaxTreeElements, RELATIONSHIP_TARGET);\n+\n+        if (source == null || target == null) {\n+            throw new IOException(\"Relationship source or target not part of model!\");\n+        }\n+        PetriNetArc newSPetriNetArc = new PetriNetArc(multiplicity, source, target, relationshipJson.get(ELEMENT_ID).getAsString());\n+        return Optional.of(newSPetriNetArc);\n+    }\n+\n+    /**\n+     * Create a syntax tree from the model and relationship elements given as JSON arrays. It parses the JSON objects to corresponding Java objects and creates a\n+     * syntax tree containing these UML model elements.\n+     *\n+     * @param modelElements the model elements as JSON array\n+     * @param relationships the relationship elements as JSON array\n+     * @param modelSubmissionId the ID of the corresponding modeling submission\n+     * @return a syntax tree containing the parsed model elements and relationships\n+     * @throws IOException when no corresponding model elements could be found for the source and target IDs in the relationship JSON objects\n+     */\n+    private static SyntaxTree buildSyntaxTreeFromJSON(JsonArray modelElements, JsonArray relationships, long modelSubmissionId) throws IOException {\n+        List<SyntaxTreeLink> syntaxTreeLinkList = new ArrayList<>();\n+        Map<String, SyntaxTreeTerminal> terminalMap = new HashMap<>();\n+        Map<String, SyntaxTreeNonterminal> nonterminalMap = new HashMap<>();\n+        Map<String, UMLElement> allElementsMap = new HashMap<>();\n+\n+        // loop over all JSON elements and create the UML objects\n+        for (JsonElement jsonElement : modelElements) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            String elementType = jsonObject.get(ELEMENT_TYPE).getAsString();\n+            // elementType is never null\n+            switch (elementType) {\n+                case SyntaxTreeTerminal.SYNTAX_TREE_TERMINAL_TYPE -> {\n+                    SyntaxTreeTerminal terminal = parseTerminal(jsonObject);\n+                    terminalMap.put(terminal.getJSONElementID(), terminal);\n+                    allElementsMap.put(terminal.getJSONElementID(), terminal);\n+                }\n+                case SyntaxTreeNonterminal.SYNTAX_TREE_NONTERMINAL_TYPE -> {\n+                    SyntaxTreeNonterminal nonterminal = parseNonterminal(jsonObject);\n+                    nonterminalMap.put(nonterminal.getJSONElementID(), nonterminal);\n+                    allElementsMap.put(nonterminal.getJSONElementID(), nonterminal);\n+                }\n+                default -> {\n+                    // ignore unknown elements\n+                }\n+            }\n+        }\n+\n+        // loop over all JSON control flow elements and create syntax tree links\n+        for (JsonElement rel : relationships) {\n+            Optional<SyntaxTreeLink> useCaseAssociation = parseSyntaxTreeLink(rel.getAsJsonObject(), allElementsMap);", "originalCommit": "d7151ae601d4843613532eb5dcdc748c73e62400", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08f288d64f10bd2d55c6881d6c76b4ce105a1fb2", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java\nindex 96bed3303..806b3d660 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java\n\n@@ -854,8 +854,8 @@ public class UMLModelParser {\n \n         // loop over all JSON control flow elements and create syntax tree links\n         for (JsonElement rel : relationships) {\n-            Optional<PetriNetArc> useCaseAssociation = parsePetriNetArc(rel.getAsJsonObject(), allElementsMap);\n-            useCaseAssociation.ifPresent(arcs::add);\n+            Optional<PetriNetArc> petriNetArc = parsePetriNetArc(rel.getAsJsonObject(), allElementsMap);\n+            petriNetArc.ifPresent(arcs::add);\n         }\n \n         return new PetriNet(modelSubmissionId, List.copyOf(places.values()), List.copyOf(transitions.values()), arcs);\n"}}, {"oid": "08f288d64f10bd2d55c6881d6c76b4ce105a1fb2", "url": "https://github.com/ls1intum/Artemis/commit/08f288d64f10bd2d55c6881d6c76b4ce105a1fb2", "message": "Fix local variable names in UMLModelParser", "committedDate": "2020-10-13T17:40:10Z", "type": "commit"}, {"oid": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd", "url": "https://github.com/ls1intum/Artemis/commit/3f5511ae3724d95eed56a9f29cd8b106ee0b30dd", "message": "Merge branch 'develop' into feature/petri-nets-and-syntax-trees", "committedDate": "2020-10-13T18:36:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3NzcyNw==", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177727", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'similarityPetriNet_differentModels' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-13T18:40:59Z", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/petrinet/PetriNetTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.petrinet;\n+\n+import static com.google.gson.JsonParser.parseString;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_1A;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_1B;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_2;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.InstanceOfAssertFactories.type;\n+\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import de.tum.in.www1.artemis.service.compass.controller.UMLModelParser;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.AbstractUMLDiagramTest;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n+\n+public class PetriNetTest extends AbstractUMLDiagramTest {\n+\n+    @Test\n+    void similarityPetriNet_equalModels() {\n+        compareSubmissions(modelingSubmission(PETRI_NET_MODEL_1A), modelingSubmission(PETRI_NET_MODEL_1A), 0.8, 1.0);\n+        compareSubmissions(modelingSubmission(PETRI_NET_MODEL_2), modelingSubmission(PETRI_NET_MODEL_2), 0.8, 1.0);\n+\n+        compareSubmissions(modelingSubmission(PETRI_NET_MODEL_1A), modelingSubmission(PETRI_NET_MODEL_1B), 0.8, 0.9375);\n+    }\n+\n+    @Test\n+    void similarityPetriNet_differentModels() {", "originalCommit": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc0Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177743", "bodyText": "Codacy found an issue: The utility class name 'SyntaxTrees' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'", "author": "artemis-bot", "createdAt": "2020-10-13T18:41:01Z", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/syntaxtree/SyntaxTrees.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+class SyntaxTrees {", "originalCommit": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc1OA==", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177758", "bodyText": "Codacy found an issue: The utility class name 'PetriNets' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'", "author": "artemis-bot", "createdAt": "2020-10-13T18:41:03Z", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/petrinet/PetriNets.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.petrinet;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+class PetriNets {", "originalCommit": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177765", "bodyText": "Codacy found an issue: Switch statements should have a default label", "author": "artemis-bot", "createdAt": "2020-10-13T18:41:04Z", "path": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java", "diffHunk": "@@ -813,6 +814,161 @@ private static UMLControlFlow parseControlFlow(JsonObject controlFlowJson, Map<S\n         }\n     }\n \n+    /**\n+     * Create a petri net from the model and relationship elements given as JSON arrays. It parses the JSON objects to corresponding Java objects and creates a\n+     * petri net containing these UML model elements.\n+     *\n+     * @param modelElements the model elements as JSON array\n+     * @param relationships the relationship elements as JSON array\n+     * @param modelSubmissionId the ID of the corresponding modeling submission\n+     * @return a petri net containing the parsed model elements and relationships\n+     * @throws IOException when no corresponding model elements could be found for the source and target IDs in the relationship JSON objects\n+     */\n+    private static PetriNet buildPetriNetFromJSON(JsonArray modelElements, JsonArray relationships, long modelSubmissionId) throws IOException {\n+        List<PetriNetArc> arcs = new ArrayList<>();\n+        Map<String, PetriNetPlace> places = new HashMap<>();\n+        Map<String, PetriNetTransition> transitions = new HashMap<>();\n+        Map<String, UMLElement> allElementsMap = new HashMap<>();\n+\n+        // loop over all JSON elements and create the UML objects\n+        for (JsonElement jsonElement : modelElements) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            String elementType = jsonObject.get(ELEMENT_TYPE).getAsString();\n+            // elementType is never null\n+            switch (elementType) {", "originalCommit": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc3MA==", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177770", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'similaritySyntaxTree_differentModels' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-13T18:41:05Z", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/syntaxtree/SyntaxTreeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree;\n+\n+import static com.google.gson.JsonParser.parseString;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_1A;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_1B;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_2;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.InstanceOfAssertFactories.type;\n+\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import de.tum.in.www1.artemis.service.compass.controller.UMLModelParser;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.AbstractUMLDiagramTest;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n+\n+public class SyntaxTreeTest extends AbstractUMLDiagramTest {\n+\n+    @Test\n+    void similaritySyntaxTree_equalModels() {\n+        compareSubmissions(modelingSubmission(SYNTAX_TREE_MODEL_1A), modelingSubmission(SYNTAX_TREE_MODEL_1A), 0.8, 1.0);\n+        compareSubmissions(modelingSubmission(SYNTAX_TREE_MODEL_2), modelingSubmission(SYNTAX_TREE_MODEL_2), 0.8, 1.0);\n+\n+        compareSubmissions(modelingSubmission(SYNTAX_TREE_MODEL_1A), modelingSubmission(SYNTAX_TREE_MODEL_1B), 0.8, 1.0);\n+    }\n+\n+    @Test\n+    void similaritySyntaxTree_differentModels() {", "originalCommit": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc4Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177783", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'similaritySyntaxTree_equalModels' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-13T18:41:06Z", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/syntaxtree/SyntaxTreeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree;\n+\n+import static com.google.gson.JsonParser.parseString;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_1A;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_1B;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_2;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.InstanceOfAssertFactories.type;\n+\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import de.tum.in.www1.artemis.service.compass.controller.UMLModelParser;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.AbstractUMLDiagramTest;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n+\n+public class SyntaxTreeTest extends AbstractUMLDiagramTest {\n+\n+    @Test\n+    void similaritySyntaxTree_equalModels() {", "originalCommit": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc5MA==", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177790", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'similarityPetriNet_equalModels' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-13T18:41:08Z", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/petrinet/PetriNetTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.petrinet;\n+\n+import static com.google.gson.JsonParser.parseString;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_1A;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_1B;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_2;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.InstanceOfAssertFactories.type;\n+\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import de.tum.in.www1.artemis.service.compass.controller.UMLModelParser;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.AbstractUMLDiagramTest;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n+\n+public class PetriNetTest extends AbstractUMLDiagramTest {\n+\n+    @Test\n+    void similarityPetriNet_equalModels() {", "originalCommit": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}