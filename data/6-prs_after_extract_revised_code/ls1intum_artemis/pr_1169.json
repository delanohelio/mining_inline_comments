{"pr_number": 1169, "pr_title": "Extract Spring Beans for Programming Exercise Connectors", "pr_createdAt": "2020-01-05T18:50:57Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1169", "timeline": [{"oid": "880dd4a35379c5394ed7bae47fce9fd83f1375c0", "url": "https://github.com/ls1intum/Artemis/commit/880dd4a35379c5394ed7bae47fce9fd83f1375c0", "message": "Add separate beans for Bamboo and Bitbucket RestTemplates", "committedDate": "2020-01-05T18:35:25Z", "type": "commit"}, {"oid": "7124ac63da0a821cba6f46279b40dd3ed133d5f5", "url": "https://github.com/ls1intum/Artemis/commit/7124ac63da0a821cba6f46279b40dd3ed133d5f5", "message": "Add Bamboo and Bitbucket server configurations", "committedDate": "2020-01-05T18:36:59Z", "type": "commit"}, {"oid": "8babf1360ff7dbc20110dfe3e4831f34c6316294", "url": "https://github.com/ls1intum/Artemis/commit/8babf1360ff7dbc20110dfe3e4831f34c6316294", "message": "Inject new beans into BambooBuildPlanService", "committedDate": "2020-01-05T18:39:19Z", "type": "commit"}, {"oid": "7e7d10d258e1db2c3a26780ff68509b352bc4e50", "url": "https://github.com/ls1intum/Artemis/commit/7e7d10d258e1db2c3a26780ff68509b352bc4e50", "message": "Inject new beans into BambooService", "committedDate": "2020-01-05T18:40:42Z", "type": "commit"}, {"oid": "41929aaabd25813e0e7c145452f1ba95772386c4", "url": "https://github.com/ls1intum/Artemis/commit/41929aaabd25813e0e7c145452f1ba95772386c4", "message": "Split up BitbucketBambooUpdateService and BambooBuildPlanUpdateProvider", "committedDate": "2020-01-05T18:43:46Z", "type": "commit"}, {"oid": "8436a41bd9cc2f4bfbc07bbf41d6a295265876e1", "url": "https://github.com/ls1intum/Artemis/commit/8436a41bd9cc2f4bfbc07bbf41d6a295265876e1", "message": "Add Bamboo DTOs", "committedDate": "2020-01-05T18:44:58Z", "type": "commit"}, {"oid": "0a7c6a32f22cc576bb85b6cd67ed1535d908797e", "url": "https://github.com/ls1intum/Artemis/commit/0a7c6a32f22cc576bb85b6cd67ed1535d908797e", "message": "Add Bitbucket DTOs", "committedDate": "2020-01-05T18:46:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExMjU3OA==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363112578", "bodyText": "The null check was always true", "author": "ungaralex", "createdAt": "2020-01-05T19:36:51Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketService.java", "diffHunk": "@@ -622,7 +610,7 @@ private void grantGroupPermissionToProject(String projectKey, String groupName,\n \n         Map<Integer, String> webHooks = new HashMap<>();\n \n-        if (response != null && response.getStatusCode().equals(HttpStatus.OK)) {\n+        if (response.getStatusCode().equals(HttpStatus.OK)) {", "originalCommit": "0a7c6a32f22cc576bb85b6cd67ed1535d908797e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExMjczNA==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363112734", "bodyText": "Was not working if we used other URLs in our tests, that don't have the Bitbucket format (which is sometimes the case because we don't only write specific Bitbucket tests, but some also just want to validate the generic VCS service functionality)", "author": "ungaralex", "createdAt": "2020-01-05T19:39:37Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketService.java", "diffHunk": "@@ -296,11 +281,9 @@ private String getProjectKeyFromUrl(URL repositoryUrl) throws BitbucketException\n     public String getRepositorySlugFromUrl(URL repositoryUrl) throws BitbucketException {\n         // https://ga42xab@repobruegge.in.tum.de/scm/EIST2016RME/RMEXERCISE-ga42xab.git\n         String[] urlParts = repositoryUrl.getFile().split(\"/\");\n-        if (urlParts.length > 3) {\n-            String repositorySlug = urlParts[3];\n-            if (repositorySlug.endsWith(\".git\")) {\n-                repositorySlug = repositorySlug.substring(0, repositorySlug.length() - 4);\n-            }\n+        if (urlParts[urlParts.length - 1].endsWith(\".git\")) {", "originalCommit": "0a7c6a32f22cc576bb85b6cd67ed1535d908797e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "829eda1162239686b493b2db1b47fe75c5191541", "url": "https://github.com/ls1intum/Artemis/commit/829eda1162239686b493b2db1b47fe75c5191541", "message": "Add JavaDoc", "committedDate": "2020-01-05T19:43:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNTk5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363125995", "bodyText": "do we really have this case that the bitbucket profile is not active?\nAlso I guess sometimes we still need the simple bamboo client, right?", "author": "krusche", "createdAt": "2020-01-05T23:44:42Z", "path": "src/main/java/de/tum/in/www1/artemis/config/connector/BambooServerConfiguration.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package de.tum.in.www1.artemis.config.connector;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URL;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.Base;\n+import com.appfire.common.cli.Settings;\n+import com.atlassian.bamboo.specs.util.BambooServer;\n+import com.atlassian.bamboo.specs.util.SimpleUserPasswordCredentials;\n+import com.atlassian.bamboo.specs.util.UserPasswordCredentials;\n+\n+@Configuration\n+@Profile(\"bamboo\")\n+public class BambooServerConfiguration {\n+\n+    @Value(\"${artemis.continuous-integration.user}\")\n+    private String BAMBOO_USER;\n+\n+    @Value(\"${artemis.continuous-integration.password}\")\n+    private String BAMBOO_PASSWORD;\n+\n+    @Value(\"${artemis.continuous-integration.url}\")\n+    private URL BAMBOO_SERVER_URL;\n+\n+    @Value(\"${artemis.version-control.user}\")\n+    private String BITBUCKET_USER;\n+\n+    @Value(\"${artemis.version-control.password}\")\n+    private String BITBUCKET_PASSWORD;\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL BITBUCKET_SERVER;\n+\n+    @Bean\n+    public BambooServer bambooServer() {\n+        UserPasswordCredentials userPasswordCredentials = new SimpleUserPasswordCredentials(BAMBOO_USER, BAMBOO_PASSWORD);\n+        return new BambooServer(BAMBOO_SERVER_URL.toString(), userPasswordCredentials);\n+    }\n+\n+    /**\n+     * Creates a Bamboo client for communication with the Bamboo instance over the non-REST API. This beans is also connected to the Bitbucket server\n+     * if the bitbucket profile is activated (incl. authentication).\n+     *\n+     * @return BambooClient instance for the Bamboo server that is defined in the environment yml files.\n+     */\n+    @Bean\n+    @Profile(\"bitbucket\")\n+    public BambooClient bambooClient() {\n+        final var bambooClient = new BambooClient(createBase());\n+        // setup the Bamboo Client to use the correct username and password\n+        final var args = new String[] { \"-s\", BAMBOO_SERVER_URL.toString(), \"--user\", BAMBOO_USER, \"--password\", BAMBOO_PASSWORD, \"--targetServer\", BITBUCKET_SERVER.toString(),\n+                \"--targetUser\", BITBUCKET_USER, \"--targetPassword\", BITBUCKET_PASSWORD };\n+\n+        bambooClient.doWork(args); // only invoke this to set server address, username and password so that the following action will work\n+        return bambooClient;\n+    }\n+\n+    /**\n+     * Creates a Bamboo client for communication with the Bamboo instance over the non-REST API. This bean has NO connection\n+     * to the Bitbucket server and only gets instantiated if the Bitbucket profile is not active\n+     *\n+     * @return\n+     */\n+    @Bean(\"bambooClient\")\n+    @Profile(\"!bitbucket\")", "originalCommit": "829eda1162239686b493b2db1b47fe75c5191541", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY3OTczOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363679739", "bodyText": "remove", "author": "krusche", "createdAt": "2020-01-07T10:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNTk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcyMzEyNg==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363723126", "bodyText": "Removed this bean", "author": "ungaralex", "createdAt": "2020-01-07T12:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5389b008cbadc64954b41aa9e38ff57fc1da85f3", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/connector/BambooServerConfiguration.java b/src/main/java/de/tum/in/www1/artemis/config/connector/BambooServerConfiguration.java\nindex 12b09fdace..19a35e87ed 100644\n--- a/src/main/java/de/tum/in/www1/artemis/config/connector/BambooServerConfiguration.java\n+++ b/src/main/java/de/tum/in/www1/artemis/config/connector/BambooServerConfiguration.java\n\n@@ -62,23 +62,6 @@ public class BambooServerConfiguration {\n         return bambooClient;\n     }\n \n-    /**\n-     * Creates a Bamboo client for communication with the Bamboo instance over the non-REST API. This bean has NO connection\n-     * to the Bitbucket server and only gets instantiated if the Bitbucket profile is not active\n-     *\n-     * @return\n-     */\n-    @Bean(\"bambooClient\")\n-    @Profile(\"!bitbucket\")\n-    public BambooClient bambooClientWithoutBitbucket() {\n-        final var bambooClient = new BambooClient(createBase());\n-        // setup the Bamboo Client to use the correct username and password\n-        final var args = new String[] { \"-s\", BAMBOO_SERVER_URL.toString(), \"--user\", BAMBOO_USER, \"--password\", BAMBOO_PASSWORD };\n-\n-        bambooClient.doWork(args); // only invoke this to set server address, username and password so that the following action will work\n-        return bambooClient;\n-    }\n-\n     private Base createBase() {\n         // we override the out stream to prevent unnecessary log statements in our log files\n         final var outputStream = new ByteArrayOutputStream();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNjA4OA==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363126088", "bodyText": "should this not be written like?\n@Profile({ \"bamboo\", \"bitbucket\" })", "author": "krusche", "createdAt": "2020-01-05T23:46:38Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.bitbucket.cli.BitbucketClient;\n+import com.appfire.common.cli.CliClient;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.exception.BambooException;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+\n+@Service\n+@Profile(\"bamboo & bitbucket\")", "originalCommit": "829eda1162239686b493b2db1b47fe75c5191541", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY4MDA5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363680092", "bodyText": "add comment", "author": "krusche", "createdAt": "2020-01-07T10:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNjA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcyMzA1Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363723056", "bodyText": "Added a comment", "author": "ungaralex", "createdAt": "2020-01-07T12:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNjA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "3a69d5444de1b483d34b8ae149f5e24150fa1030", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java b/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\nindex 3d6d8ecf3f..83a6640185 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n\n@@ -23,6 +23,8 @@ import de.tum.in.www1.artemis.exception.BambooException;\n import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n \n @Service\n+// Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n+// this if any profile is active (OR). We want both (AND)\n @Profile(\"bamboo & bitbucket\")\n public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n \n"}}, {"oid": "5389b008cbadc64954b41aa9e38ff57fc1da85f3", "url": "https://github.com/ls1intum/Artemis/commit/5389b008cbadc64954b41aa9e38ff57fc1da85f3", "message": "Remove Bamboo client without Bitbucket bean", "committedDate": "2020-01-07T12:17:19Z", "type": "commit"}, {"oid": "3a69d5444de1b483d34b8ae149f5e24150fa1030", "url": "https://github.com/ls1intum/Artemis/commit/3a69d5444de1b483d34b8ae149f5e24150fa1030", "message": "Add comment to BitbucketBambooUpdateService profile configuration", "committedDate": "2020-01-07T12:19:21Z", "type": "commit"}, {"oid": "22116d8ccd00e25c403320ae6b4d86f323be1f77", "url": "https://github.com/ls1intum/Artemis/commit/22116d8ccd00e25c403320ae6b4d86f323be1f77", "message": "Remove unused bitbucket client bean in BitbucketBambooUpdateService", "committedDate": "2020-01-07T12:20:25Z", "type": "commit"}, {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925", "url": "https://github.com/ls1intum/Artemis/commit/ea73700f3f0e069dac3d39a4a51371a2ee899925", "message": "Merge branch 'develop' into feature/programming-exercise/connector-beans", "committedDate": "2020-01-07T12:21:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc1ODYyNA==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363758624", "bodyText": "Should this not be in the configuration file?", "author": "maxr96", "createdAt": "2020-01-07T13:57:37Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.CliClient;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.exception.BambooException;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+\n+@Service\n+// Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n+// this if any profile is active (OR). We want both (AND)\n+@Profile(\"bamboo & bitbucket\")\n+public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL BITBUCKET_SERVER;\n+\n+    private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n+\n+    private final BambooClient bambooClient;\n+\n+    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+\n+    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n+        this.bambooClient = bambooClient;\n+        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    }\n+\n+    @Override\n+    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> triggeredBy) {\n+        try {\n+            log.debug(\"Update plan repository for build plan \" + planKey);\n+            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n+            // Workaround for old exercises which used a different repositoryName\n+            if (bambooRemoteRepository == null) {\n+                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(\"Assignment\", planKey, false);\n+                if (bambooRemoteRepository == null) {\n+                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n+                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n+                }\n+            }\n+\n+            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+\n+            // Overwrite triggers if needed, incl workaround for different repo names\n+            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(\"Assignment\")) {\n+                triggeredBy = Optional.of(triggeredBy.get().stream().map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, \"Assignment\")).collect(Collectors.toList()));\n+            }\n+            triggeredBy.ifPresent(repoTriggers -> overwriteTriggers(planKey, bambooClient, repoTriggers));\n+\n+            log.info(\"Update plan repository for build plan \" + planKey + \" was successful\");\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException e) {\n+            throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey + \" to the student repository : \" + e.getMessage(),\n+                    e);\n+        }\n+    }\n+\n+    private void overwriteTriggers(final String planKey, final BambooClient bambooClient, final List<String> triggeredBy) {\n+        try {\n+            final var triggersString = bambooClient.getTriggerHelper().getTriggerList(planKey, null, null, 99, Pattern.compile(\".*\"));\n+            // Bamboo CLI returns a weird String, which is the reason for this way of parsing it\n+            final var oldTriggers = Arrays.stream(triggersString.split(\"\\n\")).map(trigger -> trigger.replace(\"\\\"\", \"\").split(\",\"))\n+                    .filter(trigger -> trigger.length > 2 && NumberUtils.isCreatable(trigger[1])).map(trigger -> Long.parseLong(trigger[1])).collect(Collectors.toSet());\n+\n+            // Remove all old triggers\n+            for (final var triggerId : oldTriggers) {\n+                bambooClient.getTriggerHelper().removeTrigger(planKey, null, null, triggerId, null, false);\n+            }\n+\n+            // Add new triggers\n+            for (final var repo : triggeredBy) {\n+                bambooClient.getTriggerHelper().addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false);\n+            }\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException e) {\n+            throw new BambooException(\"Unable to overwrite triggers for \" + planKey + \"\\n\" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public void triggerUpdate(String buildPlanId, boolean initialBuild) {\n+        // NOT NEEDED\n+    }\n+\n+    /**\n+     * e.g. \"ssh://git@repobruegge.in.tum.de:7999/madm/helloworld.git\"\n+     * @param project the bitbucket project name\n+     * @param slug the bitbucket repo name\n+     * @return the ssh repository url\n+     */\n+    private String buildSshRepositoryUrl(String project, String slug) {\n+        final int sshPort = 7999;", "originalCommit": "ea73700f3f0e069dac3d39a4a51371a2ee899925", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9c17c89b9f9e89d0a2c7e969d61ca2a748858c", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java b/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\nindex 7bf627d973..7739bf1e13 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n\n@@ -30,6 +30,8 @@ public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdate\n     @Value(\"${artemis.version-control.url}\")\n     private URL BITBUCKET_SERVER;\n \n+    private static final String OLD_ASSIGNMENT_REPO_NAME = \"Assignment\";\n+\n     private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n \n     private final BambooClient bambooClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MjEyMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363762121", "bodyText": "Could the string be replaced by an enum or at least a local variable to not repeat \"Assignment\"?", "author": "madwau", "createdAt": "2020-01-07T14:05:11Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.CliClient;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.exception.BambooException;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+\n+@Service\n+// Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n+// this if any profile is active (OR). We want both (AND)\n+@Profile(\"bamboo & bitbucket\")\n+public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL BITBUCKET_SERVER;\n+\n+    private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n+\n+    private final BambooClient bambooClient;\n+\n+    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+\n+    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n+        this.bambooClient = bambooClient;\n+        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    }\n+\n+    @Override\n+    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> triggeredBy) {\n+        try {\n+            log.debug(\"Update plan repository for build plan \" + planKey);\n+            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n+            // Workaround for old exercises which used a different repositoryName\n+            if (bambooRemoteRepository == null) {\n+                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(\"Assignment\", planKey, false);\n+                if (bambooRemoteRepository == null) {\n+                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n+                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n+                }\n+            }\n+\n+            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+\n+            // Overwrite triggers if needed, incl workaround for different repo names\n+            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(\"Assignment\")) {", "originalCommit": "ea73700f3f0e069dac3d39a4a51371a2ee899925", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMzc4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363803787", "bodyText": "I refactored this into a constant.", "author": "ungaralex", "createdAt": "2020-01-07T15:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MjEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9c17c89b9f9e89d0a2c7e969d61ca2a748858c", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java b/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\nindex 7bf627d973..7739bf1e13 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n\n@@ -30,6 +30,8 @@ public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdate\n     @Value(\"${artemis.version-control.url}\")\n     private URL BITBUCKET_SERVER;\n \n+    private static final String OLD_ASSIGNMENT_REPO_NAME = \"Assignment\";\n+\n     private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n \n     private final BambooClient bambooClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MzAwOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363763009", "bodyText": "Can the magic number be avoided?", "author": "madwau", "createdAt": "2020-01-07T14:07:18Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.CliClient;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.exception.BambooException;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+\n+@Service\n+// Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n+// this if any profile is active (OR). We want both (AND)\n+@Profile(\"bamboo & bitbucket\")\n+public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL BITBUCKET_SERVER;\n+\n+    private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n+\n+    private final BambooClient bambooClient;\n+\n+    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+\n+    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n+        this.bambooClient = bambooClient;\n+        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    }\n+\n+    @Override\n+    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> triggeredBy) {\n+        try {\n+            log.debug(\"Update plan repository for build plan \" + planKey);\n+            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n+            // Workaround for old exercises which used a different repositoryName\n+            if (bambooRemoteRepository == null) {\n+                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(\"Assignment\", planKey, false);\n+                if (bambooRemoteRepository == null) {\n+                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n+                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n+                }\n+            }\n+\n+            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+\n+            // Overwrite triggers if needed, incl workaround for different repo names\n+            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(\"Assignment\")) {\n+                triggeredBy = Optional.of(triggeredBy.get().stream().map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, \"Assignment\")).collect(Collectors.toList()));\n+            }\n+            triggeredBy.ifPresent(repoTriggers -> overwriteTriggers(planKey, bambooClient, repoTriggers));\n+\n+            log.info(\"Update plan repository for build plan \" + planKey + \" was successful\");\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException e) {\n+            throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey + \" to the student repository : \" + e.getMessage(),\n+                    e);\n+        }\n+    }\n+\n+    private void overwriteTriggers(final String planKey, final BambooClient bambooClient, final List<String> triggeredBy) {\n+        try {\n+            final var triggersString = bambooClient.getTriggerHelper().getTriggerList(planKey, null, null, 99, Pattern.compile(\".*\"));", "originalCommit": "ea73700f3f0e069dac3d39a4a51371a2ee899925", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMzQ4OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363803489", "bodyText": "See my other comment", "author": "ungaralex", "createdAt": "2020-01-07T15:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MzAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9c17c89b9f9e89d0a2c7e969d61ca2a748858c", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java b/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\nindex 7bf627d973..7739bf1e13 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n\n@@ -30,6 +30,8 @@ public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdate\n     @Value(\"${artemis.version-control.url}\")\n     private URL BITBUCKET_SERVER;\n \n+    private static final String OLD_ASSIGNMENT_REPO_NAME = \"Assignment\";\n+\n     private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n \n     private final BambooClient bambooClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MzMxNg==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363763316", "bodyText": "Why not needed?", "author": "madwau", "createdAt": "2020-01-07T14:08:03Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.CliClient;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.exception.BambooException;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+\n+@Service\n+// Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n+// this if any profile is active (OR). We want both (AND)\n+@Profile(\"bamboo & bitbucket\")\n+public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL BITBUCKET_SERVER;\n+\n+    private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n+\n+    private final BambooClient bambooClient;\n+\n+    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+\n+    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n+        this.bambooClient = bambooClient;\n+        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    }\n+\n+    @Override\n+    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> triggeredBy) {\n+        try {\n+            log.debug(\"Update plan repository for build plan \" + planKey);\n+            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n+            // Workaround for old exercises which used a different repositoryName\n+            if (bambooRemoteRepository == null) {\n+                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(\"Assignment\", planKey, false);\n+                if (bambooRemoteRepository == null) {\n+                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n+                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n+                }\n+            }\n+\n+            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+\n+            // Overwrite triggers if needed, incl workaround for different repo names\n+            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(\"Assignment\")) {\n+                triggeredBy = Optional.of(triggeredBy.get().stream().map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, \"Assignment\")).collect(Collectors.toList()));\n+            }\n+            triggeredBy.ifPresent(repoTriggers -> overwriteTriggers(planKey, bambooClient, repoTriggers));\n+\n+            log.info(\"Update plan repository for build plan \" + planKey + \" was successful\");\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException e) {\n+            throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey + \" to the student repository : \" + e.getMessage(),\n+                    e);\n+        }\n+    }\n+\n+    private void overwriteTriggers(final String planKey, final BambooClient bambooClient, final List<String> triggeredBy) {\n+        try {\n+            final var triggersString = bambooClient.getTriggerHelper().getTriggerList(planKey, null, null, 99, Pattern.compile(\".*\"));\n+            // Bamboo CLI returns a weird String, which is the reason for this way of parsing it\n+            final var oldTriggers = Arrays.stream(triggersString.split(\"\\n\")).map(trigger -> trigger.replace(\"\\\"\", \"\").split(\",\"))\n+                    .filter(trigger -> trigger.length > 2 && NumberUtils.isCreatable(trigger[1])).map(trigger -> Long.parseLong(trigger[1])).collect(Collectors.toSet());\n+\n+            // Remove all old triggers\n+            for (final var triggerId : oldTriggers) {\n+                bambooClient.getTriggerHelper().removeTrigger(planKey, null, null, triggerId, null, false);\n+            }\n+\n+            // Add new triggers\n+            for (final var repo : triggeredBy) {\n+                bambooClient.getTriggerHelper().addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false);\n+            }\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException e) {\n+            throw new BambooException(\"Unable to overwrite triggers for \" + planKey + \"\\n\" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public void triggerUpdate(String buildPlanId, boolean initialBuild) {\n+        // NOT NEEDED", "originalCommit": "ea73700f3f0e069dac3d39a4a51371a2ee899925", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMjAxOA==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363802018", "bodyText": "I didn't write this code and I also don't really get why this is here \ud83d\ude04 . The JavaDoc also doesn't really match the by the method name implied usage. I would suggest to maybe remove this in a future PR", "author": "ungaralex", "createdAt": "2020-01-07T15:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MzMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4ODA3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363888072", "bodyText": "I guess this is outdated. The corresponding method triggerUpdate in ContinuousIntegrationUpdateService is not used. I guess the trigger build was implemented differently. Please remove it.", "author": "krusche", "createdAt": "2020-01-07T18:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MzMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MTEwOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r364151109", "bodyText": "I just removed the outdated code", "author": "krusche", "createdAt": "2020-01-08T10:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MzMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "3f9c17c89b9f9e89d0a2c7e969d61ca2a748858c", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java b/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\nindex 7bf627d973..7739bf1e13 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n\n@@ -30,6 +30,8 @@ public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdate\n     @Value(\"${artemis.version-control.url}\")\n     private URL BITBUCKET_SERVER;\n \n+    private static final String OLD_ASSIGNMENT_REPO_NAME = \"Assignment\";\n+\n     private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n \n     private final BambooClient bambooClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2NDk0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363764941", "bodyText": "Could you add a link to the source?", "author": "madwau", "createdAt": "2020-01-07T14:11:49Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooBuildPlanUpdateProvider.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package de.tum.in.www1.artemis.service.connectors.bamboo;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.json.simple.JSONObject;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.CliClient;\n+import com.appfire.common.cli.CliUtils;\n+import com.appfire.common.cli.JsonUtils;\n+import com.appfire.common.cli.objects.RemoteApplicationLink;\n+import com.appfire.common.cli.requesthelpers.DefaultRequestHelper;\n+\n+@Component\n+@Profile(\"bamboo\")\n+public class BambooBuildPlanUpdateProvider {\n+\n+    private final BambooClient bambooClient;\n+\n+    public BambooBuildPlanUpdateProvider(BambooClient bambooClient) {\n+        this.bambooClient = bambooClient;\n+    }\n+\n+    public void updateRepository(@Nonnull com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository, String bitbucketRepositoryName, String bitbucketProjectKey,\n+            String completePlanName) throws CliClient.ClientException, CliClient.RemoteRestException {\n+\n+        Map<String, String> parameters = new HashMap<>();\n+        parameters.put(\"planKey\", completePlanName);\n+\n+        bambooClient.getRepositoryHelper().addRepositoryDetails(bambooRemoteRepository);\n+\n+        parameters.put(\"selectedRepository\", \"com.atlassian.bamboo.plugins.stash.atlassian-bamboo-plugin-stash:stash-rep\");\n+        // IMPORTANT: Don't change the name of the repo! We depend on the naming (assignment, tests) in some other parts of the application\n+        parameters.put(\"repositoryName\", bambooRemoteRepository.getName());\n+        parameters.put(\"repositoryId\", Long.toString(bambooRemoteRepository.getId()));\n+        parameters.put(\"confirm\", \"true\");\n+        parameters.put(\"save\", \"Save repository\");\n+        parameters.put(\"bamboo.successReturnMode\", \"json\");\n+        parameters.put(\"repository.stash.branch\", \"master\");\n+\n+        com.appfire.bitbucket.cli.objects.RemoteRepository bitbucketRepository;\n+        try {\n+            bitbucketRepository = bambooClient.getBitbucketClient().getRepositoryHelper().getRemoteRepository(bitbucketProjectKey, bitbucketRepositoryName, true);\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException ex) {\n+            throw new CliClient.ClientException(\"Bitbucket failed trying to get repository details: \" + ex.getMessage());\n+        }\n+\n+        RemoteApplicationLink link = bambooClient.getBitbucketClient().getApplicationLink();\n+        if (link == null) {\n+            link = bambooClient.getApplicationLinksRequestHelper().getApplicationLink(bambooClient.getString(\"targetServer\"), \"stash\", true);\n+        }\n+\n+        if (link != null) {\n+            parameters.put(\"repository.stash.server\", link.getId());\n+        }\n+\n+        parameters.put(\"repository.stash.repositoryId\", bitbucketRepository.getIdString());\n+        parameters.put(\"repository.stash.repositorySlug\", bitbucketRepository.getSlug());\n+        parameters.put(\"repository.stash.projectKey\", bitbucketRepository.getProject());\n+        parameters.put(\"repository.stash.repositoryUrl\", bitbucketRepository.getCloneSshUrl());\n+\n+        String responseData = \"\";\n+\n+        try {\n+\n+            DefaultRequestHelper helper = bambooClient.getPseudoRequestHelper();\n+            helper.setRequestType(DefaultRequestHelper.RequestType.POST);\n+            helper.setContentType(DefaultRequestHelper.RequestContentType.JSON);\n+            helper.setParameters(parameters);\n+            helper.makeRequest(\"/chain/admin/config/updateRepository.action\");\n+            responseData = helper.getResponseData();\n+\n+        }\n+        catch (CliClient.RemoteInternalServerErrorException ex) {\n+            String message = \"Request failed on the server with response code 500. Make sure all required fields have been provided using the various field and value parameters. \"\n+                    + \"The server log may provide insight into missing fields: \" + ex.getMessage();\n+            throw new CliClient.ClientException(message);\n+        }\n+\n+        JSONObject json = bambooClient.getJsonWithVerboseLogging(responseData);\n+        JSONObject repositoryJson = JsonUtils.getJsonOrNull(JsonUtils.getStringOrNull(json, \"repositoryResult\"));\n+        if (repositoryJson == null) {\n+            String error = checkForError(responseData);\n+            throw new CliClient.ClientException(error.equals(\"\") ? \"Unknown error occurred.\" : error);\n+        }\n+    }\n+\n+    /**\n+     * This method was taken from RepositoryHelper of the Bamboo CLI Plugin", "originalCommit": "ea73700f3f0e069dac3d39a4a51371a2ee899925", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMzE3OA==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363803178", "bodyText": "I added an @see link in the JavaDoc", "author": "ungaralex", "createdAt": "2020-01-07T15:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2NDk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a6d98fddfbae63b4a430c4e08cd512e50b31ac5a", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooBuildPlanUpdateProvider.java b/src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooBuildPlanUpdateProvider.java\nindex 2aa3d67260..a3e8870f32 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooBuildPlanUpdateProvider.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooBuildPlanUpdateProvider.java\n\n@@ -97,6 +97,7 @@ public class BambooBuildPlanUpdateProvider {\n      * This method was taken from RepositoryHelper of the Bamboo CLI Plugin\n      * @param data the response from the server\n      * @return an error message\n+     * @see com.appfire.bamboo.cli.helpers.RepositoryHelper\n      */\n     private String checkForError(String data) {\n         String message = CliUtils.matchRegex(data, \"(?s)<div[^>]*class=\\\"aui-message error\\\">\\\\s+<p>([^<]*)<\").trim();\n"}}, {"oid": "3f9c17c89b9f9e89d0a2c7e969d61ca2a748858c", "url": "https://github.com/ls1intum/Artemis/commit/3f9c17c89b9f9e89d0a2c7e969d61ca2a748858c", "message": "Use constant for old assignment repo name", "committedDate": "2020-01-07T15:23:38Z", "type": "commit"}, {"oid": "a6d98fddfbae63b4a430c4e08cd512e50b31ac5a", "url": "https://github.com/ls1intum/Artemis/commit/a6d98fddfbae63b4a430c4e08cd512e50b31ac5a", "message": "Link RepositoryHelper in BambooBuildPlanUpdateProvider JavaDoc", "committedDate": "2020-01-07T15:27:54Z", "type": "commit"}, {"oid": "7d3c01192072489db48db3ef43e38a64366fa6e6", "url": "https://github.com/ls1intum/Artemis/commit/7d3c01192072489db48db3ef43e38a64366fa6e6", "message": "remove outdated code", "committedDate": "2020-01-08T10:04:15Z", "type": "commit"}, {"oid": "5ecca1f2ffdc1362aac99bdcd1f4f5c2529d2cbc", "url": "https://github.com/ls1intum/Artemis/commit/5ecca1f2ffdc1362aac99bdcd1f4f5c2529d2cbc", "message": "Merge branch 'develop' into feature/programming-exercise/connector-beans", "committedDate": "2020-01-08T10:04:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NDk1Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r364174957", "bodyText": "At the moment, it seems that we don't really need this class.", "author": "krusche", "createdAt": "2020-01-08T10:59:32Z", "path": "src/main/java/de/tum/in/www1/artemis/config/connector/BitbucketServerConfiguration.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package de.tum.in.www1.artemis.config.connector;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URL;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+\n+import com.appfire.bitbucket.cli.BitbucketClient;\n+import com.appfire.common.cli.Base;\n+import com.appfire.common.cli.Settings;\n+\n+@Configuration\n+@Profile(\"bitbucket\")\n+public class BitbucketServerConfiguration {", "originalCommit": "5ecca1f2ffdc1362aac99bdcd1f4f5c2529d2cbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84068a45c0d6ee52403d9c82b83fc62ec9a25453", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/connector/BitbucketServerConfiguration.java b/src/main/java/de/tum/in/www1/artemis/config/connector/BitbucketServerConfiguration.java\ndeleted file mode 100644\nindex 0fc3d2a21f..0000000000\n--- a/src/main/java/de/tum/in/www1/artemis/config/connector/BitbucketServerConfiguration.java\n+++ /dev/null\n\n@@ -1,55 +0,0 @@\n-package de.tum.in.www1.artemis.config.connector;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.net.URL;\n-\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Profile;\n-\n-import com.appfire.bitbucket.cli.BitbucketClient;\n-import com.appfire.common.cli.Base;\n-import com.appfire.common.cli.Settings;\n-\n-@Configuration\n-@Profile(\"bitbucket\")\n-public class BitbucketServerConfiguration {\n-\n-    @Value(\"${artemis.version-control.user}\")\n-    private String BITBUCKET_USER;\n-\n-    @Value(\"${artemis.version-control.password}\")\n-    private String BITBUCKET_PASSWORD;\n-\n-    @Value(\"${artemis.version-control.url}\")\n-    private URL BITBUCKET_SERVER;\n-\n-    /**\n-     * Creates the client the Bitbucket services use when communicating with the non-REST Bitbucket API.\n-     *\n-     * @return A Bitbucketclient bean that is already authenticated\n-     */\n-    @Bean\n-    public BitbucketClient bitbucketClient() {\n-        final var bitbucketClient = new BitbucketClient(createBase());\n-        // setup the Bamboo Client to use the correct username and password\n-\n-        final var args = new String[] { \"-s\", BITBUCKET_SERVER.toString(), \"--user\", BITBUCKET_USER, \"--password\", BITBUCKET_PASSWORD, };\n-        bitbucketClient.doWork(args);   // only invoke this to set server address, username and password so that the following action will work\n-        return bitbucketClient;\n-    }\n-\n-    private Base createBase() {\n-        // we override the out stream to prevent unnecessary log statements in our log files\n-        final var outContent = new ByteArrayOutputStream();\n-        final var out = new PrintStream(outContent);\n-        final var settings = new Settings();\n-        settings.setOut(out);\n-        settings.setOverrideOut(out);\n-        settings.setDebugOut(out);\n-        settings.setErr(out);\n-        return new Base(settings);\n-    }\n-}\n"}}, {"oid": "84068a45c0d6ee52403d9c82b83fc62ec9a25453", "url": "https://github.com/ls1intum/Artemis/commit/84068a45c0d6ee52403d9c82b83fc62ec9a25453", "message": "delete unused configuration file", "committedDate": "2020-01-08T11:17:11Z", "type": "commit"}]}