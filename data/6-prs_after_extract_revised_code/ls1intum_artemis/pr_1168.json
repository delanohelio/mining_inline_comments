{"pr_number": 1168, "pr_title": "Feature/programming exercise/mock connector requests for tests", "pr_createdAt": "2020-01-05T18:26:56Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1168", "timeline": [{"oid": "6199f720decadf8a6628e2f0c75d2f5be275085c", "url": "https://github.com/ls1intum/Artemis/commit/6199f720decadf8a6628e2f0c75d2f5be275085c", "message": "Mock setup programming exercise check project requests", "committedDate": "2020-01-02T16:21:24Z", "type": "commit"}, {"oid": "c0a12ce2aee11bac32da05f5261e6c4ab8ba4b53", "url": "https://github.com/ls1intum/Artemis/commit/c0a12ce2aee11bac32da05f5261e6c4ab8ba4b53", "message": "Mock create project for exercise rest calls", "committedDate": "2020-01-02T17:09:23Z", "type": "commit"}, {"oid": "91b74e50b2771872acf2db03b974c7bbeaa551cf", "url": "https://github.com/ls1intum/Artemis/commit/91b74e50b2771872acf2db03b974c7bbeaa551cf", "message": "Mock programming exercise setup file and git services", "committedDate": "2020-01-02T17:55:15Z", "type": "commit"}, {"oid": "7ec6829011955b82b7a7a9570498ea7f28c87f45", "url": "https://github.com/ls1intum/Artemis/commit/7ec6829011955b82b7a7a9570498ea7f28c87f45", "message": "Inject BambooServer into BambooBuildPlanService", "committedDate": "2020-01-02T18:58:15Z", "type": "commit"}, {"oid": "716a7b44c316fecd1278cf2b3100ca68926a6c69", "url": "https://github.com/ls1intum/Artemis/commit/716a7b44c316fecd1278cf2b3100ca68926a6c69", "message": "Mock addWebHooks requests in setup programming exercise tests", "committedDate": "2020-01-02T18:59:16Z", "type": "commit"}, {"oid": "ce1066a58e748183f86c617ce45941bfbc78d729", "url": "https://github.com/ls1intum/Artemis/commit/ce1066a58e748183f86c617ce45941bfbc78d729", "message": "Refactor BitbucketSearchDTO", "committedDate": "2020-01-02T19:00:33Z", "type": "commit"}, {"oid": "7436abe13f063b61a899e53aa5f0bfddb3f9b96f", "url": "https://github.com/ls1intum/Artemis/commit/7436abe13f063b61a899e53aa5f0bfddb3f9b96f", "message": "Mock Bamboo permission requests for programming exercise setup tests", "committedDate": "2020-01-02T19:01:03Z", "type": "commit"}, {"oid": "53427ccd4f843f5e1f328c9e5e4c2896d56da72c", "url": "https://github.com/ls1intum/Artemis/commit/53427ccd4f843f5e1f328c9e5e4c2896d56da72c", "message": "Refactor ProgrammingExerciseResource endpoints to constants class", "committedDate": "2020-01-02T23:26:10Z", "type": "commit"}, {"oid": "33ee81f5c41c8b881357f558666d9a257159af38", "url": "https://github.com/ls1intum/Artemis/commit/33ee81f5c41c8b881357f558666d9a257159af38", "message": "Reset mocks in ProgrammingExerciseBitbucketBambooIntegrationTest on tearDown", "committedDate": "2020-01-02T23:38:32Z", "type": "commit"}, {"oid": "41d47c8daf51f1f1dcde16ffc750d9e84a7869fa", "url": "https://github.com/ls1intum/Artemis/commit/41d47c8daf51f1f1dcde16ffc750d9e84a7869fa", "message": "Reset database after test", "committedDate": "2020-01-03T14:32:33Z", "type": "commit"}, {"oid": "de8473fd0e93c9f2db4994e12ff3a4de08e93280", "url": "https://github.com/ls1intum/Artemis/commit/de8473fd0e93c9f2db4994e12ff3a4de08e93280", "message": "Mock Bitbucket calls for start programming exercise", "committedDate": "2020-01-03T16:43:12Z", "type": "commit"}, {"oid": "58d6020af4315872745b0fdf1f9326f5d9864ec9", "url": "https://github.com/ls1intum/Artemis/commit/58d6020af4315872745b0fdf1f9326f5d9864ec9", "message": "Mock Bamboo copy repository\n\nAlso refactor BambooUpdateService", "committedDate": "2020-01-03T18:17:53Z", "type": "commit"}, {"oid": "d8729db6ba883426a25d2d6b5ef57949d6778434", "url": "https://github.com/ls1intum/Artemis/commit/d8729db6ba883426a25d2d6b5ef57949d6778434", "message": "Mock BitbucketBambooUpdateService for start exercise test", "committedDate": "2020-01-03T19:04:47Z", "type": "commit"}, {"oid": "a30e14aa714a5b775399038e1fec7fa053e0a926", "url": "https://github.com/ls1intum/Artemis/commit/a30e14aa714a5b775399038e1fec7fa053e0a926", "message": "Wrap up programming exercise start participation connector integration tests", "committedDate": "2020-01-03T19:51:44Z", "type": "commit"}, {"oid": "ca84a803d45f0a03493d60ede217f2010a97dbb6", "url": "https://github.com/ls1intum/Artemis/commit/ca84a803d45f0a03493d60ede217f2010a97dbb6", "message": "Fix programming exercise integration tests\n\nRemove hardcoded constants\nProperly mock git service calls and responses where necessary\nCorrectly fill generated test participations", "committedDate": "2020-01-03T21:33:13Z", "type": "commit"}, {"oid": "5297caea16ef7c5782d9a5a52cf4b1e8b802f61e", "url": "https://github.com/ls1intum/Artemis/commit/5297caea16ef7c5782d9a5a52cf4b1e8b802f61e", "message": "Increase delay before checking scheduled tasks in ProgrammingExerciseScheduleServiceTest", "committedDate": "2020-01-03T21:56:12Z", "type": "commit"}, {"oid": "1c56d1048070bd9e80f2e3bf578d64bafc0e8275", "url": "https://github.com/ls1intum/Artemis/commit/1c56d1048070bd9e80f2e3bf578d64bafc0e8275", "message": "Remove MockitoVerfication since Verifiable is sufficient", "committedDate": "2020-01-03T22:09:20Z", "type": "commit"}, {"oid": "ac017588d12dedad4b6c1c690e0302a407989b92", "url": "https://github.com/ls1intum/Artemis/commit/ac017588d12dedad4b6c1c690e0302a407989b92", "message": "Move CI_TOKEN and related code from AbstractVersionControlService to GitLabService", "committedDate": "2020-01-04T17:11:11Z", "type": "commit"}, {"oid": "8a28ec77f0c56b61c5d0267cad38201d972e2a99", "url": "https://github.com/ls1intum/Artemis/commit/8a28ec77f0c56b61c5d0267cad38201d972e2a99", "message": "Merge branch 'develop' into feature/programming-exercise/mock-connector-requests-for-tests\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/config/RestTemplateConfiguration.java\n#\tsrc/main/java/de/tum/in/www1/artemis/service/connectors/BambooBuildPlanService.java\n#\tsrc/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java\n#\tsrc/main/java/de/tum/in/www1/artemis/service/connectors/BambooUpdateService.java\n#\tsrc/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketService.java\n#\tsrc/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "committedDate": "2020-01-04T17:33:17Z", "type": "commit"}, {"oid": "7c1dad5f98410c6b032f6d97c434efb906eba7d4", "url": "https://github.com/ls1intum/Artemis/commit/7c1dad5f98410c6b032f6d97c434efb906eba7d4", "message": "Fix merge errors", "committedDate": "2020-01-04T17:56:21Z", "type": "commit"}, {"oid": "cfd0883041e2453aa7895cb4b7bb9ce6d9f47966", "url": "https://github.com/ls1intum/Artemis/commit/cfd0883041e2453aa7895cb4b7bb9ce6d9f47966", "message": "Merge branch 'develop' into feature/programming-exercise/mock-connector-requests-for-tests", "committedDate": "2020-01-05T18:05:29Z", "type": "commit"}, {"oid": "39d67b7c789a83da72722d69c7368183a62f42d0", "url": "https://github.com/ls1intum/Artemis/commit/39d67b7c789a83da72722d69c7368183a62f42d0", "message": "Fix @Value in test after yml refactoring", "committedDate": "2020-01-05T18:33:32Z", "type": "commit"}, {"oid": "6b7ba47a73d0c422cc9cb0c4fbd0d208eadafb70", "url": "https://github.com/ls1intum/Artemis/commit/6b7ba47a73d0c422cc9cb0c4fbd0d208eadafb70", "message": "Merge branch 'develop' into feature/programming-exercise/mock-connector-requests-for-tests\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n#\tsrc/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "committedDate": "2020-01-07T13:04:52Z", "type": "commit"}, {"oid": "e0494fe20b68908a4c2b1e49b8681482187bb482", "url": "https://github.com/ls1intum/Artemis/commit/e0494fe20b68908a4c2b1e49b8681482187bb482", "message": "Fix programming exercise tests after merge of develop", "committedDate": "2020-01-07T13:35:40Z", "type": "commit"}, {"oid": "e7457647dbc9c860578f2c9b440b5bc9d1475885", "url": "https://github.com/ls1intum/Artemis/commit/e7457647dbc9c860578f2c9b440b5bc9d1475885", "message": "Use doReturn instead of when do for spied beans", "committedDate": "2020-01-07T13:49:02Z", "type": "commit"}, {"oid": "aebc09b2e0fe43b767823cb8c05cf4948ca3464f", "url": "https://github.com/ls1intum/Artemis/commit/aebc09b2e0fe43b767823cb8c05cf4948ca3464f", "message": "Merge branch 'develop' into feature/programming-exercise/mock-connector-requests-for-tests", "committedDate": "2020-01-07T14:43:09Z", "type": "commit"}, {"oid": "87ddeb64a4f17cdd919240782dd005749b89e7a4", "url": "https://github.com/ls1intum/Artemis/commit/87ddeb64a4f17cdd919240782dd005749b89e7a4", "message": "Show log output in gradle tests for debugging", "committedDate": "2020-01-07T14:55:09Z", "type": "commit"}, {"oid": "16382e8520845f540a33ca3bd0493411f5e079de", "url": "https://github.com/ls1intum/Artemis/commit/16382e8520845f540a33ca3bd0493411f5e079de", "message": "Mock trigger build requests on instructor trigger test", "committedDate": "2020-01-07T15:12:35Z", "type": "commit"}, {"oid": "c2b7156fa43bd74e81fde5e4a974a0cf73a855bc", "url": "https://github.com/ls1intum/Artemis/commit/c2b7156fa43bd74e81fde5e4a974a0cf73a855bc", "message": "Mock request build for manual trigger build test", "committedDate": "2020-01-07T15:40:51Z", "type": "commit"}, {"oid": "93a77f5f11ea63549b90a55b78fb1d3b8dfbf7fa", "url": "https://github.com/ls1intum/Artemis/commit/93a77f5f11ea63549b90a55b78fb1d3b8dfbf7fa", "message": "Mock more trigger build requests in integration tests", "committedDate": "2020-01-07T15:51:37Z", "type": "commit"}, {"oid": "db667ff6b1a134c520310b7e4f786354cbaa98f5", "url": "https://github.com/ls1intum/Artemis/commit/db667ff6b1a134c520310b7e4f786354cbaa98f5", "message": "Merge branch 'develop' into feature/programming-exercise/mock-connector-requests-for-tests\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java\n#\tsrc/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooBuildPlanUpdateProvider.java", "committedDate": "2020-01-08T12:31:27Z", "type": "commit"}, {"oid": "2fcede33ef39eea2d52f92b1672ad8fb80f4c5d4", "url": "https://github.com/ls1intum/Artemis/commit/2fcede33ef39eea2d52f92b1672ad8fb80f4c5d4", "message": "Revert unnecessary changes", "committedDate": "2020-01-08T12:47:02Z", "type": "commit"}, {"oid": "e83d6d0a77480239488a23d1d2d738dca2c4fc27", "url": "https://github.com/ls1intum/Artemis/commit/e83d6d0a77480239488a23d1d2d738dca2c4fc27", "message": "Revert unnecessary changes to tests", "committedDate": "2020-01-08T12:51:09Z", "type": "commit"}, {"oid": "be7255065b0b9acdce09ea3dd252ef70bd9adbd2", "url": "https://github.com/ls1intum/Artemis/commit/be7255065b0b9acdce09ea3dd252ef70bd9adbd2", "message": "Add JavaDoc", "committedDate": "2020-01-08T13:02:05Z", "type": "commit"}, {"oid": "9be6c85b6d3045708998d61e849e560eda9d4df2", "url": "https://github.com/ls1intum/Artemis/commit/9be6c85b6d3045708998d61e849e560eda9d4df2", "message": "Remove unnecessary injected bean in tests", "committedDate": "2020-01-08T13:05:20Z", "type": "commit"}, {"oid": "d92137d0ee7d458540f237926c5e7ea05e099791", "url": "https://github.com/ls1intum/Artemis/commit/d92137d0ee7d458540f237926c5e7ea05e099791", "message": "Move commit hash object ID to constants", "committedDate": "2020-01-08T13:10:16Z", "type": "commit"}, {"oid": "155dd5ba7d6f435cdbdc2af82c36ac33920b4b88", "url": "https://github.com/ls1intum/Artemis/commit/155dd5ba7d6f435cdbdc2af82c36ac33920b4b88", "message": "Revert scheduler test delays", "committedDate": "2020-01-08T13:14:51Z", "type": "commit"}, {"oid": "2b4578dcb880610cae4576cf7638e0b419391eb5", "url": "https://github.com/ls1intum/Artemis/commit/2b4578dcb880610cae4576cf7638e0b419391eb5", "message": "Fix timing in schedule test", "committedDate": "2020-01-08T13:33:55Z", "type": "commit"}, {"oid": "36270db2fc67f81efd091abeb16f7939767c5c9b", "url": "https://github.com/ls1intum/Artemis/commit/36270db2fc67f81efd091abeb16f7939767c5c9b", "message": "Undo schedule test delay changes", "committedDate": "2020-01-08T13:41:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3Mzg3NA==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364473874", "bodyText": "can we avoid using transactional here? I removed it in a previous commit. I think you can just save the objects into the repositories if needed.", "author": "krusche", "createdAt": "2020-01-08T22:25:15Z", "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -636,6 +662,7 @@ public ModelingSubmission addModelingSubmission(ModelingExercise exercise, Model\n         return submission;\n     }\n \n+    @Transactional  // needed for adding values to persistent hash set (submissions)", "originalCommit": "36270db2fc67f81efd091abeb16f7939767c5c9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java b/src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java\nindex 1a9b40ee51..14475a85b2 100644\n--- a/src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java\n+++ b/src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java\n\n@@ -662,13 +661,11 @@ public class DatabaseUtilService {\n         return submission;\n     }\n \n-    @Transactional  // needed for adding values to persistent hash set (submissions)\n     public ProgrammingSubmission addProgrammingSubmission(ProgrammingExercise exercise, ProgrammingSubmission submission, String login) {\n         StudentParticipation participation = addStudentParticipationForProgrammingExercise(exercise, login);\n-        participation.addSubmissions(submission);\n+        submission.setParticipation(participation);\n         submission.setParticipation(participation);\n         programmingSubmissionRepo.save(submission);\n-        participationRepo.save(participation);\n         return submission;\n     }\n \n"}}, {"oid": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "url": "https://github.com/ls1intum/Artemis/commit/e46c7bdc29d481139edbacd5e16c7256dccf18ac", "message": "Remove transactional from test DBUtilService", "committedDate": "2020-01-09T15:45:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4Njg3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364886876", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public static final String PROGRAMMING_EXERCISE = PROGRAMMING_EXERCISES + \"/{id}\";\n          \n          \n            \n                    public static final String PROGRAMMING_EXERCISE = PROGRAMMING_EXERCISES + \"/{exerciseId}\";", "author": "krusche", "createdAt": "2020-01-09T18:12:49Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -789,10 +791,42 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n      * @param search The pageable search containing the page size, page number and query string\n      * @return The desired page, sorted and matching the given query\n      */\n-    @GetMapping(\"programming-exercises\")\n+    @GetMapping(Endpoints.PROGRAMMING_EXERCISES)\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR, ADMIN')\")\n     public ResponseEntity<SearchResultPageDTO> getAllExercisesOnPage(PageableSearchDTO<String> search) {\n         final var user = userService.getUserWithGroupsAndAuthorities();\n         return ResponseEntity.ok(programmingExerciseService.getAllOnPageWithSize(search, user));\n     }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String PROGRAMMING_EXERCISES = \"/programming-exercises\";\n+\n+        public static final String SETUP = PROGRAMMING_EXERCISES + \"/setup\";\n+\n+        public static final String GET_FOR_COURSE = \"/courses/{courseId}/programming-exercises\";\n+\n+        public static final String IMPORT = PROGRAMMING_EXERCISES + \"/import/{sourceExerciseId}\";\n+\n+        public static final String PROBLEM = \"/programming-exercises-problem\";\n+\n+        public static final String PROGRAMMING_EXERCISE = PROGRAMMING_EXERCISES + \"/{id}\";", "originalCommit": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd5fe97ae841ca01395d0947d11e4097f3f7324", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 3dc0a3e191..42f2097779 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -812,7 +808,7 @@ public class ProgrammingExerciseResource {\n \n         public static final String PROBLEM = \"/programming-exercises-problem\";\n \n-        public static final String PROGRAMMING_EXERCISE = PROGRAMMING_EXERCISES + \"/{id}\";\n+        public static final String PROGRAMMING_EXERCISE = PROGRAMMING_EXERCISES + \"/{exerciseId}\";\n \n         public static final String PROGRAMMING_EXERCISE_WITH_PARTICIPATIONS = PROGRAMMING_EXERCISE + \"/with-participations\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzA0Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364887047", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ResponseEntity<ProgrammingExerciseTestCaseStateDTO> hasAtLeastOneStudentResult(@PathVariable(\"id\") Long exerciseId) {\n          \n          \n            \n                public ResponseEntity<ProgrammingExerciseTestCaseStateDTO> hasAtLeastOneStudentResult(@PathVariable(\"exerciseId\") Long exerciseId) {", "author": "krusche", "createdAt": "2020-01-09T18:13:13Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -764,9 +766,9 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n      * @param exerciseId the id of a ProgrammingExercise\n      * @return the ResponseEntity with status 200 (OK) and ProgrammingExerciseTestCaseStateDTO. Returns 404 (notFound) if the exercise does not exist.\n      */\n-    @GetMapping(value = \"/programming-exercises/{exerciseId}/test-case-state\")\n+    @GetMapping(Endpoints.TEST_CASE_STATE)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<ProgrammingExerciseTestCaseStateDTO> hasAtLeastOneStudentResult(@PathVariable Long exerciseId) {\n+    public ResponseEntity<ProgrammingExerciseTestCaseStateDTO> hasAtLeastOneStudentResult(@PathVariable(\"id\") Long exerciseId) {", "originalCommit": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd5fe97ae841ca01395d0947d11e4097f3f7324", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 3dc0a3e191..42f2097779 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -768,7 +764,7 @@ public class ProgrammingExerciseResource {\n      */\n     @GetMapping(Endpoints.TEST_CASE_STATE)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<ProgrammingExerciseTestCaseStateDTO> hasAtLeastOneStudentResult(@PathVariable(\"id\") Long exerciseId) {\n+    public ResponseEntity<ProgrammingExerciseTestCaseStateDTO> hasAtLeastOneStudentResult(@PathVariable long exerciseId) {\n         Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findById(exerciseId);\n         if (programmingExercise.isEmpty()) {\n             return notFound();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzE1Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364887157", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ResponseEntity<String> generateStructureOracleForExercise(@PathVariable Long id) {\n          \n          \n            \n                public ResponseEntity<String> generateStructureOracleForExercise(@PathVariable Long exerciseId) {", "author": "krusche", "createdAt": "2020-01-09T18:13:30Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -697,7 +699,7 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n      * @param id The ID of the programming exercise for which the structure oracle should get generated\n      * @return The ResponseEntity with status 201 (Created) or with status 400 (Bad Request) if the parameters are invalid\n      */\n-    @GetMapping(value = \"/programming-exercises/{id}/generate-tests\", produces = MediaType.TEXT_PLAIN_VALUE)\n+    @GetMapping(value = Endpoints.GENERATE_TESTS, produces = MediaType.TEXT_PLAIN_VALUE)\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n     @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n     public ResponseEntity<String> generateStructureOracleForExercise(@PathVariable Long id) {", "originalCommit": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd5fe97ae841ca01395d0947d11e4097f3f7324", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 3dc0a3e191..42f2097779 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -694,22 +694,18 @@ public class ProgrammingExerciseResource {\n     }\n \n     /**\n-     * PUT /programming-exercises/{id}/generate-tests : Makes a call to StructureOracleGenerator to generate the structure oracle aka the test.json file\n+     * PUT /programming-exercises/{exerciseId}/generate-tests : Makes a call to StructureOracleGenerator to generate the structure oracle aka the test.json file\n      *\n-     * @param id The ID of the programming exercise for which the structure oracle should get generated\n+     * @param exerciseId The ID of the programming exercise for which the structure oracle should get generated\n      * @return The ResponseEntity with status 201 (Created) or with status 400 (Bad Request) if the parameters are invalid\n      */\n     @GetMapping(value = Endpoints.GENERATE_TESTS, produces = MediaType.TEXT_PLAIN_VALUE)\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n     @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n-    public ResponseEntity<String> generateStructureOracleForExercise(@PathVariable Long id) {\n-        log.debug(\"REST request to generate the structure oracle for ProgrammingExercise with id: {}\", id);\n+    public ResponseEntity<String> generateStructureOracleForExercise(@PathVariable long exerciseId) {\n+        log.debug(\"REST request to generate the structure oracle for ProgrammingExercise with id: {}\", exerciseId);\n \n-        if (id == null) {\n-            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"programmingExerciseNotFound\", \"The programming exercise does not exist\"))\n-                    .body(null);\n-        }\n-        Optional<ProgrammingExercise> programmingExerciseOptional = programmingExerciseRepository.findById(id);\n+        Optional<ProgrammingExercise> programmingExerciseOptional = programmingExerciseRepository.findById(exerciseId);\n         if (programmingExerciseOptional.isEmpty()) {\n             return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"programmingExerciseNotFound\", \"The programming exercise does not exist\"))\n                     .body(null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzI2NA==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364887264", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ResponseEntity<Resource> exportSubmissionsByStudentLogins(@PathVariable(\"id\") Long exerciseId, @PathVariable String studentIds,\n          \n          \n            \n                public ResponseEntity<Resource> exportSubmissionsByStudentLogins(@PathVariable(\"exerciseId\") Long exerciseId, @PathVariable String studentIds,", "author": "krusche", "createdAt": "2020-01-09T18:13:44Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -591,10 +593,10 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n      * @return ResponseEntity with status\n      * @throws IOException if submissions can't be zippedRequestBody\n      */\n-    @PostMapping(value = \"/programming-exercises/{exerciseId}/export-repos-by-student-logins/{studentIds}\")\n+    @PostMapping(Endpoints.EXPORT_SUBMISSIONS_BY_STUDENT)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n-    public ResponseEntity<Resource> exportSubmissionsByStudentLogins(@PathVariable Long exerciseId, @PathVariable String studentIds,\n+    public ResponseEntity<Resource> exportSubmissionsByStudentLogins(@PathVariable(\"id\") Long exerciseId, @PathVariable String studentIds,", "originalCommit": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd5fe97ae841ca01395d0947d11e4097f3f7324", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 3dc0a3e191..42f2097779 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -596,7 +596,7 @@ public class ProgrammingExerciseResource {\n     @PostMapping(Endpoints.EXPORT_SUBMISSIONS_BY_STUDENT)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n-    public ResponseEntity<Resource> exportSubmissionsByStudentLogins(@PathVariable(\"id\") Long exerciseId, @PathVariable String studentIds,\n+    public ResponseEntity<Resource> exportSubmissionsByStudentLogins(@PathVariable long exerciseId, @PathVariable String studentIds,\n             @RequestBody RepositoryExportOptionsDTO repositoryExportOptions) throws IOException {\n         ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n         User user = userService.getUserWithGroupsAndAuthorities();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzMxMw==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364887313", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ResponseEntity<Resource> exportSubmissionsByParticipationIds(@PathVariable(\"id\") Long exerciseId, @PathVariable String participationIds,\n          \n          \n            \n                public ResponseEntity<Resource> exportSubmissionsByParticipationIds(@PathVariable(\"exerciseId\") Long exerciseId, @PathVariable String participationIds,", "author": "krusche", "createdAt": "2020-01-09T18:13:52Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -646,10 +648,10 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n      * @return ResponseEntity with status\n      * @throws IOException if submissions can't be zippedRequestBody\n      */\n-    @PostMapping(value = \"/programming-exercises/{exerciseId}/export-repos-by-participation-ids/{participationIds}\")\n+    @PostMapping(Endpoints.EXPORT_SUBMISSIONS_BY_PARTICIPATIONS)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n-    public ResponseEntity<Resource> exportSubmissionsByParticipationIds(@PathVariable Long exerciseId, @PathVariable String participationIds,\n+    public ResponseEntity<Resource> exportSubmissionsByParticipationIds(@PathVariable(\"id\") Long exerciseId, @PathVariable String participationIds,", "originalCommit": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd5fe97ae841ca01395d0947d11e4097f3f7324", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 3dc0a3e191..42f2097779 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -651,7 +651,7 @@ public class ProgrammingExerciseResource {\n     @PostMapping(Endpoints.EXPORT_SUBMISSIONS_BY_PARTICIPATIONS)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n-    public ResponseEntity<Resource> exportSubmissionsByParticipationIds(@PathVariable(\"id\") Long exerciseId, @PathVariable String participationIds,\n+    public ResponseEntity<Resource> exportSubmissionsByParticipationIds(@PathVariable long exerciseId, @PathVariable String participationIds,\n             @RequestBody RepositoryExportOptionsDTO repositoryExportOptions) throws IOException {\n         ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzM3NA==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364887374", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ResponseEntity<Void> combineTemplateRepositoryCommits(@PathVariable Long id) {\n          \n          \n            \n                public ResponseEntity<Void> combineTemplateRepositoryCommits(@PathVariable Long exerciseId) {", "author": "krusche", "createdAt": "2020-01-09T18:14:02Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -554,7 +556,7 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n      *              403 (Forbidden) if the user is not admin and course instructor or\n      *              500 (Internal Server Error)\n      */\n-    @PutMapping(value = \"/programming-exercises/{id}/combine-template-commits\", produces = MediaType.TEXT_PLAIN_VALUE)\n+    @PutMapping(value = Endpoints.COMBINE_COMMITS, produces = MediaType.TEXT_PLAIN_VALUE)\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n     @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n     public ResponseEntity<Void> combineTemplateRepositoryCommits(@PathVariable Long id) {", "originalCommit": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd5fe97ae841ca01395d0947d11e4097f3f7324", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 3dc0a3e191..42f2097779 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -550,7 +550,7 @@ public class ProgrammingExerciseResource {\n     /**\n      * Combine all commits into one in the template repository of a given exercise.\n      *\n-     * @param id of the exercise\n+     * @param exerciseId of the exercise\n      * @return the ResponseEntity with status\n      *              200 (OK) if combine has been successfully executed\n      *              403 (Forbidden) if the user is not admin and course instructor or\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzU0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364887541", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ResponseEntity<ProgrammingExercise> getProgrammingExerciseWithAllParticipations(@PathVariable Long id) {\n          \n          \n            \n                public ResponseEntity<ProgrammingExercise> getProgrammingExerciseWithAllParticipations(@PathVariable Long exerciseId) {", "author": "krusche", "createdAt": "2020-01-09T18:14:28Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -489,7 +491,7 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n      * @param id the id of the programmingExercise to retrieve\n      * @return the ResponseEntity with status 200 (OK) and with body the programmingExercise, or with status 404 (Not Found)\n      */\n-    @GetMapping(\"/programming-exercises/{id}/with-participations\")\n+    @GetMapping(Endpoints.PROGRAMMING_EXERCISE_WITH_PARTICIPATIONS)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<ProgrammingExercise> getProgrammingExerciseWithAllParticipations(@PathVariable Long id) {", "originalCommit": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd5fe97ae841ca01395d0947d11e4097f3f7324", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 3dc0a3e191..42f2097779 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -486,18 +486,18 @@ public class ProgrammingExerciseResource {\n     }\n \n     /**\n-     * GET /programming-exercises-with-participations/:id : get the \"id\" programmingExercise.\n+     * GET /programming-exercises-with-participations/:exerciseId : get the \"exerciseId\" programmingExercise.\n      *\n-     * @param id the id of the programmingExercise to retrieve\n+     * @param exerciseId the id of the programmingExercise to retrieve\n      * @return the ResponseEntity with status 200 (OK) and with body the programmingExercise, or with status 404 (Not Found)\n      */\n     @GetMapping(Endpoints.PROGRAMMING_EXERCISE_WITH_PARTICIPATIONS)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<ProgrammingExercise> getProgrammingExerciseWithAllParticipations(@PathVariable Long id) {\n-        log.debug(\"REST request to get ProgrammingExercise : {}\", id);\n+    public ResponseEntity<ProgrammingExercise> getProgrammingExerciseWithAllParticipations(@PathVariable long exerciseId) {\n+        log.debug(\"REST request to get ProgrammingExercise : {}\", exerciseId);\n \n         User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<ProgrammingExercise> programmingExerciseOpt = programmingExerciseRepository.findWithTemplateAndSolutionParticipationById(id);\n+        Optional<ProgrammingExercise> programmingExerciseOpt = programmingExerciseRepository.findWithTemplateAndSolutionParticipationById(exerciseId);\n         if (programmingExerciseOpt.isPresent()) {\n             ProgrammingExercise programmingExercise = programmingExerciseOpt.get();\n             Course course = programmingExercise.getCourse();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzYwMg==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364887602", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ResponseEntity<ProgrammingExercise> getProgrammingExercise(@PathVariable Long id) {\n          \n          \n            \n                public ResponseEntity<ProgrammingExercise> getProgrammingExercise(@PathVariable Long exerciseId) {", "author": "krusche", "createdAt": "2020-01-09T18:14:37Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -468,7 +470,7 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n      * @param id the id of the programmingExercise to retrieve\n      * @return the ResponseEntity with status 200 (OK) and with body the programmingExercise, or with status 404 (Not Found)\n      */\n-    @GetMapping(\"/programming-exercises/{id}\")\n+    @GetMapping(Endpoints.PROGRAMMING_EXERCISE)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<ProgrammingExercise> getProgrammingExercise(@PathVariable Long id) {", "originalCommit": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd5fe97ae841ca01395d0947d11e4097f3f7324", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 3dc0a3e191..42f2097779 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -465,16 +465,16 @@ public class ProgrammingExerciseResource {\n     }\n \n     /**\n-     * GET /programming-exercises/:id : get the \"id\" programmingExercise.\n+     * GET /programming-exercises/:exerciseId : get the \"exerciseId\" programmingExercise.\n      *\n-     * @param id the id of the programmingExercise to retrieve\n+     * @param exerciseId the id of the programmingExercise to retrieve\n      * @return the ResponseEntity with status 200 (OK) and with body the programmingExercise, or with status 404 (Not Found)\n      */\n     @GetMapping(Endpoints.PROGRAMMING_EXERCISE)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<ProgrammingExercise> getProgrammingExercise(@PathVariable Long id) {\n-        log.debug(\"REST request to get ProgrammingExercise : {}\", id);\n-        Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findById(id);\n+    public ResponseEntity<ProgrammingExercise> getProgrammingExercise(@PathVariable long exerciseId) {\n+        log.debug(\"REST request to get ProgrammingExercise : {}\", exerciseId);\n+        Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findById(exerciseId);\n         if (programmingExercise.isPresent()) {\n             Course course = programmingExercise.get().getCourse();\n             User user = userService.getUserWithGroupsAndAuthorities();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzkyNA==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364887924", "bodyText": "Ideally we refactor this URL to something like\n/programming-exercises/{exerciseId}/problem-statement", "author": "krusche", "createdAt": "2020-01-09T18:15:19Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -416,7 +418,7 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n      * @param notificationText to notify the student group about the updated problemStatement on the programming exercise\n      * @return the ResponseEntity with status 200 (OK) and with body the updated problemStatement, with status 404 if the programmingExercise could not be found, or with 403 if the user does not have permissions to access the programming exercise.\n      */\n-    @PatchMapping(\"/programming-exercises-problem\")\n+    @PatchMapping(Endpoints.PROBLEM)", "originalCommit": "e46c7bdc29d481139edbacd5e16c7256dccf18ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxNjYyMg==", "url": "https://github.com/ls1intum/Artemis/pull/1168#discussion_r364916622", "bodyText": "I refactored the endpoint and removed the now obsolete DTO ProblemStatementUpdate. I also updated the client and the related server test", "author": "ungaralex", "createdAt": "2020-01-09T19:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "044a211f545770ec358e82a4e883ca255967ca44", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex 3dc0a3e191..cc90e8e2fe 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -414,18 +414,18 @@ public class ProgrammingExerciseResource {\n     /**\n      * PATCH /programming-exercises-problem: Updates the problem statement of the exercise.\n      *\n-     * @param problemStatementUpdate the programmingExercise to update with the new problemStatement\n+     * @param updatedProblemStatement The new problemStatement\n      * @param notificationText to notify the student group about the updated problemStatement on the programming exercise\n      * @return the ResponseEntity with status 200 (OK) and with body the updated problemStatement, with status 404 if the programmingExercise could not be found, or with 403 if the user does not have permissions to access the programming exercise.\n      */\n-    @PatchMapping(Endpoints.PROBLEM)\n+    @PatchMapping(value = Endpoints.PROBLEM)\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<ProgrammingExercise> updateProblemStatement(@RequestBody ProblemStatementUpdate problemStatementUpdate,\n+    public ResponseEntity<ProgrammingExercise> updateProblemStatement(@PathVariable long exerciseId, @RequestBody String updatedProblemStatement,\n             @RequestParam(value = \"notificationText\", required = false) String notificationText) {\n-        log.debug(\"REST request to update ProgrammingExercise with new problem statement: {}\", problemStatementUpdate);\n+        log.debug(\"REST request to update ProgrammingExercise with new problem statement: {}\", updatedProblemStatement);\n         ProgrammingExercise updatedProgrammingExercise;\n         try {\n-            updatedProgrammingExercise = programmingExerciseService.updateProblemStatement(problemStatementUpdate.getExerciseId(), problemStatementUpdate.getProblemStatement());\n+            updatedProgrammingExercise = programmingExerciseService.updateProblemStatement(exerciseId, updatedProblemStatement);\n         }\n         catch (IllegalAccessException ex) {\n             return forbidden();\n"}}, {"oid": "ffd5fe97ae841ca01395d0947d11e4097f3f7324", "url": "https://github.com/ls1intum/Artemis/commit/ffd5fe97ae841ca01395d0947d11e4097f3f7324", "message": "Rename \"id\" param to \"exerciseId\" in ProgrammingExerciseResource", "committedDate": "2020-01-09T18:47:41Z", "type": "commit"}, {"oid": "044a211f545770ec358e82a4e883ca255967ca44", "url": "https://github.com/ls1intum/Artemis/commit/044a211f545770ec358e82a4e883ca255967ca44", "message": "Refactor programming exercise problem statement update API endpoint", "committedDate": "2020-01-09T19:19:08Z", "type": "commit"}, {"oid": "c01a5b3441c68ef3d26e1469af78c283586ee27e", "url": "https://github.com/ls1intum/Artemis/commit/c01a5b3441c68ef3d26e1469af78c283586ee27e", "message": "Add JavaDoc", "committedDate": "2020-01-09T19:21:26Z", "type": "commit"}, {"oid": "a203ec9baa0e200b9a6a5913ec8aae46a8155b79", "url": "https://github.com/ls1intum/Artemis/commit/a203ec9baa0e200b9a6a5913ec8aae46a8155b79", "message": "Fix delay for Github?! actions server API schedule test", "committedDate": "2020-01-09T19:30:52Z", "type": "commit"}]}