{"pr_number": 1206, "pr_title": "Allow instructors to add results for external submissions", "pr_createdAt": "2020-01-23T22:51:25Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1206", "timeline": [{"oid": "8c228460e085d1d72c226812b79f80001e2b9ac1", "url": "https://github.com/ls1intum/Artemis/commit/8c228460e085d1d72c226812b79f80001e2b9ac1", "message": "External submission button and dialog", "committedDate": "2020-01-23T19:21:55Z", "type": "commit"}, {"oid": "90cdca32729fbc6ac4af1d9dc81dcaf28a723945", "url": "https://github.com/ls1intum/Artemis/commit/90cdca32729fbc6ac4af1d9dc81dcaf28a723945", "message": "Add button to other exercise types", "committedDate": "2020-01-23T19:36:58Z", "type": "commit"}, {"oid": "dc9d066a7f92ffd1259d0787fe8eb69a564096b9", "url": "https://github.com/ls1intum/Artemis/commit/dc9d066a7f92ffd1259d0787fe8eb69a564096b9", "message": "Backend logic", "committedDate": "2020-01-23T22:41:19Z", "type": "commit"}, {"oid": "24cc7e8612d11ef1f03e049868482bb2588cf994", "url": "https://github.com/ls1intum/Artemis/commit/24cc7e8612d11ef1f03e049868482bb2588cf994", "message": "Merge branch 'develop' into feature/emailed-participations", "committedDate": "2020-01-23T22:51:42Z", "type": "commit"}, {"oid": "8bbd88e13d3724c66bdeb8fc39a368c42d5e548a", "url": "https://github.com/ls1intum/Artemis/commit/8bbd88e13d3724c66bdeb8fc39a368c42d5e548a", "message": "Add missing import to test", "committedDate": "2020-01-23T22:56:43Z", "type": "commit"}, {"oid": "fcf73796f46cba6981605c30680814c179af7b45", "url": "https://github.com/ls1intum/Artemis/commit/fcf73796f46cba6981605c30680814c179af7b45", "message": "Merge branch 'develop' into feature/emailed-participations", "committedDate": "2020-01-23T22:57:03Z", "type": "commit"}, {"oid": "34fdf4092d83c9030018bdb281bac54ffefdb04d", "url": "https://github.com/ls1intum/Artemis/commit/34fdf4092d83c9030018bdb281bac54ffefdb04d", "message": "Add missing @param tag", "committedDate": "2020-01-23T23:04:18Z", "type": "commit"}, {"oid": "f0314128dea6a27311e6c72dd72d80b2b8a853e7", "url": "https://github.com/ls1intum/Artemis/commit/f0314128dea6a27311e6c72dd72d80b2b8a853e7", "message": "Add missing providers to test", "committedDate": "2020-01-23T23:13:14Z", "type": "commit"}, {"oid": "908a797562920a174bdd08f201cde16810252a21", "url": "https://github.com/ls1intum/Artemis/commit/908a797562920a174bdd08f201cde16810252a21", "message": "Finish up", "committedDate": "2020-01-24T01:07:44Z", "type": "commit"}, {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b", "url": "https://github.com/ls1intum/Artemis/commit/4c39cb4880c5d389739aab28f0badaa4e228c66b", "message": "Set submission date", "committedDate": "2020-01-24T01:30:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1ODczNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370558735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n          \n          \n            \n                        throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in course \" + course.getTitle());", "author": "krusche", "createdAt": "2020-01-24T10:12:44Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);", "originalCommit": "4c39cb4880c5d389739aab28f0badaa4e228c66b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc163f172a566c6787dad780365336026ea046a8", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\nindex 374117dc69..9ceff6a1cf 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\n\n@@ -508,7 +508,7 @@ public class ResultResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n         if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n-            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in course \" + course.getTitle());\n         }\n         if (exercise instanceof QuizExercise) {\n             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1OTE5Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370559193", "bodyText": "please add some comments here", "author": "krusche", "createdAt": "2020-01-24T10:13:36Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);", "originalCommit": "4c39cb4880c5d389739aab28f0badaa4e228c66b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc163f172a566c6787dad780365336026ea046a8", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\nindex 374117dc69..9ceff6a1cf 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\n\n@@ -508,7 +508,7 @@ public class ResultResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n         if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n-            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in course \" + course.getTitle());\n         }\n         if (exercise instanceof QuizExercise) {\n             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1OTk0OA==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370559948", "bodyText": "please add JavaDoc.\nYou might want to rename this method and append IfNotExisting", "author": "krusche", "createdAt": "2020-01-24T10:15:17Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,57 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    public StudentParticipation createParticipationWithEmptySubmission(Exercise exercise, User user, SubmissionType submissionType) {", "originalCommit": "4c39cb4880c5d389739aab28f0badaa4e228c66b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2Nzc3NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370567775", "bodyText": "Will add it and perform the renaming.", "author": "madwau", "createdAt": "2020-01-24T10:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1OTk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "0b6acec9e99164c25a976e43fdbea81723f0a5d6", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java b/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\nindex 6e34fa007e..0b51d46fc2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n\n@@ -237,7 +237,17 @@ public class ParticipationService {\n         return participation;\n     }\n \n-    public StudentParticipation createParticipationWithEmptySubmission(Exercise exercise, User user, SubmissionType submissionType) {\n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n         Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n         StudentParticipation participation;\n         if (optionalStudentParticipation.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MDM2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370560367", "bodyText": "JavaDoc missing", "author": "krusche", "createdAt": "2020-01-24T10:15:59Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)", "originalCommit": "4c39cb4880c5d389739aab28f0badaa4e228c66b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NzYwNA==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370567604", "bodyText": "Will add it.", "author": "madwau", "createdAt": "2020-01-24T10:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MDM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bc163f172a566c6787dad780365336026ea046a8", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\nindex 374117dc69..9ceff6a1cf 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\n\n@@ -508,7 +508,7 @@ public class ResultResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n         if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n-            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in course \" + course.getTitle());\n         }\n         if (exercise instanceof QuizExercise) {\n             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MTM3NA==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370561374", "bodyText": "Can this case really happen that the latest submission is empty?", "author": "krusche", "createdAt": "2020-01-24T10:18:18Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);\n+        result.setParticipation(participation);\n+\n+        participation = (StudentParticipation) participationService.findOneWithEagerSubmissions(participation.getId());\n+        Optional<Submission> optionalSubmission = participation.findLatestSubmission();\n+        if (optionalSubmission.isEmpty()) {", "originalCommit": "4c39cb4880c5d389739aab28f0badaa4e228c66b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NzQxNA==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370567414", "bodyText": "No, it should not happen. If that were the case, an exception should have already been thrown previously. I wasn't sure if just assuming the Optional to exist is bad style but I guess checking if it is empty could also cause confusion for other developers since this is not an expected state.", "author": "madwau", "createdAt": "2020-01-24T10:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "bc163f172a566c6787dad780365336026ea046a8", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\nindex 374117dc69..9ceff6a1cf 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\n\n@@ -508,7 +508,7 @@ public class ResultResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n         if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n-            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in course \" + course.getTitle());\n         }\n         if (exercise instanceof QuizExercise) {\n             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MjQzOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370562439", "bodyText": "this is a good check, however you have already saved some additional data previously into the database, so this check might be too late. Maybe it would be a good idea to analyze the situation in the beginning of this method and only create and save additional objects in the database in case all prerequisites are fulfilled", "author": "krusche", "createdAt": "2020-01-24T10:20:38Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);\n+        result.setParticipation(participation);\n+\n+        participation = (StudentParticipation) participationService.findOneWithEagerSubmissions(participation.getId());\n+        Optional<Submission> optionalSubmission = participation.findLatestSubmission();\n+        if (optionalSubmission.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,\n+                    \"Submission for \" + studentLogin + \" in exercise \" + exerciseId + \" was neither found nor could be created\");\n+        }\n+        result.setSubmission(optionalSubmission.get());\n+        Result existingResult = optionalSubmission.get().getResult();\n+        if (existingResult != null) {", "originalCommit": "4c39cb4880c5d389739aab28f0badaa4e228c66b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NTMwMA==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370565300", "bodyText": "If a result already exists, a submission and participation also already exist, so no additional data should have been saved at that point if I didn't make a mistake since they are both only created if they do not exist yet. But I agree that it's a safer approach to check the prerequisites in the beginning.", "author": "madwau", "createdAt": "2020-01-24T10:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MjQzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMTIyMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371011221", "bodyText": "I moved the check up before any database write operations.", "author": "madwau", "createdAt": "2020-01-26T16:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MjQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "bc163f172a566c6787dad780365336026ea046a8", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\nindex 374117dc69..9ceff6a1cf 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java\n\n@@ -508,7 +508,7 @@ public class ResultResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n         if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n-            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in course \" + course.getTitle());\n         }\n         if (exercise instanceof QuizExercise) {\n             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n"}}, {"oid": "bc163f172a566c6787dad780365336026ea046a8", "url": "https://github.com/ls1intum/Artemis/commit/bc163f172a566c6787dad780365336026ea046a8", "message": "Use course in error message\n\nCo-Authored-By: Stephan Krusche <krusche@in.tum.de>", "committedDate": "2020-01-24T10:33:52Z", "type": "commit"}, {"oid": "e8f0c1a2571bff91fc56ffe76de5b73aee210daa", "url": "https://github.com/ls1intum/Artemis/commit/e8f0c1a2571bff91fc56ffe76de5b73aee210daa", "message": "Merge branch 'develop' into feature/emailed-participations", "committedDate": "2020-01-26T15:12:43Z", "type": "commit"}, {"oid": "0b6acec9e99164c25a976e43fdbea81723f0a5d6", "url": "https://github.com/ls1intum/Artemis/commit/0b6acec9e99164c25a976e43fdbea81723f0a5d6", "message": "Add JavaDoc, move existing result check up in sequence", "committedDate": "2020-01-26T16:16:12Z", "type": "commit"}, {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0", "url": "https://github.com/ls1intum/Artemis/commit/e9305967af3045e2f909c03ddddda91b278a85c0", "message": "throws tag in Doc", "committedDate": "2020-01-26T16:20:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MjQ3OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371042479", "bodyText": "Why do we need to do this in this case? The participation should already be connected to the exercise, if it was present in the DB", "author": "ungaralex", "createdAt": "2020-01-27T01:06:37Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);", "originalCommit": "e9305967af3045e2f909c03ddddda91b278a85c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM5MzEwNg==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371393106", "bodyText": "I'm not sure if it is really needed here or if it is completely redundant. I thought since it's included in startExercise, it might be imprudent to leave it out here since the original author probably had a reason to include it. I removed it for now though in the new method and will test later if this leads to any issues.", "author": "madwau", "createdAt": "2020-01-27T17:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MjQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c9aff92c486cd8206e7efb29ab7d628740f5e821", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java b/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\nindex 0b51d46fc2..2ee490843d 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n\n@@ -258,16 +258,14 @@ public class ParticipationService {\n             else {\n                 participation = new StudentParticipation();\n             }\n-            participation.setInitializationState(FINISHED);\n             participation.setInitializationDate(ZonedDateTime.now());\n             participation.setExercise(exercise);\n             participation.setStudent(user);\n         }\n         else {\n-            // make sure participation and exercise are connected\n             participation = optionalStudentParticipation.get();\n-            participation.setExercise(exercise);\n         }\n+        participation.setInitializationState(FINISHED);\n         participation = save(participation);\n \n         // initialize a programming, modeling, text or file upload submission (depending on the exercise type), it will not do anything in the case of a quiz exercise\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzAzNw==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371043037", "bodyText": "This is pretty much the same code as for startExercise. You could maybe extract some generic participation initialization method here.", "author": "ungaralex", "createdAt": "2020-01-27T01:14:41Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);\n+        }", "originalCommit": "e9305967af3045e2f909c03ddddda91b278a85c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0NjgxOA==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371146818", "bodyText": "not sure if we should change startExercise here. Even if it overlaps, these are 2 different use cases and they should not overlap too much in the code, otherwise future changes in one of the use case might destroy the other one. I guess we can live with some code duplication", "author": "krusche", "createdAt": "2020-01-27T09:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM5NDYxNg==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371394616", "bodyText": "While the code is still pretty similar, it has diverged a bit already from the original. I think there is not that much substance in those lines that we should avoid duplication by all means.", "author": "madwau", "createdAt": "2020-01-27T18:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzAzNw=="}], "type": "inlineReview", "revised_code": {"commit": "c9aff92c486cd8206e7efb29ab7d628740f5e821", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java b/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\nindex 0b51d46fc2..2ee490843d 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n\n@@ -258,16 +258,14 @@ public class ParticipationService {\n             else {\n                 participation = new StudentParticipation();\n             }\n-            participation.setInitializationState(FINISHED);\n             participation.setInitializationDate(ZonedDateTime.now());\n             participation.setExercise(exercise);\n             participation.setStudent(user);\n         }\n         else {\n-            // make sure participation and exercise are connected\n             participation = optionalStudentParticipation.get();\n-            participation.setExercise(exercise);\n         }\n+        participation.setInitializationState(FINISHED);\n         participation = save(participation);\n \n         // initialize a programming, modeling, text or file upload submission (depending on the exercise type), it will not do anything in the case of a quiz exercise\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzgxMA==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371043810", "bodyText": "As far as I could see it, we never have the case that this is false and the exercise is a programming exercise. The method you created in line 324 only gets called if the exercise is not a programing exercise. Besides, because you created an overloaded method here, you hide the fact that the alternative in line 324 does not initialize programming submissions. I would suggest to just remove the overloaded variant. If a developer does not want to initialize a programming submission in this case, he should not call it at all.", "author": "ungaralex", "createdAt": "2020-01-27T01:24:22Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);\n+        }\n+        participation = save(participation);\n+\n+        // initialize a programming, modeling, text or file upload submission (depending on the exercise type), it will not do anything in the case of a quiz exercise\n+        if (optionalStudentParticipation.isEmpty() || !submissionRepository.existsByParticipationId(participation.getId())) {\n+            participation = (StudentParticipation) findOneWithEagerSubmissions(participation.getId());\n+            initializeSubmission(participation, exercise, true, submissionType);\n+            participation = save(participation);\n+        }\n+\n+        return participation;\n+    }\n+\n     /**\n      * Initializes a new text, modeling or file upload submission (depending on the type of the given exercise), connects it with the given participation and stores it in the\n      * database.\n      *\n-     * @param participation the participation for which the submission should be initialized\n-     * @param exercise      the corresponding exercise, should be either a text, modeling or file upload exercise, otherwise it will instantly return and not do anything\n+     * @param participation                 the participation for which the submission should be initialized\n+     * @param exercise                      the corresponding exercise, should be either a text, modeling or file upload exercise, otherwise it will instantly return and not do anything\n+     * @param allowProgrammingExercise      whether to explicitly allow the submission initialization for programming exercises", "originalCommit": "e9305967af3045e2f909c03ddddda91b278a85c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3NTc4Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371375783", "bodyText": "Fair enough. I was a bit hesitant to just change the current behavior of initializeSubmission (since it explicitly does nothing for programming exercises at the moment) and thus went with the overloaded variant but you are right that there are no such usages at the moment, so I'll refactor it as you described. The responsibility will then be on the user of this method, if he passes in a programming exercise, he should indeed not be surprised if it actually initializes a submission for it.", "author": "madwau", "createdAt": "2020-01-27T17:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "c9aff92c486cd8206e7efb29ab7d628740f5e821", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java b/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\nindex 0b51d46fc2..2ee490843d 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n\n@@ -258,16 +258,14 @@ public class ParticipationService {\n             else {\n                 participation = new StudentParticipation();\n             }\n-            participation.setInitializationState(FINISHED);\n             participation.setInitializationDate(ZonedDateTime.now());\n             participation.setExercise(exercise);\n             participation.setStudent(user);\n         }\n         else {\n-            // make sure participation and exercise are connected\n             participation = optionalStudentParticipation.get();\n-            participation.setExercise(exercise);\n         }\n+        participation.setInitializationState(FINISHED);\n         participation = save(participation);\n \n         // initialize a programming, modeling, text or file upload submission (depending on the exercise type), it will not do anything in the case of a quiz exercise\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NDE4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371044181", "bodyText": "You can remove the if-check. This method creates a new submission with type=null anyway.", "author": "ungaralex", "createdAt": "2020-01-27T01:29:04Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -260,11 +308,23 @@ else if (exercise instanceof TextExercise) {\n             submission = new FileUploadSubmission();\n         }\n \n+        if (submissionType != null) {", "originalCommit": "e9305967af3045e2f909c03ddddda91b278a85c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3MDUzOA==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371370538", "bodyText": "You are right. I removed it.", "author": "madwau", "createdAt": "2020-01-27T17:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NDE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c9aff92c486cd8206e7efb29ab7d628740f5e821", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java b/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\nindex 0b51d46fc2..2ee490843d 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n\n@@ -308,9 +306,8 @@ public class ParticipationService {\n             submission = new FileUploadSubmission();\n         }\n \n-        if (submissionType != null) {\n-            submission.setType(submissionType);\n-        }\n+        submission.setType(submissionType);\n+\n         if (submissionType == SubmissionType.EXTERNAL) {\n             submission.setSubmitted(true);\n             submission.setSubmissionDate(ZonedDateTime.now());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NDU3OA==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371044578", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Result createNewManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {\n          \n          \n            \n                public Result createNewRatedManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {", "author": "ungaralex", "createdAt": "2020-01-27T01:33:20Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ResultService.java", "diffHunk": "@@ -313,6 +314,10 @@ public Result createNewManualResult(Result result, boolean isProgrammingExercise\n         return savedResult;\n     }\n \n+    public Result createNewManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {", "originalCommit": "e9305967af3045e2f909c03ddddda91b278a85c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM5NjU1MA==", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371396550", "bodyText": "I renamed the method and updated all occurrences.", "author": "madwau", "createdAt": "2020-01-27T18:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NDU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "2a1c15fd2011ab9aec98a0bfcb827e4aca04e192", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ResultService.java b/src/main/java/de/tum/in/www1/artemis/service/ResultService.java\nindex cf4a7b4fef..54ad56e2b7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ResultService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ResultService.java\n\n@@ -314,7 +314,7 @@ public class ResultService {\n         return savedResult;\n     }\n \n-    public Result createNewManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {\n+    public Result createNewRatedManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {\n         return createNewManualResult(result, isProgrammingExerciseWithFeedback, true);\n     }\n \n"}}, {"oid": "c8f456afef451a9f35109c9a710b39e33dc73c73", "url": "https://github.com/ls1intum/Artemis/commit/c8f456afef451a9f35109c9a710b39e33dc73c73", "message": "Merge branch 'develop' into feature/emailed-participations", "committedDate": "2020-01-27T15:28:26Z", "type": "commit"}, {"oid": "5322ca9d67df2bd1a2709cd69526a7e240577f7d", "url": "https://github.com/ls1intum/Artemis/commit/5322ca9d67df2bd1a2709cd69526a7e240577f7d", "message": "Merge branch 'develop' into feature/emailed-participations", "committedDate": "2020-01-27T16:43:16Z", "type": "commit"}, {"oid": "c9aff92c486cd8206e7efb29ab7d628740f5e821", "url": "https://github.com/ls1intum/Artemis/commit/c9aff92c486cd8206e7efb29ab7d628740f5e821", "message": "Set initialization state to FINISHED even for existing participation when creating a result for an external submission", "committedDate": "2020-01-27T17:13:43Z", "type": "commit"}, {"oid": "5ead428192d7de251c67ce2b4cceaef9ce28b844", "url": "https://github.com/ls1intum/Artemis/commit/5ead428192d7de251c67ce2b4cceaef9ce28b844", "message": "Remove overloaded initializeSubmission", "committedDate": "2020-01-27T17:55:22Z", "type": "commit"}, {"oid": "2a1c15fd2011ab9aec98a0bfcb827e4aca04e192", "url": "https://github.com/ls1intum/Artemis/commit/2a1c15fd2011ab9aec98a0bfcb827e4aca04e192", "message": "Rename to createNewRatedManualResult", "committedDate": "2020-01-27T18:05:13Z", "type": "commit"}, {"oid": "9298261da0bfad1b0b5149b251fe193eebe74d29", "url": "https://github.com/ls1intum/Artemis/commit/9298261da0bfad1b0b5149b251fe193eebe74d29", "message": "Switch submission to Einreichung in German", "committedDate": "2020-01-27T18:10:59Z", "type": "commit"}, {"oid": "f90fec545d6616a0641f5e22b1cb0c0abcb5bbf1", "url": "https://github.com/ls1intum/Artemis/commit/f90fec545d6616a0641f5e22b1cb0c0abcb5bbf1", "message": "Remove barrel file", "committedDate": "2020-01-27T18:14:31Z", "type": "commit"}, {"oid": "a50435e423e64956c76429b4272e4581e8b1a5de", "url": "https://github.com/ls1intum/Artemis/commit/a50435e423e64956c76429b4272e4581e8b1a5de", "message": "Remove service", "committedDate": "2020-01-27T18:17:20Z", "type": "commit"}, {"oid": "2b5960c580d521496e765669d0112620b036b08a", "url": "https://github.com/ls1intum/Artemis/commit/2b5960c580d521496e765669d0112620b036b08a", "message": "Fix user model import", "committedDate": "2020-01-27T18:25:22Z", "type": "commit"}, {"oid": "f3101c384d2e78f4e10052a848d6f7fd70daba42", "url": "https://github.com/ls1intum/Artemis/commit/f3101c384d2e78f4e10052a848d6f7fd70daba42", "message": "Merge branch 'develop' into feature/emailed-participations", "committedDate": "2020-01-27T18:47:11Z", "type": "commit"}]}