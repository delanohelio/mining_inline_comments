{"pr_number": 2086, "pr_title": "[Feature] Store static code analysis configuration", "pr_createdAt": "2020-09-03T12:56:25Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2086", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568561", "bodyText": "Codacy found an issue: The field name 'ARTEMIS_SERVER_URL' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:04Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java", "diffHunk": "@@ -47,6 +52,9 @@\n @ActiveProfiles({ \"artemis\", \"bamboo\", \"bitbucket\", \"jira\", \"automaticText\", \"ldap\", \"scheduling\", \"athene\" })\n public abstract class AbstractSpringIntegrationBambooBitbucketJiraTest {\n \n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568567", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:05Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU3NA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568574", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_validExercise_bonusPointsIsNull' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:06Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -133,6 +146,31 @@ public void createProgrammingExercise_validExercise_created(ExerciseMode mode) t\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4MA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568580", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:07Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568586", "bodyText": "Codacy found an issue: Avoid unnecessary constructors - the compiler will generate these for you", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:08Z", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568589", "bodyText": "Codacy found an issue: Document empty constructor", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:09Z", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568592", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testCreateDefaultCategories_noConfigurationAvailable' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:10Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU5Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568596", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_baseReferencesGotCloned' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:11Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -64,25 +50,27 @@\n     public void setUp() {\n         bambooRequestMockProvider.enableMockingOfRequests();\n         bitbucketRequestMockProvider.enableMockingOfRequests();\n-        databse.addUsers(1, 1, 1);\n-        databse.addInstructor(\"other-instructors\", \"instructorother\");\n-        databse.addCourseWithOneProgrammingExerciseAndTestCases();\n-        additionalEmptyCourse = databse.addEmptyCourse();\n-        programmingExercise = databse.loadProgrammingExerciseWithEagerReferences();\n-        databse.addHintsToExercise(programmingExercise);\n-        databse.addHintsToProblemStatement(programmingExercise);\n+        database.addUsers(1, 1, 1);\n+        database.addInstructor(\"other-instructors\", \"instructorother\");\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        additionalEmptyCourse = database.addEmptyCourse();\n+        programmingExercise = programmingExerciseRepository.findAll().get(0);\n+        database.addHintsToExercise(programmingExercise);\n+        database.addHintsToProblemStatement(programmingExercise);\n+        database.addStaticCodeAnalysisCategoriesToProgrammingExercise(programmingExercise);\n \n         // Load again to fetch changes to statement and hints while keeping eager refs\n-        programmingExercise = databse.loadProgrammingExerciseWithEagerReferences();\n+        programmingExercise = database.loadProgrammingExerciseWithEagerReferences(programmingExercise);\n     }\n \n     @AfterEach\n     public void tearDown() {\n-        databse.resetDatabase();\n+        database.resetDatabase();\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_baseReferencesGotCloned() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_baseReferencesGotCloned() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYwMA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568600", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:12Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYxMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568611", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:13Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYxOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568619", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:14Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(-1D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYyMg==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568622", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:15Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYyNw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568627", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:16Z", "path": "src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java", "diffHunk": "@@ -239,6 +239,16 @@ public File postWithResponseBodyFile(String path, Object body, HttpStatus expect\n         return mapper.readValue(stringResponse, responseType);\n     }\n \n+    public void patch(String path, Object body, HttpStatus expectedStatus) throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "88f8786a9198f3cd766dbe84d7ce7ac76d8af7b7", "url": "https://github.com/ls1intum/Artemis/commit/88f8786a9198f3cd766dbe84d7ce7ac76d8af7b7", "message": "Create codeql-analysis.yml", "committedDate": "2020-07-16T19:37:39Z", "type": "commit"}, {"oid": "265444e72d1b81ed00f27d93722c915ae47b41d1", "url": "https://github.com/ls1intum/Artemis/commit/265444e72d1b81ed00f27d93722c915ae47b41d1", "message": "Update .github/workflows/codeql-analysis.yml", "committedDate": "2020-07-23T16:58:27Z", "type": "commit"}, {"oid": "cdba0f4b68a509b81217034c5f0b649378fb4ed8", "url": "https://github.com/ls1intum/Artemis/commit/cdba0f4b68a509b81217034c5f0b649378fb4ed8", "message": "Compile Manually", "committedDate": "2020-07-28T08:13:33Z", "type": "commit"}, {"oid": "77578628d680e5bf7c48020725921884be81b7a7", "url": "https://github.com/ls1intum/Artemis/commit/77578628d680e5bf7c48020725921884be81b7a7", "message": "Install Java 14", "committedDate": "2020-07-28T08:27:42Z", "type": "commit"}, {"oid": "b50c0cac57889df5f0fcb0d5792bbe21b5ab2956", "url": "https://github.com/ls1intum/Artemis/commit/b50c0cac57889df5f0fcb0d5792bbe21b5ab2956", "message": "Also update to used Node Version", "committedDate": "2020-07-28T08:38:01Z", "type": "commit"}, {"oid": "355ed91606d41a40288c440218d33a1d23739460", "url": "https://github.com/ls1intum/Artemis/commit/355ed91606d41a40288c440218d33a1d23739460", "message": "Merge branch 'develop' into codeql-analysis", "committedDate": "2020-07-28T08:41:36Z", "type": "commit"}, {"oid": "b38a2051ac536ab1df3566f8337b45ef14da60ea", "url": "https://github.com/ls1intum/Artemis/commit/b38a2051ac536ab1df3566f8337b45ef14da60ea", "message": "Add entities for static code analysis configuration", "committedDate": "2020-09-01T16:48:38Z", "type": "commit"}, {"oid": "cb10a04f30845357e32688895d4e37afb6a2cfba", "url": "https://github.com/ls1intum/Artemis/commit/cb10a04f30845357e32688895d4e37afb6a2cfba", "message": "Database changes", "committedDate": "2020-09-03T12:53:08Z", "type": "commit"}, {"oid": "7f5d90fbf5b71f667213ceecde08779ee29d7c61", "url": "https://github.com/ls1intum/Artemis/commit/7f5d90fbf5b71f667213ceecde08779ee29d7c61", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-03T12:57:05Z", "type": "commit"}, {"oid": "2daedd73ea279072beb78dbdcf3517f5f68cdc36", "url": "https://github.com/ls1intum/Artemis/commit/2daedd73ea279072beb78dbdcf3517f5f68cdc36", "message": "Remove dead code", "committedDate": "2020-09-03T13:36:59Z", "type": "commit"}, {"oid": "cb01a28704224ebbf21928d96fe4451963de61dc", "url": "https://github.com/ls1intum/Artemis/commit/cb01a28704224ebbf21928d96fe4451963de61dc", "message": "Add repo, service, repository and first integration test", "committedDate": "2020-09-03T18:06:14Z", "type": "commit"}, {"oid": "15107d5101c5982f3d21f836c8c8c1347eb893e8", "url": "https://github.com/ls1intum/Artemis/commit/15107d5101c5982f3d21f836c8c8c1347eb893e8", "message": "Merge branch 'feature/static-code-analysis-configuration-data-model' of https://github.com/ls1intum/Artemis into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-03T18:06:38Z", "type": "commit"}, {"oid": "d1eaaa38185e04f3d642d56c53c4b0919d79966b", "url": "https://github.com/ls1intum/Artemis/commit/d1eaaa38185e04f3d642d56c53c4b0919d79966b", "message": "Fix format", "committedDate": "2020-09-07T11:17:30Z", "type": "commit"}, {"oid": "171c5102c02ab0a1d2692ec097861fc19ce62931", "url": "https://github.com/ls1intum/Artemis/commit/171c5102c02ab0a1d2692ec097861fc19ce62931", "message": "Remove unused var", "committedDate": "2020-09-07T11:17:56Z", "type": "commit"}, {"oid": "0e8cc6073beb0ba05be672748be080f69388c6c5", "url": "https://github.com/ls1intum/Artemis/commit/0e8cc6073beb0ba05be672748be080f69388c6c5", "message": "Fix codacy issue", "committedDate": "2020-09-07T11:19:00Z", "type": "commit"}, {"oid": "4de5e2b5fa9ab02fece9031e6c536957c9d19e27", "url": "https://github.com/ls1intum/Artemis/commit/4de5e2b5fa9ab02fece9031e6c536957c9d19e27", "message": "Implement update of static code analysis categories", "committedDate": "2020-09-07T13:58:32Z", "type": "commit"}, {"oid": "1464eb5a87498ffb78d0a380ec99b89e668f54c2", "url": "https://github.com/ls1intum/Artemis/commit/1464eb5a87498ffb78d0a380ec99b89e668f54c2", "message": "Refactor and extend static code analysis setting validation", "committedDate": "2020-09-07T17:49:48Z", "type": "commit"}, {"oid": "b6c26bbc02ee29152907665843701cdcd6dbaf32", "url": "https://github.com/ls1intum/Artemis/commit/b6c26bbc02ee29152907665843701cdcd6dbaf32", "message": "Fix comment", "committedDate": "2020-09-07T17:50:40Z", "type": "commit"}, {"oid": "85c9b5afe478faf544d93a64cda68452d316ceea", "url": "https://github.com/ls1intum/Artemis/commit/85c9b5afe478faf544d93a64cda68452d316ceea", "message": "Adjust tests", "committedDate": "2020-09-08T15:37:09Z", "type": "commit"}, {"oid": "85496c80ed1f17f2690fd03b488dc13ebd0f8ca7", "url": "https://github.com/ls1intum/Artemis/commit/85496c80ed1f17f2690fd03b488dc13ebd0f8ca7", "message": "Add bonus pint integration test", "committedDate": "2020-09-08T16:26:47Z", "type": "commit"}, {"oid": "3985ab2cd1e4a869d495bd98560243d7439bf453", "url": "https://github.com/ls1intum/Artemis/commit/3985ab2cd1e4a869d495bd98560243d7439bf453", "message": "Fix test", "committedDate": "2020-09-09T09:57:09Z", "type": "commit"}, {"oid": "e1197ad2dc588667e18fd0c9ca24d4bf73d8fa5f", "url": "https://github.com/ls1intum/Artemis/commit/e1197ad2dc588667e18fd0c9ca24d4bf73d8fa5f", "message": "Fix tests", "committedDate": "2020-09-09T11:10:50Z", "type": "commit"}, {"oid": "ec8dd0c079740d5fcb82130cb6d1fe1a0e25f599", "url": "https://github.com/ls1intum/Artemis/commit/ec8dd0c079740d5fcb82130cb6d1fe1a0e25f599", "message": "Validate static code analysis settings", "committedDate": "2020-09-09T12:20:19Z", "type": "commit"}, {"oid": "fa7efca0f4ae6db28414c89bcf3093e95ed2bc3d", "url": "https://github.com/ls1intum/Artemis/commit/fa7efca0f4ae6db28414c89bcf3093e95ed2bc3d", "message": "Add category mapping as JSON", "committedDate": "2020-09-09T18:29:19Z", "type": "commit"}, {"oid": "e06d38962159248434f21bca5bf65e0c3053b2a2", "url": "https://github.com/ls1intum/Artemis/commit/e06d38962159248434f21bca5bf65e0c3053b2a2", "message": "Read in the default configuration for static code analysis on application startup", "committedDate": "2020-09-14T12:29:00Z", "type": "commit"}, {"oid": "1bf32ff29d2236f6168f79e2cb1850ede7ddbfa1", "url": "https://github.com/ls1intum/Artemis/commit/1bf32ff29d2236f6168f79e2cb1850ede7ddbfa1", "message": "Fix json file", "committedDate": "2020-09-14T13:09:46Z", "type": "commit"}, {"oid": "c5306d3f6e20d8ed8a44070ed71d72abbd3a6b8e", "url": "https://github.com/ls1intum/Artemis/commit/c5306d3f6e20d8ed8a44070ed71d72abbd3a6b8e", "message": "D", "committedDate": "2020-09-14T15:47:03Z", "type": "commit"}, {"oid": "67ed57602e16bc282457f7f16856edc9725e333d", "url": "https://github.com/ls1intum/Artemis/commit/67ed57602e16bc282457f7f16856edc9725e333d", "message": "Add integration realistic integration test with static code analysis", "committedDate": "2020-09-15T10:43:01Z", "type": "commit"}, {"oid": "237b39f84d6f10f1dec8a43772c0ceb0e0cdc4ac", "url": "https://github.com/ls1intum/Artemis/commit/237b39f84d6f10f1dec8a43772c0ceb0e0cdc4ac", "message": "More integration tests for update functionality", "committedDate": "2020-09-15T12:10:31Z", "type": "commit"}, {"oid": "09b1122ab70fc0c0f365b45296d900ca2784c33d", "url": "https://github.com/ls1intum/Artemis/commit/09b1122ab70fc0c0f365b45296d900ca2784c33d", "message": "Add more integration tests", "committedDate": "2020-09-15T19:43:31Z", "type": "commit"}, {"oid": "a937254601fba6c24815d3ce01ce951315bded40", "url": "https://github.com/ls1intum/Artemis/commit/a937254601fba6c24815d3ce01ce951315bded40", "message": "Copy categories on import", "committedDate": "2020-09-16T10:45:00Z", "type": "commit"}, {"oid": "2547f06d8c5a939553d14c36683029fd9c2f0c65", "url": "https://github.com/ls1intum/Artemis/commit/2547f06d8c5a939553d14c36683029fd9c2f0c65", "message": "Improve toString for TestCases, StaticCodeAnalysisCategory", "committedDate": "2020-09-16T18:38:12Z", "type": "commit"}, {"oid": "a4c62a81cf93d70ab6ef254ffc51b0e80cbacc2a", "url": "https://github.com/ls1intum/Artemis/commit/a4c62a81cf93d70ab6ef254ffc51b0e80cbacc2a", "message": "Fix import for test cases and categories", "committedDate": "2020-09-16T18:49:43Z", "type": "commit"}, {"oid": "92a569d42a6ca1c4f6551f9c5d053b5c74564e10", "url": "https://github.com/ls1intum/Artemis/commit/92a569d42a6ca1c4f6551f9c5d053b5c74564e10", "message": "Refactor and improve integration tests for import", "committedDate": "2020-09-16T18:54:01Z", "type": "commit"}, {"oid": "39d89124c619747c14f7cf9d74e267b27baecd55", "url": "https://github.com/ls1intum/Artemis/commit/39d89124c619747c14f7cf9d74e267b27baecd55", "message": "Rename default category properties", "committedDate": "2020-09-16T20:34:22Z", "type": "commit"}, {"oid": "cb47b459e16cfbac782daeba4c046609720b671d", "url": "https://github.com/ls1intum/Artemis/commit/cb47b459e16cfbac782daeba4c046609720b671d", "message": "Fix integration tests", "committedDate": "2020-09-16T20:34:58Z", "type": "commit"}, {"oid": "8f59337fc4ee839b6ba03d7dc6fa81c88c4dae83", "url": "https://github.com/ls1intum/Artemis/commit/8f59337fc4ee839b6ba03d7dc6fa81c88c4dae83", "message": "Improve coverage", "committedDate": "2020-09-16T22:16:26Z", "type": "commit"}, {"oid": "0386a8a13b53ce55845653251c4f4785f77ed23f", "url": "https://github.com/ls1intum/Artemis/commit/0386a8a13b53ce55845653251c4f4785f77ed23f", "message": "Improve code quality", "committedDate": "2020-09-16T22:28:46Z", "type": "commit"}, {"oid": "ee3c6542f01dab46c96e265fdaf9a1a2da3c850c", "url": "https://github.com/ls1intum/Artemis/commit/ee3c6542f01dab46c96e265fdaf9a1a2da3c850c", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-16T22:29:17Z", "type": "commit"}, {"oid": "727e84a56c791843b0446a0d67c60600aa2ab018", "url": "https://github.com/ls1intum/Artemis/commit/727e84a56c791843b0446a0d67c60600aa2ab018", "message": "Remove unused code", "committedDate": "2020-09-16T22:36:19Z", "type": "commit"}, {"oid": "b2fc4412e71084e6a0b76054cfebe4b6cf7c99c8", "url": "https://github.com/ls1intum/Artemis/commit/b2fc4412e71084e6a0b76054cfebe4b6cf7c99c8", "message": "Merge branch 'feature/static-code-analysis-configuration-data-model' of https://github.com/ls1intum/Artemis into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-16T22:37:27Z", "type": "commit"}, {"oid": "0bd9ee4a3c1bcfc7f07b80a0c74457433b4a21c9", "url": "https://github.com/ls1intum/Artemis/commit/0bd9ee4a3c1bcfc7f07b80a0c74457433b4a21c9", "message": "Use floating point numbers for penalties to allow fine grained control", "committedDate": "2020-09-17T12:50:43Z", "type": "commit"}, {"oid": "314cf861bcf4102d6de7a47d5e3ef16c232d2b70", "url": "https://github.com/ls1intum/Artemis/commit/314cf861bcf4102d6de7a47d5e3ef16c232d2b70", "message": "Max penalty for exercises should be integers", "committedDate": "2020-09-17T13:17:06Z", "type": "commit"}, {"oid": "6bbe6350d84552e8bc51620c8d167a0d65e9fcc2", "url": "https://github.com/ls1intum/Artemis/commit/6bbe6350d84552e8bc51620c8d167a0d65e9fcc2", "message": "Create input for max static code analysis penalty", "committedDate": "2020-09-17T22:34:22Z", "type": "commit"}, {"oid": "851f439904e1f9b7e85aa6182d937468f882ce95", "url": "https://github.com/ls1intum/Artemis/commit/851f439904e1f9b7e85aa6182d937468f882ce95", "message": "Show the max penalty in exercise details", "committedDate": "2020-09-17T23:04:06Z", "type": "commit"}, {"oid": "55fcd6035afa696c3b8bc54a0e5f93c0f449e518", "url": "https://github.com/ls1intum/Artemis/commit/55fcd6035afa696c3b8bc54a0e5f93c0f449e518", "message": "Fix tests", "committedDate": "2020-09-17T23:23:58Z", "type": "commit"}, {"oid": "26b2fdda8cd908260807dc4b9c892aa0b478712a", "url": "https://github.com/ls1intum/Artemis/commit/26b2fdda8cd908260807dc4b9c892aa0b478712a", "message": "Complete default java static code configuration", "committedDate": "2020-09-18T17:22:38Z", "type": "commit"}, {"oid": "05586727d739480b42a57765629f0580b602d48c", "url": "https://github.com/ls1intum/Artemis/commit/05586727d739480b42a57765629f0580b602d48c", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-19T19:30:58Z", "type": "commit"}, {"oid": "dfb2667b822f08b14dc3bef2dcf65384a7f4ed0c", "url": "https://github.com/ls1intum/Artemis/commit/dfb2667b822f08b14dc3bef2dcf65384a7f4ed0c", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-20T10:48:41Z", "type": "commit"}, {"oid": "b1dc95d4d39471aaff7e203f3e770444e17b6a4a", "url": "https://github.com/ls1intum/Artemis/commit/b1dc95d4d39471aaff7e203f3e770444e17b6a4a", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-22T08:00:38Z", "type": "commit"}, {"oid": "859f54511de107317c0374ddbcabc2358c3018bf", "url": "https://github.com/ls1intum/Artemis/commit/859f54511de107317c0374ddbcabc2358c3018bf", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-22T22:06:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzOTExNg==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r493439116", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n          \n          \n            \n                            staticCodeAnalysisService.createDefaultCategories(newProgrammingExercise);\n          \n      \n    \n    \n  \n\nUse the correct exercise here.", "author": "schultek", "createdAt": "2020-09-23T10:45:30Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -313,6 +348,10 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n         try {\n             // Setup all repositories etc\n             ProgrammingExercise newProgrammingExercise = programmingExerciseService.createProgrammingExercise(programmingExercise);\n+            // Create default static code analysis categories\n+            if (Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+                staticCodeAnalysisService.createDefaultCategories(programmingExercise);", "originalCommit": "859f54511de107317c0374ddbcabc2358c3018bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cdb0d25855f7f7bcff7819e86457be6f29f45ee9", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\nindex e9789ab927..d8d0bf780b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java\n\n@@ -350,7 +350,7 @@ public class ProgrammingExerciseResource {\n             ProgrammingExercise newProgrammingExercise = programmingExerciseService.createProgrammingExercise(programmingExercise);\n             // Create default static code analysis categories\n             if (Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n-                staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+                staticCodeAnalysisService.createDefaultCategories(newProgrammingExercise);\n             }\n             return ResponseEntity.created(new URI(\"/api/programming-exercises\" + newProgrammingExercise.getId()))\n                     .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, newProgrammingExercise.getTitle())).body(newProgrammingExercise);\n"}}, {"oid": "cdb0d25855f7f7bcff7819e86457be6f29f45ee9", "url": "https://github.com/ls1intum/Artemis/commit/cdb0d25855f7f7bcff7819e86457be6f29f45ee9", "message": "use correct exercise on category creation", "committedDate": "2020-09-23T10:48:21Z", "type": "commit"}, {"oid": "b0f690e2e22f1faced1c14a41f7d69feebed9e0b", "url": "https://github.com/ls1intum/Artemis/commit/b0f690e2e22f1faced1c14a41f7d69feebed9e0b", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-23T10:48:38Z", "type": "commit"}, {"oid": "8cf30344582f4ad6da90a7fc4964d774ffccd296", "url": "https://github.com/ls1intum/Artemis/commit/8cf30344582f4ad6da90a7fc4964d774ffccd296", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-23T11:48:41Z", "type": "commit"}, {"oid": "4d72af6e212087d8ad7b83c0f8ea3be5acc27e8b", "url": "https://github.com/ls1intum/Artemis/commit/4d72af6e212087d8ad7b83c0f8ea3be5acc27e8b", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-23T16:31:14Z", "type": "commit"}, {"oid": "3aea10933bc8ca738f34d658f9031fc66a2c728d", "url": "https://github.com/ls1intum/Artemis/commit/3aea10933bc8ca738f34d658f9031fc66a2c728d", "message": "Fix duplicate in configuration", "committedDate": "2020-09-24T11:57:06Z", "type": "commit"}, {"oid": "5c7b232880858f432ee905cd69abec42d71248e7", "url": "https://github.com/ls1intum/Artemis/commit/5c7b232880858f432ee905cd69abec42d71248e7", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\tsrc/main/resources/config/liquibase/master.xml\n#\tsrc/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "committedDate": "2020-09-24T12:09:20Z", "type": "commit"}, {"oid": "ebed138ae3bf043be047bd51f131ed3cbe085bed", "url": "https://github.com/ls1intum/Artemis/commit/ebed138ae3bf043be047bd51f131ed3cbe085bed", "message": "spotless", "committedDate": "2020-09-24T12:14:58Z", "type": "commit"}, {"oid": "bdd7a9935ee46faa4622b411a79cf8ea47e64654", "url": "https://github.com/ls1intum/Artemis/commit/bdd7a9935ee46faa4622b411a79cf8ea47e64654", "message": "Fix merge conflict", "committedDate": "2020-09-24T15:40:49Z", "type": "commit"}, {"oid": "5c6477ed578473a2c849b827164a85d0f97ea628", "url": "https://github.com/ls1intum/Artemis/commit/5c6477ed578473a2c849b827164a85d0f97ea628", "message": "Improve translation", "committedDate": "2020-09-24T15:45:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MTY1Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494441653", "bodyText": "Maybe you can refactor this logic into a different method, it makes this method quite large and I guess it might be useful elsewhere.", "author": "sleiss", "createdAt": "2020-09-24T16:10:41Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        // Validate the category updates\n+        for (var category : categories) {\n+            // Each categories must have an id\n+            if (category.getId() == null) {\n+                return badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\");\n+            }\n+\n+            // Penalty must not be null or negative\n+            if (category.getPenalty() == null || category.getPenalty() < 0) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\");\n+            }\n+\n+            // MaxPenalty must not be smaller than penalty\n+            if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+            }\n+\n+            // Category state must not be null\n+            if (category.getState() == null) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+            }\n+\n+            // Exercise id of the request path must match the exerciseId in the request body if present\n+            if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n+                return conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId());\n+            }", "originalCommit": "5c6477ed578473a2c849b827164a85d0f97ea628", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1ODAxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494458015", "bodyText": "Created a own method for the validation.", "author": "kloessst", "createdAt": "2020-09-24T16:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MTY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "af6572d1ac62b64b51e7bbd572280f54a358a39a", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 93b3703a3d..12de70231f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n\n@@ -3,6 +3,7 @@ package de.tum.in.www1.artemis.web.rest;\n import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n \n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n \n import org.slf4j.Logger;\n"}}, {"oid": "af6572d1ac62b64b51e7bbd572280f54a358a39a", "url": "https://github.com/ls1intum/Artemis/commit/af6572d1ac62b64b51e7bbd572280f54a358a39a", "message": "Create validation method", "committedDate": "2020-09-24T16:35:03Z", "type": "commit"}, {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828", "url": "https://github.com/ls1intum/Artemis/commit/c83e59f4145dea33ff66d559f72e08c11b9cf828", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-24T16:38:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzkyNA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494947924", "bodyText": "Should TAs be allowed to update the categories or is this a task that only instructors should perform?", "author": "sleiss", "createdAt": "2020-09-25T12:18:10Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {", "originalCommit": "c83e59f4145dea33ff66d559f72e08c11b9cf828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI2ODI3MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r495268271", "bodyText": "At the moment test cases can be changed also by TA. As the categories will be changed in the same view, I've chosen to use the same settings.", "author": "kloessst", "createdAt": "2020-09-25T22:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "cf95d44dc783378ac3e5854dce89525dc7054f4f", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\nindex 12de70231f..dc8c3cfd14 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java\n\n@@ -22,7 +22,6 @@ import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n-import de.tum.in.www1.artemis.service.UserService;\n \n /**\n  * REST controller for managing static code analysis.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1MzMwNg==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494953306", "bodyText": "Just to make sure: The @Transactional annotation ensures that the imported SCA categories get saved into the DB although programmingExerciseRepository.save(newExercise); is only called before setting the categories, right?", "author": "sleiss", "createdAt": "2020-09-25T12:28:29Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java", "diffHunk": "@@ -89,10 +94,13 @@ public ProgrammingExercise importProgrammingExerciseBasis(final ProgrammingExerc\n         setupTestRepository(newExercise, projectKey);\n         programmingExerciseService.initParticipations(newExercise);\n \n-        // Hints and test cases\n+        // Hints, test cases and static code analysis categories\n         exerciseHintService.copyExerciseHints(templateExercise, newExercise);\n         programmingExerciseRepository.save(newExercise);\n         importTestCases(templateExercise, newExercise);\n+        if (Boolean.TRUE.equals(templateExercise.isStaticCodeAnalysisEnabled())) {\n+            importStaticCodeAnalysisCategories(templateExercise, newExercise);", "originalCommit": "c83e59f4145dea33ff66d559f72e08c11b9cf828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI3MzM5MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r495273391", "bodyText": "I honestly don't know why we use a Transactional here. From a DB perspective, the table storing the programming exercise doesn't have information about the categories. The reference (exercise_id) resides in the category table as usual in a 1:n relationship. The importStaticCodeAnalysisCategories uses newExercise which already contains the exercise_id after programmingExerciseRepository.save(newExercise) was called to create new categories with the right relation.", "author": "kloessst", "createdAt": "2020-09-25T22:11:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1MzMwNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "cf95d44dc783378ac3e5854dce89525dc7054f4f", "url": "https://github.com/ls1intum/Artemis/commit/cf95d44dc783378ac3e5854dce89525dc7054f4f", "message": "Merge develop", "committedDate": "2020-09-28T23:19:52Z", "type": "commit"}, {"oid": "fb5e2eaf5a44662241ea1834af78129137e8ae86", "url": "https://github.com/ls1intum/Artemis/commit/fb5e2eaf5a44662241ea1834af78129137e8ae86", "message": "Revert \"Merge develop\"\n\nThis reverts commit cf95d44d", "committedDate": "2020-09-28T23:25:46Z", "type": "commit"}, {"oid": "0655281d8f94c348d618c7aeefc8fa833c2bf929", "url": "https://github.com/ls1intum/Artemis/commit/0655281d8f94c348d618c7aeefc8fa833c2bf929", "message": "Revert \"Revert \"Merge develop\"\"\n\nThis reverts commit fb5e2eaf5a44662241ea1834af78129137e8ae86, reversing\nchanges made to cf95d44dc783378ac3e5854dce89525dc7054f4f.", "committedDate": "2020-09-28T23:50:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzMDEzNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r496630135", "bodyText": "move everything into the try block and catch the generic Exception so that this code can never break the application start", "author": "krusche", "createdAt": "2020-09-29T11:05:32Z", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.core.io.support.ResourcePatternUtils;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisConfiguration;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+\n+/**\n+ * Reads static code analysis configurations from json files at application start-up and provides a Bean with\n+ * programming language specific default categories.\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private final ResourceLoader resourceLoader;\n+\n+    private final Map<ProgrammingLanguage, StaticCodeAnalysisConfiguration> languageToConfiguration = new HashMap<>();\n+\n+    public StaticCodeAnalysisConfigurer(ResourceLoader resourceLoader) {\n+        this.resourceLoader = resourceLoader;\n+    }\n+\n+    @PostConstruct\n+    private void init() {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        String configurationsPath = \"classpath:templates/staticCodeAnalysis/*.*\";\n+        Resource[] jsonConfigurations;\n+\n+        try {\n+            jsonConfigurations = ResourcePatternUtils.getResourcePatternResolver(resourceLoader).getResources(configurationsPath);\n+        }\n+        catch (IOException e) {\n+            log.debug(\"Could not load static code analysis configuration resources: \" + e.getMessage());\n+            return;\n+        }\n+\n+        for (var jsonConfiguration : jsonConfigurations) {", "originalCommit": "0655281d8f94c348d618c7aeefc8fa833c2bf929", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8365245ea485bf44e73ab3b1c5b1c93143b057e", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\nindex c8f6377ca8..f9fb2899ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n+++ b/src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java\n\n@@ -1,9 +1,7 @@\n package de.tum.in.www1.artemis.config;\n \n-import java.io.IOException;\n-import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n \n import javax.annotation.PostConstruct;\n \n"}}, {"oid": "fe2d7af1de31a3212501215fee08f78b040adffd", "url": "https://github.com/ls1intum/Artemis/commit/fe2d7af1de31a3212501215fee08f78b040adffd", "message": "Merge remote-tracking branch 'origin/codeql-analysis' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\t.github/workflows/codeql-analysis.yml", "committedDate": "2020-09-29T16:26:45Z", "type": "commit"}, {"oid": "c3f1afd9c3f9ccc92aeda67daa8b2a7ddd4c90bd", "url": "https://github.com/ls1intum/Artemis/commit/c3f1afd9c3f9ccc92aeda67daa8b2a7ddd4c90bd", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/enumeration/StaticCodeAnalysisTool.java\n#\tsrc/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "committedDate": "2020-09-29T16:31:45Z", "type": "commit"}, {"oid": "bd3009cb8b8b5d963cf119d030777641a61d4077", "url": "https://github.com/ls1intum/Artemis/commit/bd3009cb8b8b5d963cf119d030777641a61d4077", "message": "Add missing import", "committedDate": "2020-09-29T16:34:40Z", "type": "commit"}, {"oid": "b8365245ea485bf44e73ab3b1c5b1c93143b057e", "url": "https://github.com/ls1intum/Artemis/commit/b8365245ea485bf44e73ab3b1c5b1c93143b057e", "message": "Hard code categories in Java", "committedDate": "2020-09-29T23:07:53Z", "type": "commit"}, {"oid": "27de7a4506ad4ee043674fd029781d61b2ea43b3", "url": "https://github.com/ls1intum/Artemis/commit/27de7a4506ad4ee043674fd029781d61b2ea43b3", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model", "committedDate": "2020-09-29T23:12:46Z", "type": "commit"}, {"oid": "9434946f4463cac11511f234a186cac84bc85526", "url": "https://github.com/ls1intum/Artemis/commit/9434946f4463cac11511f234a186cac84bc85526", "message": "Fix bean type", "committedDate": "2020-09-29T23:18:26Z", "type": "commit"}, {"oid": "b29803bffcc0333882e3ed292edb6363edacc1ba", "url": "https://github.com/ls1intum/Artemis/commit/b29803bffcc0333882e3ed292edb6363edacc1ba", "message": "Fix bean type for tests", "committedDate": "2020-09-29T23:21:41Z", "type": "commit"}, {"oid": "d403d0f10b3b2335835c596f39a953109215f832", "url": "https://github.com/ls1intum/Artemis/commit/d403d0f10b3b2335835c596f39a953109215f832", "message": "Remove json file", "committedDate": "2020-09-30T00:20:20Z", "type": "commit"}, {"oid": "7343689f90d0cd90e36c4a668038aeb9527f4612", "url": "https://github.com/ls1intum/Artemis/commit/7343689f90d0cd90e36c4a668038aeb9527f4612", "message": "Revert code-ql change", "committedDate": "2020-09-30T00:28:26Z", "type": "commit"}, {"oid": "f484f63211f802420b40308455ef935db2de2156", "url": "https://github.com/ls1intum/Artemis/commit/f484f63211f802420b40308455ef935db2de2156", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\tsrc/main/webapp/app/entities/programming-exercise.model.ts", "committedDate": "2020-10-01T12:14:08Z", "type": "commit"}, {"oid": "18d83c443d250e9bbf8469a65bc559be1ac1670e", "url": "https://github.com/ls1intum/Artemis/commit/18d83c443d250e9bbf8469a65bc559be1ac1670e", "message": "Move away from null types", "committedDate": "2020-10-01T12:17:06Z", "type": "commit"}, {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "url": "https://github.com/ls1intum/Artemis/commit/d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "message": "Improve max penalty field explanation", "committedDate": "2020-10-02T00:02:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUwMw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568503", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:50Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -146,6 +184,51 @@ public void createProgrammingExerciseForExam_validExercise_created() throws Exce\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importExercise_created() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUwOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568509", "bodyText": "Codacy found an issue: The utility class name 'Endpoints' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:52Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        var optionalError = validateCategories(categories, exerciseId);\n+        if (optionalError.isPresent()) {\n+            return optionalError.get();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.updateCategories(exerciseId, categories);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Validates static code analysis categories\n+     *\n+     * @param categories to be validated\n+     * @param exerciseId path variable\n+     * @return empty optional if no error was found otherwise optional with an error response\n+     */\n+    private Optional<ResponseEntity<Set<StaticCodeAnalysisCategory>>> validateCategories(Set<StaticCodeAnalysisCategory> categories, Long exerciseId) {\n+        for (var category : categories) {\n+            // Each categories must have an id\n+            if (category.getId() == null) {\n+                return Optional.of(badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\"));\n+            }\n+\n+            // Penalty must not be null or negative\n+            if (category.getPenalty() == null || category.getPenalty() < 0) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\"));\n+            }\n+\n+            // MaxPenalty must not be smaller than penalty\n+            if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+            }\n+\n+            // Category state must not be null\n+            if (category.getState() == null) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+            }\n+\n+            // Exercise id of the request path must match the exerciseId in the request body if present\n+            if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n+                return Optional.of(conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId()));\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static final class Endpoints {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUxNA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568514", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:53Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -126,7 +118,8 @@ public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() throws\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568515", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'init()'.", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:54Z", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {\n+    }\n+\n+    @PostConstruct\n+    private void init() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyMg==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568522", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:55Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(-1D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var category = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next();\n+        category.setMaxPenalty(3D);\n+        category.setPenalty(5D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_stateIsNull_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setState(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyNw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568527", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:56Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -683,6 +684,16 @@ private static StaticCodeAnalysisReportDTO generateStaticCodeAnalysisReport(Stat\n         return issue;\n     }\n \n+    public static StaticCodeAnalysisCategory generateStaticCodeAnalysisCategory(ProgrammingExercise programmingExercise) {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568529", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_hintsGotReplacedInStatement' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:57Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -111,10 +99,14 @@ public void importProgrammingExerciseBasis_baseReferencesGotCloned() throws Malf\n         final var newHintIDs = newlyImported.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toSet());\n         assertThat(newlyImported.getExerciseHints().size()).isEqualTo(programmingExercise.getExerciseHints().size());\n         assertThat(programmingExercise.getExerciseHints()).noneMatch(hint -> newHintIDs.contains(hint.getId()));\n+        final var newStaticCodeAnalysisCategoriesIDs = newlyImported.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toSet());\n+        assertThat(newlyImported.getStaticCodeAnalysisCategories().size()).isEqualTo(programmingExercise.getStaticCodeAnalysisCategories().size());\n+        assertThat(programmingExercise.getStaticCodeAnalysisCategories()).noneMatch(category -> newStaticCodeAnalysisCategoriesIDs.contains(category.getId()));\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUzNA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568534", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_validExercise_withStaticCodeAnalysis' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:06:58Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -133,6 +146,31 @@ public void createProgrammingExercise_validExercise_created(ExerciseMode mode) t\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {\n+        exercise.setBonusPoints(null);\n+        mockConnectorRequestsForSetup(exercise);\n+        var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class);\n+        var savedExercise = programmingExerciseRepository.findById(generatedExercise.getId()).get();\n+        assertThat(generatedExercise.getBonusPoints()).isEqualTo(0D);\n+        assertThat(savedExercise.getBonusPoints()).isEqualTo(0D);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_withStaticCodeAnalysis() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568541", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:00Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568549", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:01Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU1Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568557", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:02Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java", "diffHunk": "@@ -409,13 +419,26 @@ public void updateProgrammingExercise_eitherCourseOrExerciseGroupSet_badRequest(\n         request.put(ROOT + PROGRAMMING_EXERCISES, programmingExerciseInExam, HttpStatus.BAD_REQUEST);\n     }\n \n+    private void mockBuildPlanAndRepositoryCheck(ProgrammingExercise programmingExercise) throws Exception {\n+        bambooRequestMockProvider.mockBuildPlanIsValid(programmingExercise.getTemplateBuildPlanId(), true);\n+        bambooRequestMockProvider.mockBuildPlanIsValid(programmingExercise.getSolutionBuildPlanId(), true);\n+        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getTemplateRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n+        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getSolutionRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void updateProgrammingExercise_staticCodeAnalysisMustNotChange_badRequest() throws Exception {\n-        // false -> true\n+    public void updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2MA==", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568560", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-02T00:07:03Z", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {", "originalCommit": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}