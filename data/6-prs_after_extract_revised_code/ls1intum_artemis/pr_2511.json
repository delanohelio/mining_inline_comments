{"pr_number": 2511, "pr_title": "Feature/user statistics periods", "pr_createdAt": "2020-12-07T11:55:12Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2511", "timeline": [{"oid": "07bf800031b7a28c2894cba9f257cf179e1d9690", "url": "https://github.com/ls1intum/Artemis/commit/07bf800031b7a28c2894cba9f257cf179e1d9690", "message": "first statistics changes", "committedDate": "2020-11-18T13:39:35Z", "type": "commit"}, {"oid": "237fa4c1b5d62544d8acf45eff322951d46e24ca", "url": "https://github.com/ls1intum/Artemis/commit/237fa4c1b5d62544d8acf45eff322951d46e24ca", "message": "refactoring, not finished", "committedDate": "2020-11-18T17:13:33Z", "type": "commit"}, {"oid": "8fd9708b21f3b4e5624f82983c67c35c7cf84339", "url": "https://github.com/ls1intum/Artemis/commit/8fd9708b21f3b4e5624f82983c67c35c7cf84339", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics", "committedDate": "2020-11-18T17:14:31Z", "type": "commit"}, {"oid": "add67a6275d793203cef64f2b73f098b618a8281", "url": "https://github.com/ls1intum/Artemis/commit/add67a6275d793203cef64f2b73f098b618a8281", "message": "users, active users and submission + some refactoring", "committedDate": "2020-11-20T16:58:03Z", "type": "commit"}, {"oid": "a6b68b747ba8a9e4751ee00943a94b188ab09363", "url": "https://github.com/ls1intum/Artemis/commit/a6b68b747ba8a9e4751ee00943a94b188ab09363", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics", "committedDate": "2020-11-20T16:59:59Z", "type": "commit"}, {"oid": "1d806e960ba684c38def630c5ea117d054d9e789", "url": "https://github.com/ls1intum/Artemis/commit/1d806e960ba684c38def630c5ea117d054d9e789", "message": "added 2 new pieces of information and extracted logic into repository", "committedDate": "2020-11-20T21:34:26Z", "type": "commit"}, {"oid": "692040676db1b5d0eeca006847931eebe28d8e5e", "url": "https://github.com/ls1intum/Artemis/commit/692040676db1b5d0eeca006847931eebe28d8e5e", "message": "5 more aspects", "committedDate": "2020-11-21T15:13:05Z", "type": "commit"}, {"oid": "7dfec269a1b23d123783c5e74dc810f533f6f345", "url": "https://github.com/ls1intum/Artemis/commit/7dfec269a1b23d123783c5e74dc810f533f6f345", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics", "committedDate": "2020-11-21T15:13:36Z", "type": "commit"}, {"oid": "a2ac2cb368051d536a64273a489cb79a9bdb3d8d", "url": "https://github.com/ls1intum/Artemis/commit/a2ac2cb368051d536a64273a489cb79a9bdb3d8d", "message": "test commit", "committedDate": "2020-11-21T15:40:26Z", "type": "commit"}, {"oid": "cc8fa323abc79b4610b93913d206f9020bbb2b97", "url": "https://github.com/ls1intum/Artemis/commit/cc8fa323abc79b4610b93913d206f9020bbb2b97", "message": "feedback implemented", "committedDate": "2020-11-21T16:10:21Z", "type": "commit"}, {"oid": "2677ff3bc025a91c337345786b578578cf238d2f", "url": "https://github.com/ls1intum/Artemis/commit/2677ff3bc025a91c337345786b578578cf238d2f", "message": "smaller fixes", "committedDate": "2020-11-21T16:48:53Z", "type": "commit"}, {"oid": "e060a61a4235cd277b8f201ce165dc9c1ca4b54c", "url": "https://github.com/ls1intum/Artemis/commit/e060a61a4235cd277b8f201ce165dc9c1ca4b54c", "message": "start chart method", "committedDate": "2020-11-23T10:00:01Z", "type": "commit"}, {"oid": "e6a3f4db5198403c38d67e8b68596a874037fd2d", "url": "https://github.com/ls1intum/Artemis/commit/e6a3f4db5198403c38d67e8b68596a874037fd2d", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics", "committedDate": "2020-11-23T10:00:50Z", "type": "commit"}, {"oid": "6a877159af0d79ce866803ef5c55c54809a50485", "url": "https://github.com/ls1intum/Artemis/commit/6a877159af0d79ce866803ef5c55c54809a50485", "message": "two bar charts", "committedDate": "2020-11-24T20:37:41Z", "type": "commit"}, {"oid": "a3ee71192436db7adc679b27996695b2e3a88a92", "url": "https://github.com/ls1intum/Artemis/commit/a3ee71192436db7adc679b27996695b2e3a88a92", "message": "push server changes", "committedDate": "2020-11-26T08:57:07Z", "type": "commit"}, {"oid": "a1363a012a75eefd126cbed5fed1342d8c6a7f89", "url": "https://github.com/ls1intum/Artemis/commit/a1363a012a75eefd126cbed5fed1342d8c6a7f89", "message": "added first graph with real values", "committedDate": "2020-11-27T11:32:23Z", "type": "commit"}, {"oid": "ee8f7c6e07ac1e3cddb5441fa33978b6b23ccd87", "url": "https://github.com/ls1intum/Artemis/commit/ee8f7c6e07ac1e3cddb5441fa33978b6b23ccd87", "message": "removed StatisticsObject", "committedDate": "2020-11-27T11:33:11Z", "type": "commit"}, {"oid": "b224b0adeaa80cf1fd6a0cdac7bb0773154e1497", "url": "https://github.com/ls1intum/Artemis/commit/b224b0adeaa80cf1fd6a0cdac7bb0773154e1497", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics", "committedDate": "2020-11-27T11:33:28Z", "type": "commit"}, {"oid": "46c81aa6081caa603d5713a1e10b4d0b69151dd0", "url": "https://github.com/ls1intum/Artemis/commit/46c81aa6081caa603d5713a1e10b4d0b69151dd0", "message": "worked on year tab, week working", "committedDate": "2020-11-27T15:00:47Z", "type": "commit"}, {"oid": "228da8ae7b96b1d35e110dc8a01aebe969812c5a", "url": "https://github.com/ls1intum/Artemis/commit/228da8ae7b96b1d35e110dc8a01aebe969812c5a", "message": "Refactored unused stuff", "committedDate": "2020-11-27T19:07:41Z", "type": "commit"}, {"oid": "cb02d3091ecb1d6f67cdf3d53e237668cdeb54e5", "url": "https://github.com/ls1intum/Artemis/commit/cb02d3091ecb1d6f67cdf3d53e237668cdeb54e5", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics", "committedDate": "2020-11-27T19:08:23Z", "type": "commit"}, {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae", "url": "https://github.com/ls1intum/Artemis/commit/ac7257d174ed321c706cf7f8a28037403a3871ae", "message": "Codacy", "committedDate": "2020-11-27T19:44:24Z", "type": "commit"}, {"oid": "499bb9fd70d8f4710fe3744189d0493f61a8db7d", "url": "https://github.com/ls1intum/Artemis/commit/499bb9fd70d8f4710fe3744189d0493f61a8db7d", "message": "Integrate Code Reviews", "committedDate": "2020-11-28T16:09:13Z", "type": "commit"}, {"oid": "0c261e7ea86df36f0fc1d13f0ac96f1864a3046a", "url": "https://github.com/ls1intum/Artemis/commit/0c261e7ea86df36f0fc1d13f0ac96f1864a3046a", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics", "committedDate": "2020-11-28T16:10:34Z", "type": "commit"}, {"oid": "26c304b14d682a3ce150db83b5a908274b647375", "url": "https://github.com/ls1intum/Artemis/commit/26c304b14d682a3ce150db83b5a908274b647375", "message": "refactor REST call url", "committedDate": "2020-11-30T11:37:49Z", "type": "commit"}, {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720", "url": "https://github.com/ls1intum/Artemis/commit/93880c069ec7d455857ded7e074f90b4f68e2720", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics", "committedDate": "2020-11-30T11:38:07Z", "type": "commit"}, {"oid": "ea28fa7ce583b5250cde3499d6659b38eb254195", "url": "https://github.com/ls1intum/Artemis/commit/ea28fa7ce583b5250cde3499d6659b38eb254195", "message": "Address Stefan's comments", "committedDate": "2020-11-30T17:48:59Z", "type": "commit"}, {"oid": "366a0ca658674e94cb50c2a87b3660bdc387288e", "url": "https://github.com/ls1intum/Artemis/commit/366a0ca658674e94cb50c2a87b3660bdc387288e", "message": "fix missing Text-block style", "committedDate": "2020-11-30T18:26:49Z", "type": "commit"}, {"oid": "098393562c8ad4db3f03a38571867afd437fe9e8", "url": "https://github.com/ls1intum/Artemis/commit/098393562c8ad4db3f03a38571867afd437fe9e8", "message": "fix missing Text-block style", "committedDate": "2020-11-30T19:14:42Z", "type": "commit"}, {"oid": "f6e30d7546138808db3176d23669807099621dc0", "url": "https://github.com/ls1intum/Artemis/commit/f6e30d7546138808db3176d23669807099621dc0", "message": "Implemented YEAR, MONTH and DAY and refactoring of client side", "committedDate": "2020-12-01T17:19:11Z", "type": "commit"}, {"oid": "1d6534697b753b439a60ab864f3f78ebf93d9d58", "url": "https://github.com/ls1intum/Artemis/commit/1d6534697b753b439a60ab864f3f78ebf93d9d58", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics", "committedDate": "2020-12-01T17:19:46Z", "type": "commit"}, {"oid": "c556e9eb255b463d67da7525fb68dae1a7eb6723", "url": "https://github.com/ls1intum/Artemis/commit/c556e9eb255b463d67da7525fb68dae1a7eb6723", "message": "active tab adjustments", "committedDate": "2020-12-01T18:16:10Z", "type": "commit"}, {"oid": "06bde3aba39bf8a3d41d40b5feb72f06842389cc", "url": "https://github.com/ls1intum/Artemis/commit/06bde3aba39bf8a3d41d40b5feb72f06842389cc", "message": "removed unused Pattern and refactor URL", "committedDate": "2020-12-02T09:59:22Z", "type": "commit"}, {"oid": "892b65635224eff5ea01fe1f44eea001bed827e2", "url": "https://github.com/ls1intum/Artemis/commit/892b65635224eff5ea01fe1f44eea001bed827e2", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics", "committedDate": "2020-12-02T09:59:36Z", "type": "commit"}, {"oid": "e437e19987e1db86f8be8026923a1d1be3b8099d", "url": "https://github.com/ls1intum/Artemis/commit/e437e19987e1db86f8be8026923a1d1be3b8099d", "message": "remove unused pattern", "committedDate": "2020-12-02T10:18:05Z", "type": "commit"}, {"oid": "c28777a4b7e9277e90cd36e2c8393421b7fad135", "url": "https://github.com/ls1intum/Artemis/commit/c28777a4b7e9277e90cd36e2c8393421b7fad135", "message": "set graph min, refactor server side", "committedDate": "2020-12-02T13:00:27Z", "type": "commit"}, {"oid": "ec2dd757fe90b8b298c49ac20c408b84be5350af", "url": "https://github.com/ls1intum/Artemis/commit/ec2dd757fe90b8b298c49ac20c408b84be5350af", "message": "Arrow functionality", "committedDate": "2020-12-07T10:09:57Z", "type": "commit"}, {"oid": "6f77bfa8770730cfa37cffce51b9114eadaefbb9", "url": "https://github.com/ls1intum/Artemis/commit/6f77bfa8770730cfa37cffce51b9114eadaefbb9", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics-periods", "committedDate": "2020-12-07T10:40:03Z", "type": "commit"}, {"oid": "034a94bf007a598d34c9bb3eb8eac5f75cb80b5d", "url": "https://github.com/ls1intum/Artemis/commit/034a94bf007a598d34c9bb3eb8eac5f75cb80b5d", "message": "improved arrow functionality and removed deprecated code", "committedDate": "2020-12-07T11:51:31Z", "type": "commit"}, {"oid": "ed0cd4ba68d5c0bf21fe8d4f939030c873cccf78", "url": "https://github.com/ls1intum/Artemis/commit/ed0cd4ba68d5c0bf21fe8d4f939030c873cccf78", "message": "added active users graph, refactored to more efficient db query", "committedDate": "2020-12-08T16:57:51Z", "type": "commit"}, {"oid": "5777cfd8322460d0213460a3a805b9b79f1cb7c5", "url": "https://github.com/ls1intum/Artemis/commit/5777cfd8322460d0213460a3a805b9b79f1cb7c5", "message": "bugfix", "committedDate": "2020-12-08T18:33:04Z", "type": "commit"}, {"oid": "217d0f121aa536af0fe3e6d50a94863844432af2", "url": "https://github.com/ls1intum/Artemis/commit/217d0f121aa536af0fe3e6d50a94863844432af2", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics-periods", "committedDate": "2020-12-08T19:11:54Z", "type": "commit"}, {"oid": "b8294e071e18e2492813fe3a1623603f8e6694ad", "url": "https://github.com/ls1intum/Artemis/commit/b8294e071e18e2492813fe3a1623603f8e6694ad", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics-periods", "committedDate": "2020-12-12T11:56:03Z", "type": "commit"}, {"oid": "49ed7b284f6ed994c4d4b0814af44636d91987ee", "url": "https://github.com/ls1intum/Artemis/commit/49ed7b284f6ed994c4d4b0814af44636d91987ee", "message": "new graphs and server side refactoring", "committedDate": "2020-12-12T13:34:58Z", "type": "commit"}, {"oid": "87d229e2b652cf1f2bbb30567dcf522d8a963155", "url": "https://github.com/ls1intum/Artemis/commit/87d229e2b652cf1f2bbb30567dcf522d8a963155", "message": "refactored client side to encapsulate graph", "committedDate": "2020-12-12T16:05:30Z", "type": "commit"}, {"oid": "9491d442350cc34a23ce9b23205ffd0c9c1f07e4", "url": "https://github.com/ls1intum/Artemis/commit/9491d442350cc34a23ce9b23205ffd0c9c1f07e4", "message": "removed unused variables, imports and methods. changed db return value to hour for day", "committedDate": "2020-12-12T17:51:30Z", "type": "commit"}, {"oid": "717c1e4b2161bf408d2712e0cc5ab644e56accbf", "url": "https://github.com/ls1intum/Artemis/commit/717c1e4b2161bf408d2712e0cc5ab644e56accbf", "message": "docu refactoring and a bugfix", "committedDate": "2020-12-12T20:32:00Z", "type": "commit"}, {"oid": "674f426cb9d0355c5a5f3e724dbce2b7a28e7db3", "url": "https://github.com/ls1intum/Artemis/commit/674f426cb9d0355c5a5f3e724dbce2b7a28e7db3", "message": "workaround for distinct issue", "committedDate": "2020-12-13T16:43:39Z", "type": "commit"}, {"oid": "ac936fab8c1728c52344842051a355d6c8296790", "url": "https://github.com/ls1intum/Artemis/commit/ac936fab8c1728c52344842051a355d6c8296790", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics-periods", "committedDate": "2020-12-13T16:44:04Z", "type": "commit"}, {"oid": "cc941fba5954550b6a21f4e0a091546fd6a446c3", "url": "https://github.com/ls1intum/Artemis/commit/cc941fba5954550b6a21f4e0a091546fd6a446c3", "message": "working version with workaround", "committedDate": "2020-12-14T16:05:09Z", "type": "commit"}, {"oid": "5113f8ed992a222f8f36bb7410948905ab459c6c", "url": "https://github.com/ls1intum/Artemis/commit/5113f8ed992a222f8f36bb7410948905ab459c6c", "message": "bugfix and minor docu refactoring", "committedDate": "2020-12-14T22:07:02Z", "type": "commit"}, {"oid": "b871aba5cd219b2f30b93c6a278df2439e44ec95", "url": "https://github.com/ls1intum/Artemis/commit/b871aba5cd219b2f30b93c6a278df2439e44ec95", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics-periods", "committedDate": "2020-12-14T22:07:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1OTUwMg==", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r543159502", "bodyText": "As this is an admin-only feature, I'd restrict this endpoint to Admins only.", "author": "jpbernius", "createdAt": "2020-12-15T08:56:29Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java", "diffHunk": "@@ -27,146 +27,18 @@ public StatisticsResource(StatisticsService service) {\n     }\n \n     /**\n-     * GET management/statistics/users : get the amount of logged in user in the last \"span\" days.\n+     * GET management/statistics/data : get the graph data in the last \"span\" days in the given period.\n      *\n-     * @param span the period of which the amount should be calculated\n-     * @return the ResponseEntity with status 200 (OK) and the amount of users in body, or status 404 (Not Found)\n+     * @param span the spantime of which the amount should be calculated\n+     * @param periodIndex an index indicating which time period, 0 is current week, -1 is one week in the past, -2 is two weeks in the past ...\n+     * @param graphType the type of graph the data should be fetched\n+     * @return the ResponseEntity with status 200 (OK) and the data in body, or status 404 (Not Found)\n      */\n-    @GetMapping(\"management/statistics/users\")\n+    @GetMapping(\"management/statistics/data\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")", "originalCommit": "b871aba5cd219b2f30b93c6a278df2439e44ec95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3OTIzMw==", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r543279233", "bodyText": "You are right, adjusted that in this commit", "author": "FuchsDominik", "createdAt": "2020-12-15T11:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1OTUwMg=="}], "type": "inlineReview", "revised_code": {"commit": "29286d4a70141478ca0c1481b0295e4ef7abc44b", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java\nindex edd086672..f28203ff0 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java\n\n@@ -35,7 +35,7 @@ public class StatisticsResource {\n      * @return the ResponseEntity with status 200 (OK) and the data in body, or status 404 (Not Found)\n      */\n     @GetMapping(\"management/statistics/data\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @PreAuthorize(\"hasRole('ADMIN')\")\n     public ResponseEntity<Integer[]> getChartData(@RequestParam SpanType span, @RequestParam Integer periodIndex, @RequestParam GraphType graphType) {\n         log.debug(\"REST request to get graph data\");\n         return ResponseEntity.ok(this.service.getChartData(span, periodIndex, graphType));\n"}}, {"oid": "29286d4a70141478ca0c1481b0295e4ef7abc44b", "url": "https://github.com/ls1intum/Artemis/commit/29286d4a70141478ca0c1481b0295e4ef7abc44b", "message": "pr review and codacy", "committedDate": "2020-12-15T11:50:41Z", "type": "commit"}, {"oid": "dc9d434a248d1a05c95d8ed774b028a720e5ff5b", "url": "https://github.com/ls1intum/Artemis/commit/dc9d434a248d1a05c95d8ed774b028a720e5ff5b", "message": "remove legend after pr review", "committedDate": "2020-12-15T15:21:01Z", "type": "commit"}, {"oid": "c16f4b7afac2d4b518fcd75ff6d28830a57ce8cf", "url": "https://github.com/ls1intum/Artemis/commit/c16f4b7afac2d4b518fcd75ff6d28830a57ce8cf", "message": "made chart variables package private and remove input comment", "committedDate": "2020-12-16T11:18:30Z", "type": "commit"}, {"oid": "ac368e98fd1c308512f046a95b52609dbdfda208", "url": "https://github.com/ls1intum/Artemis/commit/ac368e98fd1c308512f046a95b52609dbdfda208", "message": "Merge branch 'develop' into feature/user-statistics-periods", "committedDate": "2020-12-16T11:36:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNzUxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544307515", "bodyText": "We already have a username variable, so why not use !usersInSameSlot.contains(username)) here?", "author": "FrankeLukas", "createdAt": "2020-12-16T13:42:57Z", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -139,56 +169,133 @@ public Integer getActiveUsers(Long span) {\n     }\n \n     /**\n-     * Gets a List of Maps, each Map describing an entry in the database. The Map has the two keys \"day\" and \"amount\",\n-     * which map to the date and the amount of submissions. This Method handles the spanType YEAR\n+     * Gets a list of maps, each map describing an entry in the database. The map has the two keys \"day\" and \"amount\",\n+     * which map to the date and the amount of the findings. This method handles the spanType YEAR\n      *\n      * @param outcome A List<Map<String, Object>>, containing the content which should be refactored into an array\n      * @param result the array in which the converted outcome should be inserted\n-     * @param currentDate the current time\n-     * @return a array, containing the values for each bar in the graph\n+     * @param endDate the endDate\n+     * @return an array, containing the values for each bar in the graph\n      */\n-    private Integer[] createSubmissionCountArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime currentDate) {\n+    private Integer[] createResultArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime endDate) {\n         for (Map<String, Object> map : outcome) {\n             ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n             Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n             for (int i = 0; i < 12; i++) {\n-                if (date.getMonth() == currentDate.minusMonths(i).getMonth() && date.getYear() == currentDate.minusMonths(i).getYear()) {\n+                if (date.getMonth() == endDate.minusMonths(i).getMonth()) {\n                     result[11 - i] += amount;\n                 }\n             }\n         }\n         return result;\n     }\n \n-    public Integer getReleasedExercises(Long span) {\n-        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExerciseDeadlines(Long span) {\n-        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getConductedExams(Long span) {\n-        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExamParticipations(Long span) {\n-        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getExamRegistrations(Long span) {\n-        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getActiveTutors(Long span) {\n-        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getCreatedResults(Long span) {\n-        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    /**\n+    * This method handles the duplicity of usernames in the active user call. It gets a List<Map<String, Object>> analogue to previous methods, but instead of numbers in an amount key,\n+    * it contains a username key with the actual username as value. It then handles all the usernames and returns a List<Map<String, Object>>, but now with the the key \"amount\"\n+    * and value the number of users in this interval\n+    *\n+    * @param span DAY,WEEK,MONTH or YEAR\n+    * @param result the result given by the Repository call\n+    * @param startDate the startDate of the period\n+    * @return A List<Map<String, Object>> analogue to other database calls\n+    */\n+    private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n+        List<Map<String, Object>> returnList = new ArrayList<>();\n+        switch (span) {\n+            case DAY -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getHour());\n+                    // if this hour is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }   // if the value of the map for this hour does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {", "originalCommit": "ac368e98fd1c308512f046a95b52609dbdfda208", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1OTYzNg==", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544359636", "bodyText": "true, adjusted that in this commit", "author": "FuchsDominik", "createdAt": "2020-12-16T14:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNzUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0e63a45bd195a1e39a220f42840ea55ed66660b0", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java b/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\nindex 5489cdf52..98c64be50 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\n\n@@ -202,83 +202,47 @@ public class StatisticsService {\n     */\n     private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n         List<Map<String, Object>> returnList = new ArrayList<>();\n-        switch (span) {\n-            case DAY -> {\n-                Map<Integer, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getHour());\n-                    // if this hour is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getHour(), usersInSameSlot);\n-                    }   // if the value of the map for this hour does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getHour(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withHour(k));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+        Map<Object, List<String>> users = new HashMap<>();\n+        for (Map<String, Object> listElement : result) {\n+            Object index;\n+            ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+            if (span == SpanType.DAY) {\n+                index = date.getHour();\n             }\n-            case WEEK, MONTH -> {\n-                Map<Integer, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getDayOfMonth());\n-                    // if this day is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getDayOfMonth(), usersInSameSlot);\n-                    }   // if the value of the map for this day does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getDayOfMonth(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withDayOfMonth(k));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+            else if (span == SpanType.WEEK || span == SpanType.MONTH) {\n+                index = date.getDayOfMonth();\n             }\n-            case YEAR -> {\n-                Map<Month, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getMonth());\n-                    // if this month is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getMonth(), usersInSameSlot);\n-                    }   // if the value of the map for this month does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getMonth(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withMonth(getMonthIndex(k)));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+            else {\n+                index = date.getMonth();\n             }\n-            default -> {\n-                return returnList;\n+            String username = listElement.get(\"username\").toString();\n+            List<String> usersInSameSlot = users.get(index);\n+            // if this index is not yet existing in users\n+            if (usersInSameSlot == null) {\n+                usersInSameSlot = new ArrayList<>();\n+                usersInSameSlot.add(username);\n+                users.put(index, usersInSameSlot);\n+            }   // if the value of the map for this index does not contain this username\n+            else if (!usersInSameSlot.contains(username)) {\n+                usersInSameSlot.add(username);\n             }\n         }\n+        users.forEach((k, v) -> {\n+            Object start;\n+            if (span == SpanType.DAY) {\n+                start = startDate.withHour((Integer) k);\n+            }\n+            else if (span == SpanType.WEEK || span == SpanType.MONTH) {\n+                start = startDate.withDayOfMonth((Integer) k);\n+            }\n+            else {\n+                start = startDate.withMonth(getMonthIndex((Month) k));\n+            }\n+            Map<String, Object> listElement = new HashMap<>();\n+            listElement.put(\"day\", start);\n+            listElement.put(\"amount\", (long) v.size());\n+            returnList.add(listElement);\n+        });\n         return returnList;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwODk3Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544308977", "bodyText": "Same here.", "author": "FrankeLukas", "createdAt": "2020-12-16T13:44:59Z", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -139,56 +169,133 @@ public Integer getActiveUsers(Long span) {\n     }\n \n     /**\n-     * Gets a List of Maps, each Map describing an entry in the database. The Map has the two keys \"day\" and \"amount\",\n-     * which map to the date and the amount of submissions. This Method handles the spanType YEAR\n+     * Gets a list of maps, each map describing an entry in the database. The map has the two keys \"day\" and \"amount\",\n+     * which map to the date and the amount of the findings. This method handles the spanType YEAR\n      *\n      * @param outcome A List<Map<String, Object>>, containing the content which should be refactored into an array\n      * @param result the array in which the converted outcome should be inserted\n-     * @param currentDate the current time\n-     * @return a array, containing the values for each bar in the graph\n+     * @param endDate the endDate\n+     * @return an array, containing the values for each bar in the graph\n      */\n-    private Integer[] createSubmissionCountArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime currentDate) {\n+    private Integer[] createResultArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime endDate) {\n         for (Map<String, Object> map : outcome) {\n             ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n             Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n             for (int i = 0; i < 12; i++) {\n-                if (date.getMonth() == currentDate.minusMonths(i).getMonth() && date.getYear() == currentDate.minusMonths(i).getYear()) {\n+                if (date.getMonth() == endDate.minusMonths(i).getMonth()) {\n                     result[11 - i] += amount;\n                 }\n             }\n         }\n         return result;\n     }\n \n-    public Integer getReleasedExercises(Long span) {\n-        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExerciseDeadlines(Long span) {\n-        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getConductedExams(Long span) {\n-        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExamParticipations(Long span) {\n-        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getExamRegistrations(Long span) {\n-        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getActiveTutors(Long span) {\n-        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getCreatedResults(Long span) {\n-        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    /**\n+    * This method handles the duplicity of usernames in the active user call. It gets a List<Map<String, Object>> analogue to previous methods, but instead of numbers in an amount key,\n+    * it contains a username key with the actual username as value. It then handles all the usernames and returns a List<Map<String, Object>>, but now with the the key \"amount\"\n+    * and value the number of users in this interval\n+    *\n+    * @param span DAY,WEEK,MONTH or YEAR\n+    * @param result the result given by the Repository call\n+    * @param startDate the startDate of the period\n+    * @return A List<Map<String, Object>> analogue to other database calls\n+    */\n+    private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n+        List<Map<String, Object>> returnList = new ArrayList<>();\n+        switch (span) {\n+            case DAY -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getHour());\n+                    // if this hour is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }   // if the value of the map for this hour does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }\n+                }\n+                users.forEach((k, v) -> {\n+                    Map<String, Object> listElement = new HashMap<>();\n+                    listElement.put(\"day\", startDate.withHour(k));\n+                    listElement.put(\"amount\", (long) v.size());\n+                    returnList.add(listElement);\n+                });\n+            }\n+            case WEEK, MONTH -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getDayOfMonth());\n+                    // if this day is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getDayOfMonth(), usersInSameSlot);\n+                    }   // if the value of the map for this day does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {", "originalCommit": "ac368e98fd1c308512f046a95b52609dbdfda208", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e63a45bd195a1e39a220f42840ea55ed66660b0", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java b/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\nindex 5489cdf52..98c64be50 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\n\n@@ -202,83 +202,47 @@ public class StatisticsService {\n     */\n     private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n         List<Map<String, Object>> returnList = new ArrayList<>();\n-        switch (span) {\n-            case DAY -> {\n-                Map<Integer, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getHour());\n-                    // if this hour is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getHour(), usersInSameSlot);\n-                    }   // if the value of the map for this hour does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getHour(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withHour(k));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+        Map<Object, List<String>> users = new HashMap<>();\n+        for (Map<String, Object> listElement : result) {\n+            Object index;\n+            ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+            if (span == SpanType.DAY) {\n+                index = date.getHour();\n             }\n-            case WEEK, MONTH -> {\n-                Map<Integer, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getDayOfMonth());\n-                    // if this day is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getDayOfMonth(), usersInSameSlot);\n-                    }   // if the value of the map for this day does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getDayOfMonth(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withDayOfMonth(k));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+            else if (span == SpanType.WEEK || span == SpanType.MONTH) {\n+                index = date.getDayOfMonth();\n             }\n-            case YEAR -> {\n-                Map<Month, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getMonth());\n-                    // if this month is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getMonth(), usersInSameSlot);\n-                    }   // if the value of the map for this month does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getMonth(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withMonth(getMonthIndex(k)));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+            else {\n+                index = date.getMonth();\n             }\n-            default -> {\n-                return returnList;\n+            String username = listElement.get(\"username\").toString();\n+            List<String> usersInSameSlot = users.get(index);\n+            // if this index is not yet existing in users\n+            if (usersInSameSlot == null) {\n+                usersInSameSlot = new ArrayList<>();\n+                usersInSameSlot.add(username);\n+                users.put(index, usersInSameSlot);\n+            }   // if the value of the map for this index does not contain this username\n+            else if (!usersInSameSlot.contains(username)) {\n+                usersInSameSlot.add(username);\n             }\n         }\n+        users.forEach((k, v) -> {\n+            Object start;\n+            if (span == SpanType.DAY) {\n+                start = startDate.withHour((Integer) k);\n+            }\n+            else if (span == SpanType.WEEK || span == SpanType.MONTH) {\n+                start = startDate.withDayOfMonth((Integer) k);\n+            }\n+            else {\n+                start = startDate.withMonth(getMonthIndex((Month) k));\n+            }\n+            Map<String, Object> listElement = new HashMap<>();\n+            listElement.put(\"day\", start);\n+            listElement.put(\"amount\", (long) v.size());\n+            returnList.add(listElement);\n+        });\n         return returnList;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwOTA5Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544309093", "bodyText": "And here.", "author": "FrankeLukas", "createdAt": "2020-12-16T13:45:08Z", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -139,56 +169,133 @@ public Integer getActiveUsers(Long span) {\n     }\n \n     /**\n-     * Gets a List of Maps, each Map describing an entry in the database. The Map has the two keys \"day\" and \"amount\",\n-     * which map to the date and the amount of submissions. This Method handles the spanType YEAR\n+     * Gets a list of maps, each map describing an entry in the database. The map has the two keys \"day\" and \"amount\",\n+     * which map to the date and the amount of the findings. This method handles the spanType YEAR\n      *\n      * @param outcome A List<Map<String, Object>>, containing the content which should be refactored into an array\n      * @param result the array in which the converted outcome should be inserted\n-     * @param currentDate the current time\n-     * @return a array, containing the values for each bar in the graph\n+     * @param endDate the endDate\n+     * @return an array, containing the values for each bar in the graph\n      */\n-    private Integer[] createSubmissionCountArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime currentDate) {\n+    private Integer[] createResultArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime endDate) {\n         for (Map<String, Object> map : outcome) {\n             ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n             Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n             for (int i = 0; i < 12; i++) {\n-                if (date.getMonth() == currentDate.minusMonths(i).getMonth() && date.getYear() == currentDate.minusMonths(i).getYear()) {\n+                if (date.getMonth() == endDate.minusMonths(i).getMonth()) {\n                     result[11 - i] += amount;\n                 }\n             }\n         }\n         return result;\n     }\n \n-    public Integer getReleasedExercises(Long span) {\n-        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExerciseDeadlines(Long span) {\n-        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getConductedExams(Long span) {\n-        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExamParticipations(Long span) {\n-        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getExamRegistrations(Long span) {\n-        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getActiveTutors(Long span) {\n-        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getCreatedResults(Long span) {\n-        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    /**\n+    * This method handles the duplicity of usernames in the active user call. It gets a List<Map<String, Object>> analogue to previous methods, but instead of numbers in an amount key,\n+    * it contains a username key with the actual username as value. It then handles all the usernames and returns a List<Map<String, Object>>, but now with the the key \"amount\"\n+    * and value the number of users in this interval\n+    *\n+    * @param span DAY,WEEK,MONTH or YEAR\n+    * @param result the result given by the Repository call\n+    * @param startDate the startDate of the period\n+    * @return A List<Map<String, Object>> analogue to other database calls\n+    */\n+    private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n+        List<Map<String, Object>> returnList = new ArrayList<>();\n+        switch (span) {\n+            case DAY -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getHour());\n+                    // if this hour is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }   // if the value of the map for this hour does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }\n+                }\n+                users.forEach((k, v) -> {\n+                    Map<String, Object> listElement = new HashMap<>();\n+                    listElement.put(\"day\", startDate.withHour(k));\n+                    listElement.put(\"amount\", (long) v.size());\n+                    returnList.add(listElement);\n+                });\n+            }\n+            case WEEK, MONTH -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getDayOfMonth());\n+                    // if this day is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getDayOfMonth(), usersInSameSlot);\n+                    }   // if the value of the map for this day does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getDayOfMonth(), usersInSameSlot);\n+                    }\n+                }\n+                users.forEach((k, v) -> {\n+                    Map<String, Object> listElement = new HashMap<>();\n+                    listElement.put(\"day\", startDate.withDayOfMonth(k));\n+                    listElement.put(\"amount\", (long) v.size());\n+                    returnList.add(listElement);\n+                });\n+            }\n+            case YEAR -> {\n+                Map<Month, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getMonth());\n+                    // if this month is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getMonth(), usersInSameSlot);\n+                    }   // if the value of the map for this month does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {", "originalCommit": "ac368e98fd1c308512f046a95b52609dbdfda208", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e63a45bd195a1e39a220f42840ea55ed66660b0", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java b/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\nindex 5489cdf52..98c64be50 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\n\n@@ -202,83 +202,47 @@ public class StatisticsService {\n     */\n     private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n         List<Map<String, Object>> returnList = new ArrayList<>();\n-        switch (span) {\n-            case DAY -> {\n-                Map<Integer, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getHour());\n-                    // if this hour is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getHour(), usersInSameSlot);\n-                    }   // if the value of the map for this hour does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getHour(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withHour(k));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+        Map<Object, List<String>> users = new HashMap<>();\n+        for (Map<String, Object> listElement : result) {\n+            Object index;\n+            ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+            if (span == SpanType.DAY) {\n+                index = date.getHour();\n             }\n-            case WEEK, MONTH -> {\n-                Map<Integer, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getDayOfMonth());\n-                    // if this day is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getDayOfMonth(), usersInSameSlot);\n-                    }   // if the value of the map for this day does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getDayOfMonth(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withDayOfMonth(k));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+            else if (span == SpanType.WEEK || span == SpanType.MONTH) {\n+                index = date.getDayOfMonth();\n             }\n-            case YEAR -> {\n-                Map<Month, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getMonth());\n-                    // if this month is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getMonth(), usersInSameSlot);\n-                    }   // if the value of the map for this month does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getMonth(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withMonth(getMonthIndex(k)));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+            else {\n+                index = date.getMonth();\n             }\n-            default -> {\n-                return returnList;\n+            String username = listElement.get(\"username\").toString();\n+            List<String> usersInSameSlot = users.get(index);\n+            // if this index is not yet existing in users\n+            if (usersInSameSlot == null) {\n+                usersInSameSlot = new ArrayList<>();\n+                usersInSameSlot.add(username);\n+                users.put(index, usersInSameSlot);\n+            }   // if the value of the map for this index does not contain this username\n+            else if (!usersInSameSlot.contains(username)) {\n+                usersInSameSlot.add(username);\n             }\n         }\n+        users.forEach((k, v) -> {\n+            Object start;\n+            if (span == SpanType.DAY) {\n+                start = startDate.withHour((Integer) k);\n+            }\n+            else if (span == SpanType.WEEK || span == SpanType.MONTH) {\n+                start = startDate.withDayOfMonth((Integer) k);\n+            }\n+            else {\n+                start = startDate.withMonth(getMonthIndex((Month) k));\n+            }\n+            Map<String, Object> listElement = new HashMap<>();\n+            listElement.put(\"day\", start);\n+            listElement.put(\"amount\", (long) v.size());\n+            returnList.add(listElement);\n+        });\n         return returnList;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxOTgyMg==", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544319822", "bodyText": "This method really looks like it has some duplication. Can we do something like the following?\nprivate List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n\tList<Map<String, Object>> returnList = new ArrayList<>();\n\tMap<Integer, List<String>> users = new HashMap<>();\n\t\n\tfor (Map<String, Object> listElement : result) {\n\t\tObject index;\n\t\tZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n\t\tif (span == DAY) {\n\t\t\tindex = date.getHour();\n\t\t} else if (span == WEEK || span == MONTH) {\n\t\t\tindex = date.getDayOfMonth();\n\t\t} else {\n\t\t\tindex = date.getMonth();\n\t\t}\n\n\t\tString username = listElement.get(\"username\").toString();\n\t\tList<String> usersInSameSlot = users.get(index);\n\t\tif (usersInSameSlot == null) {\n\t\t\tusersInSameSlot = new ArrayList<>();\n\t\t\tusersInSameSlot.add(username);\n\t\t\tusers.put(index, usersInSameSlot);\n\t\t} else if (!usersInSameSlot.contains(username))) {\n\t\t\tusersInSameSlot.add(username);\n\t\t\t// btw: I don't think we need to put this again here, since we're modifying the arraylist by reference?\n\t\t\t// users.put(index, usersInSameSlot);\n\t\t}\n\t}\n\tusers.forEach((k, v) -> {\n\t\tObject start;\n\t\tif (span == DAY) {\n\t\t\tstart = startDate.withHour(k);\n\t\t} else if (span == WEEK || span == MONTH) {\n\t\t\tstart = startDate.withDayOfMonth(k);\n\t\t} else {\n\t\t\tstart = startDate.withMonth(getMonthIndex(k));\n\t\t}\n\t\n\t\tMap<String, Object> listElement = new HashMap<>();\n\t\tlistElement.put(\"day\", start);\n\t\tlistElement.put(\"amount\", (long) v.size());\n\t\treturnList.add(listElement);\n\t});\n\t\n\treturn returnList;\n}", "author": "FrankeLukas", "createdAt": "2020-12-16T14:00:03Z", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -139,56 +169,133 @@ public Integer getActiveUsers(Long span) {\n     }\n \n     /**\n-     * Gets a List of Maps, each Map describing an entry in the database. The Map has the two keys \"day\" and \"amount\",\n-     * which map to the date and the amount of submissions. This Method handles the spanType YEAR\n+     * Gets a list of maps, each map describing an entry in the database. The map has the two keys \"day\" and \"amount\",\n+     * which map to the date and the amount of the findings. This method handles the spanType YEAR\n      *\n      * @param outcome A List<Map<String, Object>>, containing the content which should be refactored into an array\n      * @param result the array in which the converted outcome should be inserted\n-     * @param currentDate the current time\n-     * @return a array, containing the values for each bar in the graph\n+     * @param endDate the endDate\n+     * @return an array, containing the values for each bar in the graph\n      */\n-    private Integer[] createSubmissionCountArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime currentDate) {\n+    private Integer[] createResultArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime endDate) {\n         for (Map<String, Object> map : outcome) {\n             ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n             Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n             for (int i = 0; i < 12; i++) {\n-                if (date.getMonth() == currentDate.minusMonths(i).getMonth() && date.getYear() == currentDate.minusMonths(i).getYear()) {\n+                if (date.getMonth() == endDate.minusMonths(i).getMonth()) {\n                     result[11 - i] += amount;\n                 }\n             }\n         }\n         return result;\n     }\n \n-    public Integer getReleasedExercises(Long span) {\n-        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExerciseDeadlines(Long span) {\n-        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getConductedExams(Long span) {\n-        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExamParticipations(Long span) {\n-        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getExamRegistrations(Long span) {\n-        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getActiveTutors(Long span) {\n-        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getCreatedResults(Long span) {\n-        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    /**\n+    * This method handles the duplicity of usernames in the active user call. It gets a List<Map<String, Object>> analogue to previous methods, but instead of numbers in an amount key,\n+    * it contains a username key with the actual username as value. It then handles all the usernames and returns a List<Map<String, Object>>, but now with the the key \"amount\"\n+    * and value the number of users in this interval\n+    *\n+    * @param span DAY,WEEK,MONTH or YEAR\n+    * @param result the result given by the Repository call\n+    * @param startDate the startDate of the period\n+    * @return A List<Map<String, Object>> analogue to other database calls\n+    */\n+    private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {", "originalCommit": "ac368e98fd1c308512f046a95b52609dbdfda208", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2MTU4Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544361583", "bodyText": "Very nice idea with the index as Object, did not think of that. I adapted your suggestion a bit and implemented it here", "author": "FuchsDominik", "createdAt": "2020-12-16T14:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxOTgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "0e63a45bd195a1e39a220f42840ea55ed66660b0", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java b/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\nindex 5489cdf52..98c64be50 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java\n\n@@ -202,83 +202,47 @@ public class StatisticsService {\n     */\n     private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n         List<Map<String, Object>> returnList = new ArrayList<>();\n-        switch (span) {\n-            case DAY -> {\n-                Map<Integer, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getHour());\n-                    // if this hour is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getHour(), usersInSameSlot);\n-                    }   // if the value of the map for this hour does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getHour(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withHour(k));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+        Map<Object, List<String>> users = new HashMap<>();\n+        for (Map<String, Object> listElement : result) {\n+            Object index;\n+            ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+            if (span == SpanType.DAY) {\n+                index = date.getHour();\n             }\n-            case WEEK, MONTH -> {\n-                Map<Integer, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getDayOfMonth());\n-                    // if this day is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getDayOfMonth(), usersInSameSlot);\n-                    }   // if the value of the map for this day does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getDayOfMonth(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withDayOfMonth(k));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+            else if (span == SpanType.WEEK || span == SpanType.MONTH) {\n+                index = date.getDayOfMonth();\n             }\n-            case YEAR -> {\n-                Map<Month, List<String>> users = new HashMap<>();\n-                for (Map<String, Object> listElement : result) {\n-                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n-                    String username = listElement.get(\"username\").toString();\n-                    List<String> usersInSameSlot = users.get(date.getMonth());\n-                    // if this month is not yet existing in users\n-                    if (usersInSameSlot == null) {\n-                        usersInSameSlot = new ArrayList<>();\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getMonth(), usersInSameSlot);\n-                    }   // if the value of the map for this month does not contain this username\n-                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n-                        usersInSameSlot.add(username);\n-                        users.put(date.getMonth(), usersInSameSlot);\n-                    }\n-                }\n-                users.forEach((k, v) -> {\n-                    Map<String, Object> listElement = new HashMap<>();\n-                    listElement.put(\"day\", startDate.withMonth(getMonthIndex(k)));\n-                    listElement.put(\"amount\", (long) v.size());\n-                    returnList.add(listElement);\n-                });\n+            else {\n+                index = date.getMonth();\n             }\n-            default -> {\n-                return returnList;\n+            String username = listElement.get(\"username\").toString();\n+            List<String> usersInSameSlot = users.get(index);\n+            // if this index is not yet existing in users\n+            if (usersInSameSlot == null) {\n+                usersInSameSlot = new ArrayList<>();\n+                usersInSameSlot.add(username);\n+                users.put(index, usersInSameSlot);\n+            }   // if the value of the map for this index does not contain this username\n+            else if (!usersInSameSlot.contains(username)) {\n+                usersInSameSlot.add(username);\n             }\n         }\n+        users.forEach((k, v) -> {\n+            Object start;\n+            if (span == SpanType.DAY) {\n+                start = startDate.withHour((Integer) k);\n+            }\n+            else if (span == SpanType.WEEK || span == SpanType.MONTH) {\n+                start = startDate.withDayOfMonth((Integer) k);\n+            }\n+            else {\n+                start = startDate.withMonth(getMonthIndex((Month) k));\n+            }\n+            Map<String, Object> listElement = new HashMap<>();\n+            listElement.put(\"day\", start);\n+            listElement.put(\"amount\", (long) v.size());\n+            returnList.add(listElement);\n+        });\n         return returnList;\n     }\n \n"}}, {"oid": "0e63a45bd195a1e39a220f42840ea55ed66660b0", "url": "https://github.com/ls1intum/Artemis/commit/0e63a45bd195a1e39a220f42840ea55ed66660b0", "message": "code review - remove duplication", "committedDate": "2020-12-16T14:47:08Z", "type": "commit"}, {"oid": "b792e26c5b374fcbdc4c15c242612fa71e4d4734", "url": "https://github.com/ls1intum/Artemis/commit/b792e26c5b374fcbdc4c15c242612fa71e4d4734", "message": "Merge branch 'feature/user-statistics-periods' of https://github.com/ls1intum/Artemis into feature/user-statistics-periods", "committedDate": "2020-12-16T14:48:33Z", "type": "commit"}, {"oid": "42d7b487360a2a40e47424323dfbe82227553811", "url": "https://github.com/ls1intum/Artemis/commit/42d7b487360a2a40e47424323dfbe82227553811", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/user-statistics-periods", "committedDate": "2020-12-16T14:48:54Z", "type": "commit"}]}