{"pr_number": 2156, "pr_title": "[Enhancement] Security & Auto-approve answers by instructors", "pr_createdAt": "2020-10-05T08:28:13Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2156", "timeline": [{"oid": "f0166d78b64c0e08319136ae4e395eea70302198", "url": "https://github.com/ls1intum/Artemis/commit/f0166d78b64c0e08319136ae4e395eea70302198", "message": "add auto approve for tutors and instructors", "committedDate": "2020-10-02T14:36:37Z", "type": "commit"}, {"oid": "55add1c555cbca136e76d0e646b736628392fa95", "url": "https://github.com/ls1intum/Artemis/commit/55add1c555cbca136e76d0e646b736628392fa95", "message": "add java tests", "committedDate": "2020-10-02T14:57:06Z", "type": "commit"}, {"oid": "ed63273c9532e6c0210a04f1dd683b8552cb8bd8", "url": "https://github.com/ls1intum/Artemis/commit/ed63273c9532e6c0210a04f1dd683b8552cb8bd8", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into enhancement/questions-answers/auto-approve", "committedDate": "2020-10-05T08:27:33Z", "type": "commit"}, {"oid": "c0c6cf2f4c5becd178940378395014e9ce78b0c2", "url": "https://github.com/ls1intum/Artemis/commit/c0c6cf2f4c5becd178940378395014e9ce78b0c2", "message": "only approved automatically if instructor", "committedDate": "2020-10-05T13:37:40Z", "type": "commit"}, {"oid": "a188451494d1670c9483e652eeec890af8feaf7d", "url": "https://github.com/ls1intum/Artemis/commit/a188451494d1670c9483e652eeec890af8feaf7d", "message": "Merge branch 'develop' into enhancement/questions-answers/auto-approve", "committedDate": "2020-10-05T13:43:26Z", "type": "commit"}, {"oid": "48a20241e28a59937a5f649e89c4fd69263ff6dc", "url": "https://github.com/ls1intum/Artemis/commit/48a20241e28a59937a5f649e89c4fd69263ff6dc", "message": "Merge branch 'develop' into enhancement/questions-answers/auto-approve", "committedDate": "2020-10-05T16:02:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NTAzOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r499765039", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(response.isTutorApproved());\n          \n          \n            \n                    assertThat(response.isTutorApproved()).isTrue();", "author": "MaisiKoleni", "createdAt": "2020-10-05T17:40:19Z", "path": "src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java", "diffHunk": "@@ -67,10 +67,44 @@ public void createStudentQuestionAnswer() throws Exception {\n         studentQuestionAnswer.setQuestion(studentQuestion);\n         StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n \n+        // should be automatically approved\n+        assertThat(response.isTutorApproved());", "originalCommit": "48a20241e28a59937a5f649e89c4fd69263ff6dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e28dc7a9a5587f13bf77c48e2099c8cbd668b70", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\nindex d758b40ea6..35315c46e2 100644\n--- a/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n\n@@ -68,7 +68,7 @@ public class StudentQuestionAnswerIntegrationTest extends AbstractSpringIntegrat\n         StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n \n         // should be automatically approved\n-        assertThat(response.isTutorApproved());\n+        assertThat(response.isTutorApproved()).isTrue();\n         // trying to create same studentQuestionAnswer again --> bad request\n         request.postWithResponseBody(\"/api/student-question-answers\", response, StudentQuestionAnswer.class, HttpStatus.BAD_REQUEST);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NTE5OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r499765199", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(!response.isTutorApproved());\n          \n          \n            \n                    assertThat(response.isTutorApproved()).isFalse();", "author": "MaisiKoleni", "createdAt": "2020-10-05T17:40:38Z", "path": "src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java", "diffHunk": "@@ -67,10 +67,44 @@ public void createStudentQuestionAnswer() throws Exception {\n         studentQuestionAnswer.setQuestion(studentQuestion);\n         StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n \n+        // should be automatically approved\n+        assertThat(response.isTutorApproved());\n         // trying to create same studentQuestionAnswer again --> bad request\n         request.postWithResponseBody(\"/api/student-question-answers\", response, StudentQuestionAnswer.class, HttpStatus.BAD_REQUEST);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void createStudentQuestionAnswerAsTA() throws Exception {\n+        StudentQuestion studentQuestion = database.createCourseWithExerciseAndStudentQuestions().get(0);\n+\n+        StudentQuestionAnswer studentQuestionAnswer = new StudentQuestionAnswer();\n+        studentQuestionAnswer.setAuthor(database.getUserByLogin(\"tutor1\"));\n+        studentQuestionAnswer.setAnswerText(\"Test Answer\");\n+        studentQuestionAnswer.setAnswerDate(ZonedDateTime.now());\n+        studentQuestionAnswer.setQuestion(studentQuestion);\n+        StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n+\n+        // shouldn't be automatically approved\n+        assertThat(!response.isTutorApproved());", "originalCommit": "48a20241e28a59937a5f649e89c4fd69263ff6dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e28dc7a9a5587f13bf77c48e2099c8cbd668b70", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\nindex d758b40ea6..35315c46e2 100644\n--- a/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n\n@@ -68,7 +68,7 @@ public class StudentQuestionAnswerIntegrationTest extends AbstractSpringIntegrat\n         StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n \n         // should be automatically approved\n-        assertThat(response.isTutorApproved());\n+        assertThat(response.isTutorApproved()).isTrue();\n         // trying to create same studentQuestionAnswer again --> bad request\n         request.postWithResponseBody(\"/api/student-question-answers\", response, StudentQuestionAnswer.class, HttpStatus.BAD_REQUEST);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NTMxNA==", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r499765314", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(!response.isTutorApproved());\n          \n          \n            \n                    assertThat(response.isTutorApproved()).isFalse();", "author": "MaisiKoleni", "createdAt": "2020-10-05T17:40:52Z", "path": "src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java", "diffHunk": "@@ -67,10 +67,44 @@ public void createStudentQuestionAnswer() throws Exception {\n         studentQuestionAnswer.setQuestion(studentQuestion);\n         StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n \n+        // should be automatically approved\n+        assertThat(response.isTutorApproved());\n         // trying to create same studentQuestionAnswer again --> bad request\n         request.postWithResponseBody(\"/api/student-question-answers\", response, StudentQuestionAnswer.class, HttpStatus.BAD_REQUEST);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void createStudentQuestionAnswerAsTA() throws Exception {\n+        StudentQuestion studentQuestion = database.createCourseWithExerciseAndStudentQuestions().get(0);\n+\n+        StudentQuestionAnswer studentQuestionAnswer = new StudentQuestionAnswer();\n+        studentQuestionAnswer.setAuthor(database.getUserByLogin(\"tutor1\"));\n+        studentQuestionAnswer.setAnswerText(\"Test Answer\");\n+        studentQuestionAnswer.setAnswerDate(ZonedDateTime.now());\n+        studentQuestionAnswer.setQuestion(studentQuestion);\n+        StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n+\n+        // shouldn't be automatically approved\n+        assertThat(!response.isTutorApproved());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void createStudentQuestionAnswerAsStudent() throws Exception {\n+        StudentQuestion studentQuestion = database.createCourseWithExerciseAndStudentQuestions().get(0);\n+\n+        StudentQuestionAnswer studentQuestionAnswer = new StudentQuestionAnswer();\n+        studentQuestionAnswer.setAuthor(database.getUserByLogin(\"tutor1\"));\n+        studentQuestionAnswer.setAnswerText(\"Test Answer\");\n+        studentQuestionAnswer.setAnswerDate(ZonedDateTime.now());\n+        studentQuestionAnswer.setQuestion(studentQuestion);\n+        StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n+\n+        // shouldn't be automatically approved\n+        assertThat(!response.isTutorApproved());", "originalCommit": "48a20241e28a59937a5f649e89c4fd69263ff6dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e28dc7a9a5587f13bf77c48e2099c8cbd668b70", "chunk": "diff --git a/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\nindex d758b40ea6..35315c46e2 100644\n--- a/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n\n@@ -68,7 +68,7 @@ public class StudentQuestionAnswerIntegrationTest extends AbstractSpringIntegrat\n         StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n \n         // should be automatically approved\n-        assertThat(response.isTutorApproved());\n+        assertThat(response.isTutorApproved()).isTrue();\n         // trying to create same studentQuestionAnswer again --> bad request\n         request.postWithResponseBody(\"/api/student-question-answers\", response, StudentQuestionAnswer.class, HttpStatus.BAD_REQUEST);\n     }\n"}}, {"oid": "5e28dc7a9a5587f13bf77c48e2099c8cbd668b70", "url": "https://github.com/ls1intum/Artemis/commit/5e28dc7a9a5587f13bf77c48e2099c8cbd668b70", "message": "Update src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n\nCo-authored-by: Christian Femers <c.femers@tum.de>", "committedDate": "2020-10-05T17:41:09Z", "type": "commit"}, {"oid": "f3679a355b51d34ec63cbfddd0aafeb1408e18a3", "url": "https://github.com/ls1intum/Artemis/commit/f3679a355b51d34ec63cbfddd0aafeb1408e18a3", "message": "Update src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n\nCo-authored-by: Christian Femers <c.femers@tum.de>", "committedDate": "2020-10-05T17:41:19Z", "type": "commit"}, {"oid": "981eca69535e162bd2e00ede149bfbe956498afa", "url": "https://github.com/ls1intum/Artemis/commit/981eca69535e162bd2e00ede149bfbe956498afa", "message": "Update src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n\nCo-authored-by: Christian Femers <c.femers@tum.de>", "committedDate": "2020-10-05T17:41:27Z", "type": "commit"}, {"oid": "2b06ca18c9a930dcfd80738cea8eab39e9cca972", "url": "https://github.com/ls1intum/Artemis/commit/2b06ca18c9a930dcfd80738cea8eab39e9cca972", "message": "fix course error", "committedDate": "2020-10-05T19:47:16Z", "type": "commit"}, {"oid": "7ef0c2f8b0778a0eb01fbd7ab9aa2ab5203e1079", "url": "https://github.com/ls1intum/Artemis/commit/7ef0c2f8b0778a0eb01fbd7ab9aa2ab5203e1079", "message": "Merge branch 'enhancement/questions-answers/auto-approve' of https://github.com/ls1intum/Artemis into enhancement/questions-answers/auto-approve", "committedDate": "2020-10-05T20:02:51Z", "type": "commit"}, {"oid": "76fae434ad5875d73be484ede42e2d10d3bd0bce", "url": "https://github.com/ls1intum/Artemis/commit/76fae434ad5875d73be484ede42e2d10d3bd0bce", "message": "fix tests", "committedDate": "2020-10-05T20:52:16Z", "type": "commit"}, {"oid": "d762f1ee0372ef37a710c8e12c9378c48038c237", "url": "https://github.com/ls1intum/Artemis/commit/d762f1ee0372ef37a710c8e12c9378c48038c237", "message": "fix undefined error in client", "committedDate": "2020-10-05T21:14:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MjM1OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r500172359", "bodyText": "there is still no security check here. Please check that the user is at least a student in the course", "author": "krusche", "createdAt": "2020-10-06T10:34:39Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java", "diffHunk": "@@ -61,19 +66,28 @@ public StudentQuestionAnswerResource(StudentQuestionAnswerRepository studentQues\n     /**\n      * POST /question-answers : Create a new studentQuestionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param studentQuestionAnswer the studentQuestionAnswer to create\n      * @return the ResponseEntity with status 201 (Created) and with body the new studentQuestionAnswer, or with status 400 (Bad Request) if the studentQuestionAnswer has already\n      *         an ID\n      * @throws URISyntaxException if the Location URI syntax is incorrect\n      */\n-    @PostMapping(\"/student-question-answers\")\n+    @PostMapping(\"courses/{courseId}/student-question-answers\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n-    public ResponseEntity<StudentQuestionAnswer> createStudentQuestionAnswer(@RequestBody StudentQuestionAnswer studentQuestionAnswer) throws URISyntaxException {\n+    public ResponseEntity<StudentQuestionAnswer> createStudentQuestionAnswer(@PathVariable Long courseId, @RequestBody StudentQuestionAnswer studentQuestionAnswer)\n+            throws URISyntaxException {", "originalCommit": "d762f1ee0372ef37a710c8e12c9378c48038c237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MjkwNg==", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r500172906", "bodyText": "If you touch this file, there are additional TODOs regarding the REST URLs and the security checks. Could you please fix those for all requests in this class and in the class StudentQuestionResource, so that all URLs and security checks are correct and consistent?\nThank you!", "author": "krusche", "createdAt": "2020-10-06T10:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MjM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fdff28cbb625b7105f77899923e11483354075d", "chunk": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java\nindex 75f377e523..0fbc38e5e0 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java\n\n@@ -77,6 +77,7 @@ public class StudentQuestionAnswerResource {\n     public ResponseEntity<StudentQuestionAnswer> createStudentQuestionAnswer(@PathVariable Long courseId, @RequestBody StudentQuestionAnswer studentQuestionAnswer)\n             throws URISyntaxException {\n         log.debug(\"REST request to save StudentQuestionAnswer : {}\", studentQuestionAnswer);\n+        User user = this.userService.getUserWithGroupsAndAuthorities();\n         if (studentQuestionAnswer.getId() != null) {\n             throw new BadRequestAlertException(\"A new studentQuestionAnswer cannot already have an ID\", ENTITY_NAME, \"idexists\");\n         }\n"}}, {"oid": "f589b495716c3555a275c9ae21a8b6cf7fe8e799", "url": "https://github.com/ls1intum/Artemis/commit/f589b495716c3555a275c9ae21a8b6cf7fe8e799", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into enhancement/questions-answers/auto-approve", "committedDate": "2020-10-08T19:06:59Z", "type": "commit"}, {"oid": "0fdff28cbb625b7105f77899923e11483354075d", "url": "https://github.com/ls1intum/Artemis/commit/0fdff28cbb625b7105f77899923e11483354075d", "message": "add course check to studentquestionanswer", "committedDate": "2020-10-08T19:52:23Z", "type": "commit"}, {"oid": "99d87adc9397a21892d2b9baed14916e27e7d6ee", "url": "https://github.com/ls1intum/Artemis/commit/99d87adc9397a21892d2b9baed14916e27e7d6ee", "message": "add course to studentquestions", "committedDate": "2020-10-09T14:22:57Z", "type": "commit"}, {"oid": "0be13b8631d8bc4d4708b3d7596381f6b63541d7", "url": "https://github.com/ls1intum/Artemis/commit/0be13b8631d8bc4d4708b3d7596381f6b63541d7", "message": "fix code style", "committedDate": "2020-10-09T20:44:14Z", "type": "commit"}, {"oid": "0fb5c688ea7d866c349ad1869a577e1588bb1bd1", "url": "https://github.com/ls1intum/Artemis/commit/0fb5c688ea7d866c349ad1869a577e1588bb1bd1", "message": "fix client tests", "committedDate": "2020-10-09T21:15:26Z", "type": "commit"}, {"oid": "1b5fbd5e771705fc370d273a67b6763a9853d2d6", "url": "https://github.com/ls1intum/Artemis/commit/1b5fbd5e771705fc370d273a67b6763a9853d2d6", "message": "remove unnecessary calls in tests", "committedDate": "2020-10-09T21:18:50Z", "type": "commit"}, {"oid": "064d7eb8250895104ce189e8d4ccc282f905f4d1", "url": "https://github.com/ls1intum/Artemis/commit/064d7eb8250895104ce189e8d4ccc282f905f4d1", "message": "remove unnecessary pt. 2", "committedDate": "2020-10-09T21:20:42Z", "type": "commit"}, {"oid": "6d8ee41b132a5998ac2b260b9e35466bacb3bab5", "url": "https://github.com/ls1intum/Artemis/commit/6d8ee41b132a5998ac2b260b9e35466bacb3bab5", "message": "remove more unnecessary", "committedDate": "2020-10-09T22:20:28Z", "type": "commit"}, {"oid": "9354edd134cb3a1b716f04efcdf90074046c469c", "url": "https://github.com/ls1intum/Artemis/commit/9354edd134cb3a1b716f04efcdf90074046c469c", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into enhancement/questions-answers/auto-approve\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionResource.java", "committedDate": "2020-10-14T22:08:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxMDQ2MA==", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r505610460", "bodyText": "As a malicious API user, I can circumvent this check by providing a course id not matching the studentQuestionAnswer. In this case, I can auto-approve messages while only being an instructor in a different course.", "author": "jpbernius", "createdAt": "2020-10-15T14:55:47Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java", "diffHunk": "@@ -50,30 +53,43 @@\n     SingleUserNotificationService singleUserNotificationService;\n \n     public StudentQuestionAnswerResource(StudentQuestionAnswerRepository studentQuestionAnswerRepository, GroupNotificationService groupNotificationService,\n-            SingleUserNotificationService singleUserNotificationService, AuthorizationCheckService authorizationCheckService, UserService userService) {\n+            SingleUserNotificationService singleUserNotificationService, AuthorizationCheckService authorizationCheckService, UserService userService,\n+            CourseRepository courseRepository) {\n         this.studentQuestionAnswerRepository = studentQuestionAnswerRepository;\n+        this.courseRepository = courseRepository;\n         this.groupNotificationService = groupNotificationService;\n         this.singleUserNotificationService = singleUserNotificationService;\n         this.authorizationCheckService = authorizationCheckService;\n         this.userService = userService;\n     }\n \n     /**\n-     * POST /question-answers : Create a new studentQuestionAnswer.\n+     * POST /courses/{courseId}/question-answers : Create a new studentQuestionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param studentQuestionAnswer the studentQuestionAnswer to create\n      * @return the ResponseEntity with status 201 (Created) and with body the new studentQuestionAnswer, or with status 400 (Bad Request) if the studentQuestionAnswer has already\n      *         an ID\n      * @throws URISyntaxException if the Location URI syntax is incorrect\n      */\n-    @PostMapping(\"/student-question-answers\")\n+    @PostMapping(\"courses/{courseId}/student-question-answers\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n-    public ResponseEntity<StudentQuestionAnswer> createStudentQuestionAnswer(@RequestBody StudentQuestionAnswer studentQuestionAnswer) throws URISyntaxException {\n+    public ResponseEntity<StudentQuestionAnswer> createStudentQuestionAnswer(@PathVariable Long courseId, @RequestBody StudentQuestionAnswer studentQuestionAnswer)\n+            throws URISyntaxException {\n         log.debug(\"REST request to save StudentQuestionAnswer : {}\", studentQuestionAnswer);\n+        User user = this.userService.getUserWithGroupsAndAuthorities();\n         if (studentQuestionAnswer.getId() != null) {\n             throw new BadRequestAlertException(\"A new studentQuestionAnswer cannot already have an ID\", ENTITY_NAME, \"idexists\");\n         }\n+        Optional<Course> optionalCourse = courseRepository.findById(courseId);\n+        if (optionalCourse.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        if (!this.authorizationCheckService.isAtLeastStudentInCourse(optionalCourse.get(), user)) {\n+            return forbidden();\n+        }\n+        // answer to approved if written by an instructor\n+        studentQuestionAnswer.setTutorApproved(this.authorizationCheckService.isAtLeastInstructorInCourse(optionalCourse.get(), user));", "originalCommit": "9354edd134cb3a1b716f04efcdf90074046c469c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxMTI0Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r505611242", "bodyText": "Similar to above, this does not check if studentQuestionAnswer is in the same course as courseId.", "author": "jpbernius", "createdAt": "2020-10-15T14:56:36Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java", "diffHunk": "@@ -83,27 +99,32 @@ public StudentQuestionAnswerResource(StudentQuestionAnswerRepository studentQues\n             groupNotificationService.notifyTutorAndInstructorGroupAboutNewAnswerForLecture(result);\n             singleUserNotificationService.notifyUserAboutNewAnswerForLecture(result);\n         }\n-        return ResponseEntity.created(new URI(\"/api/question-answers/\" + result.getId()))\n+        return ResponseEntity.created(new URI(\"/api/courses\" + courseId + \"/student-question-answers/\" + result.getId()))\n                 .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString())).body(result);\n     }\n \n     /**\n-     * PUT /question-answers : Updates an existing studentQuestionAnswer.\n+     * PUT /courses/{courseId}/question-answers : Updates an existing studentQuestionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param studentQuestionAnswer the studentQuestionAnswer to update\n      * @return the ResponseEntity with status 200 (OK) and with body the updated studentQuestionAnswer, or with status 400 (Bad Request) if the studentQuestionAnswer is not valid,\n      *         or with status 500 (Internal Server Error) if the studentQuestionAnswer couldn't be updated\n      * @throws URISyntaxException if the Location URI syntax is incorrect\n      */\n-    @PutMapping(\"/student-question-answers\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n+    @PutMapping(\"courses/{courseId}/student-question-answers\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<StudentQuestionAnswer> updateStudentQuestionAnswer(@RequestBody StudentQuestionAnswer studentQuestionAnswer) throws URISyntaxException {\n+    public ResponseEntity<StudentQuestionAnswer> updateStudentQuestionAnswer(@PathVariable Long courseId, @RequestBody StudentQuestionAnswer studentQuestionAnswer)\n+            throws URISyntaxException {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to update StudentQuestionAnswer : {}\", studentQuestionAnswer);\n         if (studentQuestionAnswer.getId() == null) {\n             throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n         }\n+        Optional<Course> optionalCourse = courseRepository.findById(courseId);\n+        if (optionalCourse.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }", "originalCommit": "9354edd134cb3a1b716f04efcdf90074046c469c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxMTk3MA==", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r505611970", "bodyText": "Similar to above, this does not check if the requested question is in the same course as courseId.", "author": "jpbernius", "createdAt": "2020-10-15T14:57:25Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java", "diffHunk": "@@ -118,35 +139,47 @@ public StudentQuestionAnswerResource(StudentQuestionAnswerRepository studentQues\n     }\n \n     /**\n-     * GET /question-answers/:id : get the \"id\" questionAnswer.\n+     * GET /courses/{courseId}/question-answers/:id : get the \"id\" questionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param id the id of the questionAnswer to retrieve\n      * @return the ResponseEntity with status 200 (OK) and with body the questionAnswer, or with status 404 (Not Found)\n      */\n-    @GetMapping(\"/student-question-answers/{id}\")\n+    @GetMapping(\"courses/{courseId}/student-question-answers/{id}\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n-    public ResponseEntity<StudentQuestionAnswer> getStudentQuestionAnswer(@PathVariable Long id) {\n+    public ResponseEntity<StudentQuestionAnswer> getStudentQuestionAnswer(@PathVariable Long courseId, @PathVariable Long id) {\n         log.debug(\"REST request to get StudentQuestionAnswer : {}\", id);\n+        User user = this.userService.getUserWithGroupsAndAuthorities();\n+        Optional<Course> optionalCourse = courseRepository.findById(courseId);\n+        if (optionalCourse.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        if (!this.authorizationCheckService.isAtLeastStudentInCourse(optionalCourse.get(), user)) {\n+            return forbidden();\n+        }", "originalCommit": "9354edd134cb3a1b716f04efcdf90074046c469c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxMjM3NA==", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r505612374", "bodyText": "Similar to above, this does not check if the requested question is in the same course as courseId.", "author": "jpbernius", "createdAt": "2020-10-15T14:57:51Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java", "diffHunk": "@@ -118,35 +139,47 @@ public StudentQuestionAnswerResource(StudentQuestionAnswerRepository studentQues\n     }\n \n     /**\n-     * GET /question-answers/:id : get the \"id\" questionAnswer.\n+     * GET /courses/{courseId}/question-answers/:id : get the \"id\" questionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param id the id of the questionAnswer to retrieve\n      * @return the ResponseEntity with status 200 (OK) and with body the questionAnswer, or with status 404 (Not Found)\n      */\n-    @GetMapping(\"/student-question-answers/{id}\")\n+    @GetMapping(\"courses/{courseId}/student-question-answers/{id}\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n-    public ResponseEntity<StudentQuestionAnswer> getStudentQuestionAnswer(@PathVariable Long id) {\n+    public ResponseEntity<StudentQuestionAnswer> getStudentQuestionAnswer(@PathVariable Long courseId, @PathVariable Long id) {\n         log.debug(\"REST request to get StudentQuestionAnswer : {}\", id);\n+        User user = this.userService.getUserWithGroupsAndAuthorities();\n+        Optional<Course> optionalCourse = courseRepository.findById(courseId);\n+        if (optionalCourse.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        if (!this.authorizationCheckService.isAtLeastStudentInCourse(optionalCourse.get(), user)) {\n+            return forbidden();\n+        }\n         Optional<StudentQuestionAnswer> questionAnswer = studentQuestionAnswerRepository.findById(id);\n         return ResponseUtil.wrapOrNotFound(questionAnswer);\n     }\n \n     /**\n-     * DELETE /question-answers/:id : delete the \"id\" questionAnswer.\n+     * DELETE /courses/{courseId}/question-answers/:id : delete the \"id\" questionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param id the id of the questionAnswer to delete\n      * @return the ResponseEntity with status 200 (OK)\n      */\n-    @DeleteMapping(\"/student-question-answers/{id}\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n+    @DeleteMapping(\"courses/{courseId}/student-question-answers/{id}\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteStudentQuestionAnswer(@PathVariable Long id) {\n+    public ResponseEntity<Void> deleteStudentQuestionAnswer(@PathVariable Long courseId, @PathVariable Long id) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         Optional<StudentQuestionAnswer> optionalStudentQuestionAnswer = studentQuestionAnswerRepository.findById(id);\n         if (optionalStudentQuestionAnswer.isEmpty()) {\n             return ResponseEntity.notFound().build();\n         }\n+        Optional<Course> optionalCourse = courseRepository.findById(courseId);\n+        if (optionalCourse.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }", "originalCommit": "9354edd134cb3a1b716f04efcdf90074046c469c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}