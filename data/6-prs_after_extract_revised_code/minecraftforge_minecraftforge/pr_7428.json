{"pr_number": 7428, "pr_title": "[1.16.x] Add loot table ID in Global Loot Modifiers", "pr_createdAt": "2020-10-22T14:35:02Z", "pr_url": "https://github.com/MinecraftForge/MinecraftForge/pull/7428", "timeline": [{"oid": "9d1fd6e310f3621103dc7e45554a7195d1e0d64b", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/9d1fd6e310f3621103dc7e45554a7195d1e0d64b", "message": "Add working example of GLM that leverages ID\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2020-10-26T09:42:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg4NDM2MA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7428#discussion_r511884360", "bodyText": "I would make this name a bit more unique perhaps, like forge:unknown or something", "author": "Cyborgmas", "createdAt": "2020-10-26T11:15:05Z", "path": "src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Minecraft Forge\n+ * Copyright (c) 2016-2020.\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.loot;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSerializationContext;\n+import net.minecraft.loot.ILootSerializer;\n+import net.minecraft.loot.LootConditionType;\n+import net.minecraft.loot.LootContext;\n+import net.minecraft.loot.conditions.ILootCondition;\n+import net.minecraft.loot.conditions.LootConditionManager;\n+import net.minecraft.util.JSONUtils;\n+import net.minecraft.util.ResourceLocation;\n+\n+public class LootTableIdCondition implements ILootCondition {\n+    public static final ResourceLocation UNKNOWN_LOOT_TABLE = new ResourceLocation(\"forge\", \"unknown\");", "originalCommit": "27e17823cc2256ec37739ffb47895d6e97c71340", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg4NjUxNQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7428#discussion_r511886515", "bodyText": "forge:unknown_loot_table?", "author": "TheSilkMiner", "createdAt": "2020-10-26T11:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg4NDM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "f3691f5215d62843a86b426db04a7f1de0a4b931", "chunk": "diff --git a/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java b/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java\nindex 1005bec82..412386915 100644\n--- a/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java\n+++ b/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java\n\n@@ -30,51 +30,69 @@ import net.minecraft.loot.conditions.LootConditionManager;\n import net.minecraft.util.JSONUtils;\n import net.minecraft.util.ResourceLocation;\n \n-public class LootTableIdCondition implements ILootCondition {\n-    public static final ResourceLocation UNKNOWN_LOOT_TABLE = new ResourceLocation(\"forge\", \"unknown\");\n+public class LootTableIdCondition implements ILootCondition\n+{\n+    // TODO Forge Registry at some point? Maybe?\n+    public static final LootConditionType LOOT_TABLE_ID = LootConditionManager.func_237475_a_(\"forge:loot_table_id\", new Serializer());\n+    public static final ResourceLocation UNKNOWN_LOOT_TABLE = new ResourceLocation(\"forge\", \"unknown_loot_table\");\n \n     private final ResourceLocation targetLootTableId;\n \n-    private LootTableIdCondition(final ResourceLocation targetLootTableId) {\n+    private LootTableIdCondition(final ResourceLocation targetLootTableId)\n+    {\n         this.targetLootTableId = targetLootTableId;\n     }\n \n-    public static Builder builder(final ResourceLocation targetLootTableId) {\n+    public static void register()\n+    {\n+        // Empty just to cause a static init of the class\n+    }\n+\n+    public static Builder builder(final ResourceLocation targetLootTableId)\n+    {\n         return new Builder(targetLootTableId);\n     }\n \n     @Override\n-    public LootConditionType func_230419_b_() {\n-        return LootConditionManager.LOOT_TABLE_ID;\n+    public LootConditionType func_230419_b_()\n+    {\n+        return LOOT_TABLE_ID;\n     }\n \n     @Override\n-    public boolean test(LootContext lootContext) {\n+    public boolean test(LootContext lootContext)\n+    {\n         return lootContext.getQueriedLootTableId().equals(this.targetLootTableId);\n     }\n \n-    public static class Builder implements ILootCondition.IBuilder {\n+    public static class Builder implements ILootCondition.IBuilder\n+    {\n         private final ResourceLocation targetLootTableId;\n \n-        public Builder(ResourceLocation targetLootTableId) {\n+        public Builder(ResourceLocation targetLootTableId)\n+        {\n             if (targetLootTableId == null) throw new IllegalArgumentException(\"Target loot table must not be null\");\n             this.targetLootTableId = targetLootTableId;\n         }\n \n         @Override\n-        public ILootCondition build() {\n+        public ILootCondition build()\n+        {\n             return new LootTableIdCondition(this.targetLootTableId);\n         }\n     }\n \n-    public static class Serializer implements ILootSerializer<LootTableIdCondition> {\n+    public static class Serializer implements ILootSerializer<LootTableIdCondition>\n+    {\n         @Override\n-        public void func_230424_a_(JsonObject object, LootTableIdCondition instance, JsonSerializationContext serializationContext) {\n+        public void func_230424_a_(JsonObject object, LootTableIdCondition instance, JsonSerializationContext ctx)\n+        {\n             object.addProperty(\"loot_table_id\", instance.targetLootTableId.toString());\n         }\n \n         @Override\n-        public LootTableIdCondition func_230423_a_(JsonObject object, JsonDeserializationContext deserializationContext) {\n+        public LootTableIdCondition func_230423_a_(JsonObject object, JsonDeserializationContext ctx)\n+        {\n             return new LootTableIdCondition(new ResourceLocation(JSONUtils.getString(object, \"loot_table_id\")));\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg4NDk0Ng==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7428#discussion_r511884946", "bodyText": "braces { should be on new line for a forge class", "author": "Cyborgmas", "createdAt": "2020-10-26T11:16:11Z", "path": "src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Minecraft Forge\n+ * Copyright (c) 2016-2020.\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.loot;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSerializationContext;\n+import net.minecraft.loot.ILootSerializer;\n+import net.minecraft.loot.LootConditionType;\n+import net.minecraft.loot.LootContext;\n+import net.minecraft.loot.conditions.ILootCondition;\n+import net.minecraft.loot.conditions.LootConditionManager;\n+import net.minecraft.util.JSONUtils;\n+import net.minecraft.util.ResourceLocation;\n+\n+public class LootTableIdCondition implements ILootCondition {", "originalCommit": "27e17823cc2256ec37739ffb47895d6e97c71340", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3691f5215d62843a86b426db04a7f1de0a4b931", "chunk": "diff --git a/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java b/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java\nindex 1005bec82..412386915 100644\n--- a/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java\n+++ b/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java\n\n@@ -30,51 +30,69 @@ import net.minecraft.loot.conditions.LootConditionManager;\n import net.minecraft.util.JSONUtils;\n import net.minecraft.util.ResourceLocation;\n \n-public class LootTableIdCondition implements ILootCondition {\n-    public static final ResourceLocation UNKNOWN_LOOT_TABLE = new ResourceLocation(\"forge\", \"unknown\");\n+public class LootTableIdCondition implements ILootCondition\n+{\n+    // TODO Forge Registry at some point? Maybe?\n+    public static final LootConditionType LOOT_TABLE_ID = LootConditionManager.func_237475_a_(\"forge:loot_table_id\", new Serializer());\n+    public static final ResourceLocation UNKNOWN_LOOT_TABLE = new ResourceLocation(\"forge\", \"unknown_loot_table\");\n \n     private final ResourceLocation targetLootTableId;\n \n-    private LootTableIdCondition(final ResourceLocation targetLootTableId) {\n+    private LootTableIdCondition(final ResourceLocation targetLootTableId)\n+    {\n         this.targetLootTableId = targetLootTableId;\n     }\n \n-    public static Builder builder(final ResourceLocation targetLootTableId) {\n+    public static void register()\n+    {\n+        // Empty just to cause a static init of the class\n+    }\n+\n+    public static Builder builder(final ResourceLocation targetLootTableId)\n+    {\n         return new Builder(targetLootTableId);\n     }\n \n     @Override\n-    public LootConditionType func_230419_b_() {\n-        return LootConditionManager.LOOT_TABLE_ID;\n+    public LootConditionType func_230419_b_()\n+    {\n+        return LOOT_TABLE_ID;\n     }\n \n     @Override\n-    public boolean test(LootContext lootContext) {\n+    public boolean test(LootContext lootContext)\n+    {\n         return lootContext.getQueriedLootTableId().equals(this.targetLootTableId);\n     }\n \n-    public static class Builder implements ILootCondition.IBuilder {\n+    public static class Builder implements ILootCondition.IBuilder\n+    {\n         private final ResourceLocation targetLootTableId;\n \n-        public Builder(ResourceLocation targetLootTableId) {\n+        public Builder(ResourceLocation targetLootTableId)\n+        {\n             if (targetLootTableId == null) throw new IllegalArgumentException(\"Target loot table must not be null\");\n             this.targetLootTableId = targetLootTableId;\n         }\n \n         @Override\n-        public ILootCondition build() {\n+        public ILootCondition build()\n+        {\n             return new LootTableIdCondition(this.targetLootTableId);\n         }\n     }\n \n-    public static class Serializer implements ILootSerializer<LootTableIdCondition> {\n+    public static class Serializer implements ILootSerializer<LootTableIdCondition>\n+    {\n         @Override\n-        public void func_230424_a_(JsonObject object, LootTableIdCondition instance, JsonSerializationContext serializationContext) {\n+        public void func_230424_a_(JsonObject object, LootTableIdCondition instance, JsonSerializationContext ctx)\n+        {\n             object.addProperty(\"loot_table_id\", instance.targetLootTableId.toString());\n         }\n \n         @Override\n-        public LootTableIdCondition func_230423_a_(JsonObject object, JsonDeserializationContext deserializationContext) {\n+        public LootTableIdCondition func_230423_a_(JsonObject object, JsonDeserializationContext ctx)\n+        {\n             return new LootTableIdCondition(new ResourceLocation(JSONUtils.getString(object, \"loot_table_id\")));\n         }\n     }\n"}}, {"oid": "f3691f5215d62843a86b426db04a7f1de0a4b931", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/f3691f5215d62843a86b426db04a7f1de0a4b931", "message": "Expose ILootCondition registration and remove LCM patch\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2020-11-06T12:19:04Z", "type": "forcePushed"}, {"oid": "11c0572678ca6401e4b107a8aa913f06b460ac0c", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/11c0572678ca6401e4b107a8aa913f06b460ac0c", "message": "Expose ILootCondition registration and remove LCM patch\n\nThe loot condition type gets statically initialized only when\nregistering it, which in turn means it should work properly just fine in\nregards to registration order.\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2020-11-30T10:36:25Z", "type": "forcePushed"}, {"oid": "06c3ac4229e0e639710e176fcb777152738936e1", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/06c3ac4229e0e639710e176fcb777152738936e1", "message": "Expose ILootCondition registration and remove LCM patch\n\nThe loot condition type gets statically initialized only when\nregistering it, which in turn means it should work properly just fine in\nregards to registration order.\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2020-12-30T14:25:44Z", "type": "forcePushed"}, {"oid": "616b25e40ba7c4b6064041ae075c97a6b697a73d", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/616b25e40ba7c4b6064041ae075c97a6b697a73d", "message": "Expose ILootCondition registration and remove LCM patch\n\nThe loot condition type gets statically initialized only when\nregistering it, which in turn means it should work properly just fine in\nregards to registration order.\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2021-01-16T10:49:52Z", "type": "forcePushed"}, {"oid": "dfa91c1d0cc718325ff0deb3c7568c3e674514b8", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/dfa91c1d0cc718325ff0deb3c7568c3e674514b8", "message": "Allow loot table ID to be queried in GLMs\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2021-01-20T21:52:12Z", "type": "commit"}, {"oid": "4dded3f7b0dbd557bfb30da770fcafb9ffbeb524", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/4dded3f7b0dbd557bfb30da770fcafb9ffbeb524", "message": "Add working example of GLM that leverages ID\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2021-01-20T21:52:27Z", "type": "commit"}, {"oid": "3d86194742f0ca55bd9bfa562a3d17c9d6a333f6", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/3d86194742f0ca55bd9bfa562a3d17c9d6a333f6", "message": "Expose ILootCondition registration and remove LCM patch\n\nThe loot condition type gets statically initialized only when\nregistering it, which in turn means it should work properly just fine in\nregards to registration order.\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2021-01-20T21:53:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI3NjcxNQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7428#discussion_r568276715", "bodyText": "This method feels out of place here. It should either be at the top after the constants, or below right before the Builder.", "author": "gigaherz", "createdAt": "2021-02-02T02:20:50Z", "path": "src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Minecraft Forge\n+ * Copyright (c) 2016-2020.\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.loot;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSerializationContext;\n+import net.minecraft.loot.ILootSerializer;\n+import net.minecraft.loot.LootConditionType;\n+import net.minecraft.loot.LootContext;\n+import net.minecraft.loot.conditions.ILootCondition;\n+import net.minecraft.util.JSONUtils;\n+import net.minecraft.util.ResourceLocation;\n+\n+public class LootTableIdCondition implements ILootCondition\n+{\n+    // TODO Forge Registry at some point?\n+    public static final LootConditionType LOOT_TABLE_ID = new LootConditionType(new LootTableIdCondition.Serializer());\n+    public static final ResourceLocation UNKNOWN_LOOT_TABLE = new ResourceLocation(\"forge\", \"unknown_loot_table\");\n+\n+    private final ResourceLocation targetLootTableId;\n+\n+    private LootTableIdCondition(final ResourceLocation targetLootTableId)\n+    {\n+        this.targetLootTableId = targetLootTableId;\n+    }\n+\n+    public static Builder builder(final ResourceLocation targetLootTableId)", "originalCommit": "3d86194742f0ca55bd9bfa562a3d17c9d6a333f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83bc838af322fecdf2db7469c27cc1517f181b84", "chunk": "diff --git a/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java b/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java\nindex 6c763528a..97ecc305f 100644\n--- a/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java\n+++ b/src/main/java/net/minecraftforge/common/loot/LootTableIdCondition.java\n\n@@ -42,11 +42,6 @@ public class LootTableIdCondition implements ILootCondition\n         this.targetLootTableId = targetLootTableId;\n     }\n \n-    public static Builder builder(final ResourceLocation targetLootTableId)\n-    {\n-        return new Builder(targetLootTableId);\n-    }\n-\n     @Override\n     public LootConditionType func_230419_b_()\n     {\n"}}, {"oid": "83bc838af322fecdf2db7469c27cc1517f181b84", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/83bc838af322fecdf2db7469c27cc1517f181b84", "message": "Expose ILootCondition registration and remove LCM patch\n\nThe loot condition type gets statically initialized only when\nregistering it, which in turn means it should work properly just fine in\nregards to registration order.\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2021-02-02T10:06:00Z", "type": "forcePushed"}, {"oid": "061aa30cccda153c7002dc76710f74b611cf9697", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/061aa30cccda153c7002dc76710f74b611cf9697", "message": "Expose ILootCondition registration and remove LCM patch\n\nThe loot condition type gets statically initialized only when\nregistering it, which in turn means it should work properly just fine in\nregards to registration order.\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2021-02-02T12:15:05Z", "type": "commit"}, {"oid": "061aa30cccda153c7002dc76710f74b611cf9697", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/061aa30cccda153c7002dc76710f74b611cf9697", "message": "Expose ILootCondition registration and remove LCM patch\n\nThe loot condition type gets statically initialized only when\nregistering it, which in turn means it should work properly just fine in\nregards to registration order.\n\nSigned-off-by: TheSilkMiner <thesilkminer@outlook.com>", "committedDate": "2021-02-02T12:15:05Z", "type": "forcePushed"}]}