{"pr_number": 2354, "pr_title": "Add LLVM Round Instrinsic", "pr_createdAt": "2020-04-16T17:55:22Z", "pr_url": "https://github.com/oracle/graal/pull/2354", "timeline": [{"oid": "4192cc391e80ea269d148325c4e1e5488cd3669c", "url": "https://github.com/oracle/graal/commit/4192cc391e80ea269d148325c4e1e5488cd3669c", "message": "add round intrinsic", "committedDate": "2020-04-16T17:50:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NTEzOQ==", "url": "https://github.com/oracle/graal/pull/2354#discussion_r409745139", "bodyText": "I believe this is imprecise\n\n  \n    \n      graal/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/floating/LLVM80BitFloat.java\n    \n    \n         Line 689\n      in\n      6feb36b\n    \n    \n    \n    \n\n        \n          \n           // imprecise workaround for cases in which NFI isn't available", "author": "kipply", "createdAt": "2020-04-16T17:56:45Z", "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/intrinsics/c/LLVMCMathsIntrinsics.java", "diffHunk": "@@ -248,6 +248,26 @@ protected LLVM80BitFloat doIntrinsic(LLVM80BitFloat value) {\n         }\n     }\n \n+    @NodeChild(type = LLVMExpressionNode.class)\n+    public abstract static class LLVMRound extends LLVMBuiltin {\n+\n+        @Specialization\n+        protected float doIntrinsic(float value) {\n+            return (float) Math.round(value);\n+        }\n+\n+        @Specialization\n+        protected double doIntrinsic(double value) {\n+            return Math.round(value);\n+        }\n+\n+        @Specialization\n+        protected LLVM80BitFloat doIntrinsic(LLVM80BitFloat value) {\n+            double result = doIntrinsic(value.getDoubleValue());", "originalCommit": "4192cc391e80ea269d148325c4e1e5488cd3669c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEyNDY5OQ==", "url": "https://github.com/oracle/graal/pull/2354#discussion_r410124699", "bodyText": "Yes, that might lose precision, but in practice it's rarely a problem, since we're rounding anyway. This is only a problem for numbers that are big enough that the precision of double is not enough to represent a difference of 1.0 (i.e. numbers bigger than 2^52).\nIs that a problem for your use-case? Then we'd need to do a native call, similar to what we do for regular arithmetic. Unfortunately we don't have any way to directly do 80 bit floating point arithmetic in Java yet.", "author": "rschatz", "createdAt": "2020-04-17T10:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NTEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIxMzA2NQ==", "url": "https://github.com/oracle/graal/pull/2354#discussion_r410213065", "bodyText": "Yep sounds right. Probably not a problem for our use cases! Thanks~", "author": "kipply", "createdAt": "2020-04-17T13:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NTEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "69d9a21ebb1bbc13d5ef98f59f14dc853b65706f", "chunk": "diff --git a/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/intrinsics/c/LLVMCMathsIntrinsics.java b/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/intrinsics/c/LLVMCMathsIntrinsics.java\nindex 6edd8fd91ab..921d6bf0e3d 100644\n--- a/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/intrinsics/c/LLVMCMathsIntrinsics.java\n+++ b/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/intrinsics/c/LLVMCMathsIntrinsics.java\n\n@@ -253,7 +253,7 @@ public abstract class LLVMCMathsIntrinsics {\n \n         @Specialization\n         protected float doIntrinsic(float value) {\n-            return (float) Math.round(value);\n+            return Math.round(value);\n         }\n \n         @Specialization\n"}}, {"oid": "69d9a21ebb1bbc13d5ef98f59f14dc853b65706f", "url": "https://github.com/oracle/graal/commit/69d9a21ebb1bbc13d5ef98f59f14dc853b65706f", "message": "Remove unessesary `(float)`", "committedDate": "2020-04-16T19:18:44Z", "type": "commit"}, {"oid": "9f9d49e2cc59f27a280b33c1913cceb3532084a7", "url": "https://github.com/oracle/graal/commit/9f9d49e2cc59f27a280b33c1913cceb3532084a7", "message": "Update copyright year", "committedDate": "2020-04-16T22:02:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NjI0OQ==", "url": "https://github.com/oracle/graal/pull/2354#discussion_r410266249", "bodyText": "I guess we can also put llvm.round.f32 and llvm.round.f64 here, right?", "author": "rschatz", "createdAt": "2020-04-17T14:37:12Z", "path": "sulong/projects/com.oracle.truffle.llvm.parser.factories/src/com/oracle/truffle/llvm/parser/factories/BasicNodeFactory.java", "diffHunk": "@@ -1362,6 +1362,8 @@ protected LLVMExpressionNode getLLVMBuiltin(FunctionDeclaration declaration, LLV\n                     return LLVMPowNodeGen.create(args[1], args[2]);\n                 case \"llvm.powi.f80\":\n                     return LLVMPowNodeGen.create(args[1], args[2]);\n+                case \"llvm.round.f80\":", "originalCommit": "9f9d49e2cc59f27a280b33c1913cceb3532084a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzMzgyNg==", "url": "https://github.com/oracle/graal/pull/2354#discussion_r410333826", "bodyText": "Yep, let me know if you want me to commit that or if you want to add it when you merge", "author": "kipply", "createdAt": "2020-04-17T16:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NjI0OQ=="}], "type": "inlineReview", "revised_code": null}]}