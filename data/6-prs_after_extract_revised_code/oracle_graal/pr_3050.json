{"pr_number": 3050, "pr_title": "[GR-32289] Programmatic serialization registration from inside features", "pr_createdAt": "2020-12-06T17:40:02Z", "pr_url": "https://github.com/oracle/graal/pull/3050", "timeline": [{"oid": "9b4dedd1b67a1bb3b53f0ca96454e7c5bc08adcb", "url": "https://github.com/oracle/graal/commit/9b4dedd1b67a1bb3b53f0ca96454e7c5bc08adcb", "message": "serialization registration from inside features", "committedDate": "2020-12-06T18:14:50Z", "type": "forcePushed"}, {"oid": "4dc8d37a0fd322673657e1aa7fc2b46a9be7ea70", "url": "https://github.com/oracle/graal/commit/4dc8d37a0fd322673657e1aa7fc2b46a9be7ea70", "message": "serialization registration from inside features", "committedDate": "2020-12-06T19:04:21Z", "type": "forcePushed"}, {"oid": "87a1c27585c91cfba4b7d07d4116d6b32dacd68a", "url": "https://github.com/oracle/graal/commit/87a1c27585c91cfba4b7d07d4116d6b32dacd68a", "message": "serialization registration from inside features", "committedDate": "2020-12-06T19:27:35Z", "type": "forcePushed"}, {"oid": "d323592f98089c553b3228a8b857681bcceedad3", "url": "https://github.com/oracle/graal/commit/d323592f98089c553b3228a8b857681bcceedad3", "message": "serialization registration from inside features", "committedDate": "2020-12-11T23:07:57Z", "type": "forcePushed"}, {"oid": "f64be274855230dbee5443f69247a78b348dcc70", "url": "https://github.com/oracle/graal/commit/f64be274855230dbee5443f69247a78b348dcc70", "message": "serialization registration from inside features", "committedDate": "2020-12-12T11:29:17Z", "type": "forcePushed"}, {"oid": "e238f576e8bfc316d0f8c1920d7c247471809bc8", "url": "https://github.com/oracle/graal/commit/e238f576e8bfc316d0f8c1920d7c247471809bc8", "message": "serialization registration from inside features", "committedDate": "2020-12-17T12:20:53Z", "type": "forcePushed"}, {"oid": "acea686b4527b5bc805b7369e7a2967d1720383a", "url": "https://github.com/oracle/graal/commit/acea686b4527b5bc805b7369e7a2967d1720383a", "message": "serialization registration from inside features", "committedDate": "2020-12-17T13:44:18Z", "type": "forcePushed"}, {"oid": "a96fa4359e7916c87a49c3a6a47118412df6c9f4", "url": "https://github.com/oracle/graal/commit/a96fa4359e7916c87a49c3a6a47118412df6c9f4", "message": "serialization registration from inside features", "committedDate": "2020-12-20T12:47:31Z", "type": "forcePushed"}, {"oid": "012872406ba6f5e2bfbdf1405c56f9988137246c", "url": "https://github.com/oracle/graal/commit/012872406ba6f5e2bfbdf1405c56f9988137246c", "message": "serialization registration from inside features", "committedDate": "2020-12-20T13:22:00Z", "type": "forcePushed"}, {"oid": "561fc0078f66d63024be64f75358add76e8300b1", "url": "https://github.com/oracle/graal/commit/561fc0078f66d63024be64f75358add76e8300b1", "message": "serialization registration from inside features", "committedDate": "2020-12-20T17:52:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI3OTc5MQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r553279791", "bodyText": "Having a default method here just to save a few lines of code over here \n  \n    \n      graal/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java\n    \n    \n         Line 98\n      in\n      561fc00\n    \n    \n    \n    \n\n        \n          \n           new SerializationRegistryAdapter((clazz, checkSums) -> deniedClasses.put(clazz, true), imageClassLoader)); \n        \n    \n  \n\n seems like a bad idea.", "author": "olpaw", "createdAt": "2021-01-07T11:47:22Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or\n+ * data (collectively the \"Software\"), free of charge and under any and all\n+ * copyright rights in the Software, and any and all patent rights owned or\n+ * freely licensable by each licensor hereunder covering either (i) the\n+ * unmodified Software as contributed to or provided by such licensor, or (ii)\n+ * the Larger Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ *\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ *\n+ * The above copyright notice and either this complete permission notice or at a\n+ * minimum a reference to the UPL must be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.graalvm.nativeimage.impl;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+public interface RuntimeSerializationSupport {\n+\n+    default void register(Class<?>... classes) {", "originalCommit": "561fc0078f66d63024be64f75358add76e8300b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyOTYyNw==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r554929627", "bodyText": "fixed", "author": "kkriske", "createdAt": "2021-01-11T09:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI3OTc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9cef9bd2606c18832b54eca0785006d63c5966eb", "chunk": "diff --git a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java\nindex 2e7c748cd28..0158d33669c 100644\n--- a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java\n+++ b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java\n\n@@ -41,15 +41,10 @@\n package org.graalvm.nativeimage.impl;\n \n import java.util.Collection;\n-import java.util.Collections;\n \n public interface RuntimeSerializationSupport {\n \n-    default void register(Class<?>... classes) {\n-        for (Class<?> clazz : classes) {\n-            register(clazz, Collections.emptyList());\n-        }\n-    }\n+    void register(Class<?>... classes);\n \n     void register(Class<?> clazz, Collection<String> checkSums);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI4MDY3OQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r553280679", "bodyText": "Adding public API requires corresponding changes in https://github.com/oracle/graal/blob/561fc0078f66d63024be64f75358add76e8300b1/sdk/src/org.graalvm.nativeimage/snapshot.sigtest", "author": "olpaw", "createdAt": "2021-01-07T11:49:29Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or\n+ * data (collectively the \"Software\"), free of charge and under any and all\n+ * copyright rights in the Software, and any and all patent rights owned or\n+ * freely licensable by each licensor hereunder covering either (i) the\n+ * unmodified Software as contributed to or provided by such licensor, or (ii)\n+ * the Larger Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ *\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ *\n+ * The above copyright notice and either this complete permission notice or at a\n+ * minimum a reference to the UPL must be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.graalvm.nativeimage.hosted;\n+\n+import org.graalvm.nativeimage.ImageSingletons;\n+import org.graalvm.nativeimage.Platform;\n+import org.graalvm.nativeimage.Platforms;\n+import org.graalvm.nativeimage.impl.RuntimeSerializationSupport;\n+\n+@Platforms(Platform.HOSTED_ONLY.class)\n+public final class RuntimeSerialization {", "originalCommit": "561fc0078f66d63024be64f75358add76e8300b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI4MTI3OA==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r553281278", "bodyText": "Use mx sigtest --check all in sdk to verify you got your changes to snapshot.sigtest right.", "author": "olpaw", "createdAt": "2021-01-07T11:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI4MDY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyOTcwNQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r554929705", "bodyText": "fixed", "author": "kkriske", "createdAt": "2021-01-11T09:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI4MDY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "87813992770104978d520d2ee5bd963bdf48ff44", "chunk": "diff --git a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java\nindex 843166d287c..d8d9a107c18 100644\n--- a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java\n+++ b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * The Universal Permissive License (UPL), Version 1.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQwODAyNA==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r553408024", "bodyText": "RuntimeSerializationSupportImpl must not be an inner class of hosted class SerializationFeature. It extends com.oracle.svm.reflect.serialize.SerializationSupport which holds data that will be part of an image. We do not allow any hosted classes to get built into an image. If you build an image that uses serialization with image builder assertions enabled (native-image -J-ea) you would run into issues with com.oracle.svm.hosted.NativeImageGenerator#checkName.", "author": "olpaw", "createdAt": "2021-01-07T15:42:07Z", "path": "substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java", "diffHunk": "@@ -209,6 +200,28 @@ static void println(String str) {\n         System.out.println(str);\n         // Checkstyle: resume\n     }\n+\n+    private class RuntimeSerializationSupportImpl extends SerializationSupport implements RuntimeSerializationSupport {", "originalCommit": "561fc0078f66d63024be64f75358add76e8300b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzMTM5OQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r554931399", "bodyText": "This is no longer an inner class.\nI was however unable to recreate any issues with -J-ea with the previous implementation, so couldn't check if the current implementation mitigates that issue.", "author": "kkriske", "createdAt": "2021-01-11T09:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQwODAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "9cef9bd2606c18832b54eca0785006d63c5966eb", "chunk": "diff --git a/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java b/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java\nindex fc3b9be8fd1..83e27c4ff3d 100644\n--- a/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java\n+++ b/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java\n\n@@ -177,51 +259,12 @@ public class SerializationFeature implements Feature {\n         }\n     }\n \n-    @Override\n-    public void afterAnalysis(AfterAnalysisAccess access) {\n+    public void afterAnalysis(Feature.AfterAnalysisAccess access) {\n         sealed = true;\n         if (!newClasses.isEmpty()) {\n             abortIfSealed();\n         }\n     }\n-\n-    @Override\n-    public void beforeCompilation(BeforeCompilationAccess access) {\n-        if (ImageSingletons.contains(FallbackFeature.class)) {\n-            FallbackFeature.FallbackImageRequest serializationFallback = ImageSingletons.lookup(FallbackFeature.class).serializationFallback;\n-            if (serializationFallback != null && loadedConfigurations == 0) {\n-                throw serializationFallback;\n-            }\n-        }\n-    }\n-\n-    static void println(String str) {\n-        // Checkstyle: stop\n-        System.out.println(str);\n-        // Checkstyle: resume\n-    }\n-\n-    private class RuntimeSerializationSupportImpl extends SerializationSupport implements RuntimeSerializationSupport {\n-\n-        @Override\n-        public void register(Class<?> clazz, Collection<String> checkSums) {\n-            abortIfSealed();\n-            if (!Serializable.class.isAssignableFrom(clazz)) {\n-                println(\"WARNING: Could not register \" + clazz.getName() + \" for serialization as it does not implement Serializable.\");\n-            } else if (deniedClasses.containsKey(clazz)) {\n-                if (deniedClasses.get(clazz)) {\n-                    deniedClasses.put(clazz, false); /* Warn only once */\n-                    println(\"WARNING: Serialization deny list contains \" + clazz.getName() + \". Image will not support serialization/deserialization of this class.\");\n-                }\n-            } else {\n-                newClasses.compute(clazz, (k, v) -> {\n-                    Set<String> storedCheckSums = v != null ? v : new HashSet<>();\n-                    storedCheckSums.addAll(checkSums);\n-                    return storedCheckSums;\n-                });\n-            }\n-        }\n-    }\n }\n \n final class SerializationBuilder {\n"}}, {"oid": "9cef9bd2606c18832b54eca0785006d63c5966eb", "url": "https://github.com/oracle/graal/commit/9cef9bd2606c18832b54eca0785006d63c5966eb", "message": "serialization registration from inside features", "committedDate": "2021-01-11T09:54:02Z", "type": "forcePushed"}, {"oid": "c1e8cfe1e8778cdac14e281ff12d3ded20952d36", "url": "https://github.com/oracle/graal/commit/c1e8cfe1e8778cdac14e281ff12d3ded20952d36", "message": "serialization registration from inside features", "committedDate": "2021-01-11T10:53:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5MzA0NQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r554993045", "bodyText": "RuntimeSerializationSupportImpl is in package com.oracle.svm.reflect.serialize.hosted yet it extends SerializationSupport. We do not allow classes with package names *.hosted to be part of the image heap. But this is exactly what happens when you make the RuntimeSerializationSupport ImageSingleton a *.hosted-class. We depend on the RuntimeSerializationSupport ImageSingleton at image runtime (via getSerializationConstructorAccessor). Please keep classes that end up in the image heap strictly separate from classes that are only needed at image build time (for configuration).", "author": "olpaw", "createdAt": "2021-01-11T11:50:02Z", "path": "substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java", "diffHunk": "@@ -40,82 +40,170 @@\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.security.NoSuchAlgorithmException;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import org.graalvm.nativeimage.ImageSingletons;\n import org.graalvm.nativeimage.hosted.Feature;\n import org.graalvm.nativeimage.hosted.RuntimeReflection;\n+import org.graalvm.nativeimage.impl.RuntimeSerializationSupport;\n \n import com.oracle.svm.core.annotate.AutomaticFeature;\n import com.oracle.svm.core.configure.ConfigurationFiles;\n import com.oracle.svm.core.configure.SerializationConfigurationParser;\n-import com.oracle.svm.core.configure.SerializationConfigurationParser.SerializationParserFunction;\n+import com.oracle.svm.core.configure.SerializationDenyConfigurationParser;\n import com.oracle.svm.core.jdk.Package_jdk_internal_reflect;\n-import com.oracle.svm.core.jdk.serialize.SerializationRegistry;\n import com.oracle.svm.core.option.SubstrateOptionsParser;\n import com.oracle.svm.core.util.UserError;\n import com.oracle.svm.core.util.VMError;\n-import com.oracle.svm.core.util.json.JSONParserException;\n import com.oracle.svm.hosted.FallbackFeature;\n import com.oracle.svm.hosted.FeatureImpl;\n import com.oracle.svm.hosted.ImageClassLoader;\n import com.oracle.svm.hosted.NativeImageOptions;\n import com.oracle.svm.hosted.config.ConfigurationParserUtils;\n+import com.oracle.svm.hosted.config.SerializationRegistryAdapter;\n import com.oracle.svm.reflect.serialize.SerializationSupport;\n import com.oracle.svm.util.ReflectionUtil;\n import com.oracle.svm.util.SerializationChecksumCalculator;\n \n-import jdk.vm.ci.meta.MetaUtil;\n-\n @AutomaticFeature\n public class SerializationFeature implements Feature {\n+    private RuntimeSerializationSupportImpl runtimeSerializationSupport;\n     private int loadedConfigurations;\n \n     @Override\n-    public void beforeAnalysis(BeforeAnalysisAccess a) {\n-        FeatureImpl.BeforeAnalysisAccessImpl access = (FeatureImpl.BeforeAnalysisAccessImpl) a;\n+    public void duringSetup(DuringSetupAccess a) {\n+        FeatureImpl.DuringSetupAccessImpl access = (FeatureImpl.DuringSetupAccessImpl) a;\n+\n+        SerializationDenyRegistry serializationDenyRegistry = new SerializationDenyRegistry();\n         SerializationBuilder serializationBuilder = new SerializationBuilder(access);\n+        runtimeSerializationSupport = new RuntimeSerializationSupportImpl(serializationDenyRegistry, serializationBuilder);", "originalCommit": "c1e8cfe1e8778cdac14e281ff12d3ded20952d36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5NzE1OA==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r554997158", "bodyText": "I suggest you instead make SerializationBuilder extend RuntimeSerializationSupport. Then RuntimeSerializationSupport could be an additional ImageSingleton that only exists at image built time and does not have anything to do with the SerializationRegistry ImageSingleton that is needed in the image heap.", "author": "olpaw", "createdAt": "2021-01-11T11:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5MzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwNTM5OA==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r555005398", "bodyText": "I didn't see the second comment before commenting my self on this, so appologies for the notification spam probably.\nThere is no logic provided for ImageSingleton to remove a singleton. Am I right in assuming that, since ImageSingleton lookups are done at build-time, the additional SerializationBuilder stored in the ImageSingletons will be automatically removed since it's no longer reachable?", "author": "kkriske", "createdAt": "2021-01-11T12:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5MzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwNzYwNQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r555007605", "bodyText": "the additional SerializationBuilder stored in the ImageSingletons will be automatically removed since it's no longer reachable?\n\nCorrect!", "author": "olpaw", "createdAt": "2021-01-11T12:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5MzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA2NDAzNA==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r555064034", "bodyText": "fixed", "author": "kkriske", "createdAt": "2021-01-11T13:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5MzA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "84da4f9929a5ba11aa88240bdd5aa10082923601", "chunk": "diff --git a/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java b/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java\nindex 5f6c96a28ea..5cc3de8702e 100644\n--- a/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java\n+++ b/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationFeature.java\n\n@@ -48,6 +48,7 @@ import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import com.oracle.svm.reflect.serialize.SerializationRegistry;\n import org.graalvm.nativeimage.ImageSingletons;\n import org.graalvm.nativeimage.hosted.Feature;\n import org.graalvm.nativeimage.hosted.RuntimeReflection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5NDk5MQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r554994991", "bodyText": "Do not move SerializationRegistry to a *.hosted package name. See https://github.com/oracle/graal/pull/3050/files#r554993045", "author": "olpaw", "createdAt": "2021-01-11T11:53:48Z", "path": "substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationRegistry.java", "diffHunk": "@@ -23,7 +23,7 @@\n  * or visit www.oracle.com if you need additional information or have any\n  * questions.\n  */\n-package com.oracle.svm.core.jdk.serialize;\n+package com.oracle.svm.reflect.serialize.hosted;", "originalCommit": "c1e8cfe1e8778cdac14e281ff12d3ded20952d36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA2Mzg5NQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r555063895", "bodyText": "moved to parent package", "author": "kkriske", "createdAt": "2021-01-11T13:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5NDk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "84da4f9929a5ba11aa88240bdd5aa10082923601", "chunk": "diff --git a/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationRegistry.java b/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/SerializationRegistry.java\nsimilarity index 96%\nrename from substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationRegistry.java\nrename to substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/SerializationRegistry.java\nindex f487287c2bb..946ff9565d4 100644\n--- a/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/SerializationRegistry.java\n+++ b/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/SerializationRegistry.java\n\n@@ -23,7 +23,7 @@\n  * or visit www.oracle.com if you need additional information or have any\n  * questions.\n  */\n-package com.oracle.svm.reflect.serialize.hosted;\n+package com.oracle.svm.reflect.serialize;\n \n public interface SerializationRegistry {\n \n"}}, {"oid": "84da4f9929a5ba11aa88240bdd5aa10082923601", "url": "https://github.com/oracle/graal/commit/84da4f9929a5ba11aa88240bdd5aa10082923601", "message": "serialization registration from inside features", "committedDate": "2021-01-11T12:57:21Z", "type": "forcePushed"}, {"oid": "f1c7dad4e941b855b8ebd97369ecc7f71338165b", "url": "https://github.com/oracle/graal/commit/f1c7dad4e941b855b8ebd97369ecc7f71338165b", "message": "serialization registration from inside features", "committedDate": "2021-01-11T14:03:47Z", "type": "forcePushed"}, {"oid": "95dbeae353bf52afebcfb708d6a711e9a39dca5c", "url": "https://github.com/oracle/graal/commit/95dbeae353bf52afebcfb708d6a711e9a39dca5c", "message": "serialization registration from inside features", "committedDate": "2021-01-11T14:55:32Z", "type": "forcePushed"}, {"oid": "04a28ad5411b609bdfa227f651412f8df5bb4ea6", "url": "https://github.com/oracle/graal/commit/04a28ad5411b609bdfa227f651412f8df5bb4ea6", "message": "serialization registration from inside features", "committedDate": "2021-01-30T20:00:30Z", "type": "forcePushed"}, {"oid": "0de81dfdf0e4af545ce27cf2e3b5273e07422fd4", "url": "https://github.com/oracle/graal/commit/0de81dfdf0e4af545ce27cf2e3b5273e07422fd4", "message": "serialization registration from inside features", "committedDate": "2021-01-30T20:06:48Z", "type": "forcePushed"}, {"oid": "c83d2f54123fb50cb8e7f09e1ce949f61556d6a8", "url": "https://github.com/oracle/graal/commit/c83d2f54123fb50cb8e7f09e1ce949f61556d6a8", "message": "serialization registration from inside features", "committedDate": "2021-03-07T12:57:42Z", "type": "forcePushed"}, {"oid": "2d05e4e2de823a7dbbcf811990c58d6d3db2203f", "url": "https://github.com/oracle/graal/commit/2d05e4e2de823a7dbbcf811990c58d6d3db2203f", "message": "serialization registration from inside features", "committedDate": "2021-03-21T20:48:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgzMTUwMQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r671831501", "bodyText": "Should the naming of these be changed to for example registerWithTargetConstructorClass? To avoid confusion between the vararg register call.", "author": "kkriske", "createdAt": "2021-07-18T11:58:28Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or\n+ * data (collectively the \"Software\"), free of charge and under any and all\n+ * copyright rights in the Software, and any and all patent rights owned or\n+ * freely licensable by each licensor hereunder covering either (i) the\n+ * unmodified Software as contributed to or provided by such licensor, or (ii)\n+ * the Larger Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ *\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ *\n+ * The above copyright notice and either this complete permission notice or at a\n+ * minimum a reference to the UPL must be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.graalvm.nativeimage.impl;\n+\n+public interface RuntimeSerializationSupport {\n+\n+    void register(Class<?>... classes);\n+\n+    void register(Class<?> clazz, Class<?> customTargetConstructorClazz);\n+\n+    void register(String className, String customTargetConstructorClassName);", "originalCommit": "2d05e4e2de823a7dbbcf811990c58d6d3db2203f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTg1MTgzNg==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r681851836", "bodyText": "Makes sense. Please change accordingly.", "author": "olpaw", "createdAt": "2021-08-03T15:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTgzMTUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "87813992770104978d520d2ee5bd963bdf48ff44", "chunk": "diff --git a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java\nindex 1ef8f6dc803..f0cdcb97938 100644\n--- a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java\n+++ b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * The Universal Permissive License (UPL), Version 1.0\n"}}, {"oid": "f20affb3329191d92bb6032b149f457edd720b19", "url": "https://github.com/oracle/graal/commit/f20affb3329191d92bb6032b149f457edd720b19", "message": "serialization registration from inside features", "committedDate": "2021-07-21T23:12:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTg1MDQ1Nw==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r681850457", "bodyText": "Public API needs JavaDoc comment", "author": "olpaw", "createdAt": "2021-08-03T15:06:52Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or\n+ * data (collectively the \"Software\"), free of charge and under any and all\n+ * copyright rights in the Software, and any and all patent rights owned or\n+ * freely licensable by each licensor hereunder covering either (i) the\n+ * unmodified Software as contributed to or provided by such licensor, or (ii)\n+ * the Larger Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ *\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ *\n+ * The above copyright notice and either this complete permission notice or at a\n+ * minimum a reference to the UPL must be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.graalvm.nativeimage.hosted;\n+\n+import org.graalvm.nativeimage.ImageSingletons;\n+import org.graalvm.nativeimage.Platform;\n+import org.graalvm.nativeimage.Platforms;\n+import org.graalvm.nativeimage.impl.RuntimeSerializationSupport;\n+\n+@Platforms(Platform.HOSTED_ONLY.class)\n+public final class RuntimeSerialization {\n+\n+    public static void register(Class<?>... classes) {", "originalCommit": "f20affb3329191d92bb6032b149f457edd720b19", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87813992770104978d520d2ee5bd963bdf48ff44", "chunk": "diff --git a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java\nindex 843166d287c..d8d9a107c18 100644\n--- a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java\n+++ b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * The Universal Permissive License (UPL), Version 1.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTg1MDU0Nw==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r681850547", "bodyText": "Public API needs JavaDoc comment", "author": "olpaw", "createdAt": "2021-08-03T15:07:01Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or\n+ * data (collectively the \"Software\"), free of charge and under any and all\n+ * copyright rights in the Software, and any and all patent rights owned or\n+ * freely licensable by each licensor hereunder covering either (i) the\n+ * unmodified Software as contributed to or provided by such licensor, or (ii)\n+ * the Larger Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ *\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ *\n+ * The above copyright notice and either this complete permission notice or at a\n+ * minimum a reference to the UPL must be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.graalvm.nativeimage.hosted;\n+\n+import org.graalvm.nativeimage.ImageSingletons;\n+import org.graalvm.nativeimage.Platform;\n+import org.graalvm.nativeimage.Platforms;\n+import org.graalvm.nativeimage.impl.RuntimeSerializationSupport;\n+\n+@Platforms(Platform.HOSTED_ONLY.class)\n+public final class RuntimeSerialization {", "originalCommit": "f20affb3329191d92bb6032b149f457edd720b19", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87813992770104978d520d2ee5bd963bdf48ff44", "chunk": "diff --git a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java\nindex 843166d287c..d8d9a107c18 100644\n--- a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java\n+++ b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/RuntimeSerialization.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * The Universal Permissive License (UPL), Version 1.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTg4NDgxMw==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r681884813", "bodyText": "Nice refactoring!", "author": "olpaw", "createdAt": "2021-08-03T15:45:42Z", "path": "substratevm/src/com.oracle.svm.configure/src/com/oracle/svm/configure/config/SignatureUtil.java", "diffHunk": "@@ -69,4 +69,29 @@ public static String toInternalSignature(List<?> parameterTypes) {\n         }\n         return sb.append(')').toString();\n     }\n+\n+    public static String toInternalClassName(String qualifiedForNameString) {", "originalCommit": "f20affb3329191d92bb6032b149f457edd720b19", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTg4NTkwOQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r681885909", "bodyText": "2021", "author": "olpaw", "createdAt": "2021-08-03T15:46:59Z", "path": "substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/package-info.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.", "originalCommit": "f20affb3329191d92bb6032b149f457edd720b19", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87813992770104978d520d2ee5bd963bdf48ff44", "chunk": "diff --git a/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/package-info.java b/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/package-info.java\nindex 9d86e824401..4ed038fb614 100644\n--- a/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/package-info.java\n+++ b/substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/package-info.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n"}}, {"oid": "87813992770104978d520d2ee5bd963bdf48ff44", "url": "https://github.com/oracle/graal/commit/87813992770104978d520d2ee5bd963bdf48ff44", "message": "serialization registration from inside features", "committedDate": "2021-08-03T19:49:54Z", "type": "forcePushed"}, {"oid": "1b212ebf24bc69b32459386ba42738c038e5ec9c", "url": "https://github.com/oracle/graal/commit/1b212ebf24bc69b32459386ba42738c038e5ec9c", "message": "Serialization registration from inside features", "committedDate": "2021-08-04T22:49:37Z", "type": "commit"}, {"oid": "1b212ebf24bc69b32459386ba42738c038e5ec9c", "url": "https://github.com/oracle/graal/commit/1b212ebf24bc69b32459386ba42738c038e5ec9c", "message": "Serialization registration from inside features", "committedDate": "2021-08-04T22:49:37Z", "type": "forcePushed"}, {"oid": "05f48f745f82629707c24fe02db970106c5beb90", "url": "https://github.com/oracle/graal/commit/05f48f745f82629707c24fe02db970106c5beb90", "message": "Style fix", "committedDate": "2021-08-05T09:37:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM3NDA3Mw==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r683374073", "bodyText": "Shouldn't this already match our hosted-only package filter?", "author": "peter-hofer", "createdAt": "2021-08-05T11:39:41Z", "path": "substratevm/src/com.oracle.svm.reflect/src/com/oracle/svm/reflect/serialize/hosted/package-info.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+@Platforms(Platform.HOSTED_ONLY.class)\n+package com.oracle.svm.reflect.serialize.hosted;", "originalCommit": "05f48f745f82629707c24fe02db970106c5beb90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzQwMzA1NQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r683403055", "bodyText": "This is fine. It's the same as in svm/reflect/proxy/hosted/package-info.java:26", "author": "olpaw", "createdAt": "2021-08-05T12:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM3NDA3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM3NTIyMg==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r683375222", "bodyText": "It's dangerous to have a test-specific feature as an @AutomaticFeature like this because it might be enabled for other tests or on an even broader scope. Please use @RequiredFeatures.", "author": "peter-hofer", "createdAt": "2021-08-05T11:41:34Z", "path": "substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/SerializationRegistrationTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2021, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import com.oracle.svm.core.annotate.AutomaticFeature;\n+import com.oracle.svm.core.util.VMError;\n+import org.graalvm.nativeimage.hosted.Feature;\n+import org.graalvm.nativeimage.hosted.RuntimeSerialization;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class SerializationRegistrationTest {\n+\n+    public static class SerializableTestClass implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+        private final String content;\n+\n+        public SerializableTestClass(String content) {\n+            this.content = content;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (o == null || getClass() != o.getClass()) {\n+                return false;\n+            }\n+            SerializableTestClass that = (SerializableTestClass) o;\n+            return Objects.equals(content, that.content);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(content);\n+        }\n+    }\n+\n+    private static final byte[] serializedObject;\n+    private static final List<SerializableTestClass> list;\n+\n+    static {\n+        list = new ArrayList<>();\n+        list.add(new SerializableTestClass(\"Dummy\"));\n+        list.add(new SerializableTestClass(\"Test\"));\n+\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+        try {\n+            ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);\n+            objectOutputStream.writeObject(list);\n+            objectOutputStream.flush();\n+        } catch (IOException e) {\n+            VMError.shouldNotReachHere(e);\n+        }\n+\n+        serializedObject = byteArrayOutputStream.toByteArray();\n+    }\n+\n+    @Test\n+    public void testSerializationRegistration() throws IOException, ClassNotFoundException {\n+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(serializedObject);\n+        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);\n+        Object deserializedObject = objectInputStream.readObject();\n+        Assert.assertEquals(list, deserializedObject);\n+    }\n+}\n+\n+@AutomaticFeature", "originalCommit": "05f48f745f82629707c24fe02db970106c5beb90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM4Njg2MA==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r683386860", "bodyText": "Unfortunately @RequiredFeatures is part of com.oracle.svm.enterprise.test.runner.RequiredFeatures\nI suggested using @AutomaticFeature because we are also using it in src/com/oracle/svm/test/NativeImageResourceFileSystemProviderTest.java.\n@kkriske alternatively to @peter-hofer s suggestion we can do the following:\n\nRemove the @AutomaticFeature annotation here\nAdd --features=com.oracle.svm.test.SerializationRegistrationTestFeature to Args in substratevm/src/com.oracle.svm.test/src/META-INF/native-image/com.oracle.svm.test/native-image.properties\n\nThis has the same effect as using @AutomaticFeature without the risk of having that feature enabled in other context then testing.", "author": "olpaw", "createdAt": "2021-08-05T12:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM3NTIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "8e12b11f9b01645fdde5bfdc8a1c829ba224dd35", "chunk": "diff --git a/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/SerializationRegistrationTest.java b/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/SerializationRegistrationTest.java\nindex f757ba599e7..2a53ef6f8f5 100644\n--- a/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/SerializationRegistrationTest.java\n+++ b/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/SerializationRegistrationTest.java\n\n@@ -34,7 +34,6 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n \n-import com.oracle.svm.core.annotate.AutomaticFeature;\n import com.oracle.svm.core.util.VMError;\n import org.graalvm.nativeimage.hosted.Feature;\n import org.graalvm.nativeimage.hosted.RuntimeSerialization;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM3OTIzMQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r683379231", "bodyText": "If these are not exposed through RuntimeSerialization, we should move them to an internal subinterface.", "author": "peter-hofer", "createdAt": "2021-08-05T11:48:14Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/impl/RuntimeSerializationSupport.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or\n+ * data (collectively the \"Software\"), free of charge and under any and all\n+ * copyright rights in the Software, and any and all patent rights owned or\n+ * freely licensable by each licensor hereunder covering either (i) the\n+ * unmodified Software as contributed to or provided by such licensor, or (ii)\n+ * the Larger Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ *\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ *\n+ * The above copyright notice and either this complete permission notice or at a\n+ * minimum a reference to the UPL must be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.graalvm.nativeimage.impl;\n+\n+public interface RuntimeSerializationSupport {\n+\n+    void register(Class<?>... classes);\n+\n+    void registerWithTargetConstructorClass(Class<?> clazz, Class<?> customTargetConstructorClazz);\n+\n+    void registerWithTargetConstructorClass(String className, String customTargetConstructorClassName);", "originalCommit": "05f48f745f82629707c24fe02db970106c5beb90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM5NjAxMQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r683396011", "bodyText": "@kkriske please also add these two to org.graalvm.nativeimage.hosted.RuntimeSerialization. There are cases were users have to use them and I guess they would be happy if they could it via the API.", "author": "olpaw", "createdAt": "2021-08-05T12:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM3OTIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzQ3ODA4MQ==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r683478081", "bodyText": "Wouldn't the first one be enough? The (String, String) method is mostly there to facilitate the config files. When called from RuntimeSerialization it will crash if the String arguments do not resolve to an actual class so you might as well resolve them first before calling the (Class<?>, Class<?>) version.", "author": "kkriske", "createdAt": "2021-08-05T13:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM3OTIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzQ4NzgwMA==", "url": "https://github.com/oracle/graal/pull/3050#discussion_r683487800", "bodyText": "Yes the first one is enough.", "author": "olpaw", "createdAt": "2021-08-05T14:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM3OTIzMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "091c0e14de155f6b78303ebfd24ae2c4e3a09401", "url": "https://github.com/oracle/graal/commit/091c0e14de155f6b78303ebfd24ae2c4e3a09401", "message": "Add missing module export", "committedDate": "2021-08-05T12:28:19Z", "type": "commit"}, {"oid": "8e12b11f9b01645fdde5bfdc8a1c829ba224dd35", "url": "https://github.com/oracle/graal/commit/8e12b11f9b01645fdde5bfdc8a1c829ba224dd35", "message": "Add 'registerWithTargetConstructorClass' call to public API, fix NPE in SerializationConfigurationType sorting", "committedDate": "2021-08-05T18:35:19Z", "type": "commit"}, {"oid": "12fadf14e83d53294f494e0259623b6dd0bcb3e1", "url": "https://github.com/oracle/graal/commit/12fadf14e83d53294f494e0259623b6dd0bcb3e1", "message": "Improve API method documentation", "committedDate": "2021-08-09T08:07:10Z", "type": "commit"}]}