{"pr_number": 2360, "pr_title": "Support WithExceptionNode in IntrinsicGraphBuilder", "pr_createdAt": "2020-04-18T03:02:43Z", "pr_url": "https://github.com/oracle/graal/pull/2360", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjQ0OQ==", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410706449", "bodyText": "This should just be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            AbstractBeginNode normalSuccessor;\n          \n          \n            \n                            if (withExceptionNode instanceof SingleMemoryKill) {\n          \n          \n            \n                                normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n          \n          \n            \n                            } else if (withExceptionNode instanceof MultiMemoryKill) {\n          \n          \n            \n                                normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n          \n          \n            \n                            } else {\n          \n          \n            \n                                assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n          \n          \n            \n                                normalSuccessor = graph.add(new BeginNode());\n          \n          \n            \n                            }\n          \n          \n            \n                            AbstractBeginNode normalSuccessor = withExceptionNode.createNextBegin();\n          \n      \n    \n    \n  \n\nLooks good to me otherwise.", "author": "gergo-", "createdAt": "2020-04-18T14:41:52Z", "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "diffHunk": "@@ -134,12 +146,46 @@ protected IntrinsicGraphBuilder(OptionValues options, DebugContext debug, CorePr\n                 FixedWithNextNode fixedWithNextNode = (FixedWithNextNode) fixedNode;\n                 assert fixedWithNextNode.next() == null : \"cannot append instruction to instruction which isn't end\";\n                 lastInstr = fixedWithNextNode;\n+\n+            } else if (fixedNode instanceof WithExceptionNode) {\n+                WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n+                AbstractBeginNode normalSuccessor;\n+                if (withExceptionNode instanceof SingleMemoryKill) {\n+                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n+                } else if (withExceptionNode instanceof MultiMemoryKill) {\n+                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n+                } else {\n+                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n+                    normalSuccessor = graph.add(new BeginNode());\n+                }", "originalCommit": "c858675537ceef8035c9cccd64528f15e30747e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzQ5MA==", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410793490", "bodyText": "Thanks, didn't know that method exists. But I'm glad it does.", "author": "christianwimmer", "createdAt": "2020-04-19T02:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b6ab04484877b0b7268abd2c911d66fac4025ff", "chunk": "diff --git a/compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java b/compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java\nindex 59e86f33ca9..e77a6762465 100644\n--- a/compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java\n+++ b/compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java\n\n@@ -149,17 +143,9 @@ public class IntrinsicGraphBuilder implements GraphBuilderContext, Receiver {\n \n             } else if (fixedNode instanceof WithExceptionNode) {\n                 WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n-                AbstractBeginNode normalSuccessor;\n-                if (withExceptionNode instanceof SingleMemoryKill) {\n-                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n-                } else if (withExceptionNode instanceof MultiMemoryKill) {\n-                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n-                } else {\n-                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n-                    normalSuccessor = graph.add(new BeginNode());\n-                }\n+                AbstractBeginNode normalSuccessor = graph.add(withExceptionNode.createNextBegin());\n                 ExceptionObjectNode exceptionSuccessor = graph.add(new ExceptionObjectNode(getMetaAccess()));\n-                setExeptionState(exceptionSuccessor);\n+                setExceptionState(exceptionSuccessor);\n                 exceptionSuccessor.setNext(graph.add(new UnwindNode(exceptionSuccessor)));\n \n                 if (unwindCreated) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNzMyMw==", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410707323", "bodyText": "typo: Exeption", "author": "gergo-", "createdAt": "2020-04-18T14:48:54Z", "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "diffHunk": "@@ -134,12 +146,46 @@ protected IntrinsicGraphBuilder(OptionValues options, DebugContext debug, CorePr\n                 FixedWithNextNode fixedWithNextNode = (FixedWithNextNode) fixedNode;\n                 assert fixedWithNextNode.next() == null : \"cannot append instruction to instruction which isn't end\";\n                 lastInstr = fixedWithNextNode;\n+\n+            } else if (fixedNode instanceof WithExceptionNode) {\n+                WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n+                AbstractBeginNode normalSuccessor;\n+                if (withExceptionNode instanceof SingleMemoryKill) {\n+                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n+                } else if (withExceptionNode instanceof MultiMemoryKill) {\n+                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n+                } else {\n+                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n+                    normalSuccessor = graph.add(new BeginNode());\n+                }\n+                ExceptionObjectNode exceptionSuccessor = graph.add(new ExceptionObjectNode(getMetaAccess()));\n+                setExeptionState(exceptionSuccessor);\n+                exceptionSuccessor.setNext(graph.add(new UnwindNode(exceptionSuccessor)));\n+\n+                if (unwindCreated) {\n+                    throw GraalError.shouldNotReachHere(\"Intrinsic graph can only have one node with an exception edge\");\n+                }\n+                unwindCreated = true;\n+\n+                withExceptionNode.setNext(normalSuccessor);\n+                withExceptionNode.setExceptionEdge(exceptionSuccessor);\n+                lastInstr = normalSuccessor;\n+\n             } else {\n                 lastInstr = null;\n             }\n         }\n     }\n \n+    /**\n+     * Currently unimplemented here, but implemented in subclasses that need it.\n+     *\n+     * @param exceptionObject The node that needs an exception state.\n+     */\n+    protected void setExeptionState(ExceptionObjectNode exceptionObject) {", "originalCommit": "c858675537ceef8035c9cccd64528f15e30747e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b6ab04484877b0b7268abd2c911d66fac4025ff", "chunk": "diff --git a/compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java b/compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java\nindex 59e86f33ca9..e77a6762465 100644\n--- a/compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java\n+++ b/compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java\n\n@@ -149,17 +143,9 @@ public class IntrinsicGraphBuilder implements GraphBuilderContext, Receiver {\n \n             } else if (fixedNode instanceof WithExceptionNode) {\n                 WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n-                AbstractBeginNode normalSuccessor;\n-                if (withExceptionNode instanceof SingleMemoryKill) {\n-                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n-                } else if (withExceptionNode instanceof MultiMemoryKill) {\n-                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n-                } else {\n-                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n-                    normalSuccessor = graph.add(new BeginNode());\n-                }\n+                AbstractBeginNode normalSuccessor = graph.add(withExceptionNode.createNextBegin());\n                 ExceptionObjectNode exceptionSuccessor = graph.add(new ExceptionObjectNode(getMetaAccess()));\n-                setExeptionState(exceptionSuccessor);\n+                setExceptionState(exceptionSuccessor);\n                 exceptionSuccessor.setNext(graph.add(new UnwindNode(exceptionSuccessor)));\n \n                 if (unwindCreated) {\n"}}, {"oid": "3b6ab04484877b0b7268abd2c911d66fac4025ff", "url": "https://github.com/oracle/graal/commit/3b6ab04484877b0b7268abd2c911d66fac4025ff", "message": "Support WithExceptionNode in IntrinsicGraphBuilder", "committedDate": "2020-04-19T02:17:26Z", "type": "commit"}, {"oid": "3b6ab04484877b0b7268abd2c911d66fac4025ff", "url": "https://github.com/oracle/graal/commit/3b6ab04484877b0b7268abd2c911d66fac4025ff", "message": "Support WithExceptionNode in IntrinsicGraphBuilder", "committedDate": "2020-04-19T02:17:26Z", "type": "forcePushed"}]}