{"pr_number": 2456, "pr_title": "Add function name lookup for c++ functions.", "pr_createdAt": "2020-05-14T09:43:41Z", "pr_url": "https://github.com/oracle/graal/pull/2456", "timeline": [{"oid": "4e52b81c387a730c731595ee87f72a0edc0a783d", "url": "https://github.com/oracle/graal/commit/4e52b81c387a730c731595ee87f72a0edc0a783d", "message": "Fix primary checkstyle error in Javadoc comment", "committedDate": "2020-05-18T13:32:38Z", "type": "forcePushed"}, {"oid": "4e52b81c387a730c731595ee87f72a0edc0a783d", "url": "https://github.com/oracle/graal/commit/4e52b81c387a730c731595ee87f72a0edc0a783d", "message": "Fix primary checkstyle error in Javadoc comment", "committedDate": "2020-05-18T13:32:38Z", "type": "forcePushed"}, {"oid": "4e52b81c387a730c731595ee87f72a0edc0a783d", "url": "https://github.com/oracle/graal/commit/4e52b81c387a730c731595ee87f72a0edc0a783d", "message": "Fix primary checkstyle error in Javadoc comment", "committedDate": "2020-05-18T13:32:38Z", "type": "forcePushed"}, {"oid": "0f4757d7a2a419f49b8f332ed2d4a7e03d4de972", "url": "https://github.com/oracle/graal/commit/0f4757d7a2a419f49b8f332ed2d4a7e03d4de972", "message": "Fix primary checkstyle error in Javadoc comment", "committedDate": "2020-05-25T14:47:48Z", "type": "forcePushed"}, {"oid": "1132d347f0cfc5d484b26fe99bd5d89c0286b2ad", "url": "https://github.com/oracle/graal/commit/1132d347f0cfc5d484b26fe99bd5d89c0286b2ad", "message": "add access to 'displayable' function name", "committedDate": "2020-05-25T15:24:13Z", "type": "commit"}, {"oid": "a0c311b52b12cd826753d75ffbf8bef6658a6256", "url": "https://github.com/oracle/graal/commit/a0c311b52b12cd826753d75ffbf8bef6658a6256", "message": "add looking for linkage/displayName while looking for functions\n\nIn order to call methods by their 'real' declared name even if the LLVM\nbitcode provides only the linkage name in the signature, a different\nlookup has to be done.", "committedDate": "2020-05-25T15:24:29Z", "type": "commit"}, {"oid": "59faf9e35b1e8798155f226397be5407139ef9f2", "url": "https://github.com/oracle/graal/commit/59faf9e35b1e8798155f226397be5407139ef9f2", "message": "add tests for looking up C++ function names", "committedDate": "2020-05-25T15:24:30Z", "type": "commit"}, {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "url": "https://github.com/oracle/graal/commit/8b9f22916f45d0617d22e6a3e7b779a412ce948f", "message": "Fix primary checkstyle error in Javadoc comment", "committedDate": "2020-05-25T15:24:32Z", "type": "commit"}, {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "url": "https://github.com/oracle/graal/commit/8b9f22916f45d0617d22e6a3e7b779a412ce948f", "message": "Fix primary checkstyle error in Javadoc comment", "committedDate": "2020-05-25T15:24:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3NjA4Mw==", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430176083", "bodyText": "I think this is not needed and makes it harder to understand. The caller (LLVMParser) can call parser.parseLinkageName(runtime) directly.", "author": "zapster", "createdAt": "2020-05-26T06:11:44Z", "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LazyToTruffleConverterImpl.java", "diffHunk": "@@ -508,4 +508,8 @@ private void copyStructArgumentsToFrame(List<LLVMStatementNode> initializers, No\n \n         return formalParamInits;\n     }\n+\n+    public void resolveLinkageName() {\n+        parser.parseLinkageName(runtime);\n+    }", "originalCommit": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bac2bc4264299829148707f07a1c994d75d2f707", "chunk": "diff --git a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LazyToTruffleConverterImpl.java b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LazyToTruffleConverterImpl.java\nindex ba53be8faea..c3ce816b591 100644\n--- a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LazyToTruffleConverterImpl.java\n+++ b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LazyToTruffleConverterImpl.java\n\n@@ -508,8 +508,4 @@ public class LazyToTruffleConverterImpl implements LazyToTruffleConverter {\n \n         return formalParamInits;\n     }\n-\n-    public void resolveLinkageName() {\n-        parser.parseLinkageName(runtime);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3NjQzNg==", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430176436", "bodyText": "I think we should have Javadoc that mentions that  MetadataSubprogramOnly throws.", "author": "zapster", "createdAt": "2020-05-26T06:12:49Z", "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ *\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are\n+ * permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of\n+ * conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other materials provided\n+ * with the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written\n+ * permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n+ * OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.truffle.llvm.parser.listeners;\n+\n+import com.oracle.truffle.llvm.parser.model.IRScope;\n+import com.oracle.truffle.llvm.parser.model.functions.FunctionDefinition;\n+import com.oracle.truffle.llvm.parser.scanner.Block;\n+import com.oracle.truffle.llvm.parser.scanner.RecordBuffer;\n+\n+public final class FunctionMDOnly implements ParserListener {", "originalCommit": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bac2bc4264299829148707f07a1c994d75d2f707", "chunk": "diff --git a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java\nindex d41b8563ac7..81a0d3f237d 100644\n--- a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java\n+++ b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java\n\n@@ -53,6 +53,10 @@ public final class FunctionMDOnly implements ParserListener {\n \n     }\n \n+    /**\n+     * Only to look for an MDSubprogram that is attached to a function. MetadataSubprogramOnly\n+     * throws an MDSubprogramParsedException when it is parsed.\n+     */\n     @Override\n     public ParserListener enter(Block block) {\n         switch (block) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3Njg3Mg==", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430176872", "bodyText": "I think we should mention why it is ok that exit is never called in the case where MetadataSubprogramOnly throws.", "author": "zapster", "createdAt": "2020-05-26T06:14:06Z", "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ *\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are\n+ * permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of\n+ * conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other materials provided\n+ * with the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written\n+ * permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n+ * OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.truffle.llvm.parser.listeners;\n+\n+import com.oracle.truffle.llvm.parser.model.IRScope;\n+import com.oracle.truffle.llvm.parser.model.functions.FunctionDefinition;\n+import com.oracle.truffle.llvm.parser.scanner.Block;\n+import com.oracle.truffle.llvm.parser.scanner.RecordBuffer;\n+\n+public final class FunctionMDOnly implements ParserListener {\n+\n+    private final FunctionDefinition function;\n+\n+    private final Types types;\n+\n+    private final IRScope scope;\n+\n+    public FunctionMDOnly(IRScope scope, Types types, FunctionDefinition function) {\n+        this.scope = scope;\n+        this.types = types;\n+        this.function = function;\n+    }\n+\n+    public void setupScope() {\n+        scope.startLocalScope(function);\n+\n+    }\n+\n+    @Override\n+    public ParserListener enter(Block block) {\n+        switch (block) {\n+            case METADATA:\n+            case METADATA_ATTACHMENT:\n+            case METADATA_KIND:\n+                return new MetadataSubprogramOnly(types, scope);\n+\n+            default:\n+                return ParserListener.DEFAULT;\n+        }\n+    }\n+\n+    @Override\n+    public void exit() {\n+        // no linkageName found", "originalCommit": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bac2bc4264299829148707f07a1c994d75d2f707", "chunk": "diff --git a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java\nindex d41b8563ac7..81a0d3f237d 100644\n--- a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java\n+++ b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java\n\n@@ -53,6 +53,10 @@ public final class FunctionMDOnly implements ParserListener {\n \n     }\n \n+    /**\n+     * Only to look for an MDSubprogram that is attached to a function. MetadataSubprogramOnly\n+     * throws an MDSubprogramParsedException when it is parsed.\n+     */\n     @Override\n     public ParserListener enter(Block block) {\n         switch (block) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3Nzc4OA==", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430177788", "bodyText": "Please add Javadoc that describes what this class is used for (finding MDSubprogram) and how the result is returned (via throwing MDSubprogramParserException).", "author": "zapster", "createdAt": "2020-05-26T06:16:46Z", "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/MetadataSubprogramOnly.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ *\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are\n+ * permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of\n+ * conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other materials provided\n+ * with the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written\n+ * permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n+ * OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.truffle.llvm.parser.listeners;\n+\n+import com.oracle.truffle.llvm.parser.metadata.MDBaseNode;\n+import com.oracle.truffle.llvm.parser.metadata.MDString;\n+import com.oracle.truffle.llvm.parser.metadata.MDSubprogram;\n+import com.oracle.truffle.llvm.parser.model.IRScope;\n+import com.oracle.truffle.llvm.parser.scanner.RecordBuffer;\n+\n+public class MetadataSubprogramOnly extends Metadata {", "originalCommit": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bac2bc4264299829148707f07a1c994d75d2f707", "chunk": "diff --git a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/MetadataSubprogramOnly.java b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/MetadataSubprogramOnly.java\nindex d9ac874a45e..581eb2dd0ba 100644\n--- a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/MetadataSubprogramOnly.java\n+++ b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/MetadataSubprogramOnly.java\n\n@@ -35,12 +35,21 @@ import com.oracle.truffle.llvm.parser.metadata.MDSubprogram;\n import com.oracle.truffle.llvm.parser.model.IRScope;\n import com.oracle.truffle.llvm.parser.scanner.RecordBuffer;\n \n+/**\n+ * This class is used to find an MDSubprogram that has been attached to a LLVM function.\n+ */\n+\n public class MetadataSubprogramOnly extends Metadata {\n \n     MetadataSubprogramOnly(Types types, IRScope scope) {\n         super(types, scope);\n     }\n \n+    /**\n+     * Parses the given opCode while looking for an MDSubprogam.\n+     *\n+     * @throws MDSubprogramParsedException if the MDSubprogram is found.\n+     */\n     @Override\n     protected void parseOpcode(RecordBuffer buffer, long[] args, int opCode) {\n         super.parseOpcode(buffer, args, opCode);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODE2Ng==", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430178166", "bodyText": "For readability, I'd change for LLVM from C++, ... to for LLVM code produced from C++ sources", "author": "zapster", "createdAt": "2020-05-26T06:17:54Z", "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/FunctionDefinition.java", "diffHunk": "@@ -91,6 +93,21 @@ public String getSourceName() {\n         return SourceFunction.DEFAULT_SOURCE_NAME.equals(scopeName) ? null : scopeName;\n     }\n \n+    public String getDisplayName() {\n+        // for LLVM from C++, function.name stores the linkage name, but not 'original' C++ name", "originalCommit": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bac2bc4264299829148707f07a1c994d75d2f707", "chunk": "diff --git a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/FunctionDefinition.java b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/FunctionDefinition.java\nindex ac36fa25fd1..7c325e07dd1 100644\n--- a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/FunctionDefinition.java\n+++ b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/FunctionDefinition.java\n\n@@ -94,7 +94,10 @@ public final class FunctionDefinition extends FunctionSymbol implements Constant\n     }\n \n     public String getDisplayName() {\n-        // for LLVM from C++, function.name stores the linkage name, but not 'original' C++ name\n+        /*\n+         * For LLVM code produced from C++ sources, function.name stores the linkage name, but not\n+         * 'original' C++ name.\n+         */\n         if (mdAttachments != null && mdAttachments.size() > 0) {\n             for (MDAttachment mdAttachment : mdAttachments) {\n                 if (mdAttachment.getValue() instanceof MDSubprogram) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODQzMQ==", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430178431", "bodyText": "Multiline comments (/* */) and proper sentences to make the formatter happy.", "author": "zapster", "createdAt": "2020-05-26T06:18:35Z", "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/LazyFunctionParser.java", "diffHunk": "@@ -77,4 +79,23 @@ public void parse(DebugInfoFunctionProcessor diProcessor, Source bitcodeSource,\n             }\n         }\n     }\n+\n+    public void parseLinkageName(LLVMParserRuntime runtime) {\n+        synchronized (scope) {\n+            FunctionMDOnly parser = new FunctionMDOnly(scope, types, function);\n+            try {\n+                parser.setupScope();\n+                scanner.scanBlock(parser);\n+            } catch (MDSubprogramParsedException e) {\n+                // if linkageName/displayName is found, an exception is thrown (s.t.\n+                // parsing/searching does not have to be continued)", "originalCommit": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bac2bc4264299829148707f07a1c994d75d2f707", "chunk": "diff --git a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/LazyFunctionParser.java b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/LazyFunctionParser.java\nindex b9e76c879f3..3ab6c7a5541 100644\n--- a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/LazyFunctionParser.java\n+++ b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/LazyFunctionParser.java\n\n@@ -87,8 +87,10 @@ public final class LazyFunctionParser {\n                 parser.setupScope();\n                 scanner.scanBlock(parser);\n             } catch (MDSubprogramParsedException e) {\n-                // if linkageName/displayName is found, an exception is thrown (s.t.\n-                // parsing/searching does not have to be continued)\n+                /*\n+                 * If linkageName/displayName is found, an exception is thrown (such that\n+                 * parsing/searching does not have to be continued).\n+                 */\n                 final String displayName = e.displayName;\n                 final String linkageName = e.linkageName;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODc2Mw==", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430178763", "bodyText": "I'd create a new test class for testing C++ members (e.g. CxxMembersTest). Not a blocker, though.", "author": "zapster", "createdAt": "2020-05-26T06:19:32Z", "path": "sulong/tests/com.oracle.truffle.llvm.tests/src/com/oracle/truffle/llvm/tests/interop/MembersTest.java", "diffHunk": "@@ -41,19 +41,26 @@\n public class MembersTest extends InteropTestBase {", "originalCommit": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bac2bc4264299829148707f07a1c994d75d2f707", "chunk": "diff --git a/sulong/tests/com.oracle.truffle.llvm.tests/src/com/oracle/truffle/llvm/tests/interop/MembersTest.java b/sulong/tests/com.oracle.truffle.llvm.tests/src/com/oracle/truffle/llvm/tests/interop/MembersTest.java\nindex 38f8c315d37..2e03b2da3ab 100644\n--- a/sulong/tests/com.oracle.truffle.llvm.tests/src/com/oracle/truffle/llvm/tests/interop/MembersTest.java\n+++ b/sulong/tests/com.oracle.truffle.llvm.tests/src/com/oracle/truffle/llvm/tests/interop/MembersTest.java\n\n@@ -41,26 +41,19 @@ import com.oracle.truffle.tck.TruffleRunner;\n public class MembersTest extends InteropTestBase {\n \n     private static Value testLibrary;\n-    private static Value testCppLibrary;\n \n     @BeforeClass\n     public static void loadTestBitcode() {\n         testLibrary = loadTestBitcodeValue(\"stringTest.c\");\n-        testCppLibrary = loadTestBitcodeValue(\"membersTest.cpp\");\n     }\n \n     @Test\n     public void testMemberExists() {\n         Assert.assertTrue(testLibrary.hasMember(\"test_as_string_utf8\"));\n-        Assert.assertTrue(testCppLibrary.hasMember(\"hello\"));\n-        Assert.assertTrue(testCppLibrary.hasMember(\"bye\"));\n-        Assert.assertTrue(testCppLibrary.hasMember(\"gcd\"));\n-\n     }\n \n     @Test\n     public void testMemberDoesNotExist() {\n         Assert.assertFalse(testLibrary.hasMember(\"abc\"));\n-        Assert.assertFalse(testCppLibrary.hasMember(\"abc\"));\n     }\n }\n"}}, {"oid": "bac2bc4264299829148707f07a1c994d75d2f707", "url": "https://github.com/oracle/graal/commit/bac2bc4264299829148707f07a1c994d75d2f707", "message": "Add SulongEngineOption for C++ interop features, minor style fixes.", "committedDate": "2020-05-26T11:22:10Z", "type": "commit"}, {"oid": "7a75e0b6be915aea0c34fc5143c374e3a887b76f", "url": "https://github.com/oracle/graal/commit/7a75e0b6be915aea0c34fc5143c374e3a887b76f", "message": "Enable SulongEngineOption for interop tests", "committedDate": "2020-05-26T13:58:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5NDA1MA==", "url": "https://github.com/oracle/graal/pull/2456#discussion_r431694050", "bodyText": "You can use parserRuntime.getContext() here, that's more efficient. LLVMLanguage.getContext() needs to look up the context from a thread-local.", "author": "rschatz", "createdAt": "2020-05-28T09:12:47Z", "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java", "diffHunk": "@@ -126,6 +128,10 @@ private void defineFunction(FunctionSymbol functionSymbol, ModelModule model, Da\n         LLVMFunction llvmFunction = LLVMFunction.create(functionSymbol.getName(), library, function, functionSymbol.getType(), runtime.getBitcodeID(), functionSymbol.getIndex(),\n                         functionDefinition.isExported());\n         runtime.getFileScope().register(llvmFunction);\n+        final boolean cxxInterop = LLVMLanguage.getContext().getEnv().getOptions().get(SulongEngineOption.CXX_INTEROP);", "originalCommit": "7a75e0b6be915aea0c34fc5143c374e3a887b76f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d306e79b11dd9f32ae2fba734dc61991da9651cf", "chunk": "diff --git a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java\nindex d58b33c561b..4ab037c572c 100644\n--- a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java\n+++ b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java\n\n@@ -128,7 +130,7 @@ public final class LLVMParser {\n         LLVMFunction llvmFunction = LLVMFunction.create(functionSymbol.getName(), library, function, functionSymbol.getType(), runtime.getBitcodeID(), functionSymbol.getIndex(),\n                         functionDefinition.isExported());\n         runtime.getFileScope().register(llvmFunction);\n-        final boolean cxxInterop = LLVMLanguage.getContext().getEnv().getOptions().get(SulongEngineOption.CXX_INTEROP);\n+        final boolean cxxInterop = runtime.getContext().getEnv().getOptions().get(SulongEngineOption.CXX_INTEROP);\n         if (cxxInterop) {\n             model.getFunctionParser(functionDefinition).parseLinkageName(runtime);\n         }\n"}}, {"oid": "d306e79b11dd9f32ae2fba734dc61991da9651cf", "url": "https://github.com/oracle/graal/commit/d306e79b11dd9f32ae2fba734dc61991da9651cf", "message": "Improve efficiency by replacing LLVMLanguage.getContext()", "committedDate": "2020-05-28T09:40:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc0NzQ2OQ==", "url": "https://github.com/oracle/graal/pull/2456#discussion_r431747469", "bodyText": "that import looks wrong", "author": "zapster", "createdAt": "2020-05-28T10:50:21Z", "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java", "diffHunk": "@@ -53,6 +53,8 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.antlr.v4.runtime.ParserRuleContext;", "originalCommit": "d306e79b11dd9f32ae2fba734dc61991da9651cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed1a1fb160aa9ee9ab679eb3636b62175b2f87f", "chunk": "diff --git a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java\nindex 4ab037c572c..5a875623c4b 100644\n--- a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java\n+++ b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java\n\n@@ -53,8 +52,6 @@ import com.oracle.truffle.llvm.runtime.options.SulongEngineOption;\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.antlr.v4.runtime.ParserRuleContext;\n-\n public final class LLVMParser {\n     private final Source source;\n     private final LLVMParserRuntime runtime;\n"}}, {"oid": "7ed1a1fb160aa9ee9ab679eb3636b62175b2f87f", "url": "https://github.com/oracle/graal/commit/7ed1a1fb160aa9ee9ab679eb3636b62175b2f87f", "message": "Remove unneeded imports", "committedDate": "2020-05-28T10:58:38Z", "type": "commit"}]}