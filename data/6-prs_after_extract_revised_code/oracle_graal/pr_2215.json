{"pr_number": 2215, "pr_title": "Move analysis universe cleanup before Feature.beforeCompilation() call.", "pr_createdAt": "2020-03-04T02:24:07Z", "pr_url": "https://github.com/oracle/graal/pull/2215", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyNjcwNA==", "url": "https://github.com/oracle/graal/pull/2215#discussion_r388426704", "bodyText": "This line should remain the last one before the catch, otherwise we could miss unsupported features that get accumulated in the UnsupportedFeatures object.", "author": "christianwimmer", "createdAt": "2020-03-05T16:54:37Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java", "diffHunk": "@@ -565,31 +565,31 @@ private void doRun(Map<Method, CEntryPointData> entryPoints,\n                     throw UserError.abort(\"Warning: no entry points found, i.e., no method annotated with @\" + CEntryPoint.class.getSimpleName());\n                 }\n \n+                bigbang.getUnsupportedFeatures().report(bigbang);\n+\n+                recordMethodsWithStackValues();\n+                recordRestrictHeapAccessCallees(aUniverse.getMethods());\n+\n+                /*\n+                 * After this point, all TypeFlow (and therefore also TypeState) objects are\n+                 * unreachable and can be garbage collected. This is important to keep the overall\n+                 * memory footprint low. However, this also means we no longer have complete call\n+                 * chain information. Only the summarized information stored in the\n+                 * StaticAnalysisResult objects is available after this point.\n+                 */\n+                bigbang.cleanupAfterAnalysis();\n+\n                 ImageHeapLayouter heapLayouter = ImageSingletons.lookup(ImageHeapLayouter.class);\n                 heap = new NativeImageHeap(aUniverse, hUniverse, hMetaAccess, heapLayouter);\n \n                 BeforeCompilationAccessImpl config = new BeforeCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug, runtime);\n                 featureHandler.forEachFeature(feature -> feature.beforeCompilation(config));\n \n                 runtime.updateLazyState(hMetaAccess);\n-\n-                bigbang.getUnsupportedFeatures().report(bigbang);", "originalCommit": "4f0ca59cf246b9a24e78790c1a490d56f3a7c30f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNzU4Mw==", "url": "https://github.com/oracle/graal/pull/2215#discussion_r388437583", "bodyText": "The ShortestInvokeChainPrinter used by the unsupported features reporting needs AnalysisMethod.typeFlow which is cleaned up by  bigbang.cleanupAfterAnalysis(). I think we should actually move everything after  bigbang.cleanupAfterAnalysis(); outside of the catch, beforeCompilation should not accumulate unspported features.", "author": "cstancu", "createdAt": "2020-03-05T17:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyNjcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MjA0MQ==", "url": "https://github.com/oracle/graal/pull/2215#discussion_r388452041", "bodyText": "Yes, sounds good", "author": "christianwimmer", "createdAt": "2020-03-05T17:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyNjcwNA=="}], "type": "inlineReview", "revised_code": {"commit": "8a8e49754fb32dfa3fd6b3fd22c0cac8bea2f9b4", "chunk": "diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java\nindex 0cb09e793e4..761ad74865f 100644\n--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java\n+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java\n\n@@ -578,18 +578,18 @@ public class NativeImageGenerator {\n                  * StaticAnalysisResult objects is available after this point.\n                  */\n                 bigbang.cleanupAfterAnalysis();\n-\n-                ImageHeapLayouter heapLayouter = ImageSingletons.lookup(ImageHeapLayouter.class);\n-                heap = new NativeImageHeap(aUniverse, hUniverse, hMetaAccess, heapLayouter);\n-\n-                BeforeCompilationAccessImpl config = new BeforeCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug, runtime);\n-                featureHandler.forEachFeature(feature -> feature.beforeCompilation(config));\n-\n-                runtime.updateLazyState(hMetaAccess);\n             } catch (UnsupportedFeatureException ufe) {\n                 throw FallbackFeature.reportAsFallback(ufe);\n             }\n \n+            ImageHeapLayouter heapLayouter = ImageSingletons.lookup(ImageHeapLayouter.class);\n+            heap = new NativeImageHeap(aUniverse, hUniverse, hMetaAccess, heapLayouter);\n+\n+            BeforeCompilationAccessImpl beforeCompilationConfig = new BeforeCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug, runtime);\n+            featureHandler.forEachFeature(feature -> feature.beforeCompilation(beforeCompilationConfig));\n+\n+            runtime.updateLazyState(hMetaAccess);\n+\n             NativeImageCodeCache codeCache;\n             CompileQueue compileQueue;\n             try (StopTimer t = new Timer(imageName, \"compile\").start()) {\n"}}, {"oid": "8a8e49754fb32dfa3fd6b3fd22c0cac8bea2f9b4", "url": "https://github.com/oracle/graal/commit/8a8e49754fb32dfa3fd6b3fd22c0cac8bea2f9b4", "message": "Move analysis universe cleanup before Feature.beforeCompilation() call.\n\nFeature.beforeCompilation() should not depend on the analysis universe.", "committedDate": "2020-03-05T18:18:26Z", "type": "commit"}]}