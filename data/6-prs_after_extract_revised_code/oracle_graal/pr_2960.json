{"pr_number": 2960, "pr_title": "--target parameter, Platform/LibC changes", "pr_createdAt": "2020-11-03T15:41:44Z", "pr_url": "https://github.com/oracle/graal/pull/2960", "timeline": [{"oid": "332c191834da183d20218c30092767dec48c2e32", "url": "https://github.com/oracle/graal/commit/332c191834da183d20218c30092767dec48c2e32", "message": "Added LINUX_BASE, DARWIN_BASE and WINDOWS_BASE meta platforms", "committedDate": "2020-11-04T14:22:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5Njk0MA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r517396940", "bodyText": "21.0", "author": "vjovanov", "createdAt": "2020-11-04T14:47:09Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -84,6 +86,31 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n         return platformGroup.isInstance(ImageSingletons.lookup(Platform.class));\n     }\n \n+    /**\n+     * Returns string representing Platform's OS name\n+     * <p>\n+     * This method should be implemented either in final class or as default in respective OS\n+     * interface.\n+     *\n+     * @since 20.3", "originalCommit": "332c191834da183d20218c30092767dec48c2e32", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8444920941135aa6baff98a0fafbe969b8c83168", "chunk": "diff --git a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\nindex 6e9a46fb4c9..5b3c1107607 100644\n--- a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\n+++ b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\n\n@@ -87,25 +87,25 @@ public interface Platform {\n     }\n \n     /**\n-     * Returns string representing Platform's OS name\n+     * Returns the string representing Platform's OS name\n      * <p>\n-     * This method should be implemented either in final class or as default in respective OS\n+     * This method should be implemented either in a final class or as default method in respective OS\n      * interface.\n      *\n-     * @since 20.3\n+     * @since 21.0\n      */\n     default String getOS() {\n         throw new UnsupportedOperationException(\"Platform `\" + this.getClass().getCanonicalName() + \"`, doesn't implement getOS\");\n     }\n \n     /**\n-     * Returns string representing Platform's architecture name. This value should be the same as\n+     * Returns the string representing Platform's architecture name. This value should be the same as\n      * desired os.arch system property\n      * <p>\n-     * This method should be implemented either in final class or as default in respective\n+     * This method should be implemented either in final class or as default method in respective\n      * architecture interface.\n      *\n-     * @since 20.3\n+     * @since 21.0\n      */\n     default String getArchitecture() {\n         throw new UnsupportedOperationException(\"Platform `\" + this.getClass().getCanonicalName() + \"`, doesn't implement getArchitecture\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5ODY2OA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r517398668", "bodyText": "the string representation", "author": "vjovanov", "createdAt": "2020-11-04T14:49:34Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -84,6 +86,31 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n         return platformGroup.isInstance(ImageSingletons.lookup(Platform.class));\n     }\n \n+    /**\n+     * Returns string representing Platform's OS name", "originalCommit": "332c191834da183d20218c30092767dec48c2e32", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8444920941135aa6baff98a0fafbe969b8c83168", "chunk": "diff --git a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\nindex 6e9a46fb4c9..5b3c1107607 100644\n--- a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\n+++ b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\n\n@@ -87,25 +87,25 @@ public interface Platform {\n     }\n \n     /**\n-     * Returns string representing Platform's OS name\n+     * Returns the string representing Platform's OS name\n      * <p>\n-     * This method should be implemented either in final class or as default in respective OS\n+     * This method should be implemented either in a final class or as default method in respective OS\n      * interface.\n      *\n-     * @since 20.3\n+     * @since 21.0\n      */\n     default String getOS() {\n         throw new UnsupportedOperationException(\"Platform `\" + this.getClass().getCanonicalName() + \"`, doesn't implement getOS\");\n     }\n \n     /**\n-     * Returns string representing Platform's architecture name. This value should be the same as\n+     * Returns the string representing Platform's architecture name. This value should be the same as\n      * desired os.arch system property\n      * <p>\n-     * This method should be implemented either in final class or as default in respective\n+     * This method should be implemented either in final class or as default method in respective\n      * architecture interface.\n      *\n-     * @since 20.3\n+     * @since 21.0\n      */\n     default String getArchitecture() {\n         throw new UnsupportedOperationException(\"Platform `\" + this.getClass().getCanonicalName() + \"`, doesn't implement getArchitecture\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMTg0MQ==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r517401841", "bodyText": "a final class\nas default is unclear", "author": "vjovanov", "createdAt": "2020-11-04T14:53:53Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -84,6 +86,31 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n         return platformGroup.isInstance(ImageSingletons.lookup(Platform.class));\n     }\n \n+    /**\n+     * Returns string representing Platform's OS name\n+     * <p>\n+     * This method should be implemented either in final class or as default in respective OS", "originalCommit": "332c191834da183d20218c30092767dec48c2e32", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8444920941135aa6baff98a0fafbe969b8c83168", "chunk": "diff --git a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\nindex 6e9a46fb4c9..5b3c1107607 100644\n--- a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\n+++ b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\n\n@@ -87,25 +87,25 @@ public interface Platform {\n     }\n \n     /**\n-     * Returns string representing Platform's OS name\n+     * Returns the string representing Platform's OS name\n      * <p>\n-     * This method should be implemented either in final class or as default in respective OS\n+     * This method should be implemented either in a final class or as default method in respective OS\n      * interface.\n      *\n-     * @since 20.3\n+     * @since 21.0\n      */\n     default String getOS() {\n         throw new UnsupportedOperationException(\"Platform `\" + this.getClass().getCanonicalName() + \"`, doesn't implement getOS\");\n     }\n \n     /**\n-     * Returns string representing Platform's architecture name. This value should be the same as\n+     * Returns the string representing Platform's architecture name. This value should be the same as\n      * desired os.arch system property\n      * <p>\n-     * This method should be implemented either in final class or as default in respective\n+     * This method should be implemented either in final class or as default method in respective\n      * architecture interface.\n      *\n-     * @since 20.3\n+     * @since 21.0\n      */\n     default String getArchitecture() {\n         throw new UnsupportedOperationException(\"Platform `\" + this.getClass().getCanonicalName() + \"`, doesn't implement getArchitecture\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzMwMw==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r517403303", "bodyText": "I don't think we need WINDOWS_BASE?", "author": "vjovanov", "createdAt": "2020-11-04T14:55:43Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -113,26 +171,54 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n      *\n      * @since 19.0\n      */\n-    interface LINUX extends InternalPlatform.PLATFORM_JNI {\n+    interface LINUX extends LINUX_BASE {\n+        default String getOS() {\n+            return \"linux\";\n+        }\n+    }\n \n+    /**\n+     * Supported operating system: Android.\n+     *\n+     * @since 20.3\n+     */\n+    interface ANDROID extends LINUX_BASE {\n+        default String getOS() {\n+            return \"android\";\n+        }\n     }\n \n     /**\n      * Supported operating system: Darwin (MacOS).\n      *\n      * @since 19.0\n      */\n-    interface DARWIN extends InternalPlatform.PLATFORM_JNI {\n+    interface DARWIN extends DARWIN_BASE {\n+        default String getOS() {\n+            return \"darwin\";\n+        }\n+    }\n \n+    /**\n+     * Supported operating system: iOS.\n+     *\n+     * @since 20.3\n+     */\n+    interface IOS extends DARWIN_BASE {\n+        default String getOS() {\n+            return \"ios\";\n+        }\n     }\n \n     /**\n      * Supported operating system: Windows.\n      *\n      * @since 19.0\n      */\n-    interface WINDOWS extends InternalPlatform.PLATFORM_JNI {\n-\n+    interface WINDOWS extends WINDOWS_BASE {", "originalCommit": "332c191834da183d20218c30092767dec48c2e32", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8444920941135aa6baff98a0fafbe969b8c83168", "chunk": "diff --git a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\nindex 6e9a46fb4c9..5b3c1107607 100644\n--- a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\n+++ b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\n\n@@ -180,7 +172,7 @@ public interface Platform {\n     /**\n      * Supported operating system: Android.\n      *\n-     * @since 20.3\n+     * @since 21.0\n      */\n     interface ANDROID extends LINUX_BASE {\n         default String getOS() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwOTkyMg==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r517409922", "bodyText": "We  should fix this function.", "author": "vjovanov", "createdAt": "2020-11-04T15:04:23Z", "path": "substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java", "diffHunk": "@@ -80,7 +82,7 @@\n      * Create an empty Mach-O object file.\n      */\n     public MachOObjectFile(int pageSize) {\n-        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? System.getProperty(\"os.arch\") : System.getProperty(\"svm.targetArch\")));", "originalCommit": "332c191834da183d20218c30092767dec48c2e32", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef3fe79b560d685d7445af05d3e13aad3c48e9fc", "chunk": "diff --git a/substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java b/substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java\nindex ba257fc1cac..413614d77c7 100644\n--- a/substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java\n+++ b/substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java\n\n@@ -82,7 +82,7 @@ public final class MachOObjectFile extends ObjectFile {\n      * Create an empty Mach-O object file.\n      */\n     public MachOObjectFile(int pageSize) {\n-        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? ImageSingletons.lookup(Platform.class).getArchitecture() : System.getProperty(\"svm.targetArch\")));\n+        this(pageSize, MachOCpuType.from(ImageSingletons.lookup(Platform.class).getArchitecture()));\n     }\n \n     public MachOObjectFile(int pageSize, MachOCpuType cpuType) {\n"}}, {"oid": "8444920941135aa6baff98a0fafbe969b8c83168", "url": "https://github.com/oracle/graal/commit/8444920941135aa6baff98a0fafbe969b8c83168", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-04T15:28:47Z", "type": "forcePushed"}, {"oid": "da1f68eb282b832532d37a81d311df5e89be503f", "url": "https://github.com/oracle/graal/commit/da1f68eb282b832532d37a81d311df5e89be503f", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-04T19:03:06Z", "type": "forcePushed"}, {"oid": "2c961dbb150b372e67ec942676a9fe7d90548069", "url": "https://github.com/oracle/graal/commit/2c961dbb150b372e67ec942676a9fe7d90548069", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-04T19:16:50Z", "type": "forcePushed"}, {"oid": "2cfdc349a163f20f89248572167373e2a6b93817", "url": "https://github.com/oracle/graal/commit/2cfdc349a163f20f89248572167373e2a6b93817", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-04T21:50:35Z", "type": "forcePushed"}, {"oid": "37c41bd65513237c7ee032478983627d6be3c694", "url": "https://github.com/oracle/graal/commit/37c41bd65513237c7ee032478983627d6be3c694", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-09T23:09:56Z", "type": "forcePushed"}, {"oid": "9162867bc236e43ecc2edcccc972698244fb5599", "url": "https://github.com/oracle/graal/commit/9162867bc236e43ecc2edcccc972698244fb5599", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-10T16:12:13Z", "type": "forcePushed"}, {"oid": "47f2cc142191b07f8d90379a31e0c0bee4d6fdd2", "url": "https://github.com/oracle/graal/commit/47f2cc142191b07f8d90379a31e0c0bee4d6fdd2", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-12T16:53:52Z", "type": "forcePushed"}, {"oid": "32c071452a9b7c8d5c2e60cc762a2ffdfed71c96", "url": "https://github.com/oracle/graal/commit/32c071452a9b7c8d5c2e60cc762a2ffdfed71c96", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-13T00:04:43Z", "type": "forcePushed"}, {"oid": "57f96c3a8aa591215bd19c52d8b9c00fafb4a3bc", "url": "https://github.com/oracle/graal/commit/57f96c3a8aa591215bd19c52d8b9c00fafb4a3bc", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-13T19:37:35Z", "type": "forcePushed"}, {"oid": "eee677c648dec276588ea7baa6043e98b4b87440", "url": "https://github.com/oracle/graal/commit/eee677c648dec276588ea7baa6043e98b4b87440", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-13T20:14:12Z", "type": "forcePushed"}, {"oid": "075675284ee808ed8d7ef016cac2fd7c59c7b857", "url": "https://github.com/oracle/graal/commit/075675284ee808ed8d7ef016cac2fd7c59c7b857", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-16T12:56:47Z", "type": "forcePushed"}, {"oid": "0acc263e5800c8dabad12618f4fea25a66a7b4b6", "url": "https://github.com/oracle/graal/commit/0acc263e5800c8dabad12618f4fea25a66a7b4b6", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-19T14:04:01Z", "type": "forcePushed"}, {"oid": "43aae8e543c27e0e5ddb78eb22c2461b6b38ee8c", "url": "https://github.com/oracle/graal/commit/43aae8e543c27e0e5ddb78eb22c2461b6b38ee8c", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-19T17:27:06Z", "type": "forcePushed"}, {"oid": "68754fd11ff53863a7ced212179fd200590a35f6", "url": "https://github.com/oracle/graal/commit/68754fd11ff53863a7ced212179fd200590a35f6", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-27T13:21:26Z", "type": "forcePushed"}, {"oid": "abed4d45cb047f476cc0a18312cd81d0c902383f", "url": "https://github.com/oracle/graal/commit/abed4d45cb047f476cc0a18312cd81d0c902383f", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-11-27T13:23:54Z", "type": "forcePushed"}, {"oid": "5cdb9fb339d219bcb685ba46d1fac8b51e79eb32", "url": "https://github.com/oracle/graal/commit/5cdb9fb339d219bcb685ba46d1fac8b51e79eb32", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-12-01T14:55:19Z", "type": "forcePushed"}, {"oid": "5cce4ad5b671a377816efa9c061f6e0107352da1", "url": "https://github.com/oracle/graal/commit/5cce4ad5b671a377816efa9c061f6e0107352da1", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-12-02T21:40:36Z", "type": "forcePushed"}, {"oid": "5baadc1ea688ad5b6ea5c700e13f68be5be6d61b", "url": "https://github.com/oracle/graal/commit/5baadc1ea688ad5b6ea5c700e13f68be5be6d61b", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-12-02T23:35:44Z", "type": "forcePushed"}, {"oid": "24a13f8d82a66d3597f9a13e9a5a74f97508d959", "url": "https://github.com/oracle/graal/commit/24a13f8d82a66d3597f9a13e9a5a74f97508d959", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-12-03T03:04:01Z", "type": "forcePushed"}, {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf", "url": "https://github.com/oracle/graal/commit/7db981fa1fb8fa3059c76cbb730f3733daac94cf", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-12-03T10:54:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExNzIwOA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535117208", "bodyText": "@gradinac can we use >= here?", "author": "vjovanov", "createdAt": "2020-12-03T11:13:13Z", "path": "substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java", "diffHunk": "@@ -70,4 +61,14 @@ public boolean hasIsolatedNamespaces() {\n     public boolean requiresLibCSpecificStaticJDKLibraries() {\n         return true;\n     }\n+\n+    @Override\n+    public void checkIfLibCSupported() {\n+        if (!SubstrateOptions.StaticExecutable.getValue()) {\n+            throw UserError.abort(\"Musl can only be used for statically linked executables.\");\n+        }\n+        if (JavaVersionUtil.JAVA_SPEC != 11) {", "originalCommit": "7db981fa1fb8fa3059c76cbb730f3733daac94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIzODUwMg==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535238502", "bodyText": "The change should work out of the box, but it hasn't been tested yet. I think we should do it as part of a separate PR.", "author": "gradinac", "createdAt": "2020-12-03T13:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExNzIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8f706780f4a1be776c7a04db5a6e120cf5debcd6", "chunk": "diff --git a/substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java b/substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java\nindex 3d6dd56c86a..42a20844087 100644\n--- a/substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java\n+++ b/substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java\n\n@@ -61,14 +70,4 @@ public class MuslLibC implements LibCBase {\n     public boolean requiresLibCSpecificStaticJDKLibraries() {\n         return true;\n     }\n-\n-    @Override\n-    public void checkIfLibCSupported() {\n-        if (!SubstrateOptions.StaticExecutable.getValue()) {\n-            throw UserError.abort(\"Musl can only be used for statically linked executables.\");\n-        }\n-        if (JavaVersionUtil.JAVA_SPEC != 11) {\n-            throw UserError.abort(\"Musl can only be used with labsjdk 11.\");\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExODE3MQ==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535118171", "bodyText": "@gradinac why can't we use Musl with dynamic linking?", "author": "vjovanov", "createdAt": "2020-12-03T11:14:15Z", "path": "substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java", "diffHunk": "@@ -70,4 +61,14 @@ public boolean hasIsolatedNamespaces() {\n     public boolean requiresLibCSpecificStaticJDKLibraries() {\n         return true;\n     }\n+\n+    @Override\n+    public void checkIfLibCSupported() {\n+        if (!SubstrateOptions.StaticExecutable.getValue()) {", "originalCommit": "7db981fa1fb8fa3059c76cbb730f3733daac94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0MjAyNA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535242024", "bodyText": "The users would be required to have a dynamic musl linker installed in order to be able to run both the C query code and the generated native-image. I remember hitting segfaults when I tried this out a while back, most likely due to the generated executable picking the wrong dynamic linker/libraries.\nWe haven't really had any use-cases for this functionality yet as well - those who do use musl have so far been only interested in creating static native-images. We can of course enable and support this if users request such a feature.", "author": "gradinac", "createdAt": "2020-12-03T13:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExODE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8f706780f4a1be776c7a04db5a6e120cf5debcd6", "chunk": "diff --git a/substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java b/substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java\nindex 3d6dd56c86a..42a20844087 100644\n--- a/substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java\n+++ b/substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java\n\n@@ -61,14 +70,4 @@ public class MuslLibC implements LibCBase {\n     public boolean requiresLibCSpecificStaticJDKLibraries() {\n         return true;\n     }\n-\n-    @Override\n-    public void checkIfLibCSupported() {\n-        if (!SubstrateOptions.StaticExecutable.getValue()) {\n-            throw UserError.abort(\"Musl can only be used for statically linked executables.\");\n-        }\n-        if (JavaVersionUtil.JAVA_SPEC != 11) {\n-            throw UserError.abort(\"Musl can only be used with labsjdk 11.\");\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyNjczOQ==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535126739", "bodyText": "Why don't we solve this right away?", "author": "vjovanov", "createdAt": "2020-12-03T11:22:20Z", "path": "substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java", "diffHunk": "@@ -122,13 +132,194 @@ private static String toJavaString(WCharPointer wcString, UnsignedWord length) {\n         return CTypeConversion.toJavaString((CCharPointer) wcString, SizeOf.unsigned(WCharPointer.class).multiply(length), StandardCharsets.UTF_16LE);\n     }\n \n+    private Pair<String, String> cachedOsNameAndVersion;\n+\n+    @Override\n+    protected String osNameValue() {\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getLeft();\n+    }\n+\n     @Override\n     protected String osVersionValue() {\n-        ByteBuffer versionBytes = ByteBuffer.allocate(4);\n-        versionBytes.putInt(SysinfoAPI.GetVersion());\n-        int majorVersion = versionBytes.get(3);\n-        int minorVersion = versionBytes.get(2);\n-        return majorVersion + \".\" + minorVersion;\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getRight();\n+    }\n+\n+    public Pair<String, String> getOsNameAndVersion() {\n+        /*\n+         * Reimplementation of code from java_props_md.c\n+         */\n+        SysinfoAPI.OSVERSIONINFOEXA ver = StackValue.get(SysinfoAPI.OSVERSIONINFOEXA.class);\n+        ver.dwOSVersionInfoSize(SizeOf.get(SysinfoAPI.OSVERSIONINFOEXA.class));\n+        SysinfoAPI.GetVersionExA(ver);\n+\n+        boolean is64bit = true; /* ATM we only support 64-bit Windows OS's */", "originalCommit": "7db981fa1fb8fa3059c76cbb730f3733daac94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyODQzNA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535128434", "bodyText": "I would add a number of bits to architecture.", "author": "vjovanov", "createdAt": "2020-12-03T11:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyNjczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA1MzgzMg==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536053832", "bodyText": "I implemented a workaround similar to this, since it was the least painful fix to do.\nIn the improbable case that in the future there are supported Windows systems which are using 64 bit architecture which name doesn't end with \"64\", this class will require changes anyway in order to support that system's naming convention.", "author": "lazar-mitrovic", "createdAt": "2020-12-04T12:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyNjczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6c41f986b3c394800904f4d9ac28796564613bee", "chunk": "diff --git a/substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java b/substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java\nindex db4ab973210..981d407d585 100644\n--- a/substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java\n+++ b/substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java\n\n@@ -158,7 +158,7 @@ public class WindowsSystemPropertiesSupport extends SystemPropertiesSupport {\n         ver.dwOSVersionInfoSize(SizeOf.get(SysinfoAPI.OSVERSIONINFOEXA.class));\n         SysinfoAPI.GetVersionExA(ver);\n \n-        boolean is64bit = true; /* ATM we only support 64-bit Windows OS's */\n+        boolean is64bit = ImageSingletons.lookup(Platform.class).getArchitecture().endsWith(\"64\");\n         boolean isWorkstation = ver.wProductType() == VER_NT_WORKSTATION;\n         int platformId = ver.dwPlatformId();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMjU0NQ==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535132545", "bodyText": "the linker call", "author": "vjovanov", "createdAt": "2020-12-03T11:27:47Z", "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "diffHunk": "@@ -140,6 +144,9 @@ public static void setDebugInfoValueUpdateHandler(ValueUpdateHandler updateHandl\n     @Option(help = \"Path passed to the linker as the -rpath (list of comma-separated directories)\")//\n     public static final HostedOptionKey<String[]> LinkerRPath = new HostedOptionKey<>(null);\n \n+    @Option(help = \"String which would be appended to linker call\")//", "originalCommit": "7db981fa1fb8fa3059c76cbb730f3733daac94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MTE2OA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535381168", "bodyText": "Fixed", "author": "lazar-mitrovic", "createdAt": "2020-12-03T16:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMjU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6c41f986b3c394800904f4d9ac28796564613bee", "chunk": "diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java\nindex 26c3dd886b3..37a45518727 100644\n--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java\n+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java\n\n@@ -144,7 +144,7 @@ public class SubstrateOptions {\n     @Option(help = \"Path passed to the linker as the -rpath (list of comma-separated directories)\")//\n     public static final HostedOptionKey<String[]> LinkerRPath = new HostedOptionKey<>(null);\n \n-    @Option(help = \"String which would be appended to linker call\")//\n+    @Option(help = \"String which would be appended to the linker call\")//\n     public static final HostedOptionKey<String> AdditionalLinkerOptions = new HostedOptionKey<>(\"\");\n \n     @Option(help = \"Directory of the image file to be generated\", type = OptionType.User)//\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMjgwMQ==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535132801", "bodyText": "Unrelated change.", "author": "vjovanov", "createdAt": "2020-12-03T11:28:03Z", "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/VMInspection.java", "diffHunk": "@@ -97,7 +97,7 @@ public static boolean isEnabled() {\n \n class DumpAllStacks implements SignalHandler {\n     static void install() {\n-        Signal.handle(Platform.includedIn(WINDOWS.class) ? new Signal(\"BREAK\") : new Signal(\"QUIT\"), new DumpAllStacks());\n+        Signal.handle(Platform.includedIn(Platform.WINDOWS.class) ? new Signal(\"BREAK\") : new Signal(\"QUIT\"), new DumpAllStacks());", "originalCommit": "7db981fa1fb8fa3059c76cbb730f3733daac94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MTI5Nw==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535381297", "bodyText": "Fixed", "author": "lazar-mitrovic", "createdAt": "2020-12-03T16:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMjgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6c41f986b3c394800904f4d9ac28796564613bee", "chunk": "diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/VMInspection.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/VMInspection.java\nindex 1c1c00e6557..5004a194bdc 100644\n--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/VMInspection.java\n+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/VMInspection.java\n\n@@ -97,7 +97,7 @@ class VMInspectionOptions {\n \n class DumpAllStacks implements SignalHandler {\n     static void install() {\n-        Signal.handle(Platform.includedIn(Platform.WINDOWS.class) ? new Signal(\"BREAK\") : new Signal(\"QUIT\"), new DumpAllStacks());\n+        Signal.handle(Platform.includedIn(WINDOWS.class) ? new Signal(\"BREAK\") : new Signal(\"QUIT\"), new DumpAllStacks());\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzNzg4OA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535137888", "bodyText": "I think this line can be returned back.", "author": "vjovanov", "createdAt": "2020-12-03T11:33:06Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java", "diffHunk": "@@ -314,57 +315,64 @@ public NativeImageGenerator(ImageClassLoader loader, HostedOptionProvider option\n         optionProvider.getRuntimeValues().put(GraalOptions.EagerSnippets, true);\n     }\n \n-    public static Platform defaultPlatform(ClassLoader classLoader) {\n+    public static Platform loadPlatform(ClassLoader classLoader, String platformClassName) throws ClassNotFoundException {\n+        Class<?> platformClass;\n+\n+        platformClass = classLoader.loadClass(platformClassName);\n+\n+        Object result;\n+        try {\n+            result = ReflectionUtil.newInstance(platformClass);\n+        } catch (ReflectionUtilError ex) {\n+            throw UserError.abort(ex.getCause(), \"Could not instantiate platform class %s. Ensure the class is not abstract and has a no-argument constructor.\", platformClassName);\n+        }\n+\n+        if (!(result instanceof Platform)) {\n+            throw UserError.abort(\"Platform class %s does not implement %s\", platformClassName, Platform.class.getTypeName());\n+        }\n+        return (Platform) result;\n+    }\n+\n+    public static Platform loadPlatform(String os, String arch) {\n+        ServiceLoader<Platform> loader = ServiceLoader.load(Platform.class);\n+        for (Platform platform : loader) {\n+            if (platform.getOS().equals(os) && platform.getArchitecture().equals(arch)) {\n+                return platform;\n+            }\n+        }\n+        throw UserError.abort(\"Platform specified as \" + os + \"-\" + arch +\n+                        \" isn't supported.\");", "originalCommit": "7db981fa1fb8fa3059c76cbb730f3733daac94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MTM5Ng==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535381396", "bodyText": "Fixed", "author": "lazar-mitrovic", "createdAt": "2020-12-03T16:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzNzg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "6c41f986b3c394800904f4d9ac28796564613bee", "chunk": "diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java\nindex 31fd1114361..93d18f81f66 100644\n--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java\n+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java\n\n@@ -340,8 +340,7 @@ public class NativeImageGenerator {\n                 return platform;\n             }\n         }\n-        throw UserError.abort(\"Platform specified as \" + os + \"-\" + arch +\n-                        \" isn't supported.\");\n+        throw UserError.abort(\"Platform specified as \" + os + \"-\" + arch + \" isn't supported.\");\n     }\n \n     public static Platform getTargetPlatform(ClassLoader classLoader) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzODM0OA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535138348", "bodyText": "I don't see a need for an extra line here.", "author": "vjovanov", "createdAt": "2020-12-03T11:33:33Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ServiceLoaderFeature.java", "diffHunk": "@@ -103,7 +103,9 @@\n      */\n     private static final Set<String> SERVICES_TO_SKIP = new HashSet<>(Arrays.asList(\n                     \"java.security.Provider\",                       // see SecurityServicesFeature\n-                    \"sun.util.locale.provider.LocaleDataMetaInfo\"   // see LocaleSubstitutions\n+                    \"sun.util.locale.provider.LocaleDataMetaInfo\",  // see LocaleSubstitutions\n+                    \"org.graalvm.nativeimage.Platform\"  // type shouldn't be reachable after\n+                                                        // intrinsification", "originalCommit": "7db981fa1fb8fa3059c76cbb730f3733daac94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzODk0Mg==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535138942", "bodyText": "I would also describe better why is this necessary.", "author": "vjovanov", "createdAt": "2020-12-03T11:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzODM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MTUxMA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535381510", "bodyText": "Fixed", "author": "lazar-mitrovic", "createdAt": "2020-12-03T16:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzODM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "6c41f986b3c394800904f4d9ac28796564613bee", "chunk": "diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ServiceLoaderFeature.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ServiceLoaderFeature.java\nindex 680a0d26811..c38e7cf91db 100644\n--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ServiceLoaderFeature.java\n+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ServiceLoaderFeature.java\n\n@@ -104,10 +104,14 @@ public class ServiceLoaderFeature implements Feature {\n     private static final Set<String> SERVICES_TO_SKIP = new HashSet<>(Arrays.asList(\n                     \"java.security.Provider\",                       // see SecurityServicesFeature\n                     \"sun.util.locale.provider.LocaleDataMetaInfo\",  // see LocaleSubstitutions\n-                    \"org.graalvm.nativeimage.Platform\"  // type shouldn't be reachable after\n-                                                        // intrinsification\n+                    \"org.graalvm.nativeimage.Platform\"  // shouldn't be reachable after intrinsification\n     ));\n \n+    // NOTE: Platform class had to be added to this list since our analysis discovers that Platform.includedIn\n+    // is reachable regardless of fact that it is constant folded at registerPlatformPlugins method of\n+    // SubstrateGraphBuilderPlugins. This issue hasn't manifested before because implementation classes were\n+    // instantiated using runtime reflection instead of ServiceLoader (and thus weren't reachable in analysis).\n+\n     private static final Set<String> SERVICE_PROVIDERS_TO_SKIP = new HashSet<>(Arrays.asList(\n                     \"com.sun.jndi.rmi.registry.RegistryContextFactory\"      // GR-26547\n     ));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE0MzY2NA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535143664", "bodyText": "This is hard to understand.", "author": "vjovanov", "createdAt": "2020-12-03T11:39:06Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/CAnnotationProcessorCache.java", "diffHunk": "@@ -66,7 +72,23 @@\n \n     public static class Options {\n         @Option(help = \"Indicate the C Annotation Processor to use previously cached native information when generating C Type information.\")//\n-        public static final HostedOptionKey<Boolean> UseCAPCache = new HostedOptionKey<>(false);\n+        public static final HostedOptionKey<Boolean> UseCAPCache = new HostedOptionKey<Boolean>(false) {\n+            @Override\n+            public Boolean getValueOrDefault(UnmodifiableEconomicMap<OptionKey<?>, Object> values) {\n+                if (!values.containsKey(this)) {", "originalCommit": "7db981fa1fb8fa3059c76cbb730f3733daac94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQzMTI4NQ==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535431285", "bodyText": "Should be fixed.", "author": "lazar-mitrovic", "createdAt": "2020-12-03T17:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE0MzY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "6c41f986b3c394800904f4d9ac28796564613bee", "chunk": "diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/CAnnotationProcessorCache.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/CAnnotationProcessorCache.java\nindex e14d80cebce..0671bd4259b 100644\n--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/CAnnotationProcessorCache.java\n+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/CAnnotationProcessorCache.java\n\n@@ -76,9 +76,14 @@ public final class CAnnotationProcessorCache {\n             @Override\n             public Boolean getValueOrDefault(UnmodifiableEconomicMap<OptionKey<?>, Object> values) {\n                 if (!values.containsKey(this)) {\n-                    return !NewCAPCache.getValue() && !ExitAfterQueryCodeGeneration.getValue() &&\n-                                    !ImageSingletons.lookup(Platform.class).getArchitecture().equals(SubstrateUtil.getArchitectureName());\n-                    // We need CAP cache for cross-arch builds, since we cannot run query code.\n+                    // If user hasn't specified this option, we should determine optimal default value.\n+                    if (!ExitAfterQueryCodeGeneration.getValue() && !ImageSingletons.lookup(Platform.class).getArchitecture().equals(SubstrateUtil.getArchitectureName())) {\n+                        // If query code generation isn't explicitly requested, and we are running cross-arch build,\n+                        // CAP cache should be required (since we cannot run query code).\n+                        return true;\n+                    } else {\n+                        return false;\n+                    }\n                 }\n                 return (Boolean) values.get(this);\n             }\n"}}, {"oid": "6c41f986b3c394800904f4d9ac28796564613bee", "url": "https://github.com/oracle/graal/commit/6c41f986b3c394800904f4d9ac28796564613bee", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-12-03T16:20:54Z", "type": "forcePushed"}, {"oid": "3afaa2e35add6c6cd00e181dc243bca8e761f601", "url": "https://github.com/oracle/graal/commit/3afaa2e35add6c6cd00e181dc243bca8e761f601", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-12-03T17:00:28Z", "type": "forcePushed"}, {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4", "url": "https://github.com/oracle/graal/commit/887bc8e2d381ed23a440203b37efc38cbd2ac8e4", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-12-03T18:58:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNjQxMg==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535736412", "bodyText": "How is it ever possible that ImageSingletons.lookup(Platform.class).getArchitecture() does not return the correct architecture?\nI think a goal of this PR should be to remove the system properties svm.targetArch and svm.targetName", "author": "christianwimmer", "createdAt": "2020-12-04T00:02:55Z", "path": "substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java", "diffHunk": "@@ -80,7 +82,7 @@\n      * Create an empty Mach-O object file.\n      */\n     public MachOObjectFile(int pageSize) {\n-        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? System.getProperty(\"os.arch\") : System.getProperty(\"svm.targetArch\")));\n+        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? ImageSingletons.lookup(Platform.class).getArchitecture() : System.getProperty(\"svm.targetArch\")));", "originalCommit": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MDEzMg==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536040132", "bodyText": "I was trying to make this PR additive without breaking any of existing use-cases (for example Gluon Substrate, or non public platforms). My reasoning was that after this PR is accepted, removal of these non-api ways to specify non standard os.name/os.arch shouldn't be an issue.", "author": "lazar-mitrovic", "createdAt": "2020-12-04T11:43:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNjQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4NzM2NA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536287364", "bodyText": "I'm talking here about internal usages of these system properties. I'm fine if we keep them set in the image builder for another release. But all internal usages should go away immediately in this PR.", "author": "christianwimmer", "createdAt": "2020-12-04T18:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNjQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMTI5Ng==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536301296", "bodyText": "Oh now I get it, you are right. I'll change this asap.", "author": "lazar-mitrovic", "createdAt": "2020-12-04T18:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNjQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMjE4NA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536312184", "bodyText": "Should be fixed now.", "author": "lazar-mitrovic", "createdAt": "2020-12-04T18:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNjQxMg=="}], "type": "inlineReview", "revised_code": {"commit": "ef3fe79b560d685d7445af05d3e13aad3c48e9fc", "chunk": "diff --git a/substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java b/substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java\nindex ba257fc1cac..413614d77c7 100644\n--- a/substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java\n+++ b/substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java\n\n@@ -82,7 +82,7 @@ public final class MachOObjectFile extends ObjectFile {\n      * Create an empty Mach-O object file.\n      */\n     public MachOObjectFile(int pageSize) {\n-        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? ImageSingletons.lookup(Platform.class).getArchitecture() : System.getProperty(\"svm.targetArch\")));\n+        this(pageSize, MachOCpuType.from(ImageSingletons.lookup(Platform.class).getArchitecture()));\n     }\n \n     public MachOObjectFile(int pageSize, MachOCpuType cpuType) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535737323", "bodyText": "I don't think we should introduce these BASE interfaces. We get a too deep and confusing hierarchy. I would not know when to use LINUX vs. LINUX_BASE in a Platforms annotation.", "author": "christianwimmer", "createdAt": "2020-12-04T00:05:28Z", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -103,6 +136,33 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n      */\n     interface AARCH64 extends Platform {\n \n+        /**\n+         * Returns string representing AARCH64 architecture.\n+         *\n+         * @since 21.0\n+         */\n+        default String getArchitecture() {\n+            return \"aarch64\";\n+        }\n+    }\n+\n+    /*\n+     * Operating system bases.\n+     */\n+    /**\n+     * Interface encapsulating all linux-derived operating systems.\n+     *\n+     * @since 21.0\n+     */\n+    interface LINUX_BASE extends InternalPlatform.PLATFORM_JNI {", "originalCommit": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMDkxMw==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536000913", "bodyText": "You would always use LINUX_BASE unless it is Android specific or Linux specific. What would be a more minimal approach to handle Android and iOS specific things?\nThey are a separate platform and this hierarchy tends to reflect that in the most minimal way we could find.", "author": "vjovanov", "createdAt": "2020-12-04T10:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA1MzY5Mg==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536053692", "bodyText": "One idea would be to call it LINUX_FAMILY to make things clear?", "author": "vjovanov", "createdAt": "2020-12-04T12:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4NjkxMw==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536286913", "bodyText": "Maybe better example for why this approach would be beneficial is regarding current Apple developments. ATM Darwin base/family contains 3 different operating systems on Aarch64 architecture (iOS, iPadOS and MacOS). Without some kind of base platform, differences between those systems would need to be implemented by opting-out and bunch of checks throughout the code base.\nAs for Android/Linux, differences are largely based on LibC (glibc/bionic), however our current approach means that there would be a bunch of extra checks (for AWT for example, since Android doesn't include Xserver) in order to separate those two.\nIf we ever mean to add this kind of abstraction, it would be best that it is done now, since changes at a later date would probably be API breaking. Otherwise, all those changes are located in latest commit of this PR, so they are easily revertable.", "author": "lazar-mitrovic", "createdAt": "2020-12-04T18:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MTI0Nw==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536291247", "bodyText": "Did you notice that you just said \"use LINUX_BASE unless it is Linux specific\" - which is exactly my point of confusion?\nIs there really anything that cannot be modeled using ANDROID_AARCH64 and the other leaf platforms for Linux? That would be best.\nIf we really need an intermediate platform, I would leave \"LINUX\" as it is to include every flavor including Android (the bulk of all usages) and introduce a LINUX_SERVER to distinguish it from ANDROID. That avoids all the renamings in this PR, and all future problems where people will write new Platforms annotations wrongly with LINUX that then breaks Android.", "author": "christianwimmer", "createdAt": "2020-12-04T18:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyODcxMA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536328710", "bodyText": "You are right, from Wikipedia:\n\nLinux is a family of open-source Unix-like operating systems based on the Linux kernel.\nDarwin is an open-source Unix-like operating system first released by Apple Inc. Darwin forms the core set of components upon which macOS (previously OS X and Mac OS X), iOS, watchOS, tvOS, and iPadOS are based.\n\nI think we can then use e.g., macOS and iOS to distinguish things on the Darwin side. And for Linux we could use another name (this can be done in a separate PR).\nI am not in favor of LINUX_SERVER because it can also be used on desktops. Maybe, 'LINUX_DISTRIBUTION' but we can cross that bridge when we get there.\nThis commit was anyhow made last as a proposal.", "author": "vjovanov", "createdAt": "2020-12-04T19:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNzEyMw==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536337123", "bodyText": "Commit reverted.", "author": "lazar-mitrovic", "createdAt": "2020-12-04T19:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "8f706780f4a1be776c7a04db5a6e120cf5debcd6", "chunk": "diff --git a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\nindex 5a0b4aa2f24..db941081a51 100644\n--- a/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\n+++ b/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java\n\n@@ -146,25 +146,6 @@ public interface Platform {\n         }\n     }\n \n-    /*\n-     * Operating system bases.\n-     */\n-    /**\n-     * Interface encapsulating all linux-derived operating systems.\n-     *\n-     * @since 21.0\n-     */\n-    interface LINUX_BASE extends InternalPlatform.PLATFORM_JNI {\n-    }\n-\n-    /**\n-     * Interface encapsulating all darwin-derived operating systems.\n-     *\n-     * @since 21.0\n-     */\n-    interface DARWIN_BASE extends InternalPlatform.PLATFORM_JNI {\n-    }\n-\n     /*\n      * The standard operating systems that are supported.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczOTc1OA==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535739758", "bodyText": "@pejovica FYI", "author": "christianwimmer", "createdAt": "2020-12-04T00:11:49Z", "path": "substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java", "diffHunk": "@@ -122,13 +132,194 @@ private static String toJavaString(WCharPointer wcString, UnsignedWord length) {\n         return CTypeConversion.toJavaString((CCharPointer) wcString, SizeOf.unsigned(WCharPointer.class).multiply(length), StandardCharsets.UTF_16LE);\n     }\n \n+    private Pair<String, String> cachedOsNameAndVersion;\n+\n+    @Override\n+    protected String osNameValue() {\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getLeft();\n+    }\n+\n     @Override\n     protected String osVersionValue() {\n-        ByteBuffer versionBytes = ByteBuffer.allocate(4);\n-        versionBytes.putInt(SysinfoAPI.GetVersion());\n-        int majorVersion = versionBytes.get(3);\n-        int minorVersion = versionBytes.get(2);\n-        return majorVersion + \".\" + minorVersion;\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getRight();\n+    }\n+\n+    public Pair<String, String> getOsNameAndVersion() {", "originalCommit": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4Nzg1Mg==", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536287852", "bodyText": "Pejovi\u0107 was working with me on this commit", "author": "lazar-mitrovic", "createdAt": "2020-12-04T18:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczOTc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "8f706780f4a1be776c7a04db5a6e120cf5debcd6", "chunk": "diff --git a/substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java b/substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java\nindex 981d407d585..8077d190522 100644\n--- a/substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java\n+++ b/substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java\n\n@@ -132,194 +122,13 @@ public class WindowsSystemPropertiesSupport extends SystemPropertiesSupport {\n         return CTypeConversion.toJavaString((CCharPointer) wcString, SizeOf.unsigned(WCharPointer.class).multiply(length), StandardCharsets.UTF_16LE);\n     }\n \n-    private Pair<String, String> cachedOsNameAndVersion;\n-\n-    @Override\n-    protected String osNameValue() {\n-        if (cachedOsNameAndVersion == null) {\n-            cachedOsNameAndVersion = getOsNameAndVersion();\n-        }\n-        return cachedOsNameAndVersion.getLeft();\n-    }\n-\n     @Override\n     protected String osVersionValue() {\n-        if (cachedOsNameAndVersion == null) {\n-            cachedOsNameAndVersion = getOsNameAndVersion();\n-        }\n-        return cachedOsNameAndVersion.getRight();\n-    }\n-\n-    public Pair<String, String> getOsNameAndVersion() {\n-        /*\n-         * Reimplementation of code from java_props_md.c\n-         */\n-        SysinfoAPI.OSVERSIONINFOEXA ver = StackValue.get(SysinfoAPI.OSVERSIONINFOEXA.class);\n-        ver.dwOSVersionInfoSize(SizeOf.get(SysinfoAPI.OSVERSIONINFOEXA.class));\n-        SysinfoAPI.GetVersionExA(ver);\n-\n-        boolean is64bit = ImageSingletons.lookup(Platform.class).getArchitecture().endsWith(\"64\");\n-        boolean isWorkstation = ver.wProductType() == VER_NT_WORKSTATION;\n-        int platformId = ver.dwPlatformId();\n-\n-        int majorVersion = ver.dwMajorVersion();\n-        int minorVersion = ver.dwMinorVersion();\n-        int buildNumber = ver.dwBuildNumber();\n-        do {\n-            /* Get the full path to \\Windows\\System32\\kernel32.dll ... */\n-            LibC.WCharPointer kernel32Path = StackValue.get(WinBase.MAX_PATH, LibC.WCharPointer.class);\n-            LibC.WCharPointer kernel32Dll = NonmovableArrays.addressOf(NonmovableArrays.fromImageHeap(KERNEL32_DLL), 0);\n-            int len = WinBase.MAX_PATH - (int) LibC.wcslen(kernel32Dll).rawValue() - 1;\n-            int ret = SysinfoAPI.GetSystemDirectoryW(kernel32Path, len);\n-            if (ret == 0 || ret > len) {\n-                break;\n-            }\n-            LibC.wcsncat(kernel32Path, kernel32Dll, WordFactory.unsigned(WinBase.MAX_PATH - ret));\n-\n-            /* ... and use that for determining what version of Windows we're running on. */\n-            int versionSize = WinVer.GetFileVersionInfoSizeW(kernel32Path, WordFactory.nullPointer());\n-            if (versionSize == 0) {\n-                break;\n-            }\n-\n-            VoidPointer versionInfo = LibC.malloc(WordFactory.unsigned(versionSize));\n-            if (versionInfo.isNull()) {\n-                break;\n-            }\n-\n-            if (WinVer.GetFileVersionInfoW(kernel32Path, 0, versionSize, versionInfo) == 0) {\n-                LibC.free(versionInfo);\n-                break;\n-            }\n-\n-            LibC.WCharPointer rootPath = NonmovableArrays.addressOf(NonmovableArrays.fromImageHeap(ROOT_PATH), 0);\n-            WordPointer fileInfoPointer = StackValue.get(WordPointer.class);\n-            CIntPointer lengthPointer = StackValue.get(CIntPointer.class);\n-            if (WinVer.VerQueryValueW(versionInfo, rootPath, fileInfoPointer, lengthPointer) == 0) {\n-                LibC.free(versionInfo);\n-                break;\n-            }\n-\n-            VerRsrc.VS_FIXEDFILEINFO fileInfo = fileInfoPointer.read();\n-            majorVersion = (short) (fileInfo.dwProductVersionMS() >> 16); // HIWORD\n-            minorVersion = (short) fileInfo.dwProductVersionMS(); // LOWORD\n-            buildNumber = (short) (fileInfo.dwProductVersionLS() >> 16); // HIWORD\n-            LibC.free(versionInfo);\n-        } while (false);\n-\n-        String osVersion = majorVersion + \".\" + minorVersion;\n-        String osName;\n-\n-        switch (platformId) {\n-            case VER_PLATFORM_WIN32_WINDOWS:\n-                if (majorVersion == 4) {\n-                    switch (minorVersion) {\n-                        case 0:\n-                            osName = \"Windows 95\";\n-                            break;\n-                        case 10:\n-                            osName = \"Windows 98\";\n-                            break;\n-                        case 90:\n-                            osName = \"Windows Me\";\n-                            break;\n-                        default:\n-                            osName = \"Windows 9X (unknown)\";\n-                            break;\n-                    }\n-                } else {\n-                    osName = \"Windows 9X (unknown)\";\n-                }\n-                break;\n-            case VER_PLATFORM_WIN32_NT:\n-                if (majorVersion <= 4) {\n-                    osName = \"Windows NT\";\n-                } else if (majorVersion == 5) {\n-                    switch (minorVersion) {\n-                        case 0:\n-                            osName = \"Windows 2000\";\n-                            break;\n-                        case 1:\n-                            osName = \"Windows XP\";\n-                            break;\n-                        case 2:\n-                            if (isWorkstation && is64bit) {\n-                                osName = \"Windows XP\"; /* 64 bit */\n-                            } else {\n-                                osName = \"Windows 2003\";\n-                            }\n-                            break;\n-                        default:\n-                            osName = \"Windows NT (unknown)\";\n-                            break;\n-                    }\n-                } else if (majorVersion == 6) {\n-                    if (isWorkstation) {\n-                        switch (minorVersion) {\n-                            case 0:\n-                                osName = \"Windows Vista\";\n-                                break;\n-                            case 1:\n-                                osName = \"Windows 7\";\n-                                break;\n-                            case 2:\n-                                osName = \"Windows 8\";\n-                                break;\n-                            case 3:\n-                                osName = \"Windows 8.1\";\n-                                break;\n-                            default:\n-                                osName = \"Windows NT (unknown)\";\n-                        }\n-                    } else {\n-                        switch (minorVersion) {\n-                            case 0:\n-                                osName = \"Windows Server 2008\";\n-                                break;\n-                            case 1:\n-                                osName = \"Windows Server 2008 R2\";\n-                                break;\n-                            case 2:\n-                                osName = \"Windows Server 2012\";\n-                                break;\n-                            case 3:\n-                                osName = \"Windows Server 2012 R2\";\n-                                break;\n-                            default:\n-                                osName = \"Windows NT (unknown)\";\n-                        }\n-                    }\n-                } else if (majorVersion == 10) {\n-                    if (isWorkstation) {\n-                        switch (minorVersion) {\n-                            case 0:\n-                                osName = \"Windows 10\";\n-                                break;\n-                            default:\n-                                osName = \"Windows NT (unknown)\";\n-                        }\n-                    } else {\n-                        switch (minorVersion) {\n-                            case 0:\n-                                if (buildNumber > 17762) {\n-                                    osName = \"Windows Server 2019\";\n-                                } else {\n-                                    osName = \"Windows Server 2016\";\n-                                }\n-                                break;\n-                            default:\n-                                osName = \"Windows NT (unknown)\";\n-                        }\n-                    }\n-                } else {\n-                    osName = \"Windows NT (unknown)\";\n-                }\n-                break;\n-            default:\n-                osName = \"Windows (unknown)\";\n-                break;\n-        }\n-        return Pair.create(osName, osVersion);\n+        ByteBuffer versionBytes = ByteBuffer.allocate(4);\n+        versionBytes.putInt(SysinfoAPI.GetVersion());\n+        int majorVersion = versionBytes.get(3);\n+        int minorVersion = versionBytes.get(2);\n+        return majorVersion + \".\" + minorVersion;\n     }\n }\n \n"}}, {"oid": "ef3fe79b560d685d7445af05d3e13aad3c48e9fc", "url": "https://github.com/oracle/graal/commit/ef3fe79b560d685d7445af05d3e13aad3c48e9fc", "message": "Added LINUX_BASE and DARWIN_BASE meta platforms", "committedDate": "2020-12-04T18:52:12Z", "type": "forcePushed"}, {"oid": "8f706780f4a1be776c7a04db5a6e120cf5debcd6", "url": "https://github.com/oracle/graal/commit/8f706780f4a1be776c7a04db5a6e120cf5debcd6", "message": "--target parameter, initial Android/iOS support\n\nAndroid/iOS platform defaults\nNew Platform methods\nBetter CAP cache defaults", "committedDate": "2020-12-04T19:35:31Z", "type": "commit"}, {"oid": "29f31eaaf23b4d77d5f96aafb9840cae882edc04", "url": "https://github.com/oracle/graal/commit/29f31eaaf23b4d77d5f96aafb9840cae882edc04", "message": "os.name system property support\n\nBetter Windows version detection (JDK-8066504)\n\nWindows fixes and cleanup\nCo-authored-by: Aleksandar Pejovi\u0107 <aleksandar.pejovic@oracle.com>", "committedDate": "2020-12-04T19:36:25Z", "type": "commit"}, {"oid": "cb7992181040287f437b611963f41ca4684c259f", "url": "https://github.com/oracle/graal/commit/cb7992181040287f437b611963f41ca4684c259f", "message": "Load LibC using ServiceLoader", "committedDate": "2020-12-04T19:36:25Z", "type": "commit"}, {"oid": "372b87b76f073b7aa60b41979a3a90d80e1b0ba2", "url": "https://github.com/oracle/graal/commit/372b87b76f073b7aa60b41979a3a90d80e1b0ba2", "message": "Load Platforms using ServiceLoader", "committedDate": "2020-12-04T19:36:25Z", "type": "commit"}, {"oid": "372b87b76f073b7aa60b41979a3a90d80e1b0ba2", "url": "https://github.com/oracle/graal/commit/372b87b76f073b7aa60b41979a3a90d80e1b0ba2", "message": "Load Platforms using ServiceLoader", "committedDate": "2020-12-04T19:36:25Z", "type": "forcePushed"}]}