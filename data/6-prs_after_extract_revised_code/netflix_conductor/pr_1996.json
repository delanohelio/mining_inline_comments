{"pr_number": 1996, "pr_title": "Added GitHub Actions", "pr_createdAt": "2020-12-08T04:23:30Z", "pr_url": "https://github.com/Netflix/conductor/pull/1996", "timeline": [{"oid": "b60959df0e11973449c46deb6bd5100b2c702efe", "url": "https://github.com/Netflix/conductor/commit/b60959df0e11973449c46deb6bd5100b2c702efe", "message": "added workflow status badge to readme;\nless verbose travis builds", "committedDate": "2020-12-09T00:17:35Z", "type": "forcePushed"}, {"oid": "a7ca856ea27599ffe7b267c0d49c1009750d5301", "url": "https://github.com/Netflix/conductor/commit/a7ca856ea27599ffe7b267c0d49c1009750d5301", "message": "added project management workflow", "committedDate": "2020-12-09T01:53:50Z", "type": "forcePushed"}, {"oid": "03d4d8e54b63dd8cbc7b186820f3c0accf8b7ad7", "url": "https://github.com/Netflix/conductor/commit/03d4d8e54b63dd8cbc7b186820f3c0accf8b7ad7", "message": "enable tests in workflow", "committedDate": "2021-03-16T23:46:36Z", "type": "forcePushed"}, {"oid": "54bdad1ee600bbe02189249344c5489627cfe2f0", "url": "https://github.com/Netflix/conductor/commit/54bdad1ee600bbe02189249344c5489627cfe2f0", "message": "use testcontainer for http test", "committedDate": "2021-03-18T00:33:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ4NTQxMg==", "url": "https://github.com/Netflix/conductor/pull/1996#discussion_r596485412", "bodyText": "This is not needed. @ClassRule takes care of destroying the docker container.", "author": "aravindanr", "createdAt": "2021-03-18T01:12:45Z", "path": "contribs/src/test/java/com/netflix/conductor/contribs/tasks/http/HttpTaskTest.java", "diffHunk": "@@ -77,18 +77,62 @@ public static void init() throws Exception {\n         map.put(\"SomeKey\", null);\n         JSON_RESPONSE = objectMapper.writeValueAsString(map);\n \n-        server = new Server(7009);\n-        ServletContextHandler servletContextHandler = new ServletContextHandler(server, \"/\",\n-            ServletContextHandler.SESSIONS);\n-        servletContextHandler.setHandler(new EchoHandler());\n-        server.start();\n+        final TypeReference<Map<String, Object>> mapOfObj = new TypeReference<Map<String, Object>>() {\n+        };\n+        MockServerClient client = new MockServerClient(mockServer.getHost(), mockServer.getServerPort());\n+        client.when(\n+            request()\n+                .withPath(\"/post\")\n+                .withMethod(\"POST\"))\n+            .respond(request -> {\n+                Map<String, Object> reqBody = objectMapper.readValue(request.getBody().toString(), mapOfObj);\n+                Set<String> keys = reqBody.keySet();\n+                Map<String, Object> respBody = new HashMap<>();\n+                keys.forEach(k -> respBody.put(k, k));\n+                return response()\n+                    .withContentType(MediaType.APPLICATION_JSON)\n+                    .withBody(objectMapper.writeValueAsString(respBody));\n+            });\n+        client.when(\n+            request()\n+                .withPath(\"/post2\")\n+                .withMethod(\"POST\"))\n+            .respond(response()\n+                .withStatusCode(204));\n+        client.when(\n+            request()\n+                .withPath(\"/failure\")\n+                .withMethod(\"GET\"))\n+            .respond(response()\n+                .withStatusCode(500)\n+                .withContentType(MediaType.TEXT_PLAIN)\n+                .withBody(ERROR_RESPONSE));\n+        client.when(\n+            request()\n+                .withPath(\"/text\")\n+                .withMethod(\"GET\"))\n+            .respond(response()\n+                .withBody(TEXT_RESPONSE));\n+        client.when(\n+            request()\n+                .withPath(\"/numeric\")\n+                .withMethod(\"GET\"))\n+            .respond(response()\n+                .withBody(String.valueOf(NUM_RESPONSE)));\n+        client.when(\n+            request()\n+                .withPath(\"/json\")\n+                .withMethod(\"GET\"))\n+            .respond(response()\n+                .withContentType(MediaType.APPLICATION_JSON)\n+                .withBody(JSON_RESPONSE));\n     }\n \n     @AfterClass\n     public static void cleanup() {", "originalCommit": "54bdad1ee600bbe02189249344c5489627cfe2f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44a0d3673214bd4a8cee73a5bd6f95de222fd2de", "chunk": "diff --git a/contribs/src/test/java/com/netflix/conductor/contribs/tasks/http/HttpTaskTest.java b/contribs/src/test/java/com/netflix/conductor/contribs/tasks/http/HttpTaskTest.java\nindex 5132545b..2fc83be8 100644\n--- a/contribs/src/test/java/com/netflix/conductor/contribs/tasks/http/HttpTaskTest.java\n+++ b/contribs/src/test/java/com/netflix/conductor/contribs/tasks/http/HttpTaskTest.java\n\n@@ -128,17 +127,6 @@ public class HttpTaskTest {\n                 .withBody(JSON_RESPONSE));\n     }\n \n-    @AfterClass\n-    public static void cleanup() {\n-        if (mockServer != null) {\n-            try {\n-                mockServer.stop();\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-\n     @Before\n     public void setup() {\n         workflowExecutor = mock(WorkflowExecutor.class);\n"}}, {"oid": "44a0d3673214bd4a8cee73a5bd6f95de222fd2de", "url": "https://github.com/Netflix/conductor/commit/44a0d3673214bd4a8cee73a5bd6f95de222fd2de", "message": "use testcontainer for http test", "committedDate": "2021-03-18T20:14:40Z", "type": "forcePushed"}, {"oid": "fd4878c48dd5a3c39ebc98b48ab0912336021618", "url": "https://github.com/Netflix/conductor/commit/fd4878c48dd5a3c39ebc98b48ab0912336021618", "message": "try to print more detail about failure", "committedDate": "2021-03-30T19:14:26Z", "type": "forcePushed"}, {"oid": "ac2ec7636aa2b153b25148faffbbf66a0510dff8", "url": "https://github.com/Netflix/conductor/commit/ac2ec7636aa2b153b25148faffbbf66a0510dff8", "message": "added CI workflow", "committedDate": "2021-04-02T23:05:58Z", "type": "commit"}, {"oid": "914d678ff1f74c042900a3ec297381367ea2cb4d", "url": "https://github.com/Netflix/conductor/commit/914d678ff1f74c042900a3ec297381367ea2cb4d", "message": "added workflow status badge to readme;less verbose travis builds", "committedDate": "2021-04-02T23:05:58Z", "type": "commit"}, {"oid": "2a591f3f282b6bb0129fa98c95ce3b40b026a5db", "url": "https://github.com/Netflix/conductor/commit/2a591f3f282b6bb0129fa98c95ce3b40b026a5db", "message": "upgrade gradle wrapper", "committedDate": "2021-04-02T23:05:58Z", "type": "commit"}, {"oid": "af9fb701c431eba910c2302b9d233431ff0e03d1", "url": "https://github.com/Netflix/conductor/commit/af9fb701c431eba910c2302b9d233431ff0e03d1", "message": "use testcontainer for http test", "committedDate": "2021-04-02T23:05:58Z", "type": "commit"}, {"oid": "ef072b5785a81248884215aef1cf37a06ac5b702", "url": "https://github.com/Netflix/conductor/commit/ef072b5785a81248884215aef1cf37a06ac5b702", "message": "try to print more detail about failure", "committedDate": "2021-04-02T23:05:58Z", "type": "commit"}, {"oid": "09a34ce799b4422542950168bd69b56e1a390610", "url": "https://github.com/Netflix/conductor/commit/09a34ce799b4422542950168bd69b56e1a390610", "message": "added stale workflow", "committedDate": "2021-04-02T23:05:58Z", "type": "commit"}, {"oid": "ebaef7d5f89869352b786a6e35a1f0f5a7507172", "url": "https://github.com/Netflix/conductor/commit/ebaef7d5f89869352b786a6e35a1f0f5a7507172", "message": "added gradle wrapper workflow", "committedDate": "2021-04-02T23:05:59Z", "type": "commit"}, {"oid": "ebaef7d5f89869352b786a6e35a1f0f5a7507172", "url": "https://github.com/Netflix/conductor/commit/ebaef7d5f89869352b786a6e35a1f0f5a7507172", "message": "added gradle wrapper workflow", "committedDate": "2021-04-02T23:05:59Z", "type": "forcePushed"}, {"oid": "aae2ed660e426585e7de4d981e5a3e9ad7762166", "url": "https://github.com/Netflix/conductor/commit/aae2ed660e426585e7de4d981e5a3e9ad7762166", "message": "added release drafter", "committedDate": "2021-04-03T05:20:30Z", "type": "forcePushed"}, {"oid": "79301145d474e10aebd1d36a740d4153025d8d47", "url": "https://github.com/Netflix/conductor/commit/79301145d474e10aebd1d36a740d4153025d8d47", "message": "added release drafter", "committedDate": "2021-04-03T06:03:27Z", "type": "forcePushed"}, {"oid": "f255f3f469775ebfef42a8011fef0f4e494f4cdc", "url": "https://github.com/Netflix/conductor/commit/f255f3f469775ebfef42a8011fef0f4e494f4cdc", "message": "added release drafter", "committedDate": "2021-04-03T06:43:53Z", "type": "commit"}, {"oid": "f255f3f469775ebfef42a8011fef0f4e494f4cdc", "url": "https://github.com/Netflix/conductor/commit/f255f3f469775ebfef42a8011fef0f4e494f4cdc", "message": "added release drafter", "committedDate": "2021-04-03T06:43:53Z", "type": "forcePushed"}, {"oid": "64d6979fd873be0c0e1b23ec06af3b58c557370f", "url": "https://github.com/Netflix/conductor/commit/64d6979fd873be0c0e1b23ec06af3b58c557370f", "message": "added pull request template", "committedDate": "2021-04-05T18:51:05Z", "type": "commit"}, {"oid": "64d6979fd873be0c0e1b23ec06af3b58c557370f", "url": "https://github.com/Netflix/conductor/commit/64d6979fd873be0c0e1b23ec06af3b58c557370f", "message": "added pull request template", "committedDate": "2021-04-05T18:51:05Z", "type": "forcePushed"}, {"oid": "b8ec8cc01befb41955e46f7b75450067df0f7400", "url": "https://github.com/Netflix/conductor/commit/b8ec8cc01befb41955e46f7b75450067df0f7400", "message": "updated CI status badge in ReadMe", "committedDate": "2021-04-05T21:03:40Z", "type": "commit"}]}