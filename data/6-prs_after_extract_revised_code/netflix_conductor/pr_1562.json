{"pr_number": 1562, "pr_title": "Add a new task def attribute to support task poll timeout", "pr_createdAt": "2020-03-05T10:50:56Z", "pr_url": "https://github.com/Netflix/conductor/pull/1562", "timeline": [{"oid": "d28d220cba9adf36efac7186d68bdfd88359521d", "url": "https://github.com/Netflix/conductor/commit/d28d220cba9adf36efac7186d68bdfd88359521d", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-05T10:52:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyOTMzNg==", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388229336", "bodyText": "if taskDef.getPollTimeoutSeconds() is null (the case for all tasks defined before that functionality has been merged, and it's optional), this check is a bit weird.\nPerhaps only checking it's not null is enough instead.", "author": "Jiehong", "createdAt": "2020-03-05T11:15:48Z", "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -524,23 +524,38 @@ void checkTaskTimeout(TaskDef taskDef, Task task) {\n             LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n             return;\n         }\n-        if (task.getStatus().isTerminal() || taskDef.getTimeoutSeconds() <= 0 || task.getStartTime() <= 0) {\n+        if (task.getStatus().isTerminal()) {\n             return;\n         }\n \n-        long timeout = 1000L * taskDef.getTimeoutSeconds();\n-        long now = System.currentTimeMillis();\n-        long elapsedTime = now - (task.getStartTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n+        String reason = null;\n+        final long now = System.currentTimeMillis();\n+        final long startDelay = 1000L * task.getStartDelayInSeconds();\n \n-        if (elapsedTime < timeout) {\n-            return;\n+        if (task.getStatus().equals(SCHEDULED) && taskDef.getPollTimeoutSeconds() > 0) {", "originalCommit": "d28d220cba9adf36efac7186d68bdfd88359521d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI1MzExMQ==", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388253111", "bodyText": "I think both (!= null and > 0) need to be checked. We can assume (to write down on the doc) that if pollTimeoutSeconds is set to 0, no checkTaskTimeout should be performed in this case", "author": "andrea11", "createdAt": "2020-03-05T12:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyOTMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDM5Nw==", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388284397", "bodyText": "Done", "author": "nbraquart", "createdAt": "2020-03-05T13:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyOTMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "0c1ff54bbd03794327f02fce6cafba24194c84de", "chunk": "diff --git a/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java b/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java\nindex e492a710..7a9a3ce9 100644\n--- a/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java\n+++ b/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java\n\n@@ -524,50 +525,62 @@ public class DeciderService {\n             LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n             return;\n         }\n-        if (task.getStatus().isTerminal()) {\n+        if (task.getStatus().isTerminal() || taskDef.getTimeoutSeconds() <= 0 || task.getStartTime() <= 0) {\n             return;\n         }\n \n-        String reason = null;\n-        final long now = System.currentTimeMillis();\n-        final long startDelay = 1000L * task.getStartDelayInSeconds();\n+        long timeout = 1000L * taskDef.getTimeoutSeconds();\n+        long now = System.currentTimeMillis();\n+        long elapsedTime = now - (task.getStartTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n \n-        if (task.getStatus().equals(SCHEDULED) && taskDef.getPollTimeoutSeconds() > 0) {\n-            final long pollTimeout = 1000L * taskDef.getPollTimeoutSeconds();\n-            final long pollElapsedTime = now - (task.getScheduledTime() + startDelay);\n+        if (elapsedTime < timeout) {\n+            return;\n+        }\n \n-            if (pollElapsedTime > pollTimeout) {\n-                reason = String.format(\n-                    \"Task poll timed out after %d seconds. Poll timeout configured as %d. Timeout policy configured to %s\",\n-                    pollElapsedTime / 1000L, pollTimeout, taskDef.getTimeoutPolicy().name());\n-            }\n-        } else if (task.getStartTime() > 0 && taskDef.getTimeoutSeconds() > 0) {\n-            final long timeout = 1000L * taskDef.getTimeoutSeconds();\n-            final long elapsedTime = now - (task.getStartTime() + startDelay);\n-\n-            if (elapsedTime > timeout) {\n-                reason = String.format(\n-                    \"Task timed out after %d seconds. Timeout configured as %d. Timeout policy configured to %s\",\n-                    elapsedTime / 1000L, timeout, taskDef.getTimeoutPolicy().name());\n-            }\n+        String reason = String.format(\"Task timed out after %d seconds. Timeout configured as %d. \"\n+                                          + \"Timeout policy configured to %s\", elapsedTime/1000L, timeout, taskDef.getTimeoutPolicy().name());\n+        timeoutTask(reason, taskDef, task);\n+    }\n+\n+    @VisibleForTesting\n+    void checkTaskPollTimeout(TaskDef taskDef, Task task) {\n+        if (taskDef == null) {\n+            LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n+            return;\n+        }\n+        if (taskDef.getPollTimeoutSeconds() == null || taskDef.getPollTimeoutSeconds() <= 0 || !task.getStatus().equals(SCHEDULED)) {\n+            return;\n         }\n \n-        if (reason != null) {\n-            Monitors.recordTaskTimeout(task.getTaskDefName());\n+        final long pollTimeout = 1000L * taskDef.getPollTimeoutSeconds();\n+        final long now = System.currentTimeMillis();\n+        final long pollElapsedTime = now - (task.getScheduledTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n \n-            switch (taskDef.getTimeoutPolicy()) {\n-            case ALERT_ONLY:\n-                LOGGER.info(reason);\n-                return;\n-            case RETRY:\n-                task.setStatus(TIMED_OUT);\n-                task.setReasonForIncompletion(reason);\n-                return;\n-            case TIME_OUT_WF:\n-                task.setStatus(TIMED_OUT);\n-                task.setReasonForIncompletion(reason);\n-                throw new TerminateWorkflowException(reason, WorkflowStatus.TIMED_OUT, task);\n-            }\n+        if (pollElapsedTime < pollTimeout) {\n+            return;\n+        }\n+\n+        String reason = String.format(\n+            \"Task poll timed out after %d seconds. Poll timeout configured as %d. Timeout policy configured to %s\",\n+            pollElapsedTime / 1000L, pollTimeout, taskDef.getTimeoutPolicy().name());\n+        timeoutTask(reason, taskDef, task);\n+    }\n+\n+    void timeoutTask(String reason, TaskDef taskDef, Task task) {\n+        Monitors.recordTaskTimeout(task.getTaskDefName());\n+\n+        switch (taskDef.getTimeoutPolicy()) {\n+        case ALERT_ONLY:\n+            LOGGER.info(reason);\n+            return;\n+        case RETRY:\n+            task.setStatus(TIMED_OUT);\n+            task.setReasonForIncompletion(reason);\n+            return;\n+        case TIME_OUT_WF:\n+            task.setStatus(TIMED_OUT);\n+            task.setReasonForIncompletion(reason);\n+            throw new TerminateWorkflowException(reason, WorkflowStatus.TIMED_OUT, task);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMDMwNQ==", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388230305", "bodyText": "This field shouldn't be allowed to be negative. Could you please add a @Min like for responseTimeoutSeconds ?", "author": "Jiehong", "createdAt": "2020-03-05T11:17:52Z", "path": "common/src/main/java/com/netflix/conductor/common/metadata/tasks/TaskDef.java", "diffHunk": "@@ -113,6 +113,9 @@\n \t@Email(message = \"ownerEmail should be valid email address\")\n \tprivate String ownerEmail;\n \n+\t@ProtoField(id = 19)\n+\tprivate Integer pollTimeoutSeconds;", "originalCommit": "d28d220cba9adf36efac7186d68bdfd88359521d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDM1Mg==", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388284352", "bodyText": "Done", "author": "nbraquart", "createdAt": "2020-03-05T13:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMDMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a71efb85b545e195f81fd5ead4d2b9a241bbed0f", "chunk": "diff --git a/common/src/main/java/com/netflix/conductor/common/metadata/tasks/TaskDef.java b/common/src/main/java/com/netflix/conductor/common/metadata/tasks/TaskDef.java\nindex 4b786770..6e9b2e3b 100644\n--- a/common/src/main/java/com/netflix/conductor/common/metadata/tasks/TaskDef.java\n+++ b/common/src/main/java/com/netflix/conductor/common/metadata/tasks/TaskDef.java\n\n@@ -114,6 +114,7 @@ public class TaskDef extends Auditable {\n \tprivate String ownerEmail;\n \n \t@ProtoField(id = 19)\n+\t@Min(value = 0, message = \"TaskDef pollTimeoutSeconds: {value} must be >= 0\")\n \tprivate Integer pollTimeoutSeconds;\n \n \tpublic TaskDef() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI1NTc2OQ==", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388255769", "bodyText": "maybe use Optional?", "author": "andrea11", "createdAt": "2020-03-05T12:13:45Z", "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -524,23 +524,38 @@ void checkTaskTimeout(TaskDef taskDef, Task task) {\n             LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n             return;\n         }\n-        if (task.getStatus().isTerminal() || taskDef.getTimeoutSeconds() <= 0 || task.getStartTime() <= 0) {\n+        if (task.getStatus().isTerminal()) {\n             return;\n         }\n \n-        long timeout = 1000L * taskDef.getTimeoutSeconds();\n-        long now = System.currentTimeMillis();\n-        long elapsedTime = now - (task.getStartTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n+        String reason = null;", "originalCommit": "d28d220cba9adf36efac7186d68bdfd88359521d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDMxNg==", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388284316", "bodyText": "No longer applicable", "author": "nbraquart", "createdAt": "2020-03-05T13:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI1NTc2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c1ff54bbd03794327f02fce6cafba24194c84de", "chunk": "diff --git a/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java b/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java\nindex e492a710..7a9a3ce9 100644\n--- a/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java\n+++ b/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java\n\n@@ -524,50 +525,62 @@ public class DeciderService {\n             LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n             return;\n         }\n-        if (task.getStatus().isTerminal()) {\n+        if (task.getStatus().isTerminal() || taskDef.getTimeoutSeconds() <= 0 || task.getStartTime() <= 0) {\n             return;\n         }\n \n-        String reason = null;\n-        final long now = System.currentTimeMillis();\n-        final long startDelay = 1000L * task.getStartDelayInSeconds();\n+        long timeout = 1000L * taskDef.getTimeoutSeconds();\n+        long now = System.currentTimeMillis();\n+        long elapsedTime = now - (task.getStartTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n \n-        if (task.getStatus().equals(SCHEDULED) && taskDef.getPollTimeoutSeconds() > 0) {\n-            final long pollTimeout = 1000L * taskDef.getPollTimeoutSeconds();\n-            final long pollElapsedTime = now - (task.getScheduledTime() + startDelay);\n+        if (elapsedTime < timeout) {\n+            return;\n+        }\n \n-            if (pollElapsedTime > pollTimeout) {\n-                reason = String.format(\n-                    \"Task poll timed out after %d seconds. Poll timeout configured as %d. Timeout policy configured to %s\",\n-                    pollElapsedTime / 1000L, pollTimeout, taskDef.getTimeoutPolicy().name());\n-            }\n-        } else if (task.getStartTime() > 0 && taskDef.getTimeoutSeconds() > 0) {\n-            final long timeout = 1000L * taskDef.getTimeoutSeconds();\n-            final long elapsedTime = now - (task.getStartTime() + startDelay);\n-\n-            if (elapsedTime > timeout) {\n-                reason = String.format(\n-                    \"Task timed out after %d seconds. Timeout configured as %d. Timeout policy configured to %s\",\n-                    elapsedTime / 1000L, timeout, taskDef.getTimeoutPolicy().name());\n-            }\n+        String reason = String.format(\"Task timed out after %d seconds. Timeout configured as %d. \"\n+                                          + \"Timeout policy configured to %s\", elapsedTime/1000L, timeout, taskDef.getTimeoutPolicy().name());\n+        timeoutTask(reason, taskDef, task);\n+    }\n+\n+    @VisibleForTesting\n+    void checkTaskPollTimeout(TaskDef taskDef, Task task) {\n+        if (taskDef == null) {\n+            LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n+            return;\n+        }\n+        if (taskDef.getPollTimeoutSeconds() == null || taskDef.getPollTimeoutSeconds() <= 0 || !task.getStatus().equals(SCHEDULED)) {\n+            return;\n         }\n \n-        if (reason != null) {\n-            Monitors.recordTaskTimeout(task.getTaskDefName());\n+        final long pollTimeout = 1000L * taskDef.getPollTimeoutSeconds();\n+        final long now = System.currentTimeMillis();\n+        final long pollElapsedTime = now - (task.getScheduledTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n \n-            switch (taskDef.getTimeoutPolicy()) {\n-            case ALERT_ONLY:\n-                LOGGER.info(reason);\n-                return;\n-            case RETRY:\n-                task.setStatus(TIMED_OUT);\n-                task.setReasonForIncompletion(reason);\n-                return;\n-            case TIME_OUT_WF:\n-                task.setStatus(TIMED_OUT);\n-                task.setReasonForIncompletion(reason);\n-                throw new TerminateWorkflowException(reason, WorkflowStatus.TIMED_OUT, task);\n-            }\n+        if (pollElapsedTime < pollTimeout) {\n+            return;\n+        }\n+\n+        String reason = String.format(\n+            \"Task poll timed out after %d seconds. Poll timeout configured as %d. Timeout policy configured to %s\",\n+            pollElapsedTime / 1000L, pollTimeout, taskDef.getTimeoutPolicy().name());\n+        timeoutTask(reason, taskDef, task);\n+    }\n+\n+    void timeoutTask(String reason, TaskDef taskDef, Task task) {\n+        Monitors.recordTaskTimeout(task.getTaskDefName());\n+\n+        switch (taskDef.getTimeoutPolicy()) {\n+        case ALERT_ONLY:\n+            LOGGER.info(reason);\n+            return;\n+        case RETRY:\n+            task.setStatus(TIMED_OUT);\n+            task.setReasonForIncompletion(reason);\n+            return;\n+        case TIME_OUT_WF:\n+            task.setStatus(TIMED_OUT);\n+            task.setReasonForIncompletion(reason);\n+            throw new TerminateWorkflowException(reason, WorkflowStatus.TIMED_OUT, task);\n         }\n     }\n \n"}}, {"oid": "0c1ff54bbd03794327f02fce6cafba24194c84de", "url": "https://github.com/Netflix/conductor/commit/0c1ff54bbd03794327f02fce6cafba24194c84de", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-05T13:13:07Z", "type": "forcePushed"}, {"oid": "a71efb85b545e195f81fd5ead4d2b9a241bbed0f", "url": "https://github.com/Netflix/conductor/commit/a71efb85b545e195f81fd5ead4d2b9a241bbed0f", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-05T13:14:03Z", "type": "forcePushed"}, {"oid": "1dc5bd18f62384ad9922260c32a0b4c0483e3f64", "url": "https://github.com/Netflix/conductor/commit/1dc5bd18f62384ad9922260c32a0b4c0483e3f64", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-05T13:16:57Z", "type": "forcePushed"}, {"oid": "4c9a464fe540a72d75e99f17af09451f42b5b853", "url": "https://github.com/Netflix/conductor/commit/4c9a464fe540a72d75e99f17af09451f42b5b853", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-05T13:18:52Z", "type": "forcePushed"}, {"oid": "555419ff2ad77feb255e8895772bc3b68883a19c", "url": "https://github.com/Netflix/conductor/commit/555419ff2ad77feb255e8895772bc3b68883a19c", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-05T13:20:08Z", "type": "forcePushed"}, {"oid": "3c0f0eb98f884674cd244bfa257a63e78842f72a", "url": "https://github.com/Netflix/conductor/commit/3c0f0eb98f884674cd244bfa257a63e78842f72a", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-05T13:20:51Z", "type": "forcePushed"}, {"oid": "87f03f88b2b872c8321f53061ed2998a7281dac2", "url": "https://github.com/Netflix/conductor/commit/87f03f88b2b872c8321f53061ed2998a7281dac2", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-05T13:23:11Z", "type": "forcePushed"}, {"oid": "fb1c6f1715b3ae16b5143e7956f205f854998e00", "url": "https://github.com/Netflix/conductor/commit/fb1c6f1715b3ae16b5143e7956f205f854998e00", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-05T13:47:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzc2Ng==", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r389207766", "bodyText": "When a task is sent back from the worker with callbackAfterSeconds set and IN_PROGRESS status, Conductor will mark this task as SCHEDULED and set it to invisible state in the queue to be available for polling after the specified callbackAfterSeconds. Reference\nIn these cases, the pollElapsedTime calculation here would wrongly mark this task to be poll timed out. This calculation would need to take into account, this scenario of callbackAfterSeconds and invisibility period on the queues. A similar time calculation can be found in the isResponseTimedOut method in this class for reference.", "author": "apanicker-nflx", "createdAt": "2020-03-07T00:48:04Z", "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -536,8 +537,36 @@ void checkTaskTimeout(TaskDef taskDef, Task task) {\n             return;\n         }\n \n-        String reason = String.format(\"Task timed out after %d seconds. Timeout configured as %d. \"\n-            + \"Timeout policy configured to %s\", elapsedTime/1000L, timeout, taskDef.getTimeoutPolicy().name());\n+        String reason = String.format(\"Task timed out after %d seconds. Timeout configured as %d seconds. \"\n+            + \"Timeout policy configured to %s\", elapsedTime / 1000L, timeout / 1000L, taskDef.getTimeoutPolicy().name());\n+        timeoutTaskWithTimeoutPolicy(reason, taskDef, task);\n+    }\n+\n+    @VisibleForTesting\n+    void checkTaskPollTimeout(TaskDef taskDef, Task task) {\n+        if (taskDef == null) {\n+            LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n+            return;\n+        }\n+        if (taskDef.getPollTimeoutSeconds() == null || taskDef.getPollTimeoutSeconds() <= 0 || !task.getStatus().equals(SCHEDULED)) {\n+            return;\n+        }\n+\n+        final long pollTimeout = 1000L * taskDef.getPollTimeoutSeconds();\n+        final long now = System.currentTimeMillis();\n+        final long pollElapsedTime = now - (task.getScheduledTime() + ((long) task.getStartDelayInSeconds() * 1000L));", "originalCommit": "fb1c6f1715b3ae16b5143e7956f205f854998e00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzMjkyNA==", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r389532924", "bodyText": "Thanks for the feedback. I have added the callbackAfterSeconds to the timeout for a correct computation as per your suggestion.", "author": "nbraquart", "createdAt": "2020-03-09T09:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4f1cebde86ceb85913a62b6c422a1e53bb25372e", "chunk": "diff --git a/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java b/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java\nindex e6b219d7..d84e0600 100644\n--- a/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java\n+++ b/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java\n\n@@ -553,10 +553,11 @@ public class DeciderService {\n         }\n \n         final long pollTimeout = 1000L * taskDef.getPollTimeoutSeconds();\n+        final long adjustedPollTimeout = pollTimeout + task.getCallbackAfterSeconds() * 1000L;\n         final long now = System.currentTimeMillis();\n         final long pollElapsedTime = now - (task.getScheduledTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n \n-        if (pollElapsedTime < pollTimeout) {\n+        if (pollElapsedTime < adjustedPollTimeout) {\n             return;\n         }\n \n"}}, {"oid": "4f1cebde86ceb85913a62b6c422a1e53bb25372e", "url": "https://github.com/Netflix/conductor/commit/4f1cebde86ceb85913a62b6c422a1e53bb25372e", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-09T09:05:39Z", "type": "commit"}, {"oid": "4f1cebde86ceb85913a62b6c422a1e53bb25372e", "url": "https://github.com/Netflix/conductor/commit/4f1cebde86ceb85913a62b6c422a1e53bb25372e", "message": "Add a new task def attribute to support task poll timeout", "committedDate": "2020-03-09T09:05:39Z", "type": "forcePushed"}]}