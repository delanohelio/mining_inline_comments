{"pr_number": 1921, "pr_title": "Adding resiliency tests and relevant changes for QueueDAO.", "pr_createdAt": "2020-10-12T23:17:40Z", "pr_url": "https://github.com/Netflix/conductor/pull/1921", "timeline": [{"oid": "f836543e736241e70b28bc37e5edcbf47cfee916", "url": "https://github.com/Netflix/conductor/commit/f836543e736241e70b28bc37e5edcbf47cfee916", "message": "Adding resiliency tests and relevant changes for QueueDAO.", "committedDate": "2020-10-12T23:15:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODE2Mg==", "url": "https://github.com/Netflix/conductor/pull/1921#discussion_r503658162", "bodyText": "Nice", "author": "apanicker-nflx", "createdAt": "2020-10-13T04:20:05Z", "path": "jersey/src/main/java/com/netflix/conductor/server/resources/TaskResource.java", "diffHunk": "@@ -187,6 +187,7 @@ public void removeTaskFromQueue(@PathParam(\"taskType\") String taskType,\n \t\treturn taskService.getAllPollData();\n \t}\n \n+\t@Deprecated", "originalCommit": "f836543e736241e70b28bc37e5edcbf47cfee916", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyMDcxNg==", "url": "https://github.com/Netflix/conductor/pull/1921#discussion_r504120716", "bodyText": "I am not convinced that a try...catch block here is the right way to address this. The exception when terminating a workflow should be caught at a granular level within the terminate logic and this should be logged/handled accordingly.", "author": "apanicker-nflx", "createdAt": "2020-10-13T17:07:32Z", "path": "core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "diffHunk": "@@ -514,7 +514,23 @@ public void rewind(String workflowId, boolean useLatestDefinitions) {\n         workflow.setStatus(WorkflowStatus.RUNNING);\n         workflow.setOutput(null);\n         workflow.setExternalOutputPayloadStoragePath(null);\n-        executionDAOFacade.createWorkflow(workflow);\n+\n+        try {\n+            executionDAOFacade.createWorkflow(workflow);\n+        } catch (Exception e) {\n+            Monitors.recordWorkflowStartError(workflowDef.getName(), WorkflowContext.get().getClientApp());\n+            LOGGER.error(\"Unable to restart workflow: {}\", workflowDef.getName(), e);\n+\n+            // It's possible the terminate workflow call hits an exception as well, in that case we want to log both\n+            // errors to help diagnosis.\n+            try {\n+                terminateWorkflow(workflowId, \"Error when restarting the workflow\");", "originalCommit": "f836543e736241e70b28bc37e5edcbf47cfee916", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNzE5Nw==", "url": "https://github.com/Netflix/conductor/pull/1921#discussion_r504207197", "bodyText": "This exception is primarily for executionDAOFacade.createWorkflow(workflow), and terminateWorkflow is just a clean up as part of that exception. I'd still like to throw the exception for createWorkflow, irrespective of what happened with terminateWorkflow, while logging terminateWorkflow exception. Thoughts?", "author": "kishorebanala", "createdAt": "2020-10-13T19:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyMDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxNjE4Mg==", "url": "https://github.com/Netflix/conductor/pull/1921#discussion_r504216182", "bodyText": "Yes, the exception handling for createWorkflow needs to be handled.\nMy comment is regarding the extended handling for the terminate part which seems out of place here. Something like this -\ntry {\n    executionDAOFacade.createWorkflow(workflow);\n} catch (Exception e) {\n    Monitors.recordWorkflowStartError(workflowDef.getName(), WorkflowContext.get().getClientApp());\n    LOGGER.error(\"Unable to restart workflow: {}\", workflowDef.getName(), e);\n    terminateWorkflow(workflowId, \"Error when restarting the workflow\");\n    throw e;\n}", "author": "apanicker-nflx", "createdAt": "2020-10-13T19:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyMDcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "61d403f74285ace1021ddddd5dddac2015a718d6", "chunk": "diff --git a/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java b/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java\nindex 62364be1..b35e802f 100644\n--- a/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java\n+++ b/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java\n\n@@ -520,14 +520,7 @@ public class WorkflowExecutor {\n         } catch (Exception e) {\n             Monitors.recordWorkflowStartError(workflowDef.getName(), WorkflowContext.get().getClientApp());\n             LOGGER.error(\"Unable to restart workflow: {}\", workflowDef.getName(), e);\n-\n-            // It's possible the terminate workflow call hits an exception as well, in that case we want to log both\n-            // errors to help diagnosis.\n-            try {\n-                terminateWorkflow(workflowId, \"Error when restarting the workflow\");\n-            } catch (Exception rwe) {\n-                LOGGER.error(\"Could not terminate the workflowId: \" + workflowId, rwe);\n-            }\n+            terminateWorkflow(workflowId, \"Error when restarting the workflow\");\n             throw e;\n         }\n \n"}}, {"oid": "61d403f74285ace1021ddddd5dddac2015a718d6", "url": "https://github.com/Netflix/conductor/commit/61d403f74285ace1021ddddd5dddac2015a718d6", "message": "Improvements to QueueDAO resiliency changes to verify the case when update task is called with IN_PROGRESS state.", "committedDate": "2020-10-14T00:04:32Z", "type": "commit"}, {"oid": "61d403f74285ace1021ddddd5dddac2015a718d6", "url": "https://github.com/Netflix/conductor/commit/61d403f74285ace1021ddddd5dddac2015a718d6", "message": "Improvements to QueueDAO resiliency changes to verify the case when update task is called with IN_PROGRESS state.", "committedDate": "2020-10-14T00:04:32Z", "type": "forcePushed"}]}