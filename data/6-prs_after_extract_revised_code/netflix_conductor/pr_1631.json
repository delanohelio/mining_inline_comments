{"pr_number": 1631, "pr_title": "Update elasticsearch when workflows get paused/resumed", "pr_createdAt": "2020-04-08T19:14:22Z", "pr_url": "https://github.com/Netflix/conductor/pull/1631", "timeline": [{"oid": "814d87915ded9d8a81cb235ab60daca7fb74cf7a", "url": "https://github.com/Netflix/conductor/commit/814d87915ded9d8a81cb235ab60daca7fb74cf7a", "message": "send paused and resumed workflows to elasticsearch", "committedDate": "2020-04-08T19:10:47Z", "type": "commit"}, {"oid": "dbd509ae1bb0075715549e51664ba972e521a708", "url": "https://github.com/Netflix/conductor/commit/dbd509ae1bb0075715549e51664ba972e521a708", "message": "send paused and resumed workflows to elasticsearch", "committedDate": "2020-04-08T19:16:05Z", "type": "commit"}, {"oid": "c73ef9d9680b461c56fb6e317adeefe7e1a8c6d0", "url": "https://github.com/Netflix/conductor/commit/c73ef9d9680b461c56fb6e317adeefe7e1a8c6d0", "message": "Merge branch 'dev' of https://github.com/Netflix/conductor into bugfix/index-paused-workflows", "committedDate": "2020-04-15T15:24:40Z", "type": "commit"}, {"oid": "81b9ee0f2046ae0695f0a68fbfbea9a2e517ac07", "url": "https://github.com/Netflix/conductor/commit/81b9ee0f2046ae0695f0a68fbfbea9a2e517ac07", "message": "always index workflows regardless of terminal state", "committedDate": "2020-04-15T16:46:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5MDQ2OA==", "url": "https://github.com/Netflix/conductor/pull/1631#discussion_r412590468", "bodyText": "As part of async indexing, the contract is that task data for a workflow will only be indexed when a workflow reaches a terminal state. Please move this line to within the if block above.", "author": "apanicker-nflx", "createdAt": "2020-04-22T00:52:36Z", "path": "core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java", "diffHunk": "@@ -215,21 +215,19 @@ public String updateWorkflow(Workflow workflow) {\n             workflow.setEndTime(System.currentTimeMillis());\n         }\n         executionDAO.updateWorkflow(workflow);\n-        if (workflow.getStatus().isTerminal()) {\n-            if (config.enableAsyncIndexing()) {\n-                if (workflow.getEndTime() - workflow.getStartTime() < config.getAsyncUpdateShortRunningWorkflowDuration() * 1000) {\n-                    final String workflowId = workflow.getWorkflowId();\n-                    DelayWorkflowUpdate delayWorkflowUpdate = new DelayWorkflowUpdate(workflowId);\n-                    LOGGER.debug(\"Delayed updating workflow: {} in the index by {} seconds\", workflowId, config.getAsyncUpdateDelay());\n-                    scheduledThreadPoolExecutor.schedule(delayWorkflowUpdate, config.getAsyncUpdateDelay(), TimeUnit.SECONDS);\n-                    Monitors.recordWorkerQueueSize(\"delayQueue\", scheduledThreadPoolExecutor.getQueue().size());\n-                } else {\n-                    indexDAO.asyncIndexWorkflow(workflow);\n-                }\n-                workflow.getTasks().forEach(indexDAO::asyncIndexTask);\n+        if (config.enableAsyncIndexing()) {\n+            if (workflow.getStatus().isTerminal() && workflow.getEndTime() - workflow.getStartTime() < config.getAsyncUpdateShortRunningWorkflowDuration() * 1000) {\n+                final String workflowId = workflow.getWorkflowId();\n+                DelayWorkflowUpdate delayWorkflowUpdate = new DelayWorkflowUpdate(workflowId);\n+                LOGGER.debug(\"Delayed updating workflow: {} in the index by {} seconds\", workflowId, config.getAsyncUpdateDelay());\n+                scheduledThreadPoolExecutor.schedule(delayWorkflowUpdate, config.getAsyncUpdateDelay(), TimeUnit.SECONDS);\n+                Monitors.recordWorkerQueueSize(\"delayQueue\", scheduledThreadPoolExecutor.getQueue().size());\n             } else {\n-                indexDAO.indexWorkflow(workflow);\n+                indexDAO.asyncIndexWorkflow(workflow);\n             }\n+            workflow.getTasks().forEach(indexDAO::asyncIndexTask);", "originalCommit": "81b9ee0f2046ae0695f0a68fbfbea9a2e517ac07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg5ODg3OA==", "url": "https://github.com/Netflix/conductor/pull/1631#discussion_r412898878", "bodyText": "Oh, now I understand what the intent was...thanks for that. I think I covered that now. I took out the isTerminal() check earlier so I added it later.", "author": "rickfish", "createdAt": "2020-04-22T11:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5MDQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "5ed49dfec320d3a3915bddf03d6037add5d8c91b", "chunk": "diff --git a/core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java b/core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java\nindex 652c3e33..782fa6d8 100644\n--- a/core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java\n+++ b/core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java\n\n@@ -225,7 +225,9 @@ public class ExecutionDAOFacade {\n             } else {\n                 indexDAO.asyncIndexWorkflow(workflow);\n             }\n-            workflow.getTasks().forEach(indexDAO::asyncIndexTask);\n+\t\t\tif (workflow.getStatus().isTerminal()) {\n+\t\t\t\tworkflow.getTasks().forEach(indexDAO::asyncIndexTask);\n+\t\t\t}\n         } else {\n             indexDAO.indexWorkflow(workflow);\n         }\n"}}, {"oid": "5ed49dfec320d3a3915bddf03d6037add5d8c91b", "url": "https://github.com/Netflix/conductor/commit/5ed49dfec320d3a3915bddf03d6037add5d8c91b", "message": "if asyncIndexing, only index tasks if workflow is in terminal state", "committedDate": "2020-04-22T11:24:02Z", "type": "commit"}]}