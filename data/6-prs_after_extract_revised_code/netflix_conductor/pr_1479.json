{"pr_number": 1479, "pr_title": "Loop task fix.", "pr_createdAt": "2020-01-07T16:53:42Z", "pr_url": "https://github.com/Netflix/conductor/pull/1479", "timeline": [{"oid": "6965b85259282c232d52ddd71f17a23f0e2d7775", "url": "https://github.com/Netflix/conductor/commit/6965b85259282c232d52ddd71f17a23f0e2d7775", "message": "initial working cut.\n\nDo while along with another do while tested. Yet to write integration test.", "committedDate": "2020-01-07T16:49:51Z", "type": "commit"}, {"oid": "b46309bcdd29b4d4be2848121e56c7d993817556", "url": "https://github.com/Netflix/conductor/commit/b46309bcdd29b4d4be2848121e56c7d993817556", "message": "fix unit tes.", "committedDate": "2020-01-07T17:04:59Z", "type": "commit"}, {"oid": "8b0560bdeaa9da6877ae9074ae6ad30e7c2f0b6f", "url": "https://github.com/Netflix/conductor/commit/8b0560bdeaa9da6877ae9074ae6ad30e7c2f0b6f", "message": "Merge branch 'dev' of https://github.com/Netflix/conductor into dev", "committedDate": "2020-01-09T10:41:16Z", "type": "commit"}, {"oid": "cfd67cad5e4a181aa7f63fc55795b31fa6c54a8e", "url": "https://github.com/Netflix/conductor/commit/cfd67cad5e4a181aa7f63fc55795b31fa6c54a8e", "message": "work in progress\n\n1. Task stuck proper fix.\n2. DO_WHILE task output cleanup.", "committedDate": "2020-01-11T23:45:38Z", "type": "commit"}, {"oid": "4d620988a95e6fb2ae95a0317ffaba2e3792eba4", "url": "https://github.com/Netflix/conductor/commit/4d620988a95e6fb2ae95a0317ffaba2e3792eba4", "message": "unit test fix.", "committedDate": "2020-01-12T13:43:02Z", "type": "commit"}, {"oid": "d26e25d1efba6a42f543ec8603db46c2145d729c", "url": "https://github.com/Netflix/conductor/commit/d26e25d1efba6a42f543ec8603db46c2145d729c", "message": "doc update + code refactor.", "committedDate": "2020-01-15T20:17:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5MjM2OA==", "url": "https://github.com/Netflix/conductor/pull/1479#discussion_r367092368", "bodyText": "@apanicker-nflx , We need to return null in case all loopOver task execution completed. The issue was, it was returning the next task which was LAMBDA as per definition. Since we are returning null it won't change task reference name. LAMBDA task will be return when DO_WHILE task will get completed. And we have added safe guard not to change taskReferenceName in such case.", "author": "manan164", "createdAt": "2020-01-15T20:32:11Z", "path": "common/src/main/java/com/netflix/conductor/common/metadata/workflow/WorkflowDef.java", "diffHunk": "@@ -241,6 +241,9 @@ public WorkflowTask getNextTask(String taskReferenceName){\n \t\t\t WorkflowTask nextTask = task.next(taskReferenceName, null);\n \t\t\t if(nextTask != null){\n \t\t\t\t return nextTask;\n+\t\t\t } else if (TaskType.DO_WHILE.name().equals(task.getType()) && !task.getTaskReferenceName().equals(taskReferenceName) && task.has(taskReferenceName)) {", "originalCommit": "d26e25d1efba6a42f543ec8603db46c2145d729c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5Mjk5Ng==", "url": "https://github.com/Netflix/conductor/pull/1479#discussion_r367092996", "bodyText": "Since we have changed the way next task will be returned for last loopOver task we just need to check that in case of two sequential DO_WHILE task we should not change the task reference name of second DO_WHILE task when the first one gets completed.", "author": "manan164", "createdAt": "2020-01-15T20:33:43Z", "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -190,7 +190,7 @@ private DeciderOutcome decide(final Workflow workflow, List<Task> preScheduledTa\n             if (!pendingTask.isExecuted() && !pendingTask.isRetried() && pendingTask.getStatus().isTerminal()) {\n                 pendingTask.setExecuted(true);\n                 List<Task> nextTasks = getNextTask(workflow, pendingTask);\n-                if (pendingTask.isLoopOverTask() && !nextTasks.isEmpty()) {\n+                if (pendingTask.isLoopOverTask() && !TaskType.DO_WHILE.name().equals(pendingTask.getTaskType()) && !nextTasks.isEmpty()) {", "originalCommit": "d26e25d1efba6a42f543ec8603db46c2145d729c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5MzUxNA==", "url": "https://github.com/Netflix/conductor/pull/1479#discussion_r367093514", "bodyText": "In case of workflow having two DO_WHILE task we should not check for all workflow task which matches the current iteration. We should only wait for all children task to get completed.", "author": "manan164", "createdAt": "2020-01-15T20:34:56Z", "path": "core/src/main/java/com/netflix/conductor/core/execution/tasks/DoWhile.java", "diffHunk": "@@ -65,15 +66,15 @@ public boolean execute(Workflow workflow, Task task, WorkflowExecutor workflowEx\n \t\tStringBuilder failureReason = new StringBuilder();\n \t\tMap<String, Object> output = new HashMap<>();\n \t\ttask.getOutputData().put(\"iteration\", task.getIteration());\n-\t\tList<Task> loopOver = workflow.getTasks().stream().filter(t -> (t.getReferenceTaskName().endsWith(TaskUtils.getLoopOverTaskRefNameSuffix(task.getIteration()))) && t.isLoopOverTask()).collect(Collectors.toList());\n+\t\tList<Task> loopOver = workflow.getTasks().stream().filter(t -> (task.getWorkflowTask().has(TaskUtils.removeIterationFromTaskRefName(t.getReferenceTaskName())) && !task.getReferenceTaskName().equals(t.getReferenceTaskName()))).collect(Collectors.toList());", "originalCommit": "d26e25d1efba6a42f543ec8603db46c2145d729c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5MzgyNA==", "url": "https://github.com/Netflix/conductor/pull/1479#discussion_r367093824", "bodyText": "This is just code refactoring to fill DO_WHILE task output map to preserver original taskReferneceName.", "author": "manan164", "createdAt": "2020-01-15T20:35:38Z", "path": "core/src/main/java/com/netflix/conductor/core/execution/tasks/DoWhile.java", "diffHunk": "@@ -65,15 +66,15 @@ public boolean execute(Workflow workflow, Task task, WorkflowExecutor workflowEx\n \t\tStringBuilder failureReason = new StringBuilder();\n \t\tMap<String, Object> output = new HashMap<>();\n \t\ttask.getOutputData().put(\"iteration\", task.getIteration());\n-\t\tList<Task> loopOver = workflow.getTasks().stream().filter(t -> (t.getReferenceTaskName().endsWith(TaskUtils.getLoopOverTaskRefNameSuffix(task.getIteration()))) && t.isLoopOverTask()).collect(Collectors.toList());\n+\t\tList<Task> loopOver = workflow.getTasks().stream().filter(t -> (task.getWorkflowTask().has(TaskUtils.removeIterationFromTaskRefName(t.getReferenceTaskName())) && !task.getReferenceTaskName().equals(t.getReferenceTaskName()))).collect(Collectors.toList());\n \n \t\tfor (Task loopOverTask : loopOver) {\n \t\t\tStatus taskStatus = loopOverTask.getStatus();\n \t\t\thasFailures = !taskStatus.isSuccessful();\n \t\t\tif (hasFailures) {\n \t\t\t\tfailureReason.append(loopOverTask.getReasonForIncompletion()).append(\" \");\n \t\t\t}\n-\t\t\toutput.put(loopOverTask.getReferenceTaskName(), loopOverTask.getOutputData());\n+\t\t\toutput.put(TaskUtils.removeIterationFromTaskRefName(loopOverTask.getReferenceTaskName()), loopOverTask.getOutputData());", "originalCommit": "d26e25d1efba6a42f543ec8603db46c2145d729c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5NDE1OA==", "url": "https://github.com/Netflix/conductor/pull/1479#discussion_r367094158", "bodyText": "Same as https://github.com/Netflix/conductor/pull/1479/files#r367092996. No need to fill the taskInput Map unnecessarily.", "author": "manan164", "createdAt": "2020-01-15T20:36:25Z", "path": "core/src/main/java/com/netflix/conductor/core/execution/tasks/DoWhile.java", "diffHunk": "@@ -129,10 +130,10 @@ boolean getEvaluatedCondition(Workflow workflow, Task task, WorkflowExecutor wor\n \t\tTaskDef taskDefinition = workflowExecutor.getTaskDefinition(task);\n \t\tMap<String, Object> taskInput = parametersUtils.getTaskInputV2(task.getWorkflowTask().getInputParameters(), workflow, task.getTaskId(), taskDefinition);\n \t\ttaskInput.put(task.getReferenceTaskName(), task.getOutputData());\n-\t\tList<Task> loopOver = workflow.getTasks().stream().filter(t -> (t.getReferenceTaskName().endsWith(TaskUtils.getLoopOverTaskRefNameSuffix(task.getIteration()))) && t.isLoopOverTask()).collect(Collectors.toList());\n+\t\tList<Task> loopOver = workflow.getTasks().stream().filter(t -> (task.getWorkflowTask().has(TaskUtils.removeIterationFromTaskRefName(t.getReferenceTaskName())) && !task.getReferenceTaskName().equals(t.getReferenceTaskName()))).collect(Collectors.toList());", "originalCommit": "d26e25d1efba6a42f543ec8603db46c2145d729c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MTc3OA==", "url": "https://github.com/Netflix/conductor/pull/1479#discussion_r369861778", "bodyText": "why was the task type removed?", "author": "apanicker-nflx", "createdAt": "2020-01-22T23:27:44Z", "path": "core/src/test/java/com/netflix/conductor/core/execution/tasks/DoWhileTest.java", "diffHunk": "@@ -107,6 +107,7 @@ public void setup() {\n         loopTask.setIteration(1);\n         loopWorkflowTask = new WorkflowTask();\n         loopWorkflowTask.setTaskReferenceName(\"loopTask\");\n+        loopWorkflowTask.setType(TaskType.DO_WHILE.name());", "originalCommit": "d26e25d1efba6a42f543ec8603db46c2145d729c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwNzYwOQ==", "url": "https://github.com/Netflix/conductor/pull/1479#discussion_r382507609", "bodyText": "It was never added. The tests were running fine earlier because I was directly using DoWhile class. Now we need because I have changed the way loopOvertask is being calculated. Earlier the approach was find all the task which has taskReferenceName as ___iteration but now approach is the DO_WHILE task must has() that task.", "author": "manan164", "createdAt": "2020-02-21T10:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MTc3OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "9e99836cd92c9057c91a2167be1a7952dc0871ee", "url": "https://github.com/Netflix/conductor/commit/9e99836cd92c9057c91a2167be1a7952dc0871ee", "message": "integration test", "committedDate": "2020-02-21T12:28:19Z", "type": "commit"}, {"oid": "02515f5eb91eeaf527cd39438d12efee244d1b1d", "url": "https://github.com/Netflix/conductor/commit/02515f5eb91eeaf527cd39438d12efee244d1b1d", "message": "integration test fix.", "committedDate": "2020-02-21T19:09:38Z", "type": "commit"}, {"oid": "6022b53eece36c76bafaa26b2da927ba34e8d50a", "url": "https://github.com/Netflix/conductor/commit/6022b53eece36c76bafaa26b2da927ba34e8d50a", "message": "condition fix.", "committedDate": "2020-02-21T19:20:33Z", "type": "commit"}]}