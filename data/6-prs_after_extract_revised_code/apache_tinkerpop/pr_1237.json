{"pr_number": 1237, "pr_title": "TINKERPOP-2325 - Modifications for use of indexes in FILTER", "pr_createdAt": "2020-01-13T14:46:46Z", "pr_url": "https://github.com/apache/tinkerpop/pull/1237", "timeline": [{"oid": "8db9c1d48efdf1c81b6be6903961bc6df7ccd3db", "url": "https://github.com/apache/tinkerpop/commit/8db9c1d48efdf1c81b6be6903961bc6df7ccd3db", "message": "Modifications for better indexing in FILTER", "committedDate": "2020-01-13T14:42:26Z", "type": "commit"}, {"oid": "0468a23bdf17394e82d4add215846a0d76524211", "url": "https://github.com/apache/tinkerpop/commit/0468a23bdf17394e82d4add215846a0d76524211", "message": "Modifications for use of indexes in FILTER", "committedDate": "2020-01-13T14:45:18Z", "type": "commit"}, {"oid": "b4c4eb0e12bf69a63b5318f9e95461fd882d3973", "url": "https://github.com/apache/tinkerpop/commit/b4c4eb0e12bf69a63b5318f9e95461fd882d3973", "message": "addedd missing imports and other small fixes", "committedDate": "2020-01-21T13:46:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NzgwMw==", "url": "https://github.com/apache/tinkerpop/pull/1237#discussion_r371257803", "bodyText": "I'm not terribly familiar with the APIs at play here so I'm not sure what to expect - if the \"triples\" List has multiple Triple objects in it, this function will only return a GraphTraversal using the last one and the others will be ignored. Is that ok?", "author": "spmallette", "createdAt": "2020-01-27T14:06:50Z", "path": "sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java", "diffHunk": "@@ -47,79 +49,248 @@\n     /**\n      * Converts a general {@code Expr} to an anonymous {@link GraphTraversal}.\n      */\n-    static GraphTraversal<?, ?> transform(final Expr expression) {\n-        if (expression instanceof E_Equals) return transform((E_Equals) expression);\n-        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression);\n-        if (expression instanceof E_LessThan) return transform((E_LessThan) expression);\n-        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression);\n-        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression);\n-        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression);\n-        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression);\n-        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression);\n-        if (expression instanceof E_Exists) return transform((E_Exists) expression);\n-        if (expression instanceof E_NotExists) return transform((E_NotExists) expression);\n+    public static GraphTraversal<?, ?> transform(final Expr expression, List<Triple> triples) {\n+        if (expression instanceof E_Equals) return transform((E_Equals) expression, triples);\n+        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression, triples);\n+        if (expression instanceof E_LessThan) return transform((E_LessThan) expression, triples);\n+        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression, triples);\n+        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression, triples);\n+        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression, triples);\n+        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression, triples);\n+        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression, triples);\n+        if (expression instanceof E_Exists) return transform((E_Exists) expression, triples);\n+        if (expression instanceof E_NotExists) return transform((E_NotExists) expression, triples);\n         throw new IllegalStateException(String.format(\"Unhandled expression: %s\", expression));\n     }\n \n-    private static GraphTraversal<?, ?> transform(final E_Equals expression) {\n-        final Object value = expression.getArg2().getConstant().getNode().getLiteralValue();\n-        return __.as(expression.getArg1().getVarName()).is(P.eq(value));\n+   public static GraphTraversal<?, ?> transform(final E_Equals e, List<Triple> triples) {\n+        GraphTraversal traversal = null;\n+         for(final Triple triple : triples){", "originalCommit": "b4c4eb0e12bf69a63b5318f9e95461fd882d3973", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI3ODY2OQ==", "url": "https://github.com/apache/tinkerpop/pull/1237#discussion_r371278669", "bodyText": "In this function I iterate over \"triples\" to search for the variable used in FILTER condition, ( ?b in my example) so I can replace it with the label (name). Once i found it, i can discard the others triples. Maybe  I could add a breack instruction in the last IF for clarity.", "author": "thevalzo", "createdAt": "2020-01-27T14:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NzgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4NDc0Mg==", "url": "https://github.com/apache/tinkerpop/pull/1237#discussion_r371284742", "bodyText": "seems like you could just:\n            if (object.equals(arg1)){\n                return  __.as(subject).has(uri, P.eq(value));\n            }\nand just return null at the end assuming nothing was built?", "author": "spmallette", "createdAt": "2020-01-27T14:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NzgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4NzQwMQ==", "url": "https://github.com/apache/tinkerpop/pull/1237#discussion_r371287401", "bodyText": "Yes, this seems a better solution.", "author": "thevalzo", "createdAt": "2020-01-27T14:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NzgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "3150d599d59e97a2fc865947622072e3ad36968c", "chunk": "diff --git a/sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java b/sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java\nindex 5d3b24a53d..011b5435bb 100644\n--- a/sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java\n+++ b/sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java\n\n@@ -89,7 +89,7 @@ class WhereTraversalBuilder {\n             final Object value =  e.getArg2().getConstant().getNode().getLiteralValue();\n \n             if (object.equals(arg1)){\n-                traversal = __.as(subject).has(uri, P.eq(value));\n+               return __.as(subject).has(uri, P.eq(value));\n             }\n         }\n         return traversal;\n"}}, {"oid": "3150d599d59e97a2fc865947622072e3ad36968c", "url": "https://github.com/apache/tinkerpop/commit/3150d599d59e97a2fc865947622072e3ad36968c", "message": "improved readability of returned traversal", "committedDate": "2020-01-27T15:23:47Z", "type": "commit"}]}