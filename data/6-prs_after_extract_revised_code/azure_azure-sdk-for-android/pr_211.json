{"pr_number": 211, "pr_title": "Fix interceptor bugs uncovered by tests", "pr_createdAt": "2020-03-01T00:04:21Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/211", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNjc3OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388026779", "bodyText": "What was causing this warning? It doesn't seem like it should be triggering.", "author": "bsiegel", "createdAt": "2020-03-05T01:11:38Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "diffHunk": "@@ -40,33 +30,45 @@ static long getContentLength(Headers headers) {\n      * @return \"Log body\" if the body should be logged in its entirety, otherwise a message indicating why the body\n      * was not logged is returned.\n      */\n-    static String evaluateBody(Headers headers) {\n+    @SuppressWarnings(\"ConstantConditions\")", "originalCommit": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyODA5OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388628099", "bodyText": "The IDE kept complaining about the call to contentType().toString() in lines 46 and 50. To get rid of it I just pushed a small change where we create a variable containing the result of calling responseBody.contentType() and use it to call toString().", "author": "vcolin7", "createdAt": "2020-03-05T23:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNjc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0MzEyNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388643125", "bodyText": "Going to check out this PR and see what the heck is going on there because I can't see any reason why that would generate this warning.", "author": "bsiegel", "createdAt": "2020-03-06T00:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNjc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "72b90d19ed9ab7b028fc620d4d31d6856f5109d3", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java\nindex 4cfbec853..5dabef392 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java\n\n@@ -23,39 +22,22 @@ final class LogUtils {\n     }\n \n     /**\n-     * Determines if the request or response body should be logged. If not, if returns an appropriate message to log\n-     * in lieu of said body.\n+     * Produces a loggable representation of the a body based on its headers, content type, and content length. If the\n+     * body appears to contain text and is below MAX_BODY_LOG_SIZE then it will be logged verbatim, otherwise a summary\n+     * message describing the body is returned.\n      *\n-     * @param headers HTTP headers of the request or response.\n-     * @return \"Log body\" if the body should be logged in its entirety, otherwise a message indicating why the body\n-     * was not logged is returned.\n+     * @param headers The headers of the body.\n+     * @param contentType The content type of the body.\n+     * @param contentLength The content length of the body.\n+     * @return The text of the body if applicable, otherwise a summary message describing the body.\n      */\n-    @SuppressWarnings(\"ConstantConditions\")\n-    static String determineBodyLoggingStrategy(Headers headers, RequestBody requestBody, ResponseBody responseBody) throws IOException {\n+    static String getBodySummary(@NonNull Headers headers, String contentType, Long contentLength) {\n         String contentEncoding = headers.get(\"Content-Encoding\");\n-        String contentDisposition = headers.get(\"Content-Disposition\");\n-        String contentType;\n-        long contentLength;\n-\n-        if (requestBody == null) {\n-            if (responseBody == null) {\n-                String contentLengthString = headers.get(\"Content-Length\");\n-\n-                contentType = headers.get(\"Content-Type\");\n-                contentLength = isNullOrEmpty(contentLengthString) ? 0 : Long.parseLong(contentLengthString);\n-            } else {\n-                contentType = (responseBody.contentType() == null) ? null : responseBody.contentType().toString();\n-                contentLength = responseBody.contentLength();\n-            }\n-        } else {\n-            contentType = (requestBody.contentType() == null) ? null : requestBody.contentType().toString();\n-            contentLength = requestBody.contentLength();\n-        }\n-\n         if (!isNullOrEmpty(contentEncoding) && !contentEncoding.equalsIgnoreCase(\"identity\")) {\n             return \"(encoded body omitted)\";\n         }\n \n+        String contentDisposition = headers.get(\"Content-Disposition\");\n         if (!isNullOrEmpty(contentDisposition) && !contentDisposition.equalsIgnoreCase(\"inline\")) {\n             return \"(non-inline body omitted)\";\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNzI4MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388027281", "bodyText": "Why do these headers get special treatment?", "author": "bsiegel", "createdAt": "2020-03-05T01:13:18Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java", "diffHunk": "@@ -96,24 +103,42 @@ public Response intercept(@NonNull Chain chain) throws IOException {\n      *\n      * @param request The HTTP request being sent to Azure.\n      */\n-    private void logRequest(final Request request) {\n+    private void logRequest(final Request request) throws IOException {\n         HttpUrl url = request.url();\n \n-        logger.info(\"--> [\" + request.header(CLIENT_REQUEST_ID) + \"]\"); // Request ID\n+        logger.info(\"--> [\" + request.header(REQUEST_ID_HEADER) + \"]\"); // Request ID\n         logger.info(request.method() + \" \" + url.encodedPath() + LogUtils.getRedactedQueryString(url,\n             allowedQueryParameterNames)); // URL path + query\n         logger.info(\"Host: \" + url.scheme() + \"://\" + url.host()); // URL host\n \n         // TODO: Add log level guard for headers and body.\n-        logHeaders(request.headers());\n-\n-        String bodyEvaluation = LogUtils.evaluateBody(request.headers());\n         RequestBody requestBody = request.body();\n+        boolean contentTypeLogged = false;\n+        boolean contentLengthLogged = false;\n+\n+        // According to the OkHttp documentation, the request body headers are only present when this is installed as a\n+        // network interceptor.\n+        // https://github.com/square/okhttp/blob/b189a382bccc1b9a01d4672210b69680d73b4306/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java#L173\n+        if (requestBody != null) {\n+            if (requestBody.contentType() != null  && allowedHeaderNames.contains(CONTENT_TYPE_HEADER)) {", "originalCommit": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMTI2MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388631260", "bodyText": "It's an additional way of getting this information since it is possible that the Content-Type or Content-Length are not present in the request or response headers. The RequestBody or ResponseBody objects do an attempt at determining this information by examining the body to be sent or that was received.\nOkHttp's HttpLoggingInterceptor checks only for the body and not the headers. Perhaps we could do this as a secondary check after looking in the headers first. What do you think?", "author": "vcolin7", "createdAt": "2020-03-05T23:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNzI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0NDIwMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388644200", "bodyText": "If the Content-Type or Content-Length are not present in the headers, we don't need to \"synthesize\" them for logging purposes.\nThe only reason I could see needing to do that is if OkHTTP itself adds those headers, but it hasn't done so yet (by the time our logging interceptor is called). Which is pretty annoying if that's the case, since interceptors should be able to assume the headers list is finalized by the time they receive the request or response. If that's what's going on, we can keep this code but I think we could probably refactor it a bit to make it more clear. I'll poke at this while I have the PR checked out as mentioned above.", "author": "bsiegel", "createdAt": "2020-03-06T00:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNzI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "72b90d19ed9ab7b028fc620d4d31d6856f5109d3", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java\nindex d5c874a35..4ea4e09ba 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java\n\n@@ -113,46 +112,26 @@ public final class LoggingInterceptor implements Interceptor {\n \n         // TODO: Add log level guard for headers and body.\n         RequestBody requestBody = request.body();\n-        boolean contentTypeLogged = false;\n-        boolean contentLengthLogged = false;\n-\n-        // According to the OkHttp documentation, the request body headers are only present when this is installed as a\n-        // network interceptor.\n-        // https://github.com/square/okhttp/blob/b189a382bccc1b9a01d4672210b69680d73b4306/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java#L173\n-        if (requestBody != null) {\n-            if (requestBody.contentType() != null  && allowedHeaderNames.contains(CONTENT_TYPE_HEADER)) {\n-                logger.debug(\"Content-Type: \" + requestBody.contentType());\n-                contentTypeLogged = true;\n-            }\n-\n-            if (requestBody.contentLength() != -1  && allowedHeaderNames.contains(CONTENT_LENGTH_HEADER)) {\n-                logger.debug(\"Content-Length: \" + requestBody.contentLength());\n-                contentLengthLogged = true;\n-            }\n-        }\n-\n-        logHeaders(request.headers(), contentTypeLogged, contentLengthLogged);\n-\n-        try {\n-            String bodyEvaluation = LogUtils.determineBodyLoggingStrategy(request.headers(), requestBody, null);\n-\n-            if (bodyEvaluation.equals(\"Log body\")) {\n-                Buffer buffer = new Buffer();\n-                MediaType contentType = Objects.requireNonNull(requestBody).contentType();\n-                Charset charset = (contentType == null) ? UTF_8 : contentType.charset(UTF_8);\n-\n+        String contentType = HttpUtil.getContentType(request);\n+        Long contentLength = HttpUtil.getContentLength(request);\n+\n+        logHeaders(request.headers(), contentType, contentLength);\n+\n+        String bodySummary = LogUtils.getBodySummary(request.headers(), contentType, contentLength);\n+        if (bodySummary != null) {\n+            logger.debug(bodySummary);\n+        } else if (requestBody != null) {\n+            MediaType bodyContentType = requestBody.contentType();\n+            Charset charset = (bodyContentType == null) ? UTF_8 : bodyContentType.charset(UTF_8);\n+            Buffer buffer = new Buffer();\n+            try {\n                 requestBody.writeTo(buffer);\n-\n-                if (charset != null) {\n-                    logger.debug(buffer.readString(charset));\n-                } else {\n-                    logger.warning(\"Could not log the request body. No charset found for decoding.\");\n-                }\n-            } else {\n-                logger.debug(bodyEvaluation);\n+                logger.debug(buffer.readString(charset == null ? UTF_8 : charset));\n+            } catch (IOException e) {\n+                logger.warning(\"Could not log the request body\", e);\n             }\n-        } catch (IOException | NullPointerException e) {\n-            logger.warning(\"Could not log the request body\", e);\n+        } else {\n+            logger.debug(\"(empty body)\");\n         }\n \n         logger.info(\"--> [END \" + request.header(REQUEST_ID_HEADER) + \"]\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzMDIyOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388030229", "bodyText": "Definitely need to get rid of this magic string. Even if we made this into a constant, it's still a little suspicious. Why not name this method something like getBodySummary() and then if it returns null log the body text, otherwise log the summary?", "author": "bsiegel", "createdAt": "2020-03-05T01:23:54Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java", "diffHunk": "@@ -40,33 +30,45 @@ static long getContentLength(Headers headers) {\n      * @return \"Log body\" if the body should be logged in its entirety, otherwise a message indicating why the body", "originalCommit": "f7d7ecc07e7625df9c67856c57058d9e9ddb9a54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMjUwNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/211#discussion_r388632504", "bodyText": "I did think about doing this the first time I wrote this method but I cannot recall why I changed it, maybe it was because of how I named it at the time (evaluateBody()) and didn't want to return null (like if it was an error) as a type of evaluation.\nI actually like the naming and strategy you propose, so I'm going to change it to that.", "author": "vcolin7", "createdAt": "2020-03-05T23:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzMDIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "72b90d19ed9ab7b028fc620d4d31d6856f5109d3", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java\nindex 4cfbec853..5dabef392 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java\n\n@@ -23,39 +22,22 @@ final class LogUtils {\n     }\n \n     /**\n-     * Determines if the request or response body should be logged. If not, if returns an appropriate message to log\n-     * in lieu of said body.\n+     * Produces a loggable representation of the a body based on its headers, content type, and content length. If the\n+     * body appears to contain text and is below MAX_BODY_LOG_SIZE then it will be logged verbatim, otherwise a summary\n+     * message describing the body is returned.\n      *\n-     * @param headers HTTP headers of the request or response.\n-     * @return \"Log body\" if the body should be logged in its entirety, otherwise a message indicating why the body\n-     * was not logged is returned.\n+     * @param headers The headers of the body.\n+     * @param contentType The content type of the body.\n+     * @param contentLength The content length of the body.\n+     * @return The text of the body if applicable, otherwise a summary message describing the body.\n      */\n-    @SuppressWarnings(\"ConstantConditions\")\n-    static String determineBodyLoggingStrategy(Headers headers, RequestBody requestBody, ResponseBody responseBody) throws IOException {\n+    static String getBodySummary(@NonNull Headers headers, String contentType, Long contentLength) {\n         String contentEncoding = headers.get(\"Content-Encoding\");\n-        String contentDisposition = headers.get(\"Content-Disposition\");\n-        String contentType;\n-        long contentLength;\n-\n-        if (requestBody == null) {\n-            if (responseBody == null) {\n-                String contentLengthString = headers.get(\"Content-Length\");\n-\n-                contentType = headers.get(\"Content-Type\");\n-                contentLength = isNullOrEmpty(contentLengthString) ? 0 : Long.parseLong(contentLengthString);\n-            } else {\n-                contentType = (responseBody.contentType() == null) ? null : responseBody.contentType().toString();\n-                contentLength = responseBody.contentLength();\n-            }\n-        } else {\n-            contentType = (requestBody.contentType() == null) ? null : requestBody.contentType().toString();\n-            contentLength = requestBody.contentLength();\n-        }\n-\n         if (!isNullOrEmpty(contentEncoding) && !contentEncoding.equalsIgnoreCase(\"identity\")) {\n             return \"(encoded body omitted)\";\n         }\n \n+        String contentDisposition = headers.get(\"Content-Disposition\");\n         if (!isNullOrEmpty(contentDisposition) && !contentDisposition.equalsIgnoreCase(\"inline\")) {\n             return \"(non-inline body omitted)\";\n         }\n"}}, {"oid": "72b90d19ed9ab7b028fc620d4d31d6856f5109d3", "url": "https://github.com/Azure/azure-sdk-for-android/commit/72b90d19ed9ab7b028fc620d4d31d6856f5109d3", "message": "Refactor extraction of ContentType/ContentLength", "committedDate": "2020-03-12T09:45:30Z", "type": "forcePushed"}, {"oid": "b94ba2865b4dd3d162ce59d61f8aa7ac4fae1ea8", "url": "https://github.com/Azure/azure-sdk-for-android/commit/b94ba2865b4dd3d162ce59d61f8aa7ac4fae1ea8", "message": "Fixed multiple problems with the LoggingInterceptor:\n\n1. We would not log the body of a request or response if the Content-Type was 'identity' or 'inline', when actually we should not log it when the value is 'gzip', 'attached' or 'compressed'.\n2. We would log the body of a request or response even if the Content-Length header is empty or not present.\n3. We would not log a request or response body if its size was smaller than a maximum value, when it should be the opposite (size > MAX_VALUE).\n4. We would generate a malformed query string when redacting sensitive data.", "committedDate": "2020-03-13T20:32:23Z", "type": "commit"}, {"oid": "2738ffe86aabf3a28396da8f1b416664d984e519", "url": "https://github.com/Azure/azure-sdk-for-android/commit/2738ffe86aabf3a28396da8f1b416664d984e519", "message": "Fixed another two issues with the LoggingInterceptor:\n\n1. We would try to add allowed headers and query parameters to an immutable empty set, instead of a mutable one.\n2. We would not catch and log internal failures (exceptions) when logging a request.", "committedDate": "2020-03-13T20:32:23Z", "type": "commit"}, {"oid": "09b36dea1e32935e1ca16e21f8943f428f588273", "url": "https://github.com/Azure/azure-sdk-for-android/commit/09b36dea1e32935e1ca16e21f8943f428f588273", "message": "Made more fixes to the LoggingInterceptor and CurlLoggingInterceptor:\n\nFor the LoggingInterceptor:\n\n1. Added ways for obtaining the Content-Length and Content-Type from the RequestBody and ResponseBody objects, in case they are somehow not set in the request or response headers.\n\nFor the CurlLoggingInterceptor:\n\n1. Removed the placeholder message that was logged if the request body was empty, not inline, not identity (gzip, compressed, etc.) or binary, to log the actual body of the request instead.\n2. Removed double quotation marks that surrounded the URL in the cURL command, since they are not necessary.\n3. Made a change to escape double quotation marks in header values instead of escaping them in the header names.\n4. Made a change to escape backslashes in header values.\n5. Made a change to add the --compressed flag when the Content-Encoding of the body is not 'identity', instead of adding it when the encoding is 'gzip'.\n6. Single quotation marks are escaped in the body now instead of double quotes.", "committedDate": "2020-03-13T20:32:23Z", "type": "commit"}, {"oid": "534d0f7fbbda74a45760fad989d064da867522b8", "url": "https://github.com/Azure/azure-sdk-for-android/commit/534d0f7fbbda74a45760fad989d064da867522b8", "message": "Addresses some comments left by @bsiegel in PR #211 (https://github.com/Azure/azure-sdk-for-android/pull/211).", "committedDate": "2020-03-13T20:32:23Z", "type": "commit"}, {"oid": "89eabcacdede4f879161e5533d5971e647d01a9e", "url": "https://github.com/Azure/azure-sdk-for-android/commit/89eabcacdede4f879161e5533d5971e647d01a9e", "message": "Added the @NonNull annotation to some parameters in LogUtils methods.", "committedDate": "2020-03-13T20:32:23Z", "type": "commit"}, {"oid": "a7d56fc8e1a23b152ea6e42bcf64dd24c6a037b2", "url": "https://github.com/Azure/azure-sdk-for-android/commit/a7d56fc8e1a23b152ea6e42bcf64dd24c6a037b2", "message": "Refactor extraction of ContentType/ContentLength", "committedDate": "2020-03-13T20:32:23Z", "type": "commit"}, {"oid": "cfdfedabf9ad3c17200b6aedc1f6b29af30e55a4", "url": "https://github.com/Azure/azure-sdk-for-android/commit/cfdfedabf9ad3c17200b6aedc1f6b29af30e55a4", "message": "Extract HTTP header values to HttpHeader class", "committedDate": "2020-03-13T20:42:56Z", "type": "commit"}, {"oid": "8f23215a806bd02e007a9f8a906ef0d26dcb49bb", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8f23215a806bd02e007a9f8a906ef0d26dcb49bb", "message": "Fix logic bugs in UserAgent & CurlLogging interceptors", "committedDate": "2020-03-13T20:42:56Z", "type": "commit"}, {"oid": "13a011f394e03dda85ff8c28c958eca21e5395a0", "url": "https://github.com/Azure/azure-sdk-for-android/commit/13a011f394e03dda85ff8c28c958eca21e5395a0", "message": "Re-integrate LogUtils back into LoggingInterceptor", "committedDate": "2020-03-13T20:42:56Z", "type": "commit"}, {"oid": "337662cac66d70d0a6bbdc88d8fe88e830577eef", "url": "https://github.com/Azure/azure-sdk-for-android/commit/337662cac66d70d0a6bbdc88d8fe88e830577eef", "message": "Rename CoreUtils -> CoreUtil", "committedDate": "2020-03-13T20:42:56Z", "type": "commit"}, {"oid": "8fb7afacc44d187dfdaad9abc4e5b911aa9bc298", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8fb7afacc44d187dfdaad9abc4e5b911aa9bc298", "message": "DRY up AddDateInterceptor", "committedDate": "2020-03-13T20:42:56Z", "type": "commit"}, {"oid": "8fb7afacc44d187dfdaad9abc4e5b911aa9bc298", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8fb7afacc44d187dfdaad9abc4e5b911aa9bc298", "message": "DRY up AddDateInterceptor", "committedDate": "2020-03-13T20:42:56Z", "type": "forcePushed"}]}