{"pr_number": 158, "pr_title": "Code cleanup", "pr_createdAt": "2020-01-22T01:01:24Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/158", "timeline": [{"oid": "96ca81afbf6ce1f48121d5e9657ed4d8537701c7", "url": "https://github.com/Azure/azure-sdk-for-android/commit/96ca81afbf6ce1f48121d5e9657ed4d8537701c7", "message": "Corrected and reformatted JavaDoc comments where necessary in the whole project (except CoreUtils). Refactored some code for better readability.", "committedDate": "2020-01-21T03:45:18Z", "type": "commit"}, {"oid": "2566b9906ae725cb3757fe3b4c24667e6fadae2c", "url": "https://github.com/Azure/azure-sdk-for-android/commit/2566b9906ae725cb3757fe3b4c24667e6fadae2c", "message": "Merge branch 'upstream-dev' into code-cleanup\n\n# Conflicts:\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogOptions.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LogUtils.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/implementation/http/rest/RetrofitAPIClient.java\n#\tsdk/storage/azure-storage-common/src/main/java/com/azure/android/storage/common/interceptor/ResponseHeadersValidationInterceptor.java", "committedDate": "2020-01-21T03:52:20Z", "type": "commit"}, {"oid": "4c2e07081f58a5fd0431639d7acc3400aec8311c", "url": "https://github.com/Azure/azure-sdk-for-android/commit/4c2e07081f58a5fd0431639d7acc3400aec8311c", "message": "Made slight corrections to errors caused when merging in the past commit.", "committedDate": "2020-01-21T04:02:36Z", "type": "commit"}, {"oid": "818cc9a135c2a455ee6ed2426e4f81b303233bda", "url": "https://github.com/Azure/azure-sdk-for-android/commit/818cc9a135c2a455ee6ed2426e4f81b303233bda", "message": "Moved all HTTP-related exceptions into the http package inside of azure-core.", "committedDate": "2020-01-21T23:31:02Z", "type": "commit"}, {"oid": "8fca9c127ba6c4c13b88affd812972ea85a6c2ab", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8fca9c127ba6c4c13b88affd812972ea85a6c2ab", "message": "Renamed the 'implementation' package to 'internal' to follow Android conventions. Changed the visibility of some getModule() methods that can be package-private instead of public. Moved an exception class to its own package for the sake of consistency. Removed the AdditionalProperties and Flattening serializers and deserializers since they are not required at the moment.", "committedDate": "2020-01-21T23:36:16Z", "type": "commit"}, {"oid": "8fde6cd318609900a2f0176746e2f1c9f780c78e", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8fde6cd318609900a2f0176746e2f1c9f780c78e", "message": "Changed the visibility of AndroidClientLogger to package-private since we want user to get new instances only through ClientLogger.getDefault() calls. Corrected these artifacts' JavaDoc.", "committedDate": "2020-01-21T23:38:29Z", "type": "commit"}, {"oid": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea", "url": "https://github.com/Azure/azure-sdk-for-android/commit/bf8ed6437d7bf5e6ef56154967be0edafbf89aea", "message": "After a brainstorming session with @anuchandy, we decided that if we are going to decouple Android classes like Context and Configuration to make it easier to create some unit tests it would be good to reduce the surface area of our public API involved (InformationProvider interfaces). So instead of having a whole 'implementation' package with a bunch of public interfaces and classes, we can consolidate everything into one interface and its implementation and move it into the 'interceptors' package while keeping the implementation package-private and the interface public with a getDefault() method.", "committedDate": "2020-01-21T23:56:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NTYwOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369865608", "bodyText": "AndroidInformation type is package private so we should not link that type in javadoc.", "author": "anuchandy", "createdAt": "2020-01-22T23:41:04Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/DeviceInformation.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.azure.android.core.http.interceptor;\n+\n+import android.content.Context;\n+import android.content.res.Configuration;\n+\n+/**\n+ * Interface for an object that contains application, platform and locale information.\n+ */\n+public interface DeviceInformation {\n+    /**\n+     * Creates and returns a default {@link DeviceInformation} in the form of an {@link AndroidInformation} instance.\n+     *\n+     * @param configuration The application's context.\n+     * @param context       The system configuration.\n+     * @return An {@link AndroidInformation} instance.", "originalCommit": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNTM3Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r372115376", "bodyText": "Removed this class and went back to using separate providers. Will add a way of getting a default provider while making the implementation package private in a separate PR.", "author": "vcolin7", "createdAt": "2020-01-28T23:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NTYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "f66804034cb2661f9e086c751a47eb8154afb55c", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/DeviceInformation.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/DeviceInformation.java\ndeleted file mode 100644\nindex 5ed3a3265..000000000\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/DeviceInformation.java\n+++ /dev/null\n\n@@ -1,76 +0,0 @@\n-package com.azure.android.core.http.interceptor;\n-\n-import android.content.Context;\n-import android.content.res.Configuration;\n-\n-/**\n- * Interface for an object that contains application, platform and locale information.\n- */\n-public interface DeviceInformation {\n-    /**\n-     * Creates and returns a default {@link DeviceInformation} in the form of an {@link AndroidInformation} instance.\n-     *\n-     * @param configuration The application's context.\n-     * @param context       The system configuration.\n-     * @return An {@link AndroidInformation} instance.\n-     */\n-    static DeviceInformation getDefault(Configuration configuration, Context context) {\n-        return new AndroidInformation(configuration, context);\n-    }\n-\n-    /**\n-     * Application ID.\n-     *\n-     * @return The application ID.\n-     */\n-    String getApplicationId();\n-\n-    /**\n-     * Application version.\n-     *\n-     * @return The application version.\n-     */\n-    String getApplicationVersion();\n-\n-    /**\n-     * Application target SDK version.\n-     *\n-     * @return The application's target SDK version.\n-     */\n-    int getTargetSdkVersion();\n-\n-    /**\n-     * Default system language.\n-     *\n-     * @return The default system language.\n-     */\n-    String getDefaultSystemLanguage();\n-\n-    /**\n-     * System region.\n-     *\n-     * @return The system region.\n-     */\n-    String getSystemRegion();\n-\n-    /**\n-     * Device manufacturer.\n-     *\n-     * @return The device manufacturer.\n-     */\n-    String getManufacturer();\n-\n-    /**\n-     * Device model.\n-     *\n-     * @return The device model.\n-     */\n-    String getModel();\n-\n-    /**\n-     * OS version.\n-     *\n-     * @return The device's OS version.\n-     */\n-    int getOsVersion();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NjM4NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369866384", "bodyText": "We can remove this annotation type given we don't use flattening serializer and deserializer any more.", "author": "anuchandy", "createdAt": "2020-01-22T23:43:53Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/annotation/JsonFlatten.java", "diffHunk": "@@ -3,21 +3,17 @@\n \n package com.azure.android.core.annotation;\n \n-import static java.lang.annotation.RetentionPolicy.RUNTIME;\n-\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.Target;\n \n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n /**\n- * Annotation used for flattening properties separated by '.'.\n- *\n- * E.g. a property with JsonProperty value \"properties.value\"\n- * will have \"value\" property under the \"properties\" tree on\n- * the wire.\n- *\n+ * Annotation used for flattening properties separated by '.', e.g., a property with JsonProperty value\n+ * \"properties.value\" will have \"value\" property under the \"properties\" tree on the wire.\n  */\n @Retention(RUNTIME)\n @Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})\n public @interface JsonFlatten {\n-}\n\\ No newline at end of file\n+}", "originalCommit": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NDQwNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r372594407", "bodyText": "Will remove in a future PR, since this is already merged.", "author": "vcolin7", "createdAt": "2020-01-29T19:46:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NjM4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NzY5MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369867691", "bodyText": "nit; this type is internal, its ok to have no doc for the overridden methods as we don't generate javadoc for internal types. We can just keep the class level and ctr level docs and remove rest.", "author": "anuchandy", "createdAt": "2020-01-22T23:48:55Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AndroidInformation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.azure.android.core.http.interceptor;\n+\n+import android.content.Context;\n+import android.content.pm.PackageManager;\n+import android.content.res.Configuration;\n+import android.os.Build;\n+\n+/**\n+ * Provider that contains device and application information extracted from {@link Configuration} and {@link Context}\n+ * objects, as well as the {@link Build} class.\n+ */\n+final class AndroidInformation implements DeviceInformation {\n+    private final Configuration configuration;\n+    private final Context context;\n+\n+    private int targetSdkVersion;\n+    private String applicationId;\n+    private String applicationVersion;\n+    private String language;\n+    private String systemRegion;\n+\n+    /**\n+     * Constructor that takes an application's {@link Context} and a system's {@link Configuration} object to extract\n+     * data from.\n+     *\n+     * @param configuration The application's context.\n+     * @param context       The system configuration.\n+     */\n+    AndroidInformation(Configuration configuration, Context context) {\n+        this.configuration = configuration;\n+        this.context = context;\n+        targetSdkVersion = -1;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getTargetSdkVersion() {\n+        if (targetSdkVersion == -1) {\n+            targetSdkVersion = context.getApplicationInfo().targetSdkVersion;\n+        }\n+\n+        return targetSdkVersion;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getApplicationId() {\n+        if (applicationId == null) {\n+            applicationId = context.getPackageName();\n+        }\n+\n+        return applicationId;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getApplicationVersion() {\n+        if (applicationVersion == null) {\n+            try {\n+                applicationVersion = context.getPackageManager().getPackageInfo(getApplicationId(), 0).versionName;\n+            } catch (PackageManager.NameNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+\n+        return applicationVersion;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getDefaultSystemLanguage() {\n+        if (language == null) {\n+            // Using this instead of Configuration.getLocales() because it's not supported in anything less than\n+            // Android L24\n+            language = configuration.locale.getLanguage();\n+        }\n+\n+        return language;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getSystemRegion() {\n+        if (systemRegion == null) {\n+            // Using this instead of Configuration.getLocales() because it's not supported in anything less than\n+            // Android L24\n+            systemRegion = configuration.locale.getCountry();\n+        }\n+\n+        return systemRegion;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getManufacturer() {\n+        return Build.MANUFACTURER;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String getModel() {\n+        return Build.MODEL;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getOsVersion() {", "originalCommit": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNTUxNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r372115517", "bodyText": "Good to know, thanks!", "author": "vcolin7", "createdAt": "2020-01-28T23:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NzY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f66804034cb2661f9e086c751a47eb8154afb55c", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AndroidInformation.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AndroidInformation.java\ndeleted file mode 100644\nindex 457bc4219..000000000\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AndroidInformation.java\n+++ /dev/null\n\n@@ -1,126 +0,0 @@\n-package com.azure.android.core.http.interceptor;\n-\n-import android.content.Context;\n-import android.content.pm.PackageManager;\n-import android.content.res.Configuration;\n-import android.os.Build;\n-\n-/**\n- * Provider that contains device and application information extracted from {@link Configuration} and {@link Context}\n- * objects, as well as the {@link Build} class.\n- */\n-final class AndroidInformation implements DeviceInformation {\n-    private final Configuration configuration;\n-    private final Context context;\n-\n-    private int targetSdkVersion;\n-    private String applicationId;\n-    private String applicationVersion;\n-    private String language;\n-    private String systemRegion;\n-\n-    /**\n-     * Constructor that takes an application's {@link Context} and a system's {@link Configuration} object to extract\n-     * data from.\n-     *\n-     * @param configuration The application's context.\n-     * @param context       The system configuration.\n-     */\n-    AndroidInformation(Configuration configuration, Context context) {\n-        this.configuration = configuration;\n-        this.context = context;\n-        targetSdkVersion = -1;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public int getTargetSdkVersion() {\n-        if (targetSdkVersion == -1) {\n-            targetSdkVersion = context.getApplicationInfo().targetSdkVersion;\n-        }\n-\n-        return targetSdkVersion;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public String getApplicationId() {\n-        if (applicationId == null) {\n-            applicationId = context.getPackageName();\n-        }\n-\n-        return applicationId;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public String getApplicationVersion() {\n-        if (applicationVersion == null) {\n-            try {\n-                applicationVersion = context.getPackageManager().getPackageInfo(getApplicationId(), 0).versionName;\n-            } catch (PackageManager.NameNotFoundException e) {\n-                e.printStackTrace();\n-            }\n-        }\n-\n-        return applicationVersion;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public String getDefaultSystemLanguage() {\n-        if (language == null) {\n-            // Using this instead of Configuration.getLocales() because it's not supported in anything less than\n-            // Android L24\n-            language = configuration.locale.getLanguage();\n-        }\n-\n-        return language;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public String getSystemRegion() {\n-        if (systemRegion == null) {\n-            // Using this instead of Configuration.getLocales() because it's not supported in anything less than\n-            // Android L24\n-            systemRegion = configuration.locale.getCountry();\n-        }\n-\n-        return systemRegion;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public String getManufacturer() {\n-        return Build.MANUFACTURER;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public String getModel() {\n-        return Build.MODEL;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public int getOsVersion() {\n-        return Build.VERSION.SDK_INT;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2ODczMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369868730", "bodyText": "we might want to revert to implementation based on team discussion.", "author": "anuchandy", "createdAt": "2020-01-22T23:52:25Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/http/rest/RetrofitAPIClient.java", "diffHunk": "@@ -1,10 +1,10 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.android.core.implementation.http.rest;\n+package com.azure.android.core.internal.http.rest;\n \n-import com.azure.android.core.implementation.util.serializer.SerializerAdapter;\n-import com.azure.android.core.implementation.util.serializer.SerializerEncoding;\n+import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n+import com.azure.android.core.internal.util.serializer.SerializerEncoding;", "originalCommit": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3MzA5NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r372573094", "bodyText": "Based on more recent discussions we'll stick with internal for now.", "author": "vcolin7", "createdAt": "2020-01-29T19:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2ODczMA=="}], "type": "inlineReview", "revised_code": {"commit": "007383bf293e9bf9d4127b39d513d038825cee5a", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/http/rest/RetrofitAPIClient.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/http/rest/RetrofitAPIClient.java\ndeleted file mode 100644\nindex a0b0574ec..000000000\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/http/rest/RetrofitAPIClient.java\n+++ /dev/null\n\n@@ -1,119 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.internal.http.rest;\n-\n-import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n-import com.azure.android.core.internal.util.serializer.SerializerEncoding;\n-\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Type;\n-import java.util.List;\n-\n-import okhttp3.Interceptor;\n-import okhttp3.MediaType;\n-import okhttp3.OkHttpClient;\n-import okhttp3.RequestBody;\n-import okhttp3.ResponseBody;\n-import retrofit2.Converter;\n-import retrofit2.Retrofit;\n-\n-/**\n- * Type to create Retrofit based service-interface implementation.\n- */\n-public class RetrofitAPIClient {\n-    // OkHttp Request XML Media Type\n-    private static MediaType XML_MEDIA_TYPE = MediaType.parse(\"application/xml; charset=UTF-8\");\n-    // OkHttp Request Json Media Type\n-    private static MediaType JSON_MEDIA_TYPE = MediaType.parse(\"application/json; charset=UTF-8\");\n-\n-    /**\n-     * Create a Retrofit based API client implementation for a given service-interface.\n-     * <p>\n-     * Note(@anuchan): This method takes the minimal parameters needed to create a service-interface implementation,\n-     * when needed we can add overloads that take a custom {@link SerializerAdapter}, {@link OkHttpClient}, etc.,\n-     * which is needed when we enable the user to provide an existing {@link OkHttpClient} configured with SSL, Proxy,\n-     * SocketPool, etc.\n-     *\n-     * @param baseUri          The base URI to to use for service-interface method calls.\n-     * @param encoding         The HTTP Content-Type for a request or response associated with the service-interface\n-     *                         method calls.\n-     * @param interceptors     The interceptors to intercept the request or response associated with the\n-     *                         service-interface method calls.\n-     * @param serviceInterface The service-interface class.\n-     * @param <T>              The type of the service-interface.\n-     * @return A (proxy based) implementation for the service-interface.\n-     */\n-    public static <T> T createAPIClient(String baseUri,\n-                                        SerializerEncoding encoding,\n-                                        List<Interceptor> interceptors,\n-                                        Class<T> serviceInterface) {\n-        return createRetrofit(baseUri,\n-            encoding,\n-            SerializerAdapter.createDefault(),\n-            interceptors,\n-            new OkHttpClient.Builder().build()).create(serviceInterface);\n-    }\n-\n-    /**\n-     * Creates a {@link Retrofit} instance that can be used to create proxies for a service-interface.\n-     *\n-     * @param baseUri           The base URI.\n-     * @param encoding          The HTTP Content-Type for a request or response.\n-     * @param serializerAdapter The serializer-deserializer for request or response content.\n-     * @param interceptors      The interceptors to intercept the request or response.\n-     * @param httpClient        The OkHttpClient for network calls\n-     * @return The Retrofit instance.\n-     */\n-    private static Retrofit createRetrofit(String baseUri,\n-                                           SerializerEncoding encoding,\n-                                           SerializerAdapter serializerAdapter,\n-                                           List<Interceptor> interceptors,\n-                                           OkHttpClient httpClient) {\n-        OkHttpClient.Builder builder = httpClient.newBuilder();\n-\n-        for (Interceptor interceptor : interceptors) {\n-            builder.addInterceptor(interceptor);\n-        }\n-\n-        return new Retrofit.Builder()\n-            .baseUrl(baseUri)\n-            .addConverterFactory(wrapSerializerInRetrofitConverter(serializerAdapter,\n-                encoding))\n-            .callFactory(builder.build())\n-            .build();\n-    }\n-\n-    /**\n-     * Given an azure-core {@link SerializerAdapter}, wrap that in a Retrofit {@link Converter} so that it can be\n-     * plugged into the Retrofit serialization-deserialization pipeline.\n-     *\n-     * @param serializer azure-core {@link SerializerAdapter}.\n-     * @param encoding   The encoding format.\n-     * @return A Retrofit {@link Converter}.\n-     */\n-    private static Converter.Factory wrapSerializerInRetrofitConverter(SerializerAdapter serializer,\n-                                                                       final SerializerEncoding encoding) {\n-        return new Converter.Factory() {\n-            @Override\n-            public Converter<?, RequestBody> requestBodyConverter(Type type,\n-                                                                  Annotation[] parameterAnnotations,\n-                                                                  Annotation[] methodAnnotations,\n-                                                                  Retrofit retrofit) {\n-                return value -> RequestBody.create(encoding == SerializerEncoding.XML\n-                        ? XML_MEDIA_TYPE\n-                        : JSON_MEDIA_TYPE, serializer.serialize(value, encoding));\n-            }\n-\n-            @Override\n-            public Converter<ResponseBody, ?> responseBodyConverter(Type type,\n-                                                                    Annotation[] annotations,\n-                                                                    Retrofit retrofit) {\n-                return (Converter<ResponseBody, Object>) body -> serializer.deserialize(body.string(),\n-                    type,\n-                    encoding);\n-            }\n-        };\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2ODk2Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369868962", "bodyText": "internal -> implementation. Please check other places as well.", "author": "anuchandy", "createdAt": "2020-01-22T23:53:09Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializer.java", "diffHunk": "@@ -1,11 +1,12 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.android.core.implementation.util.serializer;\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MjI2MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369872261", "bodyText": "We shouldn't turn this to an interface given there is no use-case to implement it.", "author": "anuchandy", "createdAt": "2020-01-23T00:05:02Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java", "diffHunk": "@@ -9,78 +9,76 @@\n /**\n  * Utility for Base64 encoding and decoding.\n  */\n-public final class Base64Util {\n+public interface Base64Util {", "originalCommit": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3ODYzMQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r372578631", "bodyText": "This change was made to keep consistence with our CoreUtils implementation, which was decided to be an interface with only static methods as outlined in this comment.", "author": "vcolin7", "createdAt": "2020-01-29T19:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MjI2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NDY1OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/158#discussion_r369874658", "bodyText": "nit; given this is internal type we can remove inherit-javadoc for all overriden methods", "author": "anuchandy", "createdAt": "2020-01-23T00:14:14Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/AndroidClientLogger.java", "diffHunk": "@@ -61,48 +63,80 @@ public void setLogLevel(@LogLevel int logLevel) {\n         this.logLevel = logLevel;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public void debug(String message) {\n         if (LOG_LEVEL_DEBUG >= this.logLevel) {\n             Log.d(tag, message);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public void debug(String message, Throwable throwable) {\n         if (LOG_LEVEL_DEBUG >= this.logLevel) {\n             Log.d(tag, message, throwable);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public void info(String message) {\n         if (LOG_LEVEL_INFO >= this.logLevel) {\n             Log.i(tag, message);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public void info(String message, Throwable throwable) {\n         if (LOG_LEVEL_INFO >= this.logLevel) {\n             Log.i(tag, message, throwable);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public void warning(String message) {\n         if (LOG_LEVEL_WARNING>= this.logLevel) {\n             Log.w(tag, message);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */", "originalCommit": "bf8ed6437d7bf5e6ef56154967be0edafbf89aea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f66804034cb2661f9e086c751a47eb8154afb55c", "url": "https://github.com/Azure/azure-sdk-for-android/commit/f66804034cb2661f9e086c751a47eb8154afb55c", "message": "Reverted the consolidation of all information providers.", "committedDate": "2020-01-27T17:07:23Z", "type": "commit"}, {"oid": "f66804034cb2661f9e086c751a47eb8154afb55c", "url": "https://github.com/Azure/azure-sdk-for-android/commit/f66804034cb2661f9e086c751a47eb8154afb55c", "message": "Reverted the consolidation of all information providers.", "committedDate": "2020-01-27T17:07:23Z", "type": "forcePushed"}, {"oid": "007383bf293e9bf9d4127b39d513d038825cee5a", "url": "https://github.com/Azure/azure-sdk-for-android/commit/007383bf293e9bf9d4127b39d513d038825cee5a", "message": "Merge branch 'dev' of github.com:Azure/azure-sdk-for-android into code-cleanup\n\n# Conflicts:\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/implementation/util/serializer/SerializerAdapter.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/implementation/util/serializer/SerializerEncoding.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/implementation/util/serializer/SerializerFormat.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/internal/http/rest/RetrofitAPIClient.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/ExceptionUtils.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/ByteArraySerializer.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123Serializer.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/SerializerEncoding.java\n#\tsdk/core/azure-core/src/main/java/com/azure/android/core/util/DateTimeRfc1123.java", "committedDate": "2020-01-28T23:09:30Z", "type": "commit"}]}