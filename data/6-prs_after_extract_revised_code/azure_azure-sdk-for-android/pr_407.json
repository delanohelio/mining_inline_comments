{"pr_number": 407, "pr_title": "Added Tests for Blobs", "pr_createdAt": "2020-10-16T17:34:58Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/407", "timeline": [{"oid": "cd2de7ff4bee2b20b6d45e08f4d127223f75c89b", "url": "https://github.com/Azure/azure-sdk-for-android/commit/cd2de7ff4bee2b20b6d45e08f4d127223f75c89b", "message": "Started on create container", "committedDate": "2020-10-09T00:06:58Z", "type": "commit"}, {"oid": "3e1a8074ebf302b11352b46e3e9cf305037bc1f6", "url": "https://github.com/Azure/azure-sdk-for-android/commit/3e1a8074ebf302b11352b46e3e9cf305037bc1f6", "message": "Added support to delete container", "committedDate": "2020-10-09T18:41:29Z", "type": "commit"}, {"oid": "7fd2db40775cd27af30e8e3d4a385b074be54728", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7fd2db40775cd27af30e8e3d4a385b074be54728", "message": "Finished createContainer", "committedDate": "2020-10-09T18:57:58Z", "type": "commit"}, {"oid": "58d2a0d674e12be953f4fc9b30021e8d51b8c5af", "url": "https://github.com/Azure/azure-sdk-for-android/commit/58d2a0d674e12be953f4fc9b30021e8d51b8c5af", "message": "Updated test", "committedDate": "2020-10-09T20:19:27Z", "type": "commit"}, {"oid": "8042b1d882af59f48bfd2c9233ffb789893f29b0", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8042b1d882af59f48bfd2c9233ffb789893f29b0", "message": "Exposed BlobRequestConditions publically", "committedDate": "2020-10-09T20:28:29Z", "type": "commit"}, {"oid": "368f15356e57f681bb1635e4aed0ee44c4789290", "url": "https://github.com/Azure/azure-sdk-for-android/commit/368f15356e57f681bb1635e4aed0ee44c4789290", "message": "Started setting up ways to get creds and clients", "committedDate": "2020-10-09T23:38:27Z", "type": "commit"}, {"oid": "34329b725b7f423436b09b35116080832ce3ade1", "url": "https://github.com/Azure/azure-sdk-for-android/commit/34329b725b7f423436b09b35116080832ce3ade1", "message": "Merge branch 'testInfra' into createContainer", "committedDate": "2020-10-12T18:46:07Z", "type": "commit"}, {"oid": "326f1d06598ff9e57a9179e6096fe68ee40c6ebd", "url": "https://github.com/Azure/azure-sdk-for-android/commit/326f1d06598ff9e57a9179e6096fe68ee40c6ebd", "message": "Started on createContainer network tests", "committedDate": "2020-10-12T19:21:19Z", "type": "commit"}, {"oid": "d442292112b7d5dbdc9789ffa222b9495aff0913", "url": "https://github.com/Azure/azure-sdk-for-android/commit/d442292112b7d5dbdc9789ffa222b9495aff0913", "message": "Merge remote-tracking branch 'gauri/storage/deleteContainer' into createContainer", "committedDate": "2020-10-12T19:23:36Z", "type": "commit"}, {"oid": "a838f0f2ce20ab11120c4ebb97981be695ec1eca", "url": "https://github.com/Azure/azure-sdk-for-android/commit/a838f0f2ce20ab11120c4ebb97981be695ec1eca", "message": "Added support for get container properties", "committedDate": "2020-10-12T20:43:32Z", "type": "commit"}, {"oid": "ebd01c2d9cabfb6853fbb3e05b4db00c2732c0a2", "url": "https://github.com/Azure/azure-sdk-for-android/commit/ebd01c2d9cabfb6853fbb3e05b4db00c2732c0a2", "message": "Working on deleteContainer tests", "committedDate": "2020-10-12T20:47:39Z", "type": "commit"}, {"oid": "95bfecb4dd10691bb8656971605b59733b723090", "url": "https://github.com/Azure/azure-sdk-for-android/commit/95bfecb4dd10691bb8656971605b59733b723090", "message": "Merge remote-tracking branch 'gauri/storage/getContainerProperties' into createContainer", "committedDate": "2020-10-12T20:50:47Z", "type": "commit"}, {"oid": "d891da875b3a634f5fcc7d6a7cb5e8607d771a4f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/d891da875b3a634f5fcc7d6a7cb5e8607d771a4f", "message": "Added live tests for create", "committedDate": "2020-10-13T00:00:30Z", "type": "commit"}, {"oid": "183e72276afceee0a4e993884fb018675760d5ae", "url": "https://github.com/Azure/azure-sdk-for-android/commit/183e72276afceee0a4e993884fb018675760d5ae", "message": "Added a bunch of network tests for container apis", "committedDate": "2020-10-14T03:32:42Z", "type": "commit"}, {"oid": "24ca631081e4a802f484b049fa859d1b6259f0ae", "url": "https://github.com/Azure/azure-sdk-for-android/commit/24ca631081e4a802f484b049fa859d1b6259f0ae", "message": "Fixed some formatting", "committedDate": "2020-10-14T16:25:52Z", "type": "commit"}, {"oid": "7492ee526ecb5fc3c23cff1294d783ea1f2e8991", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7492ee526ecb5fc3c23cff1294d783ea1f2e8991", "message": "Added some blob tests", "committedDate": "2020-10-14T17:05:05Z", "type": "commit"}, {"oid": "cc7d944e483eac9f8dd49be03b4e4ea955a18840", "url": "https://github.com/Azure/azure-sdk-for-android/commit/cc7d944e483eac9f8dd49be03b4e4ea955a18840", "message": "Merge remote-tracking branch 'rickle-msft/createContainer' into blobTests", "committedDate": "2020-10-14T17:10:00Z", "type": "commit"}, {"oid": "7155179db78c8a6f14c9030aced61cb7a3bacf3d", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7155179db78c8a6f14c9030aced61cb7a3bacf3d", "message": "Added some more commit block list tests", "committedDate": "2020-10-14T19:20:02Z", "type": "commit"}, {"oid": "6929a9ab8723590c57f36d539ab63dab48c114c7", "url": "https://github.com/Azure/azure-sdk-for-android/commit/6929a9ab8723590c57f36d539ab63dab48c114c7", "message": "Added more block blob tests", "committedDate": "2020-10-14T20:36:25Z", "type": "commit"}, {"oid": "de294c0d245bf0d0e2c051c4d73eb2ed2132e21c", "url": "https://github.com/Azure/azure-sdk-for-android/commit/de294c0d245bf0d0e2c051c4d73eb2ed2132e21c", "message": "Added Access condition tests for blob delete", "committedDate": "2020-10-14T20:59:21Z", "type": "commit"}, {"oid": "309cca429440a102a9d30c3ac9c4a7c0b9f38abe", "url": "https://github.com/Azure/azure-sdk-for-android/commit/309cca429440a102a9d30c3ac9c4a7c0b9f38abe", "message": "Added tests for blobs", "committedDate": "2020-10-14T22:03:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk2NzA1Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r507967052", "bodyText": "Should we move any utils methods that are specific to storage or uses storage types to storage-package? core util should not have any dependency on storage or any other azure-sdk modules.", "author": "anuchandy", "createdAt": "2020-10-19T18:17:32Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/common/TestUtils.java", "diffHunk": "@@ -1,29 +1,176 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.android.core.common;\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.storage.blob.StorageBlobAsyncClient;\n+import com.azure.android.storage.blob.StorageBlobClient;\n+import com.azure.android.storage.blob.credential.SasTokenCredential;\n+import com.azure.android.storage.blob.interceptor.SasTokenCredentialInterceptor;\n+import com.azure.android.storage.blob.models.BlobGetPropertiesHeaders;\n+\n+import org.threeten.bp.OffsetDateTime;\n \n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Base64;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n+import okhttp3.Headers;\n import okhttp3.Interceptor;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.mockwebserver.MockWebServer;\n \n+import static org.junit.Assert.assertFalse;\n+\n public final class TestUtils {\n     private TestUtils() {\n         // Empty constructor to prevent instantiation of this class.\n     }\n \n+    // ----------------------- CONSTANT VALUES ----------------------------\n+    /*\n+    The values below are used to create data-driven tests for access conditions.\n+     */\n+    static final OffsetDateTime oldDate = OffsetDateTime.now().minusDays(1);\n+\n+    static final OffsetDateTime newDate = OffsetDateTime.now().plusDays(1);\n+\n+    /*\n+    Note that this value is only used to check if we are depending on the received etag. This value will not actually\n+    be used.\n+     */\n+\n+    static final String receivedEtag = \"received\";\n+\n+    static final String garbageEtag = \"garbage\";\n+\n+\n+    // -------------------- GENERATING CLIENTS --------------------------\n+    public static StorageBlobClient.Builder initializeDefaultSyncBlobClientBuilder(Interceptor ... interceptors) {\n+        return initializeDefaultSyncBlobClientBuilder(enableFiddler(), interceptors);\n+    }\n+\n+    public static StorageBlobClient.Builder initializeDefaultSyncBlobClientBuilder(boolean enableFiddler,\n+                                                                                   Interceptor ... interceptors) {\n+        return new StorageBlobClient.Builder(getServiceBuilderWithOptionalProxy(enableFiddler, interceptors))\n+            .setBlobServiceUrl(getDefaultEndpointString(useHttps()))\n+            .setCredentialInterceptor(new SasTokenCredentialInterceptor(new SasTokenCredential(getDefaultSasToken())));\n+    }\n+\n+    public static StorageBlobAsyncClient.Builder initializeDefaultAsyncBlobClientBuilder(Interceptor ... interceptors) {\n+        return initializeDefaultAsyncBlobClientBuilder(enableFiddler(), interceptors);\n+    }\n+\n+    public static StorageBlobAsyncClient.Builder initializeDefaultAsyncBlobClientBuilder(boolean enableFiddler,\n+                                                                                         Interceptor ... interceptors) {\n+        return new StorageBlobAsyncClient.Builder(UUID.randomUUID().toString(),\n+            getServiceBuilderWithOptionalProxy(enableFiddler, interceptors))\n+            .setBlobServiceUrl(getDefaultEndpointString(useHttps()))\n+            .setCredentialInterceptor(new SasTokenCredentialInterceptor(new SasTokenCredential(getDefaultSasToken())));\n+    }\n+\n+    public static String getDefaultEndpointString(boolean useHttps) {\n+        String protocol = useHttps ? \"https\" : \"http\";\n+        return String.format(\"%s://%s.blob.core.windows.net\", protocol, getDefaultAccountName());\n+    }\n+\n+    public static String getDefaultAccountName() {\n+        return System.getenv(\"AZURE_STORAGE_ANDROID_ACCOUNT_NAME\");\n+    }\n+\n+    public static String getDefaultSasToken() {\n+        return System.getenv(\"AZURE_STORAGE_ANDROID_SAS_TOKEN\");\n+    }\n+\n+    public static ServiceClient.Builder getServiceBuilderWithOptionalProxy(boolean enableFiddler,\n+                                                                           Interceptor ... interceptors) {\n+        ServiceClient.Builder serviceBuilder = enableFiddler ?\n+            new ServiceClient.Builder(new OkHttpClient.Builder()\n+                .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"localhost\", 8888)))) :\n+            new ServiceClient.Builder();\n+\n+        for (Interceptor interceptor : interceptors) {\n+            serviceBuilder.addInterceptor(interceptor);\n+        }\n+\n+       return serviceBuilder;\n+    }\n+\n+    // ---------------------- CONFIG OPTIONS -----------------------------\n+\n+    public static boolean useHttps() {\n+        return false;\n+    }\n+\n+    public static boolean enableFiddler() {\n+        return true;\n+    }\n+\n+    // --------------------- GENERATING TEST RESOURCES ------------------------\n+\n+    public static String generateResourceName() {\n+        return UUID.randomUUID().toString();\n+    }\n+\n+    public static String generateBlockID() {\n+        return Base64.getEncoder().encodeToString(UUID.randomUUID().toString().getBytes(StandardCharsets.UTF_8));\n+    }\n+\n     public static OkHttpClient buildOkHttpClientWithInterceptor(Interceptor interceptor) {\n         return new OkHttpClient().newBuilder()\n             .addInterceptor(interceptor)\n             .build();\n     }\n \n+    // -------------------------- HELPER METHODS -----------------------\n+\n+    public static void awaitOnLatch(CountDownLatch latch, String method) {\n+        try {\n+            latch.await(10, TimeUnit.SECONDS);\n+        } catch (InterruptedException e) {\n+            assertFalse(method + \" didn't produce any result.\", true);\n+        }\n+    }\n+\n+    public static boolean validateBasicHeaders(Headers headers) {\n+        return headers.get(\"etag\") != null &&\n+            // Quotes should be scrubbed from etag header values\n+            !headers.get(\"etag\").contains(\"\\\"\") &&\n+            headers.get(\"last-modified\") != null &&\n+            headers.get(\"x-ms-request-id\") != null &&\n+            headers.get(\"x-ms-version\") != null &&\n+            headers.get(\"date\") != null;\n+    }\n+\n+    public static boolean validateBlobProperties(BlobGetPropertiesHeaders headers, String cacheControl, String contentDisposition, String contentEncoding, String contentLanguage, byte[] contentMd5, String contentType) {\n+        return Objects.equals(headers.getCacheControl(), cacheControl) &&\n+            Objects.equals(headers.getContentDisposition(), contentDisposition) &&\n+            Objects.equals(headers.getContentEncoding(), contentEncoding) &&\n+            Objects.equals(headers.getContentLanguage(), contentLanguage) &&\n+            Arrays.equals(headers.getContentMD5(), contentMd5) &&\n+            Objects.equals(headers.getContentType(), contentType);\n+    }\n+\n+    public static String setupMatchCondition(StorageBlobClient client, String containerName, String blobName, String match) {\n+        if (receivedEtag.equals(match)) {\n+            return client.getBlobProperties(containerName, blobName).getETag();\n+        } else {\n+            return match;\n+        }\n+    }", "originalCommit": "309cca429440a102a9d30c3ac9c4a7c0b9f38abe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3MDc3MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r507970771", "bodyText": "Yep! Will do. I think Rick just created a BlobTestUtils so I can move them there", "author": "gapra-msft", "createdAt": "2020-10-19T18:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk2NzA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzMTc0MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r508031741", "bodyText": "Done!", "author": "gapra-msft", "createdAt": "2020-10-19T20:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk2NzA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f1e314214896feee074cad1650632f253b0eba20", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/common/TestUtils.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/common/TestUtils.java\nindex 67bf83ad8..30466ec80 100644\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/common/TestUtils.java\n+++ b/sdk/core/azure-core/src/test/java/com/azure/android/core/common/TestUtils.java\n\n@@ -135,7 +135,6 @@ public final class TestUtils {\n     }\n \n     // -------------------------- HELPER METHODS -----------------------\n-\n     public static void awaitOnLatch(CountDownLatch latch, String method) {\n         try {\n             latch.await(10, TimeUnit.SECONDS);\n"}}, {"oid": "f1e314214896feee074cad1650632f253b0eba20", "url": "https://github.com/Azure/azure-sdk-for-android/commit/f1e314214896feee074cad1650632f253b0eba20", "message": "Merge branch 'master' into blobTests", "committedDate": "2020-10-19T18:41:04Z", "type": "commit"}, {"oid": "12deef049adc984c323ec9b79d090ee3d14473f2", "url": "https://github.com/Azure/azure-sdk-for-android/commit/12deef049adc984c323ec9b79d090ee3d14473f2", "message": "Moved blob related things to blobs", "committedDate": "2020-10-19T19:45:54Z", "type": "commit"}, {"oid": "d403f2734727d595b0091ecdcfdbb1f61d08f67f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/d403f2734727d595b0091ecdcfdbb1f61d08f67f", "message": "Removed changes to TestUtils", "committedDate": "2020-10-19T19:46:45Z", "type": "commit"}, {"oid": "4f720cdc17a12451b7997ce372379774cc847ccd", "url": "https://github.com/Azure/azure-sdk-for-android/commit/4f720cdc17a12451b7997ce372379774cc847ccd", "message": "Added ignore after running testsw", "committedDate": "2020-10-19T19:54:31Z", "type": "commit"}, {"oid": "3ffa8023c135c15e110422aed44013ffc1c7d5ad", "url": "https://github.com/Azure/azure-sdk-for-android/commit/3ffa8023c135c15e110422aed44013ffc1c7d5ad", "message": "Removed unnecessary changes", "committedDate": "2020-10-19T20:16:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MjIwMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r508092203", "bodyText": "Why is this commented out?", "author": "rickle-msft", "createdAt": "2020-10-19T22:10:47Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlobTest.java", "diffHunk": "@@ -0,0 +1,443 @@\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.storage.blob.models.AccessTier;\n+import com.azure.android.storage.blob.models.BlobDeleteHeaders;\n+import com.azure.android.storage.blob.models.BlobDeleteResponse;\n+import com.azure.android.storage.blob.models.BlobDownloadHeaders;\n+import com.azure.android.storage.blob.models.BlobDownloadResponse;\n+import com.azure.android.storage.blob.models.BlobGetPropertiesHeaders;\n+import com.azure.android.storage.blob.models.BlobGetPropertiesResponse;\n+import com.azure.android.storage.blob.models.BlobRange;\n+import com.azure.android.storage.blob.models.BlobRequestConditions;\n+import com.azure.android.storage.blob.models.BlobStorageException;\n+import com.azure.android.storage.blob.models.BlobType;\n+import com.azure.android.storage.blob.models.LeaseStateType;\n+import com.azure.android.storage.blob.models.LeaseStatusType;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import okhttp3.ResponseBody;\n+\n+import static com.azure.android.storage.blob.BlobTestUtils.enableFiddler;\n+import static com.azure.android.storage.blob.BlobTestUtils.garbageEtag;\n+import static com.azure.android.storage.blob.BlobTestUtils.generateBlockID;\n+import static com.azure.android.storage.blob.BlobTestUtils.generateResourceName;\n+import static com.azure.android.storage.blob.BlobTestUtils.getDefaultData;\n+import static com.azure.android.storage.blob.BlobTestUtils.getDefaultString;\n+import static com.azure.android.storage.blob.BlobTestUtils.initializeDefaultAsyncBlobClientBuilder;\n+import static com.azure.android.storage.blob.BlobTestUtils.initializeDefaultSyncBlobClientBuilder;\n+import static com.azure.android.storage.blob.BlobTestUtils.newDate;\n+import static com.azure.android.storage.blob.BlobTestUtils.oldDate;\n+import static com.azure.android.storage.blob.BlobTestUtils.receivedEtag;\n+import static com.azure.android.storage.blob.BlobTestUtils.setupMatchCondition;\n+import static com.azure.android.storage.blob.BlobTestUtils.validateBasicHeaders;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+\n+@RunWith(DataProviderRunner.class)\n+@Ignore\n+public class BlobTest {\n+    private String containerName;\n+    private String blobName;\n+    private static StorageBlobAsyncClient asyncClient;\n+    private static StorageBlobClient syncClient;\n+\n+    // TODO: (gapra) Add iftags\n+    @DataProvider\n+    public static Object[][] accessConditionsSuccess() {\n+        return new Object[][] {\n+            {null,    null,    null,         null},       // 0\n+            {oldDate, null,    null,         null},       // 1\n+            {null,    newDate, null,         null},       // 2\n+            {null,    null,    receivedEtag, null},       // 3\n+            {null,    null,    null,         garbageEtag} // 4\n+        };\n+    }\n+\n+    // TODO: (gapra) Add iftags\n+    @DataProvider\n+    public static Object[][] accessConditionsFail() {\n+        return new Object[][] {\n+            {newDate, null,    null,        null},        // 0\n+            {null,    oldDate, null,        null},        // 1\n+            {null,    null,    garbageEtag, null},        // 2\n+            {null,    null,    null,        receivedEtag} // 3\n+        };\n+    }\n+\n+    @DataProvider\n+    public static Object[][] downloadRange() {\n+        return new Object[][] {\n+            {0L, null, getDefaultString()},                       // 0\n+            {0L, 5L,   getDefaultString().substring(0, 0 + 5)},   // 1\n+            {3L, 2L,   getDefaultString().substring(3, 3 + 2)},   // 2\n+            {1L, 3L,   getDefaultString().substring(1, 1 + 3)}    // 3\n+        };\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        asyncClient = initializeDefaultAsyncBlobClientBuilder(enableFiddler()).build();\n+        syncClient = initializeDefaultSyncBlobClientBuilder(enableFiddler()).build();\n+    }\n+\n+    @Before\n+    public void setupTest() {\n+        // Create container\n+        containerName = generateResourceName();\n+        syncClient.createContainer(containerName);\n+\n+        // Create blob\n+        blobName = generateResourceName();\n+        String blockId = generateBlockID();\n+        syncClient.stageBlock(containerName, blobName, blockId, getDefaultData(), null);\n+        List<String> blockIds = new ArrayList<>();\n+        blockIds.add(blockId);\n+        syncClient.commitBlockList(containerName, blobName, blockIds, false);\n+    }\n+\n+    @After\n+    public void teardownTest() {\n+        syncClient.deleteContainer(containerName);\n+    }\n+\n+    @Test\n+    public void getPropertiesValues() {\n+        // When\n+        BlobGetPropertiesHeaders response = syncClient.getBlobProperties(containerName, blobName);\n+\n+        // Then\n+        assertNotNull(response.getETag());\n+//        assertFalse(response.getETag().contains(\"\\\"\")); // Quotes should be scrubbed from etag header values", "originalCommit": "3ffa8023c135c15e110422aed44013ffc1c7d5ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5Mzc3NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r508093774", "bodyText": "I think its cause we havent scrubbed quotes from etag yet, do we plan to do it? I could just flip the check for now", "author": "gapra-msft", "createdAt": "2020-10-19T22:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MjIwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MjQ1NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r508092454", "bodyText": "Are these not present because we need to add them?", "author": "rickle-msft", "createdAt": "2020-10-19T22:11:29Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlobTest.java", "diffHunk": "@@ -0,0 +1,443 @@\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.storage.blob.models.AccessTier;\n+import com.azure.android.storage.blob.models.BlobDeleteHeaders;\n+import com.azure.android.storage.blob.models.BlobDeleteResponse;\n+import com.azure.android.storage.blob.models.BlobDownloadHeaders;\n+import com.azure.android.storage.blob.models.BlobDownloadResponse;\n+import com.azure.android.storage.blob.models.BlobGetPropertiesHeaders;\n+import com.azure.android.storage.blob.models.BlobGetPropertiesResponse;\n+import com.azure.android.storage.blob.models.BlobRange;\n+import com.azure.android.storage.blob.models.BlobRequestConditions;\n+import com.azure.android.storage.blob.models.BlobStorageException;\n+import com.azure.android.storage.blob.models.BlobType;\n+import com.azure.android.storage.blob.models.LeaseStateType;\n+import com.azure.android.storage.blob.models.LeaseStatusType;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import okhttp3.ResponseBody;\n+\n+import static com.azure.android.storage.blob.BlobTestUtils.enableFiddler;\n+import static com.azure.android.storage.blob.BlobTestUtils.garbageEtag;\n+import static com.azure.android.storage.blob.BlobTestUtils.generateBlockID;\n+import static com.azure.android.storage.blob.BlobTestUtils.generateResourceName;\n+import static com.azure.android.storage.blob.BlobTestUtils.getDefaultData;\n+import static com.azure.android.storage.blob.BlobTestUtils.getDefaultString;\n+import static com.azure.android.storage.blob.BlobTestUtils.initializeDefaultAsyncBlobClientBuilder;\n+import static com.azure.android.storage.blob.BlobTestUtils.initializeDefaultSyncBlobClientBuilder;\n+import static com.azure.android.storage.blob.BlobTestUtils.newDate;\n+import static com.azure.android.storage.blob.BlobTestUtils.oldDate;\n+import static com.azure.android.storage.blob.BlobTestUtils.receivedEtag;\n+import static com.azure.android.storage.blob.BlobTestUtils.setupMatchCondition;\n+import static com.azure.android.storage.blob.BlobTestUtils.validateBasicHeaders;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+\n+@RunWith(DataProviderRunner.class)\n+@Ignore\n+public class BlobTest {\n+    private String containerName;\n+    private String blobName;\n+    private static StorageBlobAsyncClient asyncClient;\n+    private static StorageBlobClient syncClient;\n+\n+    // TODO: (gapra) Add iftags\n+    @DataProvider\n+    public static Object[][] accessConditionsSuccess() {\n+        return new Object[][] {\n+            {null,    null,    null,         null},       // 0\n+            {oldDate, null,    null,         null},       // 1\n+            {null,    newDate, null,         null},       // 2\n+            {null,    null,    receivedEtag, null},       // 3\n+            {null,    null,    null,         garbageEtag} // 4\n+        };\n+    }\n+\n+    // TODO: (gapra) Add iftags\n+    @DataProvider\n+    public static Object[][] accessConditionsFail() {\n+        return new Object[][] {\n+            {newDate, null,    null,        null},        // 0\n+            {null,    oldDate, null,        null},        // 1\n+            {null,    null,    garbageEtag, null},        // 2\n+            {null,    null,    null,        receivedEtag} // 3\n+        };\n+    }\n+\n+    @DataProvider\n+    public static Object[][] downloadRange() {\n+        return new Object[][] {\n+            {0L, null, getDefaultString()},                       // 0\n+            {0L, 5L,   getDefaultString().substring(0, 0 + 5)},   // 1\n+            {3L, 2L,   getDefaultString().substring(3, 3 + 2)},   // 2\n+            {1L, 3L,   getDefaultString().substring(1, 1 + 3)}    // 3\n+        };\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        asyncClient = initializeDefaultAsyncBlobClientBuilder(enableFiddler()).build();\n+        syncClient = initializeDefaultSyncBlobClientBuilder(enableFiddler()).build();\n+    }\n+\n+    @Before\n+    public void setupTest() {\n+        // Create container\n+        containerName = generateResourceName();\n+        syncClient.createContainer(containerName);\n+\n+        // Create blob\n+        blobName = generateResourceName();\n+        String blockId = generateBlockID();\n+        syncClient.stageBlock(containerName, blobName, blockId, getDefaultData(), null);\n+        List<String> blockIds = new ArrayList<>();\n+        blockIds.add(blockId);\n+        syncClient.commitBlockList(containerName, blobName, blockIds, false);\n+    }\n+\n+    @After\n+    public void teardownTest() {\n+        syncClient.deleteContainer(containerName);\n+    }\n+\n+    @Test\n+    public void getPropertiesValues() {\n+        // When\n+        BlobGetPropertiesHeaders response = syncClient.getBlobProperties(containerName, blobName);\n+\n+        // Then\n+        assertNotNull(response.getETag());\n+//        assertFalse(response.getETag().contains(\"\\\"\")); // Quotes should be scrubbed from etag header values\n+        assertNotNull(response.getLastModified());\n+        assertNotNull(response.getRequestId());\n+        assertNotNull(response.getVersion());\n+        assertNotNull(response.getDateProperty());\n+        assertTrue(response.getMetadata() == null || response.getMetadata().isEmpty());\n+        assertEquals(BlobType.BLOCK_BLOB, response.getBlobType());\n+        assertNull(response.getCopyCompletionTime()); // tested in \"copy\"\n+        assertNull(response.getCopyStatusDescription()); // only returned when the service has errors; cannot validate.\n+        assertNull(response.getCopyId()); // tested in \"abort copy\"\n+        assertNull(response.getCopyProgress()); // tested in \"copy\"\n+        assertNull(response.getCopySource()); // tested in \"copy\"\n+        assertNull(response.getCopyStatus()); // tested in \"copy\"\n+        assertTrue(response.isIncrementalCopy() == null || !response.isIncrementalCopy()); // tested in PageBlob.\"start incremental copy\"\n+        assertNull(response.getDestinationSnapshot()); // tested in PageBlob.\"start incremental copy\"\n+        assertNull(response.getLeaseDuration()); // tested in \"acquire lease\"\n+        assertEquals(LeaseStateType.AVAILABLE, response.getLeaseState());\n+        assertEquals(LeaseStatusType.UNLOCKED, response.getLeaseStatus());\n+        assertTrue(response.getContentLength() >= 0);\n+        assertNotNull(response.getContentType());\n+        assertNull(response.getContentMD5());\n+        assertNull(response.getContentEncoding()); // tested in \"set HTTP headers\"\n+        assertNull(response.getContentDisposition()); // tested in \"set HTTP headers\"\n+        assertNull(response.getContentLanguage()); // tested in \"set HTTP headers\"\n+        assertNull(response.getCacheControl()); // tested in \"set HTTP headers\"\n+        assertNull(response.getBlobSequenceNumber()); // tested in PageBlob.\"create sequence number\"\n+        assertEquals(\"bytes\", response.getAcceptRanges());\n+        assertNull(response.getBlobCommittedBlockCount()); // tested in AppendBlob.\"append block\"\n+        assertTrue(response.isServerEncrypted());\n+        assertEquals(AccessTier.HOT.toString(), response.getAccessTier());\n+        assertTrue(response.isAccessTierInferred());\n+        assertNull(response.getArchiveStatus());\n+        assertNotNull(response.getCreationTime());\n+        // Tag Count not in BlobProperties.", "originalCommit": "3ffa8023c135c15e110422aed44013ffc1c7d5ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5Mzk3MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r508093970", "bodyText": "Yeah we can add them when we upgrade to 73", "author": "gapra-msft", "createdAt": "2020-10-19T22:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MjQ1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDIyMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r508100220", "bodyText": "I think we should change the name of this header or possibly remove it", "author": "rickle-msft", "createdAt": "2020-10-19T22:31:02Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlockBlobTest.java", "diffHunk": "@@ -0,0 +1,427 @@\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.core.http.CallbackWithHeader;\n+import com.azure.android.storage.blob.models.BlobErrorCode;\n+import com.azure.android.storage.blob.models.BlobGetPropertiesHeaders;\n+import com.azure.android.storage.blob.models.BlobHttpHeaders;\n+import com.azure.android.storage.blob.models.BlobRequestConditions;\n+import com.azure.android.storage.blob.models.BlobStorageException;\n+import com.azure.android.storage.blob.models.BlockBlobCommitBlockListHeaders;\n+import com.azure.android.storage.blob.models.BlockBlobItem;\n+import com.azure.android.storage.blob.models.BlockBlobStageBlockHeaders;\n+import com.azure.android.storage.blob.models.BlockBlobsCommitBlockListResponse;\n+import com.azure.android.storage.blob.models.BlockBlobsStageBlockResponse;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+\n+import okhttp3.Response;\n+\n+import static com.azure.android.core.common.TestUtils.awaitOnLatch;\n+import static com.azure.android.storage.blob.BlobTestUtils.enableFiddler;\n+import static com.azure.android.storage.blob.BlobTestUtils.garbageEtag;\n+import static com.azure.android.storage.blob.BlobTestUtils.generateBlockID;\n+import static com.azure.android.storage.blob.BlobTestUtils.generateResourceName;\n+import static com.azure.android.storage.blob.BlobTestUtils.getDefaultData;\n+import static com.azure.android.storage.blob.BlobTestUtils.initializeDefaultAsyncBlobClientBuilder;\n+import static com.azure.android.storage.blob.BlobTestUtils.initializeDefaultSyncBlobClientBuilder;\n+import static com.azure.android.storage.blob.BlobTestUtils.newDate;\n+import static com.azure.android.storage.blob.BlobTestUtils.oldDate;\n+import static com.azure.android.storage.blob.BlobTestUtils.receivedEtag;\n+import static com.azure.android.storage.blob.BlobTestUtils.setupMatchCondition;\n+import static com.azure.android.storage.blob.BlobTestUtils.validateBasicHeaders;\n+import static com.azure.android.storage.blob.BlobTestUtils.validateBlobProperties;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(DataProviderRunner.class)\n+@Ignore\n+public class BlockBlobTest {\n+    private String containerName;\n+    private String blobName;\n+    private static StorageBlobAsyncClient asyncClient;\n+    private static StorageBlobClient syncClient;\n+\n+    @DataProvider\n+    public static Object[][] headers() throws NoSuchAlgorithmException {\n+        return new Object[][] {\n+            {null,      null,          null,       null,       null,                                                       null},    // 0\n+            {\"control\", \"disposition\", \"encoding\", \"language\", MessageDigest.getInstance(\"MD5\").digest(getDefaultData()), \"type\"},   // 1\n+        };\n+    }\n+\n+    // TODO: (gapra) Add iftags\n+    @DataProvider\n+    public static Object[][] accessConditionsSuccess() {\n+        return new Object[][] {\n+            {null,    null,    null,         null},       // 0\n+            {oldDate, null,    null,         null},       // 1\n+            {null,    newDate, null,         null},       // 2\n+            {null,    null,    receivedEtag, null},       // 3\n+            {null,    null,    null,         garbageEtag} // 4\n+        };\n+    }\n+\n+    // TODO: (gapra) Add iftags\n+    @DataProvider\n+    public static Object[][] accessConditionsFail() {\n+        return new Object[][] {\n+            {newDate, null,    null,        null},        // 0\n+            {null,    oldDate, null,        null},        // 1\n+            {null,    null,    garbageEtag, null},        // 2\n+            {null,    null,    null,        receivedEtag} // 3\n+        };\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        asyncClient = initializeDefaultAsyncBlobClientBuilder(enableFiddler()).build();\n+        syncClient = initializeDefaultSyncBlobClientBuilder(enableFiddler()).build();\n+    }\n+\n+    @Before\n+    public void setupTest() {\n+        // Create container\n+        containerName = generateResourceName();\n+        syncClient.createContainer(containerName);\n+\n+        // Create blob\n+        blobName = generateResourceName();\n+        String blockId = generateBlockID();\n+        syncClient.stageBlock(containerName, blobName, blockId, getDefaultData(), null);\n+        List<String> blockIds = new ArrayList<>();\n+        blockIds.add(blockId);\n+        syncClient.commitBlockList(containerName, blobName, blockIds, false);\n+    }\n+\n+    @After\n+    public void teardownTest() {\n+        syncClient.deleteContainer(containerName);\n+    }\n+\n+    @Test\n+    public void stageBlock() {\n+        // Setup\n+        String blockId = generateBlockID();\n+\n+        // When\n+        BlockBlobsStageBlockResponse response = syncClient.stageBlockWithRestResponse(containerName, blobName, blockId, getDefaultData(), null, null, null ,null ,null ,null, null);\n+\n+        // Then\n+        assertEquals(201, response.getStatusCode());\n+        BlockBlobStageBlockHeaders headers = response.getDeserializedHeaders();\n+        assertNotNull(headers.getXMsContentCrc64());", "originalCommit": "3ffa8023c135c15e110422aed44013ffc1c7d5ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMjE1Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r508102156", "bodyText": "We can handwrite public types and then this will go away. I will add this to our list", "author": "gapra-msft", "createdAt": "2020-10-19T22:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNjM0MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r508106341", "bodyText": "Added a comment in another test that also referenced this getter", "author": "gapra-msft", "createdAt": "2020-10-19T22:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "075bd1d0707da280c6e71504c840cc9343880ff9", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlockBlobTest.java b/sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlockBlobTest.java\nindex 0304f836f..8f9ebcaa6 100644\n--- a/sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlockBlobTest.java\n+++ b/sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlockBlobTest.java\n\n@@ -139,11 +139,15 @@ public class BlockBlobTest {\n     public void stageBlockMin() {\n         // Setup\n         String blockId = generateBlockID();\n+        List<String> blockIds = new ArrayList<>();\n+        blockIds.add(blockId);\n \n         // When\n         Void response = syncClient.stageBlock(containerName, blobName, blockId, getDefaultData(), null);\n \n         // Then\n+        // This would throw if the above stage block failed.\n+        syncClient.commitBlockList(containerName, blobName, blockIds, true);\n         // When list block support added, check blockBlobClient.listBlocks(BlockListType.ALL).getUncommittedBlocks().size() == 1\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTc4OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r508101789", "bodyText": "You could also maybe do a commit block list since it'll 400 or something if the block wasn't staged.", "author": "rickle-msft", "createdAt": "2020-10-19T22:35:09Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlockBlobTest.java", "diffHunk": "@@ -0,0 +1,427 @@\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.core.http.CallbackWithHeader;\n+import com.azure.android.storage.blob.models.BlobErrorCode;\n+import com.azure.android.storage.blob.models.BlobGetPropertiesHeaders;\n+import com.azure.android.storage.blob.models.BlobHttpHeaders;\n+import com.azure.android.storage.blob.models.BlobRequestConditions;\n+import com.azure.android.storage.blob.models.BlobStorageException;\n+import com.azure.android.storage.blob.models.BlockBlobCommitBlockListHeaders;\n+import com.azure.android.storage.blob.models.BlockBlobItem;\n+import com.azure.android.storage.blob.models.BlockBlobStageBlockHeaders;\n+import com.azure.android.storage.blob.models.BlockBlobsCommitBlockListResponse;\n+import com.azure.android.storage.blob.models.BlockBlobsStageBlockResponse;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+\n+import okhttp3.Response;\n+\n+import static com.azure.android.core.common.TestUtils.awaitOnLatch;\n+import static com.azure.android.storage.blob.BlobTestUtils.enableFiddler;\n+import static com.azure.android.storage.blob.BlobTestUtils.garbageEtag;\n+import static com.azure.android.storage.blob.BlobTestUtils.generateBlockID;\n+import static com.azure.android.storage.blob.BlobTestUtils.generateResourceName;\n+import static com.azure.android.storage.blob.BlobTestUtils.getDefaultData;\n+import static com.azure.android.storage.blob.BlobTestUtils.initializeDefaultAsyncBlobClientBuilder;\n+import static com.azure.android.storage.blob.BlobTestUtils.initializeDefaultSyncBlobClientBuilder;\n+import static com.azure.android.storage.blob.BlobTestUtils.newDate;\n+import static com.azure.android.storage.blob.BlobTestUtils.oldDate;\n+import static com.azure.android.storage.blob.BlobTestUtils.receivedEtag;\n+import static com.azure.android.storage.blob.BlobTestUtils.setupMatchCondition;\n+import static com.azure.android.storage.blob.BlobTestUtils.validateBasicHeaders;\n+import static com.azure.android.storage.blob.BlobTestUtils.validateBlobProperties;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(DataProviderRunner.class)\n+@Ignore\n+public class BlockBlobTest {\n+    private String containerName;\n+    private String blobName;\n+    private static StorageBlobAsyncClient asyncClient;\n+    private static StorageBlobClient syncClient;\n+\n+    @DataProvider\n+    public static Object[][] headers() throws NoSuchAlgorithmException {\n+        return new Object[][] {\n+            {null,      null,          null,       null,       null,                                                       null},    // 0\n+            {\"control\", \"disposition\", \"encoding\", \"language\", MessageDigest.getInstance(\"MD5\").digest(getDefaultData()), \"type\"},   // 1\n+        };\n+    }\n+\n+    // TODO: (gapra) Add iftags\n+    @DataProvider\n+    public static Object[][] accessConditionsSuccess() {\n+        return new Object[][] {\n+            {null,    null,    null,         null},       // 0\n+            {oldDate, null,    null,         null},       // 1\n+            {null,    newDate, null,         null},       // 2\n+            {null,    null,    receivedEtag, null},       // 3\n+            {null,    null,    null,         garbageEtag} // 4\n+        };\n+    }\n+\n+    // TODO: (gapra) Add iftags\n+    @DataProvider\n+    public static Object[][] accessConditionsFail() {\n+        return new Object[][] {\n+            {newDate, null,    null,        null},        // 0\n+            {null,    oldDate, null,        null},        // 1\n+            {null,    null,    garbageEtag, null},        // 2\n+            {null,    null,    null,        receivedEtag} // 3\n+        };\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        asyncClient = initializeDefaultAsyncBlobClientBuilder(enableFiddler()).build();\n+        syncClient = initializeDefaultSyncBlobClientBuilder(enableFiddler()).build();\n+    }\n+\n+    @Before\n+    public void setupTest() {\n+        // Create container\n+        containerName = generateResourceName();\n+        syncClient.createContainer(containerName);\n+\n+        // Create blob\n+        blobName = generateResourceName();\n+        String blockId = generateBlockID();\n+        syncClient.stageBlock(containerName, blobName, blockId, getDefaultData(), null);\n+        List<String> blockIds = new ArrayList<>();\n+        blockIds.add(blockId);\n+        syncClient.commitBlockList(containerName, blobName, blockIds, false);\n+    }\n+\n+    @After\n+    public void teardownTest() {\n+        syncClient.deleteContainer(containerName);\n+    }\n+\n+    @Test\n+    public void stageBlock() {\n+        // Setup\n+        String blockId = generateBlockID();\n+\n+        // When\n+        BlockBlobsStageBlockResponse response = syncClient.stageBlockWithRestResponse(containerName, blobName, blockId, getDefaultData(), null, null, null ,null ,null ,null, null);\n+\n+        // Then\n+        assertEquals(201, response.getStatusCode());\n+        BlockBlobStageBlockHeaders headers = response.getDeserializedHeaders();\n+        assertNotNull(headers.getXMsContentCrc64());\n+        assertNotNull(headers.getRequestId());\n+        assertNotNull(headers.getVersion());\n+        assertNotNull(headers.getDateProperty());\n+        assertTrue(headers.isServerEncrypted() != null && headers.isServerEncrypted());\n+    }\n+\n+    @Test\n+    public void stageBlockMin() {\n+        // Setup\n+        String blockId = generateBlockID();\n+\n+        // When\n+        Void response = syncClient.stageBlock(containerName, blobName, blockId, getDefaultData(), null);\n+\n+        // Then\n+        // When list block support added, check blockBlobClient.listBlocks(BlockListType.ALL).getUncommittedBlocks().size() == 1", "originalCommit": "3ffa8023c135c15e110422aed44013ffc1c7d5ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMzk5OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/407#discussion_r508103999", "bodyText": "Ah yeah", "author": "gapra-msft", "createdAt": "2020-10-19T22:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "075bd1d0707da280c6e71504c840cc9343880ff9", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlockBlobTest.java b/sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlockBlobTest.java\nindex 0304f836f..8f9ebcaa6 100644\n--- a/sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlockBlobTest.java\n+++ b/sdk/storage/azure-storage-blob/src/test/java/com/azure/android/storage/blob/BlockBlobTest.java\n\n@@ -139,11 +139,15 @@ public class BlockBlobTest {\n     public void stageBlockMin() {\n         // Setup\n         String blockId = generateBlockID();\n+        List<String> blockIds = new ArrayList<>();\n+        blockIds.add(blockId);\n \n         // When\n         Void response = syncClient.stageBlock(containerName, blobName, blockId, getDefaultData(), null);\n \n         // Then\n+        // This would throw if the above stage block failed.\n+        syncClient.commitBlockList(containerName, blobName, blockIds, true);\n         // When list block support added, check blockBlobClient.listBlocks(BlockListType.ALL).getUncommittedBlocks().size() == 1\n     }\n \n"}}, {"oid": "075bd1d0707da280c6e71504c840cc9343880ff9", "url": "https://github.com/Azure/azure-sdk-for-android/commit/075bd1d0707da280c6e71504c840cc9343880ff9", "message": "Added commit block call", "committedDate": "2020-10-19T22:44:33Z", "type": "commit"}, {"oid": "5589080b7b0dabb72885537d9d4546eedfca9eff", "url": "https://github.com/Azure/azure-sdk-for-android/commit/5589080b7b0dabb72885537d9d4546eedfca9eff", "message": "Added comment", "committedDate": "2020-10-19T22:45:45Z", "type": "commit"}]}