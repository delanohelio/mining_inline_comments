{"pr_number": 393, "pr_title": "Set tags", "pr_createdAt": "2020-10-07T22:53:56Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/393", "timeline": [{"oid": "1e2a9a92cf9d35e87e30f35dd4822d378ff39794", "url": "https://github.com/Azure/azure-sdk-for-android/commit/1e2a9a92cf9d35e87e30f35dd4822d378ff39794", "message": "Added code for Blob getTags", "committedDate": "2020-10-07T16:18:18Z", "type": "commit"}, {"oid": "b76016c62e9cf457505267e5fbc9e17d7fcd6e43", "url": "https://github.com/Azure/azure-sdk-for-android/commit/b76016c62e9cf457505267e5fbc9e17d7fcd6e43", "message": "Added tests for getTags", "committedDate": "2020-10-07T17:24:46Z", "type": "commit"}, {"oid": "1d94399a8acd573ca2e844882286425c1360f96c", "url": "https://github.com/Azure/azure-sdk-for-android/commit/1d94399a8acd573ca2e844882286425c1360f96c", "message": "Added tags header", "committedDate": "2020-10-07T21:20:53Z", "type": "commit"}, {"oid": "e0505cbc35747af858c69b5b90cec8d98d4dc96e", "url": "https://github.com/Azure/azure-sdk-for-android/commit/e0505cbc35747af858c69b5b90cec8d98d4dc96e", "message": "Started on set tags", "committedDate": "2020-10-07T21:43:58Z", "type": "commit"}, {"oid": "deaa956c61d86f4fbf355e2f33f718ee6a1e1e90", "url": "https://github.com/Azure/azure-sdk-for-android/commit/deaa956c61d86f4fbf355e2f33f718ee6a1e1e90", "message": "Partway through tests", "committedDate": "2020-10-07T22:48:55Z", "type": "commit"}, {"oid": "8cb62d1c4c3e4e826634c9d5b327911ddf07ea32", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8cb62d1c4c3e4e826634c9d5b327911ddf07ea32", "message": "Finished tests", "committedDate": "2020-10-07T22:51:54Z", "type": "commit"}, {"oid": "7133cec182e53449486d6c3f1b8ee0327e9d0171", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7133cec182e53449486d6c3f1b8ee0327e9d0171", "message": "Formatting", "committedDate": "2020-10-08T16:59:29Z", "type": "commit"}, {"oid": "1edc8c4ce9a8cea99f7d4afdb36d0c4f3764c819", "url": "https://github.com/Azure/azure-sdk-for-android/commit/1edc8c4ce9a8cea99f7d4afdb36d0c4f3764c819", "message": "Fixed body serialization", "committedDate": "2020-10-08T17:17:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4ODU5OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r501888599", "bodyText": "yes, this is needed for android :) a bit different from Java RestProxy.", "author": "anuchandy", "createdAt": "2020-10-08T17:25:39Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1115,6 +1115,20 @@ private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerNa\n         BlobTags blobTags = new BlobTags();\n         blobTags.setBlobTagSet(blobTagSet);\n \n+        RequestBody tagsBody;\n+        try {\n+            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n+                serializerAdapter.serialize(blobTags, SerializerFormat.XML));", "originalCommit": "1edc8c4ce9a8cea99f7d4afdb36d0c4f3764c819", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e9eed8fd2d0c05c270684c84915748231702d4e", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 54550e39a..fa9ac9956 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n\n@@ -1093,116 +1137,6 @@ final class StorageBlobServiceImpl {\n         }\n     }\n \n-    private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerName,\n-                                                                  String blobName,\n-                                                                  Integer timeout,\n-                                                                  String versionId,\n-                                                                  String iftags,\n-                                                                  Map<String, String> tags,\n-                                                                  String version,\n-                                                                  String requestId,\n-                                                                  CancellationToken cancellationToken,\n-                                                                  CallbackWithHeader<Void, BlobSetTagsHeaders> callback) {\n-\n-        cancellationToken = cancellationToken == null ? CancellationToken.NONE : cancellationToken;\n-\n-        final String comp = \"tags\";\n-\n-        List<BlobTag> blobTagSet = new ArrayList<>(tags.size());\n-        for (Map.Entry<String, String> entry : tags.entrySet()) {\n-            blobTagSet.add(new BlobTag().setKey(entry.getKey()).setValue(entry.getValue()));\n-        }\n-        BlobTags blobTags = new BlobTags();\n-        blobTags.setBlobTagSet(blobTagSet);\n-\n-        RequestBody tagsBody;\n-        try {\n-            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n-                serializerAdapter.serialize(blobTags, SerializerFormat.XML));\n-        } catch (IOException ioe) {\n-            if (callback != null) {\n-                callback.onFailure(ioe, null);\n-\n-                return null;\n-            } else {\n-                throw new RuntimeException(ioe);\n-            }\n-        }\n-\n-        Call<ResponseBody> call = service.setBlobTags(containerName,\n-            blobName,\n-            timeout,\n-            versionId,\n-            null, // TODO: calculate Md5?\n-            null,\n-            iftags,\n-            XMS_VERSION,\n-            requestId,\n-            tagsBody,\n-            comp\n-        );\n-\n-        ((CancellationTokenImpl) cancellationToken).registerOnCancel(() -> {\n-            call.cancel();\n-        });\n-\n-        if (callback != null) {\n-            executeCall(call, new retrofit2.Callback<ResponseBody>() {\n-                @Override\n-                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {\n-                    if (response.isSuccessful()) {\n-                        if (response.code() == 200) {\n-                            BlobSetTagsHeaders typedHeaders = deserializeHeaders(response.headers(),\n-                                BlobSetTagsHeaders.class);\n-\n-                            callback.onSuccess(null,\n-                                typedHeaders,\n-                                response.raw());\n-                        } else {\n-                            String strContent = readAsString(response.body());\n-\n-                            callback.onFailure(new BlobStorageException(strContent, response.raw()), response.raw());\n-                        }\n-                    } else {\n-                        String strContent = readAsString(response.errorBody());\n-\n-                        callback.onFailure(new BlobStorageException(strContent, response.raw()), response.raw());\n-                    }\n-                }\n-\n-                @Override\n-                public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {\n-                    callback.onFailure(t, null);\n-                }\n-            });\n-\n-            return null;\n-        } else {\n-            Response<ResponseBody> response = executeCall(call);\n-\n-            if (response.isSuccessful()) {\n-                if (response.code() == 200) {\n-                    BlobSetTagsHeaders deserializedHeaders = deserializeHeaders(response.headers(),\n-                        BlobSetTagsHeaders.class);\n-\n-                    BlobSetTagsResponse result = new BlobSetTagsResponse(response.raw().request(),\n-                        response.code(),\n-                        response.headers(),\n-                        null,\n-                        deserializedHeaders);\n-\n-                    return result;\n-                } else {\n-                    throw new BlobStorageException(null, response.raw());\n-                }\n-            } else {\n-                String strContent = readAsString(response.errorBody());\n-\n-                throw new BlobStorageException(strContent, response.raw());\n-            }\n-        }\n-    }\n-\n     private BlobDownloadResponse downloadWithRestResponseIntern(String containerName,\n                                                                 String blobName,\n                                                                 String snapshot,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MDkxNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r501890914", "bodyText": "Seems as per swagger, valid response code is 204", "author": "anuchandy", "createdAt": "2020-10-08T17:29:23Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1013,6 +1093,116 @@ public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n         }\n     }\n \n+    private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerName,\n+                                                                  String blobName,\n+                                                                  Integer timeout,\n+                                                                  String versionId,\n+                                                                  String iftags,\n+                                                                  Map<String, String> tags,\n+                                                                  String version,\n+                                                                  String requestId,\n+                                                                  CancellationToken cancellationToken,\n+                                                                  CallbackWithHeader<Void, BlobSetTagsHeaders> callback) {\n+\n+        cancellationToken = cancellationToken == null ? CancellationToken.NONE : cancellationToken;\n+\n+        final String comp = \"tags\";\n+\n+        List<BlobTag> blobTagSet = new ArrayList<>(tags.size());\n+        for (Map.Entry<String, String> entry : tags.entrySet()) {\n+            blobTagSet.add(new BlobTag().setKey(entry.getKey()).setValue(entry.getValue()));\n+        }\n+        BlobTags blobTags = new BlobTags();\n+        blobTags.setBlobTagSet(blobTagSet);\n+\n+        RequestBody tagsBody;\n+        try {\n+            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n+                serializerAdapter.serialize(blobTags, SerializerFormat.XML));\n+        } catch (IOException ioe) {\n+            if (callback != null) {\n+                callback.onFailure(ioe, null);\n+\n+                return null;\n+            } else {\n+                throw new RuntimeException(ioe);\n+            }\n+        }\n+\n+        Call<ResponseBody> call = service.setBlobTags(containerName,\n+            blobName,\n+            timeout,\n+            versionId,\n+            null, // TODO: calculate Md5?\n+            null,\n+            iftags,\n+            XMS_VERSION,\n+            requestId,\n+            tagsBody,\n+            comp\n+        );\n+\n+        ((CancellationTokenImpl) cancellationToken).registerOnCancel(() -> {\n+            call.cancel();\n+        });\n+\n+        if (callback != null) {\n+            executeCall(call, new retrofit2.Callback<ResponseBody>() {\n+                @Override\n+                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() == 200) {", "originalCommit": "1edc8c4ce9a8cea99f7d4afdb36d0c4f3764c819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNzYxMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r501927613", "bodyText": "Nice catch :)", "author": "rickle-msft", "createdAt": "2020-10-08T18:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MDkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "0e9eed8fd2d0c05c270684c84915748231702d4e", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 54550e39a..fa9ac9956 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n\n@@ -1093,116 +1137,6 @@ final class StorageBlobServiceImpl {\n         }\n     }\n \n-    private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerName,\n-                                                                  String blobName,\n-                                                                  Integer timeout,\n-                                                                  String versionId,\n-                                                                  String iftags,\n-                                                                  Map<String, String> tags,\n-                                                                  String version,\n-                                                                  String requestId,\n-                                                                  CancellationToken cancellationToken,\n-                                                                  CallbackWithHeader<Void, BlobSetTagsHeaders> callback) {\n-\n-        cancellationToken = cancellationToken == null ? CancellationToken.NONE : cancellationToken;\n-\n-        final String comp = \"tags\";\n-\n-        List<BlobTag> blobTagSet = new ArrayList<>(tags.size());\n-        for (Map.Entry<String, String> entry : tags.entrySet()) {\n-            blobTagSet.add(new BlobTag().setKey(entry.getKey()).setValue(entry.getValue()));\n-        }\n-        BlobTags blobTags = new BlobTags();\n-        blobTags.setBlobTagSet(blobTagSet);\n-\n-        RequestBody tagsBody;\n-        try {\n-            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n-                serializerAdapter.serialize(blobTags, SerializerFormat.XML));\n-        } catch (IOException ioe) {\n-            if (callback != null) {\n-                callback.onFailure(ioe, null);\n-\n-                return null;\n-            } else {\n-                throw new RuntimeException(ioe);\n-            }\n-        }\n-\n-        Call<ResponseBody> call = service.setBlobTags(containerName,\n-            blobName,\n-            timeout,\n-            versionId,\n-            null, // TODO: calculate Md5?\n-            null,\n-            iftags,\n-            XMS_VERSION,\n-            requestId,\n-            tagsBody,\n-            comp\n-        );\n-\n-        ((CancellationTokenImpl) cancellationToken).registerOnCancel(() -> {\n-            call.cancel();\n-        });\n-\n-        if (callback != null) {\n-            executeCall(call, new retrofit2.Callback<ResponseBody>() {\n-                @Override\n-                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {\n-                    if (response.isSuccessful()) {\n-                        if (response.code() == 200) {\n-                            BlobSetTagsHeaders typedHeaders = deserializeHeaders(response.headers(),\n-                                BlobSetTagsHeaders.class);\n-\n-                            callback.onSuccess(null,\n-                                typedHeaders,\n-                                response.raw());\n-                        } else {\n-                            String strContent = readAsString(response.body());\n-\n-                            callback.onFailure(new BlobStorageException(strContent, response.raw()), response.raw());\n-                        }\n-                    } else {\n-                        String strContent = readAsString(response.errorBody());\n-\n-                        callback.onFailure(new BlobStorageException(strContent, response.raw()), response.raw());\n-                    }\n-                }\n-\n-                @Override\n-                public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {\n-                    callback.onFailure(t, null);\n-                }\n-            });\n-\n-            return null;\n-        } else {\n-            Response<ResponseBody> response = executeCall(call);\n-\n-            if (response.isSuccessful()) {\n-                if (response.code() == 200) {\n-                    BlobSetTagsHeaders deserializedHeaders = deserializeHeaders(response.headers(),\n-                        BlobSetTagsHeaders.class);\n-\n-                    BlobSetTagsResponse result = new BlobSetTagsResponse(response.raw().request(),\n-                        response.code(),\n-                        response.headers(),\n-                        null,\n-                        deserializedHeaders);\n-\n-                    return result;\n-                } else {\n-                    throw new BlobStorageException(null, response.raw());\n-                }\n-            } else {\n-                String strContent = readAsString(response.errorBody());\n-\n-                throw new BlobStorageException(strContent, response.raw());\n-            }\n-        }\n-    }\n-\n     private BlobDownloadResponse downloadWithRestResponseIntern(String containerName,\n                                                                 String blobName,\n                                                                 String snapshot,\n"}}, {"oid": "0e9eed8fd2d0c05c270684c84915748231702d4e", "url": "https://github.com/Azure/azure-sdk-for-android/commit/0e9eed8fd2d0c05c270684c84915748231702d4e", "message": "Added a ModelHelper", "committedDate": "2020-10-08T17:54:21Z", "type": "commit"}, {"oid": "cd2de7ff4bee2b20b6d45e08f4d127223f75c89b", "url": "https://github.com/Azure/azure-sdk-for-android/commit/cd2de7ff4bee2b20b6d45e08f4d127223f75c89b", "message": "Started on create container", "committedDate": "2020-10-09T00:06:58Z", "type": "commit"}, {"oid": "3e1a8074ebf302b11352b46e3e9cf305037bc1f6", "url": "https://github.com/Azure/azure-sdk-for-android/commit/3e1a8074ebf302b11352b46e3e9cf305037bc1f6", "message": "Added support to delete container", "committedDate": "2020-10-09T18:41:29Z", "type": "commit"}, {"oid": "7fd2db40775cd27af30e8e3d4a385b074be54728", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7fd2db40775cd27af30e8e3d4a385b074be54728", "message": "Finished createContainer", "committedDate": "2020-10-09T18:57:58Z", "type": "commit"}, {"oid": "58d2a0d674e12be953f4fc9b30021e8d51b8c5af", "url": "https://github.com/Azure/azure-sdk-for-android/commit/58d2a0d674e12be953f4fc9b30021e8d51b8c5af", "message": "Updated test", "committedDate": "2020-10-09T20:19:27Z", "type": "commit"}, {"oid": "8042b1d882af59f48bfd2c9233ffb789893f29b0", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8042b1d882af59f48bfd2c9233ffb789893f29b0", "message": "Exposed BlobRequestConditions publically", "committedDate": "2020-10-09T20:28:29Z", "type": "commit"}, {"oid": "368f15356e57f681bb1635e4aed0ee44c4789290", "url": "https://github.com/Azure/azure-sdk-for-android/commit/368f15356e57f681bb1635e4aed0ee44c4789290", "message": "Started setting up ways to get creds and clients", "committedDate": "2020-10-09T23:38:27Z", "type": "commit"}, {"oid": "34329b725b7f423436b09b35116080832ce3ade1", "url": "https://github.com/Azure/azure-sdk-for-android/commit/34329b725b7f423436b09b35116080832ce3ade1", "message": "Merge branch 'testInfra' into createContainer", "committedDate": "2020-10-12T18:46:07Z", "type": "commit"}, {"oid": "326f1d06598ff9e57a9179e6096fe68ee40c6ebd", "url": "https://github.com/Azure/azure-sdk-for-android/commit/326f1d06598ff9e57a9179e6096fe68ee40c6ebd", "message": "Started on createContainer network tests", "committedDate": "2020-10-12T19:21:19Z", "type": "commit"}, {"oid": "d442292112b7d5dbdc9789ffa222b9495aff0913", "url": "https://github.com/Azure/azure-sdk-for-android/commit/d442292112b7d5dbdc9789ffa222b9495aff0913", "message": "Merge remote-tracking branch 'gauri/storage/deleteContainer' into createContainer", "committedDate": "2020-10-12T19:23:36Z", "type": "commit"}, {"oid": "a838f0f2ce20ab11120c4ebb97981be695ec1eca", "url": "https://github.com/Azure/azure-sdk-for-android/commit/a838f0f2ce20ab11120c4ebb97981be695ec1eca", "message": "Added support for get container properties", "committedDate": "2020-10-12T20:43:32Z", "type": "commit"}, {"oid": "ebd01c2d9cabfb6853fbb3e05b4db00c2732c0a2", "url": "https://github.com/Azure/azure-sdk-for-android/commit/ebd01c2d9cabfb6853fbb3e05b4db00c2732c0a2", "message": "Working on deleteContainer tests", "committedDate": "2020-10-12T20:47:39Z", "type": "commit"}, {"oid": "95bfecb4dd10691bb8656971605b59733b723090", "url": "https://github.com/Azure/azure-sdk-for-android/commit/95bfecb4dd10691bb8656971605b59733b723090", "message": "Merge remote-tracking branch 'gauri/storage/getContainerProperties' into createContainer", "committedDate": "2020-10-12T20:50:47Z", "type": "commit"}, {"oid": "d891da875b3a634f5fcc7d6a7cb5e8607d771a4f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/d891da875b3a634f5fcc7d6a7cb5e8607d771a4f", "message": "Added live tests for create", "committedDate": "2020-10-13T00:00:30Z", "type": "commit"}, {"oid": "183e72276afceee0a4e993884fb018675760d5ae", "url": "https://github.com/Azure/azure-sdk-for-android/commit/183e72276afceee0a4e993884fb018675760d5ae", "message": "Added a bunch of network tests for container apis", "committedDate": "2020-10-14T03:32:42Z", "type": "commit"}, {"oid": "24ca631081e4a802f484b049fa859d1b6259f0ae", "url": "https://github.com/Azure/azure-sdk-for-android/commit/24ca631081e4a802f484b049fa859d1b6259f0ae", "message": "Fixed some formatting", "committedDate": "2020-10-14T16:25:52Z", "type": "commit"}, {"oid": "7492ee526ecb5fc3c23cff1294d783ea1f2e8991", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7492ee526ecb5fc3c23cff1294d783ea1f2e8991", "message": "Added some blob tests", "committedDate": "2020-10-14T17:05:05Z", "type": "commit"}, {"oid": "cc7d944e483eac9f8dd49be03b4e4ea955a18840", "url": "https://github.com/Azure/azure-sdk-for-android/commit/cc7d944e483eac9f8dd49be03b4e4ea955a18840", "message": "Merge remote-tracking branch 'rickle-msft/createContainer' into blobTests", "committedDate": "2020-10-14T17:10:00Z", "type": "commit"}, {"oid": "7155179db78c8a6f14c9030aced61cb7a3bacf3d", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7155179db78c8a6f14c9030aced61cb7a3bacf3d", "message": "Added some more commit block list tests", "committedDate": "2020-10-14T19:20:02Z", "type": "commit"}, {"oid": "6929a9ab8723590c57f36d539ab63dab48c114c7", "url": "https://github.com/Azure/azure-sdk-for-android/commit/6929a9ab8723590c57f36d539ab63dab48c114c7", "message": "Added more block blob tests", "committedDate": "2020-10-14T20:36:25Z", "type": "commit"}, {"oid": "de294c0d245bf0d0e2c051c4d73eb2ed2132e21c", "url": "https://github.com/Azure/azure-sdk-for-android/commit/de294c0d245bf0d0e2c051c4d73eb2ed2132e21c", "message": "Added Access condition tests for blob delete", "committedDate": "2020-10-14T20:59:21Z", "type": "commit"}, {"oid": "c7aebfad42d3c60e10f6dfff64b6c56de63f77d8", "url": "https://github.com/Azure/azure-sdk-for-android/commit/c7aebfad42d3c60e10f6dfff64b6c56de63f77d8", "message": "Merge branch 'createContainer' into setTags", "committedDate": "2020-10-15T18:44:30Z", "type": "commit"}, {"oid": "71c9fc37fb10bb4c5e5f38e73511d1d505c47679", "url": "https://github.com/Azure/azure-sdk-for-android/commit/71c9fc37fb10bb4c5e5f38e73511d1d505c47679", "message": "Merge remote-tracking branch 'gauri/blobTests' into setTags", "committedDate": "2020-10-15T18:44:39Z", "type": "commit"}, {"oid": "e604e10af1fc2a2186486afc79d7a45c9491ea4a", "url": "https://github.com/Azure/azure-sdk-for-android/commit/e604e10af1fc2a2186486afc79d7a45c9491ea4a", "message": "Merge remote-tracking branch 'gauri/storage/getTags' into setTags", "committedDate": "2020-10-15T19:05:06Z", "type": "commit"}, {"oid": "1fa3a183375852411bf810a70b8d8986c13d5dae", "url": "https://github.com/Azure/azure-sdk-for-android/commit/1fa3a183375852411bf810a70b8d8986c13d5dae", "message": "Added setTags network tests", "committedDate": "2020-10-15T19:26:44Z", "type": "commit"}, {"oid": "18794bc4744a1a9fb60671e89560792bd15d9e38", "url": "https://github.com/Azure/azure-sdk-for-android/commit/18794bc4744a1a9fb60671e89560792bd15d9e38", "message": "Network tests", "committedDate": "2020-10-15T21:38:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMzAyMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r509703023", "bodyText": "I don't know why the PR includes all a ton of other things, I guess I should just ignore them? I assume this PR only introduces the setBlobTags operations, correct?", "author": "vcolin7", "createdAt": "2020-10-21T21:14:33Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java", "diffHunk": "@@ -236,6 +249,140 @@ public void cancel(Context context, long transferId) {\n             .cancel(transferId);\n     }\n \n+    /**\n+     * Creates a new container within a storage account. If a container with the same name already exists, the operation\n+     * fails.\n+     *\n+     * @param containerName The container name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    public void createContainer(String containerName,", "originalCommit": "18794bc4744a1a9fb60671e89560792bd15d9e38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMTYyNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r510421625", "bodyText": "correct", "author": "rickle-msft", "createdAt": "2020-10-22T19:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMzAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyODY4MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r510428681", "bodyText": "correct", "author": "rickle-msft", "createdAt": "2020-10-22T20:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMzAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "a59aa3cdc4ddef48955aeba6278dc245c5a5eef1", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java\nindex 5784fc9ff..b6be38f93 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobAsyncClient.java\n\n@@ -298,91 +297,6 @@ public class StorageBlobAsyncClient {\n             callback);\n     }\n \n-    /**\n-     * Deletes a container.\n-     *\n-     * @param containerName The container name.\n-     * @param callback      Callback that receives the response.\n-     */\n-    public void deleteContainer(String containerName,\n-                                CallbackWithHeader<Void, ContainerDeleteHeaders> callback) {\n-        storageBlobServiceClient.deleteContainer(containerName,\n-            callback);\n-    }\n-\n-    /**\n-     * Deletes a container\n-     *\n-     * @param containerName     The container name.\n-     * @param timeout           The timeout parameter is expressed in seconds. For more information, see\n-     *                          &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param requestConditions {@link BlobRequestConditions}\n-     * @param requestId         Provides a client-generated, opaque value with a 1 KB character limit that is\n-     *                          recorded in the analytics logs when storage analytics logging is enabled.\n-     * @param cancellationToken The token to request cancellation.\n-     * @param callback          Callback that receives the response.\n-     */\n-    public void deleteContainer(String containerName,\n-                                Integer timeout,\n-                                String version,\n-                                BlobRequestConditions requestConditions,\n-                                String requestId,\n-                                CancellationToken cancellationToken,\n-                                CallbackWithHeader<Void, ContainerDeleteHeaders> callback) {\n-        storageBlobServiceClient.deleteContainer(containerName,\n-            timeout,\n-            version,\n-            requestConditions,\n-            requestId,\n-            cancellationToken,\n-            callback);\n-    }\n-\n-    /**\n-     * Gets the container's properties.\n-     *\n-     * @param containerName The container name.\n-     * @param callback      Callback that receives the response.\n-     */\n-    public void getContainerProperties(String containerName,\n-                                       CallbackWithHeader<Void, ContainerGetPropertiesHeaders> callback) {\n-        storageBlobServiceClient.getContainerProperties(containerName,\n-            callback);\n-    }\n-\n-    /**\n-     * Gets the container's properties.\n-     *\n-     * @param containerName         The container name.\n-     * @param timeout               The timeout parameter is expressed in seconds. For more information, see\n-     *                              &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n-     * @param version               Specifies the version of the operation to use for this request.\n-     * @param blobRequestConditions Object that contains values which will restrict the successful operation of a\n-     *                              variety of requests to the conditions present. These conditions are entirely\n-     *                              optional.\n-     * @param requestId             Provides a client-generated, opaque value with a 1 KB character limit that is\n-     *                              recorded in the analytics logs when storage analytics logging is enabled.\n-     * @param cancellationToken     The token to request cancellation.\n-     * @param callback              Callback that receives the response.\n-     */\n-    public void getContainerProperties(String containerName,\n-                                       Integer timeout,\n-                                       String version,\n-                                       BlobRequestConditions blobRequestConditions,\n-                                       String requestId,\n-                                       CancellationToken cancellationToken,\n-                                       CallbackWithHeader<Void, ContainerGetPropertiesHeaders> callback) {\n-        blobRequestConditions = blobRequestConditions == null ? new BlobRequestConditions() : blobRequestConditions;\n-\n-        storageBlobServiceClient.getContainerProperties(containerName,\n-            timeout,\n-            version,\n-            blobRequestConditions.getLeaseId(),\n-            requestId,\n-            cancellationToken,\n-            callback);\n-    }\n-\n     /**\n      * Gets a list of blobs identified by a page id in a given container.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyODk4NQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r509728985", "bodyText": "Is this the newest Storage version? Where do we check this? Actually, I see different versions than what we had here.", "author": "vcolin7", "createdAt": "2020-10-21T21:48:14Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -59,20 +77,224 @@\n import retrofit2.http.PUT;\n import retrofit2.http.Path;\n import retrofit2.http.Query;\n+import retrofit2.http.Tag;\n \n /**\n  * PACKAGE PRIVATE CLASS AND METHODS\n  */\n final class StorageBlobServiceImpl {\n     private final StorageBlobService service;\n     private final SerializerAdapter serializerAdapter;\n-    private static String XMS_VERSION = \"2019-02-02\";\n+    private static String XMS_VERSION = \"2019-12-12\";", "originalCommit": "18794bc4744a1a9fb60671e89560792bd15d9e38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyODUzMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r510428530", "bodyText": "The link you shared is for the resource manager/management plane. The version update here is for the data plane. It's not quite the latest, but it's the version that enabled tags.", "author": "rickle-msft", "createdAt": "2020-10-22T20:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyODk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a59aa3cdc4ddef48955aeba6278dc245c5a5eef1", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 6b67fc1c9..0060608ff 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n\n@@ -85,7 +90,7 @@ import retrofit2.http.Tag;\n final class StorageBlobServiceImpl {\n     private final StorageBlobService service;\n     private final SerializerAdapter serializerAdapter;\n-    private static String XMS_VERSION = \"2019-12-12\";\n+    private static String XMS_VERSION = \"2019-02-02\";\n \n     StorageBlobServiceImpl(ServiceClient serviceClient) {\n         this.service = serviceClient.getRetrofit().create(StorageBlobService.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczMjEyNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r509732127", "bodyText": "We probably need to consider this in the MD5 PR.", "author": "vcolin7", "createdAt": "2020-10-21T21:52:52Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -1013,6 +1660,119 @@ public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {\n         }\n     }\n \n+    private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerName,\n+                                                                  String blobName,\n+                                                                  Integer timeout,\n+                                                                  String versionId,\n+                                                                  String iftags,\n+                                                                  Map<String, String> tags,\n+                                                                  String version,\n+                                                                  String requestId,\n+                                                                  CancellationToken cancellationToken,\n+                                                                  CallbackWithHeader<Void, BlobSetTagsHeaders> callback) {\n+\n+        cancellationToken = cancellationToken == null ? CancellationToken.NONE : cancellationToken;\n+\n+        final String comp = \"tags\";\n+\n+        List<BlobTag> blobTagSet = null;\n+        if (tags != null) {\n+            blobTagSet = new ArrayList<>(tags.size());\n+            for (Map.Entry<String, String> entry : tags.entrySet()) {\n+                blobTagSet.add(new BlobTag().setKey(entry.getKey()).setValue(entry.getValue()));\n+            }\n+        }\n+        BlobTags blobTags = new BlobTags();\n+        blobTags.setBlobTagSet(blobTagSet);\n+\n+        RequestBody tagsBody;\n+        try {\n+            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n+                serializerAdapter.serialize(blobTags, SerializerFormat.XML));\n+        } catch (IOException ioe) {\n+            if (callback != null) {\n+                callback.onFailure(ioe, null);\n+\n+                return null;\n+            } else {\n+                throw new RuntimeException(ioe);\n+            }\n+        }\n+\n+        Call<ResponseBody> call = service.setBlobTags(containerName,\n+            blobName,\n+            timeout,\n+            versionId,\n+            null, // TODO: calculate Md5?", "originalCommit": "18794bc4744a1a9fb60671e89560792bd15d9e38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyOTgxMg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/393#discussion_r510429812", "bodyText": "On second thought, this isn't actually possible for us at this point because it's the md5 of the payload, but we can't calculate that until after the body is serialized, at which point it's out of our control. We could consider adding an interceptor that does that, but it would be a separate PR I think.", "author": "rickle-msft", "createdAt": "2020-10-22T20:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczMjEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "a59aa3cdc4ddef48955aeba6278dc245c5a5eef1", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex 6b67fc1c9..0060608ff 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n\n@@ -1660,55 +2187,36 @@ final class StorageBlobServiceImpl {\n         }\n     }\n \n-    private BlobSetTagsResponse setBlobTagsWithRestResponseIntern(String containerName,\n+    private BlobSetTierResponse setBlobTierWithRestResponseIntern(String containerName,\n                                                                   String blobName,\n-                                                                  Integer timeout,\n+                                                                  AccessTier tier,\n+                                                                  String snapshot,\n                                                                   String versionId,\n-                                                                  String iftags,\n-                                                                  Map<String, String> tags,\n+                                                                  Integer timeout,\n                                                                   String version,\n+                                                                  RehydratePriority rehydratePriority,\n                                                                   String requestId,\n+                                                                  String leaseId,\n+                                                                  String ifTags,\n                                                                   CancellationToken cancellationToken,\n-                                                                  CallbackWithHeader<Void, BlobSetTagsHeaders> callback) {\n+                                                                  CallbackWithHeader<Void, BlobSetTierHeaders> callback) {\n+        Objects.requireNonNull(tier);\n \n         cancellationToken = cancellationToken == null ? CancellationToken.NONE : cancellationToken;\n \n-        final String comp = \"tags\";\n-\n-        List<BlobTag> blobTagSet = null;\n-        if (tags != null) {\n-            blobTagSet = new ArrayList<>(tags.size());\n-            for (Map.Entry<String, String> entry : tags.entrySet()) {\n-                blobTagSet.add(new BlobTag().setKey(entry.getKey()).setValue(entry.getValue()));\n-            }\n-        }\n-        BlobTags blobTags = new BlobTags();\n-        blobTags.setBlobTagSet(blobTagSet);\n-\n-        RequestBody tagsBody;\n-        try {\n-            tagsBody = RequestBody.create(MediaType.get(\"application/xml; charset=utf-8\"),\n-                serializerAdapter.serialize(blobTags, SerializerFormat.XML));\n-        } catch (IOException ioe) {\n-            if (callback != null) {\n-                callback.onFailure(ioe, null);\n-\n-                return null;\n-            } else {\n-                throw new RuntimeException(ioe);\n-            }\n-        }\n+        final String comp = \"tier\";\n \n-        Call<ResponseBody> call = service.setBlobTags(containerName,\n+        Call<Void> call = service.setBlobTier(containerName,\n             blobName,\n-            timeout,\n+            snapshot,\n             versionId,\n-            null, // TODO: calculate Md5?\n-            null,\n-            iftags,\n-            XMS_VERSION,\n+            timeout,\n+            XMS_VERSION, // TODO: Replace with 'version'.\n+            tier,\n+            rehydratePriority,\n             requestId,\n-            tagsBody,\n+            leaseId,\n+            ifTags,\n             comp\n         );\n \n"}}, {"oid": "a59aa3cdc4ddef48955aeba6278dc245c5a5eef1", "url": "https://github.com/Azure/azure-sdk-for-android/commit/a59aa3cdc4ddef48955aeba6278dc245c5a5eef1", "message": "Merge remote-tracking branch 'upstream/master' into setTags", "committedDate": "2020-10-22T19:04:52Z", "type": "commit"}, {"oid": "2c6a41d50e8788f6412f54ef0b881473404b3ab5", "url": "https://github.com/Azure/azure-sdk-for-android/commit/2c6a41d50e8788f6412f54ef0b881473404b3ab5", "message": "Fixed a typo in a test", "committedDate": "2020-10-22T19:49:21Z", "type": "commit"}, {"oid": "5a67fa00d10e352311e8c93700b8b7447d60b2cc", "url": "https://github.com/Azure/azure-sdk-for-android/commit/5a67fa00d10e352311e8c93700b8b7447d60b2cc", "message": "Fixed an error in setTags intern method", "committedDate": "2020-10-22T20:15:10Z", "type": "commit"}, {"oid": "507d7df87fe6861c328fbaeacf720868591b554e", "url": "https://github.com/Azure/azure-sdk-for-android/commit/507d7df87fe6861c328fbaeacf720868591b554e", "message": "Some test fixes", "committedDate": "2020-10-22T21:04:26Z", "type": "commit"}, {"oid": "59ef01f6c0609804484461b5c64fb39dbad63976", "url": "https://github.com/Azure/azure-sdk-for-android/commit/59ef01f6c0609804484461b5c64fb39dbad63976", "message": "Fixed some tests", "committedDate": "2020-10-22T21:12:26Z", "type": "commit"}]}