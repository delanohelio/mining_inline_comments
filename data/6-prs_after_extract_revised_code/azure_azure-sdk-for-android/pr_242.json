{"pr_number": 242, "pr_title": "Javadoc updates after local review of generated docs.", "pr_createdAt": "2020-06-09T16:49:22Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/242", "timeline": [{"oid": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7e7b6a7e98ff40dd4e889b521336a901292cdc45", "message": "Add missing javadoc for stage and commit block APIs in StorageBlobClient.", "committedDate": "2020-06-09T16:46:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODU2MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438388561", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param blockContent  the block content in bytes\n          \n          \n            \n                 * @param contentMd5    the transactional md5 for the body, to be validated by the service.\n          \n          \n            \n                 * @param blockContent  The block content in bytes.\n          \n          \n            \n                 * @param contentMd5    The transactional MD5 for the body, to be validated by the service.", "author": "vcolin7", "createdAt": "2020-06-10T20:26:59Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -399,6 +406,17 @@ public ServiceCall downloadWithRestResponse(String containerName,\n             callback);\n     }\n \n+    /**\n+     * Creates a new block to be committed as part of a blob.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n+     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n+     *                      for the base64BlockId parameter must be the same size for each block.\n+     * @param blockContent  the block content in bytes\n+     * @param contentMd5    the transactional md5 for the body, to be validated by the service.", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdde3b146048ebbfeda80c5606682e962011d952", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..7cf53ab6c 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -414,8 +451,8 @@ public class StorageBlobClient {\n      * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n      *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n      *                      for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent  the block content in bytes\n-     * @param contentMd5    the transactional md5 for the body, to be validated by the service.\n+     * @param blockContent  The block content in bytes.\n+     * @param contentMd5    The transactional MD5 for the body, to be validated by the service.\n      */\n     public Void stageBlock(String containerName,\n                            String blobName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODcyNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438388725", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param blockContent  the block content in bytes\n          \n          \n            \n                 * @param contentMd5    the transactional md5 for the body, to be validated by the service.\n          \n          \n            \n                 * @param blockContent  The block content in bytes.\n          \n          \n            \n                 * @param contentMd5    The transactional MD5 for the body, to be validated by the service.", "author": "vcolin7", "createdAt": "2020-06-10T20:27:20Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -411,6 +429,19 @@ public Void stageBlock(String containerName,\n             contentMd5);\n     }\n \n+    /**\n+     * Creates a new block to be committed as part of a blob.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n+     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n+     *                      for the base64BlockId parameter must be the same size for each block.\n+     * @param blockContent  the block content in bytes\n+     * @param contentMd5    the transactional md5 for the body, to be validated by the service.", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdde3b146048ebbfeda80c5606682e962011d952", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..7cf53ab6c 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -437,8 +474,8 @@ public class StorageBlobClient {\n      * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n      *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n      *                      for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent  the block content in bytes\n-     * @param contentMd5    the transactional md5 for the body, to be validated by the service.\n+     * @param blockContent  The block content in bytes.\n+     * @param contentMd5    The transactional MD5 for the body, to be validated by the service.\n      * @param callback      Callback that receives the response.\n      * @return The service call object, representing the request scheduled for execution.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODkwMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438388903", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param blockContent  the block content in bytes\n          \n          \n            \n                 * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n          \n          \n            \n                 * @param blockContent  The block content in bytes.\n          \n          \n            \n                 * @param contentMd5    The transactional MD5 for the block content, to be validated by the service.", "author": "vcolin7", "createdAt": "2020-06-10T20:27:38Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -425,34 +456,73 @@ public ServiceCall stageBlock(String containerName,\n             callback);\n     }\n \n+    /**\n+     * Creates a new block to be committed as part of a blob.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n+     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n+     *                      for the base64BlockId parameter must be the same size for each block.\n+     * @param blockContent  the block content in bytes\n+     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdde3b146048ebbfeda80c5606682e962011d952", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..7cf53ab6c 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -464,16 +501,16 @@ public class StorageBlobClient {\n      * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n      *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n      *                      for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent  the block content in bytes\n-     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n+     * @param blockContent  The block content in bytes.\n+     * @param contentMd5    The transactional MD5 for the block content, to be validated by the service.\n      * @param contentCrc64  Specify the transactional crc64 for the block content, to be validated by the service.\n      * @param timeout       The timeout parameter is expressed in seconds. For more information,\n      *     see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n      * @param leaseId       If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n-     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded\n+     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded.\n      *                      in the analytics logs when storage analytics logging is enabled.\n      * @param cpkInfo       Additional parameters for the operation.\n-     * @return The response object\n+     * @return The response object.\n      */\n     public BlockBlobsStageBlockResponse stageBlockWithRestResponse(String containerName,\n                                                                    String blobName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4OTA3MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438389070", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param blockContent  the block content in bytes\n          \n          \n            \n                 * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n          \n          \n            \n                 * @param blockContent  The block content in bytes.\n          \n          \n            \n                 * @param contentMd5    The transactional MD5 for the block content, to be validated by the service.", "author": "vcolin7", "createdAt": "2020-06-10T20:28:00Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -425,34 +456,73 @@ public ServiceCall stageBlock(String containerName,\n             callback);\n     }\n \n+    /**\n+     * Creates a new block to be committed as part of a blob.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n+     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n+     *                      for the base64BlockId parameter must be the same size for each block.\n+     * @param blockContent  the block content in bytes\n+     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n+     * @param contentCrc64  Specify the transactional crc64 for the block content, to be validated by the service.\n+     * @param timeout       The timeout parameter is expressed in seconds. For more information,\n+     *     see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId       If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n+     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded\n+     *                      in the analytics logs when storage analytics logging is enabled.\n+     * @param cpkInfo       Additional parameters for the operation.\n+     * @return The response object\n+     */\n     public BlockBlobsStageBlockResponse stageBlockWithRestResponse(String containerName,\n                                                                    String blobName,\n                                                                    String base64BlockId,\n-                                                                   byte[] body,\n-                                                                   byte[] transactionalContentMD5,\n-                                                                   byte[] transactionalContentCrc64,\n+                                                                   byte[] blockContent,\n+                                                                   byte[] contentMd5,\n+                                                                   byte[] contentCrc64,\n                                                                    Integer timeout,\n                                                                    String leaseId,\n                                                                    String requestId,\n                                                                    CpkInfo cpkInfo) {\n         return this.storageBlobServiceClient.stageBlockWithRestResponse(containerName,\n             blobName,\n             base64BlockId,\n-            body,\n-            transactionalContentMD5,\n-            transactionalContentCrc64,\n+            blockContent,\n+            contentMd5,\n+            contentCrc64,\n             timeout,\n             leaseId,\n             requestId,\n             cpkInfo);\n     }\n \n+    /**\n+     * Creates a new block to be committed as part of a blob.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n+     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n+     *                      for the base64BlockId parameter must be the same size for each block.\n+     * @param blockContent  the block content in bytes\n+     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdde3b146048ebbfeda80c5606682e962011d952", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..7cf53ab6c 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -464,16 +501,16 @@ public class StorageBlobClient {\n      * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n      *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n      *                      for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent  the block content in bytes\n-     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n+     * @param blockContent  The block content in bytes.\n+     * @param contentMd5    The transactional MD5 for the block content, to be validated by the service.\n      * @param contentCrc64  Specify the transactional crc64 for the block content, to be validated by the service.\n      * @param timeout       The timeout parameter is expressed in seconds. For more information,\n      *     see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n      * @param leaseId       If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n-     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded\n+     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded.\n      *                      in the analytics logs when storage analytics logging is enabled.\n      * @param cpkInfo       Additional parameters for the operation.\n-     * @return The response object\n+     * @return The response object.\n      */\n     public BlockBlobsStageBlockResponse stageBlockWithRestResponse(String containerName,\n                                                                    String blobName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4OTQyMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438389420", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the properties about a block blob\n          \n          \n            \n                 * @return The properties about a block blob.", "author": "vcolin7", "createdAt": "2020-06-10T20:28:42Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -461,16 +531,30 @@ public ServiceCall stageBlockWithRestResponse(String containerName,\n         return this.storageBlobServiceClient.stageBlockWithRestResponse(containerName,\n             blobName,\n             base64BlockId,\n-            body,\n-            transactionalContentMD5,\n-            transactionalContentCrc64,\n+            blockContent,\n+            contentMd5,\n+            contentCrc64,\n             timeout,\n             leaseId,\n             requestId,\n             cpkInfo,\n             callback);\n     }\n \n+    /**\n+     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n+     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n+     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n+     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n+     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n+     * version of the block, whichever list it may belong to.\n+     *\n+     * @param containerName  The container name.\n+     * @param blobName       The blob name.\n+     * @param base64BlockIds The block IDs.\n+     * @param overwrite      Indicate whether to overwrite the block list if already exists\n+     * @return the properties about a block blob", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "723604ea6ecf2fa2f678c4e43cbfe8482ffcaa8c", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..899bd8992 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -543,17 +580,17 @@ public class StorageBlobClient {\n \n     /**\n      * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n-     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n-     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n-     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n-     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n-     * version of the block, whichever list it may belong to.\n+     * For a block to be written as part of a blob, the block must have been successfully written to the server in a prior\n+     * {@link StorageBlobClient#stageBlock(String, String, String, byte[], byte[])} operation. You can call commit Block List\n+     * to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together.\n+     * You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list,\n+     * or to commit the most recently uploaded version of the block, whichever list it may belong to.\n      *\n      * @param containerName  The container name.\n      * @param blobName       The blob name.\n      * @param base64BlockIds The block IDs.\n-     * @param overwrite      Indicate whether to overwrite the block list if already exists\n-     * @return the properties about a block blob\n+     * @param overwrite      Indicate whether to overwrite the block list if already exists.\n+     * @return the properties of the block blob\n      */\n     public BlockBlobItem commitBlockList(String containerName,\n                                          String blobName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4OTYxMg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438389612", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param overwrite      Indicate whether to overwrite the block list if already exists\n          \n          \n            \n                 * @param overwrite      Indicate whether to overwrite the block list if already exists.", "author": "vcolin7", "createdAt": "2020-06-10T20:29:03Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -481,24 +565,63 @@ public BlockBlobItem commitBlockList(String containerName,\n             overwrite);\n     }\n \n+    /**\n+     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n+     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n+     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n+     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n+     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n+     * version of the block, whichever list it may belong to.\n+     *\n+     * @param containerName  The container name.\n+     * @param blobName       The blob name.\n+     * @param base64BlockIds The block IDs.\n+     * @param overwrite      Indicate whether to overwrite the block list if already exists", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "723604ea6ecf2fa2f678c4e43cbfe8482ffcaa8c", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..899bd8992 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -567,16 +604,16 @@ public class StorageBlobClient {\n \n     /**\n      * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n-     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n-     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n-     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n-     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n-     * version of the block, whichever list it may belong to.\n+     * For a block to be written as part of a blob, the block must have been successfully written to the server in a prior\n+     * {@link StorageBlobClient#stageBlock(String, String, String, byte[], byte[])} operation. You can call commit Block List\n+     * to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together.\n+     * You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list,\n+     * or to commit the most recently uploaded version of the block, whichever list it may belong to.\n      *\n      * @param containerName  The container name.\n      * @param blobName       The blob name.\n      * @param base64BlockIds The block IDs.\n-     * @param overwrite      Indicate whether to overwrite the block list if already exists\n+     * @param overwrite      Indicate whether to overwrite the block list if already exists.\n      * @param callback       Callback that receives the response.\n      * @return The service call object, representing the request scheduled for execution.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4OTY3NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438389674", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param overwrite      Indicate whether to overwrite the block list if already exists\n          \n          \n            \n                 * @param overwrite      Indicate whether to overwrite the block list if already exists.", "author": "vcolin7", "createdAt": "2020-06-10T20:29:09Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -461,16 +531,30 @@ public ServiceCall stageBlockWithRestResponse(String containerName,\n         return this.storageBlobServiceClient.stageBlockWithRestResponse(containerName,\n             blobName,\n             base64BlockId,\n-            body,\n-            transactionalContentMD5,\n-            transactionalContentCrc64,\n+            blockContent,\n+            contentMd5,\n+            contentCrc64,\n             timeout,\n             leaseId,\n             requestId,\n             cpkInfo,\n             callback);\n     }\n \n+    /**\n+     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n+     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n+     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n+     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n+     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n+     * version of the block, whichever list it may belong to.\n+     *\n+     * @param containerName  The container name.\n+     * @param blobName       The blob name.\n+     * @param base64BlockIds The block IDs.\n+     * @param overwrite      Indicate whether to overwrite the block list if already exists", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "723604ea6ecf2fa2f678c4e43cbfe8482ffcaa8c", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..899bd8992 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -543,17 +580,17 @@ public class StorageBlobClient {\n \n     /**\n      * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n-     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n-     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n-     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n-     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n-     * version of the block, whichever list it may belong to.\n+     * For a block to be written as part of a blob, the block must have been successfully written to the server in a prior\n+     * {@link StorageBlobClient#stageBlock(String, String, String, byte[], byte[])} operation. You can call commit Block List\n+     * to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together.\n+     * You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list,\n+     * or to commit the most recently uploaded version of the block, whichever list it may belong to.\n      *\n      * @param containerName  The container name.\n      * @param blobName       The blob name.\n      * @param base64BlockIds The block IDs.\n-     * @param overwrite      Indicate whether to overwrite the block list if already exists\n-     * @return the properties about a block blob\n+     * @param overwrite      Indicate whether to overwrite the block list if already exists.\n+     * @return the properties of the block blob\n      */\n     public BlockBlobItem commitBlockList(String containerName,\n                                          String blobName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4OTgxMQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438389811", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded\n          \n          \n            \n                 * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded.", "author": "vcolin7", "createdAt": "2020-06-10T20:29:27Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -425,34 +456,73 @@ public ServiceCall stageBlock(String containerName,\n             callback);\n     }\n \n+    /**\n+     * Creates a new block to be committed as part of a blob.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n+     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n+     *                      for the base64BlockId parameter must be the same size for each block.\n+     * @param blockContent  the block content in bytes\n+     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n+     * @param contentCrc64  Specify the transactional crc64 for the block content, to be validated by the service.\n+     * @param timeout       The timeout parameter is expressed in seconds. For more information,\n+     *     see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId       If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n+     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded\n+     *                      in the analytics logs when storage analytics logging is enabled.\n+     * @param cpkInfo       Additional parameters for the operation.\n+     * @return The response object\n+     */\n     public BlockBlobsStageBlockResponse stageBlockWithRestResponse(String containerName,\n                                                                    String blobName,\n                                                                    String base64BlockId,\n-                                                                   byte[] body,\n-                                                                   byte[] transactionalContentMD5,\n-                                                                   byte[] transactionalContentCrc64,\n+                                                                   byte[] blockContent,\n+                                                                   byte[] contentMd5,\n+                                                                   byte[] contentCrc64,\n                                                                    Integer timeout,\n                                                                    String leaseId,\n                                                                    String requestId,\n                                                                    CpkInfo cpkInfo) {\n         return this.storageBlobServiceClient.stageBlockWithRestResponse(containerName,\n             blobName,\n             base64BlockId,\n-            body,\n-            transactionalContentMD5,\n-            transactionalContentCrc64,\n+            blockContent,\n+            contentMd5,\n+            contentCrc64,\n             timeout,\n             leaseId,\n             requestId,\n             cpkInfo);\n     }\n \n+    /**\n+     * Creates a new block to be committed as part of a blob.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n+     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n+     *                      for the base64BlockId parameter must be the same size for each block.\n+     * @param blockContent  the block content in bytes\n+     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n+     * @param contentCrc64  Specify the transactional crc64 for the block content, to be validated by the service.\n+     * @param timeout       The timeout parameter is expressed in seconds. For more information,\n+     *                      see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId       If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n+     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdde3b146048ebbfeda80c5606682e962011d952", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..7cf53ab6c 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -464,16 +501,16 @@ public class StorageBlobClient {\n      * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n      *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n      *                      for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent  the block content in bytes\n-     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n+     * @param blockContent  The block content in bytes.\n+     * @param contentMd5    The transactional MD5 for the block content, to be validated by the service.\n      * @param contentCrc64  Specify the transactional crc64 for the block content, to be validated by the service.\n      * @param timeout       The timeout parameter is expressed in seconds. For more information,\n      *     see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n      * @param leaseId       If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n-     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded\n+     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded.\n      *                      in the analytics logs when storage analytics logging is enabled.\n      * @param cpkInfo       Additional parameters for the operation.\n-     * @return The response object\n+     * @return The response object.\n      */\n     public BlockBlobsStageBlockResponse stageBlockWithRestResponse(String containerName,\n                                                                    String blobName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MDA0NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438390044", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded\n          \n          \n            \n                 * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded.", "author": "vcolin7", "createdAt": "2020-06-10T20:29:54Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -425,34 +456,73 @@ public ServiceCall stageBlock(String containerName,\n             callback);\n     }\n \n+    /**\n+     * Creates a new block to be committed as part of a blob.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n+     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n+     *                      for the base64BlockId parameter must be the same size for each block.\n+     * @param blockContent  the block content in bytes\n+     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n+     * @param contentCrc64  Specify the transactional crc64 for the block content, to be validated by the service.\n+     * @param timeout       The timeout parameter is expressed in seconds. For more information,\n+     *     see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId       If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n+     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdde3b146048ebbfeda80c5606682e962011d952", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..7cf53ab6c 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -464,16 +501,16 @@ public class StorageBlobClient {\n      * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n      *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n      *                      for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent  the block content in bytes\n-     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n+     * @param blockContent  The block content in bytes.\n+     * @param contentMd5    The transactional MD5 for the block content, to be validated by the service.\n      * @param contentCrc64  Specify the transactional crc64 for the block content, to be validated by the service.\n      * @param timeout       The timeout parameter is expressed in seconds. For more information,\n      *     see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n      * @param leaseId       If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n-     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded\n+     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded.\n      *                      in the analytics logs when storage analytics logging is enabled.\n      * @param cpkInfo       Additional parameters for the operation.\n-     * @return The response object\n+     * @return The response object.\n      */\n     public BlockBlobsStageBlockResponse stageBlockWithRestResponse(String containerName,\n                                                                    String blobName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MDA5MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438390091", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return The response object\n          \n          \n            \n                 * @return The response object.", "author": "vcolin7", "createdAt": "2020-06-10T20:29:59Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -425,34 +456,73 @@ public ServiceCall stageBlock(String containerName,\n             callback);\n     }\n \n+    /**\n+     * Creates a new block to be committed as part of a blob.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n+     *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n+     *                      for the base64BlockId parameter must be the same size for each block.\n+     * @param blockContent  the block content in bytes\n+     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n+     * @param contentCrc64  Specify the transactional crc64 for the block content, to be validated by the service.\n+     * @param timeout       The timeout parameter is expressed in seconds. For more information,\n+     *     see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param leaseId       If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n+     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded\n+     *                      in the analytics logs when storage analytics logging is enabled.\n+     * @param cpkInfo       Additional parameters for the operation.\n+     * @return The response object", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdde3b146048ebbfeda80c5606682e962011d952", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..7cf53ab6c 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -464,16 +501,16 @@ public class StorageBlobClient {\n      * @param base64BlockId A valid Base64 string value that identifies the block. Prior to encoding, the string must\n      *                      be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n      *                      for the base64BlockId parameter must be the same size for each block.\n-     * @param blockContent  the block content in bytes\n-     * @param contentMd5    the transactional md5 for the block content, to be validated by the service.\n+     * @param blockContent  The block content in bytes.\n+     * @param contentMd5    The transactional MD5 for the block content, to be validated by the service.\n      * @param contentCrc64  Specify the transactional crc64 for the block content, to be validated by the service.\n      * @param timeout       The timeout parameter is expressed in seconds. For more information,\n      *     see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n      * @param leaseId       If specified, the staging only succeeds if the resource's lease is active and matches this ID.\n-     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded\n+     * @param requestId     Provides a client-generated, opaque value with a 1 KB character limit that is recorded.\n      *                      in the analytics logs when storage analytics logging is enabled.\n      * @param cpkInfo       Additional parameters for the operation.\n-     * @return The response object\n+     * @return The response object.\n      */\n     public BlockBlobsStageBlockResponse stageBlockWithRestResponse(String containerName,\n                                                                    String blobName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MTYwOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438391609", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param requestConditions requests to the conditions\n          \n          \n            \n                 * @param requestConditions {@link BlobRequestConditions}.", "author": "vcolin7", "createdAt": "2020-06-10T20:32:56Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -481,24 +565,63 @@ public BlockBlobItem commitBlockList(String containerName,\n             overwrite);\n     }\n \n+    /**\n+     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n+     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n+     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n+     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n+     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n+     * version of the block, whichever list it may belong to.\n+     *\n+     * @param containerName  The container name.\n+     * @param blobName       The blob name.\n+     * @param base64BlockIds The block IDs.\n+     * @param overwrite      Indicate whether to overwrite the block list if already exists\n+     * @param callback       Callback that receives the response.\n+     * @return The service call object, representing the request scheduled for execution.\n+     */\n     public ServiceCall commitBlockList(String containerName,\n                                        String blobName,\n                                        List<String> base64BlockIds,\n                                        boolean overwrite,\n-                                       Callback<BlockBlobItem> callBack) {\n+                                       Callback<BlockBlobItem> callback) {\n         return this.storageBlobServiceClient.commitBlockList(containerName,\n             blobName,\n             base64BlockIds,\n             overwrite,\n-            callBack);\n+            callback);\n     }\n \n \n+    /**\n+     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n+     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n+     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n+     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n+     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n+     * version of the block, whichever list it may belong to.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param base64BlockIds    The block IDs.\n+     * @param contentMD5        Specify the transactional md5 for the body, to be validated by the service.\n+     * @param contentCrc64      Specify the transactional crc64 for the body, to be validated by the service.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information,\n+     *                          see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param blobHttpHeaders   Additional parameters for the operation.\n+     * @param metadata          Specifies a user-defined name-value pair associated with the blob.\n+     * @param requestConditions requests to the conditions", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MTc5OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438391799", "bodyText": "Changed this to how Java does it. Not sure if we should be more specific.", "author": "vcolin7", "createdAt": "2020-06-10T20:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MTYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "723604ea6ecf2fa2f678c4e43cbfe8482ffcaa8c", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..899bd8992 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -567,16 +604,16 @@ public class StorageBlobClient {\n \n     /**\n      * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n-     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n-     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n-     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n-     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n-     * version of the block, whichever list it may belong to.\n+     * For a block to be written as part of a blob, the block must have been successfully written to the server in a prior\n+     * {@link StorageBlobClient#stageBlock(String, String, String, byte[], byte[])} operation. You can call commit Block List\n+     * to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together.\n+     * You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list,\n+     * or to commit the most recently uploaded version of the block, whichever list it may belong to.\n      *\n      * @param containerName  The container name.\n      * @param blobName       The blob name.\n      * @param base64BlockIds The block IDs.\n-     * @param overwrite      Indicate whether to overwrite the block list if already exists\n+     * @param overwrite      Indicate whether to overwrite the block list if already exists.\n      * @param callback       Callback that receives the response.\n      * @return The service call object, representing the request scheduled for execution.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MTkyOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r438391929", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param requestConditions requests to the conditions\n          \n          \n            \n                 * @param requestConditions {@link BlobRequestConditions}.", "author": "vcolin7", "createdAt": "2020-06-10T20:33:31Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -520,11 +643,36 @@ public BlockBlobsCommitBlockListResponse commitBlockListWithRestResponse(String\n             tier);\n     }\n \n+    /**\n+     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n+     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n+     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n+     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n+     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n+     * version of the block, whichever list it may belong to.\n+     *\n+     * @param containerName     The container name.\n+     * @param blobName          The blob name.\n+     * @param base64BlockIds    The block IDs.\n+     * @param contentMD5        Specify the transactional md5 for the body, to be validated by the service.\n+     * @param contentCrc64      Specify the transactional crc64 for the body, to be validated by the service.\n+     * @param timeout           The timeout parameter is expressed in seconds. For more information,\n+     *                          see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param blobHttpHeaders   Additional parameters for the operation.\n+     * @param metadata          Specifies a user-defined name-value pair associated with the blob.\n+     * @param requestConditions requests to the conditions", "originalCommit": "7e7b6a7e98ff40dd4e889b521336a901292cdc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "723604ea6ecf2fa2f678c4e43cbfe8482ffcaa8c", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 328617d79..899bd8992 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -645,11 +682,11 @@ public class StorageBlobClient {\n \n     /**\n      * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n-     * In order to be written as part of a blob, a block must have been successfully written to the server in a prior\n-     * Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have\n-     * changed, then committing the new and existing blocks together. You can do this by specifying whether to commit\n-     * a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded\n-     * version of the block, whichever list it may belong to.\n+     * For a block to be written as part of a blob, the block must have been successfully written to the server in a prior\n+     * {@link StorageBlobClient#stageBlock(String, String, String, byte[], byte[])} operation. You can call commit Block List\n+     * to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together.\n+     * You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list,\n+     * or to commit the most recently uploaded version of the block, whichever list it may belong to.\n      *\n      * @param containerName     The container name.\n      * @param blobName          The blob name.\n"}}, {"oid": "723604ea6ecf2fa2f678c4e43cbfe8482ffcaa8c", "url": "https://github.com/Azure/azure-sdk-for-android/commit/723604ea6ecf2fa2f678c4e43cbfe8482ffcaa8c", "message": "Generated javadoc locally for storage, first pass on javadoc based on review, renamed BlobDownloadAsyncResponse to BlobDownloadResponse for consistent with other models.", "committedDate": "2020-06-10T21:04:21Z", "type": "commit"}, {"oid": "bdde3b146048ebbfeda80c5606682e962011d952", "url": "https://github.com/Azure/azure-sdk-for-android/commit/bdde3b146048ebbfeda80c5606682e962011d952", "message": "Following consistently in javadoc\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-06-10T23:27:32Z", "type": "commit"}, {"oid": "b416c1baa182af66e36692b3e67ccbde96f8021b", "url": "https://github.com/Azure/azure-sdk-for-android/commit/b416c1baa182af66e36692b3e67ccbde96f8021b", "message": "second pass on javadoc based on local review", "committedDate": "2020-06-11T02:08:35Z", "type": "commit"}, {"oid": "82f40498376d1676740955a0b0edf9310826bf8a", "url": "https://github.com/Azure/azure-sdk-for-android/commit/82f40498376d1676740955a0b0edf9310826bf8a", "message": "Merge branch 'stg-client-jdoc-1' of github.com:anuchandy/Azure.Android into stg-client-jdoc-1", "committedDate": "2020-06-11T02:09:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzMzQxOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439033418", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param chain provide access to the request to apply the HTTP Date header.\n          \n          \n            \n                 * @param chain Provide access to the request to apply the HTTP Date header.", "author": "vcolin7", "createdAt": "2020-06-11T19:56:37Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AddDateInterceptor.java", "diffHunk": "@@ -20,6 +20,14 @@\n  * HTTP request.\n  */\n public class AddDateInterceptor implements Interceptor {\n+    /**\n+     * Intercept the current request in the pipeline and apply HTTP Date header.\n+     *\n+     * @param chain provide access to the request to apply the HTTP Date header.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AddDateInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AddDateInterceptor.java\nindex e9456a948..a687af18a 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AddDateInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AddDateInterceptor.java\n\n@@ -21,9 +21,9 @@ import okhttp3.Response;\n  */\n public class AddDateInterceptor implements Interceptor {\n     /**\n-     * Intercept the current request in the pipeline and apply HTTP Date header.\n+     * Intercept the current request in the pipeline and apply the HTTP \"Date\" header.\n      *\n-     * @param chain provide access to the request to apply the HTTP Date header.\n+     * @param chain Provide access to the request to apply the HTTP Date header.\n      *\n      * @return Response from the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzMzUzMQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439033531", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param chain provide access to the request and response to log.\n          \n          \n            \n                 * @param chain Provide access to the request and response to log.", "author": "vcolin7", "createdAt": "2020-06-11T19:56:52Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java", "diffHunk": "@@ -39,6 +39,14 @@ public CurlLoggingInterceptor(ClientLogger clientLogger) {\n         curlCommand = new StringBuilder(\"curl\");\n     }\n \n+    /**\n+     * Intercept and log a request response pair in the pipeline as cURL commands.\n+     *\n+     * @param chain provide access to the request and response to log.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java\nindex 72ce46b0c..6ff70dfaa 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java\n\n@@ -40,9 +40,9 @@ public class CurlLoggingInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept and log a request response pair in the pipeline as cURL commands.\n+     * Intercept and log a request-response pair in the pipeline as cURL commands.\n      *\n-     * @param chain provide access to the request and response to log.\n+     * @param chain Provide access to the request and response to log.\n      *\n      * @return Response from the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzMzY3Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439033673", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param chain provide access to the request and response to log.\n          \n          \n            \n                 * @param chain Provide access to the request and response to log.", "author": "vcolin7", "createdAt": "2020-06-11T19:57:09Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java", "diffHunk": "@@ -72,6 +72,14 @@ public LoggingInterceptor(LogOptions logOptions, ClientLogger clientLogger) {\n         }\n     }\n \n+    /**\n+     * Intercept and log a request response pair in the pipeline.\n+     *\n+     * @param chain provide access to the request and response to log.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java\nindex 4670a7ce2..f4beda466 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java\n\n@@ -73,9 +73,9 @@ public final class LoggingInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept and log a request response pair in the pipeline.\n+     * Intercept and log a request-response pair in the pipeline.\n      *\n-     * @param chain provide access to the request and response to log.\n+     * @param chain Provide access to the request and response to log.\n      *\n      * @return Response from the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzMzk3MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439033971", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Intercept the current request update it's the \"User-Agent\" header with the value supplied in the constructor.\n          \n          \n            \n                 * Intercept the current request and update the \"User-Agent\" header with the value supplied in the constructor.", "author": "vcolin7", "createdAt": "2020-06-11T19:57:45Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/UserAgentInterceptor.java", "diffHunk": "@@ -141,10 +141,16 @@ public UserAgentInterceptor(String applicationId,\n     }\n \n     /**\n-     * Updates the \"User-Agent\" header with the value supplied in the constructor.\n+     * Intercept the current request update it's the \"User-Agent\" header with the value supplied in the constructor.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/UserAgentInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/UserAgentInterceptor.java\nindex ada756441..31a2a1fd8 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/UserAgentInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/UserAgentInterceptor.java\n\n@@ -141,13 +141,13 @@ public class UserAgentInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept the current request update it's the \"User-Agent\" header with the value supplied in the constructor.\n+     * Intercept the current request and update the \"User-Agent\" header with the value supplied in the constructor.\n      *\n      * <p>\n      * When the User-Agent header already has a value and it differs from the value used to create this interceptor the\n      * User-Agent header is updated by prepending the value in this interceptor.\n      *\n-     * @param chain provide access to the request to apply the \"User-Agent\" header.\n+     * @param chain Provide access to the request to apply the \"User-Agent\" header.\n      *\n      * @return Response from the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNDMxMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439034313", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Intercept and log a request response pair in the pipeline.\n          \n          \n            \n                 * Intercept and log a request-response pair in the pipeline.", "author": "vcolin7", "createdAt": "2020-06-11T19:58:28Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java", "diffHunk": "@@ -72,6 +72,14 @@ public LoggingInterceptor(LogOptions logOptions, ClientLogger clientLogger) {\n         }\n     }\n \n+    /**\n+     * Intercept and log a request response pair in the pipeline.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java\nindex 4670a7ce2..f4beda466 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/LoggingInterceptor.java\n\n@@ -73,9 +73,9 @@ public final class LoggingInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept and log a request response pair in the pipeline.\n+     * Intercept and log a request-response pair in the pipeline.\n      *\n-     * @param chain provide access to the request and response to log.\n+     * @param chain Provide access to the request and response to log.\n      *\n      * @return Response from the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNDM3NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439034374", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Intercept and log a request response pair in the pipeline as cURL commands.\n          \n          \n            \n                 * Intercept and log a request-response pair in the pipeline as cURL commands.", "author": "vcolin7", "createdAt": "2020-06-11T19:58:37Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java", "diffHunk": "@@ -39,6 +39,14 @@ public CurlLoggingInterceptor(ClientLogger clientLogger) {\n         curlCommand = new StringBuilder(\"curl\");\n     }\n \n+    /**\n+     * Intercept and log a request response pair in the pipeline as cURL commands.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java\nindex 72ce46b0c..6ff70dfaa 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/CurlLoggingInterceptor.java\n\n@@ -40,9 +40,9 @@ public class CurlLoggingInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept and log a request response pair in the pipeline as cURL commands.\n+     * Intercept and log a request-response pair in the pipeline as cURL commands.\n      *\n-     * @param chain provide access to the request and response to log.\n+     * @param chain Provide access to the request and response to log.\n      *\n      * @return Response from the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNDU3Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439034572", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Intercept the current request in the pipeline and apply HTTP Date header.\n          \n          \n            \n                 * Intercept the current request in the pipeline and apply the HTTP \"Date\" header.", "author": "vcolin7", "createdAt": "2020-06-11T19:59:02Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AddDateInterceptor.java", "diffHunk": "@@ -20,6 +20,14 @@\n  * HTTP request.\n  */\n public class AddDateInterceptor implements Interceptor {\n+    /**\n+     * Intercept the current request in the pipeline and apply HTTP Date header.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AddDateInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AddDateInterceptor.java\nindex e9456a948..a687af18a 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AddDateInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/AddDateInterceptor.java\n\n@@ -21,9 +21,9 @@ import okhttp3.Response;\n  */\n public class AddDateInterceptor implements Interceptor {\n     /**\n-     * Intercept the current request in the pipeline and apply HTTP Date header.\n+     * Intercept the current request in the pipeline and apply the HTTP \"Date\" header.\n      *\n-     * @param chain provide access to the request to apply the HTTP Date header.\n+     * @param chain Provide access to the request to apply the HTTP Date header.\n      *\n      * @return Response from the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNDgyNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439034824", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return true if {@link #cancel()} was called.\n          \n          \n            \n                 * @return true If {@link #cancel()} was called.", "author": "vcolin7", "createdAt": "2020-06-11T19:59:35Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/ServiceCall.java", "diffHunk": "@@ -28,7 +28,11 @@ public void cancel() {\n         this.call.cancel();\n     }\n \n-    /** True if {@link #cancel()} was called. */\n+    /**\n+     * Check whether {@link #cancel()} was called.\n+     *\n+     * @return true if {@link #cancel()} was called.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/ServiceCall.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/ServiceCall.java\nindex 305142ed9..781ad6f26 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/ServiceCall.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/ServiceCall.java\n\n@@ -31,7 +31,7 @@ public final class ServiceCall {\n     /**\n      * Check whether {@link #cancel()} was called.\n      *\n-     * @return true if {@link #cancel()} was called.\n+     * @return true If {@link #cancel()} was called.\n      */\n     public boolean isCanceled() {\n         return this.call.isCanceled();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNDk0Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439034942", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param chain provide access to the request to apply the \"User-Agent\" header.\n          \n          \n            \n                 * @param chain provide access to the request to apply the \"User-Agent\" header.\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param chain provide access to the request to apply the \"User-Agent\" header.\n          \n          \n            \n                 * @param chain Provide access to the request to apply the \"User-Agent\" header.", "author": "vcolin7", "createdAt": "2020-06-11T19:59:48Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/UserAgentInterceptor.java", "diffHunk": "@@ -141,10 +141,16 @@ public UserAgentInterceptor(String applicationId,\n     }\n \n     /**\n-     * Updates the \"User-Agent\" header with the value supplied in the constructor.\n+     * Intercept the current request update it's the \"User-Agent\" header with the value supplied in the constructor.\n+     *\n      * <p>\n      * When the User-Agent header already has a value and it differs from the value used to create this interceptor the\n      * User-Agent header is updated by prepending the value in this interceptor.\n+     *\n+     * @param chain provide access to the request to apply the \"User-Agent\" header.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/UserAgentInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/UserAgentInterceptor.java\nindex ada756441..31a2a1fd8 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/UserAgentInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/UserAgentInterceptor.java\n\n@@ -141,13 +141,13 @@ public class UserAgentInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept the current request update it's the \"User-Agent\" header with the value supplied in the constructor.\n+     * Intercept the current request and update the \"User-Agent\" header with the value supplied in the constructor.\n      *\n      * <p>\n      * When the User-Agent header already has a value and it differs from the value used to create this interceptor the\n      * User-Agent header is updated by prepending the value in this interceptor.\n      *\n-     * @param chain provide access to the request to apply the \"User-Agent\" header.\n+     * @param chain Provide access to the request to apply the \"User-Agent\" header.\n      *\n      * @return Response from the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNzIzOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439037239", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Intercept the current request in the pipeline and apply x-ms-client-request-id header.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param chain provide access to the request to apply the x-ms-client-request-id header.\n          \n          \n            \n                 * Intercept the current request in the pipeline and apply the \"x-ms-client-request-id\" header.\n          \n          \n            \n            \n          \n          \n            \n                 * @param chain Provide access to the request to apply the \"x-ms-client-request-id\" header.", "author": "vcolin7", "createdAt": "2020-06-11T20:04:51Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RequestIdInterceptor.java", "diffHunk": "@@ -19,6 +19,14 @@\n  * the request.\n  */\n public class RequestIdInterceptor implements Interceptor {\n+    /**\n+     * Intercept the current request in the pipeline and apply x-ms-client-request-id header.\n+     *\n+     * @param chain provide access to the request to apply the x-ms-client-request-id header.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RequestIdInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RequestIdInterceptor.java\nindex d98c9f2d7..746710b1c 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RequestIdInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RequestIdInterceptor.java\n\n@@ -20,9 +20,9 @@ import okhttp3.Response;\n  */\n public class RequestIdInterceptor implements Interceptor {\n     /**\n-     * Intercept the current request in the pipeline and apply x-ms-client-request-id header.\n-     *\n-     * @param chain provide access to the request to apply the x-ms-client-request-id header.\n+     * Intercept the current request in the pipeline and apply the \"x-ms-client-request-id\" header.\n+\n+     * @param chain Provide access to the request to apply the \"x-ms-client-request-id\" header.\n      *\n      * @return Response from the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODM1Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439038356", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the current log level.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return the current log level\n          \n          \n            \n                 * Gets the current log level.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return The current log level.", "author": "vcolin7", "createdAt": "2020-06-11T20:06:59Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java", "diffHunk": "@@ -57,14 +57,19 @@ static ClientLogger getDefault(String tag) {\n      */\n     int LOG_LEVEL_ERROR = 4;\n \n+\n     /**\n-     * Returns the logger's log level.\n+     * Get the current log level.\n+     *\n+     * @return the current log level", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java\nindex 844fd97e4..d68df1f06 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java\n\n@@ -59,9 +59,9 @@ public interface ClientLogger {\n \n \n     /**\n-     * Get the current log level.\n+     * Gets the current log level.\n      *\n-     * @return the current log level\n+     * @return The current log level.\n      */\n     @LogLevel\n     int getLogLevel();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODUzMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439038533", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param logLevel the log level\n          \n          \n            \n                 * @param logLevel The log level.", "author": "vcolin7", "createdAt": "2020-06-11T20:07:13Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java", "diffHunk": "@@ -57,14 +57,19 @@ static ClientLogger getDefault(String tag) {\n      */\n     int LOG_LEVEL_ERROR = 4;\n \n+\n     /**\n-     * Returns the logger's log level.\n+     * Get the current log level.\n+     *\n+     * @return the current log level\n      */\n     @LogLevel\n     int getLogLevel();\n \n     /**\n      * Sets the log level for the logger.\n+     *\n+     * @param logLevel the log level", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java\nindex 844fd97e4..d68df1f06 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/util/logging/ClientLogger.java\n\n@@ -59,9 +59,9 @@ public interface ClientLogger {\n \n \n     /**\n-     * Get the current log level.\n+     * Gets the current log level.\n      *\n-     * @return the current log level\n+     * @return The current log level.\n      */\n     @LogLevel\n     int getLogLevel();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MTg2MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439041861", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the status code of the response error.\n          \n          \n            \n                 * Gets the status code of the error response.", "author": "vcolin7", "createdAt": "2020-06-11T20:11:39Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobStorageException.java", "diffHunk": "@@ -41,21 +41,27 @@ public BlobStorageException(String message, okhttp3.Response response) {\n     }\n \n     /**\n-     * @return The error code returned by the service.\n+     * Gets the error code returned by the service.\n+     *\n+     * @return The error code.\n      */\n     public BlobErrorCode getErrorCode() {\n         return BlobErrorCode.fromString(super.getResponse().header(\"x-ms-error-code\"));\n     }\n \n     /**\n-     * @return The message returned by the service.\n+     * Gets the message returned by the service.\n+     *\n+     * @return The message.\n      */\n     public String getServiceMessage() {\n         return super.getMessage();\n     }\n \n     /**\n-     * @return The status code on the response.\n+     * Gets the status code of the response error.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobStorageException.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobStorageException.java\nindex fa142a8ab..b685b5d41 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobStorageException.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobStorageException.java\n\n@@ -59,7 +59,7 @@ public final class BlobStorageException extends HttpResponseException {\n     }\n \n     /**\n-     * Gets the status code of the response error.\n+     * Gets the status code of the error response.\n      *\n      * @return The status code.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MjA3Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439042076", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Pipeline interceptor that append SAS token to the request Uri.\n          \n          \n            \n             *  Pipeline interceptor that append SAS token to the request URI.", "author": "vcolin7", "createdAt": "2020-06-11T20:11:56Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/SasTokenCredentialInterceptor.java", "diffHunk": "@@ -15,7 +15,7 @@\n import static com.azure.android.core.util.CoreUtil.isNullOrEmpty;\n \n /**\n- *  Interceptor that append SAS token to the request Uri.\n+ *  Pipeline interceptor that append SAS token to the request Uri.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/SasTokenCredentialInterceptor.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/SasTokenCredentialInterceptor.java\nindex b5e7477b2..00f861fa5 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/SasTokenCredentialInterceptor.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/SasTokenCredentialInterceptor.java\n\n@@ -15,7 +15,7 @@ import okhttp3.Response;\n import static com.azure.android.core.util.CoreUtil.isNullOrEmpty;\n \n /**\n- *  Pipeline interceptor that append SAS token to the request Uri.\n+ *  Pipeline interceptor that append SAS token to the request URI.\n  */\n public class SasTokenCredentialInterceptor implements Interceptor {\n     private final SasTokenCredential credential;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MjE4NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439042184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return Response from the next interceptor in the pipeline.\n          \n          \n            \n                 * @return Response From the next interceptor in the pipeline.", "author": "vcolin7", "createdAt": "2020-06-11T20:12:05Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/SasTokenCredentialInterceptor.java", "diffHunk": "@@ -24,6 +24,14 @@ public SasTokenCredentialInterceptor(SasTokenCredential credential) {\n         this.credential = credential;\n     }\n \n+    /**\n+     * Intercept the current request in the pipeline and apply the SAS token.\n+     *\n+     * @param chain Provide access to the request to apply the SAS token.\n+     *\n+     * @return Response from the next interceptor in the pipeline.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/SasTokenCredentialInterceptor.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/SasTokenCredentialInterceptor.java\nindex b5e7477b2..00f861fa5 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/SasTokenCredentialInterceptor.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/SasTokenCredentialInterceptor.java\n\n@@ -29,7 +29,7 @@ public class SasTokenCredentialInterceptor implements Interceptor {\n      *\n      * @param chain Provide access to the request to apply the SAS token.\n      *\n-     * @return Response from the next interceptor in the pipeline.\n+     * @return Response From the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n      */\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MjMzOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439042338", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return Response from the next interceptor in the pipeline.\n          \n          \n            \n                 * @return Response From the next interceptor in the pipeline.", "author": "vcolin7", "createdAt": "2020-06-11T20:12:18Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java", "diffHunk": "@@ -60,6 +67,14 @@ public ResponseHeadersValidationInterceptor(Collection<String> headerNames, Clie\n         logger = clientLogger;\n     }\n \n+    /**\n+     * Intercept and validate that a collection of headers have consistent values between a request and a response.\n+     *\n+     * @param chain Provide access to the response to be validated.\n+     *\n+     * @return Response from the next interceptor in the pipeline.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\nindex a7b797e2b..c9881426b 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\n\n@@ -72,7 +72,7 @@ public class ResponseHeadersValidationInterceptor implements Interceptor {\n      *\n      * @param chain Provide access to the response to be validated.\n      *\n-     * @return Response from the next interceptor in the pipeline.\n+     * @return Response From the next interceptor in the pipeline.\n      * @throws IOException If an IO error occurs while processing the request and response.\n      */\n     @NonNull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MjU1Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439042556", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param headerNames  the header names\n          \n          \n            \n                 * @param clientLogger the logger\n          \n          \n            \n                 * @param headerNames The header names.\n          \n          \n            \n                 * @param clientLogger The logger.", "author": "vcolin7", "createdAt": "2020-06-11T20:12:35Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java", "diffHunk": "@@ -52,6 +56,9 @@ public ResponseHeadersValidationInterceptor(Collection<String> headerNames) {\n     /**\n      * Constructor that accepts a list of header names to validate. Adds two mandatory Storage header names as well\n      * and uses a provided {@link ClientLogger}.\n+     *\n+     * @param headerNames  the header names\n+     * @param clientLogger the logger", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\nindex a7b797e2b..c9881426b 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\n\n@@ -57,8 +57,8 @@ public class ResponseHeadersValidationInterceptor implements Interceptor {\n      * Constructor that accepts a list of header names to validate. Adds two mandatory Storage header names as well\n      * and uses a provided {@link ClientLogger}.\n      *\n-     * @param headerNames  the header names\n-     * @param clientLogger the logger\n+     * @param headerNames The header names.\n+     * @param clientLogger The logger.\n      */\n     public ResponseHeadersValidationInterceptor(Collection<String> headerNames, ClientLogger clientLogger) {\n         headerNames.add(CLIENT_ID_HEADER);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MjY0Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439042647", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param headerNames the header names\n          \n          \n            \n                 * @param headerNames The header names.", "author": "vcolin7", "createdAt": "2020-06-11T20:12:42Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java", "diffHunk": "@@ -44,6 +46,8 @@ public ResponseHeadersValidationInterceptor(ClientLogger clientLogger) {\n     /**\n      * Constructor that accepts a list of header names to validate. Adds two mandatory Storage header names as well.\n      * and uses a default {@link ClientLogger}.\n+     *\n+     * @param headerNames the header names", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\nindex a7b797e2b..c9881426b 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\n\n@@ -47,7 +47,7 @@ public class ResponseHeadersValidationInterceptor implements Interceptor {\n      * Constructor that accepts a list of header names to validate. Adds two mandatory Storage header names as well.\n      * and uses a default {@link ClientLogger}.\n      *\n-     * @param headerNames the header names\n+     * @param headerNames The header names.\n      */\n     public ResponseHeadersValidationInterceptor(Collection<String> headerNames) {\n         this(headerNames, ClientLogger.getDefault(ResponseHeadersValidationInterceptor.class));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MzQyMg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439043422", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param clientLogger the logger\n          \n          \n            \n                 * @param clientLogger The logger.", "author": "vcolin7", "createdAt": "2020-06-11T20:13:42Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java", "diffHunk": "@@ -34,6 +34,8 @@ public ResponseHeadersValidationInterceptor() {\n \n     /**\n      * Constructor that adds two mandatory headers used by Storage and uses a provided {@link ClientLogger}.\n+     *\n+     * @param clientLogger the logger", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\nindex a7b797e2b..c9881426b 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/ResponseHeadersValidationInterceptor.java\n\n@@ -35,7 +35,7 @@ public class ResponseHeadersValidationInterceptor implements Interceptor {\n     /**\n      * Constructor that adds two mandatory headers used by Storage and uses a provided {@link ClientLogger}.\n      *\n-     * @param clientLogger the logger\n+     * @param clientLogger The logger.\n      */\n     public ResponseHeadersValidationInterceptor(ClientLogger clientLogger) {\n         headerNames.add(CLIENT_ID_HEADER);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0NDkzNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439044934", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return Response from the next interceptor in the pipeline.\n          \n          \n            \n                 * @throws IOException If an IO error occurs while processing the request and response\n          \n          \n            \n                 * @return Response From the next interceptor in the pipeline.\n          \n          \n            \n                 * @throws IOException If an IO error occurs while processing the request and response.", "author": "vcolin7", "createdAt": "2020-06-11T20:15:41Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/NormalizeEtagInterceptor.java", "diffHunk": "@@ -10,16 +10,22 @@\n import okhttp3.Response;\n \n /**\n- * Interceptor that wraps any potential error responses from the service and applies post processing of the response's\n- * ETag header to standardize the value.\n+ * Pipeline interceptor that wraps any potential error responses from the service and applies post processing\n+ * of the response's ETag header to standardize the value.\n  */\n public class NormalizeEtagInterceptor implements Interceptor {\n     /**\n+     * Intercept the service returned ETag value and normalize it if required.\n+     *\n+     * <p>\n      * The service is inconsistent in whether or not the ETag header value has quotes. This method will check if the\n      * response returns an ETag value, and if it does, remove any quotes that may be present to give the user a more\n      * predictable format to work with.\n      *\n-     * @return An updated response with post processing steps applied.\n+     * @param chain Provide access to the response containing ETag header to normalize.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If an IO error occurs while processing the request and response", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/NormalizeEtagInterceptor.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/NormalizeEtagInterceptor.java\nindex 12b866339..c953c165d 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/NormalizeEtagInterceptor.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/interceptor/NormalizeEtagInterceptor.java\n\n@@ -24,8 +24,8 @@ public class NormalizeEtagInterceptor implements Interceptor {\n      *\n      * @param chain Provide access to the response containing ETag header to normalize.\n      *\n-     * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If an IO error occurs while processing the request and response\n+     * @return Response From the next interceptor in the pipeline.\n+     * @throws IOException If an IO error occurs while processing the request and response.\n      */\n     @NonNull\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0OTQ4Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439049482", "bodyText": "What is the reason behind renaming this to rawDownload? Would download be reserved for the TransferClient? Is the word raw something commonly used in the Java world for an operation that directly calls an endpoint or something like that?", "author": "vcolin7", "createdAt": "2020-06-11T20:21:33Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -265,25 +277,41 @@ public ServiceCall getBlobPropertiesWithRestResponse(String containerName,\n     /**\n      * Reads the entire blob.\n      *\n+     * <p>\n+     * This method will execute a raw HTTP GET in order to download a single blob to the destination.\n+     * It is **STRONGLY** recommended that you use the {@link com.azure.android.storage.blob.transfer.TransferClient#download(String, String, String, File)}\n+     * or {@link com.azure.android.storage.blob.transfer.TransferClient#download(String, String, String, Uri)} method instead - that method will\n+     * manage the transfer in the face of changing network conditions, and is able to transfer multiple\n+     * blocks in parallel.\n+     *`\n      * @param containerName The container name.\n      * @param blobName      The blob name.\n+     * @return the response containing blob bytes\n      */\n-    public ResponseBody download(String containerName,\n-                                 String blobName) {\n+    public ResponseBody rawDownload(String containerName,", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5MDM5Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439090392", "bodyText": "It was a preparation for the work of merging TransferClient APIs to StorageClient, similar to what iOS did, i.e. we want to discourage users from using raw GET APIs and encourage to use \"managed\" download. I'm not completely happy with this name though.", "author": "anuchandy", "createdAt": "2020-06-11T21:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0OTQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMjk4Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439102987", "bodyText": "Would it be a bad idea to keep download for both clients but to encourage people to use the managed operation both in the documentation and code samples? Any thoughts on this @bsiegel?", "author": "vcolin7", "createdAt": "2020-06-11T22:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0OTQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwODI1Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439108253", "bodyText": "Oh nevermind, looking at your other PR (#241) I piucked up on what you mean by merging both clients. I think having two different names is good, while I also feel there might be something better than the raw prefix.", "author": "vcolin7", "createdAt": "2020-06-11T22:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0OTQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 954c43e10..994c2e9a7 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -286,7 +286,7 @@ public class StorageBlobClient {\n      *`\n      * @param containerName The container name.\n      * @param blobName      The blob name.\n-     * @return the response containing blob bytes\n+     * @return The response containing the blob's bytes.\n      */\n     public ResponseBody rawDownload(String containerName,\n                                     String blobName) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0OTc3Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439049772", "bodyText": "Same comment about renaming this method.", "author": "vcolin7", "createdAt": "2020-06-11T20:21:58Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -265,25 +277,41 @@ public ServiceCall getBlobPropertiesWithRestResponse(String containerName,\n     /**\n      * Reads the entire blob.\n      *\n+     * <p>\n+     * This method will execute a raw HTTP GET in order to download a single blob to the destination.\n+     * It is **STRONGLY** recommended that you use the {@link com.azure.android.storage.blob.transfer.TransferClient#download(String, String, String, File)}\n+     * or {@link com.azure.android.storage.blob.transfer.TransferClient#download(String, String, String, Uri)} method instead - that method will\n+     * manage the transfer in the face of changing network conditions, and is able to transfer multiple\n+     * blocks in parallel.\n+     *`\n      * @param containerName The container name.\n      * @param blobName      The blob name.\n+     * @return the response containing blob bytes\n      */\n-    public ResponseBody download(String containerName,\n-                                 String blobName) {\n+    public ResponseBody rawDownload(String containerName,\n+                                    String blobName) {\n         return storageBlobServiceClient.download(containerName,\n             blobName);\n     }\n \n     /**\n      * Reads the entire blob.\n      *\n+     * <p>\n+     * This method will execute a raw HTTP GET in order to download a single blob to the destination.\n+     * It is **STRONGLY** recommended that you use the {@link com.azure.android.storage.blob.transfer.TransferClient#download(String, String, String, File)}\n+     * or {@link com.azure.android.storage.blob.transfer.TransferClient#download(String, String, String, Uri)} method instead - that method will\n+     * manage the transfer in the face of changing network conditions, and is able to transfer multiple\n+     * blocks in parallel.\n+     *\n      * @param containerName The container name.\n      * @param blobName      The blob name.\n      * @param callback      Callback that receives the response.\n+     * @return The service call object, representing the request scheduled for execution.\n      */\n-    public ServiceCall download(String containerName,\n-                                String blobName,\n-                                Callback<ResponseBody> callback) {\n+    public ServiceCall rawDownload(String containerName,", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 954c43e10..994c2e9a7 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -286,7 +286,7 @@ public class StorageBlobClient {\n      *`\n      * @param containerName The container name.\n      * @param blobName      The blob name.\n-     * @return the response containing blob bytes\n+     * @return The response containing the blob's bytes.\n      */\n     public ResponseBody rawDownload(String containerName,\n                                     String blobName) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1MDg1Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439050852", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *  @param callback             Callback that receives the response.\n          \n          \n            \n                 * @param callback             Callback that receives the response.", "author": "vcolin7", "createdAt": "2020-06-11T20:23:25Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -239,6 +249,8 @@ public BlobGetPropertiesResponse getBlobPropertiesWithRestResponse(String contai\n      * @param requestId             Provides a client-generated, opaque value with a 1 KB character limit that is\n      *                              recorded in the analytics logs when storage analytics logging is enabled.\n      * @param cpkInfo               Additional parameters for the operation.\n+     *  @param callback             Callback that receives the response.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 954c43e10..994c2e9a7 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -249,7 +249,7 @@ public class StorageBlobClient {\n      * @param requestId             Provides a client-generated, opaque value with a 1 KB character limit that is\n      *                              recorded in the analytics logs when storage analytics logging is enabled.\n      * @param cpkInfo               Additional parameters for the operation.\n-     *  @param callback             Callback that receives the response.\n+     * @param callback             Callback that receives the response.\n      * @return The service call object, representing the request scheduled for execution.\n      */\n     public ServiceCall getBlobPropertiesWithRestResponse(String containerName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1MTA2Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439051067", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the response containing blob bytes\n          \n          \n            \n                 * @return The response containing the blob's bytes.", "author": "vcolin7", "createdAt": "2020-06-11T20:23:42Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -265,25 +277,41 @@ public ServiceCall getBlobPropertiesWithRestResponse(String containerName,\n     /**\n      * Reads the entire blob.\n      *\n+     * <p>\n+     * This method will execute a raw HTTP GET in order to download a single blob to the destination.\n+     * It is **STRONGLY** recommended that you use the {@link com.azure.android.storage.blob.transfer.TransferClient#download(String, String, String, File)}\n+     * or {@link com.azure.android.storage.blob.transfer.TransferClient#download(String, String, String, Uri)} method instead - that method will\n+     * manage the transfer in the face of changing network conditions, and is able to transfer multiple\n+     * blocks in parallel.\n+     *`\n      * @param containerName The container name.\n      * @param blobName      The blob name.\n+     * @return the response containing blob bytes", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 954c43e10..994c2e9a7 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -286,7 +286,7 @@ public class StorageBlobClient {\n      *`\n      * @param containerName The container name.\n      * @param blobName      The blob name.\n-     * @return the response containing blob bytes\n+     * @return The response containing the blob's bytes.\n      */\n     public ResponseBody rawDownload(String containerName,\n                                     String blobName) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1MTY0OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439051648", "bodyText": "Same comment about renaming download.", "author": "vcolin7", "createdAt": "2020-06-11T20:24:50Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -313,17 +348,17 @@ public ServiceCall download(String containerName,\n      * @param cpkInfo               Additional parameters for the operation.\n      * @return The response information returned from the server when downloading a blob.\n      */\n-    public BlobDownloadAsyncResponse downloadWithRestResponse(String containerName,\n-                                                              String blobName,\n-                                                              String snapshot,\n-                                                              Integer timeout,\n-                                                              BlobRange range,\n-                                                              BlobRequestConditions blobRequestConditions,\n-                                                              Boolean getRangeContentMd5,\n-                                                              Boolean getRangeContentCrc64,\n-                                                              String version,\n-                                                              String requestId,\n-                                                              CpkInfo cpkInfo) {\n+    public BlobDownloadResponse rawDownloadWithRestResponse(String containerName,", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1MTcyMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439051720", "bodyText": "Same comment about renaming download.", "author": "vcolin7", "createdAt": "2020-06-11T20:25:00Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -365,19 +407,21 @@ public BlobDownloadAsyncResponse downloadWithRestResponse(String containerName,\n      * @param requestId             Provides a client-generated, opaque value with a 1 KB character limit that is\n      *                              recorded in the analytics logs when storage analytics logging is enabled.\n      * @param cpkInfo               Additional parameters for the operation.\n+     * @param callback              Callback that receives the response.\n+     * @return The service call object, representing the request scheduled for execution.\n      */\n-    public ServiceCall downloadWithRestResponse(String containerName,\n-                                                String blobName,\n-                                                String snapshot,\n-                                                Integer timeout,\n-                                                BlobRange range,\n-                                                BlobRequestConditions blobRequestConditions,\n-                                                Boolean getRangeContentMd5,\n-                                                Boolean getRangeContentCrc64,\n-                                                String version,\n-                                                String requestId,\n-                                                CpkInfo cpkInfo,\n-                                                Callback<BlobDownloadAsyncResponse> callback) {\n+    public ServiceCall rawDownloadWithRestResponse(String containerName,", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1MTk1Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439051956", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the properties of the block blob\n          \n          \n            \n                 * @return The properties of the block blob", "author": "vcolin7", "createdAt": "2020-06-11T20:25:30Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -461,16 +568,30 @@ public ServiceCall stageBlockWithRestResponse(String containerName,\n         return this.storageBlobServiceClient.stageBlockWithRestResponse(containerName,\n             blobName,\n             base64BlockId,\n-            body,\n-            transactionalContentMD5,\n-            transactionalContentCrc64,\n+            blockContent,\n+            contentMd5,\n+            contentCrc64,\n             timeout,\n             leaseId,\n             requestId,\n             cpkInfo,\n             callback);\n     }\n \n+    /**\n+     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob.\n+     * For a block to be written as part of a blob, the block must have been successfully written to the server in a prior\n+     * {@link StorageBlobClient#stageBlock(String, String, String, byte[], byte[])} operation. You can call commit Block List\n+     * to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together.\n+     * You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list,\n+     * or to commit the most recently uploaded version of the block, whichever list it may belong to.\n+     *\n+     * @param containerName  The container name.\n+     * @param blobName       The blob name.\n+     * @param base64BlockIds The block IDs.\n+     * @param overwrite      Indicate whether to overwrite the block list if already exists.\n+     * @return the properties of the block blob", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 954c43e10..994c2e9a7 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -590,7 +590,7 @@ public class StorageBlobClient {\n      * @param blobName       The blob name.\n      * @param base64BlockIds The block IDs.\n      * @param overwrite      Indicate whether to overwrite the block list if already exists.\n-     * @return the properties of the block blob\n+     * @return The properties of the block blob\n      */\n     public BlockBlobItem commitBlockList(String containerName,\n                                          String blobName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1MjQ1OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439052458", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param storageBlobClientId the identifier of the blob storage client to use for the download\n          \n          \n            \n                 * @param storageBlobClientId The identifier of the blob storage client to use for the download", "author": "vcolin7", "createdAt": "2020-06-11T20:26:28Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java", "diffHunk": "@@ -210,10 +210,10 @@ private TransferClient(Context context,\n      * @param storageBlobClientId the identifier of the blob storage client to use for the download", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java\nindex 3ae72c6d7..237383fb2 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java\n\n@@ -207,7 +207,7 @@ public class TransferClient {\n     /**\n      * Download a blob.\n      *\n-     * @param storageBlobClientId the identifier of the blob storage client to use for the download\n+     * @param storageBlobClientId The identifier of the blob storage client to use for the download\n      * @param containerName The container to download the blob from.\n      * @param blobName The name of the target blob to download.\n      * @param writableContent Describes the Content in the device to store the downloaded blob.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1MjY1NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439052654", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param context the application context\n          \n          \n            \n                     * @param context The application context.", "author": "vcolin7", "createdAt": "2020-06-11T20:26:53Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java", "diffHunk": "@@ -607,6 +607,8 @@ private StopCheck(boolean canStop, boolean isUpload) {\n \n         /**\n          * Create a new {@link TransferClient} builder.\n+         *\n+         * @param context the application context", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java\nindex 3ae72c6d7..237383fb2 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java\n\n@@ -608,7 +608,7 @@ public class TransferClient {\n         /**\n          * Create a new {@link TransferClient} builder.\n          *\n-         * @param context the application context\n+         * @param context The application context.\n          */\n         public Builder(@NonNull Context context) {\n             this.context = context;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1Mjc0OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439052748", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param storageBlobClient the blob storage client.\n          \n          \n            \n                     * @param storageBlobClient The blob storage client.", "author": "vcolin7", "createdAt": "2020-06-11T20:27:03Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java", "diffHunk": "@@ -623,8 +625,8 @@ public Builder(@NonNull Context context) {\n          *   it is recommended to use a value unique to your application (e.g. \"MyApplication\").\n          *   If your application uses multiple clients with different configurations, use a value unique\n          *   to both your application and the configuration (e.g. \"MyApplication.userClient\").\n-         * @param storageBlobClient the blob storage client\n-         * @return Builder with the provided blob storage client set\n+         * @param storageBlobClient the blob storage client.", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java\nindex 3ae72c6d7..237383fb2 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java\n\n@@ -625,7 +625,7 @@ public class TransferClient {\n          *   it is recommended to use a value unique to your application (e.g. \"MyApplication\").\n          *   If your application uses multiple clients with different configurations, use a value unique\n          *   to both your application and the configuration (e.g. \"MyApplication.userClient\").\n-         * @param storageBlobClient the blob storage client.\n+         * @param storageBlobClient The blob storage client.\n          * @return Builder with the provided blob storage client set.\n          */\n         public Builder addStorageBlobClient(@NonNull String storageBlobClientId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTg2Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439055862", "bodyText": "Java has two distinct types: BlobDownloadResponse and BlobDownloadAsyncResponse. I originally decided to go for the latter because our use case lined up with what Java has.\nDo you think we will add something like Java's BlobDownloadResponse where no ResponseBody is returned but rather written to something like an OutputStream? I tend to think so.", "author": "vcolin7", "createdAt": "2020-06-11T20:33:49Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/models/BlobDownloadResponse.java", "diffHunk": "@@ -12,21 +12,21 @@\n /**\n  * This class contains the response information returned from the server when downloading a blob.\n  */\n-public final class BlobDownloadAsyncResponse extends ResponseBase<BlobDownloadHeaders, ResponseBody> {\n+public final class BlobDownloadResponse extends ResponseBase<BlobDownloadHeaders, ResponseBody> {", "originalCommit": "82f40498376d1676740955a0b0edf9310826bf8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NTcyMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439085720", "bodyText": "Right, Java has BlobDownloadAsyncResponse to support Flux that asynchronously streams the bytes from the connection, so the text \"async\" in the model indicates that it composes \"async\" Flux.\nIn the Android case, BlobDownloadAsyncResponse  was composing ResponseBody that exposes InputStream from which we can \"synch\"-ronously read the bytes from the connection. This is why I removed the text \"async\", in addition to that, it looks also weird when that type listed in the JavaDoc with our other Response types.", "author": "anuchandy", "createdAt": "2020-06-11T21:42:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwNTUyOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439105529", "bodyText": "Since the decision to read the bytes synchronously would come down to us, do you think there could be a point where we would want to go the fully async route with ResponseBody? (i.e. using byteStream).", "author": "vcolin7", "createdAt": "2020-06-11T22:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExOTUyMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439119520", "bodyText": "byteStream() API returns \"InputStream\", in my previous comment when I said \"sync\" read I mean that the InputStream::read API itself is blocking. i.e. can't do something like below with IS:\nInputStream.readAsync(bytes_count, new CallBack(byte[] bytes) {\n});\nSo even though we can asynchronously return BlobDownloadResponse, we can't asynchronously read the content:\ndownloadAsync(params, new CallBack<BlobDownloadResponse>() {\n    // This is async\n    public void onResponse(BlobDownloadResponse res) {\n         // below read is not async but sync.\n         res.resposeBody.byteStream().read();\n    }\n}", "author": "anuchandy", "createdAt": "2020-06-11T23:11:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3Nzc3Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439577773", "bodyText": "Does this mean we won't be able to asynchronously read content if we are using OkHttp?", "author": "vcolin7", "createdAt": "2020-06-12T18:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNjE2Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439626162", "bodyText": "yes, OkHttp is natively built on blocking socket not based on selectable channel(e.g. netty). But it should be fine in the mobile space, even if we use native UrlConnection (like android SDK from other cloud providers), it still sync. I think we don't have to worry about it at least now (the user can still read from IS on demand instead of buffering).", "author": "anuchandy", "createdAt": "2020-06-12T20:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5Nzk2OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/242#discussion_r439697969", "bodyText": "Thanks for the thorough explanation! :)", "author": "vcolin7", "createdAt": "2020-06-13T01:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTg2Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7d3df2d54fd7224315272059d79b4f81c3defc5d", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7d3df2d54fd7224315272059d79b4f81c3defc5d", "message": "Following consistently in javadoc (pass2)\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-06-11T22:01:24Z", "type": "commit"}]}