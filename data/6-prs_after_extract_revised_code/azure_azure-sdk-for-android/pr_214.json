{"pr_number": 214, "pr_title": "Unit testing core util", "pr_createdAt": "2020-03-10T00:06:59Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/214", "timeline": [{"oid": "67845f0155a5700833dae754fbd7c710ca8aaddb", "url": "https://github.com/Azure/azure-sdk-for-android/commit/67845f0155a5700833dae754fbd7c710ca8aaddb", "message": "Redesigned and refactored parts of Base64Util, Base64UtilTest and Base64UrlTest to get rid of the PowerMock dependency in the project.", "committedDate": "2020-03-17T01:25:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMzQzNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393803437", "bodyText": "This is for testing purposes only right? If not should this be atomic, or locked when modified, as this isn't completely thread-safe right now.", "author": "alzimmermsft", "createdAt": "2020-03-17T16:20:37Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java", "diffHunk": "@@ -14,14 +13,20 @@ private Base64Util() {\n         // Empty constructor to prevent instantiation of this class.\n     }\n \n+    private static Base64Wrapper base64Wrapper = new Base64Android();", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NzYyNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393897625", "bodyText": "It is only for testing purposes. I probably should add a clarifying comment though.", "author": "vcolin7", "createdAt": "2020-03-17T18:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMzQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNDI4Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393924283", "bodyText": "Would it be better to move the interface and class below to their own files?", "author": "vcolin7", "createdAt": "2020-03-17T19:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMzQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NjM2Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r394586362", "bodyText": "Leaving them in this file is fine, I just didn't have a complete understanding of this when I wrote the comment.", "author": "alzimmermsft", "createdAt": "2020-03-18T19:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMzQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java\nindex 910512ea4..44cad5a1c 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java\n\n@@ -13,12 +14,6 @@ public final class Base64Util {\n         // Empty constructor to prevent instantiation of this class.\n     }\n \n-    private static Base64Wrapper base64Wrapper = new Base64Android();\n-\n-    static void setBase64Wrapper(Base64Wrapper newWrapper) {\n-        base64Wrapper = newWrapper;\n-    }\n-\n     /**\n      * Encodes a byte array to Base64.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwNzEwMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393807100", "bodyText": "Is this planned to be used in the public API? If so, instead of maintaining context in this static helper class should a new overload to each API be added which accepts this interface? That way this class remains thread safe and stateless as expected with a static helper class.", "author": "alzimmermsft", "createdAt": "2020-03-17T16:25:52Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java", "diffHunk": "@@ -83,6 +88,35 @@ public static String encodeToString(byte[] src) {\n      * @return The decoded byte array.\n      */\n     public static byte[] decodeString(String encoded) {\n-        return encoded == null ? null : Base64.decode(encoded, Base64.DEFAULT);\n+        return encoded == null ? null : base64Wrapper.decode(encoded, Base64.DEFAULT);\n+    }\n+\n+    interface Base64Wrapper {", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwMTAxOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393901018", "bodyText": "This is not planned to be a part of the public API. The reason I wrote this interface was so we wouldn't have to mock the static methods in Android's Base64 class. This is due to a couple of reasons:\n\nUnfortunately, we cannot use Java's version of this class since it only works with a higher Android version than our supported minimum.\nWe cannot access the Android framework's classes in unit tests, which are only accessible when running on the actual operating system on an emulator or physical device. Unit tests run on the local JVM.", "author": "vcolin7", "createdAt": "2020-03-17T18:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwNzEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java\nindex 910512ea4..44cad5a1c 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/util/Base64Util.java\n\n@@ -88,35 +83,6 @@ public final class Base64Util {\n      * @return The decoded byte array.\n      */\n     public static byte[] decodeString(String encoded) {\n-        return encoded == null ? null : base64Wrapper.decode(encoded, Base64.DEFAULT);\n-    }\n-\n-    interface Base64Wrapper {\n-        byte[] encode(byte[] input, int flags);\n-        String encodeToString(byte[] input, int flags);\n-        byte[] decode(byte[] input, int flags);\n-        byte[] decode(String input, int flags);\n-    }\n-\n-    static class Base64Android implements Base64Wrapper {\n-        @Override\n-        public byte[] encode(byte[] input, int flags) {\n-            return Base64.encode(input, flags);\n-        }\n-\n-        @Override\n-        public String encodeToString(byte[] input, int flags) {\n-            return Base64.encodeToString(input, flags);\n-        }\n-\n-        @Override\n-        public byte[] decode(byte[] input, int flags) {\n-            return Base64.decode(input, flags);\n-        }\n-\n-        @Override\n-        public byte[] decode(String input, int flags) {\n-            return Base64.decode(input, flags);\n-        }\n+        return encoded == null ? null : Base64.decode(encoded, Base64.DEFAULT);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwODI4Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393808282", "bodyText": "Is a wrapper being set as Base64 isn't consistent between Android versions or between devices?", "author": "alzimmermsft", "createdAt": "2020-03-17T16:27:32Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class Base64UrlTest {\n+    @BeforeClass\n+    public static void setUp() {\n+        Base64Util.setBase64Wrapper(new Base64Stub());", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyMzcwOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393923708", "bodyText": "The reason to set this here is that we cannot call Android framework's classes like Base64 from unit tests and we cannot use Java's Base64 class because that's only available at a later Android version. To get around this and not use something like PowerMock to mock static methods like Base64.encode(), I created the Base64Wrapper interface. Normally it will always be set to Base64Android and for unit tests it will be set to Base64Stub.", "author": "vcolin7", "createdAt": "2020-03-17T19:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwODI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java\ndeleted file mode 100644\nindex cf1a39bdc..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java\n+++ /dev/null\n\n@@ -1,201 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import java.util.Arrays;\n-\n-import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public class Base64UrlTest {\n-    @BeforeClass\n-    public static void setUp() {\n-        Base64Util.setBase64Wrapper(new Base64Stub());\n-    }\n-\n-    @Test\n-    public void constructor_withNullBytes() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyBytes() {\n-        final Base64Url base64Url = new Base64Url(new byte[0]);\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyBytes() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_BYTES);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNullString() {\n-        final Base64Url base64Url = new Base64Url((String) null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyString() {\n-        final Base64Url base64Url = new Base64Url(\"\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyDoubleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\\"\\\"\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptySingleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\'\\'\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyString() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyDoubleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\\"\" + ENCODED_STRING + \"\\\"\");\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptySingleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\'\" + ENCODED_STRING + \"\\'\");\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withNullBytes() {\n-        final Base64Url base64Url = Base64Url.encode(null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withEmptyBytes() {\n-        final Base64Url base64Url = Base64Url.encode(new byte[0]);\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withNonEmptyBytes() {\n-        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void toString_withSimpleString() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n-\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void toString_withNullString() {\n-        final Base64Url base64Url = new Base64Url((String) null);\n-\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void hashCode_equalToEncodedBytesHashCode() {\n-        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n-\n-        assertEquals(Arrays.hashCode(ENCODED_BYTES), base64Url.hashCode());\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void equalTo_identicalObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-        final Base64Url otherBase64Url = new Base64Url((byte[]) null);\n-\n-        assertTrue(base64Url.equals(otherBase64Url));\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void notEqualTo_differentObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-        final Base64Url otherBase64Url = new Base64Url(new byte[0]);\n-\n-        assertFalse(base64Url.equals(otherBase64Url));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n-    @Test\n-    public void notEqualTo_nullObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertFalse(base64Url.equals(null));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n-    @Test\n-    public void notEqualTo_objectFromDifferentClass() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertFalse(base64Url.equals(\"\"));\n-    }\n-\n-    private static void assertEmptyString(String input) {\n-        assertEquals(\"\", input);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMTE3Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393811173", "bodyText": "Any reason that assertEquals can't be used here? It would allow for the suppression to be removed.", "author": "alzimmermsft", "createdAt": "2020-03-17T16:31:43Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class Base64UrlTest {\n+    @BeforeClass\n+    public static void setUp() {\n+        Base64Util.setBase64Wrapper(new Base64Stub());\n+    }\n+\n+    @Test\n+    public void constructor_withNullBytes() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyBytes() {\n+        final Base64Url base64Url = new Base64Url(new byte[0]);\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyBytes() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_BYTES);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNullString() {\n+        final Base64Url base64Url = new Base64Url((String) null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyString() {\n+        final Base64Url base64Url = new Base64Url(\"\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyDoubleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\\"\\\"\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptySingleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\'\\'\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyString() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyDoubleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\\"\" + ENCODED_STRING + \"\\\"\");\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptySingleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\'\" + ENCODED_STRING + \"\\'\");\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withNullBytes() {\n+        final Base64Url base64Url = Base64Url.encode(null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withEmptyBytes() {\n+        final Base64Url base64Url = Base64Url.encode(new byte[0]);\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withNonEmptyBytes() {\n+        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void toString_withSimpleString() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n+\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void toString_withNullString() {\n+        final Base64Url base64Url = new Base64Url((String) null);\n+\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void hashCode_equalToEncodedBytesHashCode() {\n+        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n+\n+        assertEquals(Arrays.hashCode(ENCODED_BYTES), base64Url.hashCode());\n+    }\n+\n+    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n+    @Test\n+    public void equalTo_identicalObject() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+        final Base64Url otherBase64Url = new Base64Url((byte[]) null);\n+\n+        assertTrue(base64Url.equals(otherBase64Url));", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwMjAxMQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393902011", "bodyText": "There is no reason not to use assertEquals. I must have missed it. Thanks for pointing it out!", "author": "vcolin7", "createdAt": "2020-03-17T18:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMTE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java\ndeleted file mode 100644\nindex cf1a39bdc..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java\n+++ /dev/null\n\n@@ -1,201 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import java.util.Arrays;\n-\n-import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public class Base64UrlTest {\n-    @BeforeClass\n-    public static void setUp() {\n-        Base64Util.setBase64Wrapper(new Base64Stub());\n-    }\n-\n-    @Test\n-    public void constructor_withNullBytes() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyBytes() {\n-        final Base64Url base64Url = new Base64Url(new byte[0]);\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyBytes() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_BYTES);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNullString() {\n-        final Base64Url base64Url = new Base64Url((String) null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyString() {\n-        final Base64Url base64Url = new Base64Url(\"\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyDoubleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\\"\\\"\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptySingleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\'\\'\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyString() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyDoubleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\\"\" + ENCODED_STRING + \"\\\"\");\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptySingleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\'\" + ENCODED_STRING + \"\\'\");\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withNullBytes() {\n-        final Base64Url base64Url = Base64Url.encode(null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withEmptyBytes() {\n-        final Base64Url base64Url = Base64Url.encode(new byte[0]);\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withNonEmptyBytes() {\n-        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void toString_withSimpleString() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n-\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void toString_withNullString() {\n-        final Base64Url base64Url = new Base64Url((String) null);\n-\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void hashCode_equalToEncodedBytesHashCode() {\n-        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n-\n-        assertEquals(Arrays.hashCode(ENCODED_BYTES), base64Url.hashCode());\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void equalTo_identicalObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-        final Base64Url otherBase64Url = new Base64Url((byte[]) null);\n-\n-        assertTrue(base64Url.equals(otherBase64Url));\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void notEqualTo_differentObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-        final Base64Url otherBase64Url = new Base64Url(new byte[0]);\n-\n-        assertFalse(base64Url.equals(otherBase64Url));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n-    @Test\n-    public void notEqualTo_nullObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertFalse(base64Url.equals(null));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n-    @Test\n-    public void notEqualTo_objectFromDifferentClass() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertFalse(base64Url.equals(\"\"));\n-    }\n-\n-    private static void assertEmptyString(String input) {\n-        assertEquals(\"\", input);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMTM1OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393811358", "bodyText": "Same question", "author": "alzimmermsft", "createdAt": "2020-03-17T16:32:00Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class Base64UrlTest {\n+    @BeforeClass\n+    public static void setUp() {\n+        Base64Util.setBase64Wrapper(new Base64Stub());\n+    }\n+\n+    @Test\n+    public void constructor_withNullBytes() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyBytes() {\n+        final Base64Url base64Url = new Base64Url(new byte[0]);\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyBytes() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_BYTES);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNullString() {\n+        final Base64Url base64Url = new Base64Url((String) null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyString() {\n+        final Base64Url base64Url = new Base64Url(\"\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyDoubleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\\"\\\"\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptySingleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\'\\'\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyString() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyDoubleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\\"\" + ENCODED_STRING + \"\\\"\");\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptySingleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\'\" + ENCODED_STRING + \"\\'\");\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withNullBytes() {\n+        final Base64Url base64Url = Base64Url.encode(null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withEmptyBytes() {\n+        final Base64Url base64Url = Base64Url.encode(new byte[0]);\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withNonEmptyBytes() {\n+        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void toString_withSimpleString() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n+\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void toString_withNullString() {\n+        final Base64Url base64Url = new Base64Url((String) null);\n+\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void hashCode_equalToEncodedBytesHashCode() {\n+        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n+\n+        assertEquals(Arrays.hashCode(ENCODED_BYTES), base64Url.hashCode());\n+    }\n+\n+    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n+    @Test\n+    public void equalTo_identicalObject() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+        final Base64Url otherBase64Url = new Base64Url((byte[]) null);\n+\n+        assertTrue(base64Url.equals(otherBase64Url));\n+    }\n+\n+    @SuppressWarnings(\"SimplifiableJUnitAssertion\")", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwMjIyNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393902225", "bodyText": "See answer above.", "author": "vcolin7", "createdAt": "2020-03-17T18:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMTM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java\ndeleted file mode 100644\nindex cf1a39bdc..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java\n+++ /dev/null\n\n@@ -1,201 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import java.util.Arrays;\n-\n-import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public class Base64UrlTest {\n-    @BeforeClass\n-    public static void setUp() {\n-        Base64Util.setBase64Wrapper(new Base64Stub());\n-    }\n-\n-    @Test\n-    public void constructor_withNullBytes() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyBytes() {\n-        final Base64Url base64Url = new Base64Url(new byte[0]);\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyBytes() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_BYTES);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNullString() {\n-        final Base64Url base64Url = new Base64Url((String) null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyString() {\n-        final Base64Url base64Url = new Base64Url(\"\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyDoubleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\\"\\\"\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptySingleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\'\\'\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyString() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyDoubleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\\"\" + ENCODED_STRING + \"\\\"\");\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptySingleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\'\" + ENCODED_STRING + \"\\'\");\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withNullBytes() {\n-        final Base64Url base64Url = Base64Url.encode(null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withEmptyBytes() {\n-        final Base64Url base64Url = Base64Url.encode(new byte[0]);\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withNonEmptyBytes() {\n-        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void toString_withSimpleString() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n-\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void toString_withNullString() {\n-        final Base64Url base64Url = new Base64Url((String) null);\n-\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void hashCode_equalToEncodedBytesHashCode() {\n-        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n-\n-        assertEquals(Arrays.hashCode(ENCODED_BYTES), base64Url.hashCode());\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void equalTo_identicalObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-        final Base64Url otherBase64Url = new Base64Url((byte[]) null);\n-\n-        assertTrue(base64Url.equals(otherBase64Url));\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void notEqualTo_differentObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-        final Base64Url otherBase64Url = new Base64Url(new byte[0]);\n-\n-        assertFalse(base64Url.equals(otherBase64Url));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n-    @Test\n-    public void notEqualTo_nullObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertFalse(base64Url.equals(null));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n-    @Test\n-    public void notEqualTo_objectFromDifferentClass() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertFalse(base64Url.equals(\"\"));\n-    }\n-\n-    private static void assertEmptyString(String input) {\n-        assertEquals(\"\", input);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMjMxNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393812317", "bodyText": "Does Base64Url's equals overload compare against the String representation? If so could this be assertNull(base64Url.toString())?", "author": "alzimmermsft", "createdAt": "2020-03-17T16:33:27Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class Base64UrlTest {\n+    @BeforeClass\n+    public static void setUp() {\n+        Base64Util.setBase64Wrapper(new Base64Stub());\n+    }\n+\n+    @Test\n+    public void constructor_withNullBytes() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyBytes() {\n+        final Base64Url base64Url = new Base64Url(new byte[0]);\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyBytes() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_BYTES);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNullString() {\n+        final Base64Url base64Url = new Base64Url((String) null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyString() {\n+        final Base64Url base64Url = new Base64Url(\"\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyDoubleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\\"\\\"\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptySingleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\'\\'\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyString() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyDoubleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\\"\" + ENCODED_STRING + \"\\\"\");\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptySingleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\'\" + ENCODED_STRING + \"\\'\");\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withNullBytes() {\n+        final Base64Url base64Url = Base64Url.encode(null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withEmptyBytes() {\n+        final Base64Url base64Url = Base64Url.encode(new byte[0]);\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withNonEmptyBytes() {\n+        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void toString_withSimpleString() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n+\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void toString_withNullString() {\n+        final Base64Url base64Url = new Base64Url((String) null);\n+\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void hashCode_equalToEncodedBytesHashCode() {\n+        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n+\n+        assertEquals(Arrays.hashCode(ENCODED_BYTES), base64Url.hashCode());\n+    }\n+\n+    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n+    @Test\n+    public void equalTo_identicalObject() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+        final Base64Url otherBase64Url = new Base64Url((byte[]) null);\n+\n+        assertTrue(base64Url.equals(otherBase64Url));\n+    }\n+\n+    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n+    @Test\n+    public void notEqualTo_differentObject() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+        final Base64Url otherBase64Url = new Base64Url(new byte[0]);\n+\n+        assertFalse(base64Url.equals(otherBase64Url));\n+    }\n+\n+    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n+    @Test\n+    public void notEqualTo_nullObject() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+\n+        assertFalse(base64Url.equals(null));", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzNjY2Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393936667", "bodyText": "You are right, we don't use the String representation of Base64Url for comparisons so this can be made to use assertNull.", "author": "vcolin7", "createdAt": "2020-03-17T20:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMjMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java\ndeleted file mode 100644\nindex cf1a39bdc..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java\n+++ /dev/null\n\n@@ -1,201 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import java.util.Arrays;\n-\n-import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public class Base64UrlTest {\n-    @BeforeClass\n-    public static void setUp() {\n-        Base64Util.setBase64Wrapper(new Base64Stub());\n-    }\n-\n-    @Test\n-    public void constructor_withNullBytes() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyBytes() {\n-        final Base64Url base64Url = new Base64Url(new byte[0]);\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyBytes() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_BYTES);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNullString() {\n-        final Base64Url base64Url = new Base64Url((String) null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyString() {\n-        final Base64Url base64Url = new Base64Url(\"\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyDoubleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\\"\\\"\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptySingleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\'\\'\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyString() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyDoubleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\\"\" + ENCODED_STRING + \"\\\"\");\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptySingleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\'\" + ENCODED_STRING + \"\\'\");\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withNullBytes() {\n-        final Base64Url base64Url = Base64Url.encode(null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withEmptyBytes() {\n-        final Base64Url base64Url = Base64Url.encode(new byte[0]);\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withNonEmptyBytes() {\n-        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void toString_withSimpleString() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n-\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void toString_withNullString() {\n-        final Base64Url base64Url = new Base64Url((String) null);\n-\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void hashCode_equalToEncodedBytesHashCode() {\n-        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n-\n-        assertEquals(Arrays.hashCode(ENCODED_BYTES), base64Url.hashCode());\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void equalTo_identicalObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-        final Base64Url otherBase64Url = new Base64Url((byte[]) null);\n-\n-        assertTrue(base64Url.equals(otherBase64Url));\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void notEqualTo_differentObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-        final Base64Url otherBase64Url = new Base64Url(new byte[0]);\n-\n-        assertFalse(base64Url.equals(otherBase64Url));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n-    @Test\n-    public void notEqualTo_nullObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertFalse(base64Url.equals(null));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n-    @Test\n-    public void notEqualTo_objectFromDifferentClass() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertFalse(base64Url.equals(\"\"));\n-    }\n-\n-    private static void assertEmptyString(String input) {\n-        assertEquals(\"\", input);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMjkxMQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393812911", "bodyText": "Same comment as notEqualTo_nullObject.", "author": "alzimmermsft", "createdAt": "2020-03-17T16:34:19Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class Base64UrlTest {\n+    @BeforeClass\n+    public static void setUp() {\n+        Base64Util.setBase64Wrapper(new Base64Stub());\n+    }\n+\n+    @Test\n+    public void constructor_withNullBytes() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyBytes() {\n+        final Base64Url base64Url = new Base64Url(new byte[0]);\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyBytes() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_BYTES);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNullString() {\n+        final Base64Url base64Url = new Base64Url((String) null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyString() {\n+        final Base64Url base64Url = new Base64Url(\"\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptyDoubleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\\"\\\"\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withEmptySingleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\'\\'\");\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyString() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptyDoubleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\\"\" + ENCODED_STRING + \"\\\"\");\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void constructor_withNonEmptySingleQuotedString() {\n+        final Base64Url base64Url = new Base64Url(\"\\'\" + ENCODED_STRING + \"\\'\");\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withNullBytes() {\n+        final Base64Url base64Url = Base64Url.encode(null);\n+\n+        assertNull(base64Url.encodedBytes());\n+        assertNull(base64Url.decodedBytes());\n+        assertEmptyString(base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withEmptyBytes() {\n+        final Base64Url base64Url = Base64Url.encode(new byte[0]);\n+\n+        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n+        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void encode_withNonEmptyBytes() {\n+        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n+\n+        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n+        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void toString_withSimpleString() {\n+        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n+\n+        assertEquals(ENCODED_STRING, base64Url.toString());\n+    }\n+\n+    @Test\n+    public void toString_withNullString() {\n+        final Base64Url base64Url = new Base64Url((String) null);\n+\n+        assertEquals(\"\", base64Url.toString());\n+    }\n+\n+    @Test\n+    public void hashCode_equalToEncodedBytesHashCode() {\n+        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n+\n+        assertEquals(Arrays.hashCode(ENCODED_BYTES), base64Url.hashCode());\n+    }\n+\n+    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n+    @Test\n+    public void equalTo_identicalObject() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+        final Base64Url otherBase64Url = new Base64Url((byte[]) null);\n+\n+        assertTrue(base64Url.equals(otherBase64Url));\n+    }\n+\n+    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n+    @Test\n+    public void notEqualTo_differentObject() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+        final Base64Url otherBase64Url = new Base64Url(new byte[0]);\n+\n+        assertFalse(base64Url.equals(otherBase64Url));\n+    }\n+\n+    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n+    @Test\n+    public void notEqualTo_nullObject() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+\n+        assertFalse(base64Url.equals(null));\n+    }\n+\n+    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n+    @Test\n+    public void notEqualTo_objectFromDifferentClass() {\n+        final Base64Url base64Url = new Base64Url((byte[]) null);\n+\n+        assertFalse(base64Url.equals(\"\"));", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzNzgwOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393937808", "bodyText": "Here we can just use assertNotEquals.", "author": "vcolin7", "createdAt": "2020-03-17T20:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMjkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java\ndeleted file mode 100644\nindex cf1a39bdc..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UrlTest.java\n+++ /dev/null\n\n@@ -1,201 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import java.util.Arrays;\n-\n-import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public class Base64UrlTest {\n-    @BeforeClass\n-    public static void setUp() {\n-        Base64Util.setBase64Wrapper(new Base64Stub());\n-    }\n-\n-    @Test\n-    public void constructor_withNullBytes() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyBytes() {\n-        final Base64Url base64Url = new Base64Url(new byte[0]);\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyBytes() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_BYTES);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNullString() {\n-        final Base64Url base64Url = new Base64Url((String) null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyString() {\n-        final Base64Url base64Url = new Base64Url(\"\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptyDoubleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\\"\\\"\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withEmptySingleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\'\\'\");\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyString() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptyDoubleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\\"\" + ENCODED_STRING + \"\\\"\");\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void constructor_withNonEmptySingleQuotedString() {\n-        final Base64Url base64Url = new Base64Url(\"\\'\" + ENCODED_STRING + \"\\'\");\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withNullBytes() {\n-        final Base64Url base64Url = Base64Url.encode(null);\n-\n-        assertNull(base64Url.encodedBytes());\n-        assertNull(base64Url.decodedBytes());\n-        assertEmptyString(base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withEmptyBytes() {\n-        final Base64Url base64Url = Base64Url.encode(new byte[0]);\n-\n-        assertArrayEquals(new byte[0], base64Url.encodedBytes());\n-        assertArrayEquals(new byte[0], base64Url.decodedBytes());\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void encode_withNonEmptyBytes() {\n-        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n-\n-        assertArrayEquals(ENCODED_BYTES, base64Url.encodedBytes());\n-        assertArrayEquals(DECODED_BYTES, base64Url.decodedBytes());\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void toString_withSimpleString() {\n-        final Base64Url base64Url = new Base64Url(ENCODED_STRING);\n-\n-        assertEquals(ENCODED_STRING, base64Url.toString());\n-    }\n-\n-    @Test\n-    public void toString_withNullString() {\n-        final Base64Url base64Url = new Base64Url((String) null);\n-\n-        assertEquals(\"\", base64Url.toString());\n-    }\n-\n-    @Test\n-    public void hashCode_equalToEncodedBytesHashCode() {\n-        final Base64Url base64Url = Base64Url.encode(DECODED_BYTES);\n-\n-        assertEquals(Arrays.hashCode(ENCODED_BYTES), base64Url.hashCode());\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void equalTo_identicalObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-        final Base64Url otherBase64Url = new Base64Url((byte[]) null);\n-\n-        assertTrue(base64Url.equals(otherBase64Url));\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void notEqualTo_differentObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-        final Base64Url otherBase64Url = new Base64Url(new byte[0]);\n-\n-        assertFalse(base64Url.equals(otherBase64Url));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n-    @Test\n-    public void notEqualTo_nullObject() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertFalse(base64Url.equals(null));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n-    @Test\n-    public void notEqualTo_objectFromDifferentClass() {\n-        final Base64Url base64Url = new Base64Url((byte[]) null);\n-\n-        assertFalse(base64Url.equals(\"\"));\n-    }\n-\n-    private static void assertEmptyString(String input) {\n-        assertEquals(\"\", input);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNDQ0NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393814444", "bodyText": "I think some tests should be added that use non-null, right now this will get good code coverage but is missing real world scenarios.", "author": "alzimmermsft", "createdAt": "2020-03-17T16:36:40Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UtilTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n+import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+public class Base64UtilTest {\n+    @BeforeClass\n+    public static void setUp() {\n+        Base64Util.setBase64Wrapper(new Base64Stub());\n+    }\n+\n+    @Test\n+    public void encode_byteArray() {\n+        assertArrayEquals(ENCODED_BYTES, Base64Util.encode(DECODED_BYTES));\n+    }\n+\n+    @Test\n+    public void decode_byteArray() {\n+        assertArrayEquals(DECODED_BYTES, Base64Util.decode(ENCODED_BYTES));\n+    }\n+\n+    @Test\n+    public void encode_nullByteArray() {\n+        assertNull(Base64Util.encode(null));\n+    }\n+\n+    @Test\n+    public void decode_nullByteArray() {\n+        assertNull(Base64Util.decode(null));\n+    }\n+\n+    @Test\n+    public void encode_toString() {\n+        assertEquals(ENCODED_STRING, Base64Util.encodeToString(DECODED_BYTES));\n+    }\n+\n+    @Test\n+    public void decode_string() {\n+        assertArrayEquals(DECODED_BYTES, Base64Util.decodeString(ENCODED_STRING));\n+    }\n+\n+    @Test\n+    public void decode_nullString() {\n+        assertNull(Base64Util.decodeString(null));\n+    }\n+\n+    @Test\n+    public void encodeUrlWithoutPadding() {\n+        assertNull(Base64Util.encodeUrlWithoutPadding(null));\n+    }\n+\n+    @Test\n+    public void encodeUrlWithoutPadding_usingNullValue() {\n+        assertNull(Base64Util.encodeUrlWithoutPadding(null));\n+    }\n+\n+    @Test\n+    public void decodeUrl_fromNullByteArray() {\n+        assertNull(Base64Util.decodeUrl((String) null));\n+    }\n+\n+    @Test\n+    public void decodeUrl_fromNullString() {\n+        assertNull(Base64Util.decodeUrl((String) null));\n+    }", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0NDAwNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393944004", "bodyText": "Based on the test names, it actually seems I was planning to write the non-null tests but somehow got busy with something else and missed them.", "author": "vcolin7", "createdAt": "2020-03-17T20:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNDQ0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0NjIwNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393946204", "bodyText": "I will correct and add tests that check for the positive scenarios when we have a non-null source and non-empty string.", "author": "vcolin7", "createdAt": "2020-03-17T20:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNDQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UtilTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UtilTest.java\ndeleted file mode 100644\nindex 0fb126dc9..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/Base64UtilTest.java\n+++ /dev/null\n\n@@ -1,76 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import static com.azure.android.core.util.Base64Stub.DECODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_BYTES;\n-import static com.azure.android.core.util.Base64Stub.ENCODED_STRING;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-\n-public class Base64UtilTest {\n-    @BeforeClass\n-    public static void setUp() {\n-        Base64Util.setBase64Wrapper(new Base64Stub());\n-    }\n-\n-    @Test\n-    public void encode_byteArray() {\n-        assertArrayEquals(ENCODED_BYTES, Base64Util.encode(DECODED_BYTES));\n-    }\n-\n-    @Test\n-    public void decode_byteArray() {\n-        assertArrayEquals(DECODED_BYTES, Base64Util.decode(ENCODED_BYTES));\n-    }\n-\n-    @Test\n-    public void encode_nullByteArray() {\n-        assertNull(Base64Util.encode(null));\n-    }\n-\n-    @Test\n-    public void decode_nullByteArray() {\n-        assertNull(Base64Util.decode(null));\n-    }\n-\n-    @Test\n-    public void encode_toString() {\n-        assertEquals(ENCODED_STRING, Base64Util.encodeToString(DECODED_BYTES));\n-    }\n-\n-    @Test\n-    public void decode_string() {\n-        assertArrayEquals(DECODED_BYTES, Base64Util.decodeString(ENCODED_STRING));\n-    }\n-\n-    @Test\n-    public void decode_nullString() {\n-        assertNull(Base64Util.decodeString(null));\n-    }\n-\n-    @Test\n-    public void encodeUrlWithoutPadding() {\n-        assertNull(Base64Util.encodeUrlWithoutPadding(null));\n-    }\n-\n-    @Test\n-    public void encodeUrlWithoutPadding_usingNullValue() {\n-        assertNull(Base64Util.encodeUrlWithoutPadding(null));\n-    }\n-\n-    @Test\n-    public void decodeUrl_fromNullByteArray() {\n-        assertNull(Base64Util.decodeUrl((String) null));\n-    }\n-\n-    @Test\n-    public void decodeUrl_fromNullString() {\n-        assertNull(Base64Util.decodeUrl((String) null));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNDcwMQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393814701", "bodyText": "\u2764\ufe0f \ud83d\ude04", "author": "alzimmermsft", "createdAt": "2020-03-17T16:37:04Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/CoreUtilTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.azure.android.core.util.CoreUtil.isNullOrEmpty;\n+import static com.azure.android.core.util.CoreUtil.replace;\n+import static com.azure.android.core.util.CoreUtil.toTitleCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CoreUtilTest {\n+    @Test\n+    public void isNullOrEmpty_returnsTrue_withNullString() {\n+        assertTrue(isNullOrEmpty(null));\n+    }\n+\n+    @Test\n+    public void isNullOrEmpty_returnsTrue_withEmptyString() {\n+        assertTrue(isNullOrEmpty(\"\"));\n+    }\n+\n+    @Test\n+    public void isNullOrEmpty_returnsTrue_withEmptyStringBuilder() {\n+        assertTrue(isNullOrEmpty(new StringBuilder()));\n+    }\n+\n+    @Test\n+    public void isNullOrEmpty_returnsFalse_withNonEmptyString() {\n+        assertFalse(isNullOrEmpty(\"Test\"));\n+    }\n+\n+    @Test\n+    public void replaceWithSingleCharacters_inString() {\n+        Map<Character, CharSequence> pairs = new HashMap<>();\n+        pairs.put('a', \"A\");\n+        pairs.put(' ', \"_\");\n+        String testString = \"Ohana means family.\";", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/CoreUtilTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/CoreUtilTest.java\ndeleted file mode 100644\nindex 18a1d279d..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/CoreUtilTest.java\n+++ /dev/null\n\n@@ -1,112 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.Test;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static com.azure.android.core.util.CoreUtil.isNullOrEmpty;\n-import static com.azure.android.core.util.CoreUtil.replace;\n-import static com.azure.android.core.util.CoreUtil.toTitleCase;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public class CoreUtilTest {\n-    @Test\n-    public void isNullOrEmpty_returnsTrue_withNullString() {\n-        assertTrue(isNullOrEmpty(null));\n-    }\n-\n-    @Test\n-    public void isNullOrEmpty_returnsTrue_withEmptyString() {\n-        assertTrue(isNullOrEmpty(\"\"));\n-    }\n-\n-    @Test\n-    public void isNullOrEmpty_returnsTrue_withEmptyStringBuilder() {\n-        assertTrue(isNullOrEmpty(new StringBuilder()));\n-    }\n-\n-    @Test\n-    public void isNullOrEmpty_returnsFalse_withNonEmptyString() {\n-        assertFalse(isNullOrEmpty(\"Test\"));\n-    }\n-\n-    @Test\n-    public void replaceWithSingleCharacters_inString() {\n-        Map<Character, CharSequence> pairs = new HashMap<>();\n-        pairs.put('a', \"A\");\n-        pairs.put(' ', \"_\");\n-        String testString = \"Ohana means family.\";\n-\n-        assertEquals(\"OhAnA_meAns_fAmily.\", replace(testString, pairs).toString());\n-    }\n-\n-    @Test\n-    public void replaceWithMultipleCharacters_inString() {\n-        Map<Character, CharSequence> pairs = new HashMap<>();\n-        pairs.put('a', \"Aloha\");\n-        pairs.put(' ', \"_____\");\n-        String testString = \"Ohana means family.\";\n-\n-        assertEquals(\"OhAlohanAloha_____meAlohans_____fAlohamily.\", replace(testString, pairs).toString());\n-    }\n-\n-    @Test\n-    public void replaceCharacters_inStringBuilder() {\n-        Map<Character, CharSequence> pairs = new HashMap<>();\n-        pairs.put('a', \"A\");\n-        pairs.put(' ', \"_\");\n-        StringBuilder stringBuilder = new StringBuilder(\"Ohana means family.\");\n-\n-        //noinspection ConstantConditions\n-        assertEquals(\"OhAnA_meAns_fAmily.\", replace(stringBuilder, pairs).toString());\n-    }\n-\n-    @Test\n-    public void replaceCharacters_inNullString() {\n-        Map<Character, CharSequence> pairs = new HashMap<>();\n-        pairs.put('a', \"A\");\n-        pairs.put(' ', \"_\");\n-\n-        assertNull(replace(null, pairs));\n-    }\n-\n-    @Test\n-    public void replaceNull_inNullString() {\n-        Map<Character, CharSequence> pairs = new HashMap<>();\n-        pairs.put(null, \"Ohana means family.\");\n-\n-        assertEquals(\"Ohana means family.\", replace(null, pairs));\n-    }\n-\n-    @Test\n-    public void applyTitleCase_toString() {\n-        assertEquals(\"Test String With Multiple Words.\", toTitleCase(\"Test string with multiple words.\").toString());\n-    }\n-\n-    @Test\n-    public void applyTitleCase_toString_WithWordsSeparatedBySpecialCharacters() {\n-        assertEquals(\"Test_string_with_multiple_words.\", toTitleCase(\"Test_string_with_multiple_words.\").toString());\n-    }\n-\n-    @Test\n-    public void applyTitleCase_toStringBuilder() {\n-        assertEquals(\"Test String With Multiple Words.\", toTitleCase(new StringBuilder(\"Test string with multiple words.\")).toString());\n-    }\n-\n-    @Test\n-    public void applyTitleCase_toEmptyString() {\n-        assertEquals(\"\", toTitleCase(\"\").toString());\n-    }\n-\n-    @Test\n-    public void applyTitleCase_toNullString() {\n-        assertNull(toTitleCase(null));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMDkyMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393820920", "bodyText": "Unless we have overridden the hash code method I wouldn't eagerly test this as it is dependent on the underlying JVM and has the potential for collisions.", "author": "alzimmermsft", "createdAt": "2020-03-17T16:46:00Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/DateTimeRfc1123Test.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.Test;\n+import org.threeten.bp.LocalDateTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.ZoneId;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+\n+import java.util.Locale;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class DateTimeRfc1123Test {\n+    private static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n+        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n+    private static final String TEST_DATE = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n+\n+    @Test\n+    public void constructor_withOffsetDateTime() {\n+        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n+            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n+\n+        assertEquals(TEST_DATE, dateTimeRfc1123.getDateTime().format(RFC1123_DATE_TIME_FORMATTER));\n+    }\n+\n+    @Test\n+    public void constructor_withString() {\n+        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(TEST_DATE);\n+\n+        assertEquals(TEST_DATE, dateTimeRfc1123.getDateTime().format(RFC1123_DATE_TIME_FORMATTER));\n+    }\n+\n+    @Test\n+    public void convertToString() {\n+        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n+            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n+\n+        assertEquals(TEST_DATE, dateTimeRfc1123.toString());\n+    }\n+\n+    @Test\n+    public void getHashCode() {\n+        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n+            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n+\n+        assertEquals(1468106660, dateTimeRfc1123.hashCode());", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNjQyMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393906420", "bodyText": "We did override it in our DateTimeRfc1123 class, however, it just uses the hashCode method in OffsetDateTime. I think I will remove this test for the time being.", "author": "vcolin7", "createdAt": "2020-03-17T19:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMDkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxMTc4OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393911789", "bodyText": "Actually, after digging around on the internet, I think I will take the approach showed here.", "author": "vcolin7", "createdAt": "2020-03-17T19:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMDkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/DateTimeRfc1123Test.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/DateTimeRfc1123Test.java\ndeleted file mode 100644\nindex edb4b20f5..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/DateTimeRfc1123Test.java\n+++ /dev/null\n\n@@ -1,91 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.Test;\n-import org.threeten.bp.LocalDateTime;\n-import org.threeten.bp.OffsetDateTime;\n-import org.threeten.bp.ZoneId;\n-import org.threeten.bp.ZoneOffset;\n-import org.threeten.bp.format.DateTimeFormatter;\n-\n-import java.util.Locale;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n-public class DateTimeRfc1123Test {\n-    private static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n-        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n-    private static final String TEST_DATE = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n-\n-    @Test\n-    public void constructor_withOffsetDateTime() {\n-        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-\n-        assertEquals(TEST_DATE, dateTimeRfc1123.getDateTime().format(RFC1123_DATE_TIME_FORMATTER));\n-    }\n-\n-    @Test\n-    public void constructor_withString() {\n-        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(TEST_DATE);\n-\n-        assertEquals(TEST_DATE, dateTimeRfc1123.getDateTime().format(RFC1123_DATE_TIME_FORMATTER));\n-    }\n-\n-    @Test\n-    public void convertToString() {\n-        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-\n-        assertEquals(TEST_DATE, dateTimeRfc1123.toString());\n-    }\n-\n-    @Test\n-    public void getHashCode() {\n-        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-\n-        assertEquals(1468106660, dateTimeRfc1123.hashCode());\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void equalTo_identicalObject() {\n-        final DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-        final DateTimeRfc1123 otherDateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-\n-        assertTrue(dateTimeRfc1123.equals(otherDateTimeRfc1123));\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void notEqualTo_differentObject() {\n-        final DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-        final DateTimeRfc1123 otherDateTimeRfc1123 = new DateTimeRfc1123(OffsetDateTime.now());\n-\n-        assertFalse(dateTimeRfc1123.equals(otherDateTimeRfc1123));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n-    @Test\n-    public void notEqualTo_nullObject() {\n-        final DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(OffsetDateTime.now());\n-\n-        assertFalse(dateTimeRfc1123.equals(null));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n-    @Test\n-    public void notEqualTo_objectFromDifferentClass() {\n-        final DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(OffsetDateTime.now());\n-\n-        assertFalse(dateTimeRfc1123.equals(\"\"));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMTE0Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393821146", "bodyText": "assertEquals?", "author": "alzimmermsft", "createdAt": "2020-03-17T16:46:18Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/DateTimeRfc1123Test.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.Test;\n+import org.threeten.bp.LocalDateTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.ZoneId;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+\n+import java.util.Locale;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class DateTimeRfc1123Test {\n+    private static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n+        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n+    private static final String TEST_DATE = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n+\n+    @Test\n+    public void constructor_withOffsetDateTime() {\n+        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n+            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n+\n+        assertEquals(TEST_DATE, dateTimeRfc1123.getDateTime().format(RFC1123_DATE_TIME_FORMATTER));\n+    }\n+\n+    @Test\n+    public void constructor_withString() {\n+        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(TEST_DATE);\n+\n+        assertEquals(TEST_DATE, dateTimeRfc1123.getDateTime().format(RFC1123_DATE_TIME_FORMATTER));\n+    }\n+\n+    @Test\n+    public void convertToString() {\n+        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n+            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n+\n+        assertEquals(TEST_DATE, dateTimeRfc1123.toString());\n+    }\n+\n+    @Test\n+    public void getHashCode() {\n+        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n+            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n+\n+        assertEquals(1468106660, dateTimeRfc1123.hashCode());\n+    }\n+\n+    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n+    @Test\n+    public void equalTo_identicalObject() {\n+        final DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n+            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n+        final DateTimeRfc1123 otherDateTimeRfc1123 = new DateTimeRfc1123(\n+            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n+\n+        assertTrue(dateTimeRfc1123.equals(otherDateTimeRfc1123));", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwMzU0NQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393903545", "bodyText": "Agreed.", "author": "vcolin7", "createdAt": "2020-03-17T18:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMTE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/DateTimeRfc1123Test.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/DateTimeRfc1123Test.java\ndeleted file mode 100644\nindex edb4b20f5..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/DateTimeRfc1123Test.java\n+++ /dev/null\n\n@@ -1,91 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.Test;\n-import org.threeten.bp.LocalDateTime;\n-import org.threeten.bp.OffsetDateTime;\n-import org.threeten.bp.ZoneId;\n-import org.threeten.bp.ZoneOffset;\n-import org.threeten.bp.format.DateTimeFormatter;\n-\n-import java.util.Locale;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n-public class DateTimeRfc1123Test {\n-    private static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n-        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n-    private static final String TEST_DATE = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n-\n-    @Test\n-    public void constructor_withOffsetDateTime() {\n-        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-\n-        assertEquals(TEST_DATE, dateTimeRfc1123.getDateTime().format(RFC1123_DATE_TIME_FORMATTER));\n-    }\n-\n-    @Test\n-    public void constructor_withString() {\n-        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(TEST_DATE);\n-\n-        assertEquals(TEST_DATE, dateTimeRfc1123.getDateTime().format(RFC1123_DATE_TIME_FORMATTER));\n-    }\n-\n-    @Test\n-    public void convertToString() {\n-        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-\n-        assertEquals(TEST_DATE, dateTimeRfc1123.toString());\n-    }\n-\n-    @Test\n-    public void getHashCode() {\n-        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-\n-        assertEquals(1468106660, dateTimeRfc1123.hashCode());\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void equalTo_identicalObject() {\n-        final DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-        final DateTimeRfc1123 otherDateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-\n-        assertTrue(dateTimeRfc1123.equals(otherDateTimeRfc1123));\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void notEqualTo_differentObject() {\n-        final DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(TEST_DATE, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-        final DateTimeRfc1123 otherDateTimeRfc1123 = new DateTimeRfc1123(OffsetDateTime.now());\n-\n-        assertFalse(dateTimeRfc1123.equals(otherDateTimeRfc1123));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n-    @Test\n-    public void notEqualTo_nullObject() {\n-        final DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(OffsetDateTime.now());\n-\n-        assertFalse(dateTimeRfc1123.equals(null));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n-    @Test\n-    public void notEqualTo_objectFromDifferentClass() {\n-        final DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(OffsetDateTime.now());\n-\n-        assertFalse(dateTimeRfc1123.equals(\"\"));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMjkzNg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393822936", "bodyText": "Same comment as the other hashCode test.", "author": "alzimmermsft", "createdAt": "2020-03-17T16:48:41Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ExpandableStringEnumTest {\n+    @Test\n+    public void createInstance_fromString() {\n+        assertNotNull(MyExpandableStringEnum.fromString(\"Test\"));\n+    }\n+\n+    @Test\n+    public void createInstance_fromNullString() {\n+        assertNull(MyExpandableStringEnum.fromString(null));\n+    }\n+\n+    @Test\n+    public void getExistingInstance_fromString() {\n+        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n+\n+        assertSame(myExpandableStringEnum, MyExpandableStringEnum.fromString(\"Test\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void throwException_whenCallingFromString_withNullClass() {\n+        MyExpandableStringEnum.fromStringWithNullClass();\n+    }\n+\n+    @Test\n+    public void returnNull_whenTryingToGetInstanceOfPrivateClass_fromString() {\n+        assertNull(MyPrivateExpandableStringEnum.fromString());\n+    }\n+\n+    @Test\n+    public void getExistingInstances() {\n+        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n+        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Another\");\n+        Collection instances = MyExpandableStringEnum.values();\n+\n+        assertFalse(instances.isEmpty());\n+        assertEquals(2, instances.size());\n+\n+        Iterator iterator = instances.iterator();\n+\n+        assertSame(myExpandableStringEnum, iterator.next());\n+        assertSame(otherMyExpandableStringEnum, iterator.next());\n+    }\n+\n+    @Test\n+    public void convertToString() {\n+        assertEquals(\"Test\", MyExpandableStringEnum.fromString(\"Test\").toString());\n+    }\n+\n+    @Test\n+    public void getHashCode() {\n+        assertEquals(-2043209345, MyExpandableStringEnum.fromString(\"Test\").hashCode());\n+    }", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNjQzOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393906438", "bodyText": "See comment above for the same question.", "author": "vcolin7", "createdAt": "2020-03-17T19:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMjkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java\ndeleted file mode 100644\nindex 2b920d2b4..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java\n+++ /dev/null\n\n@@ -1,124 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.Test;\n-\n-import java.util.Collection;\n-import java.util.Iterator;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-\n-public class ExpandableStringEnumTest {\n-    @Test\n-    public void createInstance_fromString() {\n-        assertNotNull(MyExpandableStringEnum.fromString(\"Test\"));\n-    }\n-\n-    @Test\n-    public void createInstance_fromNullString() {\n-        assertNull(MyExpandableStringEnum.fromString(null));\n-    }\n-\n-    @Test\n-    public void getExistingInstance_fromString() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertSame(myExpandableStringEnum, MyExpandableStringEnum.fromString(\"Test\"));\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void throwException_whenCallingFromString_withNullClass() {\n-        MyExpandableStringEnum.fromStringWithNullClass();\n-    }\n-\n-    @Test\n-    public void returnNull_whenTryingToGetInstanceOfPrivateClass_fromString() {\n-        assertNull(MyPrivateExpandableStringEnum.fromString());\n-    }\n-\n-    @Test\n-    public void getExistingInstances() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Another\");\n-        Collection instances = MyExpandableStringEnum.values();\n-\n-        assertFalse(instances.isEmpty());\n-        assertEquals(2, instances.size());\n-\n-        Iterator iterator = instances.iterator();\n-\n-        assertSame(myExpandableStringEnum, iterator.next());\n-        assertSame(otherMyExpandableStringEnum, iterator.next());\n-    }\n-\n-    @Test\n-    public void convertToString() {\n-        assertEquals(\"Test\", MyExpandableStringEnum.fromString(\"Test\").toString());\n-    }\n-\n-    @Test\n-    public void getHashCode() {\n-        assertEquals(-2043209345, MyExpandableStringEnum.fromString(\"Test\").hashCode());\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void equalTo_identicalObject() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertTrue(myExpandableStringEnum.equals(otherMyExpandableStringEnum));\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void notEqualTo_differentObject() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Another\");\n-\n-        assertFalse(myExpandableStringEnum.equals(otherMyExpandableStringEnum));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n-    @Test\n-    public void notEqualTo_nullObject() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertFalse(myExpandableStringEnum.equals(null));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n-    @Test\n-    public void notEqualTo_objectFromDifferentClass() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertFalse(myExpandableStringEnum.equals(\"\"));\n-    }\n-\n-    static final class MyExpandableStringEnum extends ExpandableStringEnum<MyExpandableStringEnum> {\n-        static void fromStringWithNullClass() {\n-            fromString(\"Test\", null);\n-        }\n-\n-        static MyExpandableStringEnum fromString(String name) {\n-            return fromString(name, MyExpandableStringEnum.class);\n-        }\n-\n-        static Collection<MyExpandableStringEnum> values() {\n-            return values(MyExpandableStringEnum.class);\n-        }\n-    }\n-\n-    private static final class MyPrivateExpandableStringEnum extends ExpandableStringEnum<MyPrivateExpandableStringEnum> {\n-        static MyPrivateExpandableStringEnum fromString() {\n-            return fromString(\"\", MyPrivateExpandableStringEnum.class);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMzczMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393823730", "bodyText": "How strong is the guarantee that the backing Map for ExandableStringEnum will return a collection where the elements are ordered by how they are added?", "author": "alzimmermsft", "createdAt": "2020-03-17T16:49:47Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ExpandableStringEnumTest {\n+    @Test\n+    public void createInstance_fromString() {\n+        assertNotNull(MyExpandableStringEnum.fromString(\"Test\"));\n+    }\n+\n+    @Test\n+    public void createInstance_fromNullString() {\n+        assertNull(MyExpandableStringEnum.fromString(null));\n+    }\n+\n+    @Test\n+    public void getExistingInstance_fromString() {\n+        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n+\n+        assertSame(myExpandableStringEnum, MyExpandableStringEnum.fromString(\"Test\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void throwException_whenCallingFromString_withNullClass() {\n+        MyExpandableStringEnum.fromStringWithNullClass();\n+    }\n+\n+    @Test\n+    public void returnNull_whenTryingToGetInstanceOfPrivateClass_fromString() {\n+        assertNull(MyPrivateExpandableStringEnum.fromString());\n+    }\n+\n+    @Test\n+    public void getExistingInstances() {\n+        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n+        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Another\");\n+        Collection instances = MyExpandableStringEnum.values();\n+\n+        assertFalse(instances.isEmpty());\n+        assertEquals(2, instances.size());\n+\n+        Iterator iterator = instances.iterator();\n+\n+        assertSame(myExpandableStringEnum, iterator.next());\n+        assertSame(otherMyExpandableStringEnum, iterator.next());", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxMDE3Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393910173", "bodyText": "There is no guarantee since this is not a LinkedHashSet, so I think the best course of action would be to cast the Collection returned by values() to a HashSet and see if the values we are looking for are contained there.", "author": "vcolin7", "createdAt": "2020-03-17T19:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMzczMA=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java\ndeleted file mode 100644\nindex 2b920d2b4..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java\n+++ /dev/null\n\n@@ -1,124 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.Test;\n-\n-import java.util.Collection;\n-import java.util.Iterator;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-\n-public class ExpandableStringEnumTest {\n-    @Test\n-    public void createInstance_fromString() {\n-        assertNotNull(MyExpandableStringEnum.fromString(\"Test\"));\n-    }\n-\n-    @Test\n-    public void createInstance_fromNullString() {\n-        assertNull(MyExpandableStringEnum.fromString(null));\n-    }\n-\n-    @Test\n-    public void getExistingInstance_fromString() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertSame(myExpandableStringEnum, MyExpandableStringEnum.fromString(\"Test\"));\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void throwException_whenCallingFromString_withNullClass() {\n-        MyExpandableStringEnum.fromStringWithNullClass();\n-    }\n-\n-    @Test\n-    public void returnNull_whenTryingToGetInstanceOfPrivateClass_fromString() {\n-        assertNull(MyPrivateExpandableStringEnum.fromString());\n-    }\n-\n-    @Test\n-    public void getExistingInstances() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Another\");\n-        Collection instances = MyExpandableStringEnum.values();\n-\n-        assertFalse(instances.isEmpty());\n-        assertEquals(2, instances.size());\n-\n-        Iterator iterator = instances.iterator();\n-\n-        assertSame(myExpandableStringEnum, iterator.next());\n-        assertSame(otherMyExpandableStringEnum, iterator.next());\n-    }\n-\n-    @Test\n-    public void convertToString() {\n-        assertEquals(\"Test\", MyExpandableStringEnum.fromString(\"Test\").toString());\n-    }\n-\n-    @Test\n-    public void getHashCode() {\n-        assertEquals(-2043209345, MyExpandableStringEnum.fromString(\"Test\").hashCode());\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void equalTo_identicalObject() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertTrue(myExpandableStringEnum.equals(otherMyExpandableStringEnum));\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void notEqualTo_differentObject() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Another\");\n-\n-        assertFalse(myExpandableStringEnum.equals(otherMyExpandableStringEnum));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n-    @Test\n-    public void notEqualTo_nullObject() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertFalse(myExpandableStringEnum.equals(null));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n-    @Test\n-    public void notEqualTo_objectFromDifferentClass() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertFalse(myExpandableStringEnum.equals(\"\"));\n-    }\n-\n-    static final class MyExpandableStringEnum extends ExpandableStringEnum<MyExpandableStringEnum> {\n-        static void fromStringWithNullClass() {\n-            fromString(\"Test\", null);\n-        }\n-\n-        static MyExpandableStringEnum fromString(String name) {\n-            return fromString(name, MyExpandableStringEnum.class);\n-        }\n-\n-        static Collection<MyExpandableStringEnum> values() {\n-            return values(MyExpandableStringEnum.class);\n-        }\n-    }\n-\n-    private static final class MyPrivateExpandableStringEnum extends ExpandableStringEnum<MyPrivateExpandableStringEnum> {\n-        static MyPrivateExpandableStringEnum fromString() {\n-            return fromString(\"\", MyPrivateExpandableStringEnum.class);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNDE1NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393824154", "bodyText": "assertNotNull?", "author": "alzimmermsft", "createdAt": "2020-03-17T16:50:23Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.util;\n+\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ExpandableStringEnumTest {\n+    @Test\n+    public void createInstance_fromString() {\n+        assertNotNull(MyExpandableStringEnum.fromString(\"Test\"));\n+    }\n+\n+    @Test\n+    public void createInstance_fromNullString() {\n+        assertNull(MyExpandableStringEnum.fromString(null));\n+    }\n+\n+    @Test\n+    public void getExistingInstance_fromString() {\n+        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n+\n+        assertSame(myExpandableStringEnum, MyExpandableStringEnum.fromString(\"Test\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void throwException_whenCallingFromString_withNullClass() {\n+        MyExpandableStringEnum.fromStringWithNullClass();\n+    }\n+\n+    @Test\n+    public void returnNull_whenTryingToGetInstanceOfPrivateClass_fromString() {\n+        assertNull(MyPrivateExpandableStringEnum.fromString());\n+    }\n+\n+    @Test\n+    public void getExistingInstances() {\n+        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n+        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Another\");\n+        Collection instances = MyExpandableStringEnum.values();\n+\n+        assertFalse(instances.isEmpty());\n+        assertEquals(2, instances.size());\n+\n+        Iterator iterator = instances.iterator();\n+\n+        assertSame(myExpandableStringEnum, iterator.next());\n+        assertSame(otherMyExpandableStringEnum, iterator.next());\n+    }\n+\n+    @Test\n+    public void convertToString() {\n+        assertEquals(\"Test\", MyExpandableStringEnum.fromString(\"Test\").toString());\n+    }\n+\n+    @Test\n+    public void getHashCode() {\n+        assertEquals(-2043209345, MyExpandableStringEnum.fromString(\"Test\").hashCode());\n+    }\n+\n+    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n+    @Test\n+    public void equalTo_identicalObject() {\n+        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n+        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n+\n+        assertTrue(myExpandableStringEnum.equals(otherMyExpandableStringEnum));\n+    }\n+\n+    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n+    @Test\n+    public void notEqualTo_differentObject() {\n+        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n+        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Another\");\n+\n+        assertFalse(myExpandableStringEnum.equals(otherMyExpandableStringEnum));\n+    }\n+\n+    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n+    @Test\n+    public void notEqualTo_nullObject() {\n+        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n+\n+        assertFalse(myExpandableStringEnum.equals(null));", "originalCommit": "67845f0155a5700833dae754fbd7c710ca8aaddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNjg1Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/214#discussion_r393906857", "bodyText": "Agreed.", "author": "vcolin7", "createdAt": "2020-03-17T19:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNDE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "6441097969b5e781f81acc9ead2256cf309d6346", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java\ndeleted file mode 100644\nindex 2b920d2b4..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/util/ExpandableStringEnumTest.java\n+++ /dev/null\n\n@@ -1,124 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.android.core.util;\n-\n-import org.junit.Test;\n-\n-import java.util.Collection;\n-import java.util.Iterator;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-\n-public class ExpandableStringEnumTest {\n-    @Test\n-    public void createInstance_fromString() {\n-        assertNotNull(MyExpandableStringEnum.fromString(\"Test\"));\n-    }\n-\n-    @Test\n-    public void createInstance_fromNullString() {\n-        assertNull(MyExpandableStringEnum.fromString(null));\n-    }\n-\n-    @Test\n-    public void getExistingInstance_fromString() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertSame(myExpandableStringEnum, MyExpandableStringEnum.fromString(\"Test\"));\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void throwException_whenCallingFromString_withNullClass() {\n-        MyExpandableStringEnum.fromStringWithNullClass();\n-    }\n-\n-    @Test\n-    public void returnNull_whenTryingToGetInstanceOfPrivateClass_fromString() {\n-        assertNull(MyPrivateExpandableStringEnum.fromString());\n-    }\n-\n-    @Test\n-    public void getExistingInstances() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Another\");\n-        Collection instances = MyExpandableStringEnum.values();\n-\n-        assertFalse(instances.isEmpty());\n-        assertEquals(2, instances.size());\n-\n-        Iterator iterator = instances.iterator();\n-\n-        assertSame(myExpandableStringEnum, iterator.next());\n-        assertSame(otherMyExpandableStringEnum, iterator.next());\n-    }\n-\n-    @Test\n-    public void convertToString() {\n-        assertEquals(\"Test\", MyExpandableStringEnum.fromString(\"Test\").toString());\n-    }\n-\n-    @Test\n-    public void getHashCode() {\n-        assertEquals(-2043209345, MyExpandableStringEnum.fromString(\"Test\").hashCode());\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void equalTo_identicalObject() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertTrue(myExpandableStringEnum.equals(otherMyExpandableStringEnum));\n-    }\n-\n-    @SuppressWarnings(\"SimplifiableJUnitAssertion\")\n-    @Test\n-    public void notEqualTo_differentObject() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-        MyExpandableStringEnum otherMyExpandableStringEnum = MyExpandableStringEnum.fromString(\"Another\");\n-\n-        assertFalse(myExpandableStringEnum.equals(otherMyExpandableStringEnum));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"ConstantConditions\"})\n-    @Test\n-    public void notEqualTo_nullObject() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertFalse(myExpandableStringEnum.equals(null));\n-    }\n-\n-    @SuppressWarnings({\"SimplifiableJUnitAssertion\", \"EqualsBetweenInconvertibleTypes\"})\n-    @Test\n-    public void notEqualTo_objectFromDifferentClass() {\n-        MyExpandableStringEnum myExpandableStringEnum = MyExpandableStringEnum.fromString(\"Test\");\n-\n-        assertFalse(myExpandableStringEnum.equals(\"\"));\n-    }\n-\n-    static final class MyExpandableStringEnum extends ExpandableStringEnum<MyExpandableStringEnum> {\n-        static void fromStringWithNullClass() {\n-            fromString(\"Test\", null);\n-        }\n-\n-        static MyExpandableStringEnum fromString(String name) {\n-            return fromString(name, MyExpandableStringEnum.class);\n-        }\n-\n-        static Collection<MyExpandableStringEnum> values() {\n-            return values(MyExpandableStringEnum.class);\n-        }\n-    }\n-\n-    private static final class MyPrivateExpandableStringEnum extends ExpandableStringEnum<MyPrivateExpandableStringEnum> {\n-        static MyPrivateExpandableStringEnum fromString() {\n-            return fromString(\"\", MyPrivateExpandableStringEnum.class);\n-        }\n-    }\n-}\n"}}, {"oid": "6441097969b5e781f81acc9ead2256cf309d6346", "url": "https://github.com/Azure/azure-sdk-for-android/commit/6441097969b5e781f81acc9ead2256cf309d6346", "message": "Added PowerMock dependencies.", "committedDate": "2020-03-18T21:22:27Z", "type": "commit"}, {"oid": "8f25fa961da31864b34d4e418b6d55467efb8c49", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8f25fa961da31864b34d4e418b6d55467efb8c49", "message": "Added unit tests for the Base64Url and Base64Util classes.", "committedDate": "2020-03-18T21:22:27Z", "type": "commit"}, {"oid": "0ec02b43bd87c325444793b6b787f01a93b35aa6", "url": "https://github.com/Azure/azure-sdk-for-android/commit/0ec02b43bd87c325444793b6b787f01a93b35aa6", "message": "Added unit tests for the CoreUtils, DateTimeRfc1123 and ExpandableStringEnum classes. Included the ThreetenBP package for our tests so timezone data is available.", "committedDate": "2020-03-18T21:22:41Z", "type": "commit"}, {"oid": "c74a8abd4a68786519fdbf81404619a4a1bd5a9b", "url": "https://github.com/Azure/azure-sdk-for-android/commit/c74a8abd4a68786519fdbf81404619a4a1bd5a9b", "message": "Added license statement to test classes.", "committedDate": "2020-03-18T21:22:41Z", "type": "commit"}, {"oid": "47e6d39acb72354c1776c000b43ad3026edb3e8f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/47e6d39acb72354c1776c000b43ad3026edb3e8f", "message": "Added tests for toString() and hashCode() in Base64Url.", "committedDate": "2020-03-18T21:22:41Z", "type": "commit"}, {"oid": "1736906b3360ba4c57dd3289d031df1890f9f976", "url": "https://github.com/Azure/azure-sdk-for-android/commit/1736906b3360ba4c57dd3289d031df1890f9f976", "message": "Modified CoreUtilTest and DateTimeRfc1123Test to conform to the latest changes in the dev branch made to their respective classes.", "committedDate": "2020-03-18T21:22:42Z", "type": "commit"}, {"oid": "d4c80ec222d251de1604fe74d9d0c71aca8a7466", "url": "https://github.com/Azure/azure-sdk-for-android/commit/d4c80ec222d251de1604fe74d9d0c71aca8a7466", "message": "Redesigned and refactored parts of Base64Util, Base64UtilTest and Base64UrlTest to get rid of the PowerMock dependency in the project.", "committedDate": "2020-03-18T21:22:42Z", "type": "commit"}, {"oid": "97a27ea0ca928d84161711704769b87ccfdd11a4", "url": "https://github.com/Azure/azure-sdk-for-android/commit/97a27ea0ca928d84161711704769b87ccfdd11a4", "message": "Addressed comments made by @alzimmermsft: refactored some assertions to remove the use of certain annotations to suppress warnings and changed hashCode() tests to ensure consistency no matter where they run.", "committedDate": "2020-03-18T21:22:42Z", "type": "commit"}, {"oid": "8b7fb6c80aa2de49d27e5b779db92c04aa81c402", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8b7fb6c80aa2de49d27e5b779db92c04aa81c402", "message": "Refactored the names of some tests in Base64UtilTest, also made sure to include testing for positive paths for decodeUrl() and encodeUrlWithoutPadding(). Removed import statements for static methods CoreUtils and used inline calls. Added copyright header to Base64Stub.", "committedDate": "2020-03-18T21:22:42Z", "type": "commit"}, {"oid": "8b7fb6c80aa2de49d27e5b779db92c04aa81c402", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8b7fb6c80aa2de49d27e5b779db92c04aa81c402", "message": "Refactored the names of some tests in Base64UtilTest, also made sure to include testing for positive paths for decodeUrl() and encodeUrlWithoutPadding(). Removed import statements for static methods CoreUtils and used inline calls. Added copyright header to Base64Stub.", "committedDate": "2020-03-18T21:22:42Z", "type": "forcePushed"}]}