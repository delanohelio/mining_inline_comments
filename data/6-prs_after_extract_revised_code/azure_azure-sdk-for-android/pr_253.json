{"pr_number": 253, "pr_title": "Adding core RetryInterceptor that honors CancellationToken.cancel(), enables Fixed and Expotential stratgies", "pr_createdAt": "2020-07-08T17:37:16Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/253", "timeline": [{"oid": "7b0415a2205aef28e27994835eae78f098856692", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7b0415a2205aef28e27994835eae78f098856692", "message": "Adding core RetryInterceptor that honors CancellationToken.cancel(), enables Fixed and Expotential stratgies", "committedDate": "2020-07-08T17:34:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4OTI1Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451789252", "bodyText": "Nit: Do we want to use cancelled or canceled? I know both are correct but just want to know which one we prefer for the sake of consistency.", "author": "vcolin7", "createdAt": "2020-07-08T19:53:06Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/ExceptionUtils.java", "diffHunk": "@@ -22,6 +22,11 @@\n     private ExceptionUtils() {\n     }\n \n+    /**\n+     * A singleton IOException representing cancellation error.\n+     */\n+    public static final IOException CALL_CANCELLED_IO_EXCEPTION = new IOException(\"Canceled.\");", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjYzMQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r452032631", "bodyText": "I preferred \"Cancell****\" for our \"Type Names\" mainly because the same is used in well-known CancellationToken.\nOur types are:\n\nCancellationToken (public)\nCancellationTokenImpl (internal)\nExceptionUtils.CALL_CANCELLED_IO_EXCEPTION (internal)\n\nThe reason we used Canceled in the \"Exception message\" of IOException(\"Canceled.\") which we throw onCancel is to consistent with what OkHttp throws from its stack under the same condition, refer this, basically, we don't want customers to string match two different strings in case they have any logic based on the error message.", "author": "anuchandy", "createdAt": "2020-07-09T07:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4OTI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwOTU3Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r452409572", "bodyText": "I see, I agree that it makes sense to be consistent with OkHttp. I don't have a strong opinion on using either, however, I think we should have a default for every other case. I'll bring up with the team.", "author": "vcolin7", "createdAt": "2020-07-09T18:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4OTI1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3OTUxMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451879510", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param chain Provide access to the response.\n          \n          \n            \n                 * @param chain Provides access to the response.", "author": "vcolin7", "createdAt": "2020-07-08T23:27:47Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\nindex a99b72daa..fcbe8e274 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n\n@@ -71,13 +71,13 @@ public class RetryInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+     * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.\n \n-     * @param chain Provide access to the response.\n+     * @param chain Provides access to the response.\n      *\n      * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n-     * retried any more, for example, max retry limit reached.\n+     * @throws IOException If the pipeline gets canceled or an there is an IO error that\n+     * indicates the request cannot be retried any more, for example, max retry limit reached.\n      */\n     @NonNull\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3OTczNg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451879736", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n          \n          \n            \n                 * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.", "author": "vcolin7", "createdAt": "2020-07-08T23:28:31Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\nindex a99b72daa..fcbe8e274 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n\n@@ -71,13 +71,13 @@ public class RetryInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+     * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.\n \n-     * @param chain Provide access to the response.\n+     * @param chain Provides access to the response.\n      *\n      * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n-     * retried any more, for example, max retry limit reached.\n+     * @throws IOException If the pipeline gets canceled or an there is an IO error that\n+     * indicates the request cannot be retried any more, for example, max retry limit reached.\n      */\n     @NonNull\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4MDY5Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451880696", "bodyText": "It would be nice to have a comment explaining what these status codes mean, just like in RetryStrategy.", "author": "vcolin7", "createdAt": "2020-07-08T23:31:36Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n+     * retried any more, for example, max retry limit reached.\n+     */\n+    @NonNull\n+    @Override\n+    public Response intercept(Chain chain) throws IOException {\n+        final Request request = chain.request();\n+\n+        int retryAttempts = 0;\n+        final int maxRetries = this.retryStrategy.getMaxRetries();\n+        do {\n+\n+            // Check for cancellation before Proceeding the chain.\n+            if (chain.call().isCanceled()) {\n+                throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+            }\n+\n+            Response response = null;\n+            Exception exception = null;\n+            // Proceed.\n+            try {\n+                response = chain.proceed(request);\n+            } catch (Exception e) {\n+                exception = e;\n+            }\n+\n+            // Check for cancellation after Proceed.\n+            if (chain.call().isCanceled()) {\n+                try {\n+                    if (exception != null) {\n+                        // The later interceptors those executes as a result of above 'chain.proceed' may throw\n+                        // IOException(\"Cancelled\") [e.g. okhttp3.internal.http.RetryAndFollowUpInterceptor]\n+                        // if it identified that call is cancelled, we don't want to retry on such cases.\n+                        if (exception == ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION) {\n+                            throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                        } else {\n+                            throw new IOException(\"Cancelled.\", exception);\n+                        }\n+                    } else {\n+                        throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                    }\n+                } finally {\n+                    if (response != null) {\n+                        // Close the current response before propagating Cancelled Exception.\n+                        response.close();\n+                    }\n+                }\n+            }\n+\n+            if (!this.shouldRetry(response, exception, retryAttempts)) {\n+                if (exception != null) {\n+                        throw new RuntimeException(exception);\n+                } else {\n+                    return response;\n+                }\n+            } else {\n+                final Duration duration;\n+                try {\n+                    duration = this.calculateRetryDelay(response, exception, retryAttempts);\n+                } finally {\n+                    if (response != null) {\n+                        // Close the current response before any retry.\n+                        response.close();\n+                    }\n+                }\n+\n+                // Check for cancellation before going into sleep.\n+                if (chain.call().isCanceled()) {\n+                    throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                }\n+\n+                try {\n+                    Thread.sleep(duration.toMillis());\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                retryAttempts++;\n+            }\n+        } while (retryAttempts < maxRetries);\n+\n+        throw new RuntimeException(String.format(\"The max retries (%d times) for the service call is exceeded.\", maxRetries));\n+    }\n+\n+    /**\n+     * Determines the delay duration that should be waited before retrying.\n+     *\n+     * @param response The HTTP response.\n+     * @param exception The pipeline exception, if any.\n+     * @param retryAttempts The number of retry attempts so far made.\n+     * @return The delay duration.\n+     */\n+    public Duration calculateRetryDelay(Response response, Exception exception, int retryAttempts) {\n+        if (exception != null) {\n+            return this.retryStrategy.calculateRetryDelay(null, exception, retryAttempts);\n+        } else {\n+            final int code = response.code();\n+            if (code == 429) {", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\nindex a99b72daa..fcbe8e274 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n\n@@ -71,13 +71,13 @@ public class RetryInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+     * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.\n \n-     * @param chain Provide access to the response.\n+     * @param chain Provides access to the response.\n      *\n      * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n-     * retried any more, for example, max retry limit reached.\n+     * @throws IOException If the pipeline gets canceled or an there is an IO error that\n+     * indicates the request cannot be retried any more, for example, max retry limit reached.\n      */\n     @NonNull\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4MDcxMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451880713", "bodyText": "It would be nice to have a comment explaining what these status codes mean, just like in RetryStrategy.", "author": "vcolin7", "createdAt": "2020-07-08T23:31:41Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n+     * retried any more, for example, max retry limit reached.\n+     */\n+    @NonNull\n+    @Override\n+    public Response intercept(Chain chain) throws IOException {\n+        final Request request = chain.request();\n+\n+        int retryAttempts = 0;\n+        final int maxRetries = this.retryStrategy.getMaxRetries();\n+        do {\n+\n+            // Check for cancellation before Proceeding the chain.\n+            if (chain.call().isCanceled()) {\n+                throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+            }\n+\n+            Response response = null;\n+            Exception exception = null;\n+            // Proceed.\n+            try {\n+                response = chain.proceed(request);\n+            } catch (Exception e) {\n+                exception = e;\n+            }\n+\n+            // Check for cancellation after Proceed.\n+            if (chain.call().isCanceled()) {\n+                try {\n+                    if (exception != null) {\n+                        // The later interceptors those executes as a result of above 'chain.proceed' may throw\n+                        // IOException(\"Cancelled\") [e.g. okhttp3.internal.http.RetryAndFollowUpInterceptor]\n+                        // if it identified that call is cancelled, we don't want to retry on such cases.\n+                        if (exception == ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION) {\n+                            throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                        } else {\n+                            throw new IOException(\"Cancelled.\", exception);\n+                        }\n+                    } else {\n+                        throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                    }\n+                } finally {\n+                    if (response != null) {\n+                        // Close the current response before propagating Cancelled Exception.\n+                        response.close();\n+                    }\n+                }\n+            }\n+\n+            if (!this.shouldRetry(response, exception, retryAttempts)) {\n+                if (exception != null) {\n+                        throw new RuntimeException(exception);\n+                } else {\n+                    return response;\n+                }\n+            } else {\n+                final Duration duration;\n+                try {\n+                    duration = this.calculateRetryDelay(response, exception, retryAttempts);\n+                } finally {\n+                    if (response != null) {\n+                        // Close the current response before any retry.\n+                        response.close();\n+                    }\n+                }\n+\n+                // Check for cancellation before going into sleep.\n+                if (chain.call().isCanceled()) {\n+                    throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+                }\n+\n+                try {\n+                    Thread.sleep(duration.toMillis());\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                retryAttempts++;\n+            }\n+        } while (retryAttempts < maxRetries);\n+\n+        throw new RuntimeException(String.format(\"The max retries (%d times) for the service call is exceeded.\", maxRetries));\n+    }\n+\n+    /**\n+     * Determines the delay duration that should be waited before retrying.\n+     *\n+     * @param response The HTTP response.\n+     * @param exception The pipeline exception, if any.\n+     * @param retryAttempts The number of retry attempts so far made.\n+     * @return The delay duration.\n+     */\n+    public Duration calculateRetryDelay(Response response, Exception exception, int retryAttempts) {\n+        if (exception != null) {\n+            return this.retryStrategy.calculateRetryDelay(null, exception, retryAttempts);\n+        } else {\n+            final int code = response.code();\n+            if (code == 429) {\n+                final String retryAfterHeader = response.header(\"x-ms-retry-after-ms\");\n+                if (retryAfterHeader != null) {\n+                    return Duration.of(Integer.parseInt(retryAfterHeader), ChronoUnit.MILLIS);\n+                }\n+            }\n+\n+            if (code == 429 || code == 503) {", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\nindex a99b72daa..fcbe8e274 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n\n@@ -71,13 +71,13 @@ public class RetryInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+     * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.\n \n-     * @param chain Provide access to the response.\n+     * @param chain Provides access to the response.\n      *\n      * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n-     * retried any more, for example, max retry limit reached.\n+     * @throws IOException If the pipeline gets canceled or an there is an IO error that\n+     * indicates the request cannot be retried any more, for example, max retry limit reached.\n      */\n     @NonNull\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5MDgxMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451890813", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n          \n          \n            \n                 * retried any more, for example, max retry limit reached.\n          \n          \n            \n                 * @throws IOException If the pipeline gets canceled or an there is an IO error that\n          \n          \n            \n                 * indicates the request cannot be retried any more, for example, max retry limit reached.", "author": "vcolin7", "createdAt": "2020-07-09T00:06:25Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n+     * retried any more, for example, max retry limit reached.", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\nindex a99b72daa..fcbe8e274 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n\n@@ -71,13 +71,13 @@ public class RetryInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+     * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.\n \n-     * @param chain Provide access to the response.\n+     * @param chain Provides access to the response.\n      *\n      * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n-     * retried any more, for example, max retry limit reached.\n+     * @throws IOException If the pipeline gets canceled or an there is an IO error that\n+     * indicates the request cannot be retried any more, for example, max retry limit reached.\n      */\n     @NonNull\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5MDk0MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451890940", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    // The later interceptors those executes as a result of above 'chain.proceed' may throw\n          \n          \n            \n                                    // The later interceptors that execute as a result of the above 'chain.proceed' may throw", "author": "vcolin7", "createdAt": "2020-07-09T00:06:47Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n+     * retried any more, for example, max retry limit reached.\n+     */\n+    @NonNull\n+    @Override\n+    public Response intercept(Chain chain) throws IOException {\n+        final Request request = chain.request();\n+\n+        int retryAttempts = 0;\n+        final int maxRetries = this.retryStrategy.getMaxRetries();\n+        do {\n+\n+            // Check for cancellation before Proceeding the chain.\n+            if (chain.call().isCanceled()) {\n+                throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+            }\n+\n+            Response response = null;\n+            Exception exception = null;\n+            // Proceed.\n+            try {\n+                response = chain.proceed(request);\n+            } catch (Exception e) {\n+                exception = e;\n+            }\n+\n+            // Check for cancellation after Proceed.\n+            if (chain.call().isCanceled()) {\n+                try {\n+                    if (exception != null) {\n+                        // The later interceptors those executes as a result of above 'chain.proceed' may throw", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\nindex a99b72daa..fcbe8e274 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n\n@@ -71,13 +71,13 @@ public class RetryInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+     * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.\n \n-     * @param chain Provide access to the response.\n+     * @param chain Provides access to the response.\n      *\n      * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n-     * retried any more, for example, max retry limit reached.\n+     * @throws IOException If the pipeline gets canceled or an there is an IO error that\n+     * indicates the request cannot be retried any more, for example, max retry limit reached.\n      */\n     @NonNull\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5MTA0MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451891040", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    // if it identified that call is cancelled, we don't want to retry on such cases.\n          \n          \n            \n                                    // If it is identified that the call is cancelled, we don't want to retry on such cases.", "author": "vcolin7", "createdAt": "2020-07-09T00:07:10Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n+        return new RetryInterceptor(new ExponentialBackoff(maxRetries, baseDelay, maxDelay));\n+    }\n+\n+    /**\n+     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+\n+     * @param chain Provide access to the response.\n+     *\n+     * @return Response from the next interceptor in the pipeline.\n+     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n+     * retried any more, for example, max retry limit reached.\n+     */\n+    @NonNull\n+    @Override\n+    public Response intercept(Chain chain) throws IOException {\n+        final Request request = chain.request();\n+\n+        int retryAttempts = 0;\n+        final int maxRetries = this.retryStrategy.getMaxRetries();\n+        do {\n+\n+            // Check for cancellation before Proceeding the chain.\n+            if (chain.call().isCanceled()) {\n+                throw ExceptionUtils.CALL_CANCELLED_IO_EXCEPTION;\n+            }\n+\n+            Response response = null;\n+            Exception exception = null;\n+            // Proceed.\n+            try {\n+                response = chain.proceed(request);\n+            } catch (Exception e) {\n+                exception = e;\n+            }\n+\n+            // Check for cancellation after Proceed.\n+            if (chain.call().isCanceled()) {\n+                try {\n+                    if (exception != null) {\n+                        // The later interceptors those executes as a result of above 'chain.proceed' may throw\n+                        // IOException(\"Cancelled\") [e.g. okhttp3.internal.http.RetryAndFollowUpInterceptor]\n+                        // if it identified that call is cancelled, we don't want to retry on such cases.", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\nindex a99b72daa..fcbe8e274 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n\n@@ -71,13 +71,13 @@ public class RetryInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+     * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.\n \n-     * @param chain Provide access to the response.\n+     * @param chain Provides access to the response.\n      *\n      * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n-     * retried any more, for example, max retry limit reached.\n+     * @throws IOException If the pipeline gets canceled or an there is an IO error that\n+     * indicates the request cannot be retried any more, for example, max retry limit reached.\n      */\n     @NonNull\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NTY3MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451895671", "bodyText": "Maybe it is obvious to people that you will get an interceptor with a specific type of delay with these static methods, however, I would change the name just to be a bit more explicit about it. Right now someone that only looks at the method name could think you are getting some sort of delay from this, instead of the interceptor itself.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n          \n          \n            \n                public static RetryInterceptor withFixedDelay(int maxRetries, Duration delay) {\n          \n      \n    \n    \n  \n\nNot sure this is the best name for it, but I hope you get the idea :)", "author": "vcolin7", "createdAt": "2020-07-09T00:23:32Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAwMjAzOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r452002038", "bodyText": "thanks, Victor! with* is good with me.\nOne thing we might want to consider later is, is it better if we use createWith*? two reasons:\n\nThis is a factory method, so create is a common prefix.\nThe prefix with is a common prefix used to qualify setters in the builder/fluent pattern e.g. here.\n\nbut we can revisit it later but what you proposed is better than the current naming.", "author": "anuchandy", "createdAt": "2020-07-09T06:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NTY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNzQzNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r452407437", "bodyText": "I'm also ok with using createWith, maybe we can bring this up in our next meeting :)", "author": "vcolin7", "createdAt": "2020-07-09T18:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NTY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\nindex a99b72daa..fcbe8e274 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n\n@@ -71,13 +71,13 @@ public class RetryInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+     * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.\n \n-     * @param chain Provide access to the response.\n+     * @param chain Provides access to the response.\n      *\n      * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n-     * retried any more, for example, max retry limit reached.\n+     * @throws IOException If the pipeline gets canceled or an there is an IO error that\n+     * indicates the request cannot be retried any more, for example, max retry limit reached.\n      */\n     @NonNull\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NTcwNg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451895706", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static RetryInterceptor exponentialBackoff() {\n          \n          \n            \n                public static RetryInterceptor withExponentialBackoff() {", "author": "vcolin7", "createdAt": "2020-07-09T00:23:39Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\nindex a99b72daa..fcbe8e274 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n\n@@ -71,13 +71,13 @@ public class RetryInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+     * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.\n \n-     * @param chain Provide access to the response.\n+     * @param chain Provides access to the response.\n      *\n      * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n-     * retried any more, for example, max retry limit reached.\n+     * @throws IOException If the pipeline gets canceled or an there is an IO error that\n+     * indicates the request cannot be retried any more, for example, max retry limit reached.\n      */\n     @NonNull\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NTc3Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/253#discussion_r451895772", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {\n          \n          \n            \n                public static RetryInterceptor withExponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {", "author": "vcolin7", "createdAt": "2020-07-09T00:23:54Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http.interceptor;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.internal.util.ExceptionUtils;\n+import com.azure.android.core.util.DateTimeRfc1123;\n+\n+import org.threeten.bp.Duration;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.temporal.ChronoUnit;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Pipeline interceptor that retries when a recoverable exception or HTTP error occurs.\n+ */\n+public class RetryInterceptor implements Interceptor {\n+    private final RetryStrategy retryStrategy;\n+\n+    /**\n+     * Creates {@link RetryInterceptor} with the provided {@link RetryStrategy}.\n+     *\n+     * @param retryStrategy The {@link RetryStrategy} used for retries.\n+     */\n+    public RetryInterceptor(RetryStrategy retryStrategy) {\n+        this.retryStrategy = retryStrategy;\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses fixed backoff delay retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param delay The fixed backoff delay applied before every retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor fixedDelay(int maxRetries, Duration delay) {\n+        return new RetryInterceptor(new FixedDelay(maxRetries, delay));\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses a default full jitter backoff\n+     * retry strategy.\n+     *\n+     * <p>\n+     * The retry strategy by default retries maximum 3 times, uses 800 milliseconds as\n+     * the default base delay and uses 8 seconds as default maximum backoff delay before a retry.\n+     *\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff() {\n+        return new RetryInterceptor(new ExponentialBackoff());\n+    }\n+\n+    /**\n+     * Get an instance of {@link RetryInterceptor} that uses full jitter backoff retry strategy.\n+     *\n+     * @param maxRetries The maximum number of times to retry.\n+     * @param baseDelay The delay used as the coefficient for backoffs, also baseDelay will be the first backoff delay.\n+     * @param maxDelay The maximum backoff delay before a retry.\n+     * @return The retry interceptor.\n+     */\n+    public static RetryInterceptor exponentialBackoff(int maxRetries, Duration baseDelay, Duration maxDelay) {", "originalCommit": "7b0415a2205aef28e27994835eae78f098856692", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\nindex a99b72daa..fcbe8e274 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/interceptor/RetryInterceptor.java\n\n@@ -71,13 +71,13 @@ public class RetryInterceptor implements Interceptor {\n     }\n \n     /**\n-     * Intercept any exception in the pipeline or the HTTP response error and retry if recoverable.\n+     * Intercepts any exception in the pipeline or the HTTP response error and, if recoverable, retries sending the request.\n \n-     * @param chain Provide access to the response.\n+     * @param chain Provides access to the response.\n      *\n      * @return Response from the next interceptor in the pipeline.\n-     * @throws IOException If the pipeline gets canceled or an IO error that cannot be\n-     * retried any more, for example, max retry limit reached.\n+     * @throws IOException If the pipeline gets canceled or an there is an IO error that\n+     * indicates the request cannot be retried any more, for example, max retry limit reached.\n      */\n     @NonNull\n     @Override\n"}}, {"oid": "913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "url": "https://github.com/Azure/azure-sdk-for-android/commit/913a23675b8ea543a1388a6c4dcafde3b3f8dc73", "message": "Improve JavaDoc\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-07-09T06:45:45Z", "type": "commit"}, {"oid": "b91c57f0f2e77f8a3aa400250398037e2b99b7eb", "url": "https://github.com/Azure/azure-sdk-for-android/commit/b91c57f0f2e77f8a3aa400250398037e2b99b7eb", "message": "Renaming RetryInterceptor factory methods to have \"with\" prefix.\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-07-09T06:56:19Z", "type": "commit"}, {"oid": "5174f15df69f590f9436bc71cf179f0e4d16fe2c", "url": "https://github.com/Azure/azure-sdk-for-android/commit/5174f15df69f590f9436bc71cf179f0e4d16fe2c", "message": "Adding reference/comment for 429, 503 status-code.", "committedDate": "2020-07-09T08:01:39Z", "type": "commit"}]}