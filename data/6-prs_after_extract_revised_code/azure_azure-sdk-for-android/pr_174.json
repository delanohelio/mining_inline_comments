{"pr_number": 174, "pr_title": "Create Storage Blob Client with list blobs API", "pr_createdAt": "2020-01-31T00:34:17Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/174", "timeline": [{"oid": "34c45f0c535e36f288b05530cd0c349631f40302", "url": "https://github.com/Azure/azure-sdk-for-android/commit/34c45f0c535e36f288b05530cd0c349631f40302", "message": "Created models for Storage client blob listing. (@anuchandy)", "committedDate": "2020-01-30T23:23:54Z", "type": "commit"}, {"oid": "989fb32d7fa4e1ce01bcd61ebd00a9c825d426ce", "url": "https://github.com/Azure/azure-sdk-for-android/commit/989fb32d7fa4e1ce01bcd61ebd00a9c825d426ce", "message": "Created StorageBlobClient with listBlobs API. (@anuchandy)", "committedDate": "2020-01-31T00:16:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4MDUzMg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/174#discussion_r373280532", "bodyText": "Info: StorageBlobClient is the user facing Client. It uses package private type StorageBlobServiceImpl for actual n/w call. There is no special reason for this delegation other than clean code.", "author": "anuchandy", "createdAt": "2020-01-31T01:33:52Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.core.http.ServiceCallBack;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.interceptor.AddDateInterceptor;\n+import com.azure.android.core.internal.util.serializer.SerializerFormat;\n+import com.azure.android.storage.blob.models.BlobItem;\n+import com.azure.android.storage.blob.models.ContainersListBlobFlatSegmentResponse;\n+import com.azure.android.storage.blob.models.ListBlobsIncludeItem;\n+import com.azure.android.storage.blob.models.ListBlobsOptions;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import okhttp3.Interceptor;\n+\n+/**\n+ * Client for Storage Blob service.\n+ */\n+public class StorageBlobClient {", "originalCommit": "989fb32d7fa4e1ce01bcd61ebd00a9c825d426ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5c114f95463618cd0525bd82882dab677e9c415", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 162e292f1..d770725de 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -3,7 +3,7 @@\n \n package com.azure.android.storage.blob;\n \n-import com.azure.android.core.http.ServiceCallBack;\n+import com.azure.android.core.http.Callback;\n import com.azure.android.core.http.ServiceClient;\n import com.azure.android.core.http.interceptor.AddDateInterceptor;\n import com.azure.android.core.internal.util.serializer.SerializerFormat;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjAwNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/174#discussion_r373286007", "bodyText": "Info: We've both sync and async methods. I found call-back based async is natural to use with android framework APIs such as pagination.", "author": "anuchandy", "createdAt": "2020-01-31T02:00:19Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.core.http.ServiceCallBack;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.interceptor.AddDateInterceptor;\n+import com.azure.android.core.internal.util.serializer.SerializerFormat;\n+import com.azure.android.storage.blob.models.BlobItem;\n+import com.azure.android.storage.blob.models.ContainersListBlobFlatSegmentResponse;\n+import com.azure.android.storage.blob.models.ListBlobsIncludeItem;\n+import com.azure.android.storage.blob.models.ListBlobsOptions;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import okhttp3.Interceptor;\n+\n+/**\n+ * Client for Storage Blob service.\n+ */\n+public class StorageBlobClient {\n+    private final ServiceClient serviceClient;\n+    private final StorageBlobServiceImpl storageBlobServiceClient;\n+\n+    private StorageBlobClient(ServiceClient serviceClient) {\n+        this.serviceClient = serviceClient;\n+        this.storageBlobServiceClient = new StorageBlobServiceImpl(this.serviceClient);\n+    }\n+\n+    /**\n+     * Creates a new {@link Builder} with initial configuration copied from this {@link StorageBlobClient}.\n+     *\n+     * @return A new {@link Builder}.\n+     */\n+    public StorageBlobClient.Builder newBuilder() {\n+        return new Builder(this);\n+    }\n+\n+    /**\n+     * Gets the blob service base URL.\n+     *\n+     * @return The blob service base URL.\n+     */\n+    public String getBlobServiceUrl() {\n+        return this.serviceClient.getBaseUrl();\n+    }\n+\n+    /**\n+     * Gets a list of blobs identified by a page id in a given container.\n+     *\n+     * @param pageId Identifies the portion of the list to be returned.\n+     * @param containerName The container name.\n+     * @param options The page options.\n+     * @return A list of blobs.\n+     */\n+    public List<BlobItem> getBlobsInPage(String pageId,\n+                                         String containerName,\n+                                         ListBlobsOptions options) {\n+        return this.storageBlobServiceClient.getBlobsInPage(pageId, containerName, options);\n+    }\n+\n+    /**\n+     * Gets a list of blobs identified by a page id in a given container.\n+     *\n+     * @param pageId Identifies the portion of the list to be returned.\n+     * @param containerName The container name.\n+     * @param options The page options.\n+     * @param callback Callback that receives the retrieved blob list.\n+     */\n+    public void getBlobsInPage(String pageId,\n+                               String containerName,\n+                               ListBlobsOptions options,\n+                               ServiceCallBack<List<BlobItem>> callback) {", "originalCommit": "989fb32d7fa4e1ce01bcd61ebd00a9c825d426ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5c114f95463618cd0525bd82882dab677e9c415", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\nindex 162e292f1..d770725de 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java\n\n@@ -3,7 +3,7 @@\n \n package com.azure.android.storage.blob;\n \n-import com.azure.android.core.http.ServiceCallBack;\n+import com.azure.android.core.http.Callback;\n import com.azure.android.core.http.ServiceClient;\n import com.azure.android.core.http.interceptor.AddDateInterceptor;\n import com.azure.android.core.internal.util.serializer.SerializerFormat;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjQwMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/174#discussion_r373286403", "bodyText": "Info: commented context will be removed, we haven't encountered need for pipeline context so far in mobile, so putting it in back log.", "author": "anuchandy", "createdAt": "2020-01-31T02:02:23Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java", "diffHunk": "@@ -0,0 +1,256 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob;\n+\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.ServiceCallBack;\n+import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n+import com.azure.android.core.internal.util.serializer.SerializerFormat;\n+import com.azure.android.storage.blob.models.BlobItem;\n+import com.azure.android.storage.blob.models.BlobStorageException;\n+import com.azure.android.storage.blob.models.ContainerListBlobFlatSegmentHeaders;\n+import com.azure.android.storage.blob.models.ContainersListBlobFlatSegmentResponse;\n+import com.azure.android.storage.blob.models.ListBlobsFlatSegmentResponse;\n+import com.azure.android.storage.blob.models.ListBlobsIncludeItem;\n+import com.azure.android.storage.blob.models.ListBlobsOptions;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import okhttp3.Headers;\n+import okhttp3.ResponseBody;\n+import retrofit2.Call;\n+import retrofit2.Callback;\n+import retrofit2.Response;\n+import retrofit2.http.GET;\n+import retrofit2.http.Header;\n+import retrofit2.http.Path;\n+import retrofit2.http.Query;\n+\n+/**\n+ * PACKAGE PRIVATE CLASS AND METHODS\n+ */\n+final class StorageBlobServiceImpl {\n+    private final StorageBlobService service;\n+    private final SerializerAdapter serializerAdapter;\n+    private static String XMS_VERSION = \"2019-02-02\";\n+\n+    StorageBlobServiceImpl(ServiceClient serviceClient) {\n+        this.service = serviceClient.getRetrofit().create(StorageBlobService.class);\n+        this.serializerAdapter = serviceClient.getSerializerAdapter();\n+    }\n+\n+    List<BlobItem> getBlobsInPage(String pageId,\n+                                  String containerName,\n+                                  ListBlobsOptions options) {\n+        options = options == null ? new ListBlobsOptions() : options;\n+        ContainersListBlobFlatSegmentResponse response\n+            = this.getBlobsInPageWithRestResponse(pageId, containerName, options.getPrefix(),\n+            options.getMaxResultsPerPage(), options.getDetails().toList(),\n+            null, null);\n+        List<BlobItem> value = response.getValue().getSegment() == null\n+            ? new ArrayList<>(0)\n+            : response.getValue().getSegment().getBlobItems();\n+        return value;\n+    }\n+\n+    void getBlobsInPage(String pageId,\n+                        String containerName,\n+                        ListBlobsOptions options,\n+                        ServiceCallBack<List<BlobItem>> callback) {\n+        options = options == null ? new ListBlobsOptions() : options;\n+        this.getBlobsInPageWithRestResponse(pageId, containerName, options.getPrefix(),\n+            options.getMaxResultsPerPage(), options.getDetails().toList(),\n+            null, null, new ServiceCallBack<ContainersListBlobFlatSegmentResponse>() {\n+                @Override\n+                public void onResponse(ContainersListBlobFlatSegmentResponse response) {\n+                    List<BlobItem> value = response.getValue().getSegment() == null\n+                        ? new ArrayList<>(0)\n+                        : response.getValue().getSegment().getBlobItems();\n+                    callback.onResponse(value);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t) {\n+                    callback.onFailure(t);\n+                }\n+            });\n+    }\n+\n+    ContainersListBlobFlatSegmentResponse getBlobsInPageWithRestResponse(String pageId,\n+                                                                         String containerName,\n+                                                                         String prefix,\n+                                                                         Integer maxResults,\n+                                                                         List<ListBlobsIncludeItem> include,\n+                                                                         Integer timeout,\n+                                                                         String requestId) {\n+        return this.getBlobsInPageWithRestResponseIntern(pageId, containerName,\n+            prefix,\n+            maxResults,\n+            include,\n+            timeout,\n+            requestId,\n+            null);\n+    }\n+\n+    void getBlobsInPageWithRestResponse(String pageId,\n+                                        String containerName,\n+                                        String prefix,\n+                                        Integer maxResults,\n+                                        List<ListBlobsIncludeItem> include,\n+                                        Integer timeout,\n+                                        String requestId,\n+                                        ServiceCallBack<ContainersListBlobFlatSegmentResponse> callback) {\n+        this.getBlobsInPageWithRestResponseIntern(pageId,\n+            containerName,\n+            prefix,\n+            maxResults,\n+            include,\n+            timeout,\n+            requestId,\n+            callback);\n+    }\n+\n+    private ContainersListBlobFlatSegmentResponse getBlobsInPageWithRestResponseIntern(String pageId,\n+                                                                                       String containerName,\n+                                                                                       String prefix,\n+                                                                                       Integer maxResults,\n+                                                                                       List<ListBlobsIncludeItem> include,\n+                                                                                       Integer timeout,\n+                                                                                       String requestId,\n+                                                                                       ServiceCallBack<ContainersListBlobFlatSegmentResponse> callback) {\n+        final String resType = \"container\";\n+        final String comp = \"list\";\n+        if (callback != null) {\n+            executeCall(service.listBlobFlatSegment(containerName,\n+                prefix,\n+                pageId,\n+                maxResults,\n+                this.serializerAdapter.serializeList(include, SerializerAdapter.CollectionFormat.CSV),\n+                timeout,\n+                XMS_VERSION,\n+                requestId,\n+                resType,\n+                comp\n+                /*context*/), new Callback<ResponseBody>() {\n+                @Override\n+                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\n+                    if (response.isSuccessful()) {\n+                        if (response.code() == 200) {\n+                            ListBlobsFlatSegmentResponse typedContent = deserializeContent(response.body(),\n+                                ListBlobsFlatSegmentResponse.class);\n+                            ContainerListBlobFlatSegmentHeaders typedHeader = deserializeHeaders(response.headers(),\n+                                ContainerListBlobFlatSegmentHeaders.class);\n+                            callback.onResponse(new ContainersListBlobFlatSegmentResponse(response.raw().request(),\n+                                response.code(),\n+                                response.headers(),\n+                                typedContent,\n+                                typedHeader));\n+                        } else {\n+                            String strContent = readAsString(response.body());\n+                            callback.onFailure(new BlobStorageException(strContent, response.raw()));\n+                        }\n+                    } else {\n+                        String strContent = readAsString(response.errorBody());\n+                        callback.onFailure(new BlobStorageException(strContent, response.raw()));\n+                    }\n+                }\n+\n+                @Override\n+                public void onFailure(Call<ResponseBody> call, Throwable t) {\n+                    callback.onFailure(t);\n+                }\n+            });\n+            return null;\n+        } else {\n+            Response<ResponseBody> response = executeCall(service.listBlobFlatSegment(containerName,\n+                prefix,\n+                pageId,\n+                maxResults,\n+                this.serializerAdapter.serializeList(include, SerializerAdapter.CollectionFormat.CSV),\n+                timeout,\n+                XMS_VERSION,\n+                requestId,\n+                resType,\n+                comp\n+                /*context*/));", "originalCommit": "989fb32d7fa4e1ce01bcd61ebd00a9c825d426ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5c114f95463618cd0525bd82882dab677e9c415", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\nindex c7a60ed1d..2eb12aab3 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobServiceImpl.java\n\n@@ -3,8 +3,8 @@\n \n package com.azure.android.storage.blob;\n \n+import com.azure.android.core.http.Callback;\n import com.azure.android.core.http.ServiceClient;\n-import com.azure.android.core.http.ServiceCallBack;\n import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n import com.azure.android.core.internal.util.serializer.SerializerFormat;\n import com.azure.android.storage.blob.models.BlobItem;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MjY3Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/174#discussion_r374942672", "bodyText": "Maybe we can improve the name? How about something like ResponseHandler?", "author": "bsiegel", "createdAt": "2020-02-04T21:50:07Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/http/ServiceCallBack.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.core.http;\n+\n+/**\n+ * Callback to receive a service operation result.\n+ *\n+ * @param <T> The type of the result.\n+ */\n+public interface ServiceCallBack<T> {", "originalCommit": "989fb32d7fa4e1ce01bcd61ebd00a9c825d426ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMDk0MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/174#discussion_r375000940", "bodyText": "If \"callback\" is common for Android e.g. in OkHttp, Maybe just call this class Callback? Since it's qualified by its package (\"com.azure.android.core.http.Callback\") I'm not too concerned about name collision, but if we can find a scenario where a customer might want to use both an OkHttp Callback and our Callback in the same file, I can be convinced otherwise.", "author": "bsiegel", "createdAt": "2020-02-05T00:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MjY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwOTU0OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/174#discussion_r375009549", "bodyText": "One of the goal while designing our serviceClient was - the support to take an existing OkHttpClient as the base. If I remember correctly we talked about cases where customers want to share an OkHttpClient his app uses for different purposes. In such cases, yes there are chances to use these two callbacks. That being said, I like com.azure.android.core.http.Callback, given its a pattern we generally see - okhttp3.Callback, retrofit2.Callback", "author": "anuchandy", "createdAt": "2020-02-05T01:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MjY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a5c114f95463618cd0525bd82882dab677e9c415", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/ServiceCallBack.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/Callback.java\nsimilarity index 93%\nrename from sdk/core/azure-core/src/main/java/com/azure/android/core/http/ServiceCallBack.java\nrename to sdk/core/azure-core/src/main/java/com/azure/android/core/http/Callback.java\nindex fbd8df331..7b0274860 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/http/ServiceCallBack.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/http/Callback.java\n\n@@ -8,7 +8,7 @@ package com.azure.android.core.http;\n  *\n  * @param <T> The type of the result.\n  */\n-public interface ServiceCallBack<T> {\n+public interface Callback<T> {\n     /**\n      * The method to call on a successful result.\n      *\n"}}, {"oid": "a5c114f95463618cd0525bd82882dab677e9c415", "url": "https://github.com/Azure/azure-sdk-for-android/commit/a5c114f95463618cd0525bd82882dab677e9c415", "message": "Renamed ServiceCallBack to Callback based on the discussion held here: https://github.com/Azure/azure-sdk-for-android/pull/174#discussion_r374942672", "committedDate": "2020-02-06T02:56:44Z", "type": "commit"}, {"oid": "2a70932b40b6d1dc7279531a5cf3a230df9869b4", "url": "https://github.com/Azure/azure-sdk-for-android/commit/2a70932b40b6d1dc7279531a5cf3a230df9869b4", "message": "Merge branch 'dev' into storage-client-list-blobs", "committedDate": "2020-02-06T03:05:14Z", "type": "commit"}]}