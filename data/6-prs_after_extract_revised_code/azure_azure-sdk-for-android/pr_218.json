{"pr_number": 218, "pr_title": "Unit testing serializer", "pr_createdAt": "2020-03-14T04:10:33Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/218", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyOTA5Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393829097", "bodyText": "Duration.ofMillis(0) could be made a constant, no need to instantiate an instance each time this needs to be checked.", "author": "alzimmermsft", "createdAt": "2020-03-17T16:57:36Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java", "diffHunk": "@@ -46,14 +46,14 @@ public static String toString(Duration duration) {\n         String result = null;\n \n         if (duration != null) {\n-            if (duration.get(ChronoUnit.MILLIS) == 0) {\n+            if (duration == Duration.ofMillis(0)) {", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNjczMg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393916732", "bodyText": "Good idea.", "author": "vcolin7", "createdAt": "2020-03-17T19:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyOTA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java\nindex 281bbd897..246fef6ca 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java\n\n@@ -46,14 +46,14 @@ final class DurationSerializer extends JsonSerializer<Duration> {\n         String result = null;\n \n         if (duration != null) {\n-            if (duration == Duration.ofMillis(0)) {\n+            if (duration.get(ChronoUnit.MILLIS) == 0) {\n                 result = \"PT0S\";\n             } else {\n                 final StringBuilder builder = new StringBuilder();\n \n                 builder.append('P');\n \n-                final long days = duration.toDays();\n+                final long days = duration.get(ChronoUnit.DAYS);\n \n                 if (days > 0) {\n                     builder.append(days);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMDUxNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393830514", "bodyText": "Does Duration.get(ChronoUnit) and Duration.toX result in the same thing? Reading the documentation for this class is a bit unclear on whether a duration of 1 year and 7 days will result in both being the same.", "author": "alzimmermsft", "createdAt": "2020-03-17T16:59:39Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java", "diffHunk": "@@ -46,14 +46,14 @@ public static String toString(Duration duration) {\n         String result = null;\n \n         if (duration != null) {\n-            if (duration.get(ChronoUnit.MILLIS) == 0) {\n+            if (duration == Duration.ofMillis(0)) {\n                 result = \"PT0S\";\n             } else {\n                 final StringBuilder builder = new StringBuilder();\n \n                 builder.append('P');\n \n-                final long days = duration.get(ChronoUnit.DAYS);\n+                final long days = duration.toDays();", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzNDM2NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393934364", "bodyText": "Originally our DurationSerializer class was written using Duration.get(ChronoUnit) to obtain days, hours, minutes, and everything else. Unfortunately, we didn't realize right away that this does not work with the dependency we are using (ThreeTenBP). There the get method looks like this, where only seconds and nanoseconds are supported. Looking at the rest of the class using toDays, toHours and the others seemed pretty straightforward if we subtract the amounts obtained from the Duration object.", "author": "vcolin7", "createdAt": "2020-03-17T19:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMDUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java\nindex 281bbd897..246fef6ca 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/DurationSerializer.java\n\n@@ -46,14 +46,14 @@ final class DurationSerializer extends JsonSerializer<Duration> {\n         String result = null;\n \n         if (duration != null) {\n-            if (duration == Duration.ofMillis(0)) {\n+            if (duration.get(ChronoUnit.MILLIS) == 0) {\n                 result = \"PT0S\";\n             } else {\n                 final StringBuilder builder = new StringBuilder();\n \n                 builder.append('P');\n \n-                final long days = duration.toDays();\n+                final long days = duration.get(ChronoUnit.DAYS);\n \n                 if (days > 0) {\n                     builder.append(days);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMTg2OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393831868", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!iterator.hasNext()) {\n          \n          \n            \n                        return \"\";\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    final StringBuilder stringBuilder = new StringBuilder();\n          \n          \n            \n                    stringBuilder.append(iterator.next());\n          \n          \n            \n            \n          \n          \n            \n                    while (iterator.hasNext()) {\n          \n          \n            \n                        stringBuilder.append(delimiter);\n          \n          \n            \n                        stringBuilder.append(iterator.next());\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return stringBuilder.toString();\n          \n          \n            \n                    final StringBuilder stringBuilder = new StringBuilder();\n          \n          \n            \n                    \n          \n          \n            \n                    while (iterator.hasNext()) {\n          \n          \n            \n                        stringBuilder.append(delimiter);\n          \n          \n            \n                        stringBuilder.append(iterator.next());\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return stringBuilder.toString();", "author": "alzimmermsft", "createdAt": "2020-03-17T17:01:38Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -309,4 +302,22 @@ private String serializeRaw(Object object) {\n             return null;\n         }\n     }\n+\n+    private static String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens) {\n+        final Iterator<?> iterator = tokens.iterator();\n+\n+        if (!iterator.hasNext()) {\n+            return \"\";\n+        }\n+\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(iterator.next());\n+\n+        while (iterator.hasNext()) {\n+            stringBuilder.append(delimiter);\n+            stringBuilder.append(iterator.next());\n+        }\n+\n+        return stringBuilder.toString();", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3MDY4MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393970681", "bodyText": "I think we need stringBuilder.append(iterator.next()) because if not the string will start with a delimiter, hence why we check if the iterator has a next at the beginning to add the first element before the delimiters.\nAn alternative would be using the code you propose but removing the last delimiter from the StringBuilder.", "author": "vcolin7", "createdAt": "2020-03-17T21:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMTg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java\nindex a3d4f4581..a9561ce73 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java\n\n@@ -302,22 +309,4 @@ public class JacksonAdapter implements SerializerAdapter {\n             return null;\n         }\n     }\n-\n-    private static String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens) {\n-        final Iterator<?> iterator = tokens.iterator();\n-\n-        if (!iterator.hasNext()) {\n-            return \"\";\n-        }\n-\n-        final StringBuilder stringBuilder = new StringBuilder();\n-        stringBuilder.append(iterator.next());\n-\n-        while (iterator.hasNext()) {\n-            stringBuilder.append(delimiter);\n-            stringBuilder.append(iterator.next());\n-        }\n-\n-        return stringBuilder.toString();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjU5MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393832590", "bodyText": "Any reason this was made into a local version instead of using TextUtils?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:02:43Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -309,4 +302,22 @@ private String serializeRaw(Object object) {\n             return null;\n         }\n     }\n+\n+    private static String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens) {", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1ODM0Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393958342", "bodyText": "TextUtils is an Android framework class and thus we cannot access its full functionality when running unit tests. Since the alternative String.join() is only available for a late Android version, I figured writing a simple method to join would be the best way to get around this problem.", "author": "vcolin7", "createdAt": "2020-03-17T20:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java\nindex a3d4f4581..a9561ce73 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java\n\n@@ -302,22 +309,4 @@ public class JacksonAdapter implements SerializerAdapter {\n             return null;\n         }\n     }\n-\n-    private static String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens) {\n-        final Iterator<?> iterator = tokens.iterator();\n-\n-        if (!iterator.hasNext()) {\n-            return \"\";\n-        }\n-\n-        final StringBuilder stringBuilder = new StringBuilder();\n-        stringBuilder.append(iterator.next());\n-\n-        while (iterator.hasNext()) {\n-            stringBuilder.append(delimiter);\n-            stringBuilder.append(iterator.next());\n-        }\n-\n-        return stringBuilder.toString();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTYzNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393835637", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:07:26Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/http/interceptor/LoggingInterceptorTest.java", "diffHunk": "@@ -1,6 +1,7 @@\n package com.azure.android.core.http.interceptor;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNzgzNg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393917836", "bodyText": "I didn't notice it didn't have the header the first time around. Will add it.", "author": "vcolin7", "createdAt": "2020-03-17T19:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/http/interceptor/LoggingInterceptorTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/http/interceptor/LoggingInterceptorTest.java\nindex f0c754a63..5bd89d963 100644\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/http/interceptor/LoggingInterceptorTest.java\n+++ b/sdk/core/azure-core/src/test/java/com/azure/android/core/http/interceptor/LoggingInterceptorTest.java\n\n@@ -1,7 +1,6 @@\n package com.azure.android.core.http.interceptor;\n \n import com.azure.android.core.http.HttpHeader;\n-\n import org.junit.Rule;\n import org.junit.Test;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTczOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393835738", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:07:37Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -1,8 +1,9 @@\n package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjQwNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942405", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T20:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTczOA=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java\nindex a3d4f4581..a9561ce73 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/android/core/internal/util/serializer/JacksonAdapter.java\n\n@@ -1,9 +1,8 @@\n package com.azure.android.core.internal.util.serializer;\n \n+import android.text.TextUtils;\n import android.util.Log;\n \n-import androidx.annotation.NonNull;\n-\n import com.azure.android.core.annotation.HeaderCollection;\n import com.azure.android.core.internal.util.serializer.exception.MalformedValueException;\n import com.azure.android.core.internal.util.serializer.threeten.ThreeTenModule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTgxOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393835819", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:07:44Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializerTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjQ0OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942449", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T20:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializerTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializerTest.java\nindex 09f2f8fe3..1edcc3f80 100644\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializerTest.java\n+++ b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/Base64UrlSerializerTest.java\n\n@@ -8,12 +8,12 @@ import com.fasterxml.jackson.databind.module.SimpleModule;\n import org.junit.Test;\n \n import java.io.IOException;\n+import java.io.OutputStream;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n public class Base64UrlSerializerTest {\n-    private static String TEST_URL = \"http://127.0.0.1/\";\n \n     @Test\n     public void test_getModule() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTkwMg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393835902", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:07:50Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjM3Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942376", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T20:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "6792400a025914851897ed9176c4c1fe3667e07a", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java\nindex 9ce855a25..46abcd1e5 100644\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java\n+++ b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.android.core.internal.util.serializer;\n \n import com.fasterxml.jackson.core.JsonFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTk5Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393835993", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:07:58Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjM2MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942360", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T20:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java\ndeleted file mode 100644\nindex 77f8a0d3c..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java\n+++ /dev/null\n\n@@ -1,46 +0,0 @@\n-package com.azure.android.core.internal.util.serializer;\n-\n-import com.azure.android.core.util.DateTimeRfc1123;\n-import com.fasterxml.jackson.core.JsonFactory;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-\n-import org.junit.Test;\n-import org.threeten.bp.LocalDateTime;\n-import org.threeten.bp.OffsetDateTime;\n-import org.threeten.bp.ZoneId;\n-import org.threeten.bp.ZoneOffset;\n-import org.threeten.bp.format.DateTimeFormatter;\n-\n-import java.io.IOException;\n-import java.util.Locale;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-\n-public class DateTimeRfc1123SerializerTest {\n-    public static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n-        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n-\n-    @Test\n-    public void test_getModule() {\n-        SimpleModule module = DateTimeRfc1123Serializer.getModule();\n-\n-        assertNotNull(module);\n-    }\n-\n-    @Test\n-    public void serializeDateTimeRfc1123() throws IOException {\n-        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n-        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n-        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n-        DateTimeRfc1123Serializer dateTimeRfc1123Serializer = new DateTimeRfc1123Serializer();\n-\n-        dateTimeRfc1123Serializer.serialize(dateTimeRfc1123, jsonGenerator, null);\n-        jsonGenerator.flush();\n-\n-        assertEquals(\"\\\"\" + testDate + \"\\\"\", outputStream.toString());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjA0Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393836047", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:08:04Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjM0MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942340", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T20:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java\ndeleted file mode 100644\nindex 518198412..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java\n+++ /dev/null\n\n@@ -1,183 +0,0 @@\n-package com.azure.android.core.internal.util.serializer;\n-\n-import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n-import com.fasterxml.jackson.core.Base64Variants;\n-import com.fasterxml.jackson.core.JsonFactory;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializationConfig;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.cfg.BaseSettings;\n-import com.fasterxml.jackson.databind.cfg.ConfigOverrides;\n-import com.fasterxml.jackson.databind.introspect.Annotated;\n-import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;\n-import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n-import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n-import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;\n-import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-import com.fasterxml.jackson.databind.ser.SerializerFactory;\n-import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n-import com.fasterxml.jackson.databind.util.RootNameLookup;\n-import com.fasterxml.jackson.databind.util.StdDateFormat;\n-\n-import org.junit.Test;\n-import org.threeten.bp.LocalDateTime;\n-import org.threeten.bp.OffsetDateTime;\n-import org.threeten.bp.ZoneId;\n-import org.threeten.bp.ZoneOffset;\n-import org.threeten.bp.format.DateTimeFormatter;\n-\n-import java.io.IOException;\n-import java.util.Locale;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-\n-public class DateTimeSerializerTest {\n-    private static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n-        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n-\n-    @Test\n-    public void test_getModule() {\n-        SimpleModule module = DateTimeSerializer.getModule();\n-\n-        assertNotNull(module);\n-    }\n-\n-    @Test\n-    public void serializeDateTime_asNumber() throws IOException {\n-        // DateTime\n-        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n-        OffsetDateTime dateTime =\n-            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n-\n-        // JsonGenerator and target OutputStream\n-        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n-        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n-\n-        // SerializerProvider\n-        BaseSettings baseSettings = new BaseSettings(null, new JacksonAnnotationIntrospector(), null,\n-            TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), null,\n-            Base64Variants.getDefaultVariant());\n-        SerializationConfig serializationConfig = new SerializationConfig(\n-            baseSettings.withClassIntrospector(new BasicClassIntrospector()), new StdSubtypeResolver(),\n-            new SimpleMixInResolver(null), new RootNameLookup(), new ConfigOverrides());\n-        SerializerProvider serializerProvider = new SerializerProvider() {\n-            @Override\n-            public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n-                return null;\n-            }\n-\n-            @Override\n-            public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n-                return null;\n-            }\n-\n-            @Override\n-            public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n-                return null;\n-            }\n-\n-            @Override\n-            public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n-                return false;\n-            }\n-        };\n-        SerializerProvider serializerProviderStub =\n-            new SerializerProviderStub(serializerProvider, serializationConfig, null);\n-\n-        // Actual serialization\n-        new DateTimeSerializer().serialize(dateTime, jsonGenerator, serializerProviderStub);\n-        jsonGenerator.flush();\n-\n-        assertEquals(\"1582592362000\", outputStream.toString());\n-    }\n-\n-    @Test\n-    public void serializeDateTime_asString() throws IOException {\n-        //DateTime\n-        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n-        OffsetDateTime dateTime =\n-            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n-\n-        // JsonGenerator and target OutputStream\n-        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n-        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n-\n-        // SerializerProvider\n-        BaseSettings baseSettings = new BaseSettings(null, new JacksonAnnotationIntrospector(), null,\n-            TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), null,\n-            Base64Variants.getDefaultVariant());\n-        SerializationConfig serializationConfig = new SerializationConfig(\n-            baseSettings.withClassIntrospector(new BasicClassIntrospector()), new StdSubtypeResolver(),\n-            new SimpleMixInResolver(null), new RootNameLookup(), new ConfigOverrides());\n-        serializationConfig = serializationConfig.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n-        SerializerProvider serializerProvider = new SerializerProvider() {\n-            @Override\n-            public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n-                return null;\n-            }\n-\n-            @Override\n-            public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n-                return null;\n-            }\n-\n-            @Override\n-            public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n-                return null;\n-            }\n-\n-            @Override\n-            public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n-                return false;\n-            }\n-        };\n-        SerializerProvider serializerProviderStub =\n-            new SerializerProviderStub(serializerProvider, serializationConfig, null);\n-\n-        // Actual serialization\n-        new DateTimeSerializer().serialize(dateTime, jsonGenerator, serializerProviderStub);\n-        jsonGenerator.flush();\n-\n-        assertEquals(\"\\\"2020-02-25T00:59:22Z\\\"\", outputStream.toString());\n-    }\n-\n-    @Test\n-    public void test_ToString() {\n-        OffsetDateTime dateTime =\n-            OffsetDateTime.of(LocalDateTime.parse(\"Tue, 25 Feb 2020 00:59:22 GMT\", RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n-\n-        assertEquals(\"2020-02-25T00:59:22Z\", DateTimeSerializer.toString(dateTime));\n-    }\n-\n-    private class SerializerProviderStub extends SerializerProvider {\n-        public SerializerProviderStub(SerializerProvider src, SerializationConfig config, SerializerFactory f) {\n-            super(src, config, f);\n-        }\n-\n-        @Override\n-        public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n-            return null;\n-        }\n-\n-        @Override\n-        public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n-            return null;\n-        }\n-\n-        @Override\n-        public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n-            return null;\n-        }\n-\n-        @Override\n-        public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n-            return false;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjE0OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393836149", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:08:13Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MjMxOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393942319", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T20:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java\ndeleted file mode 100644\nindex 43ed2f5ad..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java\n+++ /dev/null\n\n@@ -1,74 +0,0 @@\n-package com.azure.android.core.internal.util.serializer;\n-\n-import com.fasterxml.jackson.core.JsonFactory;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-\n-import org.junit.Test;\n-import org.threeten.bp.Duration;\n-\n-import java.io.IOException;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-\n-public class DurationSerializerTest {\n-    @Test\n-    public void test_getModule() {\n-        SimpleModule module = DurationSerializer.getModule();\n-\n-        assertNotNull(module);\n-    }\n-\n-    @Test\n-    public void serializeDuration() throws IOException {\n-        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n-        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n-        DurationSerializer durationSerializer = new DurationSerializer();\n-\n-        durationSerializer.serialize(Duration.ofDays(3), jsonGenerator, null);\n-        jsonGenerator.flush();\n-\n-        assertEquals(\"\\\"P3D\\\"\", outputStream.toString());\n-    }\n-\n-    @Test\n-    public void duration_ofDays_toString() {\n-        assertEquals(\"P5D\", DurationSerializer.toString(Duration.ofDays(5)));\n-    }\n-\n-    @Test\n-    public void duration_ofHours_toString() {\n-        assertEquals(\"PT5H\", DurationSerializer.toString(Duration.ofHours(5)));\n-    }\n-\n-    @Test\n-    public void duration_ofMinutes_toString() {\n-        assertEquals(\"PT5M\", DurationSerializer.toString(Duration.ofMinutes(5)));\n-    }\n-\n-    @Test\n-    public void duration_ofSeconds_toString() {\n-        assertEquals(\"PT5S\", DurationSerializer.toString(Duration.ofSeconds(5)));\n-    }\n-\n-    @Test\n-    public void duration_ofMillis_toString() {\n-        assertEquals(\"PT0.005S\", DurationSerializer.toString(Duration.ofMillis(5)));\n-    }\n-\n-    @Test\n-    public void duration_ofManyMillis_toString() {\n-        assertEquals(\"P17DT8H41M54.373S\", DurationSerializer.toString(Duration.ofMillis(1500114373)));\n-    }\n-\n-    @Test\n-    public void duration_ofNanos_toString() {\n-        assertEquals(\"PT2.1S\", DurationSerializer.toString(Duration.ofNanos(2100114373)));\n-    }\n-\n-    @Test\n-    public void duration_zeroMillis_toString() {\n-        assertEquals(\"PT0S\", DurationSerializer.toString(Duration.ofMillis(0)));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjIxOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393836219", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:08:20Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/JacksonAdapterTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNzg4Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393917883", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T19:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/JacksonAdapterTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/JacksonAdapterTest.java\ndeleted file mode 100644\nindex 06a16468a..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/JacksonAdapterTest.java\n+++ /dev/null\n\n@@ -1,215 +0,0 @@\n-package com.azure.android.core.internal.util.serializer;\n-\n-import com.azure.android.core.internal.util.serializer.exception.MalformedValueException;\n-\n-import org.junit.Test;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import okhttp3.Headers;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-\n-public class JacksonAdapterTest {\n-    @Test\n-    public void test_createDefaultSerializerAdapter() {\n-        assertNotNull(JacksonAdapter.createDefaultSerializerAdapter());\n-    }\n-\n-    @Test\n-    public void test_serializer() {\n-        JacksonAdapter jacksonAdapter = (JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertNotNull(jacksonAdapter.serializer());\n-    }\n-\n-    @Test\n-    public void serialize_withNoFormat() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertEquals(\"{\\\"x\\\":1,\\\"y\\\":2}\", serializerAdapter.serialize(new TestModel(1, 2), null));\n-    }\n-\n-    @Test\n-    public void serialize_toJson() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertEquals(\"{\\\"x\\\":1,\\\"y\\\":2}\", serializerAdapter.serialize(new TestModel(1, 2), SerializerFormat.JSON));\n-    }\n-\n-    @Test\n-    public void serialize_toXml() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertEquals(\"<?xml version='1.0' encoding='UTF-8'?><TestModel><x>1</x><y>2</y></TestModel>\",\n-            serializerAdapter.serialize(new TestModel(1, 2), SerializerFormat.XML));\n-    }\n-\n-    @Test\n-    public void serialize_nullObject() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertNull(serializerAdapter.serialize(null, null));\n-    }\n-\n-    @Test\n-    public void serializeList_withCommaSeparatedValues() {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-        List<TestModel> list = new ArrayList<>();\n-        list.add(new TestModel(1, 2));\n-        list.add(new TestModel(3, 4));\n-        list.add(new TestModel(5, 6));\n-\n-        assertEquals(\"{\\\"x\\\":1,\\\"y\\\":2},{\\\"x\\\":3,\\\"y\\\":4},{\\\"x\\\":5,\\\"y\\\":6}\",\n-            serializerAdapter.serializeList(list, SerializerAdapter.CollectionFormat.CSV));\n-    }\n-\n-    @Test\n-    public void serializeList_withSpaceSeparatedValues() {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-        List<TestModel> list = new ArrayList<>();\n-        list.add(new TestModel(1, 2));\n-        list.add(new TestModel(3, 4));\n-        list.add(new TestModel(5, 6));\n-\n-        assertEquals(\"{\\\"x\\\":1,\\\"y\\\":2} {\\\"x\\\":3,\\\"y\\\":4} {\\\"x\\\":5,\\\"y\\\":6}\",\n-            serializerAdapter.serializeList(list, SerializerAdapter.CollectionFormat.SSV));\n-    }\n-\n-    @Test\n-    public void serializeList_withTabSeparatedValues() {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-        List<TestModel> list = new ArrayList<>();\n-        list.add(new TestModel(1, 2));\n-        list.add(new TestModel(3, 4));\n-        list.add(new TestModel(5, 6));\n-\n-        assertEquals(\"{\\\"x\\\":1,\\\"y\\\":2} {\\\"x\\\":3,\\\"y\\\":4} {\\\"x\\\":5,\\\"y\\\":6}\",\n-            serializerAdapter.serializeList(list, SerializerAdapter.CollectionFormat.SSV));\n-    }\n-\n-    @Test\n-    public void serializeList_withPipeSeparatedValues() {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-        List<TestModel> list = new ArrayList<>();\n-        list.add(new TestModel(1, 2));\n-        list.add(new TestModel(3, 4));\n-        list.add(new TestModel(5, 6));\n-\n-        assertEquals(\"{\\\"x\\\":1,\\\"y\\\":2}|{\\\"x\\\":3,\\\"y\\\":4}|{\\\"x\\\":5,\\\"y\\\":6}\",\n-            serializerAdapter.serializeList(list, SerializerAdapter.CollectionFormat.PIPES));\n-    }\n-\n-    @Test\n-    public void serializeList_asMultipleParameters() {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-        List<TestModel> list = new ArrayList<>();\n-        list.add(new TestModel(1, 2));\n-        list.add(new TestModel(3, 4));\n-        list.add(new TestModel(5, 6));\n-\n-        assertEquals(\"{\\\"x\\\":1,\\\"y\\\":2}&{\\\"x\\\":3,\\\"y\\\":4}&{\\\"x\\\":5,\\\"y\\\":6}\",\n-            serializerAdapter.serializeList(list, SerializerAdapter.CollectionFormat.MULTI));\n-    }\n-\n-    @Test\n-    public void serializeList_nullObject() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertNull(serializerAdapter.serializeList(null, null));\n-    }\n-\n-    @Test\n-    public void deserialize_withNoFormat() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertEquals(new TestModel(1, 2), serializerAdapter.deserialize(\"{\\\"x\\\": 1, \\\"y\\\": 2}\",\n-            TestModel.class, null));\n-    }\n-\n-    @Test\n-    public void deserialize_json() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertEquals(new TestModel(1, 2), serializerAdapter.deserialize(\"{\\\"x\\\": 1, \\\"y\\\": 2}\",\n-            TestModel.class, SerializerFormat.JSON));\n-    }\n-\n-    @Test\n-    public void deserialize_xml() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertEquals(new TestModel(1, 2), serializerAdapter.deserialize(\"<TestModel><x>1</x><y>2</y></TestModel>\",\n-            TestModel.class, SerializerFormat.XML));\n-    }\n-\n-    @Test\n-    public void deserialize_nullObject() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertNull(serializerAdapter.deserialize(null, TestModel.class, SerializerFormat.XML));\n-    }\n-\n-    @Test\n-    public void deserialize_stringStartingWithByteOrderMark() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertEquals(new TestModel(1, 2), serializerAdapter.deserialize(\"\\uFEFF{\\\"x\\\": 1, \\\"y\\\": 2}\",\n-            TestModel.class, null));\n-    }\n-\n-    @Test(expected = MalformedValueException.class)\n-    public void deserialize_malformedJson() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-\n-        assertEquals(new TestModel(1, 2), serializerAdapter.deserialize(\"TestModel{\\\"x\\\": 1, \\\"y\\\": 2}}\",\n-            TestModel.class, null));\n-    }\n-\n-    @Test\n-    public void deserialize_headers() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-        Headers headers = new Headers.Builder()\n-            .set(\"x\", \"1\")\n-            .set(\"y\", \"2\")\n-            .build();\n-\n-        assertEquals(new TestModel(1, 2), serializerAdapter.deserialize(headers, TestModel.class));\n-    }\n-\n-    @Test\n-    public void deserialize_headersWithHeaderCollection() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-        Headers headers = new Headers.Builder()\n-            .set(\"firstHeader\", \"first value\")\n-            .set(\"secondHeader-one\", \"1\")\n-            .set(\"secondHeader-two\", \"2\")\n-            .set(\"secondHeader-three\", \"3\")\n-            .build();\n-\n-        Map<String, String> secondHeaderMap = new HashMap<>();\n-        secondHeaderMap.put(\"secondHeader-one\", \"1\");\n-        secondHeaderMap.put(\"secondHeader-two\", \"2\");\n-        secondHeaderMap.put(\"secondHeader-three\", \"3\");\n-\n-        assertEquals(new TestHeaders(\"first value\", secondHeaderMap),\n-            serializerAdapter.deserialize(headers, TestHeaders.class));\n-    }\n-\n-    @Test\n-    public void deserialize_nullHeaders() throws IOException {\n-        SerializerAdapter serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-        Headers headers = new Headers.Builder()\n-            .set(\"firstHeader\", \"first value\")\n-            .set(\"secondHeader\", \"second value\")\n-            .build();\n-\n-        assertNull(serializerAdapter.deserialize(headers, null));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjkyMg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393836922", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:09:28Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/SerializerFormatTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODA5MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393918090", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T19:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "6792400a025914851897ed9176c4c1fe3667e07a", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/SerializerFormatTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/SerializerFormatTest.java\nindex 32615749f..bd973ccee 100644\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/SerializerFormatTest.java\n+++ b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/SerializerFormatTest.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.android.core.internal.util.serializer;\n \n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjk5Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393836993", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:09:35Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/StringBuilderOutputStream.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODE1Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393918153", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T19:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6792400a025914851897ed9176c4c1fe3667e07a", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/StringBuilderOutputStream.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/StringBuilderOutputStream.java\nindex d327f66a3..4bd866003 100644\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/StringBuilderOutputStream.java\n+++ b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/StringBuilderOutputStream.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.android.core.internal.util.serializer;\n \n import java.io.OutputStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzA2NQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393837065", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:09:40Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestHeaders.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODE2OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393918169", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T19:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestHeaders.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestHeaders.java\ndeleted file mode 100644\nindex 69bbb845e..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestHeaders.java\n+++ /dev/null\n\n@@ -1,73 +0,0 @@\n-package com.azure.android.core.internal.util.serializer;\n-\n-import androidx.annotation.NonNull;\n-\n-import com.azure.android.core.annotation.HeaderCollection;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-import java.util.Map;\n-import java.util.Objects;\n-\n-public class TestHeaders {\n-    private String firstHeader;\n-\n-    @HeaderCollection(\"secondHeader-\")\n-    private Map<String, String> secondHeader;\n-\n-    @JsonCreator\n-    public TestHeaders(@JsonProperty(value = \"firstHeader\") String firstHeader,\n-                       @JsonProperty(value = \"secondHeader\") @NonNull Map<String, String> secondHeader) {\n-        this.firstHeader = firstHeader;\n-        this.secondHeader = secondHeader;\n-    }\n-\n-    public String getFirstHeader() {\n-        return firstHeader;\n-    }\n-\n-    public void setFirstHeader(String firstHeader) {\n-        this.firstHeader = firstHeader;\n-    }\n-\n-    public Map<String, String> getSecondHeader() {\n-        return secondHeader;\n-    }\n-\n-    public void setSecondHeader(Map<String, String> secondHeader) {\n-        this.secondHeader = secondHeader;\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-\n-        if (obj == null || getClass() != obj.getClass()) {\n-            return false;\n-        }\n-\n-        TestHeaders testHeaders = (TestHeaders) obj;\n-        boolean mapsAreEqual = true;\n-\n-        for (String key : testHeaders.secondHeader.keySet()) {\n-            if (!secondHeader.containsKey(\"secondHeader-\" + key)) {\n-                mapsAreEqual = false;\n-\n-                break;\n-            } else if (!secondHeader.get(\"secondHeader-\" + key).equals(testHeaders.secondHeader.get(key))) {\n-                mapsAreEqual = false;\n-\n-                break;\n-            }\n-        }\n-\n-        return firstHeader.equals(testHeaders.firstHeader) && mapsAreEqual;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(firstHeader, secondHeader);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzEzNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393837135", "bodyText": "Does this class need the copyright header?", "author": "alzimmermsft", "createdAt": "2020-03-17T17:09:47Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.azure.android.core.internal.util.serializer;", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODE5Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393918196", "bodyText": "See first response about the copyright header.", "author": "vcolin7", "createdAt": "2020-03-17T19:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestModel.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestModel.java\ndeleted file mode 100644\nindex ff90b6041..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/TestModel.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-package com.azure.android.core.internal.util.serializer;\n-\n-import androidx.annotation.NonNull;\n-\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-import java.util.Objects;\n-\n-public class TestModel {\n-    private int x;\n-    private int y;\n-\n-    @JsonCreator\n-    public TestModel(@JsonProperty(\"x\") int x, @JsonProperty(\"y\") int y) {\n-        this.x = x;\n-        this.y = y;\n-    }\n-\n-    public int getX() {\n-        return x;\n-    }\n-\n-    public void setX(int x) {\n-        this.x = x;\n-    }\n-\n-    public int getY() {\n-        return y;\n-    }\n-\n-    public void setY(int y) {\n-        this.y = y;\n-    }\n-\n-    @NonNull\n-    @Override\n-    public String toString() {\n-        return \"TestModel{\" +\n-            \"x=\" + x +\n-            \", y=\" + y +\n-            '}';\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-\n-        if (obj == null || getClass() != obj.getClass()) {\n-            return false;\n-        }\n-\n-        TestModel testModel = (TestModel) obj;\n-\n-        return x == testModel.x && y == testModel.y;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(x, y);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NDE1MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393874150", "bodyText": "Does this need to be the object type of byte?", "author": "alzimmermsft", "createdAt": "2020-03-17T18:08:43Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class ByteArraySerializerTest {\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = ByteArraySerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void test_serialize() throws IOException {\n+        Byte[] byteObjects = new Byte[] { 84, 101, 115, 116, 32, 115, 116, 114, 105, 110, 103 };", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2NDUwMQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393964501", "bodyText": "Yes. The serialize method we override in ByteArraySerializer expects a Byte[] object.", "author": "vcolin7", "createdAt": "2020-03-17T20:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NDE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "6792400a025914851897ed9176c4c1fe3667e07a", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java\nindex 9ce855a25..46abcd1e5 100644\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java\n+++ b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.android.core.internal.util.serializer;\n \n import com.fasterxml.jackson.core.JsonFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTQ5MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393875491", "bodyText": "Mind putting a comment on the byte arrays that mentions their UTF-8 string representation? It'll make the tests more understandable, right now I can't really make heads or tails on whether this is correct since it is just sequences of numbers.", "author": "alzimmermsft", "createdAt": "2020-03-17T18:10:52Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class ByteArraySerializerTest {\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = ByteArraySerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void test_serialize() throws IOException {\n+        Byte[] byteObjects = new Byte[] { 84, 101, 115, 116, 32, 115, 116, 114, 105, 110, 103 };", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2NDYxOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393964618", "bodyText": "Sure thing.", "author": "vcolin7", "createdAt": "2020-03-17T20:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6792400a025914851897ed9176c4c1fe3667e07a", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java\nindex 9ce855a25..46abcd1e5 100644\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java\n+++ b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/ByteArraySerializerTest.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.android.core.internal.util.serializer;\n \n import com.fasterxml.jackson.core.JsonFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NjY0MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393876641", "bodyText": "Mind adding a test for non-DateTimeRfc1123 or malformed representations being passed into this serializer? Would it be able to handle an ISO8601 date? What happens if GMT is missing from the date string? Could it handle a different time zone offset?", "author": "alzimmermsft", "createdAt": "2020-03-17T18:12:53Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.azure.android.core.util.DateTimeRfc1123;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+import org.threeten.bp.LocalDateTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.ZoneId;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class DateTimeRfc1123SerializerTest {\n+    public static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n+        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = DateTimeRfc1123Serializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void serializeDateTimeRfc1123() throws IOException {", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk4MDk2NQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393980965", "bodyText": "From what I've noticed playing around with this serializer it only accepts DateTimeRfc1123 objects. To create an instance of this class you need either an OffsetDateTime instance or a correctly formatted string, which make me believe it could not accept a malformed representation. An exception would be thrown from OffsetDateTime when trying to use an invalid date, formatter o zone offset.\nNot sure about the ISO date though, will look into it.", "author": "vcolin7", "createdAt": "2020-03-17T21:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NjY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NDY0OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r394584649", "bodyText": "Ah, nevermind, if it can only accept DateTimeRfc1123 objects there is no need to test with ISO8601.", "author": "alzimmermsft", "createdAt": "2020-03-18T19:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NjY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java\ndeleted file mode 100644\nindex 77f8a0d3c..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeRfc1123SerializerTest.java\n+++ /dev/null\n\n@@ -1,46 +0,0 @@\n-package com.azure.android.core.internal.util.serializer;\n-\n-import com.azure.android.core.util.DateTimeRfc1123;\n-import com.fasterxml.jackson.core.JsonFactory;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-\n-import org.junit.Test;\n-import org.threeten.bp.LocalDateTime;\n-import org.threeten.bp.OffsetDateTime;\n-import org.threeten.bp.ZoneId;\n-import org.threeten.bp.ZoneOffset;\n-import org.threeten.bp.format.DateTimeFormatter;\n-\n-import java.io.IOException;\n-import java.util.Locale;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-\n-public class DateTimeRfc1123SerializerTest {\n-    public static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n-        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n-\n-    @Test\n-    public void test_getModule() {\n-        SimpleModule module = DateTimeRfc1123Serializer.getModule();\n-\n-        assertNotNull(module);\n-    }\n-\n-    @Test\n-    public void serializeDateTimeRfc1123() throws IOException {\n-        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n-        DateTimeRfc1123 dateTimeRfc1123 = new DateTimeRfc1123(\n-            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC));\n-        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n-        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n-        DateTimeRfc1123Serializer dateTimeRfc1123Serializer = new DateTimeRfc1123Serializer();\n-\n-        dateTimeRfc1123Serializer.serialize(dateTimeRfc1123, jsonGenerator, null);\n-        jsonGenerator.flush();\n-\n-        assertEquals(\"\\\"\" + testDate + \"\\\"\", outputStream.toString());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NzY1OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393877659", "bodyText": "This appears to be duplicated", "author": "alzimmermsft", "createdAt": "2020-03-17T18:14:32Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.core.Base64Variants;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.cfg.BaseSettings;\n+import com.fasterxml.jackson.databind.cfg.ConfigOverrides;\n+import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;\n+import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.SerializerFactory;\n+import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.RootNameLookup;\n+import com.fasterxml.jackson.databind.util.StdDateFormat;\n+\n+import org.junit.Test;\n+import org.threeten.bp.LocalDateTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.ZoneId;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class DateTimeSerializerTest {\n+    private static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n+        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n+\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = DateTimeSerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void serializeDateTime_asNumber() throws IOException {\n+        // DateTime\n+        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n+        OffsetDateTime dateTime =\n+            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n+\n+        // JsonGenerator and target OutputStream\n+        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n+        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n+\n+        // SerializerProvider\n+        BaseSettings baseSettings = new BaseSettings(null, new JacksonAnnotationIntrospector(), null,\n+            TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), null,\n+            Base64Variants.getDefaultVariant());\n+        SerializationConfig serializationConfig = new SerializationConfig(\n+            baseSettings.withClassIntrospector(new BasicClassIntrospector()), new StdSubtypeResolver(),\n+            new SimpleMixInResolver(null), new RootNameLookup(), new ConfigOverrides());\n+        SerializerProvider serializerProvider = new SerializerProvider() {\n+            @Override\n+            public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n+                return null;\n+            }\n+\n+            @Override\n+            public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n+                return false;\n+            }\n+        };\n+        SerializerProvider serializerProviderStub =\n+            new SerializerProviderStub(serializerProvider, serializationConfig, null);\n+\n+        // Actual serialization\n+        new DateTimeSerializer().serialize(dateTime, jsonGenerator, serializerProviderStub);\n+        jsonGenerator.flush();\n+\n+        assertEquals(\"1582592362000\", outputStream.toString());\n+    }\n+\n+    @Test\n+    public void serializeDateTime_asString() throws IOException {\n+        //DateTime\n+        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n+        OffsetDateTime dateTime =\n+            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n+\n+        // JsonGenerator and target OutputStream\n+        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n+        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n+\n+        // SerializerProvider\n+        BaseSettings baseSettings = new BaseSettings(null, new JacksonAnnotationIntrospector(), null,\n+            TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), null,\n+            Base64Variants.getDefaultVariant());\n+        SerializationConfig serializationConfig = new SerializationConfig(\n+            baseSettings.withClassIntrospector(new BasicClassIntrospector()), new StdSubtypeResolver(),\n+            new SimpleMixInResolver(null), new RootNameLookup(), new ConfigOverrides());\n+        serializationConfig = serializationConfig.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+        SerializerProvider serializerProvider = new SerializerProvider() {\n+            @Override\n+            public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n+                return null;\n+            }\n+\n+            @Override\n+            public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n+                return false;\n+            }\n+        };", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2NzYyOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393967629", "bodyText": "I'll refactor the SerializerProviderStub class to include a constructor that creates an object like this, this way we avoid code duplication and make it easier to read what's going on.", "author": "vcolin7", "createdAt": "2020-03-17T21:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NzY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java\ndeleted file mode 100644\nindex 518198412..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DateTimeSerializerTest.java\n+++ /dev/null\n\n@@ -1,183 +0,0 @@\n-package com.azure.android.core.internal.util.serializer;\n-\n-import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n-import com.fasterxml.jackson.core.Base64Variants;\n-import com.fasterxml.jackson.core.JsonFactory;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializationConfig;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.cfg.BaseSettings;\n-import com.fasterxml.jackson.databind.cfg.ConfigOverrides;\n-import com.fasterxml.jackson.databind.introspect.Annotated;\n-import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;\n-import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n-import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n-import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;\n-import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-import com.fasterxml.jackson.databind.ser.SerializerFactory;\n-import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n-import com.fasterxml.jackson.databind.util.RootNameLookup;\n-import com.fasterxml.jackson.databind.util.StdDateFormat;\n-\n-import org.junit.Test;\n-import org.threeten.bp.LocalDateTime;\n-import org.threeten.bp.OffsetDateTime;\n-import org.threeten.bp.ZoneId;\n-import org.threeten.bp.ZoneOffset;\n-import org.threeten.bp.format.DateTimeFormatter;\n-\n-import java.io.IOException;\n-import java.util.Locale;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-\n-public class DateTimeSerializerTest {\n-    private static final DateTimeFormatter RFC1123_DATE_TIME_FORMATTER =\n-        DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\").withZone(ZoneId.of(\"UTC\")).withLocale(Locale.US);\n-\n-    @Test\n-    public void test_getModule() {\n-        SimpleModule module = DateTimeSerializer.getModule();\n-\n-        assertNotNull(module);\n-    }\n-\n-    @Test\n-    public void serializeDateTime_asNumber() throws IOException {\n-        // DateTime\n-        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n-        OffsetDateTime dateTime =\n-            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n-\n-        // JsonGenerator and target OutputStream\n-        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n-        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n-\n-        // SerializerProvider\n-        BaseSettings baseSettings = new BaseSettings(null, new JacksonAnnotationIntrospector(), null,\n-            TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), null,\n-            Base64Variants.getDefaultVariant());\n-        SerializationConfig serializationConfig = new SerializationConfig(\n-            baseSettings.withClassIntrospector(new BasicClassIntrospector()), new StdSubtypeResolver(),\n-            new SimpleMixInResolver(null), new RootNameLookup(), new ConfigOverrides());\n-        SerializerProvider serializerProvider = new SerializerProvider() {\n-            @Override\n-            public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n-                return null;\n-            }\n-\n-            @Override\n-            public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n-                return null;\n-            }\n-\n-            @Override\n-            public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n-                return null;\n-            }\n-\n-            @Override\n-            public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n-                return false;\n-            }\n-        };\n-        SerializerProvider serializerProviderStub =\n-            new SerializerProviderStub(serializerProvider, serializationConfig, null);\n-\n-        // Actual serialization\n-        new DateTimeSerializer().serialize(dateTime, jsonGenerator, serializerProviderStub);\n-        jsonGenerator.flush();\n-\n-        assertEquals(\"1582592362000\", outputStream.toString());\n-    }\n-\n-    @Test\n-    public void serializeDateTime_asString() throws IOException {\n-        //DateTime\n-        String testDate = \"Tue, 25 Feb 2020 00:59:22 GMT\";\n-        OffsetDateTime dateTime =\n-            OffsetDateTime.of(LocalDateTime.parse(testDate, RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n-\n-        // JsonGenerator and target OutputStream\n-        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n-        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n-\n-        // SerializerProvider\n-        BaseSettings baseSettings = new BaseSettings(null, new JacksonAnnotationIntrospector(), null,\n-            TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), null,\n-            Base64Variants.getDefaultVariant());\n-        SerializationConfig serializationConfig = new SerializationConfig(\n-            baseSettings.withClassIntrospector(new BasicClassIntrospector()), new StdSubtypeResolver(),\n-            new SimpleMixInResolver(null), new RootNameLookup(), new ConfigOverrides());\n-        serializationConfig = serializationConfig.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n-        SerializerProvider serializerProvider = new SerializerProvider() {\n-            @Override\n-            public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n-                return null;\n-            }\n-\n-            @Override\n-            public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n-                return null;\n-            }\n-\n-            @Override\n-            public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n-                return null;\n-            }\n-\n-            @Override\n-            public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n-                return false;\n-            }\n-        };\n-        SerializerProvider serializerProviderStub =\n-            new SerializerProviderStub(serializerProvider, serializationConfig, null);\n-\n-        // Actual serialization\n-        new DateTimeSerializer().serialize(dateTime, jsonGenerator, serializerProviderStub);\n-        jsonGenerator.flush();\n-\n-        assertEquals(\"\\\"2020-02-25T00:59:22Z\\\"\", outputStream.toString());\n-    }\n-\n-    @Test\n-    public void test_ToString() {\n-        OffsetDateTime dateTime =\n-            OffsetDateTime.of(LocalDateTime.parse(\"Tue, 25 Feb 2020 00:59:22 GMT\", RFC1123_DATE_TIME_FORMATTER), ZoneOffset.UTC);\n-\n-        assertEquals(\"2020-02-25T00:59:22Z\", DateTimeSerializer.toString(dateTime));\n-    }\n-\n-    private class SerializerProviderStub extends SerializerProvider {\n-        public SerializerProviderStub(SerializerProvider src, SerializationConfig config, SerializerFactory f) {\n-            super(src, config, f);\n-        }\n-\n-        @Override\n-        public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) {\n-            return null;\n-        }\n-\n-        @Override\n-        public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException {\n-            return null;\n-        }\n-\n-        @Override\n-        public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException {\n-            return null;\n-        }\n-\n-        @Override\n-        public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n-            return false;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3OTgwOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393879809", "bodyText": "Are there tests for a duration deserializer?", "author": "alzimmermsft", "createdAt": "2020-03-17T18:18:03Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.azure.android.core.internal.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.junit.Test;\n+import org.threeten.bp.Duration;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class DurationSerializerTest {\n+    @Test\n+    public void test_getModule() {\n+        SimpleModule module = DurationSerializer.getModule();\n+\n+        assertNotNull(module);\n+    }\n+\n+    @Test\n+    public void serializeDuration() throws IOException {\n+        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n+        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n+        DurationSerializer durationSerializer = new DurationSerializer();\n+\n+        durationSerializer.serialize(Duration.ofDays(3), jsonGenerator, null);\n+        jsonGenerator.flush();\n+\n+        assertEquals(\"\\\"P3D\\\"\", outputStream.toString());\n+    }\n+\n+    @Test\n+    public void duration_ofDays_toString() {\n+        assertEquals(\"P5D\", DurationSerializer.toString(Duration.ofDays(5)));", "originalCommit": "f63b20c9b079f5e2f3157d557db0b7c179fb9001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2ODA5Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/218#discussion_r393968092", "bodyText": "No, we currently do not have a DurationDeserializer class.", "author": "vcolin7", "createdAt": "2020-03-17T21:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3OTgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "chunk": "diff --git a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java b/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java\ndeleted file mode 100644\nindex 43ed2f5ad..000000000\n--- a/sdk/core/azure-core/src/test/java/com/azure/android/core/internal/util/serializer/DurationSerializerTest.java\n+++ /dev/null\n\n@@ -1,74 +0,0 @@\n-package com.azure.android.core.internal.util.serializer;\n-\n-import com.fasterxml.jackson.core.JsonFactory;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-\n-import org.junit.Test;\n-import org.threeten.bp.Duration;\n-\n-import java.io.IOException;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-\n-public class DurationSerializerTest {\n-    @Test\n-    public void test_getModule() {\n-        SimpleModule module = DurationSerializer.getModule();\n-\n-        assertNotNull(module);\n-    }\n-\n-    @Test\n-    public void serializeDuration() throws IOException {\n-        StringBuilderOutputStream outputStream = new StringBuilderOutputStream();\n-        JsonGenerator jsonGenerator = new JsonFactory().createGenerator(outputStream);\n-        DurationSerializer durationSerializer = new DurationSerializer();\n-\n-        durationSerializer.serialize(Duration.ofDays(3), jsonGenerator, null);\n-        jsonGenerator.flush();\n-\n-        assertEquals(\"\\\"P3D\\\"\", outputStream.toString());\n-    }\n-\n-    @Test\n-    public void duration_ofDays_toString() {\n-        assertEquals(\"P5D\", DurationSerializer.toString(Duration.ofDays(5)));\n-    }\n-\n-    @Test\n-    public void duration_ofHours_toString() {\n-        assertEquals(\"PT5H\", DurationSerializer.toString(Duration.ofHours(5)));\n-    }\n-\n-    @Test\n-    public void duration_ofMinutes_toString() {\n-        assertEquals(\"PT5M\", DurationSerializer.toString(Duration.ofMinutes(5)));\n-    }\n-\n-    @Test\n-    public void duration_ofSeconds_toString() {\n-        assertEquals(\"PT5S\", DurationSerializer.toString(Duration.ofSeconds(5)));\n-    }\n-\n-    @Test\n-    public void duration_ofMillis_toString() {\n-        assertEquals(\"PT0.005S\", DurationSerializer.toString(Duration.ofMillis(5)));\n-    }\n-\n-    @Test\n-    public void duration_ofManyMillis_toString() {\n-        assertEquals(\"P17DT8H41M54.373S\", DurationSerializer.toString(Duration.ofMillis(1500114373)));\n-    }\n-\n-    @Test\n-    public void duration_ofNanos_toString() {\n-        assertEquals(\"PT2.1S\", DurationSerializer.toString(Duration.ofNanos(2100114373)));\n-    }\n-\n-    @Test\n-    public void duration_zeroMillis_toString() {\n-        assertEquals(\"PT0S\", DurationSerializer.toString(Duration.ofMillis(0)));\n-    }\n-}\n"}}, {"oid": "f580d6a0cc744a940d1d55ab167cd1196b3d464e", "url": "https://github.com/Azure/azure-sdk-for-android/commit/f580d6a0cc744a940d1d55ab167cd1196b3d464e", "message": "Created test classes for Base64UrlSerializer, ByteArraySerializer & SerializerFormat.", "committedDate": "2020-03-18T21:29:50Z", "type": "commit"}, {"oid": "06df068b67cc74059233da8cddb7fad0a6eed5cb", "url": "https://github.com/Azure/azure-sdk-for-android/commit/06df068b67cc74059233da8cddb7fad0a6eed5cb", "message": "Made slight changes in Base64UrlSerializerTest to avoid hard-coded strings in some places.", "committedDate": "2020-03-18T21:29:52Z", "type": "commit"}, {"oid": "202186014bc25551bbec86ff05b175cf653b0e03", "url": "https://github.com/Azure/azure-sdk-for-android/commit/202186014bc25551bbec86ff05b175cf653b0e03", "message": "Created test classes for DateTimeRfc1123Serializer, DateTimeSerializer & DurationSerializer. Fixed DurationSerializer.toString()", "committedDate": "2020-03-18T21:30:03Z", "type": "commit"}, {"oid": "19a8552e72535de449a98003e4ec9e671650ce25", "url": "https://github.com/Azure/azure-sdk-for-android/commit/19a8552e72535de449a98003e4ec9e671650ce25", "message": "Created a test class for JacksonAdapter, as well as a two other helper classes for it.", "committedDate": "2020-03-18T21:30:06Z", "type": "commit"}, {"oid": "2cae72f51633a58c078c352399f13afe16109eba", "url": "https://github.com/Azure/azure-sdk-for-android/commit/2cae72f51633a58c078c352399f13afe16109eba", "message": "redesigned and refactored some tests to get rid of the PowerMock dependency.", "committedDate": "2020-03-18T21:30:09Z", "type": "commit"}, {"oid": "db4a79064a7e98996ca058ba30499da092a72401", "url": "https://github.com/Azure/azure-sdk-for-android/commit/db4a79064a7e98996ca058ba30499da092a72401", "message": "Fixed a couple test cases that wouldn't succeed because we were building the request url wrong.", "committedDate": "2020-03-18T21:30:09Z", "type": "commit"}, {"oid": "6792400a025914851897ed9176c4c1fe3667e07a", "url": "https://github.com/Azure/azure-sdk-for-android/commit/6792400a025914851897ed9176c4c1fe3667e07a", "message": "Made a small change to DurationSerializer suggested by @alzimmermsft. Made a test in ByteArraySerializer easier to read by including the string representation of the byte arrays being compared. Refactored some tests in DateTimeSerializer to make them easier to read. Added copyright header to all serializer test classes.", "committedDate": "2020-03-18T21:30:09Z", "type": "commit"}, {"oid": "6792400a025914851897ed9176c4c1fe3667e07a", "url": "https://github.com/Azure/azure-sdk-for-android/commit/6792400a025914851897ed9176c4c1fe3667e07a", "message": "Made a small change to DurationSerializer suggested by @alzimmermsft. Made a test in ByteArraySerializer easier to read by including the string representation of the byte arrays being compared. Refactored some tests in DateTimeSerializer to make them easier to read. Added copyright header to all serializer test classes.", "committedDate": "2020-03-18T21:30:09Z", "type": "forcePushed"}]}