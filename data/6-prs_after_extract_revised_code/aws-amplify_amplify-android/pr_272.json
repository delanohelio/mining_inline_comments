{"pr_number": 272, "pr_title": "[aws-datastore] Align names of SyncEngine components to iOS, JavaScript", "pr_createdAt": "2020-02-19T06:15:04Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/272", "timeline": [{"oid": "3b2e64a32eb023b84578343115c1b6ad9aa39418", "url": "https://github.com/aws-amplify/amplify-android/commit/3b2e64a32eb023b84578343115c1b6ad9aa39418", "message": "[aws-datastore] Align names of SyncEngine components to iOS, JavaScript", "committedDate": "2020-02-19T06:14:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTM2NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/272#discussion_r382375364", "bodyText": "I'm guessing because this is the routine that we want to coordinate all of these actions in order on startup", "author": "undefobj", "createdAt": "2020-02-21T03:05:40Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/network/Orchestrator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.network;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.ModelProvider;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+\n+import java.util.Objects;\n+\n+import io.reactivex.Completable;\n+\n+/**\n+ * Synchronizes changed data between the {@link LocalStorageAdapter}\n+ * and {@link AppSyncEndpoint}.\n+ */\n+public final class Orchestrator {\n+    private final SubscriptionProcessor subscriptionProcessor;\n+    private final SyncProcessor syncProcessor;\n+    private final MutationProcessor mutationProcessor;\n+    private final StorageObserver storageObserver;\n+\n+    /**\n+     * Constructs a new Orchestrator.\n+     * The Orchestrator will synchronize data between the {@link AppSyncEndpoint}\n+     * and the {@link LocalStorageAdapter}.\n+     * @param modelProvider A provider of the models to be synchronized\n+     * @param localStorageAdapter Interface to local storage, used to\n+     *                       durably store offline changes until\n+     *                       then can be written to the network\n+     * @param appSyncEndpoint An AppSync Endpoint\n+     */\n+    public Orchestrator(\n+            @NonNull final ModelProvider modelProvider,\n+            @NonNull final LocalStorageAdapter localStorageAdapter,\n+            @NonNull final AppSyncEndpoint appSyncEndpoint) {\n+        Objects.requireNonNull(modelProvider);\n+        Objects.requireNonNull(appSyncEndpoint);\n+        Objects.requireNonNull(localStorageAdapter);\n+\n+        RemoteModelState remoteModelState = new RemoteModelState(appSyncEndpoint, modelProvider);\n+        MutationOutbox mutationOutbox = new MutationOutbox(localStorageAdapter);\n+\n+        this.mutationProcessor = new MutationProcessor(mutationOutbox, appSyncEndpoint);\n+        this.syncProcessor = new SyncProcessor(remoteModelState, localStorageAdapter);\n+        this.subscriptionProcessor = new SubscriptionProcessor(localStorageAdapter, appSyncEndpoint, modelProvider);\n+        this.storageObserver = new StorageObserver(localStorageAdapter, mutationOutbox);\n+    }\n+\n+    /**\n+     * Start performing sync operations between the local storage adapter\n+     * and the remote GraphQL endpoint.\n+     * @return A Completable operation to start the sync engine orchestrator\n+     */\n+    @NonNull\n+    public Completable start() {\n+        return Completable.fromAction(() -> {\n+            storageObserver.startObservingStorageChanges();\n+            subscriptionProcessor.startSubscriptions();\n+            //syncProcessor.hydrate().blockingAwait(); This crashes right now ...", "originalCommit": "3b2e64a32eb023b84578343115c1b6ad9aa39418", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM4MTQ3OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/272#discussion_r382381478", "bodyText": "Minor nit - maybe this should be GraphQLEndpoint since we want this to be agnostic to AppSync", "author": "undefobj", "createdAt": "2020-02-21T03:34:01Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/network/MutationProcessor.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.network;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreChannelEventName;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.logging.Logger;\n+\n+import java.util.Objects;\n+\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+\n+/**\n+ * The {@link MutationProcessor} observes the {@link MutationOutbox}, and publishes its items to an\n+ * {@link AppSyncEndpoint}.\n+ *\n+ * The responses to these mutations are themselves forwarded to the Merger (TODO: write a merger.)\n+ */\n+final class MutationProcessor {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final AppSyncEndpoint appSyncEndpoint;", "originalCommit": "3b2e64a32eb023b84578343115c1b6ad9aa39418", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5OTAyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/272#discussion_r382399022", "bodyText": "In #271 I make an attempt to start sorting out the \"this is appsync\" from the \"this is generic\" -- However, I think I kept this as named (just) AppSync, since it has functionalities like Base/Delta sync and deliberately named mutations like Create Update Delete encoded into the interface.", "author": "jamesonwilliams", "createdAt": "2020-02-21T05:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM4MTQ3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjgyNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/272#discussion_r382396825", "bodyText": "Will this get really noisy? I had suggested notifications from subscriptions to Hub in the past and the pushback was that the messages might get really verbose if you get a lot of subscription updates.", "author": "undefobj", "createdAt": "2020-02-21T04:53:24Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/network/SubscriptionProcessor.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.network;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelProvider;\n+import com.amplifyframework.datastore.DataStoreChannelEventName;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.logging.Logger;\n+\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.subjects.ReplaySubject;\n+\n+/**\n+ * Starts subscriptions to AppSync. Applies data to local storage when it arrives.\n+ *\n+ * TODO: this component should save data via the merger, not directly through the\n+ * {@link LocalStorageAdapter}.\n+ */\n+final class SubscriptionProcessor {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+    private final RemoteModelMutations remoteModelMutations;\n+    private final LocalStorageAdapter localStorageAdapter;\n+    private final CompositeDisposable disposable;\n+    private final ReplaySubject<Mutation<? extends Model>> buffer;\n+\n+    SubscriptionProcessor(\n+            @NonNull LocalStorageAdapter localStorageAdapter,\n+            @NonNull AppSyncEndpoint appSyncEndpoint,\n+            @NonNull ModelProvider modelProvider) {\n+        this.localStorageAdapter = localStorageAdapter;\n+        this.remoteModelMutations = new RemoteModelMutations(appSyncEndpoint, modelProvider);\n+        this.disposable = new CompositeDisposable();\n+        this.buffer = ReplaySubject.create();\n+    }\n+\n+    /**\n+     * Start subscribing to model mutations.\n+     */\n+    void startSubscriptions() {\n+        disposable.add(remoteModelMutations.observe()\n+            .subscribe(\n+                mutationOnSubscription -> {\n+                    buffer.onNext(mutationOnSubscription);\n+                    LOG.info(\"Successfully enqueued mutation from subscription: \" + mutationOnSubscription);\n+                },\n+                error -> LOG.warn(\"Error enqueuing mutation from subscription.\", error),\n+                () -> LOG.warn(\"Subscription to remote model mutations is completed.\")\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Start draining mutations out of the mutation buffer.\n+     * This should be called after {@link #startSubscriptions()}.\n+     */\n+    void startDrainingMutationBuffer() {\n+        disposable.add(buffer\n+            .flatMapSingle(this::applyMutationToLocalStorage)\n+            .subscribe(\n+                savedMutation -> LOG.info(\"Saved a mutation from a subscription: \" + savedMutation),\n+                failure -> LOG.warn(\"Reading subscriptions buffer has failed.\", failure),\n+                () -> LOG.warn(\"Reading from subscriptions buffer is completed.\")\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Stop any active subscriptions, and stop draining the mutation buffer.\n+     */\n+    void stopAllSubscriptionActivity() {\n+        disposable.clear();\n+    }\n+\n+    private Single<Mutation<? extends Model>> applyMutationToLocalStorage(Mutation<? extends Model> mutation) {\n+        final StorageItemChange.Initiator initiator = StorageItemChange.Initiator.SYNC_ENGINE;\n+        return Single.defer(() -> Single.create(emitter -> {\n+            final Consumer<StorageItemChange.Record> onSuccess =\n+                result -> emitter.onSuccess(mutation);\n+            final Consumer<DataStoreException> onError = emitter::onError;\n+\n+            switch (mutation.type()) {\n+                case UPDATE:\n+                case CREATE:\n+                    localStorageAdapter.save(mutation.model(), initiator, onSuccess, onError);\n+                    break;\n+                case DELETE:\n+                    localStorageAdapter.delete(mutation.model(), initiator, onSuccess, onError);\n+                    break;\n+                default:\n+                    throw new DataStoreException(\n+                        \"Unknown mutation type = \" + mutation.type(),\n+                        AmplifyException.TODO_RECOVERY_SUGGESTION\n+                    );\n+            }\n+\n+            // Notify Hub that we just updated the local storage.\n+            HubEvent<? extends Model> receivedFromCloudEvent =", "originalCommit": "3b2e64a32eb023b84578343115c1b6ad9aa39418", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5OTI5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/272#discussion_r382399290", "bodyText": "Eh, yea. Good catch, and good call out. One of these events for every subscription event is probably going to get unwieldly ...\nMaybe we can add an off/on switch in the config - default is on, and then if the customer is like \"whoa, are you kidding me?\" our documentation does mention a way to shut it down?", "author": "jamesonwilliams", "createdAt": "2020-02-21T05:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjgyNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5Nzc2OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/272#discussion_r382397768", "bodyText": "should we also clear buffer here?", "author": "undefobj", "createdAt": "2020-02-21T04:57:59Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/network/SubscriptionProcessor.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.network;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelProvider;\n+import com.amplifyframework.datastore.DataStoreChannelEventName;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.logging.Logger;\n+\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.subjects.ReplaySubject;\n+\n+/**\n+ * Starts subscriptions to AppSync. Applies data to local storage when it arrives.\n+ *\n+ * TODO: this component should save data via the merger, not directly through the\n+ * {@link LocalStorageAdapter}.\n+ */\n+final class SubscriptionProcessor {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+    private final RemoteModelMutations remoteModelMutations;\n+    private final LocalStorageAdapter localStorageAdapter;\n+    private final CompositeDisposable disposable;\n+    private final ReplaySubject<Mutation<? extends Model>> buffer;\n+\n+    SubscriptionProcessor(\n+            @NonNull LocalStorageAdapter localStorageAdapter,\n+            @NonNull AppSyncEndpoint appSyncEndpoint,\n+            @NonNull ModelProvider modelProvider) {\n+        this.localStorageAdapter = localStorageAdapter;\n+        this.remoteModelMutations = new RemoteModelMutations(appSyncEndpoint, modelProvider);\n+        this.disposable = new CompositeDisposable();\n+        this.buffer = ReplaySubject.create();\n+    }\n+\n+    /**\n+     * Start subscribing to model mutations.\n+     */\n+    void startSubscriptions() {\n+        disposable.add(remoteModelMutations.observe()\n+            .subscribe(\n+                mutationOnSubscription -> {\n+                    buffer.onNext(mutationOnSubscription);\n+                    LOG.info(\"Successfully enqueued mutation from subscription: \" + mutationOnSubscription);\n+                },\n+                error -> LOG.warn(\"Error enqueuing mutation from subscription.\", error),\n+                () -> LOG.warn(\"Subscription to remote model mutations is completed.\")\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Start draining mutations out of the mutation buffer.\n+     * This should be called after {@link #startSubscriptions()}.\n+     */\n+    void startDrainingMutationBuffer() {\n+        disposable.add(buffer\n+            .flatMapSingle(this::applyMutationToLocalStorage)\n+            .subscribe(\n+                savedMutation -> LOG.info(\"Saved a mutation from a subscription: \" + savedMutation),\n+                failure -> LOG.warn(\"Reading subscriptions buffer has failed.\", failure),\n+                () -> LOG.warn(\"Reading from subscriptions buffer is completed.\")\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Stop any active subscriptions, and stop draining the mutation buffer.\n+     */\n+    void stopAllSubscriptionActivity() {\n+        disposable.clear();", "originalCommit": "3b2e64a32eb023b84578343115c1b6ad9aa39418", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5OTU4Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/272#discussion_r382399582", "bodyText": "The thing doing the buffering is the ReplaySubject; this disposable represents a subscription to that subject. In Rx1, they called the Disposable as Subscription, which I liked better. But anyway, TLDR, yea I'd be open to a better name for this ... maybe subscriptionToBuffer, instead of the (what does it mean??) disposable?", "author": "jamesonwilliams", "createdAt": "2020-02-21T05:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5Nzc2OA=="}], "type": "inlineReview", "revised_code": null}]}