{"pr_number": 759, "pr_title": "feature(rxbindings) Added progress-aware Rx constructs", "pr_createdAt": "2020-08-26T17:08:40Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/759", "timeline": [{"oid": "e634d3bc9861c6179b45a726ef2eac1658af75d4", "url": "https://github.com/aws-amplify/amplify-android/commit/e634d3bc9861c6179b45a726ef2eac1658af75d4", "message": "feature(rxbindings) Added progress-aware Rx constructs", "committedDate": "2020-08-26T16:56:01Z", "type": "commit"}, {"oid": "1473bb5d83d2eccf38c97f71f9c65c165ce59631", "url": "https://github.com/aws-amplify/amplify-android/commit/1473bb5d83d2eccf38c97f71f9c65c165ce59631", "message": "Renamed interface", "committedDate": "2020-08-26T17:05:09Z", "type": "commit"}, {"oid": "dd36de2aa83b8084cc889f8d3fd3da3cd5419e59", "url": "https://github.com/aws-amplify/amplify-android/commit/dd36de2aa83b8084cc889f8d3fd3da3cd5419e59", "message": "More cleanup", "committedDate": "2020-08-26T17:11:59Z", "type": "commit"}, {"oid": "b84b223f2e247fb2394726e124a66d2c4b38ee24", "url": "https://github.com/aws-amplify/amplify-android/commit/b84b223f2e247fb2394726e124a66d2c4b38ee24", "message": "Fixed upload test", "committedDate": "2020-08-26T18:28:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNzYyOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/759#discussion_r477517629", "bodyText": "Since progress is currently only defined for Storage, should we move these new RxProgressAwareSingle and RxProgressAwareOperation out of RxAdapters, and into RxStorageBinding.java? (Well, the interface might need to go in RxStorageCategoryBehavior.java?)", "author": "jamesonwilliams", "createdAt": "2020-08-26T18:55:53Z", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxAdapters.java", "diffHunk": "@@ -100,4 +103,85 @@ private RxAdapters() {}\n     interface VoidCompletionEmitter<E> {\n         void emitTo(Action onComplete, Consumer<E> onError);\n     }\n+\n+    /**\n+     * Interface that defines a contract for callback-style operations to be\n+     * mapped to reactive-style operation types that offer a more idiomatic way\n+     * of using reactive programming with the Amplify framework.\n+     * @param <T> The type that represents the result of a given operation.\n+     * @param <P> The type that represents the progress of a given operation.\n+     * @param <E> The type of exception of a given operation.\n+     */\n+    interface RxProgressAwareCallbackMapper<T, P, E> {\n+        Cancelable emitTo(Consumer<P> onProgress, Consumer<T> onItem, Consumer<E> onError);\n+    }\n+\n+    /**\n+     * Interface that should be implemented by reactive-style operations\n+     * wishing to return a {@link Single} as its result.\n+     * @param <T> The type that represents the result of a given operation.\n+     */\n+    interface RxSingleOperation<T> extends Cancelable {\n+        /**\n+         * Maps the result of a callback-style operation to a {@link Single}.\n+         * @return A {@link Single} that emits a result or an error.\n+         */\n+        Single<T> observeResult();\n+    }\n+\n+    /**\n+     * Interface that should be implemented by reactive-style operations\n+     * that emit progress information during processing.\n+     * @param <P> The type that represents the progress of a given operation.\n+     */\n+    interface RxProgressAwareOperation<P> {", "originalCommit": "b84b223f2e247fb2394726e124a66d2c4b38ee24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMTM4MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/759#discussion_r477531381", "bodyText": "That makes sense. I was thinking we'd run across some progress aware API in one of the other categories, but now that I think about it, I can't think of an example.", "author": "rjuliano", "createdAt": "2020-08-26T19:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNzYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b9b2240454ae68012e21ecb5572638db32c6742", "chunk": "diff --git a/rxbindings/src/main/java/com/amplifyframework/rx/RxAdapters.java b/rxbindings/src/main/java/com/amplifyframework/rx/RxAdapters.java\nindex cc8690d9..d3bef79a 100644\n--- a/rxbindings/src/main/java/com/amplifyframework/rx/RxAdapters.java\n+++ b/rxbindings/src/main/java/com/amplifyframework/rx/RxAdapters.java\n\n@@ -104,18 +101,6 @@ final class RxAdapters {\n         void emitTo(Action onComplete, Consumer<E> onError);\n     }\n \n-    /**\n-     * Interface that defines a contract for callback-style operations to be\n-     * mapped to reactive-style operation types that offer a more idiomatic way\n-     * of using reactive programming with the Amplify framework.\n-     * @param <T> The type that represents the result of a given operation.\n-     * @param <P> The type that represents the progress of a given operation.\n-     * @param <E> The type of exception of a given operation.\n-     */\n-    interface RxProgressAwareCallbackMapper<T, P, E> {\n-        Cancelable emitTo(Consumer<P> onProgress, Consumer<T> onItem, Consumer<E> onError);\n-    }\n-\n     /**\n      * Interface that should be implemented by reactive-style operations\n      * wishing to return a {@link Single} as its result.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxODc3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/759#discussion_r477518770", "bodyText": "Just return Single without caching to variable?", "author": "jamesonwilliams", "createdAt": "2020-08-26T18:57:51Z", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxAdapters.java", "diffHunk": "@@ -100,4 +103,85 @@ private RxAdapters() {}\n     interface VoidCompletionEmitter<E> {\n         void emitTo(Action onComplete, Consumer<E> onError);\n     }\n+\n+    /**\n+     * Interface that defines a contract for callback-style operations to be\n+     * mapped to reactive-style operation types that offer a more idiomatic way\n+     * of using reactive programming with the Amplify framework.\n+     * @param <T> The type that represents the result of a given operation.\n+     * @param <P> The type that represents the progress of a given operation.\n+     * @param <E> The type of exception of a given operation.\n+     */\n+    interface RxProgressAwareCallbackMapper<T, P, E> {\n+        Cancelable emitTo(Consumer<P> onProgress, Consumer<T> onItem, Consumer<E> onError);\n+    }\n+\n+    /**\n+     * Interface that should be implemented by reactive-style operations\n+     * wishing to return a {@link Single} as its result.\n+     * @param <T> The type that represents the result of a given operation.\n+     */\n+    interface RxSingleOperation<T> extends Cancelable {\n+        /**\n+         * Maps the result of a callback-style operation to a {@link Single}.\n+         * @return A {@link Single} that emits a result or an error.\n+         */\n+        Single<T> observeResult();\n+    }\n+\n+    /**\n+     * Interface that should be implemented by reactive-style operations\n+     * that emit progress information during processing.\n+     * @param <P> The type that represents the progress of a given operation.\n+     */\n+    interface RxProgressAwareOperation<P> {\n+        /**\n+         * Returns an observable that the caller can subscribe to\n+         * receive progress information about the operation.\n+         * @return An observable that emits progress information.\n+         */\n+        Observable<P> observeProgress();\n+    }\n+\n+    /**\n+     * A generic implementation of an operation that emits\n+     * progress information and returns a single.\n+     * @param <T> The type that represents the result of a given operation.\n+     * @param <P> The type that represents the progress of a given operation.\n+     */\n+    static class RxProgressAwareSingle<T, P>\n+        implements RxAdapters.RxSingleOperation<T>, RxProgressAwareOperation<P> {\n+\n+        private PublishSubject<P> progressSubject;\n+        private ReplaySubject<T> resultSubject;\n+        private Cancelable amplifyOperation;\n+\n+        RxProgressAwareSingle(RxProgressAwareCallbackMapper<T, P, ? extends AmplifyException> callbacks) {\n+            progressSubject = PublishSubject.create();\n+            resultSubject = ReplaySubject.create();\n+            amplifyOperation = callbacks.emitTo(progressSubject::onNext,\n+                                                resultSubject::onNext,\n+                                                resultSubject::onError);\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            amplifyOperation.cancel();\n+            resultSubject.onComplete();\n+            progressSubject.onComplete();\n+        }\n+\n+        @Override\n+        public Single<T> observeResult() {\n+            Single<T> objectSingle = Single.create(emitter -> {", "originalCommit": "b84b223f2e247fb2394726e124a66d2c4b38ee24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMTYyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/759#discussion_r477531622", "bodyText": "Doh \ud83e\udd26", "author": "rjuliano", "createdAt": "2020-08-26T19:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxODc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "8b9b2240454ae68012e21ecb5572638db32c6742", "chunk": "diff --git a/rxbindings/src/main/java/com/amplifyframework/rx/RxAdapters.java b/rxbindings/src/main/java/com/amplifyframework/rx/RxAdapters.java\nindex cc8690d9..d3bef79a 100644\n--- a/rxbindings/src/main/java/com/amplifyframework/rx/RxAdapters.java\n+++ b/rxbindings/src/main/java/com/amplifyframework/rx/RxAdapters.java\n\n@@ -104,18 +101,6 @@ final class RxAdapters {\n         void emitTo(Action onComplete, Consumer<E> onError);\n     }\n \n-    /**\n-     * Interface that defines a contract for callback-style operations to be\n-     * mapped to reactive-style operation types that offer a more idiomatic way\n-     * of using reactive programming with the Amplify framework.\n-     * @param <T> The type that represents the result of a given operation.\n-     * @param <P> The type that represents the progress of a given operation.\n-     * @param <E> The type of exception of a given operation.\n-     */\n-    interface RxProgressAwareCallbackMapper<T, P, E> {\n-        Cancelable emitTo(Consumer<P> onProgress, Consumer<T> onItem, Consumer<E> onError);\n-    }\n-\n     /**\n      * Interface that should be implemented by reactive-style operations\n      * wishing to return a {@link Single} as its result.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxOTEzMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/759#discussion_r477519131", "bodyText": "If we only have this one thing that's progress aware, should we flatten these two interfaces into just one?", "author": "jamesonwilliams", "createdAt": "2020-08-26T18:58:32Z", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxStorageBinding.java", "diffHunk": "@@ -113,4 +116,25 @@\n     private <T> Single<T> toSingle(RxAdapters.CancelableResultEmitter<T, StorageException> method) {\n         return RxAdapters.toSingle(method);\n     }\n+\n+    /**\n+     * Defines the parameters of the download operation by\n+     * supplying the generic types required by {@link RxAdapters.RxProgressAwareSingle}.\n+     */\n+    static final class RxStorageDownloadOperation extends\n+        RxAdapters.RxProgressAwareSingle<StorageDownloadFileResult, StorageTransferProgress> {\n+        RxStorageDownloadOperation(RxStorageDownloadCallbackMapper callbacks) {\n+            super(callbacks);\n+        }\n+    }\n+\n+    /**\n+     * Type alias that defines the generic parameters for a download operation.\n+     * @see RxAdapters.RxProgressAwareCallbackMapper\n+     */\n+    interface RxStorageDownloadCallbackMapper\n+        extends RxAdapters.RxProgressAwareCallbackMapper<StorageDownloadFileResult,", "originalCommit": "b84b223f2e247fb2394726e124a66d2c4b38ee24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1OTQxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/759#discussion_r477559417", "bodyText": "Oh yeah...After moving some of this stuff around, I was able to reduce the footprint quite a bit.", "author": "rjuliano", "createdAt": "2020-08-26T20:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxOTEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b9b2240454ae68012e21ecb5572638db32c6742", "chunk": "diff --git a/rxbindings/src/main/java/com/amplifyframework/rx/RxStorageBinding.java b/rxbindings/src/main/java/com/amplifyframework/rx/RxStorageBinding.java\nindex 8d5d0353..f8a37c0c 100644\n--- a/rxbindings/src/main/java/com/amplifyframework/rx/RxStorageBinding.java\n+++ b/rxbindings/src/main/java/com/amplifyframework/rx/RxStorageBinding.java\n\n@@ -118,23 +123,41 @@ final class RxStorageBinding implements RxStorageCategoryBehavior {\n     }\n \n     /**\n-     * Defines the parameters of the download operation by\n-     * supplying the generic types required by {@link RxAdapters.RxProgressAwareSingle}.\n+     * A generic implementation of an operation that emits\n+     * progress information and returns a single.\n+     * @param <T> The type that represents the result of a given operation.\n+     * @param <P> The type that represents the progress of a given operation.\n      */\n-    static final class RxStorageDownloadOperation extends\n-        RxAdapters.RxProgressAwareSingle<StorageDownloadFileResult, StorageTransferProgress> {\n-        RxStorageDownloadOperation(RxStorageDownloadCallbackMapper callbacks) {\n-            super(callbacks);\n+    static class RxProgressAwareSingleOperation<T> implements RxAdapters.RxSingleOperation<T> {\n+\n+        private PublishSubject<StorageTransferProgress> progressSubject;\n+        private ReplaySubject<T> resultSubject;\n+        private Cancelable amplifyOperation;\n+\n+        RxProgressAwareSingleOperation(RxStorageTransferCallbackMapper<T> callbacks) {\n+            progressSubject = PublishSubject.create();\n+            resultSubject = ReplaySubject.create();\n+            amplifyOperation = callbacks.emitTo(progressSubject::onNext,\n+                                                resultSubject::onNext,\n+                                                resultSubject::onError);\n         }\n-    }\n \n-    /**\n-     * Type alias that defines the generic parameters for a download operation.\n-     * @see RxAdapters.RxProgressAwareCallbackMapper\n-     */\n-    interface RxStorageDownloadCallbackMapper\n-        extends RxAdapters.RxProgressAwareCallbackMapper<StorageDownloadFileResult,\n-                                                         StorageTransferProgress,\n-                                                         StorageException> {\n+        @Override\n+        public void cancel() {\n+            amplifyOperation.cancel();\n+            resultSubject.onComplete();\n+            progressSubject.onComplete();\n+        }\n+\n+        @Override\n+        public Single<T> observeResult() {\n+            return Single.create(emitter -> {\n+                resultSubject.subscribe(emitter::onSuccess, emitter::onError);\n+            });\n+        }\n+\n+        public Observable<StorageTransferProgress> observeProgress() {\n+            return progressSubject;\n+        }\n     }\n }\n"}}, {"oid": "8b9b2240454ae68012e21ecb5572638db32c6742", "url": "https://github.com/aws-amplify/amplify-android/commit/8b9b2240454ae68012e21ecb5572638db32c6742", "message": "Addressing PR feedback", "committedDate": "2020-08-26T19:58:14Z", "type": "commit"}, {"oid": "562e1aec39a481d1afb5ef3caef27cc10a3872ba", "url": "https://github.com/aws-amplify/amplify-android/commit/562e1aec39a481d1afb5ef3caef27cc10a3872ba", "message": "Merge branch 'feature/rxbindings' into rjuliano/rxbindings", "committedDate": "2020-08-26T20:12:07Z", "type": "commit"}]}