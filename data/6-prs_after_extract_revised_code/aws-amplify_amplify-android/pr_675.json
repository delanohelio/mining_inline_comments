{"pr_number": 675, "pr_title": "Store logs to be retrieved by developer menu", "pr_createdAt": "2020-07-27T22:58:31Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/675", "timeline": [{"oid": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "url": "https://github.com/aws-amplify/amplify-android/commit/2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "message": "modified AndroidLogger and AndroidLoggingPlugin to store logs for dev menu", "committedDate": "2020-07-27T22:52:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzNjMyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461236322", "bodyText": "Isn't Logging category automatically constructed with AndroidLoggingPlugin as its default plugin?\n\n  \n    \n      amplify-android/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java\n    \n    \n        Lines 37 to 39\n      in\n      12ec8e9\n    \n    \n    \n    \n\n        \n          \n           public LoggingCategory() { \n        \n\n        \n          \n               this(new AndroidLoggingPlugin()); \n        \n\n        \n          \n           }", "author": "raphkim", "createdAt": "2020-07-27T23:55:22Z", "path": "core/src/main/java/com/amplifyframework/core/Amplify.java", "diffHunk": "@@ -127,6 +128,11 @@ public static void configure(@NonNull final AmplifyConfiguration configuration,\n                 );\n             }\n \n+            boolean debuggableApp = isDebuggableApplication(context);\n+            if (debuggableApp && Logging.getPlugins().isEmpty()) {\n+                addPlugin(new AndroidLoggingPlugin());\n+            }", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/core/Amplify.java b/core/src/main/java/com/amplifyframework/core/Amplify.java\nindex ae68e80c..3883f6e1 100644\n--- a/core/src/main/java/com/amplifyframework/core/Amplify.java\n+++ b/core/src/main/java/com/amplifyframework/core/Amplify.java\n\n@@ -128,11 +126,6 @@ public final class Amplify {\n                 );\n             }\n \n-            boolean debuggableApp = isDebuggableApplication(context);\n-            if (debuggableApp && Logging.getPlugins().isEmpty()) {\n-                addPlugin(new AndroidLoggingPlugin());\n-            }\n-\n             for (Category<? extends Plugin<?>> category : CATEGORIES.values()) {\n                 if (category.getPlugins().size() > 0) {\n                     CategoryConfiguration categoryConfiguration =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzODMyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461238322", "bodyText": "How about saving assigning final keyword to logs and always assigning it a new list instance? It would be better to make it guaranteed to be non-null rather than checking whether it's null.\nThe null-check can be replaced by also having private final boolean shouldStoreLogs; variable.", "author": "raphkim", "createdAt": "2020-07-28T00:01:40Z", "path": "core/src/main/java/com/amplifyframework/logging/AndroidLogger.java", "diffHunk": "@@ -20,15 +20,27 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.amplifyframework.util.Immutable;\n+\n+import java.time.LocalDateTime;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Objects;\n \n final class AndroidLogger implements Logger {\n+    // Maximum number of logs to store.\n+    private static final int MAX_NUM_LOGS = 500;\n     private final LogLevel threshold;\n     private final String namespace;\n+    // The logs stored by this logger.\n+    private List<LogEntry> logs;\n \n-    AndroidLogger(@NonNull String namespace, @NonNull LogLevel threshold) {\n+    AndroidLogger(@NonNull String namespace, @NonNull LogLevel threshold, boolean storeLogs) {\n         this.threshold = Objects.requireNonNull(threshold);\n         this.namespace = Objects.requireNonNull(namespace);\n+        if (storeLogs) {\n+            logs = new LinkedList<>();\n+        }", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/AndroidLogger.java b/core/src/main/java/com/amplifyframework/logging/AndroidLogger.java\nindex 3d8eb8db..5aa7c1b7 100644\n--- a/core/src/main/java/com/amplifyframework/logging/AndroidLogger.java\n+++ b/core/src/main/java/com/amplifyframework/logging/AndroidLogger.java\n\n@@ -20,27 +20,15 @@ import android.util.Log;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n-import com.amplifyframework.util.Immutable;\n-\n-import java.time.LocalDateTime;\n-import java.util.LinkedList;\n-import java.util.List;\n import java.util.Objects;\n \n final class AndroidLogger implements Logger {\n-    // Maximum number of logs to store.\n-    private static final int MAX_NUM_LOGS = 500;\n     private final LogLevel threshold;\n     private final String namespace;\n-    // The logs stored by this logger.\n-    private List<LogEntry> logs;\n \n-    AndroidLogger(@NonNull String namespace, @NonNull LogLevel threshold, boolean storeLogs) {\n+    AndroidLogger(@NonNull String namespace, @NonNull LogLevel threshold) {\n         this.threshold = Objects.requireNonNull(threshold);\n         this.namespace = Objects.requireNonNull(namespace);\n-        if (storeLogs) {\n-            logs = new LinkedList<>();\n-        }\n     }\n \n     @NonNull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMzc5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461313790", "bodyText": "these can be final", "author": "raphkim", "createdAt": "2020-07-28T04:41:29Z", "path": "core/src/main/java/com/amplifyframework/logging/LogEntry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.util.Log;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry {\n+    // The format for the log's date and time.\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+    // The date and time of the log.\n+    private LocalDateTime dateTime;\n+    // The namespace of the logger that emitted the log.\n+    private String namespace;\n+    // The message for the log.\n+    private String message;\n+    // The Throwable (if any) associated with the log.\n+    private Throwable throwable;\n+    // The level the log was logged at.\n+    private LogLevel logLevel;", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/LogEntry.java b/core/src/main/java/com/amplifyframework/logging/LogEntry.java\nindex 9bb30fac..230f79d1 100644\n--- a/core/src/main/java/com/amplifyframework/logging/LogEntry.java\n+++ b/core/src/main/java/com/amplifyframework/logging/LogEntry.java\n\n@@ -16,9 +16,12 @@\n package com.amplifyframework.logging;\n \n import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n \n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n \n /**\n  * A representation of a log.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNDQ0NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461314444", "bodyText": "Since this is a public constructor, it would be helpful to specify @NonNull vs @Nullable for each of them and enforce it with Objects.requireNonNull(). Otherwise, toString() will throw NPE for either logLevel or dateTime being null.", "author": "raphkim", "createdAt": "2020-07-28T04:44:02Z", "path": "core/src/main/java/com/amplifyframework/logging/LogEntry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.util.Log;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry {\n+    // The format for the log's date and time.\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+    // The date and time of the log.\n+    private LocalDateTime dateTime;\n+    // The namespace of the logger that emitted the log.\n+    private String namespace;\n+    // The message for the log.\n+    private String message;\n+    // The Throwable (if any) associated with the log.\n+    private Throwable throwable;\n+    // The level the log was logged at.\n+    private LogLevel logLevel;\n+\n+    /**\n+     * Creates a new LogEntry representing a log with the given time, tag,\n+     * and message that was logged at the given level.\n+     * @param dateTime the date and time of the log.\n+     * @param namespace the namespace of the logger that emitted the log.\n+     * @param message the message for the log.\n+     * @param logLevel the level the log was logged at.\n+     */\n+    public LogEntry(LocalDateTime dateTime, String namespace, String message, LogLevel logLevel) {\n+        this(dateTime, namespace, message, null, logLevel);\n+    }\n+\n+    /**\n+     * Creates a new LogEntry representing a log with the given time, tag, message,\n+     * and throwable that was logged at the given level.\n+     * @param dateTime the date and time of the log.\n+     * @param namespace the namespace of the logger that emitted the log.\n+     * @param message the message for the log.\n+     * @param throwable the Throwable associated with the log.\n+     * @param logLevel the level the log was logged at.\n+     */\n+    public LogEntry(LocalDateTime dateTime, String namespace, String message, Throwable throwable, LogLevel logLevel) {", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/LogEntry.java b/core/src/main/java/com/amplifyframework/logging/LogEntry.java\nindex 9bb30fac..230f79d1 100644\n--- a/core/src/main/java/com/amplifyframework/logging/LogEntry.java\n+++ b/core/src/main/java/com/amplifyframework/logging/LogEntry.java\n\n@@ -16,9 +16,12 @@\n package com.amplifyframework.logging;\n \n import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n \n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n \n /**\n  * A representation of a log.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNDkzNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461314937", "bodyText": "Nit: It would be a stronger test to assert that the content of the log matches what you expect after the size assertion", "author": "raphkim", "createdAt": "2020-07-28T04:45:40Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = 0;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNull(plugin.getLogs());\n+    }\n+\n+    /**\n+     * When the application is in a debuggable build, logs are stored.\n+     */\n+    @Test\n+    public void logsAreStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNotNull(plugin.getLogs());\n+        assertEquals(plugin.getLogs().size(), 1);", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\nindex 57b283c0..9c77897c 100644\n--- a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n+++ b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n\n@@ -137,39 +131,6 @@ public class AndroidLoggingPluginTest {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n-    /**\n-     * When the application is not in a debuggable build, logs are not stored.\n-     */\n-    @Test\n-    public void noLogsStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = 0;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNull(plugin.getLogs());\n-    }\n-\n-    /**\n-     * When the application is in a debuggable build, logs are stored.\n-     */\n-    @Test\n-    public void logsAreStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNotNull(plugin.getLogs());\n-        assertEquals(plugin.getLogs().size(), 1);\n-    }\n-\n     static final class LogOutputStream extends ByteArrayOutputStream {\n         private LogOutputStream() {}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNTEwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461315101", "bodyText": "I think it defaults to 0 :)", "author": "raphkim", "createdAt": "2020-07-28T04:46:26Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = 0;", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\nindex 57b283c0..9c77897c 100644\n--- a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n+++ b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n\n@@ -137,39 +131,6 @@ public class AndroidLoggingPluginTest {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n-    /**\n-     * When the application is not in a debuggable build, logs are not stored.\n-     */\n-    @Test\n-    public void noLogsStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = 0;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNull(plugin.getLogs());\n-    }\n-\n-    /**\n-     * When the application is in a debuggable build, logs are stored.\n-     */\n-    @Test\n-    public void logsAreStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNotNull(plugin.getLogs());\n-        assertEquals(plugin.getLogs().size(), 1);\n-    }\n-\n     static final class LogOutputStream extends ByteArrayOutputStream {\n         private LogOutputStream() {}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNjgxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461316817", "bodyText": "Should these variables be readable? Maybe you should create getters for each of these, and move the comments to an actual javadoc for each method", "author": "raphkim", "createdAt": "2020-07-28T04:52:43Z", "path": "core/src/main/java/com/amplifyframework/logging/LogEntry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.util.Log;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry {\n+    // The format for the log's date and time.", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/LogEntry.java b/core/src/main/java/com/amplifyframework/logging/LogEntry.java\nindex 9bb30fac..230f79d1 100644\n--- a/core/src/main/java/com/amplifyframework/logging/LogEntry.java\n+++ b/core/src/main/java/com/amplifyframework/logging/LogEntry.java\n\n@@ -16,9 +16,12 @@\n package com.amplifyframework.logging;\n \n import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n \n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n \n /**\n  * A representation of a log.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0MTM0NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461341345", "bodyText": "Amplify is a \"fa\u00e7ade.\" A downside to the fa\u00e7ade as a pattern is that it can become a god object coupled to all classes of an app. ref.\nWe want to \"fan out\" quickly. Strive for a ~one-line integration of your Dev Menu code.\nWould it be possible to have your entire integration be a single line?\nDevMenu.attach(this);\nAll of your logic, like whether or not its a debug build, whether or not you need a logging plugin, etc. etc. would then be in your DevMenu, not in Amplify.", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:12:52Z", "path": "core/src/main/java/com/amplifyframework/core/Amplify.java", "diffHunk": "@@ -127,6 +128,11 @@ public static void configure(@NonNull final AmplifyConfiguration configuration,\n                 );\n             }\n \n+            boolean debuggableApp = isDebuggableApplication(context);\n+            if (debuggableApp && Logging.getPlugins().isEmpty()) {\n+                addPlugin(new AndroidLoggingPlugin());\n+            }\n+", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/core/Amplify.java b/core/src/main/java/com/amplifyframework/core/Amplify.java\nindex ae68e80c..3883f6e1 100644\n--- a/core/src/main/java/com/amplifyframework/core/Amplify.java\n+++ b/core/src/main/java/com/amplifyframework/core/Amplify.java\n\n@@ -128,11 +126,6 @@ public final class Amplify {\n                 );\n             }\n \n-            boolean debuggableApp = isDebuggableApplication(context);\n-            if (debuggableApp && Logging.getPlugins().isEmpty()) {\n-                addPlugin(new AndroidLoggingPlugin());\n-            }\n-\n             for (Category<? extends Plugin<?>> category : CATEGORIES.values()) {\n                 if (category.getPlugins().size() > 0) {\n                     CategoryConfiguration categoryConfiguration =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0Mjk4OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461342989", "bodyText": "Can you centralize this check into some helper class? I think you perform this check in a couple places now.\nfinal class IsDebuggable {\n    private IsDebuggable() {}\n\n    boolean check(Context context) {\n        return context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE != 0;\n    }\n}\n(You can get creative with the naming, this is just one idea.)", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:17:33Z", "path": "core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java", "diffHunk": "@@ -66,6 +77,7 @@ public String getPluginKey() {\n     public void configure(\n             JSONObject pluginConfiguration,\n             @NonNull Context context) {\n+        storeLogs = (context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java b/core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java\nindex e926850c..c136d75f 100644\n--- a/core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java\n+++ b/core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java\n\n@@ -77,7 +69,6 @@ public final class AndroidLoggingPlugin extends LoggingPlugin<Void> {\n     public void configure(\n             JSONObject pluginConfiguration,\n             @NonNull Context context) {\n-        storeLogs = (context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;\n         // In the future, accept a log level configuration from JSON?\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0ODE3Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461348173", "bodyText": "Do you need a mock for this one, or can you just create a real instance?\nYou probably do need a mock for the context.", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:30:44Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\nindex 57b283c0..9c77897c 100644\n--- a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n+++ b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n\n@@ -137,39 +131,6 @@ public class AndroidLoggingPluginTest {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n-    /**\n-     * When the application is not in a debuggable build, logs are not stored.\n-     */\n-    @Test\n-    public void noLogsStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = 0;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNull(plugin.getLogs());\n-    }\n-\n-    /**\n-     * When the application is in a debuggable build, logs are stored.\n-     */\n-    @Test\n-    public void logsAreStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNotNull(plugin.getLogs());\n-        assertEquals(plugin.getLogs().size(), 1);\n-    }\n-\n     static final class LogOutputStream extends ByteArrayOutputStream {\n         private LogOutputStream() {}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0ODc2MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461348761", "bodyText": "Better to return an empty collection than null\nassertEquals(Collections.emptyList(), plugin.getLogs())\n\nhttps://www.thefinestartist.com/effective-java/43", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:32:12Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = 0;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNull(plugin.getLogs());", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\nindex 57b283c0..9c77897c 100644\n--- a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n+++ b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n\n@@ -137,39 +131,6 @@ public class AndroidLoggingPluginTest {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n-    /**\n-     * When the application is not in a debuggable build, logs are not stored.\n-     */\n-    @Test\n-    public void noLogsStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = 0;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNull(plugin.getLogs());\n-    }\n-\n-    /**\n-     * When the application is in a debuggable build, logs are stored.\n-     */\n-    @Test\n-    public void logsAreStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNotNull(plugin.getLogs());\n-        assertEquals(plugin.getLogs().size(), 1);\n-    }\n-\n     static final class LogOutputStream extends ByteArrayOutputStream {\n         private LogOutputStream() {}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0OTA2MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461349060", "bodyText": "These are backwards --\n// It should be ...\nassertEquals(expectedValue, actualValue);", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:32:57Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = 0;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNull(plugin.getLogs());\n+    }\n+\n+    /**\n+     * When the application is in a debuggable build, logs are stored.\n+     */\n+    @Test\n+    public void logsAreStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNotNull(plugin.getLogs());\n+        assertEquals(plugin.getLogs().size(), 1);", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\nindex 57b283c0..9c77897c 100644\n--- a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n+++ b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n\n@@ -137,39 +131,6 @@ public class AndroidLoggingPluginTest {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n-    /**\n-     * When the application is not in a debuggable build, logs are not stored.\n-     */\n-    @Test\n-    public void noLogsStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = 0;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNull(plugin.getLogs());\n-    }\n-\n-    /**\n-     * When the application is in a debuggable build, logs are stored.\n-     */\n-    @Test\n-    public void logsAreStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNotNull(plugin.getLogs());\n-        assertEquals(plugin.getLogs().size(), 1);\n-    }\n-\n     static final class LogOutputStream extends ByteArrayOutputStream {\n         private LogOutputStream() {}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MDQzOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461350438", "bodyText": "Elsewhere, I suggest making a utility to tell whether or not the app is debuggable. When I wrote it, I had it as a static utility class. However, it might simplify your test code if it is just package-local, open-for-extension, regular class:\nclass AmplifyApp {\n    private final WeakReference<Context> context;\n\n    AmplifyApp(WeakReference<Context> context) {\n        this.context = context;\n    }\n\n    boolean isDebuggable() {\n        Context currentContext = context.get();\n        return currentContext.blahblah();\n    }\n}\nOr its test form:\nAmplifyApp amplifyApp = mock(AmplifyApp.class);\nwhen(amplifyApp.isDebuggable()).thenReturn(true);", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:36:27Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = 0;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNull(plugin.getLogs());\n+    }\n+\n+    /**\n+     * When the application is in a debuggable build, logs are stored.\n+     */\n+    @Test\n+    public void logsAreStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NDQ5Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461884496", "bodyText": "After changing the code to add a BroadcastLogger and manage the loggers inside of LoggingCategory, I now only check if the app is in a debuggable build inside DeveloperMenuManager.enableDeveloperMenu, so I did not add a utility class for this.", "author": "eeatonaws", "createdAt": "2020-07-28T21:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MDQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "fd06088b05e4be010a988489bf06576034517208", "chunk": "diff --git a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\nindex 57b283c0..9c77897c 100644\n--- a/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n+++ b/core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java\n\n@@ -137,39 +131,6 @@ public class AndroidLoggingPluginTest {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n-    /**\n-     * When the application is not in a debuggable build, logs are not stored.\n-     */\n-    @Test\n-    public void noLogsStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = 0;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNull(plugin.getLogs());\n-    }\n-\n-    /**\n-     * When the application is in a debuggable build, logs are stored.\n-     */\n-    @Test\n-    public void logsAreStored() {\n-        Context mockContext = mock(Context.class);\n-        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n-        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n-        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n-        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n-        plugin.configure(new JSONObject(), mockContext);\n-        Logger logger = plugin.forNamespace(\"logging-test\");\n-        logger.info(\"Info log\");\n-        assertNotNull(plugin.getLogs());\n-        assertEquals(plugin.getLogs().size(), 1);\n-    }\n-\n     static final class LogOutputStream extends ByteArrayOutputStream {\n         private LogOutputStream() {}\n \n"}}, {"oid": "fd06088b05e4be010a988489bf06576034517208", "url": "https://github.com/aws-amplify/amplify-android/commit/fd06088b05e4be010a988489bf06576034517208", "message": "use a BroadcastLogger and LoggingCategory to store logs", "committedDate": "2020-07-28T21:05:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NDk3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461884979", "bodyText": "This is way cleaner, thanks!\nI'd ditch the Manager part, you could just call it a DeveloperMenu. (Ref: https://blog.codinghorror.com/i-shall-call-it-somethingmanager/)\nThe sharedInstance verbiage is idiomatic to the iOS platform, but not to Android. On Android, this would probably be expressed as just instance (if you can have multiple) or singleton, or singletonInstance, if the code internally prevents multiple instances from being created.", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:17:18Z", "path": "core/src/main/java/com/amplifyframework/core/Amplify.java", "diffHunk": "@@ -142,9 +135,7 @@ public static void configure(@NonNull final AmplifyConfiguration configuration,\n                 }\n             }\n \n-            if (debuggableApp) {\n-                DeveloperMenuManager.sharedInstance(context).startListening();\n-            }\n+            DeveloperMenuManager.sharedInstance(context).enableDeveloperMenu();", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa4cf5878eb0b1a31f4d61d895cd9874435cb7c0", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/core/Amplify.java b/core/src/main/java/com/amplifyframework/core/Amplify.java\nindex 3883f6e1..0abcde47 100644\n--- a/core/src/main/java/com/amplifyframework/core/Amplify.java\n+++ b/core/src/main/java/com/amplifyframework/core/Amplify.java\n\n@@ -135,8 +138,6 @@ public final class Amplify {\n                 }\n             }\n \n-            DeveloperMenuManager.sharedInstance(context).enableDeveloperMenu();\n-\n             CONFIGURATION_LOCK.set(true);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NTgxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461885819", "bodyText": "I think you still want to strive to have the category not know about log storage. This is leaking your dev menu logic into the category API.\nInstead, I would aim to express this as:\nAmplify.addPlugin(new PersistentLogStoragePlugin());", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:19:00Z", "path": "core/src/main/java/com/amplifyframework/core/DeveloperMenuManager.java", "diffHunk": "@@ -52,6 +53,16 @@ public static DeveloperMenuManager sharedInstance(Context context) {\n         return sInstance;\n     }\n \n+    /**\n+     * Allows the developer menu to be activated if the app is in a debuggable build.\n+     */\n+    public void enableDeveloperMenu() {\n+        if ((context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {\n+            Amplify.Logging.shouldStoreLogs(true);", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa4cf5878eb0b1a31f4d61d895cd9874435cb7c0", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/core/DeveloperMenuManager.java b/core/src/main/java/com/amplifyframework/devmenu/DeveloperMenu.java\nsimilarity index 78%\nrename from core/src/main/java/com/amplifyframework/core/DeveloperMenuManager.java\nrename to core/src/main/java/com/amplifyframework/devmenu/DeveloperMenu.java\nindex 9911223f..2c981f67 100644\n--- a/core/src/main/java/com/amplifyframework/core/DeveloperMenuManager.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/DeveloperMenu.java\n\n@@ -34,31 +38,32 @@ public final class DeveloperMenuManager implements ShakeDetector.Listener {\n     private Context context;\n \n     /**\n-     * Constructs a new DeveloperMenuManager.\n+     * Constructs a new DeveloperMenu.\n      * @param context Android Context\n      */\n-    private DeveloperMenuManager(Context context) {\n+    private DeveloperMenu(Context context) {\n         this.context = context.getApplicationContext();\n     }\n \n     /**\n-     * Returns an instance of DeveloperMenuManager.\n+     * Returns an instance of DeveloperMenu.\n      * @param context Android Context\n-     * @return a DeveloperMenuManager\n+     * @return a DeveloperMenu\n      */\n-    public static DeveloperMenuManager sharedInstance(Context context) {\n+    public static DeveloperMenu singletonInstance(Context context) {\n         if (sInstance == null) {\n-            sInstance = new DeveloperMenuManager(context);\n+            sInstance = new DeveloperMenu(context);\n         }\n         return sInstance;\n     }\n \n     /**\n      * Allows the developer menu to be activated if the app is in a debuggable build.\n+     * @throws AmplifyException if attempting to enable the developer menu fails\n      */\n-    public void enableDeveloperMenu() {\n+    public void enableDeveloperMenu() throws AmplifyException {\n         if ((context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {\n-            Amplify.Logging.shouldStoreLogs(true);\n+            Amplify.addPlugin(new PersistentLogStoragePlugin());\n             startListening();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4ODAwNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461888006", "bodyText": "Create the broadcast logger inside of LoggingCategory:\n@NonNull\n@Override\npublic Logger forNamespace(@NonNull String namespace) {\n    List<Logger> delegates = new ArrayList<>();\n    for (LoggingPlugin plugin : pluginsAddedViaApi) {\n        delegates.add(plugin.forNamespace(namespace));\n    }\n    return new BroadcastLogger(delegates);\n}\nwith:\npublic final class BroadcastLogger {\n    private final List<Logger> delegates;\n   \n    public BroadcastLogger(@Nullable List<Logger> delegates) {\n        this.delegates = new ArrayList<>();\n        if (delegates != null) {\n            this.delegates.addAll(delegates);\n        }\n    }\n\n    void info(String message) {\n        log(LogLevel.INFO, message);\n    }\n\n    ...\n\n    void log(LogLevel level, String message) {\n        for (Logger delegate : delegates) {\n            delegate.log(level, message);\n        }\n    }\n}", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:23:28Z", "path": "core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java", "diffHunk": "@@ -55,16 +49,14 @@ public AndroidLoggingPlugin() {\n     @SuppressWarnings(\"WeakerAccess\") // This is a a public API\n     public AndroidLoggingPlugin(@NonNull LogLevel defaultLoggerThreshold) {\n         this.defaultLoggerThreshold = defaultLoggerThreshold;\n-        loggers = new ArrayList<>();\n     }\n \n     @NonNull\n     @Override\n     public Logger forNamespace(@Nullable String namespace) {\n         String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n-        AndroidLogger newLogger = new AndroidLogger(usedNamespace, defaultLoggerThreshold, storeLogs);\n-        loggers.add(newLogger);\n-        return newLogger;\n+        AndroidLogger androidLogger = new AndroidLogger(usedNamespace, defaultLoggerThreshold);\n+        return Amplify.Logging.createBroadcastLogger(androidLogger);", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa4cf5878eb0b1a31f4d61d895cd9874435cb7c0", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java b/core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java\nindex c136d75f..f8d562e6 100644\n--- a/core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java\n+++ b/core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java\n\n@@ -55,8 +53,7 @@ public final class AndroidLoggingPlugin extends LoggingPlugin<Void> {\n     @Override\n     public Logger forNamespace(@Nullable String namespace) {\n         String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n-        AndroidLogger androidLogger = new AndroidLogger(usedNamespace, defaultLoggerThreshold);\n-        return Amplify.Logging.createBroadcastLogger(androidLogger);\n+        return new AndroidLogger(usedNamespace, defaultLoggerThreshold);\n     }\n \n     @NonNull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4ODkyOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461888929", "bodyText": "This is logic that you'll put in your PersistentLogger.\nThe BroadcastLogger just farms work out to an AndroidLogger (that emits to logcat) and a PersistentLogger, which buffers content for display in the dev menu.", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:25:22Z", "path": "core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.util.Immutable;\n+\n+import java.time.LocalDateTime;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * An implementation of {@link Logger} that can store logs and\n+ * uses a provided logger to emit logs.\n+ */\n+final class BroadcastLogger implements Logger {\n+    // Maximum number of logs to store.\n+    private static final int MAX_NUM_LOGS = 500;", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa4cf5878eb0b1a31f4d61d895cd9874435cb7c0", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java b/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java\nindex 1db3a5b6..d9318c59 100644\n--- a/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java\n+++ b/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java\n\n@@ -19,130 +19,92 @@ import android.annotation.SuppressLint;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n-import com.amplifyframework.util.Immutable;\n-\n-import java.time.LocalDateTime;\n-import java.util.LinkedList;\n+import java.util.ArrayList;\n import java.util.List;\n-import java.util.Objects;\n \n /**\n- * An implementation of {@link Logger} that can store logs and\n- * uses a provided logger to emit logs.\n+ * An implementation of {@link Logger} that emits logs to all loggers.\n  */\n-final class BroadcastLogger implements Logger {\n-    // Maximum number of logs to store.\n-    private static final int MAX_NUM_LOGS = 500;\n-    // Logger used to emit the logs.\n-    private final Logger logger;\n-    // Indicates whether to store the logs emitted by this logger.\n-    private final boolean shouldStoreLogs;\n-    // The logs stored by this logger.\n-    private final List<LogEntry> logs;\n+public final class BroadcastLogger implements Logger {\n+    // List of loggers to emit logs to.\n+    private final List<Logger> delegates;\n \n-    BroadcastLogger(@NonNull Logger logger, boolean shouldStoreLogs) {\n-        this.logger = Objects.requireNonNull(logger);\n-        this.shouldStoreLogs = shouldStoreLogs;\n-        logs = new LinkedList<>();\n+    /**\n+     * Creates a new BroadcastLogger.\n+     * @param delegates the list of loggers to emit logs to\n+     */\n+    public BroadcastLogger(@Nullable List<Logger> delegates) {\n+        this.delegates = new ArrayList<>();\n+        if (delegates != null) {\n+            this.delegates.addAll(delegates);\n+        }\n     }\n \n     @NonNull\n     @Override\n     public LogLevel getThresholdLevel() {\n-        return logger.getThresholdLevel();\n+        throw new UnsupportedOperationException(\"Cannot get threshold level for BroadcastLogger.\");\n     }\n \n     @NonNull\n     @Override\n     public String getNamespace() {\n-        return logger.getNamespace();\n+        if (delegates.isEmpty()) {\n+            return \"\";\n+        } else {\n+            return delegates.get(0).getNamespace();\n+        }\n     }\n \n     @Override\n     public void error(@Nullable String message) {\n-        if (getThresholdLevel().above(LogLevel.ERROR)) {\n-            return;\n+        for (Logger delegate : delegates) {\n+            delegate.error(message);\n         }\n-        addToLogs(new LogEntry(LocalDateTime.now(), getNamespace(), message, LogLevel.ERROR));\n-        logger.error(message);\n     }\n \n     @Override\n     public void error(@Nullable String message, @Nullable Throwable error) {\n-        if (getThresholdLevel().above(LogLevel.ERROR)) {\n-            return;\n+        for (Logger delegate : delegates) {\n+            delegate.error(message, error);\n         }\n-        addToLogs(new LogEntry(LocalDateTime.now(), getNamespace(), message, error, LogLevel.ERROR));\n-        logger.error(message, error);\n     }\n \n     @Override\n     public void warn(@Nullable String message) {\n-        if (getThresholdLevel().above(LogLevel.WARN)) {\n-            return;\n+        for (Logger delegate : delegates) {\n+            delegate.warn(message);\n         }\n-        addToLogs(new LogEntry(LocalDateTime.now(), getNamespace(), message, LogLevel.WARN));\n-        logger.warn(message);\n     }\n \n     @Override\n     public void warn(@Nullable String message, @Nullable Throwable issue) {\n-        if (getThresholdLevel().above(LogLevel.WARN)) {\n-            return;\n+        for (Logger delegate : delegates) {\n+            delegate.warn(message, issue);\n         }\n-        addToLogs(new LogEntry(LocalDateTime.now(), getNamespace(), message, issue, LogLevel.WARN));\n-        logger.warn(message, issue);\n     }\n \n     @SuppressLint(\"LogConditional\") // We guard with our own LogLevel.\n     @Override\n     public void info(@Nullable String message) {\n-        if (getThresholdLevel().above(LogLevel.INFO)) {\n-            return;\n+        for (Logger delegate : delegates) {\n+            delegate.info(message);\n         }\n-        addToLogs(new LogEntry(LocalDateTime.now(), getNamespace(), message, LogLevel.INFO));\n-        logger.info(message);\n     }\n \n     @SuppressLint(\"LogConditional\") // We guard with our own LogLevel.\n     @Override\n     public void debug(@Nullable String message) {\n-        if (getThresholdLevel().above(LogLevel.DEBUG)) {\n-            return;\n+        for (Logger delegate : delegates) {\n+            delegate.debug(message);\n         }\n-        addToLogs(new LogEntry(LocalDateTime.now(), getNamespace(), message, LogLevel.DEBUG));\n-        logger.debug(message);\n     }\n \n     @SuppressLint(\"LogConditional\") // We guard with our own LogLevel.\n     @Override\n     public void verbose(@Nullable String message) {\n-        if (getThresholdLevel().above(LogLevel.VERBOSE)) {\n-            return;\n-        }\n-        addToLogs(new LogEntry(LocalDateTime.now(), getNamespace(), message, LogLevel.VERBOSE));\n-        logger.verbose(message);\n-    }\n-\n-    /**\n-     * Returns the logs stored by this logger.\n-     * @return the list of logs stored by this logger.\n-     */\n-    public List<LogEntry> getLogs() {\n-        return Immutable.of(logs);\n-    }\n-\n-    /**\n-     * If the logs should be stored, then stores the given log and removes the\n-     * first log currently stored if there would be more than MAX_NUM_LOGS stored.\n-     * @param logEntry the log to be stored.\n-     */\n-    private void addToLogs(LogEntry logEntry) {\n-        if (shouldStoreLogs) {\n-            if (logs.size() == MAX_NUM_LOGS) {\n-                logs.remove(0);\n-            }\n-            logs.add(logEntry);\n+        for (Logger delegate : delegates) {\n+            delegate.verbose(message);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MDExMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461890111", "bodyText": "You could bundle together all of your code for the dev menu into core/src/main/java/com/amplifyframework/devmenu. This LogEntry is more a thing that's used by the dev menu, I'd say, than it is part of the core spec of the logger.\ncore/src/main/java/com/amplifyframework/logging is meant to be a core spec for the logger category.\nIt does also include the default Android implementations of the plugin and logger. Which isn't 100% architecturally pure, true. In other categories, those plugins would be separate Gradle modules entirely.", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:27:42Z", "path": "core/src/main/java/com/amplifyframework/logging/LogEntry.java", "diffHunk": "@@ -16,26 +16,24 @@\n package com.amplifyframework.logging;\n \n import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n \n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n \n /**\n  * A representation of a log.\n  */\n public final class LogEntry {", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkzMzIzMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461933232", "bodyText": "Would PersistentLogStoragePlugin and PersistentLogger go in the devmenu package or logging package?", "author": "eeatonaws", "createdAt": "2020-07-28T22:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MDExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNzY1MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462627651", "bodyText": "/md One could argue either way. I'd say devmenu, since its the only consumer we currently expect for the plugin.\nIf we find another use for it, we can always move it back to the more general location, later.", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MDExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "aa4cf5878eb0b1a31f4d61d895cd9874435cb7c0", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/LogEntry.java b/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\nsimilarity index 84%\nrename from core/src/main/java/com/amplifyframework/logging/LogEntry.java\nrename to core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\nindex 230f79d1..5a5e2ec5 100644\n--- a/core/src/main/java/com/amplifyframework/logging/LogEntry.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\n\n@@ -13,12 +13,14 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.logging;\n+package com.amplifyframework.devmenu;\n \n import android.util.Log;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.amplifyframework.logging.LogLevel;\n+\n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n import java.util.Objects;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MDQ4Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461890487", "bodyText": "If you have a Persistent logging plugin included, then this should be implicitly true, based on the presence of the plugin. In other words, you wouldn't need this state boolean.", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:28:31Z", "path": "core/src/main/java/com/amplifyframework/logging/LoggingCategory.java", "diffHunk": "@@ -30,6 +34,10 @@\n  */\n public final class LoggingCategory extends Category<LoggingPlugin<?>> implements LoggingCategoryBehavior {\n     private final LoggingPlugin<?> defaultPlugin;\n+    // List of BroadcastLoggers created.\n+    private final List<BroadcastLogger> loggers;\n+    // Indicates whether the logs from all loggers should be stored.\n+    private boolean storeLogs;", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa4cf5878eb0b1a31f4d61d895cd9874435cb7c0", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java b/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java\nindex 8aba8e8e..5805158b 100644\n--- a/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java\n+++ b/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java\n\n@@ -34,10 +33,6 @@ import java.util.Objects;\n  */\n public final class LoggingCategory extends Category<LoggingPlugin<?>> implements LoggingCategoryBehavior {\n     private final LoggingPlugin<?> defaultPlugin;\n-    // List of BroadcastLoggers created.\n-    private final List<BroadcastLogger> loggers;\n-    // Indicates whether the logs from all loggers should be stored.\n-    private boolean storeLogs;\n \n     /**\n      * Constructs a logging category.\n"}}, {"oid": "aa4cf5878eb0b1a31f4d61d895cd9874435cb7c0", "url": "https://github.com/aws-amplify/amplify-android/commit/aa4cf5878eb0b1a31f4d61d895cd9874435cb7c0", "message": "created devmenu package and persistent logger and plugin", "committedDate": "2020-07-29T14:51:39Z", "type": "commit"}, {"oid": "6df493418162cc1b994d8dfbfce1d773f62f4774", "url": "https://github.com/aws-amplify/amplify-android/commit/6df493418162cc1b994d8dfbfce1d773f62f4774", "message": "created devmenu package in androidTest", "committedDate": "2020-07-29T14:56:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5NjE2MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462396161", "bodyText": "Does it make sense to align the behavior to getNamespace()? Maybe,\nif (delegates.isEmpty()) {\n    throw ...\n} else {\n    return delegates.get(0).getThresholdLevel();\n}\nAn alternative is that you enforce all of the delegates  in the BroadcastLogger to have the same namespace and threshold level, and then you can just return them as normal.", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:39:12Z", "path": "core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * An implementation of {@link Logger} that emits logs to all loggers.\n+ */\n+public final class BroadcastLogger implements Logger {\n+    // List of loggers to emit logs to.\n+    private final List<Logger> delegates;\n+\n+    /**\n+     * Creates a new BroadcastLogger.\n+     * @param delegates the list of loggers to emit logs to\n+     */\n+    public BroadcastLogger(@Nullable List<Logger> delegates) {\n+        this.delegates = new ArrayList<>();\n+        if (delegates != null) {\n+            this.delegates.addAll(delegates);\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public LogLevel getThresholdLevel() {\n+        throw new UnsupportedOperationException(\"Cannot get threshold level for BroadcastLogger.\");", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eec029dd332eb8208991b95ce6296940e9c37b12", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java b/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java\nindex d9318c59..ce3a62b7 100644\n--- a/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java\n+++ b/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java\n\n@@ -43,7 +43,12 @@ public final class BroadcastLogger implements Logger {\n     @NonNull\n     @Override\n     public LogLevel getThresholdLevel() {\n-        throw new UnsupportedOperationException(\"Cannot get threshold level for BroadcastLogger.\");\n+        if (delegates.isEmpty()) {\n+            throw new IllegalStateException(\"Cannot get threshold level for BroadcastLogger\" +\n+                    \" with no registered loggers.\");\n+        } else {\n+            return delegates.get(0).getThresholdLevel();\n+        }\n     }\n \n     @NonNull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5ODAyMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462398023", "bodyText": "If you use a Set, you might be able to avoid the need to record this state boolean. You could add a plugin twice, and the Set should be able to ignore the duplicate, on the basis of its hashCode() value.", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:41:47Z", "path": "core/src/main/java/com/amplifyframework/logging/LoggingCategory.java", "diffHunk": "@@ -53,15 +56,23 @@ public CategoryType getCategoryType() {\n     @NonNull\n     @Override\n     public Logger forNamespace(@Nullable String namespace) {\n-        return getLoggingPlugin().forNamespace(namespace);\n+        List<Logger> delegates = new ArrayList<>();\n+        boolean defaultPluginAdded = false;", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQzNzQ5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462437493", "bodyText": "Using a Set does not work as Loggers of the same type and namespace as well as LoggingPlugins of the same type have different hash codes (these classes don't override the hashCode method and I think the default one only guarantees that the hash codes for two objects will be equal if they represent the same instance).", "author": "eeatonaws", "createdAt": "2020-07-29T16:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5ODAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyODExOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462628119", "bodyText": "Ah yes true. But, you could add the equals and hashCode implementations! I think they didn't exist before, since there was only ever one of each, and they didn't need to be \"collection safe.\"", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5ODAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "e535bf326e4c3d842c688e00add748afb80570c1", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java b/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java\nindex 5805158b..582e6301 100644\n--- a/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java\n+++ b/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java\n\n@@ -56,17 +58,12 @@ public final class LoggingCategory extends Category<LoggingPlugin<?>> implements\n     @NonNull\n     @Override\n     public Logger forNamespace(@Nullable String namespace) {\n+        Set<LoggingPlugin<?>> loggingPlugins = new HashSet<>(getPlugins());\n+        loggingPlugins.add(defaultPlugin);\n         List<Logger> delegates = new ArrayList<>();\n-        boolean defaultPluginAdded = false;\n-        for (LoggingPlugin<?> plugin : getPlugins()) {\n-            if (plugin.getPluginKey().equals(defaultPlugin.getPluginKey())) {\n-                defaultPluginAdded = true;\n-            }\n+        for (LoggingPlugin<?> plugin : loggingPlugins) {\n             delegates.add(plugin.forNamespace(namespace));\n         }\n-        if (!defaultPluginAdded) {\n-            delegates.add(defaultPlugin.forNamespace(namespace));\n-        }\n         return new BroadcastLogger(delegates);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMDQwOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462400409", "bodyText": "Do you want to use a Map<String, PersistentLogger>, that way you can check:\nPersistentLogger preExistingLogger = map.get(usedNamespace);\nif (preExistingLogger != null) {\n    return preExistingLogger;\n} else {\n   PersistentLogger newLogger = new PeristentLogger(usedNamespace);\n   map.put(usedNamespace, newLogger);\n   return newLogger;\n}", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:45:11Z", "path": "core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.devmenu.LogEntry;\n+\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n+ */\n+public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    // List of PersistentLoggers created.\n+    private final List<PersistentLogger> loggers;\n+\n+    /**\n+     * Creates a new PersistentLogStoragePlugin.\n+     */\n+    public PersistentLogStoragePlugin() {\n+        loggers = new ArrayList<>();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Logger forNamespace(@Nullable String namespace) {\n+        String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n+        PersistentLogger logger = new PersistentLogger(usedNamespace);", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eec029dd332eb8208991b95ce6296940e9c37b12", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\nsimilarity index 62%\nrename from core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java\nrename to core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\nindex 5a07fb8b..935db55f 100644\n--- a/core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\n\n@@ -13,47 +13,57 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.logging;\n+package com.amplifyframework.devmenu;\n \n import android.content.Context;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n-import com.amplifyframework.devmenu.LogEntry;\n+import com.amplifyframework.logging.Logger;\n+import com.amplifyframework.logging.LoggingCategoryBehavior;\n+import com.amplifyframework.logging.LoggingPlugin;\n \n import org.json.JSONObject;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n  */\n public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n     private static final String AMPLIFY_NAMESPACE = \"amplify\";\n-    // List of PersistentLoggers created.\n-    private final List<PersistentLogger> loggers;\n+    // Map from namespace to the PersistentLogger for that namespace.\n+    private final Map<String, PersistentLogger> loggers;\n \n     /**\n      * Creates a new PersistentLogStoragePlugin.\n      */\n     public PersistentLogStoragePlugin() {\n-        loggers = new ArrayList<>();\n+        loggers = new HashMap<>();\n     }\n \n     @NonNull\n     @Override\n     public Logger forNamespace(@Nullable String namespace) {\n         String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n-        PersistentLogger logger = new PersistentLogger(usedNamespace);\n-        loggers.add(logger);\n-        return logger;\n+        PersistentLogger preExistingLogger = loggers.get(usedNamespace);\n+        if (preExistingLogger != null) {\n+            return preExistingLogger;\n+        } else {\n+            PersistentLogger newLogger = new PersistentLogger(usedNamespace);\n+            loggers.put(usedNamespace, newLogger);\n+            return newLogger;\n+        }\n     }\n \n     @NonNull\n     @Override\n     public String getPluginKey() {\n-        return \"PersistentLogStoragePlugin\";\n+        return PersistentLogStoragePlugin.class.getSimpleName();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMDc0Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462400746", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"PersistentLogStoragePlugin\";\n          \n          \n            \n                    return PersistentLogStoragePlugin.class.getSimpleName();", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:45:39Z", "path": "core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.devmenu.LogEntry;\n+\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n+ */\n+public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    // List of PersistentLoggers created.\n+    private final List<PersistentLogger> loggers;\n+\n+    /**\n+     * Creates a new PersistentLogStoragePlugin.\n+     */\n+    public PersistentLogStoragePlugin() {\n+        loggers = new ArrayList<>();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Logger forNamespace(@Nullable String namespace) {\n+        String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n+        PersistentLogger logger = new PersistentLogger(usedNamespace);\n+        loggers.add(logger);\n+        return logger;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return \"PersistentLogStoragePlugin\";", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eec029dd332eb8208991b95ce6296940e9c37b12", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\nsimilarity index 62%\nrename from core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java\nrename to core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\nindex 5a07fb8b..935db55f 100644\n--- a/core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\n\n@@ -13,47 +13,57 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.logging;\n+package com.amplifyframework.devmenu;\n \n import android.content.Context;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n-import com.amplifyframework.devmenu.LogEntry;\n+import com.amplifyframework.logging.Logger;\n+import com.amplifyframework.logging.LoggingCategoryBehavior;\n+import com.amplifyframework.logging.LoggingPlugin;\n \n import org.json.JSONObject;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n  */\n public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n     private static final String AMPLIFY_NAMESPACE = \"amplify\";\n-    // List of PersistentLoggers created.\n-    private final List<PersistentLogger> loggers;\n+    // Map from namespace to the PersistentLogger for that namespace.\n+    private final Map<String, PersistentLogger> loggers;\n \n     /**\n      * Creates a new PersistentLogStoragePlugin.\n      */\n     public PersistentLogStoragePlugin() {\n-        loggers = new ArrayList<>();\n+        loggers = new HashMap<>();\n     }\n \n     @NonNull\n     @Override\n     public Logger forNamespace(@Nullable String namespace) {\n         String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n-        PersistentLogger logger = new PersistentLogger(usedNamespace);\n-        loggers.add(logger);\n-        return logger;\n+        PersistentLogger preExistingLogger = loggers.get(usedNamespace);\n+        if (preExistingLogger != null) {\n+            return preExistingLogger;\n+        } else {\n+            PersistentLogger newLogger = new PersistentLogger(usedNamespace);\n+            loggers.put(usedNamespace, newLogger);\n+            return newLogger;\n+        }\n     }\n \n     @NonNull\n     @Override\n     public String getPluginKey() {\n-        return \"PersistentLogStoragePlugin\";\n+        return PersistentLogStoragePlugin.class.getSimpleName();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjA5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462402090", "bodyText": "Hm. I think you'll need to sort these by timestamp somehow, right? Right now, they are grouped into chunks by namespace.\nYou can add like:\nCollections.sort(logs, (left, right) ->\n    left.getTimestamp().compareTo(right.getTimestamp()));\nbefore you return.", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:47:35Z", "path": "core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.devmenu.LogEntry;\n+\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n+ */\n+public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    // List of PersistentLoggers created.\n+    private final List<PersistentLogger> loggers;\n+\n+    /**\n+     * Creates a new PersistentLogStoragePlugin.\n+     */\n+    public PersistentLogStoragePlugin() {\n+        loggers = new ArrayList<>();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Logger forNamespace(@Nullable String namespace) {\n+        String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n+        PersistentLogger logger = new PersistentLogger(usedNamespace);\n+        loggers.add(logger);\n+        return logger;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return \"PersistentLogStoragePlugin\";\n+    }\n+\n+    @Override\n+    public void configure(\n+            JSONObject pluginConfiguration,\n+            @NonNull Context context) {\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Void getEscapeHatch() {\n+        return null;\n+    }\n+\n+    /**\n+     * Returns the logs stored by all of the {@link PersistentLogger}s.\n+     * @return a list of LogEntry.\n+     */\n+    public List<LogEntry> getLogs() {\n+        List<LogEntry> logs = new ArrayList<>();\n+        for (PersistentLogger logger : loggers) {\n+            logs.addAll(logger.getLogs());", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eec029dd332eb8208991b95ce6296940e9c37b12", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\nsimilarity index 62%\nrename from core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java\nrename to core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\nindex 5a07fb8b..935db55f 100644\n--- a/core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\n\n@@ -13,47 +13,57 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.logging;\n+package com.amplifyframework.devmenu;\n \n import android.content.Context;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n-import com.amplifyframework.devmenu.LogEntry;\n+import com.amplifyframework.logging.Logger;\n+import com.amplifyframework.logging.LoggingCategoryBehavior;\n+import com.amplifyframework.logging.LoggingPlugin;\n \n import org.json.JSONObject;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n  */\n public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n     private static final String AMPLIFY_NAMESPACE = \"amplify\";\n-    // List of PersistentLoggers created.\n-    private final List<PersistentLogger> loggers;\n+    // Map from namespace to the PersistentLogger for that namespace.\n+    private final Map<String, PersistentLogger> loggers;\n \n     /**\n      * Creates a new PersistentLogStoragePlugin.\n      */\n     public PersistentLogStoragePlugin() {\n-        loggers = new ArrayList<>();\n+        loggers = new HashMap<>();\n     }\n \n     @NonNull\n     @Override\n     public Logger forNamespace(@Nullable String namespace) {\n         String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n-        PersistentLogger logger = new PersistentLogger(usedNamespace);\n-        loggers.add(logger);\n-        return logger;\n+        PersistentLogger preExistingLogger = loggers.get(usedNamespace);\n+        if (preExistingLogger != null) {\n+            return preExistingLogger;\n+        } else {\n+            PersistentLogger newLogger = new PersistentLogger(usedNamespace);\n+            loggers.put(usedNamespace, newLogger);\n+            return newLogger;\n+        }\n     }\n \n     @NonNull\n     @Override\n     public String getPluginKey() {\n-        return \"PersistentLogStoragePlugin\";\n+        return PersistentLogStoragePlugin.class.getSimpleName();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjQ5OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462402499", "bodyText": "I'd put this one with the .devmenu stuff.", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:48:12Z", "path": "core/src/main/java/com/amplifyframework/logging/PersistentLogger.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eec029dd332eb8208991b95ce6296940e9c37b12", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/PersistentLogger.java b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogger.java\nsimilarity index 96%\nrename from core/src/main/java/com/amplifyframework/logging/PersistentLogger.java\nrename to core/src/main/java/com/amplifyframework/devmenu/PersistentLogger.java\nindex 96544249..2e37fd6c 100644\n--- a/core/src/main/java/com/amplifyframework/logging/PersistentLogger.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogger.java\n\n@@ -13,13 +13,14 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.logging;\n+package com.amplifyframework.devmenu;\n \n import android.annotation.SuppressLint;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n-import com.amplifyframework.devmenu.LogEntry;\n+import com.amplifyframework.logging.LogLevel;\n+import com.amplifyframework.logging.Logger;\n import com.amplifyframework.util.Immutable;\n \n import java.time.LocalDateTime;\n"}}, {"oid": "eec029dd332eb8208991b95ce6296940e9c37b12", "url": "https://github.com/aws-amplify/amplify-android/commit/eec029dd332eb8208991b95ce6296940e9c37b12", "message": "defined getThresholdLevel for BroadcastLogger and moved persistent logger and plugin to devmenu package", "committedDate": "2020-07-29T16:51:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyOTA5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462629090", "bodyText": "Ah crap, actually. In my last round of feedback, I suggested you do:\nCollection.sort(listOfLogEntry, (left, right) -> { /* blah balh */ });\nWith the comparator specified at the call site.\nHowever, cleaner and better encapsulated would be to have public final class LogEntry implements Comparable<LogEntry> {. Then, you would only need to do Collections.sort(listOfLogEntry), and it would Just Work\u2122.", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:35:06Z", "path": "core/src/main/java/com/amplifyframework/devmenu/LogEntry.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.LogLevel;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry {", "originalCommit": "eec029dd332eb8208991b95ce6296940e9c37b12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e535bf326e4c3d842c688e00add748afb80570c1", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java b/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\nindex 5a5e2ec5..852c0ffa 100644\n--- a/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\n\n@@ -23,12 +23,13 @@ import com.amplifyframework.logging.LogLevel;\n \n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n import java.util.Objects;\n \n /**\n  * A representation of a log.\n  */\n-public final class LogEntry {\n+public final class LogEntry implements Comparable<LogEntry> {\n     // The format for the log's date and time.\n     private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n     private final LocalDateTime dateTime;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyOTc4MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462629780", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return String.format(\"[%s] %s %s: %s \\n%s\", logLevel.name(),\n          \n          \n            \n                            dateTime.format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)), namespace, message,\n          \n          \n            \n                            throwable == null ? \"\" : Log.getStackTraceString(throwable));\n          \n          \n            \n                    String dateString = dateTime.format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT));\n          \n          \n            \n                    String exceptionTrace = throwable == null ? \"\" : Log.getStackTraceString(throwable);\n          \n          \n            \n                    return String.format(Locale.US,\n          \n          \n            \n                        \"[%s] %s %s: %s \\n%s\",\n          \n          \n            \n                        logLevel.name(), dateString, namespace, message, exceptionTrace\n          \n          \n            \n                    );", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:37:03Z", "path": "core/src/main/java/com/amplifyframework/devmenu/LogEntry.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.LogLevel;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry {\n+    // The format for the log's date and time.\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+    private final LocalDateTime dateTime;\n+    private final String namespace;\n+    private final String message;\n+    private final Throwable throwable;\n+    private final LogLevel logLevel;\n+\n+    /**\n+     * Creates a new LogEntry representing a log with the given time, tag, message,\n+     * and throwable that was logged at the given level.\n+     * @param dateTime the date and time of the log.\n+     * @param namespace the namespace of the logger that emitted the log.\n+     * @param message the message for the log.\n+     * @param throwable the Throwable associated with the log.\n+     * @param logLevel the level the log was logged at.\n+     */\n+    public LogEntry(@NonNull LocalDateTime dateTime, @Nullable String namespace, @Nullable String message,\n+                    @Nullable Throwable throwable, @NonNull LogLevel logLevel) {\n+        this.dateTime = Objects.requireNonNull(dateTime);\n+        this.logLevel = Objects.requireNonNull(logLevel);\n+        this.namespace = namespace;\n+        this.message = message;\n+        this.throwable = throwable;\n+    }\n+\n+    /**\n+     * Gets the date and time of the log.\n+     * @return the date and time of the log.\n+     */\n+    public LocalDateTime getDateTime() {\n+        return dateTime;\n+    }\n+\n+    /**\n+     * Gets the namespace of the logger that emitted the log.\n+     * @return the namespace of the logger that emitted the log.\n+     */\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    /**\n+     * Gets the message for the log.\n+     * @return the message for the log.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Gets the throwable for the log.\n+     * @return the throwable for the log, or null if there is no throwable for the log.\n+     */\n+    public Throwable getThrowable() {\n+        return throwable;\n+    }\n+\n+    /**\n+     * Gets the level the log was logged at.\n+     * @return the level the log was logged at.\n+     */\n+    public LogLevel getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    /**\n+     * Returns a String representation of this log.\n+     * @return a String representing this log.\n+     */\n+    public String toString() {\n+        return String.format(\"[%s] %s %s: %s \\n%s\", logLevel.name(),\n+                dateTime.format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)), namespace, message,\n+                throwable == null ? \"\" : Log.getStackTraceString(throwable));", "originalCommit": "eec029dd332eb8208991b95ce6296940e9c37b12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e535bf326e4c3d842c688e00add748afb80570c1", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java b/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\nindex 5a5e2ec5..852c0ffa 100644\n--- a/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\n\n@@ -23,12 +23,13 @@ import com.amplifyframework.logging.LogLevel;\n \n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n import java.util.Objects;\n \n /**\n  * A representation of a log.\n  */\n-public final class LogEntry {\n+public final class LogEntry implements Comparable<LogEntry> {\n     // The format for the log's date and time.\n     private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n     private final LocalDateTime dateTime;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMDU3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462630570", "bodyText": "Another strategy here, which I prefer, is to compare the top-level types with a single assertEquals statement. That is:\nassertEquals(\n    Collections.singletonList(new LogLine(\n        yourExcpected,\n        valuesHere\n    )),\n    plugin.getLogs()\n)", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:39:18Z", "path": "core/src/test/java/com/amplifyframework/devmenu/PersistentLogStoragePluginTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import com.amplifyframework.logging.LogLevel;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests the {@link PersistentLogStoragePlugin}.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class PersistentLogStoragePluginTest {\n+\n+    /**\n+     * Tests that a log emitted by a PersistentLogger is stored.\n+     */\n+    @Test\n+    public void logsAreStored() {\n+        PersistentLogStoragePlugin plugin = new PersistentLogStoragePlugin();\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        String message = \"Error log\";\n+        Throwable throwable = new Throwable(\"error message\");\n+        logger.error(message, throwable);\n+        List<LogEntry> logs = plugin.getLogs();\n+        assertEquals(1, logs.size());\n+        LogEntry log = logs.get(0);\n+        assertEquals(logger.getNamespace(), log.getNamespace());\n+        assertEquals(message, log.getMessage());\n+        Assert.assertEquals(LogLevel.ERROR, log.getLogLevel());\n+        assertEquals(throwable, log.getThrowable());", "originalCommit": "eec029dd332eb8208991b95ce6296940e9c37b12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e535bf326e4c3d842c688e00add748afb80570c1", "chunk": "diff --git a/core/src/test/java/com/amplifyframework/devmenu/PersistentLogStoragePluginTest.java b/core/src/test/java/com/amplifyframework/devmenu/PersistentLogStoragePluginTest.java\nindex f83134fb..9bd0979f 100644\n--- a/core/src/test/java/com/amplifyframework/devmenu/PersistentLogStoragePluginTest.java\n+++ b/core/src/test/java/com/amplifyframework/devmenu/PersistentLogStoragePluginTest.java\n\n@@ -18,7 +18,6 @@ package com.amplifyframework.devmenu;\n import com.amplifyframework.logging.LogLevel;\n import com.amplifyframework.logging.Logger;\n \n-import org.junit.Assert;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.robolectric.RobolectricTestRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMTE3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462631179", "bodyText": "Hm. Actually, you could refuse to create a BroadcastLogger if delegates.size() < 1. That'd remove the need for your if (delegates.isEmpty()) checks, anyway.", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:40:59Z", "path": "core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * An implementation of {@link Logger} that emits logs to all loggers.\n+ */\n+public final class BroadcastLogger implements Logger {\n+    // List of loggers to emit logs to.\n+    private final List<Logger> delegates;\n+\n+    /**\n+     * Creates a new BroadcastLogger.\n+     * @param delegates the list of loggers to emit logs to\n+     */\n+    public BroadcastLogger(@Nullable List<Logger> delegates) {\n+        this.delegates = new ArrayList<>();\n+        if (delegates != null) {\n+            this.delegates.addAll(delegates);\n+        }", "originalCommit": "eec029dd332eb8208991b95ce6296940e9c37b12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNDg4NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462634884", "bodyText": "Good point. Also, delegates.size() should never be less than 1 since a logger from the defaultPlugin is always added.", "author": "eeatonaws", "createdAt": "2020-07-29T22:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMTE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e535bf326e4c3d842c688e00add748afb80570c1", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java b/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java\nindex ce3a62b7..c84c4291 100644\n--- a/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java\n+++ b/core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java\n\n@@ -33,11 +33,8 @@ public final class BroadcastLogger implements Logger {\n      * Creates a new BroadcastLogger.\n      * @param delegates the list of loggers to emit logs to\n      */\n-    public BroadcastLogger(@Nullable List<Logger> delegates) {\n-        this.delegates = new ArrayList<>();\n-        if (delegates != null) {\n-            this.delegates.addAll(delegates);\n-        }\n+    public BroadcastLogger(List<Logger> delegates) {\n+        this.delegates = new ArrayList<>(delegates);\n     }\n \n     @NonNull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMTM3Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462631377", "bodyText": "trivial nit: would join this up onto a single line", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:41:37Z", "path": "core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.Logger;\n+import com.amplifyframework.logging.LoggingCategoryBehavior;\n+import com.amplifyframework.logging.LoggingPlugin;\n+\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n+ */\n+public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    // Map from namespace to the PersistentLogger for that namespace.\n+    private final Map<String, PersistentLogger> loggers;\n+\n+    /**\n+     * Creates a new PersistentLogStoragePlugin.\n+     */\n+    public PersistentLogStoragePlugin() {\n+        loggers = new HashMap<>();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Logger forNamespace(@Nullable String namespace) {\n+        String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n+        PersistentLogger preExistingLogger = loggers.get(usedNamespace);\n+        if (preExistingLogger != null) {\n+            return preExistingLogger;\n+        } else {\n+            PersistentLogger newLogger = new PersistentLogger(usedNamespace);\n+            loggers.put(usedNamespace, newLogger);\n+            return newLogger;\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return PersistentLogStoragePlugin.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public void configure(\n+            JSONObject pluginConfiguration,\n+            @NonNull Context context) {", "originalCommit": "eec029dd332eb8208991b95ce6296940e9c37b12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e535bf326e4c3d842c688e00add748afb80570c1", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\nindex 935db55f..b824dcf8 100644\n--- a/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\n\n@@ -67,9 +67,7 @@ public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n     }\n \n     @Override\n-    public void configure(\n-            JSONObject pluginConfiguration,\n-            @NonNull Context context) {\n+    public void configure(JSONObject pluginConfiguration, @NonNull Context context) {\n     }\n \n     @Nullable\n"}}, {"oid": "e535bf326e4c3d842c688e00add748afb80570c1", "url": "https://github.com/aws-amplify/amplify-android/commit/e535bf326e4c3d842c688e00add748afb80570c1", "message": "added equals and hashCode methods for LogEntry and LoggingPlugin", "committedDate": "2020-07-29T23:35:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0OTgxMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462649813", "bodyText": "Since some of these can be null, you risk throwing NullPointerException from this code. The ObjectsCompat.equals(foo, bar) performs a null-safe check, and will return true when both args are null.", "author": "jamesonwilliams", "createdAt": "2020-07-29T23:38:03Z", "path": "core/src/main/java/com/amplifyframework/devmenu/LogEntry.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.LogLevel;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry implements Comparable<LogEntry> {\n+    // The format for the log's date and time.\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+    private final LocalDateTime dateTime;\n+    private final String namespace;\n+    private final String message;\n+    private final Throwable throwable;\n+    private final LogLevel logLevel;\n+\n+    /**\n+     * Creates a new LogEntry representing a log with the given time, tag, message,\n+     * and throwable that was logged at the given level.\n+     * @param dateTime the date and time of the log.\n+     * @param namespace the namespace of the logger that emitted the log.\n+     * @param message the message for the log.\n+     * @param throwable the Throwable associated with the log.\n+     * @param logLevel the level the log was logged at.\n+     */\n+    public LogEntry(@NonNull LocalDateTime dateTime, @Nullable String namespace, @Nullable String message,\n+                    @Nullable Throwable throwable, @NonNull LogLevel logLevel) {\n+        this.dateTime = Objects.requireNonNull(dateTime);\n+        this.logLevel = Objects.requireNonNull(logLevel);\n+        this.namespace = namespace;\n+        this.message = message;\n+        this.throwable = throwable;\n+    }\n+\n+    /**\n+     * Gets the date and time of the log.\n+     * @return the date and time of the log.\n+     */\n+    public LocalDateTime getDateTime() {\n+        return dateTime;\n+    }\n+\n+    /**\n+     * Gets the namespace of the logger that emitted the log.\n+     * @return the namespace of the logger that emitted the log.\n+     */\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    /**\n+     * Gets the message for the log.\n+     * @return the message for the log.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Gets the throwable for the log.\n+     * @return the throwable for the log, or null if there is no throwable for the log.\n+     */\n+    public Throwable getThrowable() {\n+        return throwable;\n+    }\n+\n+    /**\n+     * Gets the level the log was logged at.\n+     * @return the level the log was logged at.\n+     */\n+    public LogLevel getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    @Override\n+    public int compareTo(LogEntry logEntry) {\n+        return getDateTime().compareTo(logEntry.getDateTime());\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        if (!(object instanceof LogEntry)) {\n+            return false;\n+        }\n+        LogEntry otherEntry = (LogEntry) object;\n+        return dateTime.equals(otherEntry.getDateTime()) && logLevel.equals(otherEntry.getLogLevel())\n+                && namespace.equals(otherEntry.getNamespace()) && message.equals(otherEntry.getMessage())\n+                && throwable.equals(otherEntry.getThrowable());", "originalCommit": "e535bf326e4c3d842c688e00add748afb80570c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96c4a2b8c379c583e60a4a785fce9db4a607ca5c", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java b/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\nindex 852c0ffa..bf30f435 100644\n--- a/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\n\n@@ -18,6 +18,7 @@ package com.amplifyframework.devmenu;\n import android.util.Log;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n \n import com.amplifyframework.logging.LogLevel;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MDYzMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462650633", "bodyText": "For both equals() and hashCode(), you can have the IDE generate them for you. There's a standard recipe for hashCode() in Java which involves offsetting individual component hash codes with a prime.\nIn Android Studio, right click in the main document of the LogEntry class, and click \"Generate...\" then select \"equals() and hashCode().\" For \"Template,\" I use \"IntelliJ Default.\" The next page will ask you which values can be null or non-null, and you can follow along with what you put in your constructor params.", "author": "jamesonwilliams", "createdAt": "2020-07-29T23:40:46Z", "path": "core/src/main/java/com/amplifyframework/devmenu/LogEntry.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.LogLevel;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry implements Comparable<LogEntry> {\n+    // The format for the log's date and time.\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+    private final LocalDateTime dateTime;\n+    private final String namespace;\n+    private final String message;\n+    private final Throwable throwable;\n+    private final LogLevel logLevel;\n+\n+    /**\n+     * Creates a new LogEntry representing a log with the given time, tag, message,\n+     * and throwable that was logged at the given level.\n+     * @param dateTime the date and time of the log.\n+     * @param namespace the namespace of the logger that emitted the log.\n+     * @param message the message for the log.\n+     * @param throwable the Throwable associated with the log.\n+     * @param logLevel the level the log was logged at.\n+     */\n+    public LogEntry(@NonNull LocalDateTime dateTime, @Nullable String namespace, @Nullable String message,\n+                    @Nullable Throwable throwable, @NonNull LogLevel logLevel) {\n+        this.dateTime = Objects.requireNonNull(dateTime);\n+        this.logLevel = Objects.requireNonNull(logLevel);\n+        this.namespace = namespace;\n+        this.message = message;\n+        this.throwable = throwable;\n+    }\n+\n+    /**\n+     * Gets the date and time of the log.\n+     * @return the date and time of the log.\n+     */\n+    public LocalDateTime getDateTime() {\n+        return dateTime;\n+    }\n+\n+    /**\n+     * Gets the namespace of the logger that emitted the log.\n+     * @return the namespace of the logger that emitted the log.\n+     */\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    /**\n+     * Gets the message for the log.\n+     * @return the message for the log.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Gets the throwable for the log.\n+     * @return the throwable for the log, or null if there is no throwable for the log.\n+     */\n+    public Throwable getThrowable() {\n+        return throwable;\n+    }\n+\n+    /**\n+     * Gets the level the log was logged at.\n+     * @return the level the log was logged at.\n+     */\n+    public LogLevel getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    @Override\n+    public int compareTo(LogEntry logEntry) {\n+        return getDateTime().compareTo(logEntry.getDateTime());\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        if (!(object instanceof LogEntry)) {\n+            return false;\n+        }\n+        LogEntry otherEntry = (LogEntry) object;\n+        return dateTime.equals(otherEntry.getDateTime()) && logLevel.equals(otherEntry.getLogLevel())\n+                && namespace.equals(otherEntry.getNamespace()) && message.equals(otherEntry.getMessage())\n+                && throwable.equals(otherEntry.getThrowable());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return dateTime.hashCode() + logLevel.hashCode() + namespace.hashCode() + message.hashCode()\n+                + throwable.hashCode();", "originalCommit": "e535bf326e4c3d842c688e00add748afb80570c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96c4a2b8c379c583e60a4a785fce9db4a607ca5c", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java b/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\nindex 852c0ffa..bf30f435 100644\n--- a/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/LogEntry.java\n\n@@ -18,6 +18,7 @@ package com.amplifyframework.devmenu;\n import android.util.Log;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n \n import com.amplifyframework.logging.LogLevel;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MDgyOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462650828", "bodyText": "return Immutable.of(logs) ?", "author": "jamesonwilliams", "createdAt": "2020-07-29T23:41:21Z", "path": "core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.Logger;\n+import com.amplifyframework.logging.LoggingCategoryBehavior;\n+import com.amplifyframework.logging.LoggingPlugin;\n+\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n+ */\n+public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    // Map from namespace to the PersistentLogger for that namespace.\n+    private final Map<String, PersistentLogger> loggers;\n+\n+    /**\n+     * Creates a new PersistentLogStoragePlugin.\n+     */\n+    public PersistentLogStoragePlugin() {\n+        loggers = new HashMap<>();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Logger forNamespace(@Nullable String namespace) {\n+        String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n+        PersistentLogger preExistingLogger = loggers.get(usedNamespace);\n+        if (preExistingLogger != null) {\n+            return preExistingLogger;\n+        } else {\n+            PersistentLogger newLogger = new PersistentLogger(usedNamespace);\n+            loggers.put(usedNamespace, newLogger);\n+            return newLogger;\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return PersistentLogStoragePlugin.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public void configure(JSONObject pluginConfiguration, @NonNull Context context) {\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Void getEscapeHatch() {\n+        return null;\n+    }\n+\n+    /**\n+     * Returns the logs stored by all of the {@link PersistentLogger}s\n+     * in order from oldest to newest in terms of timestamp.\n+     * @return a sorted list of LogEntry.\n+     */\n+    public List<LogEntry> getLogs() {\n+        List<LogEntry> logs = new ArrayList<>();\n+        for (PersistentLogger logger : loggers.values()) {\n+            logs.addAll(logger.getLogs());\n+        }\n+        Collections.sort(logs);\n+        return logs;", "originalCommit": "e535bf326e4c3d842c688e00add748afb80570c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96c4a2b8c379c583e60a4a785fce9db4a607ca5c", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\nindex b824dcf8..d3057c2e 100644\n--- a/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java\n\n@@ -22,6 +22,7 @@ import androidx.annotation.Nullable;\n import com.amplifyframework.logging.Logger;\n import com.amplifyframework.logging.LoggingCategoryBehavior;\n import com.amplifyframework.logging.LoggingPlugin;\n+import com.amplifyframework.util.Immutable;\n \n import org.json.JSONObject;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MDg5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462650890", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logs = new LinkedList<>();\n          \n          \n            \n                    this.logs = new LinkedList<>();", "author": "jamesonwilliams", "createdAt": "2020-07-29T23:41:35Z", "path": "core/src/main/java/com/amplifyframework/devmenu/PersistentLogger.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.LogLevel;\n+import com.amplifyframework.logging.Logger;\n+import com.amplifyframework.util.Immutable;\n+\n+import java.time.LocalDateTime;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * An implementation of {@link Logger} that stores logs.\n+ */\n+final class PersistentLogger implements Logger {\n+    // Maximum number of logs to store.\n+    private static final int MAX_NUM_LOGS = 500;\n+    // Namespace for this logger.\n+    private final String namespace;\n+    // The logs stored by this logger.\n+    private final List<LogEntry> logs;\n+\n+    PersistentLogger(@NonNull String namespace) {\n+        this.namespace = Objects.requireNonNull(namespace);\n+        logs = new LinkedList<>();", "originalCommit": "e535bf326e4c3d842c688e00add748afb80570c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96c4a2b8c379c583e60a4a785fce9db4a607ca5c", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/devmenu/PersistentLogger.java b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogger.java\nindex 2e37fd6c..fab107f4 100644\n--- a/core/src/main/java/com/amplifyframework/devmenu/PersistentLogger.java\n+++ b/core/src/main/java/com/amplifyframework/devmenu/PersistentLogger.java\n\n@@ -41,7 +41,7 @@ final class PersistentLogger implements Logger {\n \n     PersistentLogger(@NonNull String namespace) {\n         this.namespace = Objects.requireNonNull(namespace);\n-        logs = new LinkedList<>();\n+        this.logs = new LinkedList<>();\n     }\n \n     @NonNull\n"}}, {"oid": "96c4a2b8c379c583e60a4a785fce9db4a607ca5c", "url": "https://github.com/aws-amplify/amplify-android/commit/96c4a2b8c379c583e60a4a785fce9db4a607ca5c", "message": "changed equals and hashCode implementations in LogEntry", "committedDate": "2020-07-30T14:35:05Z", "type": "commit"}]}