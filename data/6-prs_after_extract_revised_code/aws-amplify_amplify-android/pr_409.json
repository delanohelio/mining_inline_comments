{"pr_number": 409, "pr_title": "Implement online text detection ", "pr_createdAt": "2020-04-29T00:07:37Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/409", "timeline": [{"oid": "86fc93c9cd733425811946a703f664c06348150b", "url": "https://github.com/aws-amplify/amplify-android/commit/86fc93c9cd733425811946a703f664c06348150b", "message": "Implement online text detection", "committedDate": "2020-04-28T07:35:14Z", "type": "commit"}, {"oid": "a0dc49fb735120992d56850c821515c5ca06562d", "url": "https://github.com/aws-amplify/amplify-android/commit/a0dc49fb735120992d56850c821515c5ca06562d", "message": "Merge identify request types", "committedDate": "2020-04-28T18:28:44Z", "type": "commit"}, {"oid": "4894548899bfe14784cbcb84443337b5c1dc95dd", "url": "https://github.com/aws-amplify/amplify-android/commit/4894548899bfe14784cbcb84443337b5c1dc95dd", "message": "Trim texts", "committedDate": "2020-04-28T20:46:24Z", "type": "commit"}, {"oid": "a5332b80c576ff2d1909a96c0508ee574f8e5a04", "url": "https://github.com/aws-amplify/amplify-android/commit/a5332b80c576ff2d1909a96c0508ee574f8e5a04", "message": "Fix key-value", "committedDate": "2020-04-29T00:03:14Z", "type": "commit"}, {"oid": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "url": "https://github.com/aws-amplify/amplify-android/commit/92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "message": "Add tests for text detection", "committedDate": "2020-04-29T00:03:44Z", "type": "commit"}, {"oid": "1eb173b397ca6e4110688d5d6663d1ea7cb1f600", "url": "https://github.com/aws-amplify/amplify-android/commit/1eb173b397ca6e4110688d5d6663d1ea7cb1f600", "message": "Minor refactor", "committedDate": "2020-04-29T18:27:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NDAxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417494019", "bodyText": "I would include the input arguments in the message,\nAssert.fail(\"Expected value \" + expectedValue + \" was not found on any features: \" + actual);", "author": "jamesonwilliams", "createdAt": "2020-04-29T17:39:25Z", "path": "testutils/src/main/java/com/amplifyframework/testutils/FeatureAssert.java", "diffHunk": "@@ -58,4 +58,22 @@ private FeatureAssert() {}\n             assertMatches(expectedIterator.next(), actualIterator.next());\n         }\n     }\n+\n+    /**\n+     * Assert at least one of the features contains the expected value.\n+     * @param expectedValue the feature value expected to be found in the list\n+     * @param actual the list of actual features\n+     * @param <F> the data type of the feature\n+     * @param <T> the data type of the value of the feature\n+     */\n+    public static <F extends Feature<T>, T> void assertContains(T expectedValue, Collection<F> actual) {\n+        Assert.assertNotNull(expectedValue);\n+        Assert.assertNotNull(actual);\n+        for (F feature : actual) {\n+            if (expectedValue.equals(feature.getValue())) {\n+                return;\n+            }\n+        }\n+        Assert.fail(\"Collection does not contain expected feature element.\");", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4ODg2MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417788861", "bodyText": "I like that more. thank you", "author": "raphkim", "createdAt": "2020-04-30T06:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NDAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/testutils/src/main/java/com/amplifyframework/testutils/FeatureAssert.java b/testutils/src/main/java/com/amplifyframework/testutils/FeatureAssert.java\nindex 8b58ad2e..79388b12 100644\n--- a/testutils/src/main/java/com/amplifyframework/testutils/FeatureAssert.java\n+++ b/testutils/src/main/java/com/amplifyframework/testutils/FeatureAssert.java\n\n@@ -74,6 +74,6 @@ public final class FeatureAssert {\n                 return;\n             }\n         }\n-        Assert.fail(\"Collection does not contain expected feature element.\");\n+        Assert.fail(\"Expected value \" + expectedValue + \" was not found among any features: \" + actual);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NDg2MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417494861", "bodyText": "A selection can have both a box and a polygon? Hm.", "author": "jamesonwilliams", "createdAt": "2020-04-29T17:40:52Z", "path": "core/src/main/java/com/amplifyframework/predictions/models/Selection.java", "diffHunk": "@@ -86,4 +62,65 @@ public Polygon getPolygon() {\n     public boolean isSelected() {\n         return selected;\n     }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    public static final class Builder {", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4ODcwMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417788702", "bodyText": "Apparently yes! AWS provides both shapes so that polygon can define a finer shape WITHIN the provided bounding box.", "author": "raphkim", "createdAt": "2020-04-30T06:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NDg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc5Mzk5Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417793992", "bodyText": "Haha ah gee, alright.", "author": "jamesonwilliams", "createdAt": "2020-04-30T06:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NDg2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "10e62cc97b33da97edb19e89ab5eb0b7f5c5c62e", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/predictions/models/Selection.java b/core/src/main/java/com/amplifyframework/predictions/models/Selection.java\nindex d2fdd25d..cd317a10 100644\n--- a/core/src/main/java/com/amplifyframework/predictions/models/Selection.java\n+++ b/core/src/main/java/com/amplifyframework/predictions/models/Selection.java\n\n@@ -67,6 +67,9 @@ public final class Selection {\n         return new Builder();\n     }\n \n+    /**\n+     * Builder for {@link Selection}.\n+     */\n     public static final class Builder {\n         private RectF box;\n         private Polygon polygon;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NTEyMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417495121", "bodyText": "\"the document\" ... which document?", "author": "jamesonwilliams", "createdAt": "2020-04-29T17:41:18Z", "path": "core/src/main/java/com/amplifyframework/predictions/models/IdentifiedText.java", "diffHunk": "@@ -49,13 +49,23 @@ public String getText() {\n     }\n \n     /**\n-     * Gets the page value.\n-     * @return the page\n+     * Gets the page of the document in which this text was", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc5MTg3NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417791874", "bodyText": "Further elaborated. The sneaking suspicion is that this is actually an unnecessary property that was defined simply because Textract provides this value. It doesn't seem to be applicable to other potential types of implementation", "author": "raphkim", "createdAt": "2020-04-30T06:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NTEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/predictions/models/IdentifiedText.java b/core/src/main/java/com/amplifyframework/predictions/models/IdentifiedText.java\nindex 2793634c..643b59ba 100644\n--- a/core/src/main/java/com/amplifyframework/predictions/models/IdentifiedText.java\n+++ b/core/src/main/java/com/amplifyframework/predictions/models/IdentifiedText.java\n\n@@ -49,8 +49,9 @@ public final class IdentifiedText extends ImageFeature<String> {\n     }\n \n     /**\n-     * Gets the page of the document in which this text was\n-     * detected.\n+     * In the case that multiple pages of documents are\n+     * detected from a given image, this returns the page\n+     * value in which this text was identified.\n      * Defaults to 0.\n      * @return the page of the document\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUwMjEyNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417502126", "bodyText": "Any way to shorten / decompose this method? It does a lot.\nMaybe the switch can just delegate to helper methods, like addIdentifiedText(..)?\nL153-157, you probably don't need to cache these, you could just build them in the helper methods even if you do it twice as often.\nCan you use a single IdentifyTextResult.Builder instance to store all of these values, instead of needing L138-148 as temps? That is, use the builder as a temp?\nLastly: even within your existing switch, try to be frugal with line counts (the switch is tall.) For example,\n                SelectionStatus status = SelectionStatus.fromValue(block.getSelectionStatus());\n                boolean isSelected = SelectionStatus.SELECTED.equals(status);\n                Selection selection = Selection.builder()\n                        .box(box)\n                        .polygon(polygon)\n                        .selected(isSelected)\n                        .build();\n                selections.add(selection);\n\nCan be:\n                selections.add(Selection.builder()\n                        .box(box)\n                        .polygon(polygon)\n                        .selected(SelectionStatus.SELECTED.toString().equals(block.getSelectionStatus()))\n                        .build());\n\nIn isolation, 5 lines down from 8 isn't a big win. But if you can achieve similar results throughout the method body, it will end up getting to be 62.5% as long.", "author": "jamesonwilliams", "createdAt": "2020-04-29T17:52:17Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSTextractService.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.service;\n+\n+import android.graphics.RectF;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.AWSPredictionsPluginConfiguration;\n+import com.amplifyframework.predictions.aws.adapter.IdentifyTextResultTransformers;\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.IdentifiedText;\n+import com.amplifyframework.predictions.models.Polygon;\n+import com.amplifyframework.predictions.models.Selection;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.predictions.models.TextFormatType;\n+import com.amplifyframework.predictions.result.IdentifyDocumentTextResult;\n+import com.amplifyframework.predictions.result.IdentifyResult;\n+import com.amplifyframework.util.UserAgent;\n+\n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.services.textract.AmazonTextractClient;\n+import com.amazonaws.services.textract.model.AnalyzeDocumentRequest;\n+import com.amazonaws.services.textract.model.AnalyzeDocumentResult;\n+import com.amazonaws.services.textract.model.Block;\n+import com.amazonaws.services.textract.model.BlockType;\n+import com.amazonaws.services.textract.model.DetectDocumentTextRequest;\n+import com.amazonaws.services.textract.model.DetectDocumentTextResult;\n+import com.amazonaws.services.textract.model.Document;\n+import com.amazonaws.services.textract.model.FeatureType;\n+import com.amazonaws.services.textract.model.Geometry;\n+import com.amazonaws.services.textract.model.SelectionStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Predictions service for performing text translation.\n+ */\n+final class AWSTextractService {\n+    private final AmazonTextractClient textract;\n+    private final AWSPredictionsPluginConfiguration pluginConfiguration;\n+\n+    AWSTextractService(@NonNull AWSPredictionsPluginConfiguration pluginConfiguration) {\n+        this.textract = createTextractClient();\n+        this.pluginConfiguration = pluginConfiguration;\n+    }\n+\n+    private AmazonTextractClient createTextractClient() {\n+        AWSCredentialsProvider credentialsProvider = AWSMobileClient.getInstance();\n+        ClientConfiguration configuration = new ClientConfiguration();\n+        configuration.setUserAgent(UserAgent.string());\n+        return new AmazonTextractClient(credentialsProvider, configuration);\n+    }\n+\n+    void detectDocumentText(\n+            @NonNull TextFormatType type,\n+            @NonNull Document document,\n+            @NonNull Consumer<IdentifyResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        List<String> features = new ArrayList<>();\n+        if (TextFormatType.FORM.equals(type) || TextFormatType.ALL.equals(type)) {\n+            features.add(FeatureType.FORMS.toString());\n+        }\n+        if (TextFormatType.TABLE.equals(type) || TextFormatType.ALL.equals(type)) {\n+            features.add(FeatureType.TABLES.toString());\n+        }\n+\n+        try {\n+            onSuccess.accept(analyzeDocument(document, features));\n+        } catch (PredictionsException exception) {\n+            onError.accept(exception);\n+        }\n+    }\n+\n+    private IdentifyDocumentTextResult detectDocumentText(Document document) throws PredictionsException {\n+        DetectDocumentTextRequest request = new DetectDocumentTextRequest()\n+                .withDocument(document);\n+\n+        // Extract text from given image via Amazon Textract\n+        final DetectDocumentTextResult result;\n+        try {\n+            result = textract.detectDocumentText(request);\n+        } catch (AmazonClientException serviceException) {\n+            throw new PredictionsException(\n+                    \"AWS Textract encountered an error while detecting document text.\",\n+                    serviceException, \"See attached service exception for more details.\"\n+            );\n+        }\n+\n+        return processTextractBlocks(result.getBlocks());\n+    }\n+\n+    private IdentifyDocumentTextResult analyzeDocument(\n+            Document document,\n+            List<String> features\n+    ) throws PredictionsException {\n+        AnalyzeDocumentRequest request = new AnalyzeDocumentRequest()\n+                .withDocument(document)\n+                .withFeatureTypes(features);\n+\n+        // Analyze document from given image via Amazon Textract\n+        final AnalyzeDocumentResult result;\n+        try {\n+            result = textract.analyzeDocument(request);\n+        } catch (AmazonClientException serviceException) {\n+            throw new PredictionsException(\n+                    \"AWS Textract encountered an error while analyzing document.\",\n+                    serviceException, \"See attached service exception for more details.\"\n+            );\n+        }\n+\n+        return processTextractBlocks(result.getBlocks());\n+    }\n+\n+    private IdentifyDocumentTextResult processTextractBlocks(List<Block> blocks) {", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgxMTI0Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417811242", "bodyText": "Fixed!", "author": "raphkim", "createdAt": "2020-04-30T07:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUwMjEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSTextractService.java b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSTextractService.java\nindex 8e5eb87c..90f37d30 100644\n--- a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSTextractService.java\n+++ b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSTextractService.java\n\n@@ -15,16 +15,14 @@\n \n package com.amplifyframework.predictions.aws.service;\n \n-import android.graphics.RectF;\n import androidx.annotation.NonNull;\n \n import com.amplifyframework.core.Consumer;\n import com.amplifyframework.predictions.PredictionsException;\n import com.amplifyframework.predictions.aws.AWSPredictionsPluginConfiguration;\n-import com.amplifyframework.predictions.aws.adapter.IdentifyTextResultTransformers;\n+import com.amplifyframework.predictions.aws.adapter.TextractResultTransformers;\n import com.amplifyframework.predictions.models.BoundedKeyValue;\n import com.amplifyframework.predictions.models.IdentifiedText;\n-import com.amplifyframework.predictions.models.Polygon;\n import com.amplifyframework.predictions.models.Selection;\n import com.amplifyframework.predictions.models.Table;\n import com.amplifyframework.predictions.models.TextFormatType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUwMzg5Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417503897", "bodyText": "Oh yea, I forgot this was in androidx.core.util. We should probably use this thing through-out our codebase more than we do.", "author": "jamesonwilliams", "createdAt": "2020-04-29T17:54:58Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import androidx.core.util.Pair;", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java b/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\nindex f1920434..057a6c4b 100644\n--- a/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\n+++ b/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\n\n@@ -74,10 +74,11 @@ public final class AWSPredictionsIdentifyTextTest {\n      * If {@link IdentifyActionType#DETECT_TEXT} is supplied instead of\n      * {@link TextFormatType} as the action type for identify, then the operation\n      * triggers error callback.\n-     * @throws Exception if prediction fails\n+     * @throws PredictionsException if prediction fails.\n+     *          this test will throw due to invalid identify action type.\n      */\n     @Test(expected = PredictionsException.class)\n-    public void testUnspecificTextFormatDetectionTypeFails() throws Exception {\n+    public void testUnspecificTextFormatDetectionTypeFails() throws PredictionsException {\n         IdentifyActionType type = IdentifyActionType.DETECT_TEXT;\n         final Bitmap image = Assets.readAsBitmap(\"sample-table.png\");\n         predictions.identify(type, image);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUwNzg1Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417507853", "bodyText": "After reading them, this isn't actually true of the test below, right?", "author": "jamesonwilliams", "createdAt": "2020-04-29T18:01:06Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import androidx.core.util.Pair;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.Cell;\n+import com.amplifyframework.predictions.models.IdentifyActionType;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.predictions.models.TextFormatType;\n+import com.amplifyframework.predictions.result.IdentifyDocumentTextResult;\n+import com.amplifyframework.predictions.result.IdentifyTextResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.FeatureAssert;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+import com.amplifyframework.util.CollectionUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * text detection result for valid input.", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgxMzI2Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417813262", "bodyText": "Hmm, I would consider IdentifyActionType#DETECT_TEXT an invalid input, so it would still be a true statement. It just isn't a very descriptive of a javadoc haha", "author": "raphkim", "createdAt": "2020-04-30T07:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUwNzg1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java b/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\nindex f1920434..057a6c4b 100644\n--- a/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\n+++ b/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\n\n@@ -74,10 +74,11 @@ public final class AWSPredictionsIdentifyTextTest {\n      * If {@link IdentifyActionType#DETECT_TEXT} is supplied instead of\n      * {@link TextFormatType} as the action type for identify, then the operation\n      * triggers error callback.\n-     * @throws Exception if prediction fails\n+     * @throws PredictionsException if prediction fails.\n+     *          this test will throw due to invalid identify action type.\n      */\n     @Test(expected = PredictionsException.class)\n-    public void testUnspecificTextFormatDetectionTypeFails() throws Exception {\n+    public void testUnspecificTextFormatDetectionTypeFails() throws PredictionsException {\n         IdentifyActionType type = IdentifyActionType.DETECT_TEXT;\n         final Bitmap image = Assets.readAsBitmap(\"sample-table.png\");\n         predictions.identify(type, image);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUwOTI3MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417509271", "bodyText": "throws Exception is bad here. One of the exceptions that be thrown is a \"good thing\". You expect and require an PredictionsException. Other types (RuntimeException from the arrangement step) are a bad thing and constitute a failure of the test harness to arrange preconditions, sufficient for the test.\nTLDR: change throws Exception to throws PredictionException and make better use of the @throws\n(Same for all)", "author": "jamesonwilliams", "createdAt": "2020-04-29T18:03:30Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import androidx.core.util.Pair;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.Cell;\n+import com.amplifyframework.predictions.models.IdentifyActionType;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.predictions.models.TextFormatType;\n+import com.amplifyframework.predictions.result.IdentifyDocumentTextResult;\n+import com.amplifyframework.predictions.result.IdentifyTextResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.FeatureAssert;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+import com.amplifyframework.util.CollectionUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * text detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyTextTest {\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * If {@link IdentifyActionType#DETECT_TEXT} is supplied instead of\n+     * {@link TextFormatType} as the action type for identify, then the operation\n+     * triggers error callback.\n+     * @throws Exception if prediction fails", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java b/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\nindex f1920434..057a6c4b 100644\n--- a/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\n+++ b/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\n\n@@ -74,10 +74,11 @@ public final class AWSPredictionsIdentifyTextTest {\n      * If {@link IdentifyActionType#DETECT_TEXT} is supplied instead of\n      * {@link TextFormatType} as the action type for identify, then the operation\n      * triggers error callback.\n-     * @throws Exception if prediction fails\n+     * @throws PredictionsException if prediction fails.\n+     *          this test will throw due to invalid identify action type.\n      */\n     @Test(expected = PredictionsException.class)\n-    public void testUnspecificTextFormatDetectionTypeFails() throws Exception {\n+    public void testUnspecificTextFormatDetectionTypeFails() throws PredictionsException {\n         IdentifyActionType type = IdentifyActionType.DETECT_TEXT;\n         final Bitmap image = Assets.readAsBitmap(\"sample-table.png\");\n         predictions.identify(type, image);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMTc1Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417511753", "bodyText": "Why not assert the contents of the full text?\nThis test could basically look like:\nBitmap arrangedImage = Assets.readAsBitmap(\"sample-table.png\");\nString expectedTextInImage = Assets.readAsString(\"sample-table-expected-text.txt\");\nString actualTextInImage = ((IdentifyTextResult) predictions.identify(TextFormat.PLAIN, image)).getFullText();\nassertEquals(expectedTestInImage, actualTextInImage);\n\nsample-table.png ... Can we do a better name for this? aws-predictions-document-containing-text.png?", "author": "jamesonwilliams", "createdAt": "2020-04-29T18:07:56Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import androidx.core.util.Pair;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.Cell;\n+import com.amplifyframework.predictions.models.IdentifyActionType;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.predictions.models.TextFormatType;\n+import com.amplifyframework.predictions.result.IdentifyDocumentTextResult;\n+import com.amplifyframework.predictions.result.IdentifyTextResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.FeatureAssert;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+import com.amplifyframework.util.CollectionUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * text detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyTextTest {\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * If {@link IdentifyActionType#DETECT_TEXT} is supplied instead of\n+     * {@link TextFormatType} as the action type for identify, then the operation\n+     * triggers error callback.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testUnspecificTextFormatDetectionTypeFails() throws Exception {\n+        IdentifyActionType type = IdentifyActionType.DETECT_TEXT;\n+        final Bitmap image = Assets.readAsBitmap(\"sample-table.png\");\n+        predictions.identify(type, image);\n+    }\n+\n+    /**\n+     * Assert plain text detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyPlainText() throws Exception {\n+        final Bitmap image = Assets.readAsBitmap(\"sample-table.png\");\n+\n+        // Identify the text inside given image and assert non-null result.\n+        IdentifyTextResult result =\n+                (IdentifyTextResult) predictions.identify(TextFormatType.PLAIN, image);\n+        assertNotNull(result);\n+        assertNotNull(result.getFullText());", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3MTMxMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417871310", "bodyText": "Reminder to address this @raphkim", "author": "raphkim", "createdAt": "2020-04-30T09:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMTc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMDI2OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r418930268", "bodyText": "It is literally a piece of document that contains an arbitrary table and some text haha. I just happen to be using it for both tables detection and plain text detection for testing. I will definitely add expected text to compare against in the assets folder.", "author": "raphkim", "createdAt": "2020-05-02T08:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMTc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java b/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\nindex f1920434..057a6c4b 100644\n--- a/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\n+++ b/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\n\n@@ -74,10 +74,11 @@ public final class AWSPredictionsIdentifyTextTest {\n      * If {@link IdentifyActionType#DETECT_TEXT} is supplied instead of\n      * {@link TextFormatType} as the action type for identify, then the operation\n      * triggers error callback.\n-     * @throws Exception if prediction fails\n+     * @throws PredictionsException if prediction fails.\n+     *          this test will throw due to invalid identify action type.\n      */\n     @Test(expected = PredictionsException.class)\n-    public void testUnspecificTextFormatDetectionTypeFails() throws Exception {\n+    public void testUnspecificTextFormatDetectionTypeFails() throws PredictionsException {\n         IdentifyActionType type = IdentifyActionType.DETECT_TEXT;\n         final Bitmap image = Assets.readAsBitmap(\"sample-table.png\");\n         predictions.identify(type, image);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNDQ2Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417514466", "bodyText": "Pair.create(\"Name: \", \"Jane Doe\") skips the ugle new and <> .\nThese results are split by tab? Or space? Why not ':'? Does the user have a way to split on ':'?\nThe result the user wanted here would have either been:\n\"Name : \\\"Jane Doe\\\"\"\n\nSo they can easily parse it themselves according to their own business rules, or\nPair.create(\"Name\", \"Jane Doe\")\n\nfully parsed, and without the ':' token.", "author": "jamesonwilliams", "createdAt": "2020-04-29T18:12:37Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import androidx.core.util.Pair;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.Cell;\n+import com.amplifyframework.predictions.models.IdentifyActionType;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.predictions.models.TextFormatType;\n+import com.amplifyframework.predictions.result.IdentifyDocumentTextResult;\n+import com.amplifyframework.predictions.result.IdentifyTextResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.FeatureAssert;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+import com.amplifyframework.util.CollectionUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * text detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyTextTest {\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * If {@link IdentifyActionType#DETECT_TEXT} is supplied instead of\n+     * {@link TextFormatType} as the action type for identify, then the operation\n+     * triggers error callback.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testUnspecificTextFormatDetectionTypeFails() throws Exception {\n+        IdentifyActionType type = IdentifyActionType.DETECT_TEXT;\n+        final Bitmap image = Assets.readAsBitmap(\"sample-table.png\");\n+        predictions.identify(type, image);\n+    }\n+\n+    /**\n+     * Assert plain text detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyPlainText() throws Exception {\n+        final Bitmap image = Assets.readAsBitmap(\"sample-table.png\");\n+\n+        // Identify the text inside given image and assert non-null result.\n+        IdentifyTextResult result =\n+                (IdentifyTextResult) predictions.identify(TextFormatType.PLAIN, image);\n+        assertNotNull(result);\n+        assertNotNull(result.getFullText());\n+    }\n+\n+    /**\n+     * Assert table detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyTables() throws Exception {\n+        final Bitmap image = Assets.readAsBitmap(\"sample-table.png\");\n+\n+        // Identify the text inside given image and assert non-null result.\n+        IdentifyDocumentTextResult result =\n+                (IdentifyDocumentTextResult) predictions.identify(TextFormatType.TABLE, image);\n+        assertNotNull(result);\n+\n+        // Assert that one table is detected.\n+        List<Table> tables = result.getTables();\n+        assertFalse(CollectionUtils.isNullOrEmpty(tables));\n+        assertEquals(1, tables.size());\n+\n+        // Assert that table has correct dimensions.\n+        Table table = tables.get(0);\n+        assertEquals(2, table.getRowSize());\n+        assertEquals(2, table.getColumnSize());\n+\n+        // Assert that table has correct cells.\n+        List<Cell> cells = table.getCells();\n+        assertEquals(4, cells.size());\n+        FeatureAssert.assertContains(\"Name\", cells);\n+        FeatureAssert.assertContains(\"Address\", cells);\n+        FeatureAssert.assertContains(\"Ana Carolina\", cells);\n+        FeatureAssert.assertContains(\"123 Any Town\", cells);\n+    }\n+\n+    /**\n+     * Assert form detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyForms() throws Exception {\n+        final Bitmap image = Assets.readAsBitmap(\"sample-form.png\");\n+\n+        // Identify the text inside given image and assert non-null result.\n+        IdentifyDocumentTextResult result =\n+                (IdentifyDocumentTextResult) predictions.identify(TextFormatType.FORM, image);\n+\n+        // Assert that four key-values are detected.\n+        List<BoundedKeyValue> keyValues = result.getKeyValues();\n+        assertFalse(CollectionUtils.isNullOrEmpty(keyValues));\n+        assertEquals(4, keyValues.size());\n+\n+        // Assert that key-value pairs have correct values.\n+        FeatureAssert.assertContains(new Pair<>(\"Name:\", \"Jane Doe\"), keyValues);", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgzMDkwOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417830909", "bodyText": "Pair.create(\"Name: \", \"Jane Doe\") skips the ugle new and <> .\n\nThis is a game changer\n\nThese results are split by tab? Or space? Why not ':'? Does the user have a way to split on ':'?\n\nThis is the output of AWS Textract, so I have no control over this :/", "author": "raphkim", "createdAt": "2020-04-30T08:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNDQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java b/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\nindex f1920434..057a6c4b 100644\n--- a/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\n+++ b/aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyTextTest.java\n\n@@ -74,10 +74,11 @@ public final class AWSPredictionsIdentifyTextTest {\n      * If {@link IdentifyActionType#DETECT_TEXT} is supplied instead of\n      * {@link TextFormatType} as the action type for identify, then the operation\n      * triggers error callback.\n-     * @throws Exception if prediction fails\n+     * @throws PredictionsException if prediction fails.\n+     *          this test will throw due to invalid identify action type.\n      */\n     @Test(expected = PredictionsException.class)\n-    public void testUnspecificTextFormatDetectionTypeFails() throws Exception {\n+    public void testUnspecificTextFormatDetectionTypeFails() throws PredictionsException {\n         IdentifyActionType type = IdentifyActionType.DETECT_TEXT;\n         final Bitmap image = Assets.readAsBitmap(\"sample-table.png\");\n         predictions.identify(type, image);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNjkxOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417516918", "bodyText": "Elsewhere in the PR, you store a Polygon and a RectF next to eachother. Can you just store a Polygon, and then have some utility methods to convert back and forth to a RectF?\nfinal class Rectangle {\n    private Rectangle() {}\n\n    static boolean isRectangle(Polygon polgyon) {\n        //\n    }\n\n    static RectF toRectF(Polygon polygon) {\n        ...\n    }\n\n    static Polygon toPolygon(RectF rectangle) {\n    }\n\n    static boolean isPolygon(RectF rectangle) {\n        return true; // \ud83d\ude0e\n    }\n}\n\n^ Not sold on this being called Rectangle, and you probably don't need all of these. But hopefully I conveyed the idea.", "author": "jamesonwilliams", "createdAt": "2020-04-29T18:16:41Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyEntitiesResultTransformers.java", "diffHunk": "@@ -56,15 +61,40 @@ public static RectF fromBoundingBox(@NonNull BoundingBox box) {\n         );\n     }\n \n+    /**\n+     * Converts geometric polygon from Amazon Rekognition into\n+     * Amplify-compatible polygon object.\n+     * @param polygon the polygon object by Amazon Rekognition\n+     * @return the polygon object representing vertices\n+     */\n+    @Nullable\n+    public static Polygon fromPoints(@Nullable List<Point> polygon) {", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgzMTY5NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417831694", "bodyText": "Platform parity with iOS! They treat Rect and Polygon separately, likely because the AWS backend does as well.", "author": "raphkim", "createdAt": "2020-04-30T08:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNjkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyEntitiesResultTransformers.java b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/RekognitionResultTransformers.java\nsimilarity index 83%\nrename from aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyEntitiesResultTransformers.java\nrename to aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/RekognitionResultTransformers.java\nindex 00fdcd53..85fc8e87 100644\n--- a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyEntitiesResultTransformers.java\n+++ b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/RekognitionResultTransformers.java\n\n@@ -98,6 +100,25 @@ public final class IdentifyEntitiesResultTransformers {\n         return new Pose(pose.getPitch(), pose.getRoll(), pose.getYaw());\n     }\n \n+    /**\n+     * Converts {@link TextDetection} from Amazon Rekognition into Amplify-\n+     * compatible text identification data.\n+     * @param text the detected text data\n+     * @return the Amplify feature with detected text\n+     */\n+    @Nullable\n+    public static IdentifiedText fromTextDetection(@Nullable TextDetection text) {\n+        if (text == null) {\n+            return null;\n+        }\n+        return IdentifiedText.builder()\n+                .text(text.getDetectedText())\n+                .confidence(text.getConfidence())\n+                .box(fromBoundingBox(text.getGeometry().getBoundingBox()))\n+                .polygon(fromPoints(text.getGeometry().getPolygon()))\n+                .build();\n+    }\n+\n     /**\n      * Converts a list of {@link com.amazonaws.services.rekognition.model.Landmark}\n      * from Amazon Rekognition into Amplify-compatible list of\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNzk1Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417517957", "bodyText": "buildTable ? process in what way?", "author": "jamesonwilliams", "createdAt": "2020-04-29T18:18:32Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import android.graphics.PointF;\n+import android.graphics.RectF;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.Cell;\n+import com.amplifyframework.predictions.models.Polygon;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.util.CollectionUtils;\n+\n+import com.amazonaws.services.textract.model.Block;\n+import com.amazonaws.services.textract.model.BlockType;\n+import com.amazonaws.services.textract.model.BoundingBox;\n+import com.amazonaws.services.textract.model.EntityType;\n+import com.amazonaws.services.textract.model.Point;\n+import com.amazonaws.services.textract.model.Relationship;\n+import com.amazonaws.services.textract.model.SelectionStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility class to transform Amazon service-specific\n+ * models to be compatible with AWS Amplify.\n+ */\n+public final class IdentifyTextResultTransformers {\n+    private IdentifyTextResultTransformers() {}\n+\n+    /**\n+     * Converts bounding box geometry from Amazon Rekognition into\n+     * Android's graphic {@link RectF} object for Amplify\n+     * compatibility.\n+     * @param box the bounding box provided by Amazon Rekognition\n+     * @return the RectF object representing the same dimensions\n+     */\n+    @Nullable\n+    public static RectF fromBoundingBox(@Nullable BoundingBox box) {\n+        if (box == null) {\n+            return null;\n+        }\n+        return new RectF(\n+                box.getLeft(),\n+                box.getTop(),\n+                box.getLeft() + box.getWidth(),\n+                box.getTop() + box.getHeight()\n+        );\n+    }\n+\n+\n+    /**\n+     * Converts geometric polygon from Amazon Textract into\n+     * Amplify-compatible polygon object.\n+     * @param polygon the polygon object by Amazon Textract\n+     * @return the polygon object representing vertices\n+     */\n+    @Nullable\n+    public static Polygon fromPoints(@Nullable List<Point> polygon) {\n+        if (CollectionUtils.isNullOrEmpty(polygon)) {\n+            return null;\n+        }\n+        List<PointF> points = new ArrayList<>();\n+        for (Point point : polygon) {\n+            PointF androidPoint = new PointF(\n+                    point.getX(),\n+                    point.getY()\n+            );\n+            points.add(androidPoint);\n+        }\n+        return Polygon.fromPoints(points);\n+    }\n+\n+    /**\n+     * Converts a given Amazon Textract block into Amplify-compatible\n+     * table object. Returns null if not a valid table.\n+     * @param block Textract text block\n+     * @param blockMap map of Textract blocks by their IDs\n+     * @return Amplify Table instance\n+     */\n+    @Nullable\n+    public static Table processTable(@NonNull Block block, @NonNull Map<String, Block> blockMap) {", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3MTA0MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417871041", "bodyText": "Renaming to fetchTable\nprocess was originally borrowed from iOS utility class", "author": "raphkim", "createdAt": "2020-04-30T09:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNzk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1eb173b397ca6e4110688d5d6663d1ea7cb1f600", "chunk": "diff --git a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java\nindex fc751fc4..9a0177b0 100644\n--- a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java\n+++ b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java\n\n@@ -115,17 +115,11 @@ public final class IdentifyTextResultTransformers {\n         Set<Integer> rows = new HashSet<>();\n         Set<Integer> cols = new HashSet<>();\n         // Each TABLE block contains CELL blocks\n-        for (Relationship relationship : block.getRelationships()) {\n-            for (String cellId : relationship.getIds()) {\n-                Block cellBlock = blockMap.get(cellId);\n-                if (cellBlock == null) {\n-                    continue;\n-                }\n-                rows.add(cellBlock.getRowIndex() - 1);\n-                cols.add(cellBlock.getColumnIndex() - 1);\n-                cells.add(processTableCell(cellBlock, blockMap));\n-            }\n-        }\n+        doForEachRelatedBlock(block, blockMap, cellBlock -> {\n+            rows.add(cellBlock.getRowIndex() - 1);\n+            cols.add(cellBlock.getColumnIndex() - 1);\n+            cells.add(processTableCell(cellBlock, blockMap));\n+        });\n \n         return Table.builder()\n                 .cells(cells)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxODQ1NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417518455", "bodyText": "toKeyValue (since you use from in other places, its similar language) or... createKeyValue (more standard factory naming with the verb)?", "author": "jamesonwilliams", "createdAt": "2020-04-29T18:19:23Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import android.graphics.PointF;\n+import android.graphics.RectF;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.Cell;\n+import com.amplifyframework.predictions.models.Polygon;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.util.CollectionUtils;\n+\n+import com.amazonaws.services.textract.model.Block;\n+import com.amazonaws.services.textract.model.BlockType;\n+import com.amazonaws.services.textract.model.BoundingBox;\n+import com.amazonaws.services.textract.model.EntityType;\n+import com.amazonaws.services.textract.model.Point;\n+import com.amazonaws.services.textract.model.Relationship;\n+import com.amazonaws.services.textract.model.SelectionStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility class to transform Amazon service-specific\n+ * models to be compatible with AWS Amplify.\n+ */\n+public final class IdentifyTextResultTransformers {\n+    private IdentifyTextResultTransformers() {}\n+\n+    /**\n+     * Converts bounding box geometry from Amazon Rekognition into\n+     * Android's graphic {@link RectF} object for Amplify\n+     * compatibility.\n+     * @param box the bounding box provided by Amazon Rekognition\n+     * @return the RectF object representing the same dimensions\n+     */\n+    @Nullable\n+    public static RectF fromBoundingBox(@Nullable BoundingBox box) {\n+        if (box == null) {\n+            return null;\n+        }\n+        return new RectF(\n+                box.getLeft(),\n+                box.getTop(),\n+                box.getLeft() + box.getWidth(),\n+                box.getTop() + box.getHeight()\n+        );\n+    }\n+\n+\n+    /**\n+     * Converts geometric polygon from Amazon Textract into\n+     * Amplify-compatible polygon object.\n+     * @param polygon the polygon object by Amazon Textract\n+     * @return the polygon object representing vertices\n+     */\n+    @Nullable\n+    public static Polygon fromPoints(@Nullable List<Point> polygon) {\n+        if (CollectionUtils.isNullOrEmpty(polygon)) {\n+            return null;\n+        }\n+        List<PointF> points = new ArrayList<>();\n+        for (Point point : polygon) {\n+            PointF androidPoint = new PointF(\n+                    point.getX(),\n+                    point.getY()\n+            );\n+            points.add(androidPoint);\n+        }\n+        return Polygon.fromPoints(points);\n+    }\n+\n+    /**\n+     * Converts a given Amazon Textract block into Amplify-compatible\n+     * table object. Returns null if not a valid table.\n+     * @param block Textract text block\n+     * @param blockMap map of Textract blocks by their IDs\n+     * @return Amplify Table instance\n+     */\n+    @Nullable\n+    public static Table processTable(@NonNull Block block, @NonNull Map<String, Block> blockMap) {\n+        Objects.requireNonNull(block);\n+        Objects.requireNonNull(blockMap);\n+\n+        if (!BlockType.TABLE.toString().equals(block.getBlockType())) {\n+            return null;\n+        }\n+\n+        RectF box = fromBoundingBox(block.getGeometry().getBoundingBox());\n+        Polygon polygon = fromPoints(block.getGeometry().getPolygon());\n+        List<Cell> cells = new ArrayList<>();\n+        Set<Integer> rows = new HashSet<>();\n+        Set<Integer> cols = new HashSet<>();\n+        // Each TABLE block contains CELL blocks\n+        for (Relationship relationship : block.getRelationships()) {\n+            for (String cellId : relationship.getIds()) {\n+                Block cellBlock = blockMap.get(cellId);\n+                if (cellBlock == null) {\n+                    continue;\n+                }\n+                rows.add(cellBlock.getRowIndex() - 1);\n+                cols.add(cellBlock.getColumnIndex() - 1);\n+                cells.add(processTableCell(cellBlock, blockMap));\n+            }\n+        }\n+\n+        return Table.builder()\n+                .cells(cells)\n+                .confidence(block.getConfidence())\n+                .box(box)\n+                .polygon(polygon)\n+                .rowSize(rows.size())\n+                .columnSize(cols.size())\n+                .build();\n+    }\n+\n+    /**\n+     * Converts a given Amazon Textract block into Amplify-compatible\n+     * key-value pair feature. Returns null if not a valid table.\n+     * @param block Textract text block\n+     * @param blockMap map of Textract blocks by their IDs\n+     * @return Amplify Table instance\n+     */\n+    @Nullable\n+    public static BoundedKeyValue processKeyValue(@NonNull Block block, @NonNull Map<String, Block> blockMap) {", "originalCommit": "92d452c9d7bcff2276278e7c6acd4ed80b1b37f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgzOTc3NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417839775", "bodyText": "Hmm, these transformers are internal, so naming isn't all that important. But I agree that my naming has been somewhat inconsistent (mostly because I was doing from<Something>, but Textract is now requiring a bunch of conversion from Block, causing naming conflicts).\nWill start using fetch<Something> again, like I do in other services.", "author": "raphkim", "createdAt": "2020-04-30T08:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxODQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1eb173b397ca6e4110688d5d6663d1ea7cb1f600", "chunk": "diff --git a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java\nindex fc751fc4..9a0177b0 100644\n--- a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java\n+++ b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java\n\n@@ -115,17 +115,11 @@ public final class IdentifyTextResultTransformers {\n         Set<Integer> rows = new HashSet<>();\n         Set<Integer> cols = new HashSet<>();\n         // Each TABLE block contains CELL blocks\n-        for (Relationship relationship : block.getRelationships()) {\n-            for (String cellId : relationship.getIds()) {\n-                Block cellBlock = blockMap.get(cellId);\n-                if (cellBlock == null) {\n-                    continue;\n-                }\n-                rows.add(cellBlock.getRowIndex() - 1);\n-                cols.add(cellBlock.getColumnIndex() - 1);\n-                cells.add(processTableCell(cellBlock, blockMap));\n-            }\n-        }\n+        doForEachRelatedBlock(block, blockMap, cellBlock -> {\n+            rows.add(cellBlock.getRowIndex() - 1);\n+            cols.add(cellBlock.getColumnIndex() - 1);\n+            cells.add(processTableCell(cellBlock, blockMap));\n+        });\n \n         return Table.builder()\n                 .cells(cells)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTI3Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417665272", "bodyText": "Looks like this is dead-store?", "author": "jamesonwilliams", "createdAt": "2020-04-29T23:12:04Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSTextractService.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.service;\n+\n+import android.graphics.RectF;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.AWSPredictionsPluginConfiguration;\n+import com.amplifyframework.predictions.aws.adapter.IdentifyTextResultTransformers;\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.IdentifiedText;\n+import com.amplifyframework.predictions.models.Polygon;\n+import com.amplifyframework.predictions.models.Selection;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.predictions.models.TextFormatType;\n+import com.amplifyframework.predictions.result.IdentifyDocumentTextResult;\n+import com.amplifyframework.predictions.result.IdentifyResult;\n+import com.amplifyframework.util.UserAgent;\n+\n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.services.textract.AmazonTextractClient;\n+import com.amazonaws.services.textract.model.AnalyzeDocumentRequest;\n+import com.amazonaws.services.textract.model.AnalyzeDocumentResult;\n+import com.amazonaws.services.textract.model.Block;\n+import com.amazonaws.services.textract.model.BlockType;\n+import com.amazonaws.services.textract.model.DetectDocumentTextRequest;\n+import com.amazonaws.services.textract.model.DetectDocumentTextResult;\n+import com.amazonaws.services.textract.model.Document;\n+import com.amazonaws.services.textract.model.FeatureType;\n+import com.amazonaws.services.textract.model.Geometry;\n+import com.amazonaws.services.textract.model.SelectionStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Predictions service for performing text translation.\n+ */\n+final class AWSTextractService {\n+    private final AmazonTextractClient textract;\n+    private final AWSPredictionsPluginConfiguration pluginConfiguration;", "originalCommit": "1eb173b397ca6e4110688d5d6663d1ea7cb1f600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0MTEzNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417841134", "bodyText": "It is indeed (for the time being)! I will add these in when I go over configuration for predictions after being finished, but both labels detection and text detection are missing configuration.\nFor now, I'm only preemptively adding the ones that are required for the plugin to work.", "author": "raphkim", "createdAt": "2020-04-30T08:26:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSTextractService.java b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSTextractService.java\nindex 8e5eb87c..90f37d30 100644\n--- a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSTextractService.java\n+++ b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSTextractService.java\n\n@@ -15,16 +15,14 @@\n \n package com.amplifyframework.predictions.aws.service;\n \n-import android.graphics.RectF;\n import androidx.annotation.NonNull;\n \n import com.amplifyframework.core.Consumer;\n import com.amplifyframework.predictions.PredictionsException;\n import com.amplifyframework.predictions.aws.AWSPredictionsPluginConfiguration;\n-import com.amplifyframework.predictions.aws.adapter.IdentifyTextResultTransformers;\n+import com.amplifyframework.predictions.aws.adapter.TextractResultTransformers;\n import com.amplifyframework.predictions.models.BoundedKeyValue;\n import com.amplifyframework.predictions.models.IdentifiedText;\n-import com.amplifyframework.predictions.models.Polygon;\n import com.amplifyframework.predictions.models.Selection;\n import com.amplifyframework.predictions.models.Table;\n import com.amplifyframework.predictions.models.TextFormatType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTY3NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417665674", "bodyText": "I like the pattern you used elsewhere where split out the \"convert to result type\" step into a helper.", "author": "jamesonwilliams", "createdAt": "2020-04-29T23:13:15Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java", "diffHunk": "@@ -226,6 +246,60 @@ void recognizeCelebrities(\n         return celebrities;\n     }\n \n+    private IdentifyTextResult detectPlainText(Image image) throws PredictionsException {\n+        DetectTextRequest request = new DetectTextRequest()\n+                .withImage(image);\n+\n+        // Read text in the given image via Amazon Rekognition\n+        final DetectTextResult result;\n+        try {\n+            result = rekognition.detectText(request);\n+        } catch (AmazonClientException serviceException) {\n+            throw new PredictionsException(\n+                    \"Amazon Rekognition encountered an error while detecting text.\",\n+                    serviceException, \"See attached service exception for more details.\"\n+            );\n+        }\n+\n+        StringBuilder fullTextBuilder = new StringBuilder();", "originalCommit": "1eb173b397ca6e4110688d5d6663d1ea7cb1f600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0Njc3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417846770", "bodyText": "AWSTextractService#processTextractBlocks() was split into its own method mainly because the same logic was required for both detectDocumentText() and analyzeDocument() methods. Generally for other services, I included the conversion directly inside the method calling the service APIs.", "author": "raphkim", "createdAt": "2020-04-30T08:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java\nindex 2b712e67..6a560b45 100644\n--- a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java\n+++ b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java\n\n@@ -265,28 +263,17 @@ final class AWSRekognitionService {\n         List<String> rawLineText = new ArrayList<>();\n         List<IdentifiedText> words = new ArrayList<>();\n         List<IdentifiedText> lines = new ArrayList<>();\n-        for (TextDetection detection : result.getTextDetections()) {\n-            String detectedText = detection.getDetectedText();\n-            Geometry geometry = detection.getGeometry();\n-            RectF box = IdentifyEntitiesResultTransformers.fromBoundingBox(geometry.getBoundingBox());\n-            Polygon polygon = IdentifyEntitiesResultTransformers.fromPoints(geometry.getPolygon());\n-\n-            IdentifiedText text = IdentifiedText.builder()\n-                    .text(detectedText)\n-                    .confidence(detection.getConfidence())\n-                    .box(box)\n-                    .polygon(polygon)\n-                    .build();\n \n+        for (TextDetection detection : result.getTextDetections()) {\n             TextTypes type = TextTypes.fromValue(detection.getType());\n             switch (type) {\n                 case LINE:\n-                    rawLineText.add(detectedText);\n-                    lines.add(text);\n+                    rawLineText.add(detection.getDetectedText());\n+                    lines.add(RekognitionResultTransformers.fromTextDetection(detection));\n                     continue;\n                 case WORD:\n-                    fullTextBuilder.append(detectedText).append(\" \");\n-                    words.add(text);\n+                    fullTextBuilder.append(detection.getDetectedText()).append(\" \");\n+                    words.add(RekognitionResultTransformers.fromTextDetection(detection));\n                     continue;\n                 default:\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NjI2Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417666267", "bodyText": "Minimal savings from caching these. I think you're running out of width on lines 271 and 272 because IdentifyEntitiesResultTransformers is so long. Maybe we can rename that to something shorter?\nAlso you're starting at +12 from class indentation, method indentation, and for indentation.\nMaybe the body of the for loop can be externalized to a helper? Among other things, that'd set you back to +8 indentation at least.\n(Point in short, by the time you actually get to call fromPoints, it's pretty far to the right side of the screen.)", "author": "jamesonwilliams", "createdAt": "2020-04-29T23:14:54Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java", "diffHunk": "@@ -226,6 +246,60 @@ void recognizeCelebrities(\n         return celebrities;\n     }\n \n+    private IdentifyTextResult detectPlainText(Image image) throws PredictionsException {\n+        DetectTextRequest request = new DetectTextRequest()\n+                .withImage(image);\n+\n+        // Read text in the given image via Amazon Rekognition\n+        final DetectTextResult result;\n+        try {\n+            result = rekognition.detectText(request);\n+        } catch (AmazonClientException serviceException) {\n+            throw new PredictionsException(\n+                    \"Amazon Rekognition encountered an error while detecting text.\",\n+                    serviceException, \"See attached service exception for more details.\"\n+            );\n+        }\n+\n+        StringBuilder fullTextBuilder = new StringBuilder();\n+        List<String> rawLineText = new ArrayList<>();\n+        List<IdentifiedText> words = new ArrayList<>();\n+        List<IdentifiedText> lines = new ArrayList<>();\n+        for (TextDetection detection : result.getTextDetections()) {\n+            String detectedText = detection.getDetectedText();\n+            Geometry geometry = detection.getGeometry();", "originalCommit": "1eb173b397ca6e4110688d5d6663d1ea7cb1f600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg2NjE2Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417866167", "bodyText": "Maybe the body of the for loop can be externalized to a helper? Among other things, that'd set you back to +8 indentation at least.\n\nIt would still be +12 no?\nfor () {\n    foo();\n    bar();\n    baz();\n}\n\nhas the same indentation as\nfor () {\n    doFooBarBaz();\n}\n\n(although definitely cleaner)\nMeanwhile, I also moved the IdentifiedText builder into utility class for simplicity inside service implementation", "author": "raphkim", "createdAt": "2020-04-30T09:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NjI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java\nindex 2b712e67..6a560b45 100644\n--- a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java\n+++ b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java\n\n@@ -265,28 +263,17 @@ final class AWSRekognitionService {\n         List<String> rawLineText = new ArrayList<>();\n         List<IdentifiedText> words = new ArrayList<>();\n         List<IdentifiedText> lines = new ArrayList<>();\n-        for (TextDetection detection : result.getTextDetections()) {\n-            String detectedText = detection.getDetectedText();\n-            Geometry geometry = detection.getGeometry();\n-            RectF box = IdentifyEntitiesResultTransformers.fromBoundingBox(geometry.getBoundingBox());\n-            Polygon polygon = IdentifyEntitiesResultTransformers.fromPoints(geometry.getPolygon());\n-\n-            IdentifiedText text = IdentifiedText.builder()\n-                    .text(detectedText)\n-                    .confidence(detection.getConfidence())\n-                    .box(box)\n-                    .polygon(polygon)\n-                    .build();\n \n+        for (TextDetection detection : result.getTextDetections()) {\n             TextTypes type = TextTypes.fromValue(detection.getType());\n             switch (type) {\n                 case LINE:\n-                    rawLineText.add(detectedText);\n-                    lines.add(text);\n+                    rawLineText.add(detection.getDetectedText());\n+                    lines.add(RekognitionResultTransformers.fromTextDetection(detection));\n                     continue;\n                 case WORD:\n-                    fullTextBuilder.append(detectedText).append(\" \");\n-                    words.add(text);\n+                    fullTextBuilder.append(detection.getDetectedText()).append(\" \");\n+                    words.add(RekognitionResultTransformers.fromTextDetection(detection));\n                     continue;\n                 default:\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MDAyOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417670028", "bodyText": "This method is weird in that it takes an AWS  service type as an input, but then renders an Amplify type as an output.\nOr in other words, right now,AWSPredictionsService is \"leaking\" some abstractions.\nLet's consider the duties of the AWSPredictionsService, vs the AWSRecognitionService.\nThe lower level ones like AWSRecognitionService are handling the business of creating service-modeled requests, and decoding service-modeled responses. But, they are still requiring some types like Image, Document, which are contained in the requests.\nTheoretically, you could \"patch\" the \"leak\" even here. Your AWSRekognitionService could accept only Amplify types, and return only Amplify types.\nThen, your AWSPredictionsService is just a bundle of the various service clients.\nBut certainly, at minimum you should encapsulate the AWS services underneath the AWSPredictionsService.\nI do believe that AWSPredictionsService is an architecturally desirable component. If you look at some other plugin modules, they WhateverPlugin extends Plugin are chokepoints, and get huge. And its because the developer(s) encoded business rules directly into the plugin classes, instead of encapsulating the behaviors into a self contained service component, as you have here. The AWSPredictionsPlugin is just a platform-binding adapter, once you have this service class.\nAnyway, you're leaking the AWS stuff up through the service, into the plugin. The plugin would need to know what an Image is, and that's not so desirable.", "author": "jamesonwilliams", "createdAt": "2020-04-29T23:26:35Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSPredictionsService.java", "diffHunk": "@@ -100,6 +105,36 @@ public void recognizeCelebrities(\n         rekognitionService.recognizeCelebrities(image, onSuccess, onError);\n     }\n \n+    /**\n+     * Delegate to {@link AWSRekognitionService} to detect plain text.\n+     * @param image the Rekognition input image\n+     * @param onSuccess triggered upon successful result\n+     * @param onError triggered upon encountering error\n+     */\n+    public void detectPlainText(\n+            @NonNull Image image,", "originalCommit": "1eb173b397ca6e4110688d5d6663d1ea7cb1f600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg2Njk5Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417866997", "bodyText": "I agree with you! I was actually considering replacing these with ByteBuffer, but felt that I didn't have enough reason to do that. Reading your argument, I changed my mind and it would make total sense to change them all.\nReminder @raphkim to refactor this", "author": "raphkim", "createdAt": "2020-04-30T09:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MDAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwMzU2NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r418403565", "bodyText": "^ Or just the same Bitmap you got in the input, right? That was you don't have to do much mapping between the plugin and the service. Can you map from Bitmap (Android) to Image (AWS service model) inside this service class?", "author": "jamesonwilliams", "createdAt": "2020-05-01T03:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MDAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyOTk4NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r418929984", "bodyText": "I like leaving the Bitmap -> ByteBuffer conversion logic inside AWSImageIdentifyRequest object, where it is actually converting the Amplify input into an acceptable service parameter. So I'll just pass the ByteBuffer directly to the services.", "author": "raphkim", "createdAt": "2020-05-02T08:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MDAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "10e62cc97b33da97edb19e89ab5eb0b7f5c5c62e", "chunk": "diff --git a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSPredictionsService.java b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSPredictionsService.java\nindex ad9b0eab..4b2aff86 100644\n--- a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSPredictionsService.java\n+++ b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSPredictionsService.java\n\n@@ -105,6 +105,20 @@ public final class AWSPredictionsService {\n         rekognitionService.recognizeCelebrities(image, onSuccess, onError);\n     }\n \n+    /**\n+     * Delegate to {@link AWSRekognitionService} to detect entities.\n+     * @param image the Rekognition input image\n+     * @param onSuccess triggered upon successful result\n+     * @param onError triggered upon encountering error\n+     */\n+    public void detectEntities(\n+            @NonNull Image image,\n+            @NonNull Consumer<IdentifyResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        rekognitionService.detectEntities(image, onSuccess, onError);\n+    }\n+\n     /**\n      * Delegate to {@link AWSRekognitionService} to detect plain text.\n      * @param image the Rekognition input image\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MTQwMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417671403", "bodyText": "nit: empty line", "author": "jamesonwilliams", "createdAt": "2020-04-29T23:31:15Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import android.graphics.PointF;\n+import android.graphics.RectF;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.Cell;\n+import com.amplifyframework.predictions.models.Polygon;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.util.CollectionUtils;\n+\n+import com.amazonaws.services.textract.model.Block;\n+import com.amazonaws.services.textract.model.BlockType;\n+import com.amazonaws.services.textract.model.BoundingBox;\n+import com.amazonaws.services.textract.model.EntityType;\n+import com.amazonaws.services.textract.model.Point;\n+import com.amazonaws.services.textract.model.Relationship;\n+import com.amazonaws.services.textract.model.SelectionStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility class to transform Amazon service-specific\n+ * models to be compatible with AWS Amplify.\n+ */\n+public final class IdentifyTextResultTransformers {\n+    private IdentifyTextResultTransformers() {}\n+\n+    /**\n+     * Converts bounding box geometry from Amazon Rekognition into\n+     * Android's graphic {@link RectF} object for Amplify\n+     * compatibility.\n+     * @param box the bounding box provided by Amazon Rekognition\n+     * @return the RectF object representing the same dimensions\n+     */\n+    @Nullable\n+    public static RectF fromBoundingBox(@Nullable BoundingBox box) {\n+        if (box == null) {\n+            return null;\n+        }\n+        return new RectF(\n+                box.getLeft(),\n+                box.getTop(),\n+                box.getLeft() + box.getWidth(),\n+                box.getTop() + box.getHeight()\n+        );\n+    }\n+", "originalCommit": "1eb173b397ca6e4110688d5d6663d1ea7cb1f600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg2ODQyMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r417868421", "bodyText": "fixed", "author": "raphkim", "createdAt": "2020-04-30T09:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MTQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "chunk": "diff --git a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/TextractResultTransformers.java\nsimilarity index 69%\nrename from aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java\nrename to aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/TextractResultTransformers.java\nindex 9a0177b0..9519b994 100644\n--- a/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyTextResultTransformers.java\n+++ b/aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/TextractResultTransformers.java\n\n@@ -23,7 +23,9 @@ import androidx.annotation.Nullable;\n import com.amplifyframework.core.Consumer;\n import com.amplifyframework.predictions.models.BoundedKeyValue;\n import com.amplifyframework.predictions.models.Cell;\n+import com.amplifyframework.predictions.models.IdentifiedText;\n import com.amplifyframework.predictions.models.Polygon;\n+import com.amplifyframework.predictions.models.Selection;\n import com.amplifyframework.predictions.models.Table;\n import com.amplifyframework.util.CollectionUtils;\n \n"}}, {"oid": "8b952f1deea6bcbfa85b8848970e15844cca1ab3", "url": "https://github.com/aws-amplify/amplify-android/commit/8b952f1deea6bcbfa85b8848970e15844cca1ab3", "message": "Address some PR suggestions", "committedDate": "2020-04-30T09:15:34Z", "type": "commit"}, {"oid": "b1e26ea7f1b8dcbbcc7f7bed9823fb612bb99f2c", "url": "https://github.com/aws-amplify/amplify-android/commit/b1e26ea7f1b8dcbbcc7f7bed9823fb612bb99f2c", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into identify-aws-text", "committedDate": "2020-04-30T09:18:13Z", "type": "commit"}, {"oid": "10e62cc97b33da97edb19e89ab5eb0b7f5c5c62e", "url": "https://github.com/aws-amplify/amplify-android/commit/10e62cc97b33da97edb19e89ab5eb0b7f5c5c62e", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into identify-aws-text", "committedDate": "2020-04-30T18:20:22Z", "type": "commit"}, {"oid": "ca6df1d4163e96686bcc6be08db7485e2a038d14", "url": "https://github.com/aws-amplify/amplify-android/commit/ca6df1d4163e96686bcc6be08db7485e2a038d14", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into identify-aws-text", "committedDate": "2020-05-02T07:56:47Z", "type": "commit"}, {"oid": "9d4d0fd53b68069369aa5ae183dac79e4833c6e4", "url": "https://github.com/aws-amplify/amplify-android/commit/9d4d0fd53b68069369aa5ae183dac79e4833c6e4", "message": "Remove AWS specific service parameters", "committedDate": "2020-05-02T08:17:23Z", "type": "commit"}, {"oid": "e6fada64006e1bca40d489663d641091a1371cca", "url": "https://github.com/aws-amplify/amplify-android/commit/e6fada64006e1bca40d489663d641091a1371cca", "message": "Add asset to compare with plain text detection", "committedDate": "2020-05-02T08:39:08Z", "type": "commit"}, {"oid": "871c19861a1d25ec005e93c6eedba4a67106c8fc", "url": "https://github.com/aws-amplify/amplify-android/commit/871c19861a1d25ec005e93c6eedba4a67106c8fc", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into identify-aws-text", "committedDate": "2020-05-03T04:04:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5Mjk5OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r419492998", "bodyText": "I think you meant to keep this as \\n, not /n.", "author": "jamesonwilliams", "createdAt": "2020-05-04T14:47:44Z", "path": "testutils/src/main/java/com/amplifyframework/testutils/Assets.java", "diffHunk": "@@ -51,8 +51,11 @@ public static String readAsString(final String name) throws RuntimeException {\n \n             String line = bufferedReader.readLine();\n             while (line != null) {\n-                stringBuilder.append(line).append(\"\\n\");\n+                stringBuilder.append(line);\n                 line = bufferedReader.readLine();\n+                if (line != null) {\n+                    stringBuilder.append(\"/n\");", "originalCommit": "871c19861a1d25ec005e93c6eedba4a67106c8fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxODgwNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/409#discussion_r419618805", "bodyText": "Ahhh, you are absolutely right! That's an embarrassing mistake. Thanks for catching it", "author": "raphkim", "createdAt": "2020-05-04T17:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5Mjk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "ba8c0d059770230d262a2a67bf00c2f4bd3e0c5b", "chunk": "diff --git a/testutils/src/main/java/com/amplifyframework/testutils/Assets.java b/testutils/src/main/java/com/amplifyframework/testutils/Assets.java\nindex 0c466d89..e53fda16 100644\n--- a/testutils/src/main/java/com/amplifyframework/testutils/Assets.java\n+++ b/testutils/src/main/java/com/amplifyframework/testutils/Assets.java\n\n@@ -54,7 +54,7 @@ public final class Assets {\n                 stringBuilder.append(line);\n                 line = bufferedReader.readLine();\n                 if (line != null) {\n-                    stringBuilder.append(\"/n\");\n+                    stringBuilder.append(\"\\n\");\n                 }\n             }\n \n"}}, {"oid": "ba8c0d059770230d262a2a67bf00c2f4bd3e0c5b", "url": "https://github.com/aws-amplify/amplify-android/commit/ba8c0d059770230d262a2a67bf00c2f4bd3e0c5b", "message": "Fix up a minor yet important typo", "committedDate": "2020-05-04T17:55:10Z", "type": "commit"}, {"oid": "7645becc8d7925a71924240a56c0c5b202f9098a", "url": "https://github.com/aws-amplify/amplify-android/commit/7645becc8d7925a71924240a56c0c5b202f9098a", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into identify-aws-text", "committedDate": "2020-05-04T19:49:23Z", "type": "commit"}, {"oid": "8664da0b84fea97f2ee6262c9625000b1d7c5be9", "url": "https://github.com/aws-amplify/amplify-android/commit/8664da0b84fea97f2ee6262c9625000b1d7c5be9", "message": "Name change merge conflict", "committedDate": "2020-05-04T20:07:23Z", "type": "commit"}]}