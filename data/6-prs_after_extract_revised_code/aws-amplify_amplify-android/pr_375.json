{"pr_number": 375, "pr_title": "[testutils] Prevent deadlocks in Latch and Await", "pr_createdAt": "2020-04-11T01:16:54Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/375", "timeline": [{"oid": "bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c", "url": "https://github.com/aws-amplify/amplify-android/commit/bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c", "message": "[testutils] Prevent deadlocks in Latch and Await\n\nAwait: if Await.result() is called from thread A, and its method\nfires callbacks on that same thread A, they may never be invoked. This\nis because the CountDownLatch is sleeping the thread A. To address this\nsituation, ensure that the ResultErrorEmitter function always run on a\ndifferent (new) thread.\n\nLatch: InterruptedException was being gobbled. But, this needs to be\nraised to crash the thread. Otherwise, the thread can hang.", "committedDate": "2020-04-11T01:19:49Z", "type": "commit"}, {"oid": "bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c", "url": "https://github.com/aws-amplify/amplify-android/commit/bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c", "message": "[testutils] Prevent deadlocks in Latch and Await\n\nAwait: if Await.result() is called from thread A, and its method\nfires callbacks on that same thread A, they may never be invoked. This\nis because the CountDownLatch is sleeping the thread A. To address this\nsituation, ensure that the ResultErrorEmitter function always run on a\ndifferent (new) thread.\n\nLatch: InterruptedException was being gobbled. But, this needs to be\nraised to crash the thread. Otherwise, the thread can hang.", "committedDate": "2020-04-11T01:19:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTA3Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407031072", "bodyText": "is there any reason why you want these threads to persist? I feel like all threads should be stopped if the test suite that started it crashes due to a certain error that is unrelated to this thread.", "author": "raphkim", "createdAt": "2020-04-11T07:38:27Z", "path": "testutils/src/main/java/com/amplifyframework/testutils/Await.java", "diffHunk": "@@ -134,28 +134,37 @@ private Await() {}\n             @NonNull ResultErrorEmitter<R, E> resultErrorEmitter,\n             @NonNull AtomicReference<R> resultContainer,\n             @NonNull AtomicReference<E> errorContainer) {\n-\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        resultErrorEmitter.emitTo(\n-            result -> {\n-                resultContainer.set(result);\n-                latch.countDown();\n-            }, error -> {\n-                errorContainer.set(error);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicReference<Throwable> unexpectedErrorContainer = new AtomicReference<>();\n+        final Thread thread = new Thread(() -> {\n+            try {\n+                resultErrorEmitter.emitTo(\n+                    result -> {\n+                        resultContainer.set(result);\n+                        latch.countDown();\n+                    }, error -> {\n+                        errorContainer.set(error);\n+                        latch.countDown();\n+                    }\n+                );\n+            } catch (Throwable unexpectedFailure) {\n+                unexpectedErrorContainer.set(unexpectedFailure);\n                 latch.countDown();\n             }\n-        );\n+        });\n+        thread.setDaemon(true);", "originalCommit": "bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTg1NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407031855", "bodyText": "(Update) Oh yea I did want setDaemon(true):\n\nsetDaemon() Marks this thread as either a daemon thread or a user thread. The Java Virtual Machine exits when the only threads running are all daemon threads.\n\nMy goal was to not hang the VM.", "author": "jamesonwilliams", "createdAt": "2020-04-11T07:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMjU0Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407032547", "bodyText": "ah okay. that sounds like a good reason.", "author": "raphkim", "createdAt": "2020-04-11T07:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTA3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTM5OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407031398", "bodyText": "would anything ever get thrown directly to this thread?", "author": "raphkim", "createdAt": "2020-04-11T07:42:08Z", "path": "testutils/src/main/java/com/amplifyframework/testutils/Await.java", "diffHunk": "@@ -134,28 +134,37 @@ private Await() {}\n             @NonNull ResultErrorEmitter<R, E> resultErrorEmitter,\n             @NonNull AtomicReference<R> resultContainer,\n             @NonNull AtomicReference<E> errorContainer) {\n-\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        resultErrorEmitter.emitTo(\n-            result -> {\n-                resultContainer.set(result);\n-                latch.countDown();\n-            }, error -> {\n-                errorContainer.set(error);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicReference<Throwable> unexpectedErrorContainer = new AtomicReference<>();\n+        final Thread thread = new Thread(() -> {\n+            try {\n+                resultErrorEmitter.emitTo(\n+                    result -> {\n+                        resultContainer.set(result);\n+                        latch.countDown();\n+                    }, error -> {\n+                        errorContainer.set(error);\n+                        latch.countDown();\n+                    }\n+                );\n+            } catch (Throwable unexpectedFailure) {\n+                unexpectedErrorContainer.set(unexpectedFailure);\n                 latch.countDown();\n             }", "originalCommit": "bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMjA3NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407032075", "bodyText": "Not if it is working properly. Before, if something was broken, it would throw on the calling thread, here. But since I've moved the call onto a new thread, I don't want the exception to just kill the thread, while the caller is still alive waiting for a response. I want it to kill the calling thread, too.\nBut yea - this is a safeguard. Software that is functioning as we intent it do would not trigger this condition. (But, this is after-all a testutils component, so we can't expect things passed into this method will always be functioning correctly (they may throw instead of calling error consumer, accidentally.))", "author": "jamesonwilliams", "createdAt": "2020-04-11T07:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMjY3NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407032675", "bodyText": "I guess it's always better safe than sorry. I just couldn't think of a scenario where anything would ever be thrown directly here now that you created a new well-contained thread.", "author": "raphkim", "createdAt": "2020-04-11T07:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTM5OA=="}], "type": "inlineReview", "revised_code": null}]}