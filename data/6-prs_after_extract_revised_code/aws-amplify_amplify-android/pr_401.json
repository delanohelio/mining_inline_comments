{"pr_number": 401, "pr_title": "[aws-datstore] Implementation of user-provided DataStore configs", "pr_createdAt": "2020-04-25T15:14:20Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/401", "timeline": [{"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "url": "https://github.com/aws-amplify/amplify-android/commit/d95f0650a1a451e3d9c416795a9eb76917508d4b", "message": "[aws-datstore] Implementation of user-provided DataStore configs", "committedDate": "2020-04-25T15:01:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMjM1Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415232357", "bodyText": "This feels more like a top-level class to me personally, since CategoryConfiguration itself doesn't make reference to it. All of the other ones are, anyway - ApiCategoryConfiguration, etc.", "author": "jamesonwilliams", "createdAt": "2020-04-26T06:38:48Z", "path": "core/src/main/java/com/amplifyframework/core/category/CategoryConfiguration.java", "diffHunk": "@@ -66,4 +68,27 @@ public void populateFromJSON(JSONObject json) throws JSONException {\n             }\n         }\n     }\n+\n+    /**\n+     * Convenience class to allow AmplifyConfiguration to return a\n+     * shell configuration for categories not present in the Amplify\n+     * config file.\n+     */\n+    public static final class EmptyCategoryConfiguration extends CategoryConfiguration {", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNzg5OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415337898", "bodyText": "Done.", "author": "rjuliano", "createdAt": "2020-04-26T15:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMjM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/core/category/CategoryConfiguration.java b/core/src/main/java/com/amplifyframework/core/category/CategoryConfiguration.java\nindex f490f007..a90cd245 100644\n--- a/core/src/main/java/com/amplifyframework/core/category/CategoryConfiguration.java\n+++ b/core/src/main/java/com/amplifyframework/core/category/CategoryConfiguration.java\n\n@@ -68,27 +66,4 @@ public abstract class CategoryConfiguration implements CategoryTypeable {\n             }\n         }\n     }\n-\n-    /**\n-     * Convenience class to allow AmplifyConfiguration to return a\n-     * shell configuration for categories not present in the Amplify\n-     * config file.\n-     */\n-    public static final class EmptyCategoryConfiguration extends CategoryConfiguration {\n-        private final CategoryType categoryType;\n-\n-        private EmptyCategoryConfiguration(CategoryType categoryType) {\n-            this.categoryType = categoryType;\n-        }\n-\n-        public static EmptyCategoryConfiguration forCategoryType(CategoryType categoryType) {\n-            return new EmptyCategoryConfiguration(categoryType);\n-        }\n-\n-        @NonNull\n-        @Override\n-        public CategoryType getCategoryType() {\n-            return categoryType;\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMzUyNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415233527", "bodyText": "These are guaranteed by the compiler already, right? Maybe it would be more elucidating to check the behavior of them, or that they are equals() to an expected object, or something like that.\nEither:\ndataStoreConflictHandler = dataStoreConfiguration.getDataStoreConlictHandler();\nassertEquals(DataStoreConflictHandlerResult.RETRY, Await.result((onResult, onFailure) -> {\n    dataStoreConflictHandler.resolveConflict(new DataStoreConlictData<>(), onResult);\n}));\n\nOr maybe just cache the new DummyConflictHandler() that you pass in, so you can do\nassertEquals(arrangedHandler, dataStoreConfiguration.getDataStoreConflictHandler());\n\n(Same comment for all instanceof tests.)\nOut of interest, it looks like Hamcrest has a matcher for this, for the future:\nhttps://stackoverflow.com/a/12404813/695787\nassertThat(foo, instanceOf(Foo.class));", "author": "jamesonwilliams", "createdAt": "2020-04-26T06:45:37Z", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class DataStoreConfigurationTest {\n+//    private Context context;\n+\n+    @Before\n+    public void setup() {\n+//        this.context = getApplicationContext();\n+    }\n+\n+    @Test\n+    public void testDefaultConfiguration() {\n+        DataStoreConfiguration dataStoreConfiguration = DataStoreConfiguration.defaults();\n+        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_INTERVAL_MINUTES,\n+            dataStoreConfiguration.getSyncIntervalInMinutes());\n+        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_MAX_RECORDS,\n+            dataStoreConfiguration.getSyncMaxRecords());\n+        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_PAGE_SIZE,\n+            dataStoreConfiguration.getSyncPageSize());\n+\n+        assertTrue(dataStoreConfiguration.getDataStoreConflictHandler() instanceof ApplyRemoteConflictHandler);\n+        assertTrue(dataStoreConfiguration.getDataStoreErrorHandler() instanceof DefaultDataStoreErrorHandler);\n+    }\n+\n+    @Test\n+    public void testDefaultOverridenFromConfiguration() throws JSONException, DataStoreException {\n+        long expectedSyncInterval = 6;\n+        int expectedSyncMaxRecords = 3;\n+        JSONObject jsonConfigFromFile = new JSONObject()\n+            .put(DataStoreConfiguration.ConfigKey.SYNC_INTERVAL.toString(), expectedSyncInterval)\n+            .put(DataStoreConfiguration.ConfigKey.SYNC_MAX_RECORDS.toString(), expectedSyncMaxRecords);\n+        DataStoreConfiguration dataStoreConfiguration = DataStoreConfiguration.builder(jsonConfigFromFile).build();\n+        assertEquals(expectedSyncInterval, dataStoreConfiguration.getSyncIntervalInMinutes());\n+        assertEquals(expectedSyncMaxRecords, dataStoreConfiguration.getSyncMaxRecords());\n+        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_PAGE_SIZE, dataStoreConfiguration.getSyncPageSize());\n+\n+        assertTrue(dataStoreConfiguration.getDataStoreConflictHandler() instanceof ApplyRemoteConflictHandler);\n+        assertTrue(dataStoreConfiguration.getDataStoreErrorHandler() instanceof DefaultDataStoreErrorHandler);\n+    }\n+\n+    @Test\n+    public void testDefaultOverridenFromConfigurationAndObject() throws DataStoreException, JSONException {\n+        long expectedSyncInterval = 6;\n+        int expectedSyncMaxRecords = 3;\n+\n+        DataStoreConfiguration configObject = DataStoreConfiguration\n+            .builder()\n+            .syncMaxRecords(expectedSyncMaxRecords)\n+            .dataStoreConflictHandler(new DummyConflictHandler())\n+            .build();\n+\n+        JSONObject jsonConfigFromFile = new JSONObject()\n+            .put(DataStoreConfiguration.ConfigKey.SYNC_INTERVAL.toString(), expectedSyncInterval);\n+        DataStoreConfiguration dataStoreConfiguration = DataStoreConfiguration\n+            .builder(jsonConfigFromFile, configObject)\n+            .build();\n+\n+        assertEquals(expectedSyncInterval, dataStoreConfiguration.getSyncIntervalInMinutes());\n+        assertEquals(expectedSyncMaxRecords, dataStoreConfiguration.getSyncMaxRecords());\n+        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_PAGE_SIZE, dataStoreConfiguration.getSyncPageSize());\n+\n+        assertTrue(dataStoreConfiguration.getDataStoreConflictHandler() instanceof DummyConflictHandler);\n+        assertTrue(dataStoreConfiguration.getDataStoreErrorHandler() instanceof DefaultDataStoreErrorHandler);", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzODY1MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415338651", "bodyText": "I'll get this updated.", "author": "rjuliano", "createdAt": "2020-04-26T15:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMzUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java b/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java\nindex 84ecc0bc..102f7142 100644\n--- a/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java\n+++ b/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java\n\n@@ -22,28 +22,23 @@ import com.amplifyframework.core.model.Model;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.robolectric.RobolectricTestRunner;\n \n+import java.util.concurrent.TimeUnit;\n+\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n @RunWith(RobolectricTestRunner.class)\n-public class DataStoreConfigurationTest {\n-//    private Context context;\n-\n-    @Before\n-    public void setup() {\n-//        this.context = getApplicationContext();\n-    }\n+public final class DataStoreConfigurationTest {\n \n     @Test\n     public void testDefaultConfiguration() {\n         DataStoreConfiguration dataStoreConfiguration = DataStoreConfiguration.defaults();\n-        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_INTERVAL_MINUTES,\n-            dataStoreConfiguration.getSyncIntervalInMinutes());\n+        assertEquals(TimeUnit.MINUTES.toMillis(DataStoreConfiguration.DEFAULT_SYNC_INTERVAL_MINUTES),\n+            dataStoreConfiguration.getSyncIntervalMs());\n         assertEquals(DataStoreConfiguration.DEFAULT_SYNC_MAX_RECORDS,\n             dataStoreConfiguration.getSyncMaxRecords());\n         assertEquals(DataStoreConfiguration.DEFAULT_SYNC_PAGE_SIZE,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNDExMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415234113", "bodyText": "can remote this and L35", "author": "jamesonwilliams", "createdAt": "2020-04-26T06:48:53Z", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class DataStoreConfigurationTest {\n+//    private Context context;\n+\n+    @Before\n+    public void setup() {\n+//        this.context = getApplicationContext();", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNjM5NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415336394", "bodyText": "Done.", "author": "rjuliano", "createdAt": "2020-04-26T15:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNDExMw=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java b/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java\nindex 84ecc0bc..102f7142 100644\n--- a/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java\n+++ b/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java\n\n@@ -22,28 +22,23 @@ import com.amplifyframework.core.model.Model;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.robolectric.RobolectricTestRunner;\n \n+import java.util.concurrent.TimeUnit;\n+\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n @RunWith(RobolectricTestRunner.class)\n-public class DataStoreConfigurationTest {\n-//    private Context context;\n-\n-    @Before\n-    public void setup() {\n-//        this.context = getApplicationContext();\n-    }\n+public final class DataStoreConfigurationTest {\n \n     @Test\n     public void testDefaultConfiguration() {\n         DataStoreConfiguration dataStoreConfiguration = DataStoreConfiguration.defaults();\n-        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_INTERVAL_MINUTES,\n-            dataStoreConfiguration.getSyncIntervalInMinutes());\n+        assertEquals(TimeUnit.MINUTES.toMillis(DataStoreConfiguration.DEFAULT_SYNC_INTERVAL_MINUTES),\n+            dataStoreConfiguration.getSyncIntervalMs());\n         assertEquals(DataStoreConfiguration.DEFAULT_SYNC_MAX_RECORDS,\n             dataStoreConfiguration.getSyncMaxRecords());\n         assertEquals(DataStoreConfiguration.DEFAULT_SYNC_PAGE_SIZE,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNDE0Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415234146", "bodyText": "Can be final", "author": "jamesonwilliams", "createdAt": "2020-04-26T06:49:01Z", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class DataStoreConfigurationTest {", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTU4NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415335585", "bodyText": "Done.", "author": "rjuliano", "createdAt": "2020-04-26T15:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNDE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java b/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java\nindex 84ecc0bc..102f7142 100644\n--- a/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java\n+++ b/aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java\n\n@@ -22,28 +22,23 @@ import com.amplifyframework.core.model.Model;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.robolectric.RobolectricTestRunner;\n \n+import java.util.concurrent.TimeUnit;\n+\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n @RunWith(RobolectricTestRunner.class)\n-public class DataStoreConfigurationTest {\n-//    private Context context;\n-\n-    @Before\n-    public void setup() {\n-//        this.context = getApplicationContext();\n-    }\n+public final class DataStoreConfigurationTest {\n \n     @Test\n     public void testDefaultConfiguration() {\n         DataStoreConfiguration dataStoreConfiguration = DataStoreConfiguration.defaults();\n-        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_INTERVAL_MINUTES,\n-            dataStoreConfiguration.getSyncIntervalInMinutes());\n+        assertEquals(TimeUnit.MINUTES.toMillis(DataStoreConfiguration.DEFAULT_SYNC_INTERVAL_MINUTES),\n+            dataStoreConfiguration.getSyncIntervalMs());\n         assertEquals(DataStoreConfiguration.DEFAULT_SYNC_MAX_RECORDS,\n             dataStoreConfiguration.getSyncMaxRecords());\n         assertEquals(DataStoreConfiguration.DEFAULT_SYNC_PAGE_SIZE,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNDM1Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415234357", "bodyText": "Ah, yea ... Hm. We should probably do this either as part of this PR, or immediately next.\nThe DataStore docs are all written like \"Use it without a cloud! Later, add a cloud!\" So this is very P0.", "author": "jamesonwilliams", "createdAt": "2020-04-26T06:50:23Z", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -66,6 +67,7 @@ public void setup() {\n      * @throws JSONException Not expected; on failure to arrange configuration object\n      * @throws DataStoreException Not expected; on failure to configure of initialize plugin\n      */\n+    @Ignore(\"TODO: need a mechanism to re-enable this scenario........\")", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTQ3MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415335471", "bodyText": "Agreed. I may do this as a fast-follow PR if you don't mind. I think there's a little bit of extra complexity here because we're going to be inferring syncMode by virtue of an API not being configured.", "author": "rjuliano", "createdAt": "2020-04-26T15:29:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNDM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4OTA0OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415989049", "bodyText": "Agreed. Okay, sounds great.", "author": "jamesonwilliams", "createdAt": "2020-04-27T17:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNDM1Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTIwNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415235206", "bodyText": "Let's please only store this in milliseconds.\nI would do the conversion external to the SyncProcessor entirely. I'd convert to milliseconds immediately after reading config file, before exiting the config builder. Or, immediately after receiving a user-provided value from the Java builder, and before exiting the config builder.\n(Point in short, the unit conversion is an aspect of configuration logic, not of sync processor logic.)", "author": "jamesonwilliams", "createdAt": "2020-04-26T06:55:25Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -56,21 +57,23 @@\n     private final SyncTimeRegistry syncTimeRegistry;\n     private final AppSync appSync;\n     private final Merger merger;\n-    private final BaseSyncIntervalProvider syncIntervalProvider;\n+    private final long syncIntervalMs;\n+    private final long syncIntervalInMinutes;\n \n     private SyncProcessor(\n             ModelProvider modelProvider,\n             ModelSchemaRegistry modelSchemaRegistry,\n             SyncTimeRegistry syncTimeRegistry,\n             AppSync appSync,\n             Merger merger,\n-            BaseSyncIntervalProvider baseSyncIntervalProvider) {\n+            long syncIntervalInMinutes) {\n         this.modelProvider = Objects.requireNonNull(modelProvider);\n         this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n         this.syncTimeRegistry = Objects.requireNonNull(syncTimeRegistry);\n         this.appSync = Objects.requireNonNull(appSync);\n         this.merger = Objects.requireNonNull(merger);\n-        this.syncIntervalProvider = Objects.requireNonNull(baseSyncIntervalProvider);\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncIntervalMs = TimeUnit.MINUTES.toMillis(syncIntervalInMinutes);", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzODU5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415338593", "bodyText": "I'll get this updated.", "author": "rjuliano", "createdAt": "2020-04-26T15:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java\nindex 45f93b91..96c6cc85 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java\n\n@@ -57,8 +57,7 @@ final class SyncProcessor {\n     private final SyncTimeRegistry syncTimeRegistry;\n     private final AppSync appSync;\n     private final Merger merger;\n-    private final long syncIntervalMs;\n-    private final long syncIntervalInMinutes;\n+    private final DataStoreConfiguration dataStoreConfiguration;\n \n     private SyncProcessor(\n             ModelProvider modelProvider,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTU2Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415235566", "bodyText": "Is this still optimally worded, given the renaming?", "author": "jamesonwilliams", "createdAt": "2020-04-26T06:57:03Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConflictHandlerResult.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+/**\n+ * The possible results from a conflict resolution. Either the local data was discarded, kept, or\n+ * some new model instance is used which neither purely local or remote in origin.", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNDU3MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415334571", "bodyText": "That was my miss. Updated now.", "author": "rjuliano", "createdAt": "2020-04-26T15:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConflictHandlerResult.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConflictHandlerResult.java\nindex 6071a5a7..0036f5d6 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConflictHandlerResult.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConflictHandlerResult.java\n\n@@ -16,8 +16,10 @@\n package com.amplifyframework.datastore;\n \n /**\n- * The possible results from a conflict resolution. Either the local data was discarded, kept, or\n- * some new model instance is used which neither purely local or remote in origin.\n+ * The possible results from a conflict resolution. Either we tried to apply the remote changes\n+ * to the local store, OR retried to update the remote store using the local version of the model\n+ * OR retried updating the remote store using a version of the object different than both local\n+ * and remote.\n  */\n public enum DataStoreConflictHandlerResult {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTcyMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415235723", "bodyText": "What happens if this thing fails to resolve a conflict? Does it throw an exception? Say for example, the strategy involves SQL operations, but the database is full.", "author": "jamesonwilliams", "createdAt": "2020-04-26T06:58:03Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConflictHandler.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+\n+/**\n+ * Handles conflicts between models observed during model synchronization in the DataStore.\n+ * Such conflicts may arise between version of models kept locally, and competing versions\n+ * found in the remote AppSync system.\n+ */\n+public interface DataStoreConflictHandler {\n+    /**\n+     * Resolves a DataStore conflict.\n+     * @param conflictData Data about the conflict.\n+     * @param onResult A callback that should be invoked when the conflict handling is complete.\n+     * @param <T> The type of model for which a conflict was observed\n+     */\n+    <T extends Model> void resolveConflict(", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzODEwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415338101", "bodyText": "So I think we have a couple of options:\n\n\nCurrent implementation Allow the implementation classes to handle the error in whatever manner they see appropriate. ApplyRemoteConflictHandler for example, does this by making the user provide an instance of an DataStoreErrorHandler in the constructor.\n\n\nAlternative 1 add a Consumer<Throwable> as a third parameter\n\n\nAlternative 2 add a DataStoreErrorHandler as a third parameter. This would force any implementation of DataStoreConflictHandler to use an error handler.\n\n\nThoughts?", "author": "rjuliano", "createdAt": "2020-04-26T15:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5MjgxNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415992814", "bodyText": "Hmm. Maybe @drochetti thought about this one. If so / if not, maybe we should pow-wow with him for 15 minutes later today to discuss this specific topic?\nWe can also do a variant of #2, where-in we try/catch the conflict handler, and then dispatch any exception to the datastore handler. The user would continue to provide the same handler that they do now. And we would enforce the policy of falling back to the error handler, in an internal final class that the user couldn't get at.", "author": "jamesonwilliams", "createdAt": "2020-04-27T17:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY4MzM0OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r416683348", "bodyText": "Agreed. I think once we actually wire the call to the conflict handler, we do exactly what you described. Wrap it in a try catch and use the configured error handler", "author": "rjuliano", "createdAt": "2020-04-28T14:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTcyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjEwMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415236100", "bodyText": "Shouldn't need this if. In the case that syncPageSize == DEFAULT_SYNC_PAGE_SIZE, you'd just set the value to the same thing again. Which wouldn't change the system behavior.", "author": "jamesonwilliams", "createdAt": "2020-04-26T07:00:07Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL:\n+                        builder.syncIntervalMs(pluginJson.getLong(ConfigKey.SYNC_INTERVAL.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder().build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public long getSyncIntervalInMinutes() {\n+        return this.syncIntervalInMinutes;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncMaxRecords() {\n+        return this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncPageSize() {\n+        return this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalMs;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;\n+\n+        private Builder() {\n+            this.dataStoreErrorHandler = DefaultDataStoreErrorHandler.instance();\n+            this.dataStoreConflictHandler = ApplyRemoteConflictHandler.instance(dataStoreErrorHandler);\n+            this.syncIntervalMs = DEFAULT_SYNC_INTERVAL_MINUTES;\n+            this.syncMaxRecords = DEFAULT_SYNC_MAX_RECORDS;\n+            this.syncPageSize = DEFAULT_SYNC_PAGE_SIZE;\n+        }\n+\n+        /**\n+         * A handler that will be invoked whenever there is a conflict between two model instances,\n+         * one in the local store, and one from the remote server, as received from a sync operation.\n+         * @param dataStoreConflictHandler A handler to invoke upon sync conflicts\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder dataStoreConflictHandler(@NonNull DataStoreConflictHandler dataStoreConflictHandler) {\n+            this.dataStoreConflictHandler = Objects.requireNonNull(dataStoreConflictHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets a handler function to be applied when the DataStore encounters an unrecoverable error\n+         * in one of its ongoing background operations (model synchronization).\n+         * @param dataStoreErrorHandler A handler for unrecoverable background errors\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder dataStoreErrorHandler(@NonNull DataStoreErrorHandler dataStoreErrorHandler) {\n+            this.dataStoreErrorHandler = Objects.requireNonNull(dataStoreErrorHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the duration of time after which delta syncs will not be preferred over base syncs.\n+         * @param syncIntervalMs The amount of time that must elapse for delta syncs to not be considered\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncIntervalMs(@IntRange(from = 0) long syncIntervalMs) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncIntervalMs != DEFAULT_SYNC_INTERVAL_MINUTES) {\n+                this.syncIntervalMs = syncIntervalMs;\n+            }\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the maximum number of records, from the server, to process from a sync operation.\n+         * @param syncMaxRecords Max number of records client will consumer from server at one time\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncMaxRecords(@IntRange(from = 0) int syncMaxRecords) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncMaxRecords != DEFAULT_SYNC_MAX_RECORDS) {\n+                this.syncMaxRecords = syncMaxRecords;\n+            }\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the number of items requested in each page of sync results.\n+         * @param syncPageSize Number of items requested per page in sync operation\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder syncPageSize(@IntRange(from = 0) int syncPageSize) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncPageSize != DEFAULT_SYNC_PAGE_SIZE) {", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzMzc1MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415333750", "bodyText": "See above", "author": "rjuliano", "createdAt": "2020-04-26T15:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 350895e9..c82499a9 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -32,11 +32,10 @@ import java.util.concurrent.TimeUnit;\n /**\n  * A user-provided configuration for the DataStore.\n  */\n-@SuppressWarnings(\"unused\")\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n-    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjEyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415236122", "bodyText": "Same, shouldn't need the if.", "author": "jamesonwilliams", "createdAt": "2020-04-26T07:00:20Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL:\n+                        builder.syncIntervalMs(pluginJson.getLong(ConfigKey.SYNC_INTERVAL.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder().build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public long getSyncIntervalInMinutes() {\n+        return this.syncIntervalInMinutes;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncMaxRecords() {\n+        return this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncPageSize() {\n+        return this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalMs;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;\n+\n+        private Builder() {\n+            this.dataStoreErrorHandler = DefaultDataStoreErrorHandler.instance();\n+            this.dataStoreConflictHandler = ApplyRemoteConflictHandler.instance(dataStoreErrorHandler);\n+            this.syncIntervalMs = DEFAULT_SYNC_INTERVAL_MINUTES;\n+            this.syncMaxRecords = DEFAULT_SYNC_MAX_RECORDS;\n+            this.syncPageSize = DEFAULT_SYNC_PAGE_SIZE;\n+        }\n+\n+        /**\n+         * A handler that will be invoked whenever there is a conflict between two model instances,\n+         * one in the local store, and one from the remote server, as received from a sync operation.\n+         * @param dataStoreConflictHandler A handler to invoke upon sync conflicts\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder dataStoreConflictHandler(@NonNull DataStoreConflictHandler dataStoreConflictHandler) {\n+            this.dataStoreConflictHandler = Objects.requireNonNull(dataStoreConflictHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets a handler function to be applied when the DataStore encounters an unrecoverable error\n+         * in one of its ongoing background operations (model synchronization).\n+         * @param dataStoreErrorHandler A handler for unrecoverable background errors\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder dataStoreErrorHandler(@NonNull DataStoreErrorHandler dataStoreErrorHandler) {\n+            this.dataStoreErrorHandler = Objects.requireNonNull(dataStoreErrorHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the duration of time after which delta syncs will not be preferred over base syncs.\n+         * @param syncIntervalMs The amount of time that must elapse for delta syncs to not be considered\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncIntervalMs(@IntRange(from = 0) long syncIntervalMs) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncIntervalMs != DEFAULT_SYNC_INTERVAL_MINUTES) {\n+                this.syncIntervalMs = syncIntervalMs;\n+            }\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the maximum number of records, from the server, to process from a sync operation.\n+         * @param syncMaxRecords Max number of records client will consumer from server at one time\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncMaxRecords(@IntRange(from = 0) int syncMaxRecords) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncMaxRecords != DEFAULT_SYNC_MAX_RECORDS) {", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzMzY0Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415333642", "bodyText": "See above", "author": "rjuliano", "createdAt": "2020-04-26T15:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 350895e9..c82499a9 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -32,11 +32,10 @@ import java.util.concurrent.TimeUnit;\n /**\n  * A user-provided configuration for the DataStore.\n  */\n-@SuppressWarnings(\"unused\")\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n-    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjQ2NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415236464", "bodyText": "Uh oh! This builder didn't get updated. This still says ms, but it should say:\n@NonNull\npublic Builder syncIntervalInMinutes(@IntRange(from = 0) long syncIntervalInMinutes) {\n    this.syncIntervalMs = TimeUnit.MINUTES.toMilliseconds(syncIntervalInMunutes);\n    return Builder.this;\n}\n\nNo if needed.\nAs per comments further down -- this is a ~good place to do the unit conversion into ms, I think.\n(Human beings like minutes, but computers like milliseconds.)", "author": "jamesonwilliams", "createdAt": "2020-04-26T07:01:56Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL:\n+                        builder.syncIntervalMs(pluginJson.getLong(ConfigKey.SYNC_INTERVAL.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder().build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public long getSyncIntervalInMinutes() {\n+        return this.syncIntervalInMinutes;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncMaxRecords() {\n+        return this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncPageSize() {\n+        return this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalMs;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;\n+\n+        private Builder() {\n+            this.dataStoreErrorHandler = DefaultDataStoreErrorHandler.instance();\n+            this.dataStoreConflictHandler = ApplyRemoteConflictHandler.instance(dataStoreErrorHandler);\n+            this.syncIntervalMs = DEFAULT_SYNC_INTERVAL_MINUTES;\n+            this.syncMaxRecords = DEFAULT_SYNC_MAX_RECORDS;\n+            this.syncPageSize = DEFAULT_SYNC_PAGE_SIZE;\n+        }\n+\n+        /**\n+         * A handler that will be invoked whenever there is a conflict between two model instances,\n+         * one in the local store, and one from the remote server, as received from a sync operation.\n+         * @param dataStoreConflictHandler A handler to invoke upon sync conflicts\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder dataStoreConflictHandler(@NonNull DataStoreConflictHandler dataStoreConflictHandler) {\n+            this.dataStoreConflictHandler = Objects.requireNonNull(dataStoreConflictHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets a handler function to be applied when the DataStore encounters an unrecoverable error\n+         * in one of its ongoing background operations (model synchronization).\n+         * @param dataStoreErrorHandler A handler for unrecoverable background errors\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder dataStoreErrorHandler(@NonNull DataStoreErrorHandler dataStoreErrorHandler) {\n+            this.dataStoreErrorHandler = Objects.requireNonNull(dataStoreErrorHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the duration of time after which delta syncs will not be preferred over base syncs.\n+         * @param syncIntervalMs The amount of time that must elapse for delta syncs to not be considered\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncIntervalMs(@IntRange(from = 0) long syncIntervalMs) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncIntervalMs != DEFAULT_SYNC_INTERVAL_MINUTES) {", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzMzYxMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415333613", "bodyText": "Yikes...missed that one. The method has been renamed.\nRegarding the if statements, see my response in line 90 of DataStoreConfiguration.java.\nWe can definitely revisit this, but it will be dependent on what we decide with regards to making the scalar values nullable. This is basically a mechanism for us to determine the intent of the developer by assuming that they only want to override anything if a non-default value is passed.", "author": "rjuliano", "createdAt": "2020-04-26T15:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5MzM2Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415993363", "bodyText": "Okay cool I understand the intent now! Thanks", "author": "jamesonwilliams", "createdAt": "2020-04-27T17:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY4NDczNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r416684736", "bodyText": "My latest commit makes the scalar values nullable and returns defaults from the getters if the underlying field is null", "author": "rjuliano", "createdAt": "2020-04-28T14:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 350895e9..c82499a9 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -32,11 +32,10 @@ import java.util.concurrent.TimeUnit;\n /**\n  * A user-provided configuration for the DataStore.\n  */\n-@SuppressWarnings(\"unused\")\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n-    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjg4NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415236885", "bodyText": "I don't think you ever use the fact that these are objects. (They have non-null default values, and you overwrite the m via primitive types.)\nSo, I think it should be both safe and preferable to store these as their primitive counterparsts,long and int .", "author": "jamesonwilliams", "createdAt": "2020-04-26T07:04:23Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL:\n+                        builder.syncIntervalMs(pluginJson.getLong(ConfigKey.SYNC_INTERVAL.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder().build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public long getSyncIntervalInMinutes() {\n+        return this.syncIntervalInMinutes;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncMaxRecords() {\n+        return this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncPageSize() {\n+        return this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalMs;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyMjA1Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415322053", "bodyText": "I toyed around with the idea of making these nullable, but forgot to change these declarations back", "author": "rjuliano", "createdAt": "2020-04-26T14:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 350895e9..c82499a9 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -32,11 +32,10 @@ import java.util.concurrent.TimeUnit;\n /**\n  * A user-provided configuration for the DataStore.\n  */\n-@SuppressWarnings(\"unused\")\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n-    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzQxNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415237415", "bodyText": "Since this one is user-exposed, I think we want this work in minutes, here. Inside the builder, convert to ms.", "author": "jamesonwilliams", "createdAt": "2020-04-26T07:06:54Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL:\n+                        builder.syncIntervalMs(pluginJson.getLong(ConfigKey.SYNC_INTERVAL.toString()));", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzMjYyNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415332625", "bodyText": "Done.", "author": "rjuliano", "createdAt": "2020-04-26T15:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 350895e9..c82499a9 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -32,11 +32,10 @@ import java.util.concurrent.TimeUnit;\n /**\n  * A user-provided configuration for the DataStore.\n  */\n-@SuppressWarnings(\"unused\")\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n-    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzg0NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415237845", "bodyText": "Hm, how does this  work? Doesn't the user config always clobber the file config?", "author": "jamesonwilliams", "createdAt": "2020-04-26T07:09:29Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzMjQ0Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415332446", "bodyText": "It would, it it wasn't for those \"check for default value\" if statement in the setters. Basically, the logic is as follows:\n\nCreate a builder using the settings from amplifyconfiguration.json. (builder(pluginJson))\nThen call the setters for each of the properties of the builder by passing in the corresponding value from userProvidedConfiguration.\n\nThis results in any non-default values provided in userProvidedConfiguration to override whatever was in the JSON, which I believe is the behavior we were looking for.\nThe other option I considered was to make the scalar values in the configuration object nullable. We would then only override using non-null values from userProvidedConfiguration. This in turn, added some complexity where I'd have to create a config object without default values and then pass the burden of checking whether or not they were null down to the wherever the settings are actually read.\nLet me know if this makes sense.", "author": "rjuliano", "createdAt": "2020-04-26T15:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5NzIyMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415997221", "bodyText": "non-default values provided in userProvidedConfiguration to override whatever was in the JSON\n\nI think this means that you'll still overwrite config file values, if they aren't the defaults. No?\nI like the second mechanism you propose, better, I think.\nBasically:\n\nCreate a config from the file json. This will have 0...all values as null;\nCreate a config from user. This will have 0...all values as null;\nMerge the two configs according to the rule:\n\nif (userProvided.getSomeConfigValue() != null) {\n    use(userProvided.getSomeConfigValue());\n} else {\n    use(configFileProvided.getSomeConfigValue());\n\n\nAs a final step, evaluate the merged config. If any fields are still null, then use a default value.\n\nThat is kind of a lot of machinery isn't it (eye-roll) sigh.", "author": "jamesonwilliams", "createdAt": "2020-04-27T17:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyNDgyNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r416024824", "bodyText": "I think this means that you'll still overwrite config file values, if they aren't the defaults. No?\n\nCorrect. The assumption here is that any non-default values passed via the userProvidedConfiguration will clobber anything that was set via the file. That being said, if we want to respect any non-default settings set via the config file, I can add an extra check in the setters:\npublic Builder syncMaxRecords(@IntRange(from = 0) int syncMaxRecords) {\n    //Only set this value if the current value is default AND the incoming value is NOT default\n    if (this.syncMaxRecords == DEFAULT_SYNC_MAX_RECORDS && \n        syncMaxRecords != DEFAULT_SYNC_MAX_RECORDS) {\n        this.syncMaxRecords = syncMaxRecords;\n    }\n    return Builder.this;\n}\n\nI think in the end, it comes down to deciding which is more authoritative: the config file or the java object passed in via the constructor.\nThe drawback of making them nullable is that you need to have that extra step to ensure defaults are set. When I started going that route, there was no clear place for that. I couldn't do it on the build method of the builder, because I actually need the values to remain null. So I would need something (probably in the plugin's configure method) that would set those defaults.\nAnother thing I just thought of if we want to go the null route, is that I could modify the getters to return their respective defaults if the underlying field is null. I may give that a try.", "author": "rjuliano", "createdAt": "2020-04-27T17:52:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA3NDQ0OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r416074448", "bodyText": "That actually worked, so I updated the code to make the fields null (with the exception of the handler) to start with and then I only write to them if the underlying field is null. The getters, in turn, return a default value if the underlying field is null", "author": "rjuliano", "createdAt": "2020-04-27T19:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE1NjkxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418156917", "bodyText": "Changes made in the latest commit\n\nRemoved the logic from the getters and modified the builder's build method to ensure defaults when instructed to do so.", "author": "rjuliano", "createdAt": "2020-04-30T17:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 350895e9..c82499a9 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -32,11 +32,10 @@ import java.util.concurrent.TimeUnit;\n /**\n  * A user-provided configuration for the DataStore.\n  */\n-@SuppressWarnings(\"unused\")\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n-    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzODE2Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415238166", "bodyText": "You can probably strip this off now that it's being referenced at least from test", "author": "jamesonwilliams", "createdAt": "2020-04-26T07:11:30Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyOTE0MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415329141", "bodyText": "Done", "author": "rjuliano", "createdAt": "2020-04-26T14:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzODE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 350895e9..c82499a9 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -32,11 +32,10 @@ import java.util.concurrent.TimeUnit;\n /**\n  * A user-provided configuration for the DataStore.\n  */\n-@SuppressWarnings(\"unused\")\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n-    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzODQwNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415238404", "bodyText": "Are these default values the same on iOS and JavaScript? I don't remember, but I may have just made these up on the fly.", "author": "jamesonwilliams", "createdAt": "2020-04-26T07:12:36Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyOTg1Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415329853", "bodyText": "I was missing a 0 from DEFAULT_SYNC_MAX_RECORDS...iOS is using 10_000", "author": "rjuliano", "createdAt": "2020-04-26T15:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzODQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 350895e9..c82499a9 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -32,11 +32,10 @@ import java.util.concurrent.TimeUnit;\n /**\n  * A user-provided configuration for the DataStore.\n  */\n-@SuppressWarnings(\"unused\")\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n-    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzOTIyMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415239223", "bodyText": "Can we push this null check down into the builder(...) so that we don't have to process it in this block here in the plugin? That is,\ndataStoreConfiguration = DataStoreConfiguration.builder(configFromDisk, null).build();", "author": "jamesonwilliams", "createdAt": "2020-04-26T07:16:58Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -148,13 +163,24 @@ public String getPluginKey() {\n     @SuppressLint(\"CheckResult\")\n     @Override\n     public void configure(\n-            @Nullable JSONObject pluginConfiguration,\n+            @NonNull JSONObject pluginConfiguration,\n             @NonNull Context context\n     ) throws DataStoreException {\n         try {\n-            this.pluginConfiguration =\n-                AWSDataStorePluginConfiguration.fromJson(pluginConfiguration);\n+            DataStoreConfiguration dataStoreConfiguration;\n+            if (userProvidedConfiguration == null) {\n+                dataStoreConfiguration = DataStoreConfiguration\n+                    .builder(pluginConfiguration)\n+                    .build();\n+            } else {\n+                dataStoreConfiguration = DataStoreConfiguration\n+                    .builder(pluginConfiguration, userProvidedConfiguration)", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyOTAxNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415329016", "bodyText": "That's easy enough to do. I was debating doing that, but decided against pushing that logic to the builder. In hindsight, it's the right place for it.", "author": "rjuliano", "createdAt": "2020-04-26T14:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzOTIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\nindex 9bbac91a..04ac5aba 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\n@@ -167,20 +163,10 @@ public final class AWSDataStorePlugin extends DataStorePlugin<Void> {\n             @NonNull Context context\n     ) throws DataStoreException {\n         try {\n-            DataStoreConfiguration dataStoreConfiguration;\n-            if (userProvidedConfiguration == null) {\n-                dataStoreConfiguration = DataStoreConfiguration\n-                    .builder(pluginConfiguration)\n-                    .build();\n-            } else {\n-                dataStoreConfiguration = DataStoreConfiguration\n-                    .builder(pluginConfiguration, userProvidedConfiguration)\n-                    .build();\n-            }\n-            dataStoreConfigurationProvider.onNext(dataStoreConfiguration);\n-            dataStoreConfigurationProvider.onComplete();\n+            this.pluginConfiguration = DataStoreConfiguration\n+                .builder(pluginConfiguration, userProvidedConfiguration)\n+                .build();\n         } catch (DataStoreException badConfigException) {\n-            dataStoreConfigurationProvider.onError(badConfigException);\n             throw new DataStoreException(\n                 \"There was an issue configuring the plugin from the amplifyconfiguration.json\",\n                 badConfigException,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0MDgyOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415240829", "bodyText": "I guess there are two ways of looking at this:\n\nThe current view:\n\n\nThe orchestrator is an optional component. It's presence is determined by the content of the configuration. If the configuration does not permit remote sync, then don't create an orchestrator.\n\n\nThe original view:\n\n\nThe orchestrator is a data store component, it is constructed at the same time as the plugin. Later, if the configuration determines that sync should be enabled, the orchestrator is started.\n\nRealistically, the only concrete concern is whether or not orchestrator is null at the time you call start. So long as configuration is definitely done by the time initialize() rolls around, you should be good.", "author": "jamesonwilliams", "createdAt": "2020-04-26T07:25:56Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -62,28 +65,39 @@\n \n     // A component which synchronizes data state between the\n     // local storage adapter, and a remote API\n-    private final Orchestrator orchestrator;\n+    private Orchestrator orchestrator;\n \n     // Keeps track of whether of not the category is initialized yet\n     private final CountDownLatch categoryInitializationsPending;\n \n     // Configuration for the plugin.\n-    private AWSDataStorePluginConfiguration pluginConfiguration;\n+    private final DataStoreConfiguration userProvidedConfiguration;\n+    private final AsyncSubject<DataStoreConfiguration> dataStoreConfigurationProvider;\n \n+    @SuppressLint(\"CheckResult\")\n     private AWSDataStorePlugin(\n-            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n             @NonNull ModelProvider modelProvider,\n-            @NonNull GraphQlBehavior api) {\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull GraphQlBehavior api,\n+            @Nullable DataStoreConfiguration userProvidedConfiguration) {\n         this.sqliteStorageAdapter = SQLiteStorageAdapter.forModels(modelSchemaRegistry, modelProvider);\n         this.storageItemChangeConverter = new GsonStorageItemChangeConverter();\n         this.categoryInitializationsPending = new CountDownLatch(1);\n-        this.orchestrator = new Orchestrator(\n-            modelProvider,\n-            modelSchemaRegistry,\n-            sqliteStorageAdapter,\n-            AppSyncClient.via(api),\n-            () -> pluginConfiguration.getBaseSyncIntervalMs()\n+        dataStoreConfigurationProvider = AsyncSubject.create();\n+\n+        dataStoreConfigurationProvider.subscribe(initializedConfiguration -> {\n+            orchestrator = new Orchestrator(", "originalCommit": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyNzMzMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415327333", "bodyText": "After going back through, I went with a version that's more closely aligned with the original view. I have a pluginConfiguration class variable in the Orchestrator ' and also pass a reference to that in to the SyncEngine (where it's actually used). That variable gets initialized in the configure method of the Orchestrator, so by the time the SyncEngine needs it, it will should be set.", "author": "rjuliano", "createdAt": "2020-04-26T14:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0MDgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\nindex 9bbac91a..04ac5aba 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\n@@ -70,9 +69,12 @@ public final class AWSDataStorePlugin extends DataStorePlugin<Void> {\n     // Keeps track of whether of not the category is initialized yet\n     private final CountDownLatch categoryInitializationsPending;\n \n-    // Configuration for the plugin.\n+    // User-provided configuration for the plugin.\n     private final DataStoreConfiguration userProvidedConfiguration;\n-    private final AsyncSubject<DataStoreConfiguration> dataStoreConfigurationProvider;\n+\n+    // Configuration for the plugin that contains settings from the JSON file plus any\n+    // overrides provided via the userProvidedConfiguration\n+    private DataStoreConfiguration pluginConfiguration;\n \n     @SuppressLint(\"CheckResult\")\n     private AWSDataStorePlugin(\n"}}, {"oid": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "url": "https://github.com/aws-amplify/amplify-android/commit/8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "message": "PR feedback", "committedDate": "2020-04-26T22:57:54Z", "type": "commit"}, {"oid": "c98450b8b3d5f587fa04f452a66b42e527a6fe46", "url": "https://github.com/aws-amplify/amplify-android/commit/c98450b8b3d5f587fa04f452a66b42e527a6fe46", "message": "Change scalar types to nullable", "committedDate": "2020-04-27T19:03:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MjI5NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r417692295", "bodyText": "I'd expect that dataStoreConfiguration would be guaranteed non-null, here. That is, if there's no config file, and the user supplies no config, then you still have some system defaults you can use. Right? So, those could go into a non-null dataStoreConfiguration. And that would have a different effect here.\nThe current logic says basically \"never do a delta sync.\"\nBut that's not what we want -- we want a delta sync if the last sync time is within some san default (1 day? Whatever it is?)\nIn other words, I'd prefer to have an Objects.requireNonNull(...) and @NonNull directive on the SyncProcessor constructor, and then just never have to worry about this branch, in this spot.", "author": "jamesonwilliams", "createdAt": "2020-04-30T00:39:51Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -121,14 +122,13 @@ Completable hydrate() {\n      * @param lastSyncTime The time of a last successful sync.\n      * @return The input, or {@link SyncTime#never()}, if the last sync time is \"too old.\"\n      */\n-    private SyncTime filterOutOldSyncTimes(SyncTime lastSyncTime) throws DataStoreException {\n-        if (!lastSyncTime.exists()) {\n+    private SyncTime filterOutOldSyncTimes(SyncTime lastSyncTime) {\n+        if (!lastSyncTime.exists() || dataStoreConfiguration == null) {", "originalCommit": "c98450b8b3d5f587fa04f452a66b42e527a6fe46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczNDE3Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r417734177", "bodyText": "Yeah. I added this here to prevent a potential NPE, but by the time it gets here, we\u2019re sure to have at least default values.", "author": "rjuliano", "createdAt": "2020-04-30T03:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MjI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE1OTAwNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418159005", "bodyText": "Changes made in the latest commit\nI created a provider interface that I'm now passing from the the plugin down to the Orchestrator and SyncProcessors. By the time these classes invoke the provider method to get the configuration, the plugin will have already setup the configuration in the configure method.", "author": "rjuliano", "createdAt": "2020-04-30T17:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MjI5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java\nindex 96c6cc85..6533be93 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java\n\n@@ -122,13 +122,14 @@ final class SyncProcessor {\n      * @param lastSyncTime The time of a last successful sync.\n      * @return The input, or {@link SyncTime#never()}, if the last sync time is \"too old.\"\n      */\n-    private SyncTime filterOutOldSyncTimes(SyncTime lastSyncTime) {\n-        if (!lastSyncTime.exists() || dataStoreConfiguration == null) {\n+    private SyncTime filterOutOldSyncTimes(SyncTime lastSyncTime) throws DataStoreException {\n+        if (!lastSyncTime.exists()) {\n             return SyncTime.never();\n         }\n \n         // \"If (now - last sync time) is within the base sync interval\"\n-        if (Time.now() - lastSyncTime.toLong() <= dataStoreConfiguration.getSyncIntervalMs()) {\n+        if (Time.now() - lastSyncTime.toLong() <=\n+            dataStoreConfigurationProvider.getConfiguration().getSyncIntervalMs()) {\n             // Pass through the last sync time, so that it can be used to compute delta sync.\n             return lastSyncTime;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5Mjk2Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r417692962", "bodyText": "This is still a little spooky. If do:\nbuilder.syncMaxRecords(1000)\n    .syncMaxRecords(500)\n    .build();\n\nThe value is 1000 even though I'd probably expect it to be 500...\n(Same for others with this pattern.)", "author": "jamesonwilliams", "createdAt": "2020-04-30T00:42:16Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final Integer syncMaxRecords;\n+    private final Integer syncPageSize;\n+    private Long syncIntervalMs;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            Long syncIntervalInMinutes,\n+            Integer syncMaxRecords,\n+            Integer syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+        if (syncIntervalInMinutes != null) {\n+            this.syncIntervalMs = TimeUnit.MINUTES.toMillis(syncIntervalInMinutes);\n+        }\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @Nullable DataStoreConfiguration userProvidedConfiguration)\n+        throws DataStoreException {\n+        Builder builder = builder(pluginJson);\n+        if (userProvidedConfiguration != null) {\n+            builder.syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+                .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+                .syncIntervalInMinutes(\n+                    TimeUnit.MILLISECONDS.toMinutes(userProvidedConfiguration.getSyncIntervalMs()))\n+                .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+                .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+        }\n+        return builder;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL_IN_MINUTES:\n+                        builder.syncIntervalInMinutes(pluginJson\n+                            .getLong(ConfigKey.SYNC_INTERVAL_IN_MINUTES.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder()\n+            .syncIntervalInMinutes(DEFAULT_SYNC_INTERVAL_MINUTES)\n+            .syncPageSize(DEFAULT_SYNC_PAGE_SIZE)\n+            .syncMaxRecords(DEFAULT_SYNC_MAX_RECORDS)\n+            .build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public Long getSyncIntervalMs() {\n+        return this.syncIntervalMs == null ? DEFAULT_SYNC_INTERVAL_MS : this.syncIntervalMs;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncMaxRecords() {\n+        return this.syncMaxRecords == null ? DEFAULT_SYNC_MAX_RECORDS : this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncPageSize() {\n+        return this.syncPageSize == null ? DEFAULT_SYNC_PAGE_SIZE : this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalInMinutes;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;\n+\n+        private Builder() {\n+            this.dataStoreErrorHandler = DefaultDataStoreErrorHandler.instance();\n+            this.dataStoreConflictHandler = ApplyRemoteConflictHandler.instance(dataStoreErrorHandler);\n+        }\n+\n+        /**\n+         * A handler that will be invoked whenever there is a conflict between two model instances,\n+         * one in the local store, and one from the remote server, as received from a sync operation.\n+         * @param dataStoreConflictHandler A handler to invoke upon sync conflicts\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder dataStoreConflictHandler(@NonNull DataStoreConflictHandler dataStoreConflictHandler) {\n+            this.dataStoreConflictHandler = Objects.requireNonNull(dataStoreConflictHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets a handler function to be applied when the DataStore encounters an unrecoverable error\n+         * in one of its ongoing background operations (model synchronization).\n+         * @param dataStoreErrorHandler A handler for unrecoverable background errors\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder dataStoreErrorHandler(@NonNull DataStoreErrorHandler dataStoreErrorHandler) {\n+            this.dataStoreErrorHandler = Objects.requireNonNull(dataStoreErrorHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the duration of time after which delta syncs will not be preferred over base syncs.\n+         * @param syncIntervalInMinutes The amount of time that must elapse for delta syncs to not be considered\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncIntervalInMinutes(@IntRange(from = 0) Long syncIntervalInMinutes) {\n+            //Only set this value if the incoming value is null\n+            if (this.syncIntervalInMinutes == null) {\n+                this.syncIntervalInMinutes = syncIntervalInMinutes;\n+            }\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the maximum number of records, from the server, to process from a sync operation.\n+         * @param syncMaxRecords Max number of records client will consumer from server at one time\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncMaxRecords(@IntRange(from = 0) Integer syncMaxRecords) {\n+            //Only set this value if the incoming value is null\n+            if (this.syncMaxRecords == null) {", "originalCommit": "c98450b8b3d5f587fa04f452a66b42e527a6fe46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczMjYyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r417732622", "bodyText": "Yeah...i agree, it feels wonky. I\u2019ll review this tomorrow just to make sure. The struggle here is trying to come up with a mechanism that we can use to determine which values have precedence over the other. I would imagine we want to create the object with defaults, then read from file, then use anything passed in by the user.\nI\u2019ll take another look at it tomorrow.", "author": "rjuliano", "createdAt": "2020-04-30T03:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5Mjk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 7f5693c0..4cd990cc 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -30,7 +30,7 @@ import java.util.Objects;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * A user-provided configuration for the DataStore.\n+ * Configuration options for {@link AWSDataStorePlugin}.\n  */\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MzE2MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r417693161", "bodyText": "Can you put this construction stuff in the build() so that the DataStoreConfiguration doesn't have any logic, it just returned a single, final, stored instance value?\n(Same for others with this pattern.)", "author": "jamesonwilliams", "createdAt": "2020-04-30T00:43:06Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final Integer syncMaxRecords;\n+    private final Integer syncPageSize;\n+    private Long syncIntervalMs;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            Long syncIntervalInMinutes,\n+            Integer syncMaxRecords,\n+            Integer syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+        if (syncIntervalInMinutes != null) {\n+            this.syncIntervalMs = TimeUnit.MINUTES.toMillis(syncIntervalInMinutes);\n+        }\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @Nullable DataStoreConfiguration userProvidedConfiguration)\n+        throws DataStoreException {\n+        Builder builder = builder(pluginJson);\n+        if (userProvidedConfiguration != null) {\n+            builder.syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+                .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+                .syncIntervalInMinutes(\n+                    TimeUnit.MILLISECONDS.toMinutes(userProvidedConfiguration.getSyncIntervalMs()))\n+                .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+                .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+        }\n+        return builder;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL_IN_MINUTES:\n+                        builder.syncIntervalInMinutes(pluginJson\n+                            .getLong(ConfigKey.SYNC_INTERVAL_IN_MINUTES.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder()\n+            .syncIntervalInMinutes(DEFAULT_SYNC_INTERVAL_MINUTES)\n+            .syncPageSize(DEFAULT_SYNC_PAGE_SIZE)\n+            .syncMaxRecords(DEFAULT_SYNC_MAX_RECORDS)\n+            .build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public Long getSyncIntervalMs() {\n+        return this.syncIntervalMs == null ? DEFAULT_SYNC_INTERVAL_MS : this.syncIntervalMs;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncMaxRecords() {\n+        return this.syncMaxRecords == null ? DEFAULT_SYNC_MAX_RECORDS : this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncPageSize() {\n+        return this.syncPageSize == null ? DEFAULT_SYNC_PAGE_SIZE : this.syncPageSize;", "originalCommit": "c98450b8b3d5f587fa04f452a66b42e527a6fe46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4MDI3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418180270", "bodyText": "Changes made in the latest commit\nWith the latest commit, the following rules should apply:\n\nRead settings from config file (if any)\nRead settings from user-provided POJO (if any). Apply any non-null values\nFill in any missing fields with default values if instructed to do so (More on that below)\n\nChanges to DataStoreConfiguration.Builder\n\nMoved most of the logic out of the DataStoreConfiguration methods\nAdded a constructor that takes an instance of DataStoreConfiguration as the user-provided settings in addition to the JSON values\nAdded a field to the Builder called ensureDefaults. This field is only set to true if the new constructor is called.\nModified build() method to populate defaults if  ensureDefaults is true\n\nChanges to DataStoreConfiguration\n\nMarked two builder methods(builder(JSONObject), and builder(JSONObject, DataStoreConfiguration)) as package private so they should only be callable internally. This leaves the parameter-less builder() method as the only option when user's want to create an instance of DataStoreConfiguration to pass in overrides. When created via this method, the builder's build() method will leave any scalar fields not explicitly set by the user as null.\nSimplified getters and added a new getter for getSyncIntervalInMinutes", "author": "rjuliano", "createdAt": "2020-04-30T17:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MzE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 7f5693c0..4cd990cc 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -30,7 +30,7 @@ import java.util.Objects;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * A user-provided configuration for the DataStore.\n+ * Configuration options for {@link AWSDataStorePlugin}.\n  */\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5Mzc4MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r417693781", "bodyText": "You actually use it to model a few things right, it is no longer just user-provided?", "author": "jamesonwilliams", "createdAt": "2020-04-30T00:45:16Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.", "originalCommit": "c98450b8b3d5f587fa04f452a66b42e527a6fe46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 7f5693c0..4cd990cc 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -30,7 +30,7 @@ import java.util.Objects;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * A user-provided configuration for the DataStore.\n+ * Configuration options for {@link AWSDataStorePlugin}.\n  */\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n"}}, {"oid": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "url": "https://github.com/aws-amplify/amplify-android/commit/6c3c4c5522dcd21c055d511c03afb970e64bede5", "message": "Lazy initialization of config via provider. Move logic into builder.", "committedDate": "2020-04-30T16:38:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTE2Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418305166", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    orchestrator = new Orchestrator(\n          \n          \n            \n                    this.orchestrator = new Orchestrator(", "author": "jamesonwilliams", "createdAt": "2020-04-30T21:40:51Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -62,28 +64,36 @@\n \n     // A component which synchronizes data state between the\n     // local storage adapter, and a remote API\n-    private final Orchestrator orchestrator;\n+    private Orchestrator orchestrator;\n \n     // Keeps track of whether of not the category is initialized yet\n     private final CountDownLatch categoryInitializationsPending;\n \n-    // Configuration for the plugin.\n-    private AWSDataStorePluginConfiguration pluginConfiguration;\n+    // User-provided configuration for the plugin.\n+    private final DataStoreConfiguration userProvidedConfiguration;\n \n+    // Configuration for the plugin that contains settings from the JSON file plus any\n+    // overrides provided via the userProvidedConfiguration\n+    private DataStoreConfiguration pluginConfiguration;\n+\n+    @SuppressLint(\"CheckResult\")\n     private AWSDataStorePlugin(\n-            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n             @NonNull ModelProvider modelProvider,\n-            @NonNull GraphQlBehavior api) {\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull GraphQlBehavior api,\n+            @Nullable DataStoreConfiguration userProvidedConfiguration) {\n         this.sqliteStorageAdapter = SQLiteStorageAdapter.forModels(modelSchemaRegistry, modelProvider);\n         this.storageItemChangeConverter = new GsonStorageItemChangeConverter();\n         this.categoryInitializationsPending = new CountDownLatch(1);\n-        this.orchestrator = new Orchestrator(\n+\n+        orchestrator = new Orchestrator(", "originalCommit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dee83ae7247d0a71adf81a9caf50d6d1df02afc3", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\nindex f896214e..3e02d7ae 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\n@@ -86,7 +86,7 @@ public final class AWSDataStorePlugin extends DataStorePlugin<Void> {\n         this.storageItemChangeConverter = new GsonStorageItemChangeConverter();\n         this.categoryInitializationsPending = new CountDownLatch(1);\n \n-        orchestrator = new Orchestrator(\n+        this.orchestrator = new Orchestrator(\n             modelProvider,\n             modelSchemaRegistry,\n             sqliteStorageAdapter,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTM3MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418305371", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Orchestrator orchestrator;\n          \n          \n            \n                private final Orchestrator orchestrator;", "author": "jamesonwilliams", "createdAt": "2020-04-30T21:41:17Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -62,28 +64,36 @@\n \n     // A component which synchronizes data state between the\n     // local storage adapter, and a remote API\n-    private final Orchestrator orchestrator;\n+    private Orchestrator orchestrator;", "originalCommit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dee83ae7247d0a71adf81a9caf50d6d1df02afc3", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\nindex f896214e..3e02d7ae 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\n@@ -86,7 +86,7 @@ public final class AWSDataStorePlugin extends DataStorePlugin<Void> {\n         this.storageItemChangeConverter = new GsonStorageItemChangeConverter();\n         this.categoryInitializationsPending = new CountDownLatch(1);\n \n-        orchestrator = new Orchestrator(\n+        this.orchestrator = new Orchestrator(\n             modelProvider,\n             modelSchemaRegistry,\n             sqliteStorageAdapter,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTk5OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418305999", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.pluginConfiguration = DataStoreConfiguration\n          \n          \n            \n                        // Applies user-provided configs on-top-of any values from the file.\n          \n          \n            \n                        this.pluginConfiguration = DataStoreConfiguration", "author": "jamesonwilliams", "createdAt": "2020-04-30T21:42:46Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -148,12 +159,13 @@ public String getPluginKey() {\n     @SuppressLint(\"CheckResult\")\n     @Override\n     public void configure(\n-            @Nullable JSONObject pluginConfiguration,\n+            @NonNull JSONObject pluginConfiguration,\n             @NonNull Context context\n     ) throws DataStoreException {\n         try {\n-            this.pluginConfiguration =\n-                AWSDataStorePluginConfiguration.fromJson(pluginConfiguration);\n+            this.pluginConfiguration = DataStoreConfiguration", "originalCommit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7bc1729a0456ae00ad5f86ee8222c9a63431d4f7", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\nindex f896214e..fac37cc8 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\n@@ -163,6 +163,7 @@ public final class AWSDataStorePlugin extends DataStorePlugin<Void> {\n             @NonNull Context context\n     ) throws DataStoreException {\n         try {\n+            // Applies user-provided configs on-top-of any values from the file.\n             this.pluginConfiguration = DataStoreConfiguration\n                 .builder(pluginConfiguration, userProvidedConfiguration)\n                 .build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNjg4OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418306889", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import androidx.annotation.Nullable;\n          \n          \n            \n            import androidx.annotation.Nullable;\n          \n          \n            \n            import androidx.annotation.VisibleForTesting;", "author": "jamesonwilliams", "createdAt": "2020-04-30T21:44:47Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;", "originalCommit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f92b4fa2c2a8dacf0064681e38625e121a673074", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 4cd990cc..2ba31ced 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -34,9 +34,13 @@ import java.util.concurrent.TimeUnit;\n  */\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    @VisibleForTesting\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    @VisibleForTesting\n     static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    @VisibleForTesting \n     static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    @VisibleForTesting \n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNzM4Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418307383", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n          \n          \n            \n                static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n          \n          \n            \n                static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n          \n          \n            \n                static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n          \n          \n            \n                @VisibleForTesting\n          \n          \n            \n                static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n          \n          \n            \n                @VisibleForTesting\n          \n          \n            \n                static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n          \n          \n            \n                @VisibleForTesting \n          \n          \n            \n                static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n          \n          \n            \n                @VisibleForTesting \n          \n          \n            \n                static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;", "author": "jamesonwilliams", "createdAt": "2020-04-30T21:46:01Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Configuration options for {@link AWSDataStorePlugin}.\n+ */\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;", "originalCommit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f92b4fa2c2a8dacf0064681e38625e121a673074", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 4cd990cc..2ba31ced 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -34,9 +34,13 @@ import java.util.concurrent.TimeUnit;\n  */\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    @VisibleForTesting\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    @VisibleForTesting\n     static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    @VisibleForTesting \n     static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    @VisibleForTesting \n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwOTQ4Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418309483", "bodyText": "Suggested change", "author": "jamesonwilliams", "createdAt": "2020-04-30T21:51:05Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Configuration options for {@link AWSDataStorePlugin}.\n+ */\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final Integer syncMaxRecords;\n+    private final Integer syncPageSize;\n+    private Long syncIntervalInMinutes;\n+    private Long syncIntervalMs;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            Long syncIntervalInMinutes,\n+            Integer syncMaxRecords,\n+            Integer syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+        if (syncIntervalInMinutes != null) {\n+            this.syncIntervalInMinutes = syncIntervalInMinutes;\n+            this.syncIntervalMs = TimeUnit.MINUTES.toMillis(syncIntervalInMinutes);\n+        }\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file and an optional set of user-provided overrides.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    static Builder builder(@NonNull JSONObject pluginJson,\n+                           @Nullable DataStoreConfiguration userProvidedConfiguration) {\n+        return new Builder(pluginJson, userProvidedConfiguration);\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    static Builder builder(@NonNull JSONObject pluginJson) {\n+        return builder(pluginJson, null);\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() throws DataStoreException {\n+        return builder()\n+            .syncIntervalInMinutes(DEFAULT_SYNC_INTERVAL_MINUTES)\n+            .syncPageSize(DEFAULT_SYNC_PAGE_SIZE)\n+            .syncMaxRecords(DEFAULT_SYNC_MAX_RECORDS)\n+            .build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public Long getSyncIntervalMs() {\n+        return this.syncIntervalMs;\n+    }\n+\n+    @IntRange(from = 0)\n+    public Long getSyncIntervalInMinutes() {\n+        return this.syncIntervalInMinutes;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncMaxRecords() {\n+        return this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncPageSize() {\n+        return this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalInMinutes;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;\n+        private boolean ensureDefaults;\n+        private JSONObject pluginJson;\n+        private DataStoreConfiguration userProvidedConfiguration;\n+\n+        private Builder() {\n+            this.dataStoreErrorHandler = DefaultDataStoreErrorHandler.instance();\n+            this.dataStoreConflictHandler = ApplyRemoteConflictHandler.instance(dataStoreErrorHandler);\n+            this.ensureDefaults = false;\n+        }\n+\n+        private Builder(JSONObject pluginJson, DataStoreConfiguration userProvidedConfiguration) {\n+            this();\n+            this.pluginJson = pluginJson;\n+            this.userProvidedConfiguration = userProvidedConfiguration;\n+            this.ensureDefaults = true;\n+        }\n+\n+        /**\n+         * A handler that will be invoked whenever there is a conflict between two model instances,\n+         * one in the local store, and one from the remote server, as received from a sync operation.\n+         * @param dataStoreConflictHandler A handler to invoke upon sync conflicts\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder dataStoreConflictHandler(@NonNull DataStoreConflictHandler dataStoreConflictHandler) {\n+            this.dataStoreConflictHandler = Objects.requireNonNull(dataStoreConflictHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets a handler function to be applied when the DataStore encounters an unrecoverable error\n+         * in one of its ongoing background operations (model synchronization).\n+         * @param dataStoreErrorHandler A handler for unrecoverable background errors\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder dataStoreErrorHandler(@NonNull DataStoreErrorHandler dataStoreErrorHandler) {\n+            this.dataStoreErrorHandler = Objects.requireNonNull(dataStoreErrorHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the duration of time after which delta syncs will not be preferred over base syncs.\n+         * @param syncIntervalInMinutes The amount of time that must elapse for delta syncs to not be considered\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncIntervalInMinutes(@IntRange(from = 0) Long syncIntervalInMinutes) {\n+            this.syncIntervalInMinutes = syncIntervalInMinutes;\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the maximum number of records, from the server, to process from a sync operation.\n+         * @param syncMaxRecords Max number of records client will consumer from server at one time\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncMaxRecords(@IntRange(from = 0) Integer syncMaxRecords) {\n+            this.syncMaxRecords = syncMaxRecords;\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the number of items requested in each page of sync results.\n+         * @param syncPageSize Number of items requested per page in sync operation\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder syncPageSize(@IntRange(from = 0) Integer syncPageSize) {\n+            this.syncPageSize = syncPageSize;\n+            return Builder.this;\n+        }\n+\n+        private void populateSettingsFromJson() throws DataStoreException {\n+            if (pluginJson == null) {\n+                return;\n+            }\n+            final Iterator<String> jsonKeys = pluginJson.keys();\n+            while (jsonKeys.hasNext()) {\n+                final String keyString = jsonKeys.next();\n+                final ConfigKey configKey;\n+                try {\n+                    configKey = ConfigKey.fromString(keyString);\n+                } catch (IllegalArgumentException noSuchConfigKey) {\n+                    throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                    );\n+                }\n+                try {\n+                    switch (configKey) {\n+                        case SYNC_INTERVAL_IN_MINUTES:\n+                            this.syncIntervalInMinutes(pluginJson\n+                                .getLong(ConfigKey.SYNC_INTERVAL_IN_MINUTES.toString()));\n+                            break;\n+                        case SYNC_MAX_RECORDS:\n+                            this.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                            break;\n+                        case SYNC_PAGE_SIZE:\n+                            this.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                            break;\n+                        default:\n+                            throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                    }\n+                } catch (JSONException jsonException) {\n+                    throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                    );\n+                }\n+            }\n+        }\n+\n+        private void applyUserProvidedConfiguration() {\n+            if (userProvidedConfiguration == null) {\n+                return;\n+            }\n+            dataStoreErrorHandler = userProvidedConfiguration.getDataStoreErrorHandler();\n+            dataStoreConflictHandler = userProvidedConfiguration.getDataStoreConflictHandler();\n+            syncIntervalInMinutes = getValueOrDefault(\n+                userProvidedConfiguration.getSyncIntervalInMinutes(),\n+                syncIntervalInMinutes);\n+            syncMaxRecords = getValueOrDefault(userProvidedConfiguration.getSyncMaxRecords(), syncMaxRecords);\n+            syncPageSize = getValueOrDefault(userProvidedConfiguration.getSyncPageSize(), syncPageSize);\n+", "originalCommit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f92b4fa2c2a8dacf0064681e38625e121a673074", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 4cd990cc..2ba31ced 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -34,9 +34,13 @@ import java.util.concurrent.TimeUnit;\n  */\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    @VisibleForTesting\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    @VisibleForTesting\n     static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    @VisibleForTesting \n     static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    @VisibleForTesting \n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwOTk1MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418309950", "bodyText": "Should this also include our opinionated error and conflict handlers?", "author": "jamesonwilliams", "createdAt": "2020-04-30T21:52:07Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Configuration options for {@link AWSDataStorePlugin}.\n+ */\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final Integer syncMaxRecords;\n+    private final Integer syncPageSize;\n+    private Long syncIntervalInMinutes;\n+    private Long syncIntervalMs;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            Long syncIntervalInMinutes,\n+            Integer syncMaxRecords,\n+            Integer syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+        if (syncIntervalInMinutes != null) {\n+            this.syncIntervalInMinutes = syncIntervalInMinutes;\n+            this.syncIntervalMs = TimeUnit.MINUTES.toMillis(syncIntervalInMinutes);\n+        }\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file and an optional set of user-provided overrides.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    static Builder builder(@NonNull JSONObject pluginJson,\n+                           @Nullable DataStoreConfiguration userProvidedConfiguration) {\n+        return new Builder(pluginJson, userProvidedConfiguration);\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    static Builder builder(@NonNull JSONObject pluginJson) {\n+        return builder(pluginJson, null);\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() throws DataStoreException {\n+        return builder()", "originalCommit": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4NDg3NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418384875", "bodyText": "Those get set in the default constructor of the builder since there's no ambiguity with those two fields. That being said, it doesn't hurt to be explicit about it and setting it here.", "author": "rjuliano", "createdAt": "2020-05-01T02:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwOTk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "f92b4fa2c2a8dacf0064681e38625e121a673074", "chunk": "diff --git a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\nindex 4cd990cc..2ba31ced 100644\n--- a/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n+++ b/aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\n@@ -34,9 +34,13 @@ import java.util.concurrent.TimeUnit;\n  */\n public final class DataStoreConfiguration {\n     static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    @VisibleForTesting\n     static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    @VisibleForTesting\n     static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    @VisibleForTesting \n     static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    @VisibleForTesting \n     static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n"}}, {"oid": "dee83ae7247d0a71adf81a9caf50d6d1df02afc3", "url": "https://github.com/aws-amplify/amplify-android/commit/dee83ae7247d0a71adf81a9caf50d6d1df02afc3", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>", "committedDate": "2020-05-01T01:43:05Z", "type": "commit"}, {"oid": "8a82b01075913c303ac209517abb8680f60d1f66", "url": "https://github.com/aws-amplify/amplify-android/commit/8a82b01075913c303ac209517abb8680f60d1f66", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>", "committedDate": "2020-05-01T01:43:51Z", "type": "commit"}, {"oid": "7bc1729a0456ae00ad5f86ee8222c9a63431d4f7", "url": "https://github.com/aws-amplify/amplify-android/commit/7bc1729a0456ae00ad5f86ee8222c9a63431d4f7", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>", "committedDate": "2020-05-01T01:44:19Z", "type": "commit"}, {"oid": "f92b4fa2c2a8dacf0064681e38625e121a673074", "url": "https://github.com/aws-amplify/amplify-android/commit/f92b4fa2c2a8dacf0064681e38625e121a673074", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>", "committedDate": "2020-05-01T01:44:50Z", "type": "commit"}, {"oid": "8948fe20fc06509e88351059d0a01eb2018ae93f", "url": "https://github.com/aws-amplify/amplify-android/commit/8948fe20fc06509e88351059d0a01eb2018ae93f", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>", "committedDate": "2020-05-01T01:45:23Z", "type": "commit"}, {"oid": "b780ca667bf909dbd3eafee24289c74f60d7c0b1", "url": "https://github.com/aws-amplify/amplify-android/commit/b780ca667bf909dbd3eafee24289c74f60d7c0b1", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>", "committedDate": "2020-05-01T01:47:44Z", "type": "commit"}, {"oid": "90c9f09817af5ac0a09b8370393c6aef5179492d", "url": "https://github.com/aws-amplify/amplify-android/commit/90c9f09817af5ac0a09b8370393c6aef5179492d", "message": "Explicitly set handlers in defaults() method", "committedDate": "2020-05-01T02:04:43Z", "type": "commit"}]}