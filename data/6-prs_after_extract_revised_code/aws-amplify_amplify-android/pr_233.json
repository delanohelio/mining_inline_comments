{"pr_number": 233, "pr_title": "[Analytics] Support Auto session tracking initial commit", "pr_createdAt": "2020-01-16T18:48:00Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/233", "timeline": [{"oid": "dceb2b59a612feeccbce7d5fb42f97aa21ef032c", "url": "https://github.com/aws-amplify/amplify-android/commit/dceb2b59a612feeccbce7d5fb42f97aa21ef032c", "message": "Fix checkstyle failures", "committedDate": "2020-01-21T22:58:55Z", "type": "forcePushed"}, {"oid": "5cb96cb98cb85dff9c51ecc8ee9bd16fefa1409a", "url": "https://github.com/aws-amplify/amplify-android/commit/5cb96cb98cb85dff9c51ecc8ee9bd16fefa1409a", "message": "Support Auto session tracking initial commit", "committedDate": "2020-03-11T06:24:14Z", "type": "commit"}, {"oid": "88381af45bb2f18a2b0d0b451e55d61ef97e7960", "url": "https://github.com/aws-amplify/amplify-android/commit/88381af45bb2f18a2b0d0b451e55d61ef97e7960", "message": "update lifecycle manager", "committedDate": "2020-03-11T06:24:14Z", "type": "commit"}, {"oid": "b2477126eae13d6811aa7cbf1fa3ce8aac25e5eb", "url": "https://github.com/aws-amplify/amplify-android/commit/b2477126eae13d6811aa7cbf1fa3ce8aac25e5eb", "message": "Updates", "committedDate": "2020-03-11T06:24:14Z", "type": "commit"}, {"oid": "79ce1fc44500fd9766178f3a85865cf751210822", "url": "https://github.com/aws-amplify/amplify-android/commit/79ce1fc44500fd9766178f3a85865cf751210822", "message": "Delete Lifecycle helper", "committedDate": "2020-03-11T06:24:14Z", "type": "commit"}, {"oid": "ebd8059ebd83867d90c64c4e9dea9ed56b449674", "url": "https://github.com/aws-amplify/amplify-android/commit/ebd8059ebd83867d90c64c4e9dea9ed56b449674", "message": "Updates", "committedDate": "2020-03-11T06:26:18Z", "type": "commit"}, {"oid": "0d3c365b942a2adf35745e9604ac175f1d08572b", "url": "https://github.com/aws-amplify/amplify-android/commit/0d3c365b942a2adf35745e9604ac175f1d08572b", "message": "Fix checkstyle failures", "committedDate": "2020-03-11T06:28:23Z", "type": "commit"}, {"oid": "ad0d9c7403b39f7ea2e0e911e7f6a42194e4ff67", "url": "https://github.com/aws-amplify/amplify-android/commit/ad0d9c7403b39f7ea2e0e911e7f6a42194e4ff67", "message": "Update configuration to be compatible with latest changes", "committedDate": "2020-03-11T06:28:23Z", "type": "commit"}, {"oid": "ad0d9c7403b39f7ea2e0e911e7f6a42194e4ff67", "url": "https://github.com/aws-amplify/amplify-android/commit/ad0d9c7403b39f7ea2e0e911e7f6a42194e4ff67", "message": "Update configuration to be compatible with latest changes", "committedDate": "2020-03-11T06:28:23Z", "type": "forcePushed"}, {"oid": "7c994408c3006f780a0ddb328f94186a3a1c688e", "url": "https://github.com/aws-amplify/amplify-android/commit/7c994408c3006f780a0ddb328f94186a3a1c688e", "message": "Clean-ups", "committedDate": "2020-03-11T06:33:03Z", "type": "commit"}, {"oid": "5e1062dcfff37e20a218418b76f7bac73f00b5b4", "url": "https://github.com/aws-amplify/amplify-android/commit/5e1062dcfff37e20a218418b76f7bac73f00b5b4", "message": "Fix checkstyle failures", "committedDate": "2020-03-11T19:53:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQyNTI2Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r391425266", "bodyText": "This method name is long to the point of being unreadable. Maybe just inline that method, here? Or, name it like checkForApplicationEnteredForeground()?  As a bonus, this would match your checkForApplicationBackground() method.", "author": "jamesonwilliams", "createdAt": "2020-03-12T06:37:48Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java", "diffHunk": "@@ -77,20 +75,19 @@ void stopSessionTracking(final Application application) {\n     @Override\n     public void onActivityCreated(final Activity activity, final Bundle bundle) {\n         Log.d(LOG_TAG, \"onActivityCreated \" + activity.getLocalClassName());\n-        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();\n         activityLifecycleStateMap.put(activity, Lifecycle.State.CREATED);\n     }\n \n     @Override\n     public void onActivityStarted(final Activity activity) {\n         Log.d(LOG_TAG, \"onActivityStarted \" + activity.getLocalClassName());\n-        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();\n         activityLifecycleStateMap.put(activity, Lifecycle.State.STARTED);\n     }\n \n     @Override\n     public void onActivityResumed(final Activity activity) {\n         Log.d(LOG_TAG, \"onActivityResumed \" + activity.getLocalClassName());\n+        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();", "originalCommit": "7c994408c3006f780a0ddb328f94186a3a1c688e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzMTc3Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r391931777", "bodyText": "I have some more clean-ups lined up where I have this change, cleaning up comments and removing Screen off receiver because it turn out screen turn off also causes running activity to stop thus giving a onStop callback. This PR is WIP and there is no way to make it a Draft PR once its marked ready for review :/", "author": "desokroshan", "createdAt": "2020-03-12T22:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQyNTI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5f6892c9a35e697563fd23fdd7876d1deb40e21b", "chunk": "diff --git a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\nindex 9328dfea..316152d0 100644\n--- a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\n+++ b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\n\n@@ -56,113 +42,100 @@ public final class AutoSessionTracker implements Application.ActivityLifecycleCa\n      */\n     public AutoSessionTracker(final AnalyticsClient analyticsClient,\n                               final SessionClient sessionClient) {\n-        screenOffReceiver = new ScreenOffReceiver();\n         this.analyticsClient = analyticsClient;\n         this.sessionClient = sessionClient;\n     }\n \n     void startSessionTracking(final Application application) {\n         application.registerActivityLifecycleCallbacks(this);\n-        final ScreenOffReceiver screenOffReceiver = new ScreenOffReceiver();\n-        application.registerReceiver(screenOffReceiver, new IntentFilter(ACTION_SCREEN_OFF));\n     }\n \n     void stopSessionTracking(final Application application) {\n         application.unregisterActivityLifecycleCallbacks(this);\n-        application.unregisterReceiver(screenOffReceiver);\n     }\n \n     @Override\n     public void onActivityCreated(final Activity activity, final Bundle bundle) {\n-        Log.d(LOG_TAG, \"onActivityCreated \" + activity.getLocalClassName());\n-        activityLifecycleStateMap.put(activity, Lifecycle.State.CREATED);\n+        Log.d(LOG_TAG, \"Activity created: \" + activity.getLocalClassName());\n     }\n \n     @Override\n     public void onActivityStarted(final Activity activity) {\n-        Log.d(LOG_TAG, \"onActivityStarted \" + activity.getLocalClassName());\n-        activityLifecycleStateMap.put(activity, Lifecycle.State.STARTED);\n+        Log.d(LOG_TAG, \"Activity started: \" + activity.getLocalClassName());\n     }\n \n     @Override\n     public void onActivityResumed(final Activity activity) {\n-        Log.d(LOG_TAG, \"onActivityResumed \" + activity.getLocalClassName());\n-        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();\n-        activityLifecycleStateMap.put(activity, Lifecycle.State.RESUMED);\n+        // An activity came to foreground. Application potentially entered foreground as well\n+        // if there were no other activities in the foreground.\n+        Log.d(LOG_TAG, \"Activity resumed: \" + activity.getLocalClassName());\n+        checkIfApplicationEnteredForeground();\n+        activityCount++;\n     }\n \n     @Override\n     public void onActivityPaused(final Activity activity) {\n-        Log.d(LOG_TAG, \"onActivityPaused \" + activity.getLocalClassName());\n-        activityLifecycleStateMap.put(activity, Lifecycle.State.RESUMED);\n+        Log.d(LOG_TAG, \"Activity paused: \" + activity.getLocalClassName());\n     }\n \n     @Override\n     public void onActivityStopped(final Activity activity) {\n-        Log.d(LOG_TAG, \"onActivityStopped \" + activity.getLocalClassName());\n-        // When the activity is stopped, we remove it from the lifecycle state map since we\n-        // no longer consider it keeping a session alive.\n-        activityLifecycleStateMap.remove(activity);\n+        // An activity entered stopped state. Application potentially entered background if there are\n+        // no other activities in non-stopped states.\n+        Log.d(LOG_TAG, \"Activity stopped: \" + activity.getLocalClassName());\n+        activityCount--;\n+        checkIfApplicationEnteredBackground();\n     }\n \n     @Override\n     public void onActivitySaveInstanceState(final Activity activity, final Bundle outState) {\n-        Log.d(LOG_TAG, \"onActivitySaveInstanceState \" + activity.getLocalClassName());\n+        Log.d(LOG_TAG, \"Activity state saved: \" + activity.getLocalClassName());\n     }\n \n     @Override\n     public void onActivityDestroyed(final Activity activity) {\n-        Log.d(LOG_TAG, \"onActivityDestroyed \" + activity.getLocalClassName());\n-        // Activity should not be in the activityLifecycleStateMap any longer.\n-        if (activityLifecycleStateMap.containsKey(activity)) {\n-            Log.wtf(LOG_TAG, \"Destroyed activity present in activityLifecycleMap!?\");\n-            activityLifecycleStateMap.remove(activity);\n-        }\n-        checkForApplicationEnteredBackground();\n+        Log.d(LOG_TAG, \"Activity destroyed \" + activity.getLocalClassName());\n     }\n \n     /**\n-     * Called back when your application enters the Foreground.\n+     * Called when the application enters the foreground.\n      */\n     void applicationEnteredForeground() {\n+        Log.d(LOG_TAG, \"Application entered the foreground.\");\n         sessionClient.startSession();\n     }\n \n     /**\n-     * Called back when your application enters the Background.\n+     * Called when the application enters the background.\n      */\n     void applicationEnteredBackground() {\n-        analyticsClient.submitEvents();\n+        Log.d(LOG_TAG, \"Application entered the background.\");\n         sessionClient.stopSession();\n+        analyticsClient.submitEvents();\n \n     }\n \n     /**\n-     * Called from onActivityCreated and onActivityStarted to handle when the application enters\n-     * the foreground.\n+     * Called from onActivityResumed to check if the application came to the foreground.\n      */\n-    private void handleOnCreateOrOnStartToHandleApplicationEnteredForeground() {\n+    private void checkIfApplicationEnteredForeground() {\n         // if nothing is in the activity lifecycle map indicating that we are likely in the background, and the flag\n         // indicates we are indeed in the background.\n-        if (activityLifecycleStateMap.size() == 0 && !inForeground) {\n+        if (activityCount == 0 && !inForeground) {\n             inForeground = true;\n             // Since this is called when an activity has started, we now know the app has entered the foreground.\n             applicationEnteredForeground();\n         }\n     }\n \n-    private void checkForApplicationEnteredBackground() {\n+    /**\n+     * Called from onActivityStopped to check if the application receded to the background.\n+     */\n+    private void checkIfApplicationEnteredBackground() {\n         // If the App is in the foreground and there are no longer any activities that have not been stopped.\n-        if ((activityLifecycleStateMap.size() == 0) && inForeground) {\n+        if ((activityCount == 0) && inForeground) {\n             inForeground = false;\n             applicationEnteredBackground();\n         }\n     }\n-\n-    class ScreenOffReceiver extends BroadcastReceiver {\n-        @Override\n-        public void onReceive(Context context, Intent intent) {\n-            checkForApplicationEnteredBackground();\n-        }\n-    }\n }\n"}}, {"oid": "5f6892c9a35e697563fd23fdd7876d1deb40e21b", "url": "https://github.com/aws-amplify/amplify-android/commit/5f6892c9a35e697563fd23fdd7876d1deb40e21b", "message": "Remove screen off receiver and add comments", "committedDate": "2020-03-12T09:56:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk1NDQ1NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r391954454", "bodyText": "In our call, we agreed that this can be removed.", "author": "jamesonwilliams", "createdAt": "2020-03-12T23:17:55Z", "path": "core/src/main/java/com/amplifyframework/util/ThreadUtils.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.util;\n+\n+import android.os.Handler;\n+import android.os.Looper;\n+\n+public final class ThreadUtils {", "originalCommit": "5f6892c9a35e697563fd23fdd7876d1deb40e21b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "604fadcda7e1a43f9c001b785e9167a078060e0b", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/util/ThreadUtils.java b/core/src/main/java/com/amplifyframework/util/ThreadUtils.java\ndeleted file mode 100644\nindex 917436a7..00000000\n--- a/core/src/main/java/com/amplifyframework/util/ThreadUtils.java\n+++ /dev/null\n\n@@ -1,37 +0,0 @@\n-/*\n- * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package com.amplifyframework.util;\n-\n-import android.os.Handler;\n-import android.os.Looper;\n-\n-public final class ThreadUtils {\n-\n-    private ThreadUtils() {\n-    }\n-\n-    /**\n-     * Run a runnable on the Main (UI) Thread.\n-     * @param runnable the runnable\n-     */\n-    public static void runOnUiThread(final Runnable runnable) {\n-        if (Looper.myLooper() != Looper.getMainLooper()) {\n-            new Handler(Looper.getMainLooper()).post(runnable);\n-        } else {\n-            runnable.run();\n-        }\n-    }\n-}\n"}}, {"oid": "604fadcda7e1a43f9c001b785e9167a078060e0b", "url": "https://github.com/aws-amplify/amplify-android/commit/604fadcda7e1a43f9c001b785e9167a078060e0b", "message": "Unit tests for session tracker", "committedDate": "2020-03-13T08:21:02Z", "type": "commit"}, {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3", "url": "https://github.com/aws-amplify/amplify-android/commit/7d695aed7d44430821ee17bb20cf8fa8978310a3", "message": "Checkstyle fixes", "committedDate": "2020-03-13T09:10:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Mjk0Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394042947", "bodyText": "trivial comment: move assignments into constructor", "author": "jamesonwilliams", "createdAt": "2020-03-18T00:21:25Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+\n+/**\n+ * Tracks when the host application enters or leaves foreground.\n+ * The constructor registers to receive activity lifecycle events.\n+ **/\n+public final class AutoSessionTracker implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n+    private final SessionClient sessionClient;\n+    private final AnalyticsClient analyticsClient;\n+    private boolean inForeground = false;\n+    private int activityCount = 0;", "originalCommit": "7d695aed7d44430821ee17bb20cf8fa8978310a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89597955657844f2376c0e680864c6f707f19441", "chunk": "diff --git a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\nindex fcefc1bc..4aa4f0ee 100644\n--- a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\n+++ b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\n\n@@ -31,8 +31,8 @@ public final class AutoSessionTracker implements Application.ActivityLifecycleCa\n     private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n     private final SessionClient sessionClient;\n     private final AnalyticsClient analyticsClient;\n-    private boolean inForeground = false;\n-    private int activityCount = 0;\n+    private boolean inForeground;\n+    private int foregroundActivityCount;\n \n     /**\n      * Constructor. Registers to receive activity lifecycle events.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzE1MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394043151", "bodyText": "nit: an extra empty line here", "author": "jamesonwilliams", "createdAt": "2020-03-18T00:22:20Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+\n+/**\n+ * Tracks when the host application enters or leaves foreground.\n+ * The constructor registers to receive activity lifecycle events.\n+ **/\n+public final class AutoSessionTracker implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n+    private final SessionClient sessionClient;\n+    private final AnalyticsClient analyticsClient;\n+    private boolean inForeground = false;\n+    private int activityCount = 0;\n+\n+    /**\n+     * Constructor. Registers to receive activity lifecycle events.\n+     * @param analyticsClient Amazon pinpoint analytics client\n+     * @param sessionClient Amazon pinpoint session client\n+     */\n+    public AutoSessionTracker(final AnalyticsClient analyticsClient,\n+                              final SessionClient sessionClient) {\n+        this.analyticsClient = analyticsClient;\n+        this.sessionClient = sessionClient;\n+    }\n+\n+    void startSessionTracking(final Application application) {\n+        application.registerActivityLifecycleCallbacks(this);\n+    }\n+\n+    void stopSessionTracking(final Application application) {\n+        application.unregisterActivityLifecycleCallbacks(this);\n+    }\n+\n+    @Override\n+    public void onActivityCreated(final Activity activity, final Bundle bundle) {\n+        Log.d(LOG_TAG, \"Activity created: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityStarted(final Activity activity) {\n+        Log.d(LOG_TAG, \"Activity started: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityResumed(final Activity activity) {\n+        // An activity came to foreground. Application potentially entered foreground as well\n+        // if there were no other activities in the foreground.\n+        Log.d(LOG_TAG, \"Activity resumed: \" + activity.getLocalClassName());\n+        checkIfApplicationEnteredForeground();\n+        activityCount++;\n+    }\n+\n+    @Override\n+    public void onActivityPaused(final Activity activity) {\n+        // onPause is always followed by onStop except when the app is interrupted by an event such\n+        // as a phone call, pop-ups or app losing focus in a multi-window mode, in which case activity is\n+        // resumed if app regains focus.In either case, app foreground status does not change for the\n+        // purpose of session tracking.\n+        Log.d(LOG_TAG, \"Activity paused: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityStopped(final Activity activity) {\n+        // An activity entered stopped state. Application potentially entered background if there are\n+        // no other activities in non-stopped states, in which case app is not visible to user and has\n+        // entered background state.\n+        Log.d(LOG_TAG, \"Activity stopped: \" + activity.getLocalClassName());\n+        activityCount--;\n+        checkIfApplicationEnteredBackground();\n+    }\n+\n+    @Override\n+    public void onActivitySaveInstanceState(final Activity activity, final Bundle outState) {\n+        Log.d(LOG_TAG, \"Activity state saved: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityDestroyed(final Activity activity) {\n+        // onStop is always called before onDestroy so no action is required in onActivityDestroyed.\n+        Log.d(LOG_TAG, \"Activity destroyed \" + activity.getLocalClassName());\n+    }\n+\n+    /**\n+     * Called when the application enters the foreground.\n+     */\n+    void applicationEnteredForeground() {\n+        Log.d(LOG_TAG, \"Application entered the foreground.\");\n+        sessionClient.startSession();\n+    }\n+\n+    /**\n+     * Called when the application enters the background.\n+     */\n+    void applicationEnteredBackground() {\n+        Log.d(LOG_TAG, \"Application entered the background.\");\n+        sessionClient.stopSession();\n+        analyticsClient.submitEvents();\n+", "originalCommit": "7d695aed7d44430821ee17bb20cf8fa8978310a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89597955657844f2376c0e680864c6f707f19441", "chunk": "diff --git a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\nindex fcefc1bc..4aa4f0ee 100644\n--- a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\n+++ b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\n\n@@ -31,8 +31,8 @@ public final class AutoSessionTracker implements Application.ActivityLifecycleCa\n     private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n     private final SessionClient sessionClient;\n     private final AnalyticsClient analyticsClient;\n-    private boolean inForeground = false;\n-    private int activityCount = 0;\n+    private boolean inForeground;\n+    private int foregroundActivityCount;\n \n     /**\n      * Constructor. Registers to receive activity lifecycle events.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzM5OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394043398", "bodyText": "nit: remove extra set of parens around activityCount == 0.", "author": "jamesonwilliams", "createdAt": "2020-03-18T00:23:12Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+\n+/**\n+ * Tracks when the host application enters or leaves foreground.\n+ * The constructor registers to receive activity lifecycle events.\n+ **/\n+public final class AutoSessionTracker implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n+    private final SessionClient sessionClient;\n+    private final AnalyticsClient analyticsClient;\n+    private boolean inForeground = false;\n+    private int activityCount = 0;\n+\n+    /**\n+     * Constructor. Registers to receive activity lifecycle events.\n+     * @param analyticsClient Amazon pinpoint analytics client\n+     * @param sessionClient Amazon pinpoint session client\n+     */\n+    public AutoSessionTracker(final AnalyticsClient analyticsClient,\n+                              final SessionClient sessionClient) {\n+        this.analyticsClient = analyticsClient;\n+        this.sessionClient = sessionClient;\n+    }\n+\n+    void startSessionTracking(final Application application) {\n+        application.registerActivityLifecycleCallbacks(this);\n+    }\n+\n+    void stopSessionTracking(final Application application) {\n+        application.unregisterActivityLifecycleCallbacks(this);\n+    }\n+\n+    @Override\n+    public void onActivityCreated(final Activity activity, final Bundle bundle) {\n+        Log.d(LOG_TAG, \"Activity created: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityStarted(final Activity activity) {\n+        Log.d(LOG_TAG, \"Activity started: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityResumed(final Activity activity) {\n+        // An activity came to foreground. Application potentially entered foreground as well\n+        // if there were no other activities in the foreground.\n+        Log.d(LOG_TAG, \"Activity resumed: \" + activity.getLocalClassName());\n+        checkIfApplicationEnteredForeground();\n+        activityCount++;\n+    }\n+\n+    @Override\n+    public void onActivityPaused(final Activity activity) {\n+        // onPause is always followed by onStop except when the app is interrupted by an event such\n+        // as a phone call, pop-ups or app losing focus in a multi-window mode, in which case activity is\n+        // resumed if app regains focus.In either case, app foreground status does not change for the\n+        // purpose of session tracking.\n+        Log.d(LOG_TAG, \"Activity paused: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityStopped(final Activity activity) {\n+        // An activity entered stopped state. Application potentially entered background if there are\n+        // no other activities in non-stopped states, in which case app is not visible to user and has\n+        // entered background state.\n+        Log.d(LOG_TAG, \"Activity stopped: \" + activity.getLocalClassName());\n+        activityCount--;\n+        checkIfApplicationEnteredBackground();\n+    }\n+\n+    @Override\n+    public void onActivitySaveInstanceState(final Activity activity, final Bundle outState) {\n+        Log.d(LOG_TAG, \"Activity state saved: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityDestroyed(final Activity activity) {\n+        // onStop is always called before onDestroy so no action is required in onActivityDestroyed.\n+        Log.d(LOG_TAG, \"Activity destroyed \" + activity.getLocalClassName());\n+    }\n+\n+    /**\n+     * Called when the application enters the foreground.\n+     */\n+    void applicationEnteredForeground() {\n+        Log.d(LOG_TAG, \"Application entered the foreground.\");\n+        sessionClient.startSession();\n+    }\n+\n+    /**\n+     * Called when the application enters the background.\n+     */\n+    void applicationEnteredBackground() {\n+        Log.d(LOG_TAG, \"Application entered the background.\");\n+        sessionClient.stopSession();\n+        analyticsClient.submitEvents();\n+\n+    }\n+\n+    /**\n+     * Called from onActivityResumed to check if the application came to the foreground.\n+     */\n+    private void checkIfApplicationEnteredForeground() {\n+        // if nothing is in the activity lifecycle map indicating that we are likely in the background, and the flag\n+        // indicates we are indeed in the background.\n+        if (activityCount == 0 && !inForeground) {\n+            inForeground = true;\n+            // Since this is called when an activity has started, we now know the app has entered the foreground.\n+            applicationEnteredForeground();\n+        }\n+    }\n+\n+    /**\n+     * Called from onActivityStopped to check if the application receded to the background.\n+     */\n+    private void checkIfApplicationEnteredBackground() {\n+        // If the App is in the foreground and there are no longer any activities that have not been stopped.\n+        if ((activityCount == 0) && inForeground) {", "originalCommit": "7d695aed7d44430821ee17bb20cf8fa8978310a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89597955657844f2376c0e680864c6f707f19441", "chunk": "diff --git a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\nindex fcefc1bc..4aa4f0ee 100644\n--- a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\n+++ b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\n\n@@ -31,8 +31,8 @@ public final class AutoSessionTracker implements Application.ActivityLifecycleCa\n     private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n     private final SessionClient sessionClient;\n     private final AnalyticsClient analyticsClient;\n-    private boolean inForeground = false;\n-    private int activityCount = 0;\n+    private boolean inForeground;\n+    private int foregroundActivityCount;\n \n     /**\n      * Constructor. Registers to receive activity lifecycle events.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzU4Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394043587", "bodyText": "Minor: naming, maybe, foregroundActivityCount?", "author": "jamesonwilliams", "createdAt": "2020-03-18T00:23:56Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+\n+/**\n+ * Tracks when the host application enters or leaves foreground.\n+ * The constructor registers to receive activity lifecycle events.\n+ **/\n+public final class AutoSessionTracker implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n+    private final SessionClient sessionClient;\n+    private final AnalyticsClient analyticsClient;\n+    private boolean inForeground = false;\n+    private int activityCount = 0;", "originalCommit": "7d695aed7d44430821ee17bb20cf8fa8978310a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89597955657844f2376c0e680864c6f707f19441", "chunk": "diff --git a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\nindex fcefc1bc..4aa4f0ee 100644\n--- a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\n+++ b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java\n\n@@ -31,8 +31,8 @@ public final class AutoSessionTracker implements Application.ActivityLifecycleCa\n     private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n     private final SessionClient sessionClient;\n     private final AnalyticsClient analyticsClient;\n-    private boolean inForeground = false;\n-    private int activityCount = 0;\n+    private boolean inForeground;\n+    private int foregroundActivityCount;\n \n     /**\n      * Constructor. Registers to receive activity lifecycle events.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzgyNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394043826", "bodyText": "The class that creates a PinpointManager should probably be called a PinpointManagerFactory, not a PinpointClientFactory, I guess.", "author": "jamesonwilliams", "createdAt": "2020-03-18T00:25:02Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/PinpointClientFactory.java", "diffHunk": "@@ -47,7 +46,7 @@\n     private PinpointClientFactory() {\n     }\n \n-    static AnalyticsClient create(Context context,\n+    static PinpointManager create(Context context,", "originalCommit": "7d695aed7d44430821ee17bb20cf8fa8978310a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89597955657844f2376c0e680864c6f707f19441", "chunk": "diff --git a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/PinpointClientFactory.java b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/PinpointManagerFactory.java\nsimilarity index 98%\nrename from aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/PinpointClientFactory.java\nrename to aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/PinpointManagerFactory.java\nindex 96a44f55..796d1a7c 100644\n--- a/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/PinpointClientFactory.java\n+++ b/aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/PinpointManagerFactory.java\n\n@@ -38,12 +38,12 @@ import java.util.concurrent.TimeUnit;\n /**\n  * Factory class to vend out pinpoint analytics client.\n  */\n-final class PinpointClientFactory {\n+final class PinpointManagerFactory {\n \n     private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-analytics\");\n     private static final int INITIALIZATION_TIMEOUT_MS = 5000;\n \n-    private PinpointClientFactory() {\n+    private PinpointManagerFactory() {\n     }\n \n     static PinpointManager create(Context context,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NDc5OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394044798", "bodyText": "I've never seen this InOrder, but it looks quite useful. Nice find, and nice application.", "author": "jamesonwilliams", "createdAt": "2020-03-18T00:28:44Z", "path": "aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Tests the {@link AutoSessionTracker}.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AutoSessionTrackerTest {\n+    private AnalyticsClient analyticsClient;\n+    private SessionClient sessionClient;\n+    private Application.ActivityLifecycleCallbacks callbacks;\n+\n+    /**\n+     * Setup dependencies and object under test.\n+     */\n+    @Before\n+    public void setup() {\n+        // Dependencies\n+        this.analyticsClient = mock(AnalyticsClient.class);\n+        this.sessionClient = mock(SessionClient.class);\n+\n+        // Object under test\n+        this.callbacks = new AutoSessionTracker(analyticsClient, sessionClient);\n+    }\n+\n+    /**\n+     * When the app is opened, a start session should be recorded.\n+     */\n+    @Test\n+    public void sessionStartedWhenAppOpened() {\n+        // Given: the launcher activity instance and bundle class instance.\n+        Activity activity = mock(Activity.class);\n+        Bundle bundle = mock(Bundle.class);\n+\n+        // When: the app is opened main activity goes through the following lifecycle states.\n+        callbacks.onActivityCreated(activity, bundle);\n+        callbacks.onActivityStarted(activity);\n+        callbacks.onActivityResumed(activity);\n+\n+        // Then: Make sure that startSession was invoked on the session client.\n+        verify(sessionClient).startSession();\n+    }\n+\n+    /**\n+     * When the app is started, user interacts with the app and presses the home button\n+     * a start session and a stop session should be recorded in that order.\n+     */\n+    @Test\n+    public void sessionStoppedWhenHomeButtonPressed() {\n+        // Given: the activity that is currently in foreground.\n+        Activity activity = mock(Activity.class);\n+        Bundle bundle = mock(Bundle.class);\n+\n+        // When: the app goes to background, the activity in foreground is stopped.\n+        // Activity is put in resume state when the app is started.\n+        callbacks.onActivityCreated(activity, bundle);\n+        callbacks.onActivityStarted(activity);\n+        callbacks.onActivityResumed(activity);\n+\n+        // Activity stopped when home button is pressed.\n+        callbacks.onActivityPaused(activity);\n+        callbacks.onActivityStopped(activity);\n+\n+        // Then: Make sure startSession and stopSession are invoked in that order.\n+        InOrder inOrder = inOrder(sessionClient);", "originalCommit": "7d695aed7d44430821ee17bb20cf8fa8978310a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1OTUxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394059517", "bodyText": "Came across while going through the documentation \ud83d\ude04", "author": "desokroshan", "createdAt": "2020-03-18T01:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NDc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "89597955657844f2376c0e680864c6f707f19441", "chunk": "diff --git a/aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java b/aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java\nindex 8481ed31..56ec519c 100644\n--- a/aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java\n+++ b/aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java\n\n@@ -74,21 +74,44 @@ public final class AutoSessionTrackerTest {\n \n     /**\n      * When the app is started, user interacts with the app and presses the home button\n-     * a start session and a stop session should be recorded in that order.\n+     * stop session should be recorded.\n      */\n     @Test\n     public void sessionStoppedWhenHomeButtonPressed() {\n-        // Given: the activity that is currently in foreground.\n+        // Given: the launcher activity and the app is opened.\n         Activity activity = mock(Activity.class);\n         Bundle bundle = mock(Bundle.class);\n+        // Activity is put in resume state when the app is opened.\n+        callbacks.onActivityCreated(activity, bundle);\n+        callbacks.onActivityStarted(activity);\n+        callbacks.onActivityResumed(activity);\n \n-        // When: the app goes to background, the activity in foreground is stopped.\n-        // Activity is put in resume state when the app is started.\n+        // When: home button is pressed, app goes to the background.\n+        // Activity stopped when home button is pressed and app goes to background.\n+        callbacks.onActivityPaused(activity);\n+        callbacks.onActivityStopped(activity);\n+\n+        // Then: Make sure stopSession is invoked.\n+        verify(sessionClient).stopSession();\n+    }\n+\n+    /**\n+     * When the app is started, user interacts with the app and presses the home button\n+     * a start session and a stop session should be recorded in that order.\n+     */\n+    @Test\n+    public void sessionStartedAndStoppedWhenAppIsOpenedAndHomeButtonIsPressed() {\n+        // Given: the launcher activity.\n+        Activity activity = mock(Activity.class);\n+        Bundle bundle = mock(Bundle.class);\n+\n+        // When: the app is opened and home button is pressed\n+        // Activity is put in resume state when the app is opened.\n         callbacks.onActivityCreated(activity, bundle);\n         callbacks.onActivityStarted(activity);\n         callbacks.onActivityResumed(activity);\n \n-        // Activity stopped when home button is pressed.\n+        // Activity is stopped when home button is pressed.\n         callbacks.onActivityPaused(activity);\n         callbacks.onActivityStopped(activity);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NTUwNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394045504", "bodyText": "For some of these, you have \"app is in goreground\" was a \"when\" step, but it is more like a \"given.\"\nFor example, \"Given that the app had already been opened, when the user hits the home button, then the session is stopped.\"\nThis will change your \"then\" logic slightly too, since I think you'll only want to verify stopSession(), in that case, not both startSession() and stopSession(), back to back.\nAlthough, that InOrder is cool!! I'm surprised I've never seen it before. Nice find.", "author": "jamesonwilliams", "createdAt": "2020-03-18T00:31:47Z", "path": "aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Tests the {@link AutoSessionTracker}.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AutoSessionTrackerTest {", "originalCommit": "7d695aed7d44430821ee17bb20cf8fa8978310a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89597955657844f2376c0e680864c6f707f19441", "chunk": "diff --git a/aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java b/aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java\nindex 8481ed31..56ec519c 100644\n--- a/aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java\n+++ b/aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java\n\n@@ -74,21 +74,44 @@ public final class AutoSessionTrackerTest {\n \n     /**\n      * When the app is started, user interacts with the app and presses the home button\n-     * a start session and a stop session should be recorded in that order.\n+     * stop session should be recorded.\n      */\n     @Test\n     public void sessionStoppedWhenHomeButtonPressed() {\n-        // Given: the activity that is currently in foreground.\n+        // Given: the launcher activity and the app is opened.\n         Activity activity = mock(Activity.class);\n         Bundle bundle = mock(Bundle.class);\n+        // Activity is put in resume state when the app is opened.\n+        callbacks.onActivityCreated(activity, bundle);\n+        callbacks.onActivityStarted(activity);\n+        callbacks.onActivityResumed(activity);\n \n-        // When: the app goes to background, the activity in foreground is stopped.\n-        // Activity is put in resume state when the app is started.\n+        // When: home button is pressed, app goes to the background.\n+        // Activity stopped when home button is pressed and app goes to background.\n+        callbacks.onActivityPaused(activity);\n+        callbacks.onActivityStopped(activity);\n+\n+        // Then: Make sure stopSession is invoked.\n+        verify(sessionClient).stopSession();\n+    }\n+\n+    /**\n+     * When the app is started, user interacts with the app and presses the home button\n+     * a start session and a stop session should be recorded in that order.\n+     */\n+    @Test\n+    public void sessionStartedAndStoppedWhenAppIsOpenedAndHomeButtonIsPressed() {\n+        // Given: the launcher activity.\n+        Activity activity = mock(Activity.class);\n+        Bundle bundle = mock(Bundle.class);\n+\n+        // When: the app is opened and home button is pressed\n+        // Activity is put in resume state when the app is opened.\n         callbacks.onActivityCreated(activity, bundle);\n         callbacks.onActivityStarted(activity);\n         callbacks.onActivityResumed(activity);\n \n-        // Activity stopped when home button is pressed.\n+        // Activity is stopped when home button is pressed.\n         callbacks.onActivityPaused(activity);\n         callbacks.onActivityStopped(activity);\n \n"}}, {"oid": "89597955657844f2376c0e680864c6f707f19441", "url": "https://github.com/aws-amplify/amplify-android/commit/89597955657844f2376c0e680864c6f707f19441", "message": "Clean-ups", "committedDate": "2020-03-18T01:26:52Z", "type": "commit"}]}