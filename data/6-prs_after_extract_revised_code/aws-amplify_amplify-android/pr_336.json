{"pr_number": 336, "pr_title": "Implement offline interpret", "pr_createdAt": "2020-03-31T07:26:18Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/336", "timeline": [{"oid": "efa2b1d7192c1560337564d032b5e0f3d4bc5ea1", "url": "https://github.com/aws-amplify/amplify-android/commit/efa2b1d7192c1560337564d032b5e0f3d4bc5ea1", "message": "Add TFLite implementation of interpret", "committedDate": "2020-03-30T23:54:29Z", "type": "commit"}, {"oid": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "url": "https://github.com/aws-amplify/amplify-android/commit/5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "message": "Add basic escape hatch implementation", "committedDate": "2020-03-31T01:55:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NDk5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401144990", "bodyText": "Is there a special property of the TreeMap<>() that you need, or can you use the more standard HashMap<>()?", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:01:06Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsEscapeHatch.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions;\n+\n+import androidx.annotation.NonNull;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * An escape hatch to give low-level access to Tensorflow interpreter.\n+ */\n+public final class TFLitePredictionsEscapeHatch {\n+    private final Map<String, Interpreter> interpreters;\n+\n+    TFLitePredictionsEscapeHatch(@NonNull Map<String, Interpreter> interpreters) {\n+        this.interpreters = new TreeMap<>();", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNjUzMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401236531", "bodyText": "It sorts the key haha. Definitely no good reason besides that. I can just use a HashMap I guess", "author": "raphkim", "createdAt": "2020-03-31T21:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NDk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsEscapeHatch.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TFLitePredictionsEscapeHatch.java\nsimilarity index 96%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsEscapeHatch.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TFLitePredictionsEscapeHatch.java\nindex 06792eaf..ca75368a 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsEscapeHatch.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TFLitePredictionsEscapeHatch.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions;\n+package com.amplifyframework.predictions.tensorflow;\n \n import androidx.annotation.NonNull;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NzAyNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401147025", "bodyText": "I like this. I think on the API category, though, we just have the escape hatch as Map<String, ApiWhatever>. Here, the equivalent would be like Map<String, Interpreter>, instead of this encapsulating class. Just pointing it out. I do like the encapsulation.", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:04:30Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsEscapeHatch.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions;\n+\n+import androidx.annotation.NonNull;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * An escape hatch to give low-level access to Tensorflow interpreter.\n+ */\n+public final class TFLitePredictionsEscapeHatch {", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNTk5OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401235998", "bodyText": "yea I did this because we would need to return multiple types of AWS clients in the AWS plugin. If we directly use a map instead of encapsulating it, then it would need to be Map<String, AmazonWebServiceClient>, which I think is pretty ugly.", "author": "raphkim", "createdAt": "2020-03-31T21:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NzAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsEscapeHatch.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TFLitePredictionsEscapeHatch.java\nsimilarity index 96%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsEscapeHatch.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TFLitePredictionsEscapeHatch.java\nindex 06792eaf..ca75368a 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsEscapeHatch.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TFLitePredictionsEscapeHatch.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions;\n+package com.amplifyframework.predictions.tensorflow;\n \n import androidx.annotation.NonNull;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0Nzc0Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401147747", "bodyText": "We have a convention emerging around these names. I wonder if it would have been better to call this InterpretOptions.default(), or InterpretOptions.defaultOptions(), or just even InterpretOptions.create() (without any funny business).\nWell, default() isn't an option, sorry. default is a keyword.", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:05:48Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsPlugin.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.operation.InterpretOperation;\n+import com.amplifyframework.predictions.operation.TFLiteInterpretOperation;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.request.TFLiteTextClassificationRequest;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.predictions.service.TFLitePredictionsService;\n+\n+import org.json.JSONObject;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * A plugin for Predictions category that uses models from\n+ * Tensorflow lite to carry out tasks offline.\n+ */\n+public final class TFLitePredictionsPlugin extends PredictionsPlugin<TFLitePredictionsEscapeHatch> {\n+    private static final String TFL_PREDICTIONS_PLUGIN_KEY = \"tflPredictionsPlugin\";\n+\n+    private final ExecutorService executorService;\n+\n+    private TFLitePredictionsService predictionsService;\n+\n+    public TFLitePredictionsPlugin() {\n+        this.executorService = Executors.newCachedThreadPool();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return TFL_PREDICTIONS_PLUGIN_KEY;\n+    }\n+\n+    @Override\n+    public void configure(\n+            @NonNull JSONObject pluginConfiguration,\n+            @NonNull Context context\n+    ) throws AmplifyException {\n+        this.predictionsService = new TFLitePredictionsService(context);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public TFLitePredictionsEscapeHatch getEscapeHatch() {\n+        return new TFLitePredictionsEscapeHatch(predictionsService.getInterpreters());\n+    }\n+\n+    @NonNull\n+    @Override\n+    public InterpretOperation<?> interpret(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        final InterpretOptions options = InterpretOptions.defaultInstance();", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1OTY4Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401259683", "bodyText": "I think name convention like this should be addressed as a whole over the entire project in a different PR :) I'll leave it as is for now, but I agree that a shorter name would have made it much cleaner.", "author": "raphkim", "createdAt": "2020-03-31T22:47:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0Nzc0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsPlugin.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TFLitePredictionsPlugin.java\nsimilarity index 88%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsPlugin.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TFLitePredictionsPlugin.java\nindex fc41bf5a..3a2b4f07 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/TFLitePredictionsPlugin.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TFLitePredictionsPlugin.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions;\n+package com.amplifyframework.predictions.tensorflow;\n \n import android.content.Context;\n import androidx.annotation.NonNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0ODg5MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401148891", "bodyText": "This is confusing, it reads like {@link SentimentType} is the input, not the output. Can you clarify wording?", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:07:53Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/adapter/SentimentTypeAdapter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.adapter;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.SentimentType;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Utility to convert third-party {@link SentimentType} equivalent", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MDkwNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401260906", "bodyText": "hmm, i think the wording itself is clear, but the fact that I linked the word made it seem confusing. Will fix", "author": "raphkim", "createdAt": "2020-03-31T22:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0ODg5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/adapter/SentimentTypeAdapter.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java\nsimilarity index 96%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/adapter/SentimentTypeAdapter.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java\nindex 9e3af6ae..58f4fc93 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/adapter/SentimentTypeAdapter.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.adapter;\n+package com.amplifyframework.predictions.tensorflow.adapter;\n \n import androidx.annotation.NonNull;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MTU3NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401151574", "bodyText": "In this PR, you are inconsistently applying Objects.requireNonNull(...) when you label a param as @NonNull. So far, we have been using the requireNonNull for at least all user-provided fields (as this one.)", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:12:32Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/request/TFLiteTextClassificationRequest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.request;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Simple request instance for text classification operation.\n+ */\n+public final class TFLiteTextClassificationRequest {\n+    private final String text;\n+\n+    /**\n+     * Constructs an instance of {@link TFLiteTextClassificationRequest}.\n+     * @param text the text to classify\n+     */\n+    public TFLiteTextClassificationRequest(@NonNull String text) {\n+        this.text = Objects.requireNonNull(text);", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MzQ1OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401273459", "bodyText": "Well, since text isn't verified to be non null at plugin level, I figured here would be the good place to assert this", "author": "raphkim", "createdAt": "2020-03-31T23:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MTU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/request/TFLiteTextClassificationRequest.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/request/TFLiteTextClassificationRequest.java\nsimilarity index 94%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/request/TFLiteTextClassificationRequest.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/request/TFLiteTextClassificationRequest.java\nindex 53c19bd4..68cc7cca 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/request/TFLiteTextClassificationRequest.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/request/TFLiteTextClassificationRequest.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.request;\n+package com.amplifyframework.predictions.tensorflow.request;\n \n import androidx.annotation.NonNull;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzQyMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401153423", "bodyText": "release() or cleanup()? These sound more resource-management-y than close() (what did I open?)", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:15:41Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLitePredictionsService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Predictions service that uses Tensorflow lite's\n+ * pre-trained models to make predictions offline.\n+ */\n+public final class TFLitePredictionsService {\n+\n+    private final TFLiteTextClassificationService textClassificationService;\n+\n+    /**\n+     * Constructs an instance of {@link TFLitePredictionsService}.\n+     * @param context Android context\n+     */\n+    public TFLitePredictionsService(@NonNull Context context) {\n+        this.textClassificationService = new TFLiteTextClassificationService(context);\n+    }\n+\n+    public void classify(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        textClassificationService.classify(text, onSuccess, onError);\n+    }\n+\n+    /**\n+     * Free up resources used by Tensorflow lite.\n+     */\n+    public void close() {", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MzI1Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401273256", "bodyText": "terminate should do", "author": "raphkim", "createdAt": "2020-03-31T23:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzQyMw=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLitePredictionsService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLitePredictionsService.java\nsimilarity index 97%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLitePredictionsService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLitePredictionsService.java\nindex 86ec4b33..8e8803b0 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLitePredictionsService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLitePredictionsService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import androidx.annotation.NonNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzc3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401153779", "bodyText": "MAX_SENTENCE_LEN", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:16:18Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NDE5MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401154191", "bodyText": "DELIMETER_REGEX?", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:17:04Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDQxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401174419", "bodyText": "By convention, move any/all class initialization into constructor; keep field declarations as is.", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:53:12Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final Map<String, Integer> dictionary = new HashMap<>();\n+    private final List<String> labels = new ArrayList<>();", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NTIyNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401175224", "bodyText": "This one can be final, too.", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:54:31Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final Map<String, Integer> dictionary = new HashMap<>();\n+    private final List<String> labels = new ArrayList<>();\n+\n+    private final Context context;\n+\n+    private Interpreter tflite;\n+    private AtomicBoolean loaded;", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjUwNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401176505", "bodyText": "Not in the constructor. You should always decouple object instantiation from doing \"real\" work. Particularly if its something hardcore like reading big files from disk.\nA better pattern would be to use this class like:\nClassifier classifier = new TensorflowClassifier();\nclassifier.loadModels();", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:56:54Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final Map<String, Integer> dictionary = new HashMap<>();\n+    private final List<String> labels = new ArrayList<>();\n+\n+    private final Context context;\n+\n+    private Interpreter tflite;\n+    private AtomicBoolean loaded;\n+\n+    /**\n+     * Constructs an instance of service to perform text\n+     * sentiment interpretation using Tensorflow Lite\n+     * interpreter.\n+     * @param context the Android context for loading model\n+     */\n+    TFLiteTextClassificationService(Context context) {\n+        this.context = context;\n+        this.loaded = new AtomicBoolean(false);\n+\n+        try {\n+            // Try loading assets now if possible\n+            loadIfNotLoaded();", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3Nzg5Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401177892", "bodyText": "Blargh. I wish this could say like Consumer<TextClassification> or something. Just talking out loud - please disregard as desired - what if we had a TextClassification extends InterpretResult?", "author": "jamesonwilliams", "createdAt": "2020-03-31T19:59:21Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final Map<String, Integer> dictionary = new HashMap<>();\n+    private final List<String> labels = new ArrayList<>();\n+\n+    private final Context context;\n+\n+    private Interpreter tflite;\n+    private AtomicBoolean loaded;\n+\n+    /**\n+     * Constructs an instance of service to perform text\n+     * sentiment interpretation using Tensorflow Lite\n+     * interpreter.\n+     * @param context the Android context for loading model\n+     */\n+    TFLiteTextClassificationService(Context context) {\n+        this.context = context;\n+        this.loaded = new AtomicBoolean(false);\n+\n+        try {\n+            // Try loading assets now if possible\n+            loadIfNotLoaded();\n+        } catch (PredictionsException exception) {\n+            // Ignore if it fails to load during configuration.\n+\n+            // This may sound weird, but we want the model to be loaded in as soon as possible.\n+            // But we don't want to throw an error that needs to be caught at configuration time,\n+            // since these models are supposed to be optional.\n+        }\n+    }\n+\n+    /**\n+     * Gets the associated service key of this service for\n+     * identification.\n+     * @return the service key\n+     */\n+    @NonNull\n+    String getServiceKey() {\n+        return SERVICE_KEY;\n+    }\n+\n+    /**\n+     * Classifies text to analyze associated sentiments.\n+     * @param text the text to classify\n+     * @param onSuccess notified when classification succeeds\n+     * @param onError notified when classification fails\n+     */\n+    void classify(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTg3Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401179872", "bodyText": "The model loading in this category is analogous to the initialization work, in the DataStore.\nI added some lifecycle to accomodate this kind of stuff.\nconfigure() on the plugin reads the config file and instantiates some classes.\nintialize() can be used for this kind of heavy-lifting stuff, though.\nCheckout the afterInitializion() method in DataStore. We could externalize this utility into core. Then, both categories could use it.\nRight now, the logic is like:\n\nTry to load models at start up.\nBefore doing anything, try again.\n\nAnd its sort of relaxed about sequencing/error handling.\nWith the new approach, it'd be more like:\n\nTry to load model at initialization. If it fails, pass back error.\nDefer all operations until after that one initialization attempt succeeds/fails.\nOnly ever try to initialize at a single point in time during the operation of the system.", "author": "jamesonwilliams", "createdAt": "2020-03-31T20:03:10Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final Map<String, Integer> dictionary = new HashMap<>();\n+    private final List<String> labels = new ArrayList<>();\n+\n+    private final Context context;\n+\n+    private Interpreter tflite;\n+    private AtomicBoolean loaded;\n+\n+    /**\n+     * Constructs an instance of service to perform text\n+     * sentiment interpretation using Tensorflow Lite\n+     * interpreter.\n+     * @param context the Android context for loading model\n+     */\n+    TFLiteTextClassificationService(Context context) {\n+        this.context = context;\n+        this.loaded = new AtomicBoolean(false);\n+\n+        try {\n+            // Try loading assets now if possible\n+            loadIfNotLoaded();\n+        } catch (PredictionsException exception) {\n+            // Ignore if it fails to load during configuration.\n+\n+            // This may sound weird, but we want the model to be loaded in as soon as possible.\n+            // But we don't want to throw an error that needs to be caught at configuration time,\n+            // since these models are supposed to be optional.\n+        }\n+    }\n+\n+    /**\n+     * Gets the associated service key of this service for\n+     * identification.\n+     * @return the service key\n+     */\n+    @NonNull\n+    String getServiceKey() {\n+        return SERVICE_KEY;\n+    }\n+\n+    /**\n+     * Classifies text to analyze associated sentiments.\n+     * @param text the text to classify\n+     * @param onSuccess notified when classification succeeds\n+     * @param onError notified when classification fails\n+     */\n+    void classify(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        final Sentiment sentiment;\n+        try {\n+            loadIfNotLoaded();", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MjIwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401242201", "bodyText": "the point is to relax the error handling. This is because models are optional for this plugin, which means that this plugin needs to successfully configure itself even if all of the models are missing (and therefore is useless).\nLet's look at this scenario:\n\nI want to detect sentiment\n\nI want an accurate result for this particularly, so I want the result to be union of both offline and online results\n\n\nI want to translate text\n\nmemory is precious, so I'll only use the cloud resource for this\n\n\nI set network mode to auto so that it will combine result if both results are available\nIf offline mode doesn't deliver (due to missing model or something), then only online result should be delivered\n\nThis use case is achieved by only downloading the required TFLite model for sentiment detection. Both online plugin and offline plugin needs to configure itself upon Amplify.configure(). We can't just crash the offline plugin or even leave it hanging at this point waiting for successful load of every model. The configuration needs to go through so that when the customer decides to:\n\ncall sentiment detection: both online and offline plugins must return result\ncall translate: online plugin returns result, but offline plugin may fail\n\nMy solution was to try loading at initialization but ignore error to allow configuration to succeed. That way, we can actually handle each API and their respective model requirement separately.", "author": "raphkim", "createdAt": "2020-03-31T22:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MTM4Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401181387", "bodyText": "trivial -- when you have such a small amount of code for the payload, you can inline it:\nonSuccess.accept(InterpretResult.builder()\n    .sentiment(sentiment)\n    .build());\n\nActually, you could probably even bring that whole thing up into the try block:\ntry {\n    onSuccess.accept(InterpretResult.builder()\n        .sentiment(fetchSentiment(text))\n        .build());\n} catch (PredictionsException sentimentDetectionFailure) {\n    onError.accept(sentimentDetectionFailure);\n}", "author": "jamesonwilliams", "createdAt": "2020-03-31T20:05:51Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final Map<String, Integer> dictionary = new HashMap<>();\n+    private final List<String> labels = new ArrayList<>();\n+\n+    private final Context context;\n+\n+    private Interpreter tflite;\n+    private AtomicBoolean loaded;\n+\n+    /**\n+     * Constructs an instance of service to perform text\n+     * sentiment interpretation using Tensorflow Lite\n+     * interpreter.\n+     * @param context the Android context for loading model\n+     */\n+    TFLiteTextClassificationService(Context context) {\n+        this.context = context;\n+        this.loaded = new AtomicBoolean(false);\n+\n+        try {\n+            // Try loading assets now if possible\n+            loadIfNotLoaded();\n+        } catch (PredictionsException exception) {\n+            // Ignore if it fails to load during configuration.\n+\n+            // This may sound weird, but we want the model to be loaded in as soon as possible.\n+            // But we don't want to throw an error that needs to be caught at configuration time,\n+            // since these models are supposed to be optional.\n+        }\n+    }\n+\n+    /**\n+     * Gets the associated service key of this service for\n+     * identification.\n+     * @return the service key\n+     */\n+    @NonNull\n+    String getServiceKey() {\n+        return SERVICE_KEY;\n+    }\n+\n+    /**\n+     * Classifies text to analyze associated sentiments.\n+     * @param text the text to classify\n+     * @param onSuccess notified when classification succeeds\n+     * @param onError notified when classification fails\n+     */\n+    void classify(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        final Sentiment sentiment;\n+        try {\n+            loadIfNotLoaded();\n+            sentiment = fetchSentiment(text);\n+        } catch (PredictionsException exception) {\n+            onError.accept(exception);\n+            return;\n+        }\n+\n+        InterpretResult result = InterpretResult.builder()\n+                .sentiment(sentiment)\n+                .build();\n+        onSuccess.accept(result);", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MTcwNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401181707", "bodyText": "Which assets?", "author": "jamesonwilliams", "createdAt": "2020-03-31T20:06:27Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final Map<String, Integer> dictionary = new HashMap<>();\n+    private final List<String> labels = new ArrayList<>();\n+\n+    private final Context context;\n+\n+    private Interpreter tflite;\n+    private AtomicBoolean loaded;\n+\n+    /**\n+     * Constructs an instance of service to perform text\n+     * sentiment interpretation using Tensorflow Lite\n+     * interpreter.\n+     * @param context the Android context for loading model\n+     */\n+    TFLiteTextClassificationService(Context context) {\n+        this.context = context;\n+        this.loaded = new AtomicBoolean(false);\n+\n+        try {\n+            // Try loading assets now if possible\n+            loadIfNotLoaded();\n+        } catch (PredictionsException exception) {\n+            // Ignore if it fails to load during configuration.\n+\n+            // This may sound weird, but we want the model to be loaded in as soon as possible.\n+            // But we don't want to throw an error that needs to be caught at configuration time,\n+            // since these models are supposed to be optional.\n+        }\n+    }\n+\n+    /**\n+     * Gets the associated service key of this service for\n+     * identification.\n+     * @return the service key\n+     */\n+    @NonNull\n+    String getServiceKey() {\n+        return SERVICE_KEY;\n+    }\n+\n+    /**\n+     * Classifies text to analyze associated sentiments.\n+     * @param text the text to classify\n+     * @param onSuccess notified when classification succeeds\n+     * @param onError notified when classification fails\n+     */\n+    void classify(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        final Sentiment sentiment;\n+        try {\n+            loadIfNotLoaded();\n+            sentiment = fetchSentiment(text);\n+        } catch (PredictionsException exception) {\n+            onError.accept(exception);\n+            return;\n+        }\n+\n+        InterpretResult result = InterpretResult.builder()\n+                .sentiment(sentiment)\n+                .build();\n+        onSuccess.accept(result);\n+    }\n+\n+    private Sentiment fetchSentiment(String text) throws PredictionsException {\n+        float[][] input;\n+        float[][] output;\n+\n+        // Pre-process input text\n+        try {\n+            input = tokenizeInputText(text);\n+            output = new float[1][labels.size()];\n+        } catch (IllegalArgumentException exception) {\n+            throw new PredictionsException(\n+                    \"Tensorflow Lite failed to make inference.\",\n+                    exception,\n+                    \"Verify that the assets are loaded.\"", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3Mjg3Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401272872", "bodyText": "It's actually the wrong message here! Thanks for catching it :)", "author": "raphkim", "createdAt": "2020-03-31T23:28:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MTcwNw=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MzE4Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401183182", "bodyText": "should this be called fetchPredominantSentiment?", "author": "jamesonwilliams", "createdAt": "2020-03-31T20:08:56Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final Map<String, Integer> dictionary = new HashMap<>();\n+    private final List<String> labels = new ArrayList<>();\n+\n+    private final Context context;\n+\n+    private Interpreter tflite;\n+    private AtomicBoolean loaded;\n+\n+    /**\n+     * Constructs an instance of service to perform text\n+     * sentiment interpretation using Tensorflow Lite\n+     * interpreter.\n+     * @param context the Android context for loading model\n+     */\n+    TFLiteTextClassificationService(Context context) {\n+        this.context = context;\n+        this.loaded = new AtomicBoolean(false);\n+\n+        try {\n+            // Try loading assets now if possible\n+            loadIfNotLoaded();\n+        } catch (PredictionsException exception) {\n+            // Ignore if it fails to load during configuration.\n+\n+            // This may sound weird, but we want the model to be loaded in as soon as possible.\n+            // But we don't want to throw an error that needs to be caught at configuration time,\n+            // since these models are supposed to be optional.\n+        }\n+    }\n+\n+    /**\n+     * Gets the associated service key of this service for\n+     * identification.\n+     * @return the service key\n+     */\n+    @NonNull\n+    String getServiceKey() {\n+        return SERVICE_KEY;\n+    }\n+\n+    /**\n+     * Classifies text to analyze associated sentiments.\n+     * @param text the text to classify\n+     * @param onSuccess notified when classification succeeds\n+     * @param onError notified when classification fails\n+     */\n+    void classify(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        final Sentiment sentiment;\n+        try {\n+            loadIfNotLoaded();\n+            sentiment = fetchSentiment(text);\n+        } catch (PredictionsException exception) {\n+            onError.accept(exception);\n+            return;\n+        }\n+\n+        InterpretResult result = InterpretResult.builder()\n+                .sentiment(sentiment)\n+                .build();\n+        onSuccess.accept(result);\n+    }\n+\n+    private Sentiment fetchSentiment(String text) throws PredictionsException {", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2OTcwNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401269707", "bodyText": "eh, it's private method so I don't think it matters", "author": "raphkim", "createdAt": "2020-03-31T23:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MzE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MzkyMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401183921", "bodyText": "This method looks like it's doing some interesting stuff. Can you add a little Javadoc above it, to orient the reader? \"We need the input in format (what format?) But, it's in (what format?). So we (perform transformations?).\"", "author": "jamesonwilliams", "createdAt": "2020-03-31T20:10:12Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final Map<String, Integer> dictionary = new HashMap<>();\n+    private final List<String> labels = new ArrayList<>();\n+\n+    private final Context context;\n+\n+    private Interpreter tflite;\n+    private AtomicBoolean loaded;\n+\n+    /**\n+     * Constructs an instance of service to perform text\n+     * sentiment interpretation using Tensorflow Lite\n+     * interpreter.\n+     * @param context the Android context for loading model\n+     */\n+    TFLiteTextClassificationService(Context context) {\n+        this.context = context;\n+        this.loaded = new AtomicBoolean(false);\n+\n+        try {\n+            // Try loading assets now if possible\n+            loadIfNotLoaded();\n+        } catch (PredictionsException exception) {\n+            // Ignore if it fails to load during configuration.\n+\n+            // This may sound weird, but we want the model to be loaded in as soon as possible.\n+            // But we don't want to throw an error that needs to be caught at configuration time,\n+            // since these models are supposed to be optional.\n+        }\n+    }\n+\n+    /**\n+     * Gets the associated service key of this service for\n+     * identification.\n+     * @return the service key\n+     */\n+    @NonNull\n+    String getServiceKey() {\n+        return SERVICE_KEY;\n+    }\n+\n+    /**\n+     * Classifies text to analyze associated sentiments.\n+     * @param text the text to classify\n+     * @param onSuccess notified when classification succeeds\n+     * @param onError notified when classification fails\n+     */\n+    void classify(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        final Sentiment sentiment;\n+        try {\n+            loadIfNotLoaded();\n+            sentiment = fetchSentiment(text);\n+        } catch (PredictionsException exception) {\n+            onError.accept(exception);\n+            return;\n+        }\n+\n+        InterpretResult result = InterpretResult.builder()\n+                .sentiment(sentiment)\n+                .build();\n+        onSuccess.accept(result);\n+    }\n+\n+    private Sentiment fetchSentiment(String text) throws PredictionsException {\n+        float[][] input;\n+        float[][] output;\n+\n+        // Pre-process input text\n+        try {\n+            input = tokenizeInputText(text);\n+            output = new float[1][labels.size()];\n+        } catch (IllegalArgumentException exception) {\n+            throw new PredictionsException(\n+                    \"Tensorflow Lite failed to make inference.\",\n+                    exception,\n+                    \"Verify that the assets are loaded.\"\n+            );\n+        }\n+\n+        // Run inference.\n+        tflite.run(input, output);\n+\n+        // Find the predominant sentiment\n+        Sentiment sentiment = null;\n+        for (int i = 0; i < labels.size(); i++) {\n+            SentimentType sentimentType = SentimentTypeAdapter.fromTensorflow(labels.get(i));\n+            float confidenceScore = output[0][i] * PERCENT;\n+            if (sentiment == null || sentiment.getConfidence() < confidenceScore) {\n+                sentiment = Sentiment.builder()\n+                        .value(sentimentType)\n+                        .confidence(confidenceScore)\n+                        .build();\n+            }\n+        }\n+        return sentiment;\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    private float[][] tokenizeInputText(String text) {", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MzAyNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401273025", "bodyText": "It's some magic code from their official sample code... that's all I can say", "author": "raphkim", "createdAt": "2020-03-31T23:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MzkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NzMzOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401187338", "bodyText": "You have a number of different components that have a similar lifecycle: load(), isLoaded().\nYou could make a Loadable interface:\n// V = value type for thing that is loaded, e.g. a Map<String, Integer> dictionary, etc.\ninterface Loadable<V> {\n    void load();\n    void unload();\n    boolean isLoaded();\n    onLoaded(Consumer<V> valueConsumer);\n    onUnloaded(Action unloadAction);\n    @Nullable V value()\n}\n\nIf you have somehting like this, you can externalize all of these details into small little template files and compartmentalize the load/validation logic into them.\nThen the classification refers to them more like:\nfor (Loadable<?> dependency : LOADABLES) {\n    if (!dependency.isLoaded()) {\n        dependency.load();\n    }\n}\n\nI guess you'd want this to happen as a down-stream result of the call-chain from thePlugin<?>'s initialize() lifecycle method.", "author": "jamesonwilliams", "createdAt": "2020-03-31T20:16:10Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.service;\n+\n+import android.content.Context;\n+import android.content.res.AssetFileDescriptor;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from Tensorflow lite.\n+ */\n+final class TFLiteTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+    private static final String MODEL_PATH = \"text_classification.tflite\";\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+    private static final String LABEL_PATH = \"text_classification_labels.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int SENTENCE_LEN = 256;\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    // Simple delimiter to split words.\n+    private static final String SIMPLE_SPACE_OR_PUNCTUATION = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final Map<String, Integer> dictionary = new HashMap<>();\n+    private final List<String> labels = new ArrayList<>();\n+\n+    private final Context context;\n+\n+    private Interpreter tflite;\n+    private AtomicBoolean loaded;\n+\n+    /**\n+     * Constructs an instance of service to perform text\n+     * sentiment interpretation using Tensorflow Lite\n+     * interpreter.\n+     * @param context the Android context for loading model\n+     */\n+    TFLiteTextClassificationService(Context context) {\n+        this.context = context;\n+        this.loaded = new AtomicBoolean(false);\n+\n+        try {\n+            // Try loading assets now if possible\n+            loadIfNotLoaded();\n+        } catch (PredictionsException exception) {\n+            // Ignore if it fails to load during configuration.\n+\n+            // This may sound weird, but we want the model to be loaded in as soon as possible.\n+            // But we don't want to throw an error that needs to be caught at configuration time,\n+            // since these models are supposed to be optional.\n+        }\n+    }\n+\n+    /**\n+     * Gets the associated service key of this service for\n+     * identification.\n+     * @return the service key\n+     */\n+    @NonNull\n+    String getServiceKey() {\n+        return SERVICE_KEY;\n+    }\n+\n+    /**\n+     * Classifies text to analyze associated sentiments.\n+     * @param text the text to classify\n+     * @param onSuccess notified when classification succeeds\n+     * @param onError notified when classification fails\n+     */\n+    void classify(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        final Sentiment sentiment;\n+        try {\n+            loadIfNotLoaded();\n+            sentiment = fetchSentiment(text);\n+        } catch (PredictionsException exception) {\n+            onError.accept(exception);\n+            return;\n+        }\n+\n+        InterpretResult result = InterpretResult.builder()\n+                .sentiment(sentiment)\n+                .build();\n+        onSuccess.accept(result);\n+    }\n+\n+    private Sentiment fetchSentiment(String text) throws PredictionsException {\n+        float[][] input;\n+        float[][] output;\n+\n+        // Pre-process input text\n+        try {\n+            input = tokenizeInputText(text);\n+            output = new float[1][labels.size()];\n+        } catch (IllegalArgumentException exception) {\n+            throw new PredictionsException(\n+                    \"Tensorflow Lite failed to make inference.\",\n+                    exception,\n+                    \"Verify that the assets are loaded.\"\n+            );\n+        }\n+\n+        // Run inference.\n+        tflite.run(input, output);\n+\n+        // Find the predominant sentiment\n+        Sentiment sentiment = null;\n+        for (int i = 0; i < labels.size(); i++) {\n+            SentimentType sentimentType = SentimentTypeAdapter.fromTensorflow(labels.get(i));\n+            float confidenceScore = output[0][i] * PERCENT;\n+            if (sentiment == null || sentiment.getConfidence() < confidenceScore) {\n+                sentiment = Sentiment.builder()\n+                        .value(sentimentType)\n+                        .confidence(confidenceScore)\n+                        .build();\n+            }\n+        }\n+        return sentiment;\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    private float[][] tokenizeInputText(String text) {\n+        float[] tmp = new float[SENTENCE_LEN];\n+\n+        int index = 0;\n+        tmp[index++] = dictionary.get(START);\n+\n+        for (String word : text.split(SIMPLE_SPACE_OR_PUNCTUATION)) {\n+            if (index >= SENTENCE_LEN) {\n+                break;\n+            }\n+\n+            tmp[index++] = dictionary.containsKey(word)\n+                    ? dictionary.get(word)\n+                    : dictionary.get(UNKNOWN);\n+        }\n+\n+        // Padding and wrapping.\n+        Arrays.fill(tmp, index, SENTENCE_LEN - 1, dictionary.get(PAD));\n+        return new float[][]{tmp};\n+    }\n+\n+    @WorkerThread\n+    private synchronized void loadIfNotLoaded() throws PredictionsException {\n+        if (loaded.get()) {\n+            return;\n+        }\n+        loadModel();\n+        loadDictionary();\n+        loadLabels();\n+        loaded.set(true);\n+    }\n+\n+    @WorkerThread\n+    private synchronized void loadModel() throws PredictionsException {", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzMzk1NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r402833954", "bodyText": "addressed", "author": "raphkim", "createdAt": "2020-04-03T08:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NzMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nsimilarity index 98%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\nindex 23dbc554..b9911cf3 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/service/TFLiteTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TFLiteTextClassificationService.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.service;\n+package com.amplifyframework.predictions.tensorflow.service;\n \n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MjczOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401192739", "bodyText": "In software, there's always a choice, between \"Fail fast\" and \"degrade gracefully.\"\nWith exception handling, sometimes we see this as \"bubble up the error,\" versus. \"return null.\"\nWith object construction - here, this enum factory - we have the same sort of thing to consider.  We can either:\n\nThrow an error if the input is unknown/invalid. Perhaps, InvalidArgumentException.\nDegrade to an UNKNOWN, type, like you are.\n\nI think the key thing to consider is this: Is the system useful/usable when the value is UNKNOWN? If not, maybe we should \"fail fast.\"", "author": "jamesonwilliams", "createdAt": "2020-03-31T20:25:19Z", "path": "aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/adapter/SentimentTypeAdapter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.adapter;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.SentimentType;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Utility to convert third-party {@link SentimentType} equivalent\n+ * into Amplify-compatible data structure.\n+ */\n+public final class SentimentTypeAdapter {\n+    @SuppressWarnings(\"checkstyle:all\") private SentimentTypeAdapter() {}\n+\n+    /**\n+     * Converts the sentiment string returned by Tensorflow Lite\n+     * Interpreter into a format supported by Amplify Predictions.\n+     * @param sentiment Sentiment type returned by AWS Comprehend\n+     * @return Amplify's {@link SentimentType} enum\n+     */\n+    @NonNull\n+    public static SentimentType fromTensorflow(@NonNull String sentiment) {\n+        switch (sentiment.toLowerCase(Locale.US)) {\n+            case \"positive\":\n+                return SentimentType.POSITIVE;\n+            case \"negative\":\n+                return SentimentType.NEGATIVE;\n+            default:\n+                return SentimentType.UNKNOWN;", "originalCommit": "5659d810c6a31ed93e939dcee18df4cc3ce5a20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NzA3OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401197078", "bodyText": "I think it is useful to return unknown if the model decided that it ran its course successfully and was ultimately unable to determine the specific value for a feature. It will serve as a \"value\" of feature itself.", "author": "raphkim", "createdAt": "2020-03-31T20:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MjczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNTYwMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r401215603", "bodyText": "Ah okay, yes! I agree. This is an important distinction. Unknown as an output of the prediction, versus unknown due to not having results from a prediction.", "author": "jamesonwilliams", "createdAt": "2020-03-31T21:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MjczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "chunk": "diff --git a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/adapter/SentimentTypeAdapter.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java\nsimilarity index 96%\nrename from aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/adapter/SentimentTypeAdapter.java\nrename to aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java\nindex 9e3af6ae..58f4fc93 100644\n--- a/aws-predictions-tfl/src/main/java/com/amplifyframework/predictions/adapter/SentimentTypeAdapter.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java\n\n@@ -13,7 +13,7 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.predictions.adapter;\n+package com.amplifyframework.predictions.tensorflow.adapter;\n \n import androidx.annotation.NonNull;\n \n"}}, {"oid": "7062b59d32180becf6e57878ba344b531390b47b", "url": "https://github.com/aws-amplify/amplify-android/commit/7062b59d32180becf6e57878ba344b531390b47b", "message": "Fix build.gradle", "committedDate": "2020-03-31T21:42:25Z", "type": "commit"}, {"oid": "74d077ddf0ce27be8e7dfffe1e1daa498f17c020", "url": "https://github.com/aws-amplify/amplify-android/commit/74d077ddf0ce27be8e7dfffe1e1daa498f17c020", "message": "Rename module", "committedDate": "2020-03-31T21:46:51Z", "type": "commit"}, {"oid": "0bdda23a43591666be2abc07ea8b0cad11cd30dd", "url": "https://github.com/aws-amplify/amplify-android/commit/0bdda23a43591666be2abc07ea8b0cad11cd30dd", "message": "Rename tensorflow package", "committedDate": "2020-03-31T22:38:51Z", "type": "commit"}, {"oid": "f918dbc068b1fb7f9278ea1656d7d1fd17a4299f", "url": "https://github.com/aws-amplify/amplify-android/commit/f918dbc068b1fb7f9278ea1656d7d1fd17a4299f", "message": "Clarify brand name for TensorFlow Lite", "committedDate": "2020-03-31T22:43:53Z", "type": "commit"}, {"oid": "e8416287255a82a0db8fc3f693bc85c6cfb7cb68", "url": "https://github.com/aws-amplify/amplify-android/commit/e8416287255a82a0db8fc3f693bc85c6cfb7cb68", "message": "Fix import order", "committedDate": "2020-03-31T22:50:24Z", "type": "commit"}, {"oid": "fccd229506df082712b03fb2084710e8ab456294", "url": "https://github.com/aws-amplify/amplify-android/commit/fccd229506df082712b03fb2084710e8ab456294", "message": "Apply suggestions from Jameson (without load changes)", "committedDate": "2020-03-31T23:32:29Z", "type": "commit"}, {"oid": "fccd229506df082712b03fb2084710e8ab456294", "url": "https://github.com/aws-amplify/amplify-android/commit/fccd229506df082712b03fb2084710e8ab456294", "message": "Apply suggestions from Jameson (without load changes)", "committedDate": "2020-03-31T23:32:29Z", "type": "forcePushed"}, {"oid": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "url": "https://github.com/aws-amplify/amplify-android/commit/017386b9fcea4dde2908519ac0b37a50fbf74aae", "message": "Add blocking logic on initialization", "committedDate": "2020-04-02T20:29:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1OTI3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403259279", "bodyText": "Should get a missing Javadoc warning from Checkstyle on this, no?", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:20:28Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.PredictionsPlugin;\n+import com.amplifyframework.predictions.operation.InterpretOperation;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.predictions.tensorflow.operation.TensorFlowInterpretOperation;\n+import com.amplifyframework.predictions.tensorflow.request.TensorFlowTextClassificationRequest;\n+import com.amplifyframework.predictions.tensorflow.service.TensorFlowPredictionsService;\n+\n+import org.json.JSONObject;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * A plugin for Predictions category that uses models from\n+ * TensorFlow Lite to carry out tasks offline.\n+ */\n+public final class TensorFlowPredictionsPlugin extends PredictionsPlugin<TensorFlowPredictionsEscapeHatch> {\n+    private static final String TFL_PREDICTIONS_PLUGIN_KEY = \"tflPredictionsPlugin\";\n+\n+    private final ExecutorService executorService;\n+\n+    private TensorFlowPredictionsService predictionsService;\n+\n+    public TensorFlowPredictionsPlugin() {", "originalCommit": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyMTMzOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403621339", "bodyText": "yea seems they miss some sometimes", "author": "raphkim", "createdAt": "2020-04-05T01:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1OTI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java\nindex 1005257a..09370ad2 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java\n\n@@ -41,12 +41,17 @@ import java.util.concurrent.Executors;\n  * TensorFlow Lite to carry out tasks offline.\n  */\n public final class TensorFlowPredictionsPlugin extends PredictionsPlugin<TensorFlowPredictionsEscapeHatch> {\n-    private static final String TFL_PREDICTIONS_PLUGIN_KEY = \"tflPredictionsPlugin\";\n+    private static final String TENSOR_FLOW_PREDICTIONS_PLUGIN_KEY = \"tensorFlowPredictionsPlugin\";\n \n     private final ExecutorService executorService;\n \n     private TensorFlowPredictionsService predictionsService;\n \n+    /**\n+     * Construct an instance of Predictions Plugin that uses\n+     * pre-trained models from TensorFlow Lite to make inferences\n+     * offline.\n+     */\n     public TensorFlowPredictionsPlugin() {\n         this.executorService = Executors.newCachedThreadPool();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1OTc2Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403259766", "bodyText": "\"tensorFlowPrecitionsPlugin\"?", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:21:38Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.PredictionsPlugin;\n+import com.amplifyframework.predictions.operation.InterpretOperation;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.predictions.tensorflow.operation.TensorFlowInterpretOperation;\n+import com.amplifyframework.predictions.tensorflow.request.TensorFlowTextClassificationRequest;\n+import com.amplifyframework.predictions.tensorflow.service.TensorFlowPredictionsService;\n+\n+import org.json.JSONObject;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * A plugin for Predictions category that uses models from\n+ * TensorFlow Lite to carry out tasks offline.\n+ */\n+public final class TensorFlowPredictionsPlugin extends PredictionsPlugin<TensorFlowPredictionsEscapeHatch> {\n+    private static final String TFL_PREDICTIONS_PLUGIN_KEY = \"tflPredictionsPlugin\";", "originalCommit": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java\nindex 1005257a..09370ad2 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java\n\n@@ -41,12 +41,17 @@ import java.util.concurrent.Executors;\n  * TensorFlow Lite to carry out tasks offline.\n  */\n public final class TensorFlowPredictionsPlugin extends PredictionsPlugin<TensorFlowPredictionsEscapeHatch> {\n-    private static final String TFL_PREDICTIONS_PLUGIN_KEY = \"tflPredictionsPlugin\";\n+    private static final String TENSOR_FLOW_PREDICTIONS_PLUGIN_KEY = \"tensorFlowPredictionsPlugin\";\n \n     private final ExecutorService executorService;\n \n     private TensorFlowPredictionsService predictionsService;\n \n+    /**\n+     * Construct an instance of Predictions Plugin that uses\n+     * pre-trained models from TensorFlow Lite to make inferences\n+     * offline.\n+     */\n     public TensorFlowPredictionsPlugin() {\n         this.executorService = Executors.newCachedThreadPool();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MTgyNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403261825", "bodyText": "As per other PR, you could consider using a ContextProvider @FunctionalInterface to work around the ordering of object construction, e.g.\npublic final class TensorFlowPredictionsPlugin {\n    public TensortFlowPredictionsPlugin() {\n        this.predictionsService = new TensorFlowPredictionsService(() -> context);   \n    }\n}\n\nfinal class TensorFlowPredictionsService {\n    private final ContextResovler contextResolver;\n    TensorFlowPredictionsService(ContextResolver contextResolver) {\n        this.contextResovler = contextResovler;\n    }\n\n    public void someCategoryBehaviorImpl() {\n        // Oh, we need it now ...\n        Context resolvedContext = contextResolver.resolveContext();\n    }\n\n    @FunctionalItnerface interface ContextResolver {\n        Context resolveContext();\n    }\n}", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:25:41Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.PredictionsPlugin;\n+import com.amplifyframework.predictions.operation.InterpretOperation;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.predictions.tensorflow.operation.TensorFlowInterpretOperation;\n+import com.amplifyframework.predictions.tensorflow.request.TensorFlowTextClassificationRequest;\n+import com.amplifyframework.predictions.tensorflow.service.TensorFlowPredictionsService;\n+\n+import org.json.JSONObject;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * A plugin for Predictions category that uses models from\n+ * TensorFlow Lite to carry out tasks offline.\n+ */\n+public final class TensorFlowPredictionsPlugin extends PredictionsPlugin<TensorFlowPredictionsEscapeHatch> {\n+    private static final String TFL_PREDICTIONS_PLUGIN_KEY = \"tflPredictionsPlugin\";\n+\n+    private final ExecutorService executorService;\n+\n+    private TensorFlowPredictionsService predictionsService;\n+\n+    public TensorFlowPredictionsPlugin() {\n+        this.executorService = Executors.newCachedThreadPool();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return TFL_PREDICTIONS_PLUGIN_KEY;\n+    }\n+\n+    @Override\n+    public void configure(\n+            JSONObject pluginConfiguration,\n+            @NonNull Context context\n+    ) throws AmplifyException {\n+        this.predictionsService = new TensorFlowPredictionsService(context);", "originalCommit": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java\nindex 1005257a..09370ad2 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java\n\n@@ -41,12 +41,17 @@ import java.util.concurrent.Executors;\n  * TensorFlow Lite to carry out tasks offline.\n  */\n public final class TensorFlowPredictionsPlugin extends PredictionsPlugin<TensorFlowPredictionsEscapeHatch> {\n-    private static final String TFL_PREDICTIONS_PLUGIN_KEY = \"tflPredictionsPlugin\";\n+    private static final String TENSOR_FLOW_PREDICTIONS_PLUGIN_KEY = \"tensorFlowPredictionsPlugin\";\n \n     private final ExecutorService executorService;\n \n     private TensorFlowPredictionsService predictionsService;\n \n+    /**\n+     * Construct an instance of Predictions Plugin that uses\n+     * pre-trained models from TensorFlow Lite to make inferences\n+     * offline.\n+     */\n     public TensorFlowPredictionsPlugin() {\n         this.executorService = Executors.newCachedThreadPool();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MjY2NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403262665", "bodyText": "(Suppression not needed anymore)", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:27:21Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.adapter;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.SentimentType;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Utility to convert third-party sentiment feature equivalent\n+ * into Amplify-compatible data structure (i.e. {@link SentimentType}).\n+ */\n+public final class SentimentTypeAdapter {\n+    @SuppressWarnings(\"checkstyle:all\") private SentimentTypeAdapter() {}", "originalCommit": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java\nindex 20802139..cc942800 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/adapter/SentimentTypeAdapter.java\n\n@@ -26,7 +26,7 @@ import java.util.Locale;\n  * into Amplify-compatible data structure (i.e. {@link SentimentType}).\n  */\n public final class SentimentTypeAdapter {\n-    @SuppressWarnings(\"checkstyle:all\") private SentimentTypeAdapter() {}\n+    private SentimentTypeAdapter() {}\n \n     /**\n      * Converts the sentiment string returned by TensorFlow Lite\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2NDg3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403264870", "bodyText": "If we have isLoaded(), technically the caller knows all they need to. We could make this @NonNull, and have it throw if there's no loaded value. So then the usage would be:\nif (loadable.isLoaded()) {\n    loadable.getValue(); // This works!\n} else {\n    loadable.getValue(); // This throw.\n}\n\nugh also, we have to start using get in front of accessors. Can you scrub all of your work for this, haha? I hate it, but Kotlin interop, loves it. I'm more flexible than the computer programming language, so have to go with what it wants. :-D", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:30:07Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Action;\n+import com.amplifyframework.core.Consumer;\n+\n+/**\n+ * Defines the behavior of a loadable resource.\n+ * @param <V> the data type of the resource being loaded\n+ * @param <E> the error type for this resource\n+ */\n+public interface Loadable<V, E extends Exception> {\n+    /**\n+     * Begin loading the resources.\n+     */\n+    void load();\n+\n+    /**\n+     * Free up the loaded resources.\n+     */\n+    void unload();\n+\n+    /**\n+     * Return true if the resources are fully loaded.\n+     * @return true if the resources are fully loaded\n+     */\n+    boolean isLoaded();\n+\n+    /**\n+     * Sets the consumer of the loaded value to be\n+     * triggered upon load completion.\n+     * @param onLoaded the consumer of the loaded value\n+     * @return this loadable instance for chaining\n+     */\n+    Loadable<V, E> onLoaded(Consumer<V> onLoaded);\n+\n+    /**\n+     * Sets the consumer of an error which will be triggered\n+     * upon encountering an error while loading/unloading.\n+     * @param onError the consumer of the thrown exception\n+     * @return this loadable instance for chaining\n+     */\n+    Loadable<V, E> onError(Consumer<E> onError);\n+\n+    /**\n+     * Sets the action item to be triggered upon unload\n+     * completion.\n+     * @param onUnloaded the action to invoke upon unload\n+     * @return this loadable instance for chaining\n+     */\n+    Loadable<V, E> onUnloaded(Action onUnloaded);\n+\n+    /**\n+     * Gets the loaded value. Null if the resource was\n+     * not loaded or fully loaded yet.\n+     * @return the loaded value\n+     */\n+    @Nullable", "originalCommit": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java\nindex 9f3a3f95..38770234 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java\n\n@@ -15,7 +15,7 @@\n \n package com.amplifyframework.predictions.tensorflow.asset;\n \n-import androidx.annotation.Nullable;\n+import androidx.annotation.NonNull;\n \n import com.amplifyframework.core.Action;\n import com.amplifyframework.core.Consumer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2NjAyMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403266021", "bodyText": "onLoadError(...), or onErrorLoading(...)?\n(Also, if you don't actually need all of these bells and whistles, feel free to strip some out. I may have gone overboard when I initially spec'd out this Loadable in the last round of PR feedback ...)\nOhhh. Or, maybe we should have:\nvoid onLoaded(Consumer<V> loadedValue, Consumer<E> failureToLoad);\n\nvoid onUnloaded(Action unloadAction, Consumer<E> failureToUnload);\n\n^^ Note, technically the unload could fail too, so we should include an error consumer for it, as well. But, by the time we have these four hooks, we probably don't want four seaprate APIs on Loadable. We can distill success/failure actions into just the two, though: onLoad, onUnload.", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:31:43Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Action;\n+import com.amplifyframework.core.Consumer;\n+\n+/**\n+ * Defines the behavior of a loadable resource.\n+ * @param <V> the data type of the resource being loaded\n+ * @param <E> the error type for this resource\n+ */\n+public interface Loadable<V, E extends Exception> {\n+    /**\n+     * Begin loading the resources.\n+     */\n+    void load();\n+\n+    /**\n+     * Free up the loaded resources.\n+     */\n+    void unload();\n+\n+    /**\n+     * Return true if the resources are fully loaded.\n+     * @return true if the resources are fully loaded\n+     */\n+    boolean isLoaded();\n+\n+    /**\n+     * Sets the consumer of the loaded value to be\n+     * triggered upon load completion.\n+     * @param onLoaded the consumer of the loaded value\n+     * @return this loadable instance for chaining\n+     */\n+    Loadable<V, E> onLoaded(Consumer<V> onLoaded);\n+\n+    /**\n+     * Sets the consumer of an error which will be triggered\n+     * upon encountering an error while loading/unloading.\n+     * @param onError the consumer of the thrown exception\n+     * @return this loadable instance for chaining\n+     */\n+    Loadable<V, E> onError(Consumer<E> onError);", "originalCommit": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java\nindex 9f3a3f95..38770234 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java\n\n@@ -15,7 +15,7 @@\n \n package com.amplifyframework.predictions.tensorflow.asset;\n \n-import androidx.annotation.Nullable;\n+import androidx.annotation.NonNull;\n \n import com.amplifyframework.core.Action;\n import com.amplifyframework.core.Consumer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2ODkwOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403268908", "bodyText": "You can have this just take a dependency on Android's Assets directly, if that's all you need.", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:35:34Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationDictionary.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Action;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Loads the list of words and their numerical indices that the\n+ * text classifier can recognize.\n+ *\n+ * The file being loaded should be in the format of:\n+ * <pre>\n+ * &#60;PAD&#62; 0\n+ * &#60;START&#62; 1\n+ * &#60;UNKNOWN&#62; 2\n+ * word 3\n+ * word 4\n+ * ...\n+ * </pre>\n+ */\n+public class TextClassificationDictionary implements Loadable<Map<String, Integer>, PredictionsException> {\n+    private static final String DICTIONARY_PATH = \"text_classification_vocab.txt\";\n+\n+    // The maximum length of an input sentence.\n+    private static final int MAX_SENTENCE_LENGTH = 256;\n+\n+    // Simple delimiter to split words.\n+    private static final String DELIMITER_REGEX = \"[ ,.!?\\n]\";\n+\n+    /*\n+     * Reserved values in ImdbDataSet dictionary:\n+     * dictionary[\"<PAD>\"] = 0      used for padding\n+     * dictionary[\"<START>\"] = 1    mark for the start of a sentence\n+     * dictionary[\"<UNKNOWN>\"] = 2  mark for unknown words (OOV)\n+     */\n+    private static final String PAD = \"<PAD>\";\n+    private static final String START = \"<START>\";\n+    private static final String UNKNOWN = \"<UNKNOWN>\";\n+\n+    private final AssetManager assets;\n+    private final Map<String, Integer> dictionary;\n+\n+    private Consumer<Map<String, Integer>> onLoaded;\n+    private Consumer<PredictionsException> onError;\n+    private Action onUnloaded;\n+    private boolean loaded;\n+\n+    /**\n+     * Constructs a loader for text classification dictionary.\n+     * @param context the Android context\n+     */\n+    public TextClassificationDictionary(@NonNull Context context) {", "originalCommit": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY2OTI5OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403669299", "bodyText": "I would prefer to leave it as is, since most Android developers should be more familiar with passing in an instance of Context than an AssetManager.", "author": "raphkim", "createdAt": "2020-04-05T08:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2ODkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationDictionary.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationDictionary.java\nindex 0bb26f88..55997210 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationDictionary.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationDictionary.java\n\n@@ -18,7 +18,6 @@ package com.amplifyframework.predictions.tensorflow.asset;\n import android.content.Context;\n import android.content.res.AssetManager;\n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n import androidx.annotation.WorkerThread;\n \n import com.amplifyframework.core.Action;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NDE5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403274190", "bodyText": "You could probablly even wrap this stuff up into its own Loadable, a Loadable<List<Loadable<?, PredictionsException>>, PredictionsException>. (Lol, that type.) But basically, a loadable that is able to load a list of loadables.", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:42:01Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.service;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.predictions.tensorflow.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.tensorflow.asset.Loadable;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationDictionary;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationLabels;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationModel;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from TensorFlow Lite.\n+ */\n+final class TensorFlowTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    private final TextClassificationModel interpreter;\n+    private final TextClassificationDictionary dictionary;\n+    private final TextClassificationLabels labels;\n+    private final List<Loadable<?, PredictionsException>> assets;\n+    private final CountDownLatch loaded;\n+\n+    private PredictionsException loadingError;\n+\n+    /**\n+     * Constructs an instance of service to perform text\n+     * sentiment interpretation using TensorFlow Lite\n+     * interpreter.\n+     * @param context the Android context\n+     */\n+    TensorFlowTextClassificationService(@NonNull Context context) {\n+        this.interpreter = new TextClassificationModel(context);\n+        this.dictionary = new TextClassificationDictionary(context);\n+        this.labels = new TextClassificationLabels(context);\n+\n+        this.assets = Arrays.asList(interpreter, dictionary, labels);\n+        this.loaded = new CountDownLatch(assets.size());", "originalCommit": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY2OTY1Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403669653", "bodyText": "Seems like an overkill to me haha", "author": "raphkim", "createdAt": "2020-04-05T08:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDM1OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403784358", "bodyText": "Yea, I won't argue with that. You could be right.", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NDE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java\nindex ccf448dc..c122fad6 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java\n\n@@ -70,8 +70,10 @@ final class TensorFlowTextClassificationService {\n         this.loaded = new CountDownLatch(assets.size());\n \n         for (Loadable<?, PredictionsException> asset : assets) {\n-            asset.onLoaded(onLoad -> this.loaded.countDown());\n-            asset.onError(error -> this.loadingError = error);\n+            asset.onLoaded(\n+                onLoad -> this.loaded.countDown(),\n+                error -> this.loadingError = error\n+            );\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NTcwOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403275709", "bodyText": "Hm, alright. Yea. You could even set an initial value for this, like \"Not yet initialized\", and then clear it back to null, after intiailization was done. That way the category behaviors could throw that kind of message if need be, too, with your existing control flow.", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:44:02Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.service;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.predictions.tensorflow.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.tensorflow.asset.Loadable;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationDictionary;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationLabels;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationModel;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from TensorFlow Lite.\n+ */\n+final class TensorFlowTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    private final TextClassificationModel interpreter;\n+    private final TextClassificationDictionary dictionary;\n+    private final TextClassificationLabels labels;\n+    private final List<Loadable<?, PredictionsException>> assets;\n+    private final CountDownLatch loaded;\n+\n+    private PredictionsException loadingError;", "originalCommit": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY2OTU2Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403669562", "bodyText": "That would be unnecessary since the main idea is to block everything until after initialization. Technically the user won't be able to reach the state in question.", "author": "raphkim", "createdAt": "2020-04-05T08:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NTcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MDg5OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403670899", "bodyText": "Looking back at the code, that would actually break the flow. It checks first to see if loadingError is null to escape early if it has attempted loading and failed. THEN it waits for load to finish.", "author": "raphkim", "createdAt": "2020-04-05T08:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NTcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java\nindex ccf448dc..c122fad6 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java\n\n@@ -70,8 +70,10 @@ final class TensorFlowTextClassificationService {\n         this.loaded = new CountDownLatch(assets.size());\n \n         for (Loadable<?, PredictionsException> asset : assets) {\n-            asset.onLoaded(onLoad -> this.loaded.countDown());\n-            asset.onError(error -> this.loadingError = error);\n+            asset.onLoaded(\n+                onLoad -> this.loaded.countDown(),\n+                error -> this.loadingError = error\n+            );\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4MDQ4Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403280482", "bodyText": "Code that is more algorithmic in nature like this is well suited for unit test coverage.", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:50:19Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.service;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.predictions.tensorflow.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.tensorflow.asset.Loadable;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationDictionary;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationLabels;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationModel;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n+/**\n+ * An implementation of text classification service using\n+ * pre-trained model from TensorFlow Lite.\n+ */\n+final class TensorFlowTextClassificationService {\n+    private static final String SERVICE_KEY = \"textClassifier\";\n+\n+    // Percentage multiplier\n+    private static final int PERCENT = 100;\n+\n+    private final TextClassificationModel interpreter;\n+    private final TextClassificationDictionary dictionary;\n+    private final TextClassificationLabels labels;\n+    private final List<Loadable<?, PredictionsException>> assets;\n+    private final CountDownLatch loaded;\n+\n+    private PredictionsException loadingError;\n+\n+    /**\n+     * Constructs an instance of service to perform text\n+     * sentiment interpretation using TensorFlow Lite\n+     * interpreter.\n+     * @param context the Android context\n+     */\n+    TensorFlowTextClassificationService(@NonNull Context context) {\n+        this.interpreter = new TextClassificationModel(context);\n+        this.dictionary = new TextClassificationDictionary(context);\n+        this.labels = new TextClassificationLabels(context);\n+\n+        this.assets = Arrays.asList(interpreter, dictionary, labels);\n+        this.loaded = new CountDownLatch(assets.size());\n+\n+        for (Loadable<?, PredictionsException> asset : assets) {\n+            asset.onLoaded(onLoad -> this.loaded.countDown());\n+            asset.onError(error -> this.loadingError = error);\n+        }\n+    }\n+\n+    /**\n+     * Gets the associated service key of this service for\n+     * identification.\n+     * @return the service key\n+     */\n+    @NonNull\n+    String getServiceKey() {\n+        return SERVICE_KEY;\n+    }\n+\n+    @WorkerThread\n+    synchronized void loadIfNotLoaded() {\n+        for (Loadable<?, PredictionsException> asset : assets) {\n+            asset.load();\n+        }\n+    }\n+\n+    /**\n+     * Classifies text to analyze associated sentiments.\n+     * @param text the text to classify\n+     * @param onSuccess notified when classification succeeds\n+     * @param onError notified when classification fails\n+     */\n+    void classify(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        // Escape early if the initialization failed\n+        if (loadingError != null) {\n+            onError.accept(loadingError);\n+            return;\n+        }\n+\n+        // Wait for initialization to complete\n+        // TODO: encapsulate blocking logic elsewhere\n+        try {\n+            loaded.await();\n+        } catch (InterruptedException exception) {\n+            onError.accept(new PredictionsException(\n+                    \"Text classification service initialization was interrupted.\",\n+                    \"Please wait for the required assets to be fully loaded.\"\n+            ));\n+        }\n+\n+        try {\n+            final Sentiment sentiment = fetchSentiment(text);\n+            onSuccess.accept(InterpretResult.builder()\n+                    .sentiment(sentiment)\n+                    .build());\n+        } catch (PredictionsException exception) {\n+            onError.accept(exception);\n+        }\n+    }\n+\n+    private Sentiment fetchSentiment(String text) throws PredictionsException {\n+        float[][] input;\n+        float[][] output;\n+\n+        try {\n+            // Pre-process input text\n+            input = dictionary.tokenizeInputText(text);\n+            output = new float[1][labels.size()];\n+\n+            // Run inference.\n+            interpreter.run(input, output);\n+        } catch (IllegalArgumentException exception) {\n+            throw new PredictionsException(\n+                    \"TensorFlow Lite failed to make an inference.\",\n+                    exception,\n+                    \"Verify that the label size matches the output size of the model.\"\n+            );\n+        }\n+\n+        // Find the predominant sentiment\n+        Sentiment sentiment = null;\n+        for (int i = 0; i < labels.size(); i++) {\n+            SentimentType sentimentType = SentimentTypeAdapter.fromTensorFlow(labels.get(i));\n+            float confidenceScore = output[0][i] * PERCENT;\n+            if (sentiment == null || sentiment.getConfidence() < confidenceScore) {", "originalCommit": "017386b9fcea4dde2908519ac0b37a50fbf74aae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MTYzNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403671636", "bodyText": "I'll make a separate PR addressing both unit and integration tests for this module. For now, I will prioritize completing the AWS plugin implementation.", "author": "raphkim", "createdAt": "2020-04-05T09:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4MDQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NjkyMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403786920", "bodyText": "(TLDR, \"Okay, please write the tests soon!\")\n\nIn the recent work on Auth, one of our developers decided to split up his work into different PRs for source and test. We could potentially use that same model for this Predictions, too. But, I just want to be sure there is a concrete plan to follow up with tests next.\nIt is a best practice to build unit/component tests around the same time as the source code. The developer is most familiar with the source code at this time, and can catch the most bugs. This is also the most frugal time to write tests, for the same reason (no context switching.)\nPersonally, I get worried when I write too much source code without unit/component coverage. My memory happens to be slightly worse than the average person. Regardless, I know that I made (at least a few!) mistakes, or held some false assumptions, forgot edge cases, etc. Software is complex, and it becomes unmanageable very very quickly without guardrails. At a certain point, the complexity becomes overwhelming and I'm no longer able to see how a code base functions. That's a very scary place to be - as an engineer, as a stakeholder in a software business. Unit/component tests are one of best tools I have personally found to help define functional baselines between a project's layers of complexity.", "author": "jamesonwilliams", "createdAt": "2020-04-06T01:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4MDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java\nindex ccf448dc..c122fad6 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java\n\n@@ -70,8 +70,10 @@ final class TensorFlowTextClassificationService {\n         this.loaded = new CountDownLatch(assets.size());\n \n         for (Loadable<?, PredictionsException> asset : assets) {\n-            asset.onLoaded(onLoad -> this.loaded.countDown());\n-            asset.onError(error -> this.loadingError = error);\n+            asset.onLoaded(\n+                onLoad -> this.loaded.countDown(),\n+                error -> this.loadingError = error\n+            );\n         }\n     }\n \n"}}, {"oid": "ee6d387ded54dd2a102e7efa6d034f95924e6008", "url": "https://github.com/aws-amplify/amplify-android/commit/ee6d387ded54dd2a102e7efa6d034f95924e6008", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into interpret-tf", "committedDate": "2020-04-05T01:25:42Z", "type": "commit"}, {"oid": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "url": "https://github.com/aws-amplify/amplify-android/commit/6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "message": "Apply Jameson's suggestions", "committedDate": "2020-04-05T09:08:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTgwNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403651805", "bodyText": "Somewhere before here, you want to call Immutable.of(...). I'd suggest doing it before your last assignment, in the constructor.", "author": "jamesonwilliams", "createdAt": "2020-04-05T05:32:31Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsEscapeHatch.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow;\n+\n+import androidx.annotation.NonNull;\n+\n+import org.tensorflow.lite.Interpreter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * An escape hatch to give low-level access to TensorFlow interpreter.\n+ */\n+public final class TensorFlowPredictionsEscapeHatch {\n+    private final Map<String, Interpreter> interpreters;\n+\n+    TensorFlowPredictionsEscapeHatch(@NonNull Map<String, Interpreter> interpreters) {\n+        this.interpreters = new HashMap<>();\n+\n+        // Only insert non-null interpreters from the map\n+        for (String service : interpreters.keySet()) {\n+            final Interpreter interpreter = interpreters.get(service);\n+            if (interpreter != null) {\n+                this.interpreters.put(service, interpreter);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Return a map of pre-trained TensorFlow Lite interpreters\n+     * used by the plugin.\n+     * @return the map of {service key -> interpreter}\n+     */\n+    public Map<String, Interpreter> getInterpreters() {\n+        return interpreters;", "originalCommit": "ee6d387ded54dd2a102e7efa6d034f95924e6008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2936285c2670275fc027cbdba6b096fc4807c120", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsEscapeHatch.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsEscapeHatch.java\nindex f3d87218..fa82641a 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsEscapeHatch.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsEscapeHatch.java\n\n@@ -17,6 +17,8 @@ package com.amplifyframework.predictions.tensorflow;\n \n import androidx.annotation.NonNull;\n \n+import com.amplifyframework.util.Immutable;\n+\n import org.tensorflow.lite.Interpreter;\n \n import java.util.HashMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTkxOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403651918", "bodyText": "final ?", "author": "jamesonwilliams", "createdAt": "2020-04-05T05:33:56Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationDictionary.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.WorkerThread;\n+\n+import com.amplifyframework.core.Action;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Loads the list of words and their numerical indices that the\n+ * text classifier can recognize.\n+ *\n+ * The file being loaded should be in the format of:\n+ * <pre>\n+ * &#60;PAD&#62; 0\n+ * &#60;START&#62; 1\n+ * &#60;UNKNOWN&#62; 2\n+ * word 3\n+ * word 4\n+ * ...\n+ * </pre>\n+ */\n+public class TextClassificationDictionary implements Loadable<Map<String, Integer>, PredictionsException> {", "originalCommit": "ee6d387ded54dd2a102e7efa6d034f95924e6008", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MDU4NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r404440585", "bodyText": "oops good catch", "author": "raphkim", "createdAt": "2020-04-06T23:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "chunk": "diff --git a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationDictionary.java b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationDictionary.java\nindex 0bb26f88..55997210 100644\n--- a/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationDictionary.java\n+++ b/aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationDictionary.java\n\n@@ -18,7 +18,6 @@ package com.amplifyframework.predictions.tensorflow.asset;\n import android.content.Context;\n import android.content.res.AssetManager;\n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n import androidx.annotation.WorkerThread;\n \n import com.amplifyframework.core.Action;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4MzY5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403783693", "bodyText": "nit: probably V, E extends Throwable> (for both onLoaded(...) and onUnloaded(...).", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:54:12Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/Loadable.java", "diffHunk": "@@ -44,33 +44,29 @@\n \n     /**\n      * Sets the consumer of the loaded value to be\n-     * triggered upon load completion.\n+     * triggered upon load completion. Triggers the\n+     * error consumer upon encountering an error while\n+     * loading.\n      * @param onLoaded the consumer of the loaded value\n+     * @param onLoadError the consumer of the thrown exception\n      * @return this loadable instance for chaining\n      */\n-    Loadable<V, E> onLoaded(Consumer<V> onLoaded);\n-\n-    /**\n-     * Sets the consumer of an error which will be triggered\n-     * upon encountering an error while loading/unloading.\n-     * @param onError the consumer of the thrown exception\n-     * @return this loadable instance for chaining\n-     */\n-    Loadable<V, E> onError(Consumer<E> onError);\n+    Loadable<V, E> onLoaded(Consumer<V> onLoaded, Consumer<E> onLoadError);", "originalCommit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MDU1Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r404440556", "bodyText": "E already extends Exception", "author": "raphkim", "createdAt": "2020-04-06T23:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4MzY5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDA3OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/336#discussion_r403784078", "bodyText": "I wouldn't bother with the != null check, and I'd aim to have onLoadError as a required non-null field. Consider what happens otherwise, this catch statement is functionally equivalent to:\n} catch (PredictionsException exception) {\n    // Gulp!\n}\n\n(Same comment for various Loadable implementations in this PR.)", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:57:13Z", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationLabels.java", "diffHunk": "@@ -92,8 +91,8 @@ public synchronized void load() {\n             }\n             loaded = true;\n         } catch (PredictionsException exception) {\n-            if (onError != null) {\n-                onError.accept(exception);\n+            if (onLoadError != null) {", "originalCommit": "6a4b80c26a019c6b5c225dfb9e1b284d4a18d5c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "2936285c2670275fc027cbdba6b096fc4807c120", "url": "https://github.com/aws-amplify/amplify-android/commit/2936285c2670275fc027cbdba6b096fc4807c120", "message": "Minor edits", "committedDate": "2020-04-06T23:11:08Z", "type": "commit"}]}