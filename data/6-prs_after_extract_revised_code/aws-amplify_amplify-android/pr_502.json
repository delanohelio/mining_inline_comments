{"pr_number": 502, "pr_title": "Subscription authorizer for API", "pr_createdAt": "2020-05-21T02:06:38Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/502", "timeline": [{"oid": "eadaeffc29882023f98dad708443907f868092bb", "url": "https://github.com/aws-amplify/amplify-android/commit/eadaeffc29882023f98dad708443907f868092bb", "message": "Add subscription authorizer", "committedDate": "2020-05-20T16:43:05Z", "type": "commit"}, {"oid": "fa0f4961c253b3bab76a9c65f32d7d27dcd484b7", "url": "https://github.com/aws-amplify/amplify-android/commit/fa0f4961c253b3bab76a9c65f32d7d27dcd484b7", "message": "Minor fixup", "committedDate": "2020-05-21T01:46:31Z", "type": "commit"}, {"oid": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6", "url": "https://github.com/aws-amplify/amplify-android/commit/41ab19b3069c5696bb6cc0819bcfcdccc46feaa6", "message": "GraphQL test copied for subscription", "committedDate": "2020-05-21T01:58:51Z", "type": "commit"}, {"oid": "2feba6d7daff15d777e0073c226a90ad763ad892", "url": "https://github.com/aws-amplify/amplify-android/commit/2feba6d7daff15d777e0073c226a90ad763ad892", "message": "Fix attached request content", "committedDate": "2020-05-21T20:49:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MzY3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r428983679", "bodyText": "Ah heck. I was gonna say, \"remember to add this to the hashCode()/equals()/toString()!\" But it looks like we don't even have those in this class. Which, given how prominent it is in the API signatures, is bad news.", "author": "jamesonwilliams", "createdAt": "2020-05-22T00:29:35Z", "path": "core/src/main/java/com/amplifyframework/api/graphql/GraphQLRequest.java", "diffHunk": "@@ -69,6 +71,22 @@ public GraphQLRequest(\n         this.variablesSerializer = variablesSerializer;\n     }\n \n+    /**\n+     * Returns the query document string.\n+     * @return the query document string\n+     */\n+    public String getDocument() {\n+        return document;\n+    }\n+\n+    /**\n+     * Returns the immutable map of request variables.\n+     * @return the map of variables\n+     */\n+    public Map<String, Object> getVariables() {", "originalCommit": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwMDU0NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r429100544", "bodyText": "I removed getVariables and getDocument again after I realized that it isn't needed anymore. but I agree it still needs those methods you brought up.", "author": "raphkim", "createdAt": "2020-05-22T08:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MzY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "14367a98c86c121dc905f3159e1ed5a5f67d7907", "chunk": "diff --git a/core/src/main/java/com/amplifyframework/api/graphql/GraphQLRequest.java b/core/src/main/java/com/amplifyframework/api/graphql/GraphQLRequest.java\nindex 9fa573e4..2e71c0cc 100644\n--- a/core/src/main/java/com/amplifyframework/api/graphql/GraphQLRequest.java\n+++ b/core/src/main/java/com/amplifyframework/api/graphql/GraphQLRequest.java\n\n@@ -71,22 +69,6 @@ public final class GraphQLRequest<T> {\n         this.variablesSerializer = variablesSerializer;\n     }\n \n-    /**\n-     * Returns the query document string.\n-     * @return the query document string\n-     */\n-    public String getDocument() {\n-        return document;\n-    }\n-\n-    /**\n-     * Returns the immutable map of request variables.\n-     * @return the map of variables\n-     */\n-    public Map<String, Object> getVariables() {\n-        return Immutable.of(variables);\n-    }\n-\n     /**\n      * Processes query parameters into a query string to\n      * be used as HTTP request body.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NTAzOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r428985038", "bodyText": "I've never liked this ApiAuthProviders thing, it has poor encapsulation, and muddles together several different technologies without a consistent behavioral contract.", "author": "jamesonwilliams", "createdAt": "2020-05-22T00:35:08Z", "path": "aws-api/src/test/java/com/amplifyframework/api/aws/SubscriptionAuthorizerTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test that Subscription authorizer can correctly generate appropriate\n+ * headers for different types of authentication methods.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class SubscriptionAuthorizerTest {\n+    private String authenticationSecret;\n+    private ApiAuthProviders apiAuthProviders;\n+\n+    /**\n+     * Construct fake auth providers to override default behaviors for\n+     * subscription authorizer.\n+     */\n+    @Before\n+    public void setup() {\n+        authenticationSecret = RandomString.string();\n+        apiAuthProviders = ApiAuthProviders.builder()", "originalCommit": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwMTA5OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r429101099", "bodyText": "Yea it was a poor implementation on my part back when I was working on it for mutate/query, but it's a legacy that should stay for until after GA...", "author": "raphkim", "createdAt": "2020-05-22T08:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NTAzOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NjA4NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r428986085", "bodyText": "Use the REPORT_TO_AWS-or-whatever one that @drochetti added", "author": "jamesonwilliams", "createdAt": "2020-05-22T00:39:29Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import android.net.Uri;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.sigv4.ApiKeyAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.AppSyncV4Signer;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+\n+import com.amazonaws.DefaultRequest;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.http.HttpMethodName;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayInputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Map;\n+\n+final class SubscriptionAuthorizer {\n+    private final ApiConfiguration configuration;\n+    private final ApiAuthProviders authProviders;\n+\n+    SubscriptionAuthorizer(ApiConfiguration configuration) {\n+        this(configuration, ApiAuthProviders.noProviderOverrides());\n+    }\n+\n+    SubscriptionAuthorizer(ApiConfiguration configuration, ApiAuthProviders authProviders) {\n+        this.configuration = configuration;\n+        this.authProviders = authProviders;\n+    }\n+\n+    /**\n+     * Return authorization json to be used explicitly for subscription registration.\n+     */\n+    JSONObject createHeadersForSubscription(GraphQLRequest<?> request) throws ApiException {\n+        return createHeaders(request, false);\n+    }\n+\n+    /**\n+     * Return authorization json to be used explicitly for establishing connection.\n+     */\n+    JSONObject createHeadersForConnection() throws ApiException {\n+        return createHeaders(null, true);\n+    }\n+\n+    private JSONObject createHeaders(GraphQLRequest<?> request, boolean connectionFlag) throws ApiException {\n+        switch (configuration.getAuthorizationType()) {\n+            case API_KEY:\n+                ApiKeyAuthProvider keyProvider = authProviders.getApiKeyAuthProvider();\n+                if (keyProvider == null) {\n+                    keyProvider = configuration::getApiKey;\n+                }\n+                return forApiKey(keyProvider);\n+            case AWS_IAM:\n+                AWSCredentialsProvider credentialsProvider = authProviders.getAWSCredentialsProvider();\n+                if (credentialsProvider == null) {\n+                    credentialsProvider = AWSMobileClient.getInstance();\n+                }\n+                return forIam(credentialsProvider, request, connectionFlag);\n+            case AMAZON_COGNITO_USER_POOLS:\n+                CognitoUserPoolsAuthProvider cognitoProvider = authProviders.getCognitoUserPoolsAuthProvider();\n+                if (cognitoProvider == null) {\n+                    cognitoProvider = new DefaultCognitoUserPoolsAuthProvider();\n+                }\n+                return forCognitoUserPools(cognitoProvider);\n+            case OPENID_CONNECT:\n+                OidcAuthProvider oidcProvider = authProviders.getOidcAuthProvider();\n+                if (oidcProvider == null) {\n+                    oidcProvider = () -> {\n+                        throw new ApiException(\n+                                \"OidcAuthProvider interface is not implemented.\",\n+                                AmplifyException.TODO_RECOVERY_SUGGESTION\n+                        );\n+                    };\n+                }\n+                return forOidc(oidcProvider);\n+            case NONE:\n+            default:\n+                return new JSONObject();\n+        }\n+    }\n+\n+    private JSONObject forApiKey(ApiKeyAuthProvider keyProvider) throws ApiException {\n+        final String apiKey = keyProvider.getAPIKey();\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"x-amz-date\", Iso8601Timestamp.now())\n+                    .put(\"x-api-key\", apiKey);\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Api key. \",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forCognitoUserPools(CognitoUserPoolsAuthProvider cognitoProvider) throws ApiException {\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"Authorization\", cognitoProvider.getLatestAuthToken());\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Cognito User Pools.\",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forOidc(OidcAuthProvider oidcProvider) throws ApiException {\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"Authorization\", oidcProvider.getLatestAuthToken());\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Open ID Connect.\",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forIam(\n+            AWSCredentialsProvider credentialsProvider,\n+            GraphQLRequest<?> request,\n+            boolean connectionFlag\n+    ) throws ApiException {\n+        final URI apiUrl = getRequestEndpoint(connectionFlag);\n+        final String apiRegion = apiUrl.getAuthority().split(\"\\\\.\")[2];\n+        final String requestContent = getRequestContent(request, connectionFlag);\n+\n+        // Construct a request to be signed\n+        DefaultRequest<?> canonicalRequest = new DefaultRequest<>(\"appsync\");\n+        canonicalRequest.addHeader(\"accept\", \"application/json, text/javascript\");\n+        canonicalRequest.addHeader(\"content-encoding\", \"amz-1.0\");\n+        canonicalRequest.addHeader(\"content-type\", \"application/json; charset=UTF-8\");\n+        canonicalRequest.setHttpMethod(HttpMethodName.valueOf(\"POST\"));\n+        canonicalRequest.setEndpoint(apiUrl);\n+        canonicalRequest.setContent(new ByteArrayInputStream(requestContent.getBytes()));\n+\n+        // Sign with AppSync's SigV4 signer that also considers connection resource path\n+        new AppSyncV4Signer(apiRegion, connectionFlag).sign(\n+                canonicalRequest,\n+                credentialsProvider.getCredentials()\n+        );\n+\n+        // Extract header from signed request and return\n+        Map<String, String> signedHeaders = canonicalRequest.getHeaders();\n+        JSONObject authorization = new JSONObject();\n+        try {\n+            for (Map.Entry<String, String> headerEntry : signedHeaders.entrySet()) {\n+                authorization.put(headerEntry.getKey(), headerEntry.getValue());\n+            }\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for AWS IAM.\",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+        return authorization;\n+    }\n+\n+    private String getHost() {\n+        return Uri.parse(configuration.getEndpoint()).getHost();\n+    }\n+\n+    private URI getRequestEndpoint(boolean connectionFlag) throws ApiException {\n+        try {\n+            String baseUrl = configuration.getEndpoint();\n+            String connectionUrl = connectionFlag ? baseUrl + \"/connect\" : baseUrl;\n+            return new URI(connectionUrl);\n+        } catch (URISyntaxException uriException) {\n+            throw new ApiException(\n+                    \"Error constructing canonical URI for IAM request signature\",\n+                    uriException, AmplifyException.TODO_RECOVERY_SUGGESTION", "originalCommit": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3ODkxNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r429278914", "bodyText": "Didn't know we had that! I'll change it, and add appropriate recovery suggestion everywhere else.", "author": "raphkim", "createdAt": "2020-05-22T14:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NjA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "14367a98c86c121dc905f3159e1ed5a5f67d7907", "chunk": "diff --git a/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java b/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java\nindex e80accd1..0378f06f 100644\n--- a/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java\n+++ b/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java\n\n@@ -150,15 +150,15 @@ final class SubscriptionAuthorizer {\n     ) throws ApiException {\n         final URI apiUrl = getRequestEndpoint(connectionFlag);\n         final String apiRegion = apiUrl.getAuthority().split(\"\\\\.\")[2];\n-        final String requestContent = getRequestContent(request, connectionFlag);\n+        final String requestContent = request != null ? request.getContent() : \"{}\";\n \n         // Construct a request to be signed\n         DefaultRequest<?> canonicalRequest = new DefaultRequest<>(\"appsync\");\n+        canonicalRequest.setEndpoint(apiUrl);\n         canonicalRequest.addHeader(\"accept\", \"application/json, text/javascript\");\n         canonicalRequest.addHeader(\"content-encoding\", \"amz-1.0\");\n         canonicalRequest.addHeader(\"content-type\", \"application/json; charset=UTF-8\");\n         canonicalRequest.setHttpMethod(HttpMethodName.valueOf(\"POST\"));\n-        canonicalRequest.setEndpoint(apiUrl);\n         canonicalRequest.setContent(new ByteArrayInputStream(requestContent.getBytes()));\n \n         // Sign with AppSync's SigV4 signer that also considers connection resource path\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NjIzNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r428986236", "bodyText": "Just, authorization.putAll(signedHeaders()))?", "author": "jamesonwilliams", "createdAt": "2020-05-22T00:40:04Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import android.net.Uri;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.sigv4.ApiKeyAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.AppSyncV4Signer;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+\n+import com.amazonaws.DefaultRequest;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.http.HttpMethodName;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayInputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Map;\n+\n+final class SubscriptionAuthorizer {\n+    private final ApiConfiguration configuration;\n+    private final ApiAuthProviders authProviders;\n+\n+    SubscriptionAuthorizer(ApiConfiguration configuration) {\n+        this(configuration, ApiAuthProviders.noProviderOverrides());\n+    }\n+\n+    SubscriptionAuthorizer(ApiConfiguration configuration, ApiAuthProviders authProviders) {\n+        this.configuration = configuration;\n+        this.authProviders = authProviders;\n+    }\n+\n+    /**\n+     * Return authorization json to be used explicitly for subscription registration.\n+     */\n+    JSONObject createHeadersForSubscription(GraphQLRequest<?> request) throws ApiException {\n+        return createHeaders(request, false);\n+    }\n+\n+    /**\n+     * Return authorization json to be used explicitly for establishing connection.\n+     */\n+    JSONObject createHeadersForConnection() throws ApiException {\n+        return createHeaders(null, true);\n+    }\n+\n+    private JSONObject createHeaders(GraphQLRequest<?> request, boolean connectionFlag) throws ApiException {\n+        switch (configuration.getAuthorizationType()) {\n+            case API_KEY:\n+                ApiKeyAuthProvider keyProvider = authProviders.getApiKeyAuthProvider();\n+                if (keyProvider == null) {\n+                    keyProvider = configuration::getApiKey;\n+                }\n+                return forApiKey(keyProvider);\n+            case AWS_IAM:\n+                AWSCredentialsProvider credentialsProvider = authProviders.getAWSCredentialsProvider();\n+                if (credentialsProvider == null) {\n+                    credentialsProvider = AWSMobileClient.getInstance();\n+                }\n+                return forIam(credentialsProvider, request, connectionFlag);\n+            case AMAZON_COGNITO_USER_POOLS:\n+                CognitoUserPoolsAuthProvider cognitoProvider = authProviders.getCognitoUserPoolsAuthProvider();\n+                if (cognitoProvider == null) {\n+                    cognitoProvider = new DefaultCognitoUserPoolsAuthProvider();\n+                }\n+                return forCognitoUserPools(cognitoProvider);\n+            case OPENID_CONNECT:\n+                OidcAuthProvider oidcProvider = authProviders.getOidcAuthProvider();\n+                if (oidcProvider == null) {\n+                    oidcProvider = () -> {\n+                        throw new ApiException(\n+                                \"OidcAuthProvider interface is not implemented.\",\n+                                AmplifyException.TODO_RECOVERY_SUGGESTION\n+                        );\n+                    };\n+                }\n+                return forOidc(oidcProvider);\n+            case NONE:\n+            default:\n+                return new JSONObject();\n+        }\n+    }\n+\n+    private JSONObject forApiKey(ApiKeyAuthProvider keyProvider) throws ApiException {\n+        final String apiKey = keyProvider.getAPIKey();\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"x-amz-date\", Iso8601Timestamp.now())\n+                    .put(\"x-api-key\", apiKey);\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Api key. \",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forCognitoUserPools(CognitoUserPoolsAuthProvider cognitoProvider) throws ApiException {\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"Authorization\", cognitoProvider.getLatestAuthToken());\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Cognito User Pools.\",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forOidc(OidcAuthProvider oidcProvider) throws ApiException {\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"Authorization\", oidcProvider.getLatestAuthToken());\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Open ID Connect.\",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forIam(\n+            AWSCredentialsProvider credentialsProvider,\n+            GraphQLRequest<?> request,\n+            boolean connectionFlag\n+    ) throws ApiException {\n+        final URI apiUrl = getRequestEndpoint(connectionFlag);\n+        final String apiRegion = apiUrl.getAuthority().split(\"\\\\.\")[2];\n+        final String requestContent = getRequestContent(request, connectionFlag);\n+\n+        // Construct a request to be signed\n+        DefaultRequest<?> canonicalRequest = new DefaultRequest<>(\"appsync\");\n+        canonicalRequest.addHeader(\"accept\", \"application/json, text/javascript\");\n+        canonicalRequest.addHeader(\"content-encoding\", \"amz-1.0\");\n+        canonicalRequest.addHeader(\"content-type\", \"application/json; charset=UTF-8\");\n+        canonicalRequest.setHttpMethod(HttpMethodName.valueOf(\"POST\"));\n+        canonicalRequest.setEndpoint(apiUrl);\n+        canonicalRequest.setContent(new ByteArrayInputStream(requestContent.getBytes()));\n+\n+        // Sign with AppSync's SigV4 signer that also considers connection resource path\n+        new AppSyncV4Signer(apiRegion, connectionFlag).sign(\n+                canonicalRequest,\n+                credentialsProvider.getCredentials()\n+        );\n+\n+        // Extract header from signed request and return\n+        Map<String, String> signedHeaders = canonicalRequest.getHeaders();\n+        JSONObject authorization = new JSONObject();\n+        try {\n+            for (Map.Entry<String, String> headerEntry : signedHeaders.entrySet()) {\n+                authorization.put(headerEntry.getKey(), headerEntry.getValue());\n+            }", "originalCommit": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3ODY0Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r429278647", "bodyText": "JSONObject doesn't have putAll() method, but I realized that I can just directly construct one with a map, so I'll change it.", "author": "raphkim", "createdAt": "2020-05-22T14:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NjIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "14367a98c86c121dc905f3159e1ed5a5f67d7907", "chunk": "diff --git a/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java b/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java\nindex e80accd1..0378f06f 100644\n--- a/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java\n+++ b/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java\n\n@@ -150,15 +150,15 @@ final class SubscriptionAuthorizer {\n     ) throws ApiException {\n         final URI apiUrl = getRequestEndpoint(connectionFlag);\n         final String apiRegion = apiUrl.getAuthority().split(\"\\\\.\")[2];\n-        final String requestContent = getRequestContent(request, connectionFlag);\n+        final String requestContent = request != null ? request.getContent() : \"{}\";\n \n         // Construct a request to be signed\n         DefaultRequest<?> canonicalRequest = new DefaultRequest<>(\"appsync\");\n+        canonicalRequest.setEndpoint(apiUrl);\n         canonicalRequest.addHeader(\"accept\", \"application/json, text/javascript\");\n         canonicalRequest.addHeader(\"content-encoding\", \"amz-1.0\");\n         canonicalRequest.addHeader(\"content-type\", \"application/json; charset=UTF-8\");\n         canonicalRequest.setHttpMethod(HttpMethodName.valueOf(\"POST\"));\n-        canonicalRequest.setEndpoint(apiUrl);\n         canonicalRequest.setContent(new ByteArrayInputStream(requestContent.getBytes()));\n \n         // Sign with AppSync's SigV4 signer that also considers connection resource path\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NzIyNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r428987224", "bodyText": "How can you move this to src/test?", "author": "jamesonwilliams", "createdAt": "2020-05-22T00:44:05Z", "path": "aws-api/src/androidTest/java/com/amplifyframework/api/aws/SubscriptionWithAwsIamTest.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*", "originalCommit": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3ODI3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r429278279", "bodyText": "This test was removed for now", "author": "raphkim", "createdAt": "2020-05-22T14:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NzIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "14367a98c86c121dc905f3159e1ed5a5f67d7907", "chunk": "diff --git a/aws-api/src/androidTest/java/com/amplifyframework/api/aws/SubscriptionWithAwsIamTest.java b/aws-api/src/androidTest/java/com/amplifyframework/api/aws/SubscriptionWithAwsIamTest.java\ndeleted file mode 100644\nindex 21865f6c..00000000\n--- a/aws-api/src/androidTest/java/com/amplifyframework/api/aws/SubscriptionWithAwsIamTest.java\n+++ /dev/null\n\n@@ -1,232 +0,0 @@\n-/*\n- * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package com.amplifyframework.api.aws;\n-\n-import com.amplifyframework.api.ApiCategory;\n-import com.amplifyframework.api.ApiException;\n-import com.amplifyframework.api.aws.test.R;\n-import com.amplifyframework.api.graphql.GraphQLRequest;\n-import com.amplifyframework.api.graphql.GraphQLResponse;\n-import com.amplifyframework.testutils.Assets;\n-import com.amplifyframework.testutils.sync.SynchronousApi;\n-import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.UUID;\n-\n-import io.reactivex.observers.TestObserver;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-/**\n- * Validates the functionality of the {@link AWSApiPlugin}.\n- *\n- * To configure an endpoint for this:\n- *\n- * 1. Create a new \"Event App\" AppSync endpoint via \"Create with Wizard\" at\n- *    https://us-west-2.console.aws.amazon.com/appsync/home?region=us-west-2#/create\n- *\n- * 2. In the App Sync console, find the settings for the API you just created. Get\n- *    the API URL and API Key, and populate them into the\n- *    src/androidTest/res/raw/amplifyconfiguration.json.\n- *    Name the API \"GraphQLInstrumentationTest\". Ensure the region is set correctly.\n- *\n- * 3. Run the test. From the command line, you can do ./gradlew aws-amplify-api-aws:connectedAndroidTest\n- */\n-public final class SubscriptionWithAwsIamTest {\n-    private static final String API_NAME = \"eventsApiWithIam\";\n-\n-    private SynchronousApi api;\n-    private SynchronousMobileClient mobileClient;\n-\n-    /**\n-     * Configure the Amplify framework, if that hasn't already happened in this process instance.\n-     * @throws Exception if Amplify configuration or auth initialization fails\n-     */\n-    @Before\n-    public void setUp() throws Exception {\n-        ApiCategory asyncDelegate = TestApiCategory.fromConfiguration(R.raw.amplifyconfiguration);\n-        api = SynchronousApi.delegatingTo(asyncDelegate);\n-        mobileClient = SynchronousMobileClient.instance();\n-        mobileClient.initialize();\n-    }\n-\n-    /**\n-     * Validates that we can receive notification of a mutation over a WebSocket\n-     * subscription. Specifically, this test will:\n-     * 1. Create an event, and validate it;\n-     * 2. Setup a subscription to listen for comments on that event;\n-     * 3. Post a comment about the event, validate that comment;\n-     * 4. Expect the comment to arrive on the subscription;\n-     * 5. Validate that the subscription can be torn down gracefully.\n-     * @throws ApiException On failure to obtain a valid response from endpoint\n-     */\n-    @Test\n-    public void subscriptionReceivesMutation() throws ApiException {\n-        // Create an event\n-        String eventId = createEvent();\n-\n-        // Start listening for comments on that event\n-        TestObserver<GraphQLResponse<Comment>> observer = api.onCreate(\n-            API_NAME,\n-            new GraphQLRequest<>(\n-                Assets.readAsString(\"subscribe-event-comments.graphql\"),\n-                Collections.singletonMap(\"eventId\", eventId),\n-                Comment.class,\n-                new GsonVariablesSerializer()\n-            )\n-        ).test();\n-\n-        // Create a comment\n-        createComment(eventId);\n-\n-        // Validate that the comment was received over the subscription\n-        Comment firstValue = observer.awaitCount(1).values().get(0).getData();\n-        assertEquals(\"It's going to be fun!\", firstValue.content());\n-\n-        // Cancel the subscription.\n-        observer.dispose();\n-    }\n-\n-    /**\n-     * Creates a comment, associated to an event whose ID is {@see eventId}.\n-     * @param eventId ID of event to which this comment will be associated\n-     * @throws ApiException On failure to obtain a valid response from endpoint\n-     */\n-    private void createComment(String eventId) throws ApiException {\n-        String commentId = UUID.randomUUID().toString();\n-\n-        final Map<String, Object> variables = new HashMap<>();\n-        variables.put(\"eventId\", eventId);\n-        variables.put(\"commentId\", commentId);\n-        variables.put(\"content\", \"It's going to be fun!\");\n-        variables.put(\"createdAt\", Iso8601Timestamp.now());\n-\n-        Comment createdComment = api.create(\n-            API_NAME,\n-            new GraphQLRequest<>(\n-                Assets.readAsString(\"create-comment.graphql\"),\n-                variables,\n-                Comment.class,\n-                new GsonVariablesSerializer()\n-            )\n-        );\n-        assertEquals(\"It's going to be fun!\", createdComment.content());\n-    }\n-\n-    /**\n-     * Create an Event against the GraphQL endpoint, using a mutation.\n-     * Validate the response to ensure that what was created is what we requested.\n-     * @return The unique ID of the newly created event. This ID may be used\n-     *         to associate comments to this event object.\n-     * @throws ApiException On failure to obtain a valid response from endpoint\n-     */\n-    private String createEvent() throws ApiException {\n-        // Arrange a creation request, including a map of plug-able variables\n-        final Map<String, Object> variables = new HashMap<>();\n-        variables.put(\"name\", \"Pizza Party\");\n-        variables.put(\"when\", \"Tomorrow\");\n-        variables.put(\"where\", \"Mario's Pizza Emporium\");\n-        variables.put(\"description\", \"RSVP for the best possible pizza toppings.\");\n-\n-        Event createdEvent = api.create(\n-            API_NAME,\n-            new GraphQLRequest<>(\n-                Assets.readAsString(\"create-event.graphql\"),\n-                variables,\n-                Event.class,\n-                new GsonVariablesSerializer()\n-            )\n-        );\n-\n-        // Validate the response. No errors are expected.\n-        assertEquals(\"Pizza Party\", createdEvent.name());\n-        assertEquals(\"Tomorrow\", createdEvent.when());\n-        assertEquals(\"Mario's Pizza Emporium\", createdEvent.where());\n-        assertEquals(\"RSVP for the best possible pizza toppings.\", createdEvent.description());\n-\n-        return createdEvent.id();\n-    }\n-\n-    /**\n-     * There's more to a Comment, as understood by our GraphQL schema, but\n-     * for the purposes of our tests, we just model a Comment as a thing containing\n-     * a String content message. This is enough for a simple assertion: \"yup, same one\".\n-     */\n-    static final class Comment {\n-        private final String content;\n-\n-        Comment(final String content) {\n-            this.content = content;\n-        }\n-\n-        String content() {\n-            return content;\n-        }\n-    }\n-\n-    /**\n-     * Model of an Event, which we create as part of this test, so that we can\n-     * associate comments to the event.\n-     */\n-    static final class Event {\n-        private final String id;\n-        private final String name;\n-        private final String when;\n-        private final String where;\n-        private final String description;\n-\n-        Event(\n-                @SuppressWarnings(\"ParameterName\")\n-                final String id,\n-                final String name,\n-                final String when,\n-                final String where,\n-                final String description) {\n-            this.id = id;\n-            this.name = name;\n-            this.when = when;\n-            this.where = where;\n-            this.description = description;\n-        }\n-\n-        String id() {\n-            return id;\n-        }\n-\n-        String name() {\n-            return name;\n-        }\n-\n-        String when() {\n-            return when;\n-        }\n-\n-        String where() {\n-            return where;\n-        }\n-\n-        String description() {\n-            return description;\n-        }\n-    }\n-}\n-\n"}}, {"oid": "14367a98c86c121dc905f3159e1ed5a5f67d7907", "url": "https://github.com/aws-amplify/amplify-android/commit/14367a98c86c121dc905f3159e1ed5a5f67d7907", "message": "Fix data being attached to request", "committedDate": "2020-05-22T07:58:12Z", "type": "commit"}, {"oid": "e7b244ad0e95dc5079e43731167f87c6e888d696", "url": "https://github.com/aws-amplify/amplify-android/commit/e7b244ad0e95dc5079e43731167f87c6e888d696", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into subscription-auth", "committedDate": "2020-05-22T14:16:17Z", "type": "commit"}, {"oid": "070813ac44780bd8a745e602dc646842535c8f8a", "url": "https://github.com/aws-amplify/amplify-android/commit/070813ac44780bd8a745e602dc646842535c8f8a", "message": "Apply PR suggestions", "committedDate": "2020-05-22T14:26:30Z", "type": "commit"}, {"oid": "35c8dfd739acccb917962962cdc5bd5f518fe459", "url": "https://github.com/aws-amplify/amplify-android/commit/35c8dfd739acccb917962962cdc5bd5f518fe459", "message": "Add integration tests", "committedDate": "2020-05-22T15:59:16Z", "type": "commit"}, {"oid": "cc0459977928e4bc907abd3c1ea62df466104e58", "url": "https://github.com/aws-amplify/amplify-android/commit/cc0459977928e4bc907abd3c1ea62df466104e58", "message": "Integrate Amplify Auth", "committedDate": "2020-05-22T18:14:52Z", "type": "commit"}]}