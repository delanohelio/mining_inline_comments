{"pr_number": 1052, "pr_title": "add support for the Apache Dubbo", "pr_createdAt": "2020-02-26T02:00:18Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1052", "timeline": [{"oid": "7f4b9de91c08ef28125aaace7e4b4544ba8e08b4", "url": "https://github.com/elastic/apm-agent-java/commit/7f4b9de91c08ef28125aaace7e4b4544ba8e08b4", "message": "add dubbo plugin", "committedDate": "2020-03-05T08:41:28Z", "type": "commit"}, {"oid": "a43558fc72d9f6bc6a213785064f13a8d7721be8", "url": "https://github.com/elastic/apm-agent-java/commit/a43558fc72d9f6bc6a213785064f13a8d7721be8", "message": "add dubbo plugin(configuration and version merge)", "committedDate": "2020-03-05T08:57:02Z", "type": "commit"}, {"oid": "a43558fc72d9f6bc6a213785064f13a8d7721be8", "url": "https://github.com/elastic/apm-agent-java/commit/a43558fc72d9f6bc6a213785064f13a8d7721be8", "message": "add dubbo plugin(configuration and version merge)", "committedDate": "2020-03-05T08:57:02Z", "type": "forcePushed"}, {"oid": "f8a7a4a3f7f3d42696919112fec7ead91f893024", "url": "https://github.com/elastic/apm-agent-java/commit/f8a7a4a3f7f3d42696919112fec7ead91f893024", "message": "use HelperClassManager to solve the ClassNotFoundException", "committedDate": "2020-03-07T03:58:23Z", "type": "commit"}, {"oid": "74f80d8151b3a4550e592ec14f20d00c898a5ad5", "url": "https://github.com/elastic/apm-agent-java/commit/74f80d8151b3a4550e592ec14f20d00c898a5ad5", "message": "deal with dubbo exception, for example timeout", "committedDate": "2020-03-09T03:29:52Z", "type": "commit"}, {"oid": "758eb4ff88105b4e15d6e79c9a90d0610895abaf", "url": "https://github.com/elastic/apm-agent-java/commit/758eb4ff88105b4e15d6e79c9a90d0610895abaf", "message": "ignore span end while not in a trace transaction", "committedDate": "2020-03-09T04:04:41Z", "type": "commit"}, {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384", "url": "https://github.com/elastic/apm-agent-java/commit/a5a384a1459c137d9da4b2ac0e1acddae450e384", "message": "using transaction with scope to solve the concurrency problem", "committedDate": "2020-03-12T11:39:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NjkyMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391576920", "bodyText": "It's fine if the protocol doesn't support multiple headers. The agent will only write a single value per header but supports reading multiple values if the protocol supports it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String headerValueStr = doGetHeader(headerName, invocation);\n          \n          \n            \n                    if (headerValueStr == null) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    String[] headerValues = headerValueStr.split(SEPARATOR);\n          \n          \n            \n                    for (String headerValue : headerValues) {\n          \n          \n            \n                        consumer.accept(headerValue, state);\n          \n          \n            \n                    }\n          \n          \n            \n                    consumer.accept(invocation.getAttachment(headerName), state);", "author": "felixbarny", "createdAt": "2020-03-12T12:08:40Z", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import org.apache.dubbo.rpc.Invocation;\n+\n+import javax.annotation.Nullable;\n+\n+public class ApacheDubboAttachmentHelperImpl implements ApacheDubboAttachmentHelper {\n+\n+    private static final String SEPARATOR = \",\";\n+\n+    void doSetHeader(String headerName, String headerValue, Invocation invocation) {\n+        invocation.setAttachment(headerName, headerValue);\n+    }\n+\n+    String doGetHeader(String headerName, Invocation invocation) {\n+        return invocation.getAttachment(headerName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getFirstHeader(String headerName, Invocation invocation) {\n+        return doGetHeader(headerName, invocation);\n+    }\n+\n+    @Override\n+    public <S> void forEach(String headerName, Invocation invocation, S state, HeaderConsumer<String, S> consumer) {\n+        String headerValueStr = doGetHeader(headerName, invocation);\n+        if (headerValueStr == null) {\n+            return;\n+        }\n+        String[] headerValues = headerValueStr.split(SEPARATOR);\n+        for (String headerValue : headerValues) {\n+            consumer.accept(headerValue, state);\n+        }", "originalCommit": "a5a384a1459c137d9da4b2ac0e1acddae450e384", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYwNzQ3OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391607478", "bodyText": "it doesn't support multiple headers, just simple KV pair.", "author": "CoderLan0668", "createdAt": "2020-03-12T13:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NjkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MTcwOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391741709", "bodyText": "And that's fine. There's no need to emulate multi-valued headers via string concatenation.", "author": "felixbarny", "createdAt": "2020-03-12T16:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NjkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "9a5b8b03d76576368d4cab903d3eac4b1fff6667", "chunk": "diff --git a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java\nindex 02df0d73b..9f7afdf74 100644\n--- a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java\n+++ b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java\n\n@@ -11,9 +11,9 @@\n  * the Apache License, Version 2.0 (the \"License\"); you may\n  * not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NzM1Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391577356", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String oldHeader = getFirstHeader(headerName, invocation);\n          \n          \n            \n                    String newHeader = headerValue;\n          \n          \n            \n                    if (oldHeader != null) {\n          \n          \n            \n                        newHeader = oldHeader + SEPARATOR + headerValue;\n          \n          \n            \n                    }\n          \n          \n            \n                    doSetHeader(headerName, newHeader, invocation);\n          \n          \n            \n                    invocation.setAttachment(headerName, headerValue)", "author": "felixbarny", "createdAt": "2020-03-12T12:09:34Z", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import org.apache.dubbo.rpc.Invocation;\n+\n+import javax.annotation.Nullable;\n+\n+public class ApacheDubboAttachmentHelperImpl implements ApacheDubboAttachmentHelper {\n+\n+    private static final String SEPARATOR = \",\";\n+\n+    void doSetHeader(String headerName, String headerValue, Invocation invocation) {\n+        invocation.setAttachment(headerName, headerValue);\n+    }\n+\n+    String doGetHeader(String headerName, Invocation invocation) {\n+        return invocation.getAttachment(headerName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getFirstHeader(String headerName, Invocation invocation) {\n+        return doGetHeader(headerName, invocation);\n+    }\n+\n+    @Override\n+    public <S> void forEach(String headerName, Invocation invocation, S state, HeaderConsumer<String, S> consumer) {\n+        String headerValueStr = doGetHeader(headerName, invocation);\n+        if (headerValueStr == null) {\n+            return;\n+        }\n+        String[] headerValues = headerValueStr.split(SEPARATOR);\n+        for (String headerValue : headerValues) {\n+            consumer.accept(headerValue, state);\n+        }\n+    }\n+\n+    @Override\n+    public void setHeader(String headerName, String headerValue, Invocation invocation) {\n+        String oldHeader = getFirstHeader(headerName, invocation);\n+        String newHeader = headerValue;\n+        if (oldHeader != null) {\n+            newHeader = oldHeader + SEPARATOR + headerValue;\n+        }\n+        doSetHeader(headerName, newHeader, invocation);", "originalCommit": "a5a384a1459c137d9da4b2ac0e1acddae450e384", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a5b8b03d76576368d4cab903d3eac4b1fff6667", "chunk": "diff --git a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java\nindex 02df0d73b..9f7afdf74 100644\n--- a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java\n+++ b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java\n\n@@ -11,9 +11,9 @@\n  * the Apache License, Version 2.0 (the \"License\"); you may\n  * not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NzkwOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391577908", "bodyText": "Rather than allocating an object, just pass all the information as method parameters to the helper", "author": "felixbarny", "createdAt": "2020-03-12T12:10:47Z", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheDubboFilterAdvice.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.advice;\n+\n+import co.elastic.apm.agent.bci.HelperClassManager;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.dubbo.helper.ApacheDubboAttachmentHelper;\n+import co.elastic.apm.agent.dubbo.helper.DubboApiInfo;\n+import co.elastic.apm.agent.dubbo.helper.DubboTraceHelper;\n+import co.elastic.apm.agent.dubbo.helper.IgnoreExceptionHelper;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Scope;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.Result;\n+import org.apache.dubbo.rpc.RpcContext;\n+\n+@VisibleForAdvice\n+public class ApacheDubboFilterAdvice {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    @VisibleForAdvice\n+    public static HelperClassManager<ApacheDubboAttachmentHelper> helperClassManager;\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        ApacheDubboFilterAdvice.tracer = tracer;\n+        DubboTraceHelper.init(tracer);\n+        IgnoreExceptionHelper.init(tracer);\n+        helperClassManager = HelperClassManager.ForAnyClassLoader.of(tracer,\n+            \"co.elastic.apm.agent.dubbo.helper.ApacheDubboAttachmentHelperImpl\");\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnterFilterInvoke(@Advice.Argument(1) Invocation invocation,\n+                                           @Advice.Local(\"span\") Span span,\n+                                           @Advice.Local(\"apiClazz\") Class<?> apiClazz,\n+                                           @Advice.Local(\"transaction\") Transaction transaction,\n+                                           @Advice.Local(\"scope\") Scope scope) {\n+        RpcContext context = RpcContext.getContext();\n+        String version = context.getUrl().getParameter(\"version\");\n+        Invoker<?> invoker = invocation.getInvoker();\n+        apiClazz = invoker.getInterface();\n+        DubboApiInfo dubboApiInfo = new DubboApiInfo(\n+            apiClazz, invocation.getMethodName(),\n+            invocation.getParameterTypes(), version);", "originalCommit": "a5a384a1459c137d9da4b2ac0e1acddae450e384", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYwNzkzOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391607939", "bodyText": "good for performance, ok", "author": "CoderLan0668", "createdAt": "2020-03-12T13:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NzkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "cbc6aa79b49f6d9583ebca0a826ab64cb77c09af", "chunk": "diff --git a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheDubboFilterAdvice.java b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheMonitorFilterAdvice.java\nsimilarity index 98%\nrename from apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheDubboFilterAdvice.java\nrename to apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheMonitorFilterAdvice.java\nindex 8f55ccd43..5480f51d6 100644\n--- a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheDubboFilterAdvice.java\n+++ b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheMonitorFilterAdvice.java\n\n@@ -41,7 +41,7 @@ import org.apache.dubbo.rpc.Result;\n import org.apache.dubbo.rpc.RpcContext;\n \n @VisibleForAdvice\n-public class ApacheDubboFilterAdvice {\n+public class ApacheMonitorFilterAdvice {\n \n     @VisibleForAdvice\n     public static ElasticApmTracer tracer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MTQ0MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391581440", "bodyText": "This allocates lots of objects on each invocation. In order to reduce allocations, could we go for a more simple span name to make it completely allocation free like this:\nspan.appendToName(apiInfo.getApiClass().getName())\n    .appendToName(\"#\")\n    .appendToName(apiInfo.getMethodName());", "author": "felixbarny", "createdAt": "2020-03-12T12:18:06Z", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {", "originalCommit": "a5a384a1459c137d9da4b2ac0e1acddae450e384", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYwODQxNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391608414", "bodyText": "ok i will reduce the allocations", "author": "CoderLan0668", "createdAt": "2020-03-12T13:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MTQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "cbc6aa79b49f6d9583ebca0a826ab64cb77c09af", "chunk": "diff --git a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\nindex fade9ede1..e3f9a5a9d 100644\n--- a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\n+++ b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\n\n@@ -43,11 +43,11 @@ public class DubboTraceHelper {\n     @VisibleForAdvice\n     public static ElasticApmTracer tracer;\n \n-    private static String EXTERNAL_TYPE = \"external\";\n+    private static final String EXTERNAL_TYPE = \"external\";\n \n-    private static String DUBBO_SUBTYPE = \"dubbo\";\n+    private static final String DUBBO_SUBTYPE = \"dubbo\";\n \n-    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+    public static final String SPAN_KEY = \"span\";\n \n     public static void init(ElasticApmTracer tracer) {\n         DubboTraceHelper.tracer = tracer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391582361", "bodyText": "Could you explain what this exactly does? I fear that this is going to have too much runtime overhead.", "author": "felixbarny", "createdAt": "2020-03-12T12:19:51Z", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {", "originalCommit": "a5a384a1459c137d9da4b2ac0e1acddae450e384", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYxNTYzNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391615634", "bodyText": "the best pratice by dubbo, we will throw some exception that we expected, we call it as the business exception, so we don't want to let these  exceptions to be shown as error in kibana.\none way is ignoring these exception by setting the CoreConfigurations, but it's inconvenient to settings the configuration for each application\uff0c because each application has their own business exceptions, so i decide to handle it dynamically.\nfor performance, one exception class will only be judged whether it's business exception once, and the agent will cache the result.", "author": "CoderLan0668", "createdAt": "2020-03-12T13:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxNTE5Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r392915193", "bodyText": "You are already trying to capture business exceptions with custom attributes. I would still just capture a business exception just like a regular one. Then you can both see business exceptions and actual errors in the UI.\nCould you make an example of when you would throw a business exception? Would one example be someone trying to order an item when there's no stock for that item? Like NoToiletPaperException?\nI would argue that it's still interesting to monitor how many of these exceptions are thrown over time.", "author": "felixbarny", "createdAt": "2020-03-16T10:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczOTQ4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r394739481", "bodyText": "ok, You are right.", "author": "CoderLan0668", "createdAt": "2020-03-19T01:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MjM4Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r401592386", "bodyText": "Are you planning to remove the biz exception concept?", "author": "felixbarny", "createdAt": "2020-04-01T12:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbc6aa79b49f6d9583ebca0a826ab64cb77c09af", "chunk": "diff --git a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\nindex fade9ede1..e3f9a5a9d 100644\n--- a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\n+++ b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\n\n@@ -43,11 +43,11 @@ public class DubboTraceHelper {\n     @VisibleForAdvice\n     public static ElasticApmTracer tracer;\n \n-    private static String EXTERNAL_TYPE = \"external\";\n+    private static final String EXTERNAL_TYPE = \"external\";\n \n-    private static String DUBBO_SUBTYPE = \"dubbo\";\n+    private static final String DUBBO_SUBTYPE = \"dubbo\";\n \n-    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+    public static final String SPAN_KEY = \"span\";\n \n     public static void init(ElasticApmTracer tracer) {\n         DubboTraceHelper.tracer = tracer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4Mjk4Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391582982", "bodyText": "Would transaction.captureEception(t); work?", "author": "felixbarny", "createdAt": "2020-03-12T12:21:02Z", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());", "originalCommit": "a5a384a1459c137d9da4b2ac0e1acddae450e384", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyOTc3OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391629779", "bodyText": "some business exceptions are not expected to be capture as an exception, in these case,  i want to capture their as a result, and store it in custom context", "author": "CoderLan0668", "createdAt": "2020-03-12T13:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4Mjk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cbc6aa79b49f6d9583ebca0a826ab64cb77c09af", "chunk": "diff --git a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\nindex fade9ede1..e3f9a5a9d 100644\n--- a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\n+++ b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\n\n@@ -43,11 +43,11 @@ public class DubboTraceHelper {\n     @VisibleForAdvice\n     public static ElasticApmTracer tracer;\n \n-    private static String EXTERNAL_TYPE = \"external\";\n+    private static final String EXTERNAL_TYPE = \"external\";\n \n-    private static String DUBBO_SUBTYPE = \"dubbo\";\n+    private static final String DUBBO_SUBTYPE = \"dubbo\";\n \n-    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+    public static final String SPAN_KEY = \"span\";\n \n     public static void init(ElasticApmTracer tracer) {\n         DubboTraceHelper.tracer = tracer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391583374", "bodyText": "Custom context is reserved for user-defined properties. Core agent plugins should not use them.", "author": "felixbarny", "createdAt": "2020-03-12T12:21:44Z", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());\n+        } else {\n+            transaction.addCustomContext(\"return\", returnValue.toString());", "originalCommit": "a5a384a1459c137d9da4b2ac0e1acddae450e384", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzMTE4Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391631182", "bodyText": "sometimes i want to capture the arguments and return object, including exception thrown, and show them in kibana, where should i store them in?", "author": "CoderLan0668", "createdAt": "2020-03-12T13:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NzA4OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r408867088", "bodyText": "Would it be possible to register an interceptor that is custom to your application that adds the custom context?", "author": "felixbarny", "createdAt": "2020-04-15T14:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5Mzk4NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r422893985", "bodyText": "Like capture_body for http request, it is quite common to capture something for dubbo request\uff0cfor example, the params, the data was return or the exception thrown.\nThe difference is the dubbo agent store these data into the custom context.\nIs it proper to store these data into SpanContext or TransactionContext, like http?", "author": "CoderLan0668", "createdAt": "2020-05-11T09:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwMTY1Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r422901652", "bodyText": "There's currently no proper field for that. I agree that could be useful to store parameters and return values but it's not Dubbo specific. I also applies to gRPC, for example.\nSo I suggest leaving this out in this PR and open a follow-up discussion in https://github.com/elastic/apm instead, according to the guidelines in https://github.com/elastic/apm/blob/master/docs/agents/new-fields.md. This makes sure we align across agents and that the proposal is not Dubbo or Java specific.\n\nor the exception thrown.\n\nWe capture the transaction via transaction.captureException now, right?", "author": "felixbarny", "createdAt": "2020-05-11T09:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyMjA0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r423422042", "bodyText": "ok\uff0c i will remove it out of this PR", "author": "CoderLan0668", "createdAt": "2020-05-12T02:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyNTU2Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r424225562", "bodyText": "It has been removed now.", "author": "CoderLan0668", "createdAt": "2020-05-13T07:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "cbc6aa79b49f6d9583ebca0a826ab64cb77c09af", "chunk": "diff --git a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\nindex fade9ede1..e3f9a5a9d 100644\n--- a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\n+++ b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\n\n@@ -43,11 +43,11 @@ public class DubboTraceHelper {\n     @VisibleForAdvice\n     public static ElasticApmTracer tracer;\n \n-    private static String EXTERNAL_TYPE = \"external\";\n+    private static final String EXTERNAL_TYPE = \"external\";\n \n-    private static String DUBBO_SUBTYPE = \"dubbo\";\n+    private static final String DUBBO_SUBTYPE = \"dubbo\";\n \n-    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+    public static final String SPAN_KEY = \"span\";\n \n     public static void init(ElasticApmTracer tracer) {\n         DubboTraceHelper.tracer = tracer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4Mzg0MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391583840", "bodyText": "can this class extend AbstractInstrumentationTest?", "author": "felixbarny", "createdAt": "2020-03-12T12:22:48Z", "path": "apm-agent-plugins/apm-dubbo-plugin/src/test/java/co/elastic/apm/agent/dubbo/AbstractDubboInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.dubbo.api.DubboTestApi;\n+import co.elastic.apm.agent.dubbo.api.exception.BizException;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.context.TransactionContext;\n+import co.elastic.apm.agent.impl.error.ErrorCapture;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public abstract class AbstractDubboInstrumentationTest {", "originalCommit": "a5a384a1459c137d9da4b2ac0e1acddae450e384", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26af1e7b89d2fb4fb8f73a78f5d5c3988bb97d6d", "chunk": "diff --git a/apm-agent-plugins/apm-dubbo-plugin/src/test/java/co/elastic/apm/agent/dubbo/AbstractDubboInstrumentationTest.java b/apm-agent-plugins/apm-dubbo-plugin/src/test/java/co/elastic/apm/agent/dubbo/AbstractDubboInstrumentationTest.java\nindex 943324e50..fcfbfb807 100644\n--- a/apm-agent-plugins/apm-dubbo-plugin/src/test/java/co/elastic/apm/agent/dubbo/AbstractDubboInstrumentationTest.java\n+++ b/apm-agent-plugins/apm-dubbo-plugin/src/test/java/co/elastic/apm/agent/dubbo/AbstractDubboInstrumentationTest.java\n\n@@ -24,20 +24,15 @@\n  */\n package co.elastic.apm.agent.dubbo;\n \n-import co.elastic.apm.agent.MockReporter;\n-import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n import co.elastic.apm.agent.configuration.CoreConfiguration;\n-import co.elastic.apm.agent.configuration.SpyConfiguration;\n import co.elastic.apm.agent.dubbo.api.DubboTestApi;\n import co.elastic.apm.agent.dubbo.api.exception.BizException;\n-import co.elastic.apm.agent.impl.ElasticApmTracer;\n-import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n import co.elastic.apm.agent.impl.context.Destination;\n import co.elastic.apm.agent.impl.context.TransactionContext;\n import co.elastic.apm.agent.impl.error.ErrorCapture;\n import co.elastic.apm.agent.impl.transaction.Span;\n import co.elastic.apm.agent.impl.transaction.Transaction;\n-import net.bytebuddy.agent.ByteBuddyAgent;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n"}}, {"oid": "26af1e7b89d2fb4fb8f73a78f5d5c3988bb97d6d", "url": "https://github.com/elastic/apm-agent-java/commit/26af1e7b89d2fb4fb8f73a78f5d5c3988bb97d6d", "message": "modify AbstractDubboInstrumentationTest to extends AbstractInstrumentationTest, reuse some test initial codes", "committedDate": "2020-03-20T03:50:21Z", "type": "commit"}, {"oid": "cbc6aa79b49f6d9583ebca0a826ab64cb77c09af", "url": "https://github.com/elastic/apm-agent-java/commit/cbc6aa79b49f6d9583ebca0a826ab64cb77c09af", "message": "add support for alibaba async consumer", "committedDate": "2020-03-28T04:40:12Z", "type": "commit"}, {"oid": "5e4d2d129676b1f16d5fbc6fe81da714c9fd2845", "url": "https://github.com/elastic/apm-agent-java/commit/5e4d2d129676b1f16d5fbc6fe81da714c9fd2845", "message": "add support for apache dubbo async", "committedDate": "2020-04-01T01:22:14Z", "type": "commit"}, {"oid": "9a5b8b03d76576368d4cab903d3eac4b1fff6667", "url": "https://github.com/elastic/apm-agent-java/commit/9a5b8b03d76576368d4cab903d3eac4b1fff6667", "message": "don't support multi-valued headers via string concatenation.", "committedDate": "2020-04-01T02:52:31Z", "type": "commit"}, {"oid": "d1c0a459abead7eb32c6242a3ed675cf6dcba4c5", "url": "https://github.com/elastic/apm-agent-java/commit/d1c0a459abead7eb32c6242a3ed675cf6dcba4c5", "message": "reduce object allocation for performance", "committedDate": "2020-04-01T03:35:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MTMzMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r401591331", "bodyText": "Can we make the name just \"${simpleClassName}#${methodName}\".\nThis would make it more consistent how we name transactions for other technologies like Spring MVC and JAS-RS", "author": "felixbarny", "createdAt": "2020-04-01T12:53:53Z", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static final String EXTERNAL_TYPE = \"external\";\n+\n+    private static final String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String SPAN_KEY = \"span\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(Class<?> apiClass, String methodName, Class<?>[] paramClasses,\n+                                          String version, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE);\n+        fillName(span, apiClass, methodName, paramClasses, version);\n+\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    private static void fillName(AbstractSpan<?> span, Class<?> apiClass, String methodName,\n+                                 Class<?>[] paramClasses, String version) {\n+        span.appendToName(apiClass.getName())", "originalCommit": "d1c0a459abead7eb32c6242a3ed675cf6dcba4c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MjEzNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r401592134", "bodyText": "Use java.lang.StringBuilder#append(java.lang.CharSequence, int, int) instead of Class#getSimpleClassName for that.", "author": "felixbarny", "createdAt": "2020-04-01T12:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MTMzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMzUxNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r404513516", "bodyText": "what about \"${simpleClassName}#${methodName}(${parameters})\", because ${parameters} is a unique part of dubbo API", "author": "CoderLan0668", "createdAt": "2020-04-07T03:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MTMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "197dc2a923e8659c1b76612deee28b7c353441df", "chunk": "diff --git a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\nindex 68221a384..8a0387049 100644\n--- a/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\n+++ b/apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java\n\n@@ -34,9 +34,6 @@ import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n import co.elastic.apm.agent.impl.transaction.Transaction;\n \n import java.net.InetSocketAddress;\n-import java.net.URL;\n-import java.security.CodeSource;\n-import java.security.ProtectionDomain;\n \n @VisibleForAdvice\n public class DubboTraceHelper {\n"}}, {"oid": "197dc2a923e8659c1b76612deee28b7c353441df", "url": "https://github.com/elastic/apm-agent-java/commit/197dc2a923e8659c1b76612deee28b7c353441df", "message": "capture all exception thrown by dubbo invoke", "committedDate": "2020-04-03T04:07:50Z", "type": "commit"}, {"oid": "57a6adb4e258c8ea7fb28e3c2f6879a69acf2509", "url": "https://github.com/elastic/apm-agent-java/commit/57a6adb4e258c8ea7fb28e3c2f6879a69acf2509", "message": "skip animal.sniffer because dubbo plugin needs java 8 api.", "committedDate": "2020-04-03T06:33:04Z", "type": "commit"}, {"oid": "cb09c787d9091629597ce6b2d396220c80a2335e", "url": "https://github.com/elastic/apm-agent-java/commit/cb09c787d9091629597ce6b2d396220c80a2335e", "message": "reduce apache dubbo version to 2.7.3 which is suggested to be used in production environment", "committedDate": "2020-04-06T06:31:28Z", "type": "commit"}, {"oid": "08bd8b6c2c8f17e70555abf44e376077017ab53a", "url": "https://github.com/elastic/apm-agent-java/commit/08bd8b6c2c8f17e70555abf44e376077017ab53a", "message": "fix NoClassDefFoundError, as helper class missing", "committedDate": "2020-04-07T02:49:24Z", "type": "commit"}, {"oid": "c68e079f299df65da28d993eec8d2f9c3ad1618b", "url": "https://github.com/elastic/apm-agent-java/commit/c68e079f299df65da28d993eec8d2f9c3ad1618b", "message": "change apache dubbo version describe, just 2.7.3 and upper version", "committedDate": "2020-04-07T03:13:08Z", "type": "commit"}, {"oid": "11013515bfef0df5eb788e79569dd867b6dd2c05", "url": "https://github.com/elastic/apm-agent-java/commit/11013515bfef0df5eb788e79569dd867b6dd2c05", "message": "use '#' to concat the class name and method name, as SpringMVC do", "committedDate": "2020-04-07T04:50:45Z", "type": "commit"}, {"oid": "b676435328b2c9a4ec971e91d24e7298e48aa3f9", "url": "https://github.com/elastic/apm-agent-java/commit/b676435328b2c9a4ec971e91d24e7298e48aa3f9", "message": "use '#' to concat the class name and method name, as SpringMVC do", "committedDate": "2020-04-14T01:44:46Z", "type": "commit"}, {"oid": "097737247cab07f2816bf772132d8046290540ad", "url": "https://github.com/elastic/apm-agent-java/commit/097737247cab07f2816bf772132d8046290540ad", "message": "adjust the span name as \"${simpleClassName}#${methodName}\" like others do", "committedDate": "2020-04-17T06:21:49Z", "type": "commit"}, {"oid": "716c5f49a0ec2825fc4a8e899af8e36351ccc4a1", "url": "https://github.com/elastic/apm-agent-java/commit/716c5f49a0ec2825fc4a8e899af8e36351ccc4a1", "message": "adjust the span name as \"${simpleClassName}#${methodName}\" like others do", "committedDate": "2020-04-17T06:25:34Z", "type": "commit"}, {"oid": "fe1bc60429b7bd043859e432a93e5344d56d52a3", "url": "https://github.com/elastic/apm-agent-java/commit/fe1bc60429b7bd043859e432a93e5344d56d52a3", "message": "remove: capture parameters\u3001return and exception and store into the custom context", "committedDate": "2020-05-13T07:22:22Z", "type": "commit"}, {"oid": "182b5e29b0b1badf31b6129759c00678facd17ef", "url": "https://github.com/elastic/apm-agent-java/commit/182b5e29b0b1badf31b6129759c00678facd17ef", "message": "Cleanup PR\n\n- Reduce allocations by not wrapping callbacks\n- Make plugin experimental (opt-in)\n- Add @NonnullApi package-level annotations\n- Use transaction.type=request, which is consistent with gRPC\n- Use activate() instead of activateInScope() to reduce allocations\n- Use StringBuilder.append(java.lang.CharSequence, int, int) instead of String.substring(int) to reduce allocations", "committedDate": "2020-05-15T15:45:13Z", "type": "commit"}, {"oid": "c35be2cc5017efbc77d9fab30bfd2028cd599a81", "url": "https://github.com/elastic/apm-agent-java/commit/c35be2cc5017efbc77d9fab30bfd2028cd599a81", "message": "Fix Javadoc link", "committedDate": "2020-05-16T11:29:40Z", "type": "commit"}, {"oid": "66815f6295fbf45f02b0d10f699f42fc20645309", "url": "https://github.com/elastic/apm-agent-java/commit/66815f6295fbf45f02b0d10f699f42fc20645309", "message": "Merge pull request #1 from felixbarny/dubbo\n\nCleanup PR", "committedDate": "2020-05-18T02:10:36Z", "type": "commit"}, {"oid": "e1c8d4d74c0e043d4a6fb6612dff018861049526", "url": "https://github.com/elastic/apm-agent-java/commit/e1c8d4d74c0e043d4a6fb6612dff018861049526", "message": "Merge remote-tracking branch 'origin/master' into dubbo", "committedDate": "2020-05-18T07:32:07Z", "type": "commit"}, {"oid": "00c8db2e673fe6bee0fdc0c99fafdf4f290a7b7e", "url": "https://github.com/elastic/apm-agent-java/commit/00c8db2e673fe6bee0fdc0c99fafdf4f290a7b7e", "message": "Another cleanup\n\n- Use host:port for destination.service.resource\n- Instrument both FutureFilter and MonitorFilter for alibaba dubbo\n- Map context ResponseCallback to context because RpcContext is reset already\n- Make tests more resilient by waiting for transaction", "committedDate": "2020-05-18T20:28:13Z", "type": "commit"}, {"oid": "72dfe5521a014c701bf54fcf3e462bb2a1a027c0", "url": "https://github.com/elastic/apm-agent-java/commit/72dfe5521a014c701bf54fcf3e462bb2a1a027c0", "message": "Update configuration.asciidoc\n\n- Make Apache tests more resilient\n- remove sleeps", "committedDate": "2020-05-19T06:11:29Z", "type": "commit"}, {"oid": "bdb74f68f9c8e29a3338051aff699accdbc324fc", "url": "https://github.com/elastic/apm-agent-java/commit/bdb74f68f9c8e29a3338051aff699accdbc324fc", "message": "wait for transaction in async test case", "committedDate": "2020-05-19T06:55:56Z", "type": "commit"}, {"oid": "e377d073df041d0a4c33fa1d14e1689e761f476a", "url": "https://github.com/elastic/apm-agent-java/commit/e377d073df041d0a4c33fa1d14e1689e761f476a", "message": "Merge remote-tracking branch 'origin/dubbo' into dubbo", "committedDate": "2020-05-19T06:57:44Z", "type": "commit"}, {"oid": "7c84d381ed5b9c189798f09b991b8bbb7ffdf747", "url": "https://github.com/elastic/apm-agent-java/commit/7c84d381ed5b9c189798f09b991b8bbb7ffdf747", "message": "Ensure unsupported versions are not instrumented", "committedDate": "2020-05-19T07:37:00Z", "type": "commit"}, {"oid": "5934df8b3dae2542911a58d8c6e82b00891dba96", "url": "https://github.com/elastic/apm-agent-java/commit/5934df8b3dae2542911a58d8c6e82b00891dba96", "message": "Merge remote-tracking branch 'origin/master' into dubbo", "committedDate": "2020-06-09T14:13:44Z", "type": "commit"}, {"oid": "5fb60a2e9b914792837af412caf6da7d6116edec", "url": "https://github.com/elastic/apm-agent-java/commit/5fb60a2e9b914792837af412caf6da7d6116edec", "message": "Remove legacy logging\n\nwas previously used to track classes loaded by the canLoadClass matcher.\nBut nowadays, it doesn't load classes but only attempts to load the class' resource", "committedDate": "2020-06-09T14:20:00Z", "type": "commit"}]}