{"pr_number": 1303, "pr_title": "Add micrometer support", "pr_createdAt": "2020-07-22T14:40:36Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1303", "timeline": [{"oid": "6e72cdeff97a42085f3d906112ed2f38b95a8758", "url": "https://github.com/elastic/apm-agent-java/commit/6e72cdeff97a42085f3d906112ed2f38b95a8758", "message": "Add micrometer support", "committedDate": "2020-07-22T14:34:15Z", "type": "commit"}, {"oid": "c9e4c77dd1a09f7301d7a31ba8f71a935a628ef9", "url": "https://github.com/elastic/apm-agent-java/commit/c9e4c77dd1a09f7301d7a31ba8f71a935a628ef9", "message": "Avoid reporting registires registered in compound registries", "committedDate": "2020-07-24T12:52:17Z", "type": "commit"}, {"oid": "48f702d6f2b340d1a9f8aa1bf013f117bc9626b7", "url": "https://github.com/elastic/apm-agent-java/commit/48f702d6f2b340d1a9f8aa1bf013f117bc9626b7", "message": "Merge remote-tracking branch 'origin/master' into micrometer", "committedDate": "2020-07-27T09:20:09Z", "type": "commit"}, {"oid": "81e5e5a22ddf189b8ff80af2591fa9498ace5bae", "url": "https://github.com/elastic/apm-agent-java/commit/81e5e5a22ddf189b8ff80af2591fa9498ace5bae", "message": "Add docs and logs", "committedDate": "2020-07-27T14:19:56Z", "type": "commit"}, {"oid": "c2e0d1d327b9cbd3886ef435dbe9bd48818e6ba8", "url": "https://github.com/elastic/apm-agent-java/commit/c2e0d1d327b9cbd3886ef435dbe9bd48818e6ba8", "message": "Merge remote-tracking branch 'origin/master' into micrometer", "committedDate": "2020-07-30T13:40:54Z", "type": "commit"}, {"oid": "76d5ab2cdef80b3b5d5194dc7603eb9ec94b0d15", "url": "https://github.com/elastic/apm-agent-java/commit/76d5ab2cdef80b3b5d5194dc7603eb9ec94b0d15", "message": "Deduplicate meters by Meter.Id\n\n- Ignore CompositeMeterRegistry\n- Make compatible with Micrometer 1.0", "committedDate": "2020-07-31T08:16:00Z", "type": "commit"}, {"oid": "b7c67fcdb1583c19836fdf570dd9627cf53c8a9b", "url": "https://github.com/elastic/apm-agent-java/commit/b7c67fcdb1583c19836fdf570dd9627cf53c8a9b", "message": "Use Mockito.doReturn rather than when/then", "committedDate": "2020-07-31T08:44:52Z", "type": "commit"}, {"oid": "6e2225ed4f752250409ba8b57daf00738b25c1ff", "url": "https://github.com/elastic/apm-agent-java/commit/6e2225ed4f752250409ba8b57daf00738b25c1ff", "message": "Add changelog", "committedDate": "2020-07-31T09:03:13Z", "type": "commit"}, {"oid": "2ef6eaf1efc8010fe786125afacd8fe3495cb419", "url": "https://github.com/elastic/apm-agent-java/commit/2ef6eaf1efc8010fe786125afacd8fe3495cb419", "message": "Fix usage of doReturn", "committedDate": "2020-07-31T09:13:41Z", "type": "commit"}, {"oid": "a1be2b2f3a795794f1a5dd6aa3d5f509903c86cc", "url": "https://github.com/elastic/apm-agent-java/commit/a1be2b2f3a795794f1a5dd6aa3d5f509903c86cc", "message": "Update generated docs and fix ConfigurationExporterTest", "committedDate": "2020-07-31T11:48:05Z", "type": "commit"}, {"oid": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9", "url": "https://github.com/elastic/apm-agent-java/commit/e65cdfac0d284eb67a3675f07ff7e1c26ddceff9", "message": "Attempt to fix integration test failure", "committedDate": "2020-08-05T11:20:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzMTM5Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465631393", "bodyText": "Why was it moved? So it will be invoked even when enabled == false?", "author": "eyalkoren", "createdAt": "2020-08-05T10:34:37Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -198,6 +199,7 @@ public boolean accept(File dir, String name) {\n \n     public static synchronized void initInstrumentation(final ElasticApmTracer tracer, Instrumentation instrumentation,\n                                                         Iterable<ElasticApmInstrumentation> instrumentations) {\n+        GlobalTracer.init(tracer);", "originalCommit": "a1be2b2f3a795794f1a5dd6aa3d5f509903c86cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5OTY3Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465799676", "bodyText": "This is to ensure that the global tracer is initialized before instantiating instrumentations. This allows them to call GlobalTracer.requireTracerImpl() on static field declarations. See also MicrometerInstrumentation.", "author": "felixbarny", "createdAt": "2020-08-05T15:11:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzMTM5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzODIxNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465638215", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int i = 0; i < bytes.length; i++) {\n          \n          \n            \n                        jw.writeByte(bytes[i]);\n          \n          \n            \n                    }\n          \n          \n            \n                    jw.writeAscii(bytes);", "author": "eyalkoren", "createdAt": "2020-08-05T10:48:49Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java", "diffHunk": "@@ -256,6 +256,13 @@ public JsonWriter getJsonWriter() {\n         return jw;\n     }\n \n+    @Override\n+    public void writeBytes(byte[] bytes) {\n+        for (int i = 0; i < bytes.length; i++) {\n+            jw.writeByte(bytes[i]);\n+        }", "originalCommit": "a1be2b2f3a795794f1a5dd6aa3d5f509903c86cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5OTk5Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465799996", "bodyText": "Perfect, thanks!", "author": "felixbarny", "createdAt": "2020-08-05T15:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzODIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3fdb27efa4a2cedd05dc85bc7a1632311c12a82f", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java\nindex 55abc1fff..785ee694f 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java\n\n@@ -258,9 +258,7 @@ public class DslJsonSerializer implements PayloadSerializer, MetricRegistry.Metr\n \n     @Override\n     public void writeBytes(byte[] bytes) {\n-        for (int i = 0; i < bytes.length; i++) {\n-            jw.writeByte(bytes[i]);\n-        }\n+        jw.writeAscii(bytes);\n     }\n \n     private void serializeErrors(List<ErrorCapture> errors) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNzMwMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465717301", "bodyText": "I didn't understand this comment. Isn't this called for each instance of MeterRegistry?", "author": "eyalkoren", "createdAt": "2020-08-05T13:14:47Z", "path": "apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.micrometer;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.report.Reporter;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentSet;\n+import com.dslplatform.json.DslJson;\n+import com.dslplatform.json.JsonWriter;\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+public class MicrometerMetricsReporter implements Runnable {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MicrometerMetricsReporter.class);\n+\n+    private final WeakConcurrentSet<MeterRegistry> meterRegistries = WeakMapSupplier.createSet();\n+    private final StringBuilder replaceBuilder = new StringBuilder();\n+    private final JsonWriter jsonWriter = new DslJson<>(new DslJson.Settings<>()).newWriter();\n+    private final Reporter reporter;\n+    private final ElasticApmTracer tracer;\n+    private boolean scheduledReporting = false;\n+\n+    public MicrometerMetricsReporter(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        this.reporter = tracer.getReporter();\n+    }\n+\n+    public void registerMeterRegistry(MeterRegistry meterRegistry) {\n+        if (meterRegistry instanceof CompositeMeterRegistry) {\n+            return;\n+        }\n+        boolean added = meterRegistries.add(meterRegistry);\n+        if (added) {\n+            logger.info(\"Registering Micrometer MeterRegistry: {}\", meterRegistry);\n+            scheduleReporting();\n+        }\n+    }\n+\n+    private synchronized void scheduleReporting() {\n+        if (scheduledReporting) {\n+            return;\n+        }\n+        scheduledReporting = true;\n+        long metricsIntervalMs = tracer.getConfig(ReporterConfiguration.class).getMetricsIntervalMs();\n+        if (metricsIntervalMs > 0) {\n+            // called for every class loader that loaded micrometer", "originalCommit": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwMjM2Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465802362", "bodyText": "Yes, but there will be multiple MicrometerMetricsReporters as well. One for each indy plugin class loader.", "author": "felixbarny", "createdAt": "2020-08-05T15:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNzMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9d2ba3ca8e0b4c335a22f297bb574d31fdc40657", "chunk": "diff --git a/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java b/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java\nindex f3a6fe9f1..9940a7d8d 100644\n--- a/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java\n+++ b/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java\n\n@@ -109,4 +109,8 @@ public class MicrometerMetricsReporter implements Runnable {\n             meters.put(meter.getId(), meter);\n         }\n     }\n+\n+    WeakConcurrentSet<MeterRegistry> getMeterRegistries() {\n+        return meterRegistries;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMzUwNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465723506", "bodyText": "I think the JsonWriter would fit in the serializer better", "author": "eyalkoren", "createdAt": "2020-08-05T13:24:33Z", "path": "apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.micrometer;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.report.Reporter;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentSet;\n+import com.dslplatform.json.DslJson;\n+import com.dslplatform.json.JsonWriter;\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+public class MicrometerMetricsReporter implements Runnable {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MicrometerMetricsReporter.class);\n+\n+    private final WeakConcurrentSet<MeterRegistry> meterRegistries = WeakMapSupplier.createSet();\n+    private final StringBuilder replaceBuilder = new StringBuilder();\n+    private final JsonWriter jsonWriter = new DslJson<>(new DslJson.Settings<>()).newWriter();", "originalCommit": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwMTQ3Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465801476", "bodyText": "Hm, good point. Currently, all methods are static which would need to change but that's not a bad thing.", "author": "felixbarny", "createdAt": "2020-08-05T15:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMzUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4OTE2Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466389163", "bodyText": "done", "author": "felixbarny", "createdAt": "2020-08-06T12:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMzUwNg=="}], "type": "inlineReview", "revised_code": {"commit": "9d2ba3ca8e0b4c335a22f297bb574d31fdc40657", "chunk": "diff --git a/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java b/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java\nindex f3a6fe9f1..9940a7d8d 100644\n--- a/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java\n+++ b/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java\n\n@@ -109,4 +109,8 @@ public class MicrometerMetricsReporter implements Runnable {\n             meters.put(meter.getId(), meter);\n         }\n     }\n+\n+    WeakConcurrentSet<MeterRegistry> getMeterRegistries() {\n+        return meterRegistries;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465736380", "bodyText": "If the JsonWriter is a field of the serializer, the serialize method can return the byte array.\nWhy did you decide to deviate from our usual reporting flow, where we serialize directly to the connection socket?", "author": "eyalkoren", "createdAt": "2020-08-05T13:43:48Z", "path": "apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.micrometer;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.report.Reporter;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentSet;\n+import com.dslplatform.json.DslJson;\n+import com.dslplatform.json.JsonWriter;\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+public class MicrometerMetricsReporter implements Runnable {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MicrometerMetricsReporter.class);\n+\n+    private final WeakConcurrentSet<MeterRegistry> meterRegistries = WeakMapSupplier.createSet();\n+    private final StringBuilder replaceBuilder = new StringBuilder();\n+    private final JsonWriter jsonWriter = new DslJson<>(new DslJson.Settings<>()).newWriter();\n+    private final Reporter reporter;\n+    private final ElasticApmTracer tracer;\n+    private boolean scheduledReporting = false;\n+\n+    public MicrometerMetricsReporter(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        this.reporter = tracer.getReporter();\n+    }\n+\n+    public void registerMeterRegistry(MeterRegistry meterRegistry) {\n+        if (meterRegistry instanceof CompositeMeterRegistry) {\n+            return;\n+        }\n+        boolean added = meterRegistries.add(meterRegistry);\n+        if (added) {\n+            logger.info(\"Registering Micrometer MeterRegistry: {}\", meterRegistry);\n+            scheduleReporting();\n+        }\n+    }\n+\n+    private synchronized void scheduleReporting() {\n+        if (scheduledReporting) {\n+            return;\n+        }\n+        scheduledReporting = true;\n+        long metricsIntervalMs = tracer.getConfig(ReporterConfiguration.class).getMetricsIntervalMs();\n+        if (metricsIntervalMs > 0) {\n+            // called for every class loader that loaded micrometer\n+            tracer.getSharedSingleThreadedPool().scheduleAtFixedRate(this, metricsIntervalMs, metricsIntervalMs, TimeUnit.MILLISECONDS);\n+        }\n+    }\n+\n+    // guaranteed to be invoked by a single thread\n+    @Override\n+    public void run() {\n+        if (tracer.getState() != Tracer.TracerState.RUNNING) {\n+            return;\n+        }\n+        final long timestamp = System.currentTimeMillis() * 1000;\n+        MeterMapConsumer meterConsumer = new MeterMapConsumer();\n+        for (MeterRegistry registry : meterRegistries) {\n+            registry.forEachMeter(meterConsumer);\n+        }\n+        logger.debug(\"Reporting {} meters\", meterConsumer.meters.size());\n+        MicrometerMeterRegistrySerializer.serialize(meterConsumer.meters, timestamp, replaceBuilder, jsonWriter);", "originalCommit": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNjA0Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465806047", "bodyText": "One reason is to make sure that metrics are serialized at a more consistent rate. Currently, the serialization is delayed until the event is consumed from the disruptor. That's something we have thought about doing for the our internal metrics registry as well.\nAnother reason is that I didn't want to add a micrometer specific event type for the disruptor. But we could introduce an interface that allows writing to the OutputStream.", "author": "felixbarny", "createdAt": "2020-08-05T15:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0NzgyNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466147827", "bodyText": "Yes, we discussed that and I actually think this approach is superior, it's just the inconsistency between the two registries. I would change the internal metrics to be done in this way as well (it even makes more sense there where we flip phase on the disruptor thread). With this new byte[] reporting event and API, it should be an easy change. Doesn't have to be in this PR though.", "author": "eyalkoren", "createdAt": "2020-08-06T05:03:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2MzA5Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466263093", "bodyText": "do you think we should have a way to recycle these byte arrays or, as reporting happens at a fixed rate that's not dependant on the throughput of the app, it's fine to just allocate?", "author": "felixbarny", "createdAt": "2020-08-06T09:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxMDkzNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466310934", "bodyText": "As long as it is used for metrics, meaning allocated once per second or more, garbage collection will not be an issue. Keeping such an array we always hold the biggest array that was used so far and cannot be reclaimed (and now when we use if for Micrometer I guess it may have spikes).\nHaving said that, this is what the JsonWriter is doing already, so it does seem wasteful to duplicate. So it seems whatever we decide (allocate or recycle) should be done should be done through JsonWriter objects, eventually relying on the com.dslplatform.json.JsonWriter#toStream method to write directly to the connection socket, thus avoid additional allocation. WDYT?", "author": "eyalkoren", "createdAt": "2020-08-06T10:14:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTczMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466321732", "bodyText": "I'd expect the total size of the metrics to be relatively stable. JsonWriter#toStream sounds tempting but it would imply that you can't do another report before the bytes of the previous report have been written out. This can be problematic if APM Server is down for a couple of minutes. By copying the bytes via JsonWriter#toByteArray, all the data from the period where APM Server was down will be sent when it's back up again.", "author": "felixbarny", "createdAt": "2020-08-06T10:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMzk2NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466323964", "bodyText": "What I was suggesting is to either create a new one every time (instead of byte[]) or recycle (instead of byte[])", "author": "eyalkoren", "createdAt": "2020-08-06T10:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNTkyMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466325920", "bodyText": "I'd expect the total size of the metrics to be relatively stable\n\nBased on your docs, people may use it so report some high-cardinality metric keys", "author": "eyalkoren", "createdAt": "2020-08-06T10:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4NjE4NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466386184", "bodyText": "Yup, high cardinality keys can be problematic but still, I think that the size of one report vs another one would be relatively stable.\n\nWhat I was suggesting is to either create a new one every time (instead of byte[]) or recycle (instead of byte[])\n\nI see what you're saying. One issue I see with the approach of using a new byte[] every time is that it'll have to discard lots of arrays when it resizes from the initial buffer size.", "author": "felixbarny", "createdAt": "2020-08-06T12:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxMzI0Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466413243", "bodyText": "One issue I see with the approach of using a new byte[] every time is that it'll have to discard lots of arrays when it resizes from the initial buffer size.\n\nI think the eventual allocation and copy of the entire byte array is not necessary in any case, so I suggest one of two options:\n\nAllocate a JsonWriter every time, using the size from last time (or maximum size so far) as the initial capacity\nRecycle JsonWriters\n\nWould that work?", "author": "eyalkoren", "createdAt": "2020-08-06T13:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxNTQ3Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466415473", "bodyText": "Thanks for switching the internal metrics to be the same! \u2764\ufe0f", "author": "eyalkoren", "createdAt": "2020-08-06T13:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwODYzMw==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r467808633", "bodyText": "I went with option 1. I'm using the size of the previous serialization plus a buffer of 25%. This is to avoid situations where we have to resize just because the actual size requirement is slightly higher which may be just due to the fact that on one report the gauges have more floating points (like 1.0 vs 1.00000001).", "author": "felixbarny", "createdAt": "2020-08-10T10:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwODg5NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r467808894", "bodyText": "Option 2 can be implemented later on top of option 1 if needed.", "author": "felixbarny", "createdAt": "2020-08-10T10:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA=="}], "type": "inlineReview", "revised_code": {"commit": "9d2ba3ca8e0b4c335a22f297bb574d31fdc40657", "chunk": "diff --git a/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java b/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java\nindex f3a6fe9f1..9940a7d8d 100644\n--- a/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java\n+++ b/apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java\n\n@@ -109,4 +109,8 @@ public class MicrometerMetricsReporter implements Runnable {\n             meters.put(meter.getId(), meter);\n         }\n     }\n+\n+    WeakConcurrentSet<MeterRegistry> getMeterRegistries() {\n+        return meterRegistries;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MDg3NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465750874", "bodyText": "Assert that only the non-composite was registered", "author": "eyalkoren", "createdAt": "2020-08-05T14:04:32Z", "path": "apm-agent-plugins/apm-micrometer-plugin/src/test/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporterTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.micrometer;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.DistributionSummary;\n+import io.micrometer.core.instrument.FunctionCounter;\n+import io.micrometer.core.instrument.FunctionTimer;\n+import io.micrometer.core.instrument.LongTaskTimer;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.MockClock;\n+import io.micrometer.core.instrument.Tag;\n+import io.micrometer.core.instrument.Timer;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import io.micrometer.core.instrument.simple.CountingMode;\n+import io.micrometer.core.instrument.simple.SimpleConfig;\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+\n+class MicrometerMetricsReporterTest {\n+\n+    private MeterRegistry meterRegistry;\n+    private MicrometerMetricsReporter metricsReporter;\n+    private MockReporter reporter;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+\n+    @BeforeEach\n+    void setUp() {\n+        SimpleMeterRegistry simpleMeterRegistry = new SimpleMeterRegistry();\n+        CompositeMeterRegistry nestedCompositeMeterRegistry = new CompositeMeterRegistry(Clock.SYSTEM, List.of(simpleMeterRegistry));\n+        meterRegistry = new CompositeMeterRegistry(Clock.SYSTEM, List.of(nestedCompositeMeterRegistry));\n+        reporter = new MockReporter();\n+        ElasticApmTracer tracer = MockTracer.createRealTracer(reporter);\n+        doReturn(0L).when(tracer.getConfig(ReporterConfiguration.class)).getMetricsIntervalMs();\n+        metricsReporter = new MicrometerMetricsReporter(tracer);\n+        metricsReporter.registerMeterRegistry(meterRegistry);\n+        metricsReporter.registerMeterRegistry(nestedCompositeMeterRegistry);\n+        metricsReporter.registerMeterRegistry(simpleMeterRegistry);", "originalCommit": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNzEwNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465807106", "bodyText": "The de-duplication doesn't rely on CompositeMeterRegistrys to be ignored. It's just a slight optimization. The deduplication happens by putting the metrics to a map with the Meter.Id as the key.", "author": "felixbarny", "createdAt": "2020-08-05T15:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MDg3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0ODcyNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466148725", "bodyText": "I generally like to assert on anything we have code for, just to know what we intend to happen actually happens, especially if it's real easy. Won't insist on it though \ud83d\ude42", "author": "eyalkoren", "createdAt": "2020-08-06T05:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MDg3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4OTA1NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r466389055", "bodyText": "done", "author": "felixbarny", "createdAt": "2020-08-06T12:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MDg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "9d2ba3ca8e0b4c335a22f297bb574d31fdc40657", "chunk": "diff --git a/apm-agent-plugins/apm-micrometer-plugin/src/test/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporterTest.java b/apm-agent-plugins/apm-micrometer-plugin/src/test/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporterTest.java\nindex 4788c9666..2ae66d9f6 100644\n--- a/apm-agent-plugins/apm-micrometer-plugin/src/test/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporterTest.java\n+++ b/apm-agent-plugins/apm-micrometer-plugin/src/test/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporterTest.java\n\n@@ -77,6 +77,9 @@ class MicrometerMetricsReporterTest {\n         metricsReporter.registerMeterRegistry(meterRegistry);\n         metricsReporter.registerMeterRegistry(nestedCompositeMeterRegistry);\n         metricsReporter.registerMeterRegistry(simpleMeterRegistry);\n+        assertThat(metricsReporter.getMeterRegistries()).doesNotContain(nestedCompositeMeterRegistry);\n+        assertThat(metricsReporter.getMeterRegistries()).doesNotContain(meterRegistry);\n+        assertThat(metricsReporter.getMeterRegistries()).contains(simpleMeterRegistry);\n     }\n \n     @Test\n"}}, {"oid": "3fdb27efa4a2cedd05dc85bc7a1632311c12a82f", "url": "https://github.com/elastic/apm-agent-java/commit/3fdb27efa4a2cedd05dc85bc7a1632311c12a82f", "message": "write bytes in batch\n\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>", "committedDate": "2020-08-05T15:25:13Z", "type": "commit"}, {"oid": "c09a2114379091b0482011c64c7a95d14358a299", "url": "https://github.com/elastic/apm-agent-java/commit/c09a2114379091b0482011c64c7a95d14358a299", "message": "Clarify docs", "committedDate": "2020-08-06T09:23:55Z", "type": "commit"}, {"oid": "9d2ba3ca8e0b4c335a22f297bb574d31fdc40657", "url": "https://github.com/elastic/apm-agent-java/commit/9d2ba3ca8e0b4c335a22f297bb574d31fdc40657", "message": "Check that compound registries are not registered", "committedDate": "2020-08-06T09:23:55Z", "type": "commit"}, {"oid": "37f6cd3e4cd51bbf245782f4896477d23bd0cad7", "url": "https://github.com/elastic/apm-agent-java/commit/37f6cd3e4cd51bbf245782f4896477d23bd0cad7", "message": "Move JsonWriter to MicrometerMetricsSerializer", "committedDate": "2020-08-06T09:23:55Z", "type": "commit"}, {"oid": "b36af469af0aec7956c7dc891be50fed153bd832", "url": "https://github.com/elastic/apm-agent-java/commit/b36af469af0aec7956c7dc891be50fed153bd832", "message": "Report internal MetricRegistry off the disruptor thread", "committedDate": "2020-08-06T12:51:52Z", "type": "commit"}, {"oid": "d46724ec5c83bb51a83417b5d1794b44fea62da9", "url": "https://github.com/elastic/apm-agent-java/commit/d46724ec5c83bb51a83417b5d1794b44fea62da9", "message": "Report JsonWriters", "committedDate": "2020-08-07T08:53:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2Mjk1Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r467962952", "bodyText": "Ahh, getByteBuffer is good as well \ud83d\udc4d", "author": "eyalkoren", "createdAt": "2020-08-10T14:56:28Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java", "diffHunk": "@@ -136,20 +135,8 @@ private void writeEvent(ReportingEvent event) {\n         } else if (event.getError() != null) {\n             currentlyTransmitting++;\n             payloadSerializer.serializeErrorNdJson(event.getError());\n-        } else if (event.getMetricRegistry() != null) {\n-            payloadSerializer.serializeMetrics(event.getMetricRegistry());\n-        }\n-    }\n-\n-    /**\n-     * Should be called whenever {@link IntakeV2ReportingEventHandler#writeEvent(ReportingEvent)} is not called for\n-     * an event that should normally be written.\n-     *\n-     * @param event the event to end\n-     */\n-    private void handleNonWrittenEvent(ReportingEvent event) {\n-        if (event.getMetricRegistry() != null) {\n-            event.getMetricRegistry().flipPhaseAndReport(null);\n+        } else if (event.getJsonWriter() != null) {\n+            payloadSerializer.writeBytes(event.getJsonWriter().getByteBuffer(), event.getJsonWriter().size());", "originalCommit": "d46724ec5c83bb51a83417b5d1794b44fea62da9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}