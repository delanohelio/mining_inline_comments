{"pr_number": 1230, "pr_title": "Indy plugins", "pr_createdAt": "2020-06-15T07:39:30Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1230", "timeline": [{"oid": "39e25ae328f74d74f7682dcf3c98392e24bd8aef", "url": "https://github.com/elastic/apm-agent-java/commit/39e25ae328f74d74f7682dcf3c98392e24bd8aef", "message": "Use non-inlined advices where possible", "committedDate": "2020-06-02T11:47:30Z", "type": "commit"}, {"oid": "aaf059ca7474c72bf201f39d829aa6b0b79eea31", "url": "https://github.com/elastic/apm-agent-java/commit/aaf059ca7474c72bf201f39d829aa6b0b79eea31", "message": "Isolated @AssignToArgument test", "committedDate": "2020-06-02T12:35:41Z", "type": "commit"}, {"oid": "dc2955a7c79af74154502e67594933a91c1efceb", "url": "https://github.com/elastic/apm-agent-java/commit/dc2955a7c79af74154502e67594933a91c1efceb", "message": "Fix AssignToFieldPostProcessorFactory by loading this on stack before writing to field", "committedDate": "2020-06-02T15:40:55Z", "type": "commit"}, {"oid": "ed3109fe1585455f21c2b2e3bf17154825de38b3", "url": "https://github.com/elastic/apm-agent-java/commit/ed3109fe1585455f21c2b2e3bf17154825de38b3", "message": "Add workaround for VerifyError", "committedDate": "2020-06-02T15:50:25Z", "type": "commit"}, {"oid": "24614beffc0cbd205c7213d28edc96696a56134f", "url": "https://github.com/elastic/apm-agent-java/commit/24614beffc0cbd205c7213d28edc96696a56134f", "message": "Fix compile errors and tests", "committedDate": "2020-06-02T16:41:49Z", "type": "commit"}, {"oid": "c5e92f9414a6e35acec8f22a86b5caaebf1b15ed", "url": "https://github.com/elastic/apm-agent-java/commit/c5e92f9414a6e35acec8f22a86b5caaebf1b15ed", "message": "Add ability to assign to multiple arguments, fields and return value\n\nMigrate more plugins", "committedDate": "2020-06-03T14:40:45Z", "type": "commit"}, {"oid": "543f3aedc467ab45dcdeaa223e2ff0dc40e6d2e7", "url": "https://github.com/elastic/apm-agent-java/commit/543f3aedc467ab45dcdeaa223e2ff0dc40e6d2e7", "message": "Use indy dispatcher for Servlet and JDBC plugins\n\n- Add AssignTo annotation to assign to different targets by returning an Object[]\n- Add GlobalState annotation\n- Create ThreadLocalRegistry to easily construct global thread locals\n- Patch class file version to at least 51 (Java 7) in order to be able to insert\n  invokedynamic instructions\n- Load the whole package of the Advice class from a dedicated plugin classloader\n  that's a child of the classloader of the instrumented class\n- Depend on byte-buddy-dep and manually shade asm so that we can use asm-commons", "committedDate": "2020-06-06T13:49:45Z", "type": "commit"}, {"oid": "d80e36f0489a83d0ac581177affe2125496ecbec", "url": "https://github.com/elastic/apm-agent-java/commit/d80e36f0489a83d0ac581177affe2125496ecbec", "message": "java.lang.IndyBootstrap: take this OSGi!", "committedDate": "2020-06-07T08:31:09Z", "type": "commit"}, {"oid": "3e68d7e269956ce9c3313caf4202c66ea6ee2448", "url": "https://github.com/elastic/apm-agent-java/commit/3e68d7e269956ce9c3313caf4202c66ea6ee2448", "message": "Avoid NoClassDefFoundErrors when using OSGi CLs without bootdelegation property", "committedDate": "2020-06-07T17:21:47Z", "type": "commit"}, {"oid": "75b5a29922e48221739393983d067a616301c237", "url": "https://github.com/elastic/apm-agent-java/commit/75b5a29922e48221739393983d067a616301c237", "message": "Fix IndyBootstrapDispatcher noop MethodHandle", "committedDate": "2020-06-08T06:42:20Z", "type": "commit"}, {"oid": "4b3aa01dcea64f6fade764dc588e60d9849518bb", "url": "https://github.com/elastic/apm-agent-java/commit/4b3aa01dcea64f6fade764dc588e60d9849518bb", "message": "Polish and documentation\n\n- Rename helper class loader to plugin class loader\n- Add GlobalVariables registry", "committedDate": "2020-06-12T06:57:59Z", "type": "commit"}, {"oid": "98d5fb03ae049cd3361ee45f9ed2224361187dff", "url": "https://github.com/elastic/apm-agent-java/commit/98d5fb03ae049cd3361ee45f9ed2224361187dff", "message": "Add test for updating class file version while retransforming", "committedDate": "2020-06-12T08:21:42Z", "type": "commit"}, {"oid": "019ad45964dc6c2411d22be3cc34087d9b027df4", "url": "https://github.com/elastic/apm-agent-java/commit/019ad45964dc6c2411d22be3cc34087d9b027df4", "message": "Add tests for patching class file version\n\nSome are currently failing\nsee https://github.com/raphw/byte-buddy/issues/880", "committedDate": "2020-06-14T07:54:09Z", "type": "commit"}, {"oid": "90d1320577c39b52b193106038592d413b9df569", "url": "https://github.com/elastic/apm-agent-java/commit/90d1320577c39b52b193106038592d413b9df569", "message": "Add validations for indy advices", "committedDate": "2020-06-14T13:49:00Z", "type": "commit"}, {"oid": "b1648ca1bbadf42c8f4dd4e6c028e56211356248", "url": "https://github.com/elastic/apm-agent-java/commit/b1648ca1bbadf42c8f4dd4e6c028e56211356248", "message": "Remove inline=false from non-indy advices", "committedDate": "2020-06-14T13:54:09Z", "type": "commit"}, {"oid": "f061612b9f06bbdda190d4ccf3d43bba69b11a46", "url": "https://github.com/elastic/apm-agent-java/commit/f061612b9f06bbdda190d4ccf3d43bba69b11a46", "message": "Merge remote-tracking branch 'origin/master' into indy-dispatch", "committedDate": "2020-06-14T14:02:18Z", "type": "commit"}, {"oid": "42d483914945ed6e26d0c78048ea3a78204eb906", "url": "https://github.com/elastic/apm-agent-java/commit/42d483914945ed6e26d0c78048ea3a78204eb906", "message": "Add docs, rename indyDispatch to indyPlugin", "committedDate": "2020-06-14T15:34:22Z", "type": "commit"}, {"oid": "6771a07f6c03b0ee0b39ac46908dce5d3bb15f2b", "url": "https://github.com/elastic/apm-agent-java/commit/6771a07f6c03b0ee0b39ac46908dce5d3bb15f2b", "message": "Fix tests", "committedDate": "2020-06-14T15:35:01Z", "type": "commit"}, {"oid": "87f324f995072547d6069c89e2b9ae6968cf1909", "url": "https://github.com/elastic/apm-agent-java/commit/87f324f995072547d6069c89e2b9ae6968cf1909", "message": "Update Byte Buddy", "committedDate": "2020-06-15T12:00:03Z", "type": "commit"}, {"oid": "8553bb612b6de200a8cfbeb1a0834ea630394262", "url": "https://github.com/elastic/apm-agent-java/commit/8553bb612b6de200a8cfbeb1a0834ea630394262", "message": "Use MutableInt instead of AtomicInteger for CallDepth", "committedDate": "2020-06-16T09:23:02Z", "type": "commit"}, {"oid": "cdafeaf2cd25e15ed54df4ec2891d7b7ef2d88ba", "url": "https://github.com/elastic/apm-agent-java/commit/cdafeaf2cd25e15ed54df4ec2891d7b7ef2d88ba", "message": "Merge remote-tracking branch 'origin/master' into indy-dispatch", "committedDate": "2020-06-17T15:04:20Z", "type": "commit"}, {"oid": "6abbf01aa4b5e1c68dec3679822679b6b54676c3", "url": "https://github.com/elastic/apm-agent-java/commit/6abbf01aa4b5e1c68dec3679822679b6b54676c3", "message": "Make concurrent, process, and HttpUrlConnection indy plugins\n\n- Fix matcher for ForkJoinPool\n- Add support for parallel streams\n- Simplify testing of bootstrap instrumentations\n- Remove java.* from the default exclusions\n- Disallow agent types in advice signature\n- Enable previously disabled async Dubbo tests", "committedDate": "2020-06-18T10:34:47Z", "type": "commit"}, {"oid": "8f156cfedc21c08a4c9fbeb358db71230fbc2a86", "url": "https://github.com/elastic/apm-agent-java/commit/8f156cfedc21c08a4c9fbeb358db71230fbc2a86", "message": "Make @AssignTo* annotations inner classes of @AssignTo", "committedDate": "2020-06-18T12:31:27Z", "type": "commit"}, {"oid": "d47f768532a5b38005280eca6212f70eb6f1542c", "url": "https://github.com/elastic/apm-agent-java/commit/d47f768532a5b38005280eca6212f70eb6f1542c", "message": "Update Byte Buddy to 1.10.12", "committedDate": "2020-06-18T12:46:28Z", "type": "commit"}, {"oid": "e2d1e2361cb668d34c564952609aab46d944d787", "url": "https://github.com/elastic/apm-agent-java/commit/e2d1e2361cb668d34c564952609aab46d944d787", "message": "Merge remote-tracking branch 'origin/master' into indy-dispatch", "committedDate": "2020-06-18T14:30:10Z", "type": "commit"}, {"oid": "d4d09b21d63524da8f1a32a4707b8a9b534230ce", "url": "https://github.com/elastic/apm-agent-java/commit/d4d09b21d63524da8f1a32a4707b8a9b534230ce", "message": "Fix JMS tests\n\nallow agent classes to be instrumented", "committedDate": "2020-06-19T06:55:49Z", "type": "commit"}, {"oid": "3437036aef3deae030044b00eeb5ed28f38ad067", "url": "https://github.com/elastic/apm-agent-java/commit/3437036aef3deae030044b00eeb5ed28f38ad067", "message": "Fix Kafka instrumentation", "committedDate": "2020-06-19T07:43:27Z", "type": "commit"}, {"oid": "0d10839c45e6f12c13926837c762e19c20de1ead", "url": "https://github.com/elastic/apm-agent-java/commit/0d10839c45e6f12c13926837c762e19c20de1ead", "message": "Fix ITs by lazily resolving type descriptions", "committedDate": "2020-06-19T08:58:58Z", "type": "commit"}, {"oid": "b1c69b4005a2339ca711403279a724a54429daed", "url": "https://github.com/elastic/apm-agent-java/commit/b1c69b4005a2339ca711403279a724a54429daed", "message": "Fix another test", "committedDate": "2020-06-19T09:16:16Z", "type": "commit"}, {"oid": "8c8b5f445eedc1330161d3d191048c8acda2fa18", "url": "https://github.com/elastic/apm-agent-java/commit/8c8b5f445eedc1330161d3d191048c8acda2fa18", "message": "Fix bootstrap method signature", "committedDate": "2020-06-19T13:58:13Z", "type": "commit"}, {"oid": "960146aad8bcb08e54c5ccf4163eb88420b2bdab", "url": "https://github.com/elastic/apm-agent-java/commit/960146aad8bcb08e54c5ccf4163eb88420b2bdab", "message": "Fix Payara and WebSphere tests\n\n- Don't start agent on early J9 versions that crash on indy bootstrap\n- Fix location strategy order to avoid ClassNotFoundExceptions on Payara", "committedDate": "2020-06-22T12:59:59Z", "type": "commit"}, {"oid": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "url": "https://github.com/elastic/apm-agent-java/commit/c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "message": "Fix Spring Boot tests", "committedDate": "2020-06-22T15:00:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5MDExNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445390115", "bodyText": "[minor] I guess we would always want to know, can be a Throwable.", "author": "eyalkoren", "createdAt": "2020-06-25T08:23:10Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/AgentMain.java", "diffHunk": "@@ -98,7 +100,7 @@ public synchronized static void init(String agentArguments, Instrumentation inst\n                 .getMethod(\"initialize\", String.class, Instrumentation.class, File.class, boolean.class)\n                 .invoke(null, agentArguments, instrumentation, agentJarFile, premain);\n             System.setProperty(\"ElasticApm.attached\", Boolean.TRUE.toString());\n-        } catch (Exception e) {\n+        } catch (Exception | LinkageError e) {", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYzNzgzMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445637830", "bodyText": "Not sure if swallowing an OutOfMemoryError would be a good idea", "author": "felixbarny", "createdAt": "2020-06-25T15:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5MDExNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5NTQ2MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445395460", "bodyText": "Only this version or >=?", "author": "eyalkoren", "createdAt": "2020-06-25T08:32:14Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/AgentMain.java", "diffHunk": "@@ -111,47 +113,80 @@ public synchronized static void init(String agentArguments, Instrumentation inst\n      * unknown version format, we assume it's supported, thus this method might return false positives, but never false\n      * negatives.\n      *\n-     * @param version jvm version, from {@code System.getProperty(\"java.version\")}\n-     * @param vmName  jvm name, from {@code System.getProperty(\"java.vm.name\")}\n+     * @param version   jvm version, from {@code System.getProperty(\"java.version\")}\n+     * @param vmName    jvm name, from {@code System.getProperty(\"java.vm.name\")}\n+     * @param vmVersion jvm version, from {@code System.getProperty(\"java.vm.version\")}\n      * @return true if the version is supported, false otherwise\n      */\n     // package-protected for testing\n-    static boolean isJavaVersionSupported(String version, String vmName) {\n-        boolean postJsr223 = !version.startsWith(\"1.\");\n+    static boolean isJavaVersionSupported(String version, String vmName, @Nullable String vmVersion) {\n         // new scheme introduced in java 9, thus we can use it as a shortcut\n-        if (postJsr223) {\n-            return true;\n+        int major;\n+        if (version.startsWith(\"1.\")) {\n+            major = Character.digit(version.charAt(2), 10);\n+        } else {\n+            major = Integer.parseInt(version.split(\"\\\\.\")[0]);\n         }\n \n-        char major = version.charAt(2);\n-        if (major < '7') {\n+        boolean isHotSpot = vmName.contains(\"HotSpot(TM)\") || vmName.contains(\"OpenJDK\");\n+        boolean isIbmJ9 = vmName.contains(\"IBM J9\");\n+        if (major < 7) {\n             // given code is compiled with java 7, this one is unlikely in practice\n             return false;\n-        } else if (major == '7' || major > '8') {\n-            return true;\n-        } else if (!vmName.contains(\"HotSpot(TM)\")) {\n-            // non-hotspot JVMs are not concerned (yet)\n-            return true;\n-        } else {\n-            // HotSpot 8\n-            int updateIndex = version.lastIndexOf(\"_\");\n-            if (updateIndex <= 0) {\n-                // GA release '1.8.0'\n+        }\n+        if (isHotSpot) {\n+            return isHotSpotVersionSupported(version, major);\n+        } else if (isIbmJ9) {\n+            return isIbmJ9VersionSupported(vmVersion, major);\n+        }\n+        // innocent until proven guilty\n+        return true;\n+    }\n+\n+    private static boolean isHotSpotVersionSupported(String version, int major) {\n+        switch (major) {\n+            case 7:\n+                // versions prior to that have unreliable invoke dynamic support according to https://groovy-lang.org/indy.html\n+                return isUpdateVersionAtLeast(version, 60);\n+            case 8:\n+                return isUpdateVersionAtLeast(version, 40);\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    private static boolean isIbmJ9VersionSupported(@Nullable String vmVersion, int major) {\n+        switch (major) {\n+            case 7:\n                 return false;\n+            case 8:\n+                // early versions crash during invokedynamic bootstrap\n+                // the exact version that fixes that error is currently not known\n+                // presumably, service refresh 5 (build 2.8) fixes the issue\n+                return !\"2.8\".equals(vmVersion);", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYzODA4Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445638086", "bodyText": "2.7 would be Java 7", "author": "felixbarny", "createdAt": "2020-06-25T15:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5NTQ2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyMDI2Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445420266", "bodyText": "Very useful documentation!\nIt will be extremely useful to see bytecode (or Java code or both) resulting from such an instrumentation, maybe an example Advice code with the corresponding instrumented code.\nHere without any AssignTo, but in the AssignTo annotation javadoc this as well would be great.", "author": "eyalkoren", "createdAt": "2020-06-25T09:15:03Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java", "diffHunk": "@@ -171,4 +194,58 @@ public boolean includeWhenInstrumentationIsDisabled() {\n \n     public void onTypeMatch(TypeDescription typeDescription, ClassLoader classLoader, ProtectionDomain protectionDomain, @Nullable Class<?> classBeingRedefined) {\n     }\n+\n+    /**\n+     * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n+     * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n+     * the parent.\n+     * <p>\n+     * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n+     * Upon first invocation of an instrumented method,\n+     * this will call {@link IndyBootstrap#bootstrap} to determine the target {@link java.lang.invoke.ConstantCallSite}.\n+     * </p>\n+     * <p>\n+     * Things to watch out for when using indy plugins:\n+     * </p>\n+     * <ul>\n+     *     <li>\n+     *         Set {@link Advice.OnMethodEnter#inline()} and {@link Advice.OnMethodExit#inline()} to {@code false} on all advices.\n+     *         As the {@code readOnly} flag in Byte Buddy annotations such as {@link Advice.Return#readOnly()} cannot be used with non\n+     *         {@linkplain Advice.OnMethodEnter#inline() inlined advices},\n+     *         use {@link co.elastic.apm.agent.bci.bytebuddy.postprocessor.AssignTo} and friends.\n+     *     </li>\n+     *     <li>\n+     *         Both the return type and the arguments of advice methods must no contain types from the agent.\n+     *         If you'd like to return a {@link Span} from an advice, for example, return an {@link Object} instead.\n+     *         When using an {@link net.bytebuddy.asm.Advice.Enter} argument on the\n+     *         {@linkplain net.bytebuddy.asm.Advice.OnMethodExit exit advice},\n+     *         that argument als has to be of type {@link Object} and you have to cast in within the method body.\n+     *         The reason is that the return value will become a local variable in the instrumented method.\n+     *         Due to OSGi, those methods may not have access to agent types.\n+     *         Another case is when the instrumented class is inside the bootstrap classloader.\n+     *     </li>\n+     *     <li>\n+     *         When an advice instruments classes in multiple class loaders, the plugin classes will be loaded form multiple class loaders.\n+     *         In order to still share state across those plugin class loaders, use {@link co.elastic.apm.agent.util.GlobalVariables} or {@link GlobalState}.\n+     *         That's necessary as a static variables are scoped to the class loader they are defined in.\n+     *     </li>\n+     *     <li>\n+     *         Don't use {@link ThreadLocal}s as it can lead to class loader leaks.\n+     *         Use {@link co.elastic.apm.agent.threadlocal.RemoveOnGetThreadLocal} instead.\n+     *     </li>\n+     *     <li>\n+     *         Due to the automatic plugin classloader creation that is based on package scanning,\n+     *         plugins need be in their own uniquely named package.\n+     *         As the package of the {@link #getAdviceClass()} is used as the root,\n+     *         all advices have to be at the top level of the plugin.\n+     *     </li>\n+     * </ul>\n+     *\n+     * @return whether to load the classes of this plugin in dedicated plugin class loaders (one for each unique class loader)\n+     * and dispatch to the {@linkplain #getAdviceClass() advice} via an {@code INVOKEDYNAMIC} instruction.\n+     * @see IndyBootstrap\n+     */", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MDQwMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445680402", "bodyText": "Added to IndyBootstrap#bootstrap", "author": "felixbarny", "createdAt": "2020-06-25T16:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyMDI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "076f116112fb1d97a62878c877cd9693160c199f", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\nindex e09684e82..8e53f38f4 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n\n@@ -198,7 +198,7 @@ public abstract class ElasticApmInstrumentation {\n     /**\n      * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n      * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n-     * the parent.\n+     * parents.\n      * <p>\n      * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n      * Upon first invocation of an instrumented method,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyMjk1OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445422958", "bodyText": "It will be extremely useful to see bytecode (or Java code or both) resulting from usage of these annotations.", "author": "eyalkoren", "createdAt": "2020-06-25T09:19:36Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/bytebuddy/postprocessor/AssignTo.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.bci.bytebuddy.postprocessor;\n+\n+import net.bytebuddy.dynamic.TargetType;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * A limitation of non-{@linkplain net.bytebuddy.asm.Advice.OnMethodEnter#inline() inlined advices} is that the {@code readOnly} property\n+ * of annotations that bind values to advice method parameters cannot be used.\n+ * <p>\n+ * Because we make heavy use of non-inlined advices for\n+ * {@linkplain co.elastic.apm.agent.bci.ElasticApmInstrumentation#indyPlugin() indy plugins},\n+ * this package provides alternative means to bind values:\n+ * </p>\n+ * <ul>\n+ *     <li>\n+ *         {@link co.elastic.apm.agent.bci.bytebuddy.postprocessor.AssignTo.Argument}:\n+ *         Substitute of {@link net.bytebuddy.asm.Advice.Argument#readOnly()}.\n+ *     </li>\n+ *     <li>\n+ *         {@link co.elastic.apm.agent.bci.bytebuddy.postprocessor.AssignTo.Field}:\n+ *         Substitute of {@link net.bytebuddy.asm.Advice.FieldValue#readOnly()}.\n+ *     </li>\n+ *     <li>\n+ *         {@link co.elastic.apm.agent.bci.bytebuddy.postprocessor.AssignTo.Return}:\n+ *         Substitute of {@link net.bytebuddy.asm.Advice.Return#readOnly()}.\n+ *     </li>\n+ *     <li>\n+ *         {@link co.elastic.apm.agent.bci.bytebuddy.postprocessor.AssignTo}:\n+ *         Substitute of binding multiple values in a single method.\n+ *         Works by returning an {@code Object[]} from the advice method.\n+ *     </li>\n+ * </ul>", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MDA1OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445680058", "bodyText": "Added", "author": "felixbarny", "createdAt": "2020-06-25T16:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyMjk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "a0168762b9651de70f7e66155583a5b84d611548", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/bytebuddy/postprocessor/AssignTo.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/bytebuddy/postprocessor/AssignTo.java\nindex 8fabd950c..e31b70584 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/bytebuddy/postprocessor/AssignTo.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/bytebuddy/postprocessor/AssignTo.java\n\n@@ -59,6 +59,33 @@ import java.lang.annotation.Target;\n  *         Works by returning an {@code Object[]} from the advice method.\n  *     </li>\n  * </ul>\n+ *\n+ * Taking an argument assignment as an example, the resulting code looks like this when decompiled:\n+ * <pre>\n+ *     public String assignToArgument(String arg) {\n+ *         String var10000;\n+ *         try {\n+ *             // result of inline = false\n+ *             var10000 = co.elastic.apm.agent.bci.InstrumentationTest.AssignToArgumentInstrumentation.onEnter(s);\n+ *         } catch (Throwable var3) {\n+ *             // result of suppress = Throwable.class\n+ *             var3.printStackTrace();\n+ *             var10000 = null;\n+ *         }\n+ *\n+ *         // this is the result of the @AssignTo.Argument(0) post processor\n+ *         // it's just a piece of code that's executed after the advice that has access to the return value of the advice (var10000)\n+ *         // this assignment takes care of type conversions, according to {@link Argument#typing()}\n+ *         String var2 = var10000;\n+ *         // the null check avoids that we override the argument with null in case of an suppressed exception within the advice\n+ *         if (var2 != null) {\n+ *             // the actual assignment to the argument\n+ *             arg = var2;\n+ *         }\n+ *\n+ *         return arg;\n+ *     }\n+ * </pre>\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target(ElementType.METHOD)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyMzc1NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445423754", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * the parent.\n          \n          \n            \n                 * parents.", "author": "eyalkoren", "createdAt": "2020-06-25T09:20:57Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java", "diffHunk": "@@ -171,4 +194,58 @@ public boolean includeWhenInstrumentationIsDisabled() {\n \n     public void onTypeMatch(TypeDescription typeDescription, ClassLoader classLoader, ProtectionDomain protectionDomain, @Nullable Class<?> classBeingRedefined) {\n     }\n+\n+    /**\n+     * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n+     * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n+     * the parent.", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "076f116112fb1d97a62878c877cd9693160c199f", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\nindex e09684e82..8e53f38f4 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n\n@@ -198,7 +198,7 @@ public abstract class ElasticApmInstrumentation {\n     /**\n      * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n      * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n-     * the parent.\n+     * parents.\n      * <p>\n      * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n      * Upon first invocation of an instrumented method,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyNDYyMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445424622", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *         Both the return type and the arguments of advice methods must no contain types from the agent.\n          \n          \n            \n                 *         Both the return type and the arguments of advice methods must not contain types from the agent.", "author": "eyalkoren", "createdAt": "2020-06-25T09:22:17Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java", "diffHunk": "@@ -171,4 +194,58 @@ public boolean includeWhenInstrumentationIsDisabled() {\n \n     public void onTypeMatch(TypeDescription typeDescription, ClassLoader classLoader, ProtectionDomain protectionDomain, @Nullable Class<?> classBeingRedefined) {\n     }\n+\n+    /**\n+     * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n+     * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n+     * the parent.\n+     * <p>\n+     * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n+     * Upon first invocation of an instrumented method,\n+     * this will call {@link IndyBootstrap#bootstrap} to determine the target {@link java.lang.invoke.ConstantCallSite}.\n+     * </p>\n+     * <p>\n+     * Things to watch out for when using indy plugins:\n+     * </p>\n+     * <ul>\n+     *     <li>\n+     *         Set {@link Advice.OnMethodEnter#inline()} and {@link Advice.OnMethodExit#inline()} to {@code false} on all advices.\n+     *         As the {@code readOnly} flag in Byte Buddy annotations such as {@link Advice.Return#readOnly()} cannot be used with non\n+     *         {@linkplain Advice.OnMethodEnter#inline() inlined advices},\n+     *         use {@link co.elastic.apm.agent.bci.bytebuddy.postprocessor.AssignTo} and friends.\n+     *     </li>\n+     *     <li>\n+     *         Both the return type and the arguments of advice methods must no contain types from the agent.", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "076f116112fb1d97a62878c877cd9693160c199f", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\nindex e09684e82..8e53f38f4 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n\n@@ -198,7 +198,7 @@ public abstract class ElasticApmInstrumentation {\n     /**\n      * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n      * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n-     * the parent.\n+     * parents.\n      * <p>\n      * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n      * Upon first invocation of an instrumented method,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyNTA0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445425042", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *         that argument als has to be of type {@link Object} and you have to cast in within the method body.\n          \n          \n            \n                 *         that argument also has to be of type {@link Object} and you have to cast it within the method body.", "author": "eyalkoren", "createdAt": "2020-06-25T09:23:02Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java", "diffHunk": "@@ -171,4 +194,58 @@ public boolean includeWhenInstrumentationIsDisabled() {\n \n     public void onTypeMatch(TypeDescription typeDescription, ClassLoader classLoader, ProtectionDomain protectionDomain, @Nullable Class<?> classBeingRedefined) {\n     }\n+\n+    /**\n+     * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n+     * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n+     * the parent.\n+     * <p>\n+     * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n+     * Upon first invocation of an instrumented method,\n+     * this will call {@link IndyBootstrap#bootstrap} to determine the target {@link java.lang.invoke.ConstantCallSite}.\n+     * </p>\n+     * <p>\n+     * Things to watch out for when using indy plugins:\n+     * </p>\n+     * <ul>\n+     *     <li>\n+     *         Set {@link Advice.OnMethodEnter#inline()} and {@link Advice.OnMethodExit#inline()} to {@code false} on all advices.\n+     *         As the {@code readOnly} flag in Byte Buddy annotations such as {@link Advice.Return#readOnly()} cannot be used with non\n+     *         {@linkplain Advice.OnMethodEnter#inline() inlined advices},\n+     *         use {@link co.elastic.apm.agent.bci.bytebuddy.postprocessor.AssignTo} and friends.\n+     *     </li>\n+     *     <li>\n+     *         Both the return type and the arguments of advice methods must no contain types from the agent.\n+     *         If you'd like to return a {@link Span} from an advice, for example, return an {@link Object} instead.\n+     *         When using an {@link net.bytebuddy.asm.Advice.Enter} argument on the\n+     *         {@linkplain net.bytebuddy.asm.Advice.OnMethodExit exit advice},\n+     *         that argument als has to be of type {@link Object} and you have to cast in within the method body.", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "076f116112fb1d97a62878c877cd9693160c199f", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\nindex e09684e82..8e53f38f4 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n\n@@ -198,7 +198,7 @@ public abstract class ElasticApmInstrumentation {\n     /**\n      * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n      * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n-     * the parent.\n+     * parents.\n      * <p>\n      * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n      * Upon first invocation of an instrumented method,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyODIxNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445428215", "bodyText": "Eventually, after migrating all plugins, we should enforce that through our module structure, so that plugin advice code only has dependency in the bootstrap-loaded class(es)", "author": "eyalkoren", "createdAt": "2020-06-25T09:28:24Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java", "diffHunk": "@@ -171,4 +194,58 @@ public boolean includeWhenInstrumentationIsDisabled() {\n \n     public void onTypeMatch(TypeDescription typeDescription, ClassLoader classLoader, ProtectionDomain protectionDomain, @Nullable Class<?> classBeingRedefined) {\n     }\n+\n+    /**\n+     * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n+     * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n+     * the parent.\n+     * <p>\n+     * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n+     * Upon first invocation of an instrumented method,\n+     * this will call {@link IndyBootstrap#bootstrap} to determine the target {@link java.lang.invoke.ConstantCallSite}.\n+     * </p>\n+     * <p>\n+     * Things to watch out for when using indy plugins:\n+     * </p>\n+     * <ul>\n+     *     <li>\n+     *         Set {@link Advice.OnMethodEnter#inline()} and {@link Advice.OnMethodExit#inline()} to {@code false} on all advices.\n+     *         As the {@code readOnly} flag in Byte Buddy annotations such as {@link Advice.Return#readOnly()} cannot be used with non\n+     *         {@linkplain Advice.OnMethodEnter#inline() inlined advices},\n+     *         use {@link co.elastic.apm.agent.bci.bytebuddy.postprocessor.AssignTo} and friends.\n+     *     </li>\n+     *     <li>\n+     *         Both the return type and the arguments of advice methods must no contain types from the agent.\n+     *         If you'd like to return a {@link Span} from an advice, for example, return an {@link Object} instead.\n+     *         When using an {@link net.bytebuddy.asm.Advice.Enter} argument on the\n+     *         {@linkplain net.bytebuddy.asm.Advice.OnMethodExit exit advice},\n+     *         that argument als has to be of type {@link Object} and you have to cast in within the method body.\n+     *         The reason is that the return value will become a local variable in the instrumented method.\n+     *         Due to OSGi, those methods may not have access to agent types.\n+     *         Another case is when the instrumented class is inside the bootstrap classloader.", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0MzQ1Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445643452", "bodyText": "Not sure I understand. The plugins need to have access to the agent classes. It's just the method signature that must not use those. In the future, we'll only inject java.lang.IndyBootstrapDispatcher to the bootstrap CL.", "author": "felixbarny", "createdAt": "2020-06-25T15:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyODIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODE0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446608142", "bodyText": "Of course, I had the advice classes in mind, but it's true that the advice method body is loaded as any other plugin code.\nI am trying to think of plugin contributors and how we can avoid such complicated instructions.\nIn any case, the advice verification is great and should provide great assistance.", "author": "eyalkoren", "createdAt": "2020-06-28T06:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyODIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "076f116112fb1d97a62878c877cd9693160c199f", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\nindex e09684e82..8e53f38f4 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n\n@@ -198,7 +198,7 @@ public abstract class ElasticApmInstrumentation {\n     /**\n      * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n      * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n-     * the parent.\n+     * parents.\n      * <p>\n      * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n      * Upon first invocation of an instrumented method,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyOTMwMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445429301", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *         That's necessary as a static variables are scoped to the class loader they are defined in.\n          \n          \n            \n                 *         That's necessary as static variables are scoped to the class loader they are defined in.", "author": "eyalkoren", "createdAt": "2020-06-25T09:30:16Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java", "diffHunk": "@@ -171,4 +194,58 @@ public boolean includeWhenInstrumentationIsDisabled() {\n \n     public void onTypeMatch(TypeDescription typeDescription, ClassLoader classLoader, ProtectionDomain protectionDomain, @Nullable Class<?> classBeingRedefined) {\n     }\n+\n+    /**\n+     * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n+     * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n+     * the parent.\n+     * <p>\n+     * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n+     * Upon first invocation of an instrumented method,\n+     * this will call {@link IndyBootstrap#bootstrap} to determine the target {@link java.lang.invoke.ConstantCallSite}.\n+     * </p>\n+     * <p>\n+     * Things to watch out for when using indy plugins:\n+     * </p>\n+     * <ul>\n+     *     <li>\n+     *         Set {@link Advice.OnMethodEnter#inline()} and {@link Advice.OnMethodExit#inline()} to {@code false} on all advices.\n+     *         As the {@code readOnly} flag in Byte Buddy annotations such as {@link Advice.Return#readOnly()} cannot be used with non\n+     *         {@linkplain Advice.OnMethodEnter#inline() inlined advices},\n+     *         use {@link co.elastic.apm.agent.bci.bytebuddy.postprocessor.AssignTo} and friends.\n+     *     </li>\n+     *     <li>\n+     *         Both the return type and the arguments of advice methods must no contain types from the agent.\n+     *         If you'd like to return a {@link Span} from an advice, for example, return an {@link Object} instead.\n+     *         When using an {@link net.bytebuddy.asm.Advice.Enter} argument on the\n+     *         {@linkplain net.bytebuddy.asm.Advice.OnMethodExit exit advice},\n+     *         that argument als has to be of type {@link Object} and you have to cast in within the method body.\n+     *         The reason is that the return value will become a local variable in the instrumented method.\n+     *         Due to OSGi, those methods may not have access to agent types.\n+     *         Another case is when the instrumented class is inside the bootstrap classloader.\n+     *     </li>\n+     *     <li>\n+     *         When an advice instruments classes in multiple class loaders, the plugin classes will be loaded form multiple class loaders.\n+     *         In order to still share state across those plugin class loaders, use {@link co.elastic.apm.agent.util.GlobalVariables} or {@link GlobalState}.\n+     *         That's necessary as a static variables are scoped to the class loader they are defined in.", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "076f116112fb1d97a62878c877cd9693160c199f", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\nindex e09684e82..8e53f38f4 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmInstrumentation.java\n\n@@ -198,7 +198,7 @@ public abstract class ElasticApmInstrumentation {\n     /**\n      * When this method returns {@code true} the whole package (starting at the {@linkplain #getAdviceClass() advice's} package)\n      * will be loaded from a plugin class loader that has both the agent class loader and the class loader of the class this instruments as\n-     * the parent.\n+     * parents.\n      * <p>\n      * This instructs Byte Buddy to dispatch to the advice methods via an {@code INVOKEDYNAMIC} instruction.\n      * Upon first invocation of an instrumented method,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzNDI5NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445434294", "bodyText": "Can we define TypePool resolution rules (eg a custom ClassFileLocator that reuses to locate specific files)? If so, we can make sure resolution of the advice fails if there is any dependency on anything we do not allow, like ThreadLocal.", "author": "eyalkoren", "createdAt": "2020-06-25T09:38:46Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -335,6 +346,50 @@ public boolean matches(MethodDescription target) {\n             .withExceptionHandler(PRINTING);\n     }\n \n+    /**\n+     * Validates invariants explained in {@link ElasticApmInstrumentation#indyPlugin()}\n+     *\n+     * @param adviceClassName the name of the advice class\n+     */\n+    private static void validateAdvice(String adviceClassName) {\n+        TypePool pool = new TypePool.Default.WithLazyResolution(TypePool.CacheProvider.NoOp.INSTANCE, ClassFileLocator.ForClassLoader.ofSystemLoader(), TypePool.Default.ReaderMode.FAST);", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0MTU3NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445641575", "bodyText": "Types are resolved lazily so we don't necessarily know whether a ThreadLocal is used. We could get all fields and check for known disallowed types. But the types may be uses in a helper class and not directly in the advice.", "author": "felixbarny", "createdAt": "2020-06-25T15:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzNDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwOTg5MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446609891", "bodyText": "If using ThreadLocal is a bug, we don't mind failing in runtime (meaning - when you first test your plugin), as long as we shout it out and make sure what needs to be fixed.\nSince you already developed an OSGi system (Barny Felix TM, the successor of Apache Felix), your custom class loader can disallow using it with ClassNotFoundException and a proper message \ud83e\udd2d", "author": "eyalkoren", "createdAt": "2020-06-28T06:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzNDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDMwMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446850301", "bodyText": "Brilliant idea! Done.", "author": "felixbarny", "createdAt": "2020-06-29T08:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzNDI5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzMjUwNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445532505", "bodyText": "Why load it with agent class loader? Only for the package name? Two instances of the same class in a single class loading hierarchy sounds fishy, although I can't exactly put the finger on how this is different from only having it twice in the classpath without loading (even if we use child-first delegation with our custom CL)...\nIdeally, once we migrate everything and feel it's mature enough, we may be able to have multiple packages for our classes, based on the designated target CL (one per class), for example - bootstrap classes, core agent, plugins.", "author": "eyalkoren", "createdAt": "2020-06-25T12:51:09Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/IndyBootstrap.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.bci;\n+\n+import co.elastic.apm.agent.util.PackageScanner;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.dynamic.loading.ClassInjector;\n+import org.slf4j.LoggerFactory;\n+import org.stagemonitor.util.IOUtils;\n+\n+import javax.annotation.Nullable;\n+import java.lang.invoke.CallSite;\n+import java.lang.invoke.ConstantCallSite;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isAnnotatedWith;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+/**\n+ * When {@link ElasticApmInstrumentation#indyPlugin()} returns {@code true},\n+ * we instruct Byte Buddy (via {@link Advice.WithCustomMapping#bootstrap(java.lang.reflect.Method)})\n+ * to dispatch {@linkplain Advice.OnMethodEnter#inline() non-inlined advices} via an invokedynamic (indy) instruction.\n+ * The target method is linked to a dynamically created plugin class loader that is specific to an instrumentation plugin\n+ * and the class loader of the instrumented method.\n+ * <p>\n+ * The first invocation of an {@code INVOKEDYNAMIC} causes the JVM to dynamically link a {@link CallSite}.\n+ * In this case, it will use the {@link #bootstrap} method to do that.\n+ * This will also create the plugin class loader.\n+ * </p>\n+ * <pre>\n+ *   Bootstrap CL \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Agent CL\n+ *       \u2191 \u2514java.lang.IndyBootstrapDispatcher \u2500 \u2191 \u2500\u2192 \u2514 {@link IndyBootstrap#bootstrap}\n+ *     Ext/Platform CL               \u2191          \u2502       \u2577\n+ *       \u2191                           \u2577          \u2502       \u2193\n+ *     System CL                     \u2577          \u2502 {@link HelperClassManager.ForIndyPlugin#getOrCreatePluginClassLoader}\n+ *       \u2191                           \u2577          \u2502       \u2577\n+ *     Common               linking of CallSite \u2502       \u2577\n+ *     \u2191    \u2191             (on first invocation) \u2502    creates\n+ * WebApp1  WebApp2                  \u2577          \u2502       \u2577\n+ *          \u2191 - InstrumentedClass    \u2577          \u2502       \u2577\n+ *          \u2502                \u2577       \u2577          \u2502       \u2577\n+ *          \u2502                INVOKEDYNAMIC      \u2502       \u2193\n+ *          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500Plugin CL\n+ *                           \u2514\u2576\u2576\u2576\u2576\u2576\u2576\u2576\u2576\u2576\u2576\u2576\u2576\u2576\u2576\u2576\u2576\u2192 \u251c AdviceClass\n+ *                                              \u2514 AdviceHelper\n+ * Legend:\n+ *  \u2576\u2576\u2192 method calls\n+ *  \u2500\u2500\u2192 class loader parent/child relationships\n+ * </pre>\n+ * <p>\n+ * Advantages:\n+ * </p>\n+ * <ul>\n+ *     <li>\n+ *         <b>OSGi class loaders</b>\n+ *         can't interfere with class loading.\n+ *         Instrumented classes only need to see java.lang.IndyBootstrapDispatcher.\n+ *         The actual advice class is invoked via {@code INVOKEDYNAMIC} instruction,\n+ *         basically a dynamically looked up {@link MethodHandle}.\n+ *     </li>\n+ *     <li>\n+ *         <b>Performance:</b>\n+ *         As the target {@link MethodHandle} is not changed after the initial lookup\n+ *         (we return a {@link ConstantCallSite} from {@link IndyBootstrap#bootstrap}),\n+ *         the JIT can easily inline the advice into the instrumented method.\n+ *     </li>\n+ *     <li>\n+ *         <b>Runtime attachment</b>\n+ *         This approach circumvents any OSGi issues even when attaching the agent at runtime.\n+ *         Setting the {@code org.osgi.framework.bootdelegation} property after the OSGi class loaders have already initialized has no effect.\n+ *         This is also a more holistic solution that also works for non-OSGi filtering class loaders.\n+ *     </li>\n+ *     <li>\n+ *         <b>Runtime detachment:</b>\n+ *         After un-instrumenting classes ({@link ElasticApmAgent#reset()}) and stopping all agent threads there should be no references\n+ *         to any Plugin CL or the Agent CL.\n+ *         This means the GC should be able to completely remove all loaded classes and class loaders of the agent,\n+ *         except for {@code java.lang.IndyBootstrapDispatcher}.\n+ *         This can be useful to completely remove/detach the agent at runtime or to update the agent version without restarting the application.\n+ *     </li>\n+ *     <li>\n+ *         <b>Class visibility:</b>\n+ *         The plugins can access both the specific types of the library they access and the agent classes as the Plugin CL\n+ *         has both the Agent CL and the CL of the instrumented class as its parent.\n+ *         Again, OSGi class loaders can't interfere here as both the Plugin CL and the Agent CL are under full control of the agent.\n+ *     </li>\n+ *     <li>\n+ *         <b>Debugging advices:</b>\n+ *         Advice classes can easily be debugged as they are not inlined in the instrumented methods.\n+ *     </li>\n+ *     <li>\n+ *         <b>Unit testing:</b>\n+ *         Classes loaded from the bootstrap class loader can be instrumented in unit tests.\n+ *     </li>\n+ * </ul>\n+ * <p>\n+ * Challenges:\n+ * </p>\n+ * <ul>\n+ *     <li>\n+ *         As we're working with {@code INVOKEDYNAMIC} instructions that have only been introduced in Java 7,\n+ *         we have to patch classes we instrument that are compiled with Java 6 bytecode level (50) to Java 7 bytecode level (51).\n+ *         This involves re-computing stack frames and removing JSR instructions.\n+ *         See also {@link co.elastic.apm.agent.bci.ElasticApmAgent#applyAdvice}.\n+ *         This makes instrumentation a bit slower but it seems to work reliably,\n+ *         even when re-transforming classes (important for runtime attachment).\n+ *     </li>\n+ *     <li>\n+ *         The {@code INVOKEDYNAMIC} support of early Java 7 versions is not reliable.\n+ *         That's why we disable the agent on them.\n+ *         See also {@link AgentMain#isJavaVersionSupported}\n+ *     </li>\n+ *     <li>\n+ *         There are some things to watch out for when writing plugins,\n+ *         as explained in {@link ElasticApmInstrumentation#indyPlugin()}\n+ *     </li>\n+ * </ul>\n+ * @see ElasticApmInstrumentation#indyPlugin()\n+ */\n+public class IndyBootstrap {\n+\n+    /**\n+     * Starts with {@code java.lang} so that OSGi class loaders don't restrict access to it\n+     */\n+    private static final String INDY_BOOTSTRAP_CLASS_NAME = \"java.lang.IndyBootstrapDispatcher\";\n+    /**\n+     * The class file of {@code java.lang.IndyBootstrapDispatcher}.\n+     * Ends with {@code clazz} because if it ended with {@code clazz}, it would be loaded like a regular class.\n+     */\n+    private static final String INDY_BOOTSTRAP_RESOURCE = \"bootstrap/IndyBootstrapDispatcher.clazz\";\n+    /**\n+     * Caches the names of classes that are defined within a package and it's subpackages\n+     */\n+    private static final ConcurrentMap<String, List<String>> classesByPackage = new ConcurrentHashMap<>();\n+    @Nullable\n+    static Method indyBootstrapMethod;\n+\n+    public static Method getIndyBootstrapMethod() {\n+        if (indyBootstrapMethod != null) {\n+            return indyBootstrapMethod;\n+        }\n+        try {\n+            Class<?> indyBootstrapClass = initIndyBootstrap();\n+            indyBootstrapClass\n+                .getField(\"bootstrap\")\n+                .set(null, IndyBootstrap.class.getMethod(\"bootstrap\", MethodHandles.Lookup.class, String.class, MethodType.class, Object[].class));\n+            return indyBootstrapMethod = indyBootstrapClass.getMethod(\"bootstrap\", MethodHandles.Lookup.class, String.class, MethodType.class, Object[].class);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Injects the {@code java.lang.IndyBootstrapDispatcher} class into the bootstrap class loader if it wasn't already.\n+     */\n+    private static Class<?> initIndyBootstrap() throws Exception {\n+        try {\n+            return Class.forName(INDY_BOOTSTRAP_CLASS_NAME, false, null);\n+        } catch (ClassNotFoundException e) {\n+            byte[] bootstrapClass = IOUtils.readToBytes(ClassLoader.getSystemClassLoader().getResourceAsStream(INDY_BOOTSTRAP_RESOURCE));\n+            ClassInjector.UsingUnsafe.ofBootLoader().injectRaw(Collections.singletonMap(INDY_BOOTSTRAP_CLASS_NAME, bootstrapClass));\n+        }\n+        return Class.forName(INDY_BOOTSTRAP_CLASS_NAME, false, null);\n+    }\n+\n+    /**\n+     * Is called by {@code java.lang.IndyBootstrapDispatcher#bootstrap} via reflection.\n+     * <p>\n+     * This is to make it impossible for OSGi or other filtering class loaders to restrict access to classes in the bootstrap class loader.\n+     * Normally, additional classes that have been injected have to be explicitly allowed via the {@code org.osgi.framework.bootdelegation}\n+     * system property.\n+     * But because we inject our class directly in the {@code java.lang} package which has to be on the allow list of filtering class loaders\n+     * we can be sure that any other class can always call that class.\n+     * </p>\n+     * <p>\n+     * This method gets called the first time an instrumented method is called.\n+     * On instrumentation an {@code invokedynamic} instruction is inserted that delays the linking to the target method until runtime.\n+     * The linking to the target method is done in this method.\n+     * </p>\n+     * <p>\n+     * If not already created, the lookup of the target method creates a dedicated class loader for the classes in the plugin that has\n+     * instrumented the {@code instrumentedType}.\n+     * Via package scanning it finds all the classes that are in the package of the advice that was responsible for the instrumentation.\n+     * It then links to the advice loaded from the plugin class loader.\n+     * The advice can access both agent types and the types of the instrumented library.\n+     * </p>\n+     * <p>\n+     * Exceptions and {@code null} return values are handled by {@code java.lang.IndyBootstrapDispatcher#bootstrap}.\n+     * </p>\n+     */\n+    @Nullable\n+    public static ConstantCallSite bootstrap(MethodHandles.Lookup lookup,\n+                                             String adviceMethodName,\n+                                             MethodType adviceMethodType,\n+                                             Object... args) throws Exception {\n+        try {\n+            String adviceClassName = (String) args[0];\n+            int enter = (Integer) args[1];\n+            Class<?> instrumentedType = (Class<?>) args[2];\n+            String instrumentedMethodName = (String) args[3];\n+            MethodHandle instrumentedMethod = args.length >= 5 ? (MethodHandle) args[4] : null;\n+            Class<?> adviceClass = Class.forName(adviceClassName);", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3OTg1OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445679859", "bodyText": "Right, for the package name we don't need to load the class.\nNot having the plugins loaded from the agent class loader sounds appealing however, we'll always need to load the ElasticApmInstrumentation classes of the plugin. Due to the child-first plugin CLs having the classes on the class path twice shouldn't be a problem. As we have full control of that class loader, there shouldn't be any surprises.", "author": "felixbarny", "createdAt": "2020-06-25T16:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzMjUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMDA4OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446610089", "bodyText": "Yes, I thought of dealing this through project structure and modular packaging but may make things too complex", "author": "eyalkoren", "createdAt": "2020-06-28T06:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzMjUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a0168762b9651de70f7e66155583a5b84d611548", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/IndyBootstrap.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/IndyBootstrap.java\nindex 4f6ce0417..3fec20d11 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/IndyBootstrap.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/IndyBootstrap.java\n\n@@ -217,12 +217,42 @@ public class IndyBootstrap {\n      * <p>\n      * Exceptions and {@code null} return values are handled by {@code java.lang.IndyBootstrapDispatcher#bootstrap}.\n      * </p>\n+     * This is how a bootstrap method looks like in the class file:\n+     * <pre>\n+     * BootstrapMethods:\n+     *   1: #1060 REF_invokeStatic java/lang/IndyBootstrapDispatcher.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+     *     Method arguments:\n+     *       #1049 co.elastic.apm.agent.bci.InstrumentationTest$CommonsLangInstrumentation\n+     *       #1050 0\n+     *       #12 org/apache/commons/lang3/StringUtils\n+     *       #1072 isNotEmpty\n+     *       #1075 REF_invokeStatic org/apache/commons/lang3/StringUtils.isNotEmpty:(Ljava/lang/CharSequence;)Z\n+     * </pre>\n+     *\n+     * And this is how a invokedynamic instruction looks like inside methods,\n+     * referencing above bootstrap method\n+     * <pre>\n+     *     invokedynamic #1076,  0           // InvokeDynamic #1:onEnter:()V\n+     * </pre>\n+     *\n+     * @param lookup           A {@code java.lang.invoke.MethodHandles.Lookup} representing the instrumented method.\n+     * @param adviceMethodName A {@link String} representing the advice method name.\n+     * @param adviceMethodType A {@link java.lang.invoke.MethodType} representing the arguments and return type of the advice method.\n+     * @param args             Additional arguments that are provided by Byte Buddy:\n+     *                         <ul>\n+     *                           <li>A {@link String} of the binary target class name.</li>\n+     *                           <li>A {@link int} with value {@code 0} for an enter advice and {code 1} for an exist advice.</li>\n+     *                           <li>A {@link Class} representing the class implementing the instrumented method.</li>\n+     *                           <li>A {@link String} with the name of the instrumented method.</li>\n+     *                           <li>A {@link java.lang.invoke.MethodHandle} representing the instrumented method unless the target is the type's static initializer.</li>\n+     *                         </ul>\n+     * @return a {@link ConstantCallSite} that is the target of the invokedynamic\n      */\n     @Nullable\n     public static ConstantCallSite bootstrap(MethodHandles.Lookup lookup,\n                                              String adviceMethodName,\n                                              MethodType adviceMethodType,\n-                                             Object... args) throws Exception {\n+                                             Object... args) {\n         try {\n             String adviceClassName = (String) args[0];\n             int enter = (Integer) args[1];\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzNjgzNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445536834", "bodyText": "Maybe add a todo with common text to all places that we expect removing once we do the full migration?", "author": "eyalkoren", "createdAt": "2020-06-25T12:57:25Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/PackageScanner.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+public class PackageScanner {\n+\n+    /**\n+     * Returns all class names within a package and sub-packages\n+     *\n+     * @param basePackage the package to scan\n+     * @return all class names within a package and sub-packages\n+     * @throws IOException\n+     * @throws URISyntaxException\n+     */\n+    public static List<String> getClassNames(final String basePackage) throws IOException, URISyntaxException {\n+        String baseFolderResource = basePackage.replace('.', '/');\n+        final List<String> classNames = new ArrayList<>();\n+        Enumeration<URL> resources = getResourcesFromAgentClassLoader(baseFolderResource);\n+        while (resources.hasMoreElements()) {\n+            URL resource = resources.nextElement();\n+            URI uri = resource.toURI();\n+            if (uri.getScheme().equals(\"jar\")) {\n+                // avoids FileSystemAlreadyExistsException\n+                synchronized (PackageScanner.class) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        final Path basePath  = fileSystem.getPath(baseFolderResource).toAbsolutePath();\n+                        classNames.addAll(listClassNames(basePackage, basePath));\n+                    }\n+                }\n+            } else {\n+                classNames.addAll(listClassNames(basePackage, Paths.get(uri)));\n+            }\n+        }\n+        return classNames;\n+    }\n+\n+    private static List<String> listClassNames(final String basePackage, final Path basePath) throws IOException {\n+        final List<String> classNames = new ArrayList<>();\n+        Files.walkFileTree(basePath, new SimpleFileVisitor<Path>() {\n+            @Override\n+            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n+                if (file.toString().endsWith(\".class\")) {\n+                    classNames.add(basePackage + \".\" + basePath.relativize(file).toString().replace('/', '.').replace(\".class\", \"\"));\n+                }\n+                return FileVisitResult.CONTINUE;\n+            }\n+        });\n+        return classNames;\n+    }\n+\n+    private static Enumeration<URL> getResourcesFromAgentClassLoader(String baseFolderResource) throws IOException {\n+        ClassLoader agentCL = PackageScanner.class.getClassLoader();\n+        if (agentCL == null) {", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MzE2Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445683167", "bodyText": "I suggest we do that later, when doing the actual migration. There's no advantage doing that now and we're likely to miss some places.", "author": "felixbarny", "createdAt": "2020-06-25T16:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzNjgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMDI3MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446610270", "bodyText": "The advantage of doing it now is that anybody reading this code knows why it may or may not be null", "author": "eyalkoren", "createdAt": "2020-06-28T06:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzNjgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzg5MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446837891", "bodyText": "I've added co.elastic.apm.agent.bci.ElasticApmAgent#getAgentClassLoader", "author": "felixbarny", "createdAt": "2020-06-29T07:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzNjgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "eb12fb19fb0977814928fb2f2bedd1492610f565", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/util/PackageScanner.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/util/PackageScanner.java\nindex 6e2807e53..384cd6e77 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/util/PackageScanner.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/util/PackageScanner.java\n\n@@ -24,6 +24,8 @@\n  */\n package co.elastic.apm.agent.util;\n \n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+\n import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjA2Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445592067", "bodyText": "Do we have such case?", "author": "eyalkoren", "createdAt": "2020-06-25T14:16:02Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/PackageScanner.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+public class PackageScanner {\n+\n+    /**\n+     * Returns all class names within a package and sub-packages\n+     *\n+     * @param basePackage the package to scan\n+     * @return all class names within a package and sub-packages\n+     * @throws IOException\n+     * @throws URISyntaxException\n+     */\n+    public static List<String> getClassNames(final String basePackage) throws IOException, URISyntaxException {\n+        String baseFolderResource = basePackage.replace('.', '/');\n+        final List<String> classNames = new ArrayList<>();\n+        Enumeration<URL> resources = getResourcesFromAgentClassLoader(baseFolderResource);\n+        while (resources.hasMoreElements()) {\n+            URL resource = resources.nextElement();\n+            URI uri = resource.toURI();\n+            if (uri.getScheme().equals(\"jar\")) {", "originalCommit": "c55474b6c1e9f894fbecb711cfbbe8667ac75f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MTU2MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r445681560", "bodyText": "Yes, when attaching via -javaagent", "author": "felixbarny", "createdAt": "2020-06-25T16:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMDY0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446610642", "bodyText": "Well, that's a corner case \ud83d\ude1c\nRight, read this wrong...", "author": "eyalkoren", "createdAt": "2020-06-28T07:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "eb12fb19fb0977814928fb2f2bedd1492610f565", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/util/PackageScanner.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/util/PackageScanner.java\nindex 6e2807e53..384cd6e77 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/util/PackageScanner.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/util/PackageScanner.java\n\n@@ -24,6 +24,8 @@\n  */\n package co.elastic.apm.agent.util;\n \n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+\n import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n"}}, {"oid": "a0168762b9651de70f7e66155583a5b84d611548", "url": "https://github.com/elastic/apm-agent-java/commit/a0168762b9651de70f7e66155583a5b84d611548", "message": "Add bytecode examples", "committedDate": "2020-06-25T16:12:06Z", "type": "commit"}, {"oid": "2dec53f32327f8bf0ba4e9bf8743653f1dcf39ce", "url": "https://github.com/elastic/apm-agent-java/commit/2dec53f32327f8bf0ba4e9bf8743653f1dcf39ce", "message": "Merge remote-tracking branch 'origin/master' into indy-dispatch", "committedDate": "2020-06-25T16:17:58Z", "type": "commit"}, {"oid": "076f116112fb1d97a62878c877cd9693160c199f", "url": "https://github.com/elastic/apm-agent-java/commit/076f116112fb1d97a62878c877cd9693160c199f", "message": "Apply suggestions from code review\n\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>", "committedDate": "2020-06-25T16:26:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MDQ4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446640481", "bodyText": "Why?", "author": "eyalkoren", "createdAt": "2020-06-28T11:48:42Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java", "diffHunk": "@@ -110,6 +111,10 @@ public static void onMethodExit(@Advice.Local(\"span\") @Nullable AbstractSpan<?>\n             .and(not(nameContains(\"CGLIB\")))\n             .and(not(nameContains(\"EnhancerBy\")))\n             .and(not(nameContains(\"$Proxy\")))\n+            .and(not(nameStartsWith(\"java.\")))\n+            .and(not(nameStartsWith(\"com.sun.\")))\n+            .and(not(nameStartsWith(\"sun.\")))\n+            .and(not(nameStartsWith(\"jdk.\")))", "originalCommit": "076f116112fb1d97a62878c877cd9693160c199f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMjkzNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446812937", "bodyText": "I've removed the restriction to instrument core Java classes from the global exclude list as plugins do sometimes need to instrument them. However, I think it still makes sense to have that restriction for trace_methods.", "author": "felixbarny", "createdAt": "2020-06-29T07:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MDQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3MDExNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r447370114", "bodyText": "It could be powerful to have this capability in trace_methods. Users can abuse this config regardless. I think the benefit of being able to trace specific methods from these packages exceeds the value of protecting users.", "author": "eyalkoren", "createdAt": "2020-06-30T02:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MDQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NTM0OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r447445349", "bodyText": "alight, removed \ud83d\ude42", "author": "felixbarny", "createdAt": "2020-06-30T06:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MDQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3MTQ0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r447471442", "bodyText": "\ud83d\ude18", "author": "eyalkoren", "createdAt": "2020-06-30T07:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MDQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f565651aecf4e6965c22576ba7aa381637d6725", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java\nindex 0e97cabcf..9966711ea 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java\n\n@@ -111,10 +111,6 @@ public class TraceMethodInstrumentation extends ElasticApmInstrumentation {\n             .and(not(nameContains(\"CGLIB\")))\n             .and(not(nameContains(\"EnhancerBy\")))\n             .and(not(nameContains(\"$Proxy\")))\n-            .and(not(nameStartsWith(\"java.\")))\n-            .and(not(nameStartsWith(\"com.sun.\")))\n-            .and(not(nameStartsWith(\"sun.\")))\n-            .and(not(nameStartsWith(\"jdk.\")))\n             .and(declaresMethod(matches(methodMatcher.getMethodMatcher())));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NjI2OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446646268", "bodyText": "[minor] The name is misleading, as it allows removal on get, but doesn't enforce that.\nIn addition, I would say the main purpose of this class is being a registry for DetachedThreadLocals and the secondary purpose is extending DetachedThreadLocal with a conveniency API for get-and-remove.\nI would call it GlobalThreadLocalRegistry or even PluginThreadLocalRegistry.\nThe reason I put emphasis on that is that we want all plugins to use this class whenever they need the ThreadLocal functionality, so I think this will serve this purpose better.", "author": "eyalkoren", "createdAt": "2020-06-28T12:42:26Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/threadlocal/RemoveOnGetThreadLocal.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.threadlocal;\n+\n+import com.blogspot.mydailyjava.weaklockfree.DetachedThreadLocal;\n+\n+import javax.annotation.Nullable;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * Allows registering a globally shared instance of a {@link DetachedThreadLocal} that allows for removal on get.\n+ *\n+ * @param <T>\n+ * @see co.elastic.apm.agent.util.GlobalVariables\n+ */\n+public class RemoveOnGetThreadLocal<T> extends DetachedThreadLocal<T> {", "originalCommit": "076f116112fb1d97a62878c877cd9693160c199f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMjkxNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446812914", "bodyText": "You're very right on this. I've renamed to GlobalThreadLocal to be consistent with GlobalVariables and @GlobalState.", "author": "felixbarny", "createdAt": "2020-06-29T07:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NjI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "eb12fb19fb0977814928fb2f2bedd1492610f565", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/threadlocal/RemoveOnGetThreadLocal.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/threadlocal/GlobalThreadLocal.java\nsimilarity index 65%\nrename from apm-agent-core/src/main/java/co/elastic/apm/agent/threadlocal/RemoveOnGetThreadLocal.java\nrename to apm-agent-core/src/main/java/co/elastic/apm/agent/threadlocal/GlobalThreadLocal.java\nindex b4fc8af15..7770368ed 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/threadlocal/RemoveOnGetThreadLocal.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/threadlocal/GlobalThreadLocal.java\n\n@@ -31,37 +31,38 @@ import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n /**\n- * Allows registering a globally shared instance of a {@link DetachedThreadLocal} that allows for removal on get.\n+ * Allows registering a globally shared instance of a {@link DetachedThreadLocal} that optionally allows for removal on get.\n+ * Similar to {@link co.elastic.apm.agent.util.GlobalVariables} and {@link co.elastic.apm.agent.bci.GlobalState},\n+ * this allows to get thread locals whose state is shared across plugin class loaders.\n  *\n  * @param <T>\n- * @see co.elastic.apm.agent.util.GlobalVariables\n  */\n-public class RemoveOnGetThreadLocal<T> extends DetachedThreadLocal<T> {\n+public class GlobalThreadLocal<T> extends DetachedThreadLocal<T> {\n \n-    private static final ConcurrentMap<String, RemoveOnGetThreadLocal<?>> registry = new ConcurrentHashMap<>();\n+    private static final ConcurrentMap<String, GlobalThreadLocal<?>> registry = new ConcurrentHashMap<>();\n     @Nullable\n     private final T defaultValue;\n \n-    private RemoveOnGetThreadLocal(@Nullable T defaultValue) {\n+    private GlobalThreadLocal(@Nullable T defaultValue) {\n         super(Cleaner.INLINE);\n         this.defaultValue = defaultValue;\n     }\n \n-    public static <T> RemoveOnGetThreadLocal<T> get(Class<?> adviceClass, String key) {\n+    public static <T> GlobalThreadLocal<T> get(Class<?> adviceClass, String key) {\n         return get(adviceClass.getName() + \".\" + key, null);\n     }\n \n-    public static <T> RemoveOnGetThreadLocal<T> get(Class<?> adviceClass, String key, @Nullable T defaultValue) {\n+    public static <T> GlobalThreadLocal<T> get(Class<?> adviceClass, String key, @Nullable T defaultValue) {\n         return get(adviceClass.getName() + \".\" + key, defaultValue);\n     }\n \n-    private static <T> RemoveOnGetThreadLocal<T> get(String key, @Nullable T defaultValue) {\n-        RemoveOnGetThreadLocal<?> threadLocal = registry.get(key);\n+    private static <T> GlobalThreadLocal<T> get(String key, @Nullable T defaultValue) {\n+        GlobalThreadLocal<?> threadLocal = registry.get(key);\n         if (threadLocal == null) {\n-            registry.putIfAbsent(key, new RemoveOnGetThreadLocal<T>(defaultValue));\n+            registry.putIfAbsent(key, new GlobalThreadLocal<T>(defaultValue));\n             threadLocal = registry.get(key);\n         }\n-        return (RemoveOnGetThreadLocal<T>) threadLocal;\n+        return (GlobalThreadLocal<T>) threadLocal;\n     }\n \n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTQ0OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446649448", "bodyText": "Unless you are expecting a nesting of over 127 levels of the same advice, you should be able to rely on the Integer cache in order to avoid allocations related to boxing.", "author": "eyalkoren", "createdAt": "2020-06-28T13:12:17Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/CallDepth.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import net.bytebuddy.asm.Advice;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * A utility that makes it easy to detect nested method calls.\n+ */\n+public class CallDepth {\n+    private static final ConcurrentMap<String, CallDepth> registry = new ConcurrentHashMap<>();\n+    private final ThreadLocal<MutableInt> callDepthPerThread = new ThreadLocal<MutableInt>();", "originalCommit": "076f116112fb1d97a62878c877cd9693160c199f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMzQ3Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446813476", "bodyText": "Both seem like valid approaches with minor differences in performance and lines of code.", "author": "felixbarny", "createdAt": "2020-06-29T07:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2NTkxNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r450365917", "bodyText": "I ended up implementing your suggestion in #1273 as it may introduce thread local class loader leaks down the road.", "author": "felixbarny", "createdAt": "2020-07-06T17:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTQ0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTU1OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446651559", "bodyText": "\ud83d\ude0d\nAwesome test.\nIt verifies that reverting the instrumentation allows the plugin class loader to be GCed.\nWe also need a test that having the instrumentation in place doesn't prevent from the target class loader and the classes it loaded from being GCed and that when they are GCed, the plugin class loader and plugin classes are GCed as well. A relevant scenario is undeploying an application from a servlet container.\nFor example: \n  \n    \n      apm-agent-java/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/HelperClassManagerTest.java\n    \n    \n         Line 147\n      in\n      8421856\n    \n    \n    \n    \n\n        \n          \n           private void testLoadHelperAnyClassLoader() throws ClassNotFoundException, InterruptedException {", "author": "eyalkoren", "createdAt": "2020-06-28T13:32:02Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/InstrumentationTest.java", "diffHunk": "@@ -209,6 +276,135 @@ String exceptionPlease() {\n         throw null;\n     }\n \n+    @Test\n+    void testPatchClassFileVersionJava6ToJava7() {\n+        // loading classes compiled with bytecode level 50 (Java 6)\n+        assertThat(StringUtils.startsWithIgnoreCase(\"APM\", \"apm\")).isTrue();\n+\n+        // retransforming classes and patch to bytecode level 51 (Java 7)\n+        ElasticApmAgent.initInstrumentation(tracer,\n+            ByteBuddyAgent.install(),\n+            Collections.singletonList(new CommonsLangInstrumentation()));\n+\n+        assertThat(CommonsLangInstrumentation.enterCount).hasValue(0);\n+        assertThat(CommonsLangInstrumentation.exitCount).hasValue(0);\n+\n+        assertThat(StringUtils.startsWithIgnoreCase(\"APM\", \"apm\")).isTrue();\n+\n+        assertThat(CommonsLangInstrumentation.enterCount).hasPositiveValue();\n+        assertThat(CommonsLangInstrumentation.exitCount).hasPositiveValue();\n+    }\n+\n+    @Test\n+    void testPatchClassFileVersionJava5ToJava7() {\n+        // loading classes compiled with bytecode level 49 (Java 6)\n+        new org.slf4j.event.SubstituteLoggingEvent();\n+\n+        // retransforming classes and patch to bytecode level 51 (Java 7)\n+        ElasticApmAgent.initInstrumentation(tracer,\n+            ByteBuddyAgent.install(),\n+            Collections.singletonList(new LoggerFactoryInstrumentation()));\n+\n+        assertThat(LoggerFactoryInstrumentation.enterCount).hasValue(0);\n+        assertThat(LoggerFactoryInstrumentation.exitCount).hasValue(0);\n+\n+        new org.slf4j.event.SubstituteLoggingEvent();\n+\n+        assertThat(LoggerFactoryInstrumentation.enterCount).hasPositiveValue();\n+        assertThat(LoggerFactoryInstrumentation.exitCount).hasPositiveValue();\n+    }\n+\n+    @Test\n+    void testPatchClassFileVersionJava5ToJava7CommonsMath() {\n+        org.apache.commons.math3.stat.StatUtils.max(new double[]{3.14});\n+\n+        // retransforming classes and patch to bytecode level 51 (Java 7)\n+        ElasticApmAgent.initInstrumentation(tracer,\n+            ByteBuddyAgent.install(),\n+            Collections.singletonList(new StatUtilsInstrumentation()));\n+\n+        assertThat(StatUtilsInstrumentation.enterCount).hasValue(0);\n+        assertThat(StatUtilsInstrumentation.exitCount).hasValue(0);\n+\n+        org.apache.commons.math3.stat.StatUtils.max(new double[]{3.14});\n+\n+        assertThat(StatUtilsInstrumentation.enterCount).hasPositiveValue();\n+        assertThat(StatUtilsInstrumentation.exitCount).hasPositiveValue();\n+    }\n+\n+    @Test\n+    void testPrivateConstructorJava7() {\n+        org.apache.commons.pool2.impl.CallStackUtils.newCallStack(\"\", false, false);\n+\n+        // retransforming classes and patch to bytecode level 51 (Java 7)\n+        ElasticApmAgent.initInstrumentation(tracer,\n+            ByteBuddyAgent.install(),\n+            Collections.singletonList(new CallStackUtilsInstrumentation()));\n+\n+        assertThat(CallStackUtilsInstrumentation.enterCount).hasValue(0);\n+        assertThat(CallStackUtilsInstrumentation.exitCount).hasValue(0);\n+\n+        org.apache.commons.pool2.impl.CallStackUtils.newCallStack(\"\", false, false);\n+\n+        assertThat(CallStackUtilsInstrumentation.enterCount).hasPositiveValue();\n+        assertThat(CallStackUtilsInstrumentation.exitCount).hasPositiveValue();\n+    }\n+\n+    @Test\n+    void testPluginClassLoaderGCdAfterUndoingInstrumentation() {", "originalCommit": "076f116112fb1d97a62878c877cd9693160c199f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxOTgyMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446819822", "bodyText": "When this one fails, do we have an easy way to track what is not being GCed ? If a memory dump is required why not capture one and invite user to analyze it ? (that might not be a very good idea on CI).", "author": "SylvainJuge", "createdAt": "2020-06-29T07:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyNTc5OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r446825798", "bodyText": "The way to debug it would be to reproduce locally, set a breakpoint after System.gc() and to take a heap dump.", "author": "felixbarny", "createdAt": "2020-06-29T07:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3MTY5Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r447371692", "bodyText": "The new test seems to cover what we need \ud83d\udc4d", "author": "eyalkoren", "createdAt": "2020-06-30T02:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTU1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb12fb19fb0977814928fb2f2bedd1492610f565", "chunk": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/InstrumentationTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/InstrumentationTest.java\nindex ddb9d2773..ccedd5ab7 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/InstrumentationTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/InstrumentationTest.java\n\n@@ -368,6 +370,40 @@ class InstrumentationTest {\n         await().untilAsserted(() -> assertThat(pluginClassLoader.get()).isNull());\n     }\n \n+    @Test\n+    void testNoClassLoaderLeakWhenInstrumentedApplicationIsUndeployed() throws Exception {\n+        ElasticApmAgent.initInstrumentation(tracer,\n+            ByteBuddyAgent.install(),\n+            Collections.singletonList(new GetClassLoaderInstrumentation()));\n+\n+        Map<String, byte[]> typeDefinitions = Map.of(\n+            InstrumentedInIsolatedClassLoader.class.getName(),\n+            ClassFileLocator.ForClassLoader.of(ClassLoader.getSystemClassLoader()).locate(InstrumentedInIsolatedClassLoader.class.getName()).resolve()\n+        );\n+        ClassLoader applicationCL = new ByteArrayClassLoader.ChildFirst(null, true, typeDefinitions, ByteArrayClassLoader.PersistenceHandler.MANIFEST);\n+        Class<?> instrumentedClass = applicationCL.loadClass(InstrumentedInIsolatedClassLoader.class.getName());\n+        assertThat(instrumentedClass.getMethod(\"getClassLoader\").invoke(null)).isSameAs(applicationCL);\n+\n+        WeakReference<ClassLoader> applicationCLRef = new WeakReference<>(applicationCL);\n+        // after clearing these references, the application class loader is expected to be eligible for GC\n+        // the agent must not hold strong references the instrumented class or it's class loader\n+        applicationCL = null;\n+        instrumentedClass = null;\n+\n+        System.gc();\n+        System.gc();\n+        await().untilAsserted(() -> assertThat(applicationCLRef.get()).isNull());\n+    }\n+\n+    public static class InstrumentedInIsolatedClassLoader {\n+\n+        @Nullable\n+        public static ClassLoader getClassLoader() {\n+            return null;\n+        }\n+\n+    }\n+\n     @Test\n     void testInlinedIndyAdvice() {\n         assertThatThrownBy(() -> ElasticApmAgent.initInstrumentation(tracer,\n"}}, {"oid": "eb12fb19fb0977814928fb2f2bedd1492610f565", "url": "https://github.com/elastic/apm-agent-java/commit/eb12fb19fb0977814928fb2f2bedd1492610f565", "message": "Implement suggestions from review", "committedDate": "2020-06-29T07:53:59Z", "type": "commit"}, {"oid": "ec53de6c3b0f30e0938495213d5aac39df650e33", "url": "https://github.com/elastic/apm-agent-java/commit/ec53de6c3b0f30e0938495213d5aac39df650e33", "message": "Disallow ThreadLocals in instrumentation plugins", "committedDate": "2020-06-29T08:16:29Z", "type": "commit"}, {"oid": "c4bfd97cd9409cc77b12615100225c3cacdf3132", "url": "https://github.com/elastic/apm-agent-java/commit/c4bfd97cd9409cc77b12615100225c3cacdf3132", "message": "Add no shading to benefits", "committedDate": "2020-06-30T06:38:18Z", "type": "commit"}, {"oid": "4f565651aecf4e6965c22576ba7aa381637d6725", "url": "https://github.com/elastic/apm-agent-java/commit/4f565651aecf4e6965c22576ba7aa381637d6725", "message": "Allow trace_methods to instrument core java classes", "committedDate": "2020-06-30T06:40:59Z", "type": "commit"}, {"oid": "55d987b7a00839c02f74cef59b37ac50580e6726", "url": "https://github.com/elastic/apm-agent-java/commit/55d987b7a00839c02f74cef59b37ac50580e6726", "message": "Merge remote-tracking branch 'origin/master' into indy-dispatch", "committedDate": "2020-07-01T10:04:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MjYzMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r448782631", "bodyText": "\ud83d\ude01", "author": "eyalkoren", "createdAt": "2020-07-02T06:46:21Z", "path": "apm-agent-plugins/apm-dubbo-plugin/src/test/java/co/elastic/apm/agent/dubbo/api/impl/DubboTestApiImpl.java", "diffHunk": "@@ -64,7 +63,7 @@\n \n     public DubboTestApiImpl() {\n         client = new OkHttpClient();\n-        executorService = new ExecutorServiceWrapper(Executors.newSingleThreadExecutor());\n+        executorService = Executors.newSingleThreadExecutor();", "originalCommit": "6abbf01aa4b5e1c68dec3679822679b6b54676c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4ODU5Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r448788597", "bodyText": "Is this still relevant now that we only wrap lambdas?", "author": "eyalkoren", "createdAt": "2020-07-02T06:59:48Z", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/ExecutorInstrumentation.java", "diffHunk": "@@ -63,8 +64,7 @@\n \n public abstract class ExecutorInstrumentation extends ElasticApmInstrumentation {\n \n-    @VisibleForAdvice\n-    public static final Set<String> excludedClasses = new HashSet<>();\n+    static final Set<String> excludedClasses = GlobalVariables.get(ExecutorInstrumentation.class, \"excludedClasses\", new HashSet<String>());\n \n     static {", "originalCommit": "6abbf01aa4b5e1c68dec3679822679b6b54676c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxMDM0NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r449010345", "bodyText": "Less so but still relevant for some cases", "author": "felixbarny", "createdAt": "2020-07-02T13:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4ODU5Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5MjIxOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r448792218", "bodyText": "Ohh, that's something to pay attention to when migrating plugins! Even though it will surely fail anyway, you can add to the advice validation and provide a friendly note on what needs to change.", "author": "eyalkoren", "createdAt": "2020-07-02T07:08:00Z", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/ExecutorInstrumentation.java", "diffHunk": "@@ -130,26 +138,28 @@ private static void onExit(@Nullable @Advice.Thrown Throwable thrown,\n         @Override\n         public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n             return named(\"execute\").and(returns(void.class)).and(takesArguments(Runnable.class))\n-                .or(named(\"submit\").and(returns(Future.class)).and(takesArguments(Runnable.class)))\n-                .or(named(\"submit\").and(returns(Future.class)).and(takesArguments(Runnable.class, Object.class)))\n+                .or(named(\"submit\").and(returns(hasSuperType(is(Future.class)))).and(takesArguments(Runnable.class)))\n+                .or(named(\"submit\").and(returns(hasSuperType(is(Future.class)))).and(takesArguments(Runnable.class, Object.class)))\n                 .or(named(\"schedule\").and(returns(ScheduledFuture.class)).and(takesArguments(Runnable.class, long.class, TimeUnit.class)));\n         }\n     }\n \n     public static class ExecutorCallableInstrumentation extends ExecutorInstrumentation {\n \n-        @Advice.OnMethodEnter(suppress = Throwable.class)\n-        public static void onSubmit(@Advice.This Executor thiz,\n-                                    @Advice.Argument(value = 0, readOnly = false) @Nullable Callable<?> callable) {\n+        @Nullable\n+        @AssignToArgument(0)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Callable<?> onSubmit(@Advice.This Executor thiz,\n+                                           @Advice.Argument(0) @Nullable Callable<?> callable) {\n             if (ExecutorInstrumentation.isExcluded(thiz)) {\n-                return;\n+                return callable;\n             }\n-            callable = JavaConcurrent.withContext(callable, tracer);\n+            return JavaConcurrent.withContext(callable, tracer);\n         }\n \n-        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n-        private static void onExit(@Nullable @Advice.Thrown Throwable thrown,\n-                                   @Advice.Argument(value = 0) @Nullable Callable<?> callable) {\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onExit(@Nullable @Advice.Thrown Throwable thrown,", "originalCommit": "6abbf01aa4b5e1c68dec3679822679b6b54676c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxMDM4OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r449010388", "bodyText": "Byte Buddy already validates that the method is public", "author": "felixbarny", "createdAt": "2020-07-02T13:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5MjIxOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MzE4MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r448993180", "bodyText": "\ud83e\udd2f", "author": "eyalkoren", "createdAt": "2020-07-02T13:15:37Z", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/ForkJoinPoolTest.java", "diffHunk": "@@ -70,4 +75,59 @@ void testInvoke() throws Exception {\n         assertThat(pool.invoke(newTask(() -> tracer.getActive()))).isEqualTo(transaction);\n     }\n \n+    @Test\n+    void testCompletableFuture() throws Exception {\n+        // This test fails when debugging the tests in IntelliJ and the instrumenting agent is active\n+        // Either run in non-debug mode or go to\n+        // Preferences | Build, Execution, Deployment | Debugger | Async Stack Traces\n+        // and uncheck the Instrumenting Agent checkbox\n+        assertThat(CompletableFuture\n+            .supplyAsync(() -> Objects.requireNonNull(tracer.getActive()))\n+            .thenApplyAsync(active -> tracer.getActive())\n+            .get())\n+            .isEqualTo(transaction);\n+    }\n+\n+    @Test\n+    void testParallelStream() {", "originalCommit": "6abbf01aa4b5e1c68dec3679822679b6b54676c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MzkzMw==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r448993933", "bodyText": "Maybe even more explicit is:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(Stream.of(\"foo\", \"bar\", \"baz\")\n          \n          \n            \n                        .parallel()\n          \n          \n            \n                        .<AbstractSpan<?>>map(s -> tracer.getActive())\n          \n          \n            \n                        .distinct())\n          \n          \n            \n                    .containsExactly(transaction);\n          \n          \n            \n                    assertThat(Stream.of(\"foo\", \"bar\", \"baz\")\n          \n          \n            \n                        .parallel()\n          \n          \n            \n                        .<AbstractSpan<?>>map(s -> tracer.getActive()))\n          \n          \n            \n                    .containsExactly(transaction, transaction, transaction);", "author": "eyalkoren", "createdAt": "2020-07-02T13:16:44Z", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/ForkJoinPoolTest.java", "diffHunk": "@@ -70,4 +75,59 @@ void testInvoke() throws Exception {\n         assertThat(pool.invoke(newTask(() -> tracer.getActive()))).isEqualTo(transaction);\n     }\n \n+    @Test\n+    void testCompletableFuture() throws Exception {\n+        // This test fails when debugging the tests in IntelliJ and the instrumenting agent is active\n+        // Either run in non-debug mode or go to\n+        // Preferences | Build, Execution, Deployment | Debugger | Async Stack Traces\n+        // and uncheck the Instrumenting Agent checkbox\n+        assertThat(CompletableFuture\n+            .supplyAsync(() -> Objects.requireNonNull(tracer.getActive()))\n+            .thenApplyAsync(active -> tracer.getActive())\n+            .get())\n+            .isEqualTo(transaction);\n+    }\n+\n+    @Test\n+    void testParallelStream() {\n+        assertThat(Stream.of(\"foo\", \"bar\", \"baz\")\n+            .parallel()\n+            .<AbstractSpan<?>>map(s -> tracer.getActive())\n+            .distinct())\n+        .containsExactly(transaction);", "originalCommit": "6abbf01aa4b5e1c68dec3679822679b6b54676c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxMzA0NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r449013045", "bodyText": "True, but I don't want to execute the tests again because of that.", "author": "felixbarny", "createdAt": "2020-07-02T13:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MzkzMw=="}], "type": "inlineReview", "revised_code": null}]}