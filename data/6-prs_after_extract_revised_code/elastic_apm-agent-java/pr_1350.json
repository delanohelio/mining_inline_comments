{"pr_number": 1350, "pr_title": "Add ability to specify directory that libasyncProfiler is exported to, to support /tmp partitions that have noexec set", "pr_createdAt": "2020-08-19T19:34:01Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1350", "timeline": [{"oid": "74f1c0570f8f031091faecff80e69a6b439b0ee0", "url": "https://github.com/elastic/apm-agent-java/commit/74f1c0570f8f031091faecff80e69a6b439b0ee0", "message": "Add ability to specify directory that libasyncProfiler is exported to, to support /tmp partitions that have noexec set\n\n- Add elastic.apm.profiling_inferred_spans_lib_directory property that can be set to specify a directory which should be used to place the libasyncProfiler.so shared library, so that it can take a value such as /var/tmp when running in a server-hardened environment, without needing to change the `java.io.tmpdir` system property which would apply to the system being profiled as well. If not set, the `java.io.tmpdir` system property is used as before\n- When loading the library, catch any UnsatisfiedLinkError errors, which would usually indicate a /tmp partition that has noexec set, and and re-throw the exception with a message to suggest setting the property\n- Add unit tests which cover this configurable behaviour\n- Update changelog and configuration docs\n\nFixes #1226", "committedDate": "2020-08-19T19:28:38Z", "type": "commit"}, {"oid": "74f1c0570f8f031091faecff80e69a6b439b0ee0", "url": "https://github.com/elastic/apm-agent-java/commit/74f1c0570f8f031091faecff80e69a6b439b0ee0", "message": "Add ability to specify directory that libasyncProfiler is exported to, to support /tmp partitions that have noexec set\n\n- Add elastic.apm.profiling_inferred_spans_lib_directory property that can be set to specify a directory which should be used to place the libasyncProfiler.so shared library, so that it can take a value such as /var/tmp when running in a server-hardened environment, without needing to change the `java.io.tmpdir` system property which would apply to the system being profiled as well. If not set, the `java.io.tmpdir` system property is used as before\n- When loading the library, catch any UnsatisfiedLinkError errors, which would usually indicate a /tmp partition that has noexec set, and and re-throw the exception with a message to suggest setting the property\n- Add unit tests which cover this configurable behaviour\n- Update changelog and configuration docs\n\nFixes #1226", "committedDate": "2020-08-19T19:28:38Z", "type": "forcePushed"}, {"oid": "74f1c0570f8f031091faecff80e69a6b439b0ee0", "url": "https://github.com/elastic/apm-agent-java/commit/74f1c0570f8f031091faecff80e69a6b439b0ee0", "message": "Add ability to specify directory that libasyncProfiler is exported to, to support /tmp partitions that have noexec set\n\n- Add elastic.apm.profiling_inferred_spans_lib_directory property that can be set to specify a directory which should be used to place the libasyncProfiler.so shared library, so that it can take a value such as /var/tmp when running in a server-hardened environment, without needing to change the `java.io.tmpdir` system property which would apply to the system being profiled as well. If not set, the `java.io.tmpdir` system property is used as before\n- When loading the library, catch any UnsatisfiedLinkError errors, which would usually indicate a /tmp partition that has noexec set, and and re-throw the exception with a message to suggest setting the property\n- Add unit tests which cover this configurable behaviour\n- Update changelog and configuration docs\n\nFixes #1226", "committedDate": "2020-08-19T19:28:38Z", "type": "forcePushed"}, {"oid": "8d35a52b6244d0fca790f32a715c22b861ced749", "url": "https://github.com/elastic/apm-agent-java/commit/8d35a52b6244d0fca790f32a715c22b861ced749", "message": "Remove use of java.util.Optional from ProfilingConfiguration", "committedDate": "2020-08-19T20:53:24Z", "type": "commit"}, {"oid": "546063cff6494164b8450808da1cf0d57c50ca03", "url": "https://github.com/elastic/apm-agent-java/commit/546063cff6494164b8450808da1cf0d57c50ca03", "message": "Fix typo in exception message", "committedDate": "2020-08-19T21:05:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MzQ2Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473773462", "bodyText": "[minor] I'd prefer a package-private reset method but this certainly works too", "author": "felixbarny", "createdAt": "2020-08-20T08:44:30Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.profiler.asyncprofiler;\n+\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.profiler.ProfilingConfiguration;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class AsyncProfilerTest {\n+\n+    private ProfilingConfiguration profilerConfig;\n+\n+    @BeforeEach\n+    void setUp() throws ReflectiveOperationException {\n+        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n+        profilerConfig = config.getConfig(ProfilingConfiguration.class);\n+\n+        // Ensure that the singleton AsyncProfiler is reset so a new instance is created for each test\n+        Field instance = AsyncProfiler.class.getDeclaredField(\"instance\");", "originalCommit": "546063cff6494164b8450808da1cf0d57c50ca03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzODQ4NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473938484", "bodyText": "Sounds good - done", "author": "marcjay", "createdAt": "2020-08-20T12:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MzQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1248deba0d5cea6f67319dd89f4b049ba0226199", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java\nindex 2690d737c..6114ade78 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java\n\n@@ -24,55 +24,37 @@\n  */\n package co.elastic.apm.agent.profiler.asyncprofiler;\n \n-import co.elastic.apm.agent.configuration.SpyConfiguration;\n-import co.elastic.apm.agent.profiler.ProfilingConfiguration;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.stagemonitor.configuration.ConfigurationRegistry;\n+import org.junit.jupiter.api.io.TempDir;\n \n import java.io.File;\n import java.io.FilenameFilter;\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.nio.file.Files;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.when;\n \n public class AsyncProfilerTest {\n \n-    private ProfilingConfiguration profilerConfig;\n-\n     @BeforeEach\n-    void setUp() throws ReflectiveOperationException {\n-        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n-        profilerConfig = config.getConfig(ProfilingConfiguration.class);\n-\n-        // Ensure that the singleton AsyncProfiler is reset so a new instance is created for each test\n-        Field instance = AsyncProfiler.class.getDeclaredField(\"instance\");\n-        instance.setAccessible(true);\n-        instance.set(null, null);\n+    void setUp() {\n+        AsyncProfiler.reset();\n     }\n \n     @Test\n     void testShouldCopyLibToTempDirectory() {\n-        AsyncProfiler.getInstance(profilerConfig);\n+        String defaultTempDirectory = System.getProperty(\"java.io.tmpdir\");\n+        AsyncProfiler.getInstance(defaultTempDirectory);\n \n-        File libDirectory = new File(profilerConfig.getProfilerLibDirectory());\n+        File libDirectory = new File(defaultTempDirectory);\n         File[] libasyncProfilers = libDirectory.listFiles(getLibasyncProfilerFilenameFilter());\n         assertThat(libasyncProfilers).hasSizeGreaterThanOrEqualTo(1);\n     }\n \n     @Test\n-    void testShouldCopyLibToSpecifiedDirectory() throws IOException {\n-        File parentDirectory = Files.createTempDirectory(null).toFile();\n-        parentDirectory.deleteOnExit();\n-        when(profilerConfig.getProfilerLibDirectory()).thenReturn(parentDirectory.getAbsolutePath());\n-        System.out.println(parentDirectory.getAbsolutePath());\n-\n-        AsyncProfiler.getInstance(profilerConfig);\n+    void testShouldCopyLibToSpecifiedDirectory(@TempDir File nonDefaultTempDirectory) {\n+        AsyncProfiler.getInstance(nonDefaultTempDirectory.getAbsolutePath());\n \n-        File[] libasyncProfilers = parentDirectory.listFiles(getLibasyncProfilerFilenameFilter());\n+        File[] libasyncProfilers = nonDefaultTempDirectory.listFiles(getLibasyncProfilerFilenameFilter());\n         assertThat(libasyncProfilers).hasSizeGreaterThanOrEqualTo(1);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NTkyMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473775921", "bodyText": "[tip] JUnit has a handy org.junit.jupiter.api.io.TempDir annotation to inject a temp dir into a test method via method parameter. This dir is deleted when the test method exits (regularly or exceptionally).", "author": "felixbarny", "createdAt": "2020-08-20T08:46:45Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.profiler.asyncprofiler;\n+\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.profiler.ProfilingConfiguration;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class AsyncProfilerTest {\n+\n+    private ProfilingConfiguration profilerConfig;\n+\n+    @BeforeEach\n+    void setUp() throws ReflectiveOperationException {\n+        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n+        profilerConfig = config.getConfig(ProfilingConfiguration.class);\n+\n+        // Ensure that the singleton AsyncProfiler is reset so a new instance is created for each test\n+        Field instance = AsyncProfiler.class.getDeclaredField(\"instance\");\n+        instance.setAccessible(true);\n+        instance.set(null, null);\n+    }\n+\n+    @Test\n+    void testShouldCopyLibToTempDirectory() {\n+        AsyncProfiler.getInstance(profilerConfig);\n+\n+        File libDirectory = new File(profilerConfig.getProfilerLibDirectory());\n+        File[] libasyncProfilers = libDirectory.listFiles(getLibasyncProfilerFilenameFilter());\n+        assertThat(libasyncProfilers).hasSizeGreaterThanOrEqualTo(1);\n+    }\n+\n+    @Test\n+    void testShouldCopyLibToSpecifiedDirectory() throws IOException {", "originalCommit": "546063cff6494164b8450808da1cf0d57c50ca03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzOTAxOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473939019", "bodyText": "Nice! \ud83d\ude04 - That's a new one on me - very handy, cheers for the tip!", "author": "marcjay", "createdAt": "2020-08-20T12:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NTkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1248deba0d5cea6f67319dd89f4b049ba0226199", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java\nindex 2690d737c..6114ade78 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java\n\n@@ -24,55 +24,37 @@\n  */\n package co.elastic.apm.agent.profiler.asyncprofiler;\n \n-import co.elastic.apm.agent.configuration.SpyConfiguration;\n-import co.elastic.apm.agent.profiler.ProfilingConfiguration;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.stagemonitor.configuration.ConfigurationRegistry;\n+import org.junit.jupiter.api.io.TempDir;\n \n import java.io.File;\n import java.io.FilenameFilter;\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.nio.file.Files;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.when;\n \n public class AsyncProfilerTest {\n \n-    private ProfilingConfiguration profilerConfig;\n-\n     @BeforeEach\n-    void setUp() throws ReflectiveOperationException {\n-        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n-        profilerConfig = config.getConfig(ProfilingConfiguration.class);\n-\n-        // Ensure that the singleton AsyncProfiler is reset so a new instance is created for each test\n-        Field instance = AsyncProfiler.class.getDeclaredField(\"instance\");\n-        instance.setAccessible(true);\n-        instance.set(null, null);\n+    void setUp() {\n+        AsyncProfiler.reset();\n     }\n \n     @Test\n     void testShouldCopyLibToTempDirectory() {\n-        AsyncProfiler.getInstance(profilerConfig);\n+        String defaultTempDirectory = System.getProperty(\"java.io.tmpdir\");\n+        AsyncProfiler.getInstance(defaultTempDirectory);\n \n-        File libDirectory = new File(profilerConfig.getProfilerLibDirectory());\n+        File libDirectory = new File(defaultTempDirectory);\n         File[] libasyncProfilers = libDirectory.listFiles(getLibasyncProfilerFilenameFilter());\n         assertThat(libasyncProfilers).hasSizeGreaterThanOrEqualTo(1);\n     }\n \n     @Test\n-    void testShouldCopyLibToSpecifiedDirectory() throws IOException {\n-        File parentDirectory = Files.createTempDirectory(null).toFile();\n-        parentDirectory.deleteOnExit();\n-        when(profilerConfig.getProfilerLibDirectory()).thenReturn(parentDirectory.getAbsolutePath());\n-        System.out.println(parentDirectory.getAbsolutePath());\n-\n-        AsyncProfiler.getInstance(profilerConfig);\n+    void testShouldCopyLibToSpecifiedDirectory(@TempDir File nonDefaultTempDirectory) {\n+        AsyncProfiler.getInstance(nonDefaultTempDirectory.getAbsolutePath());\n \n-        File[] libasyncProfilers = parentDirectory.listFiles(getLibasyncProfilerFilenameFilter());\n+        File[] libasyncProfilers = nonDefaultTempDirectory.listFiles(getLibasyncProfilerFilenameFilter());\n         assertThat(libasyncProfilers).hasSizeGreaterThanOrEqualTo(1);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODA1Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473778052", "bodyText": "[very minor] just a personal preference so that the AsyncProfiler class doesn't depend on the configuration class. Feel free to leave as-is\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static AsyncProfiler getInstance(ProfilingConfiguration config) {\n          \n          \n            \n                public static AsyncProfiler getInstance(String profilerLibDirectory) {", "author": "felixbarny", "createdAt": "2020-08-20T08:49:15Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfiler.java", "diffHunk": "@@ -64,24 +65,31 @@\n     private AsyncProfiler() {\n     }\n \n-    public static AsyncProfiler getInstance() {\n+    public static AsyncProfiler getInstance(ProfilingConfiguration config) {", "originalCommit": "546063cff6494164b8450808da1cf0d57c50ca03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MjEwNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473942104", "bodyText": "I'd um'd and ah'd between the two - this does make things a lot cleaner \ud83d\udc4d", "author": "marcjay", "createdAt": "2020-08-20T12:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1248deba0d5cea6f67319dd89f4b049ba0226199", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfiler.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfiler.java\nindex 1e05b4583..7f36b2d9d 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfiler.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfiler.java\n\n@@ -65,7 +64,7 @@ public class AsyncProfiler {\n     private AsyncProfiler() {\n     }\n \n-    public static AsyncProfiler getInstance(ProfilingConfiguration config) {\n+    public static AsyncProfiler getInstance(String profilerLibDirectory) {\n         AsyncProfiler result = AsyncProfiler.instance;\n         if (result != null) {\n             return result;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODY1OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473778658", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n          \n          \n            \n                        \"noexec may be set on the standard `/tmp` partition, leading to `java.lang.UnsatisfiedLinkError` errors.\\n\" +", "author": "felixbarny", "createdAt": "2020-08-20T08:49:59Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -163,6 +163,19 @@\n         .tags(\"added[1.15.0]\", \"internal\")\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<String> profilerLibDirectory = ConfigurationOption.<String>stringOption()\n+        .key(\"profiling_inferred_spans_lib_directory\")\n+        .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n+            \"is exported to a temporary location and loaded by the JVM.\\n\" +\n+            \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n+            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +", "originalCommit": "546063cff6494164b8450808da1cf0d57c50ca03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1248deba0d5cea6f67319dd89f4b049ba0226199", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java\nindex 9b9267db2..9113344aa 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java\n\n@@ -168,9 +168,9 @@ public class ProfilingConfiguration extends ConfigurationOptionProvider {\n         .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n             \"is exported to a temporary location and loaded by the JVM.\\n\" +\n             \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n-            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n-            \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +\n-            \"If unset, the value of the \\\"java.io.tmpdir\\\" System property will be used.\")\n+            \"noexec may be set on the standard `/tmp` partition, leading to `java.lang.UnsatisfiedLinkError` errors.\\n\" +\n+            \"Set this property to an alternative directory (e.g. `/var/tmp`) to resolve this.\\n\" +\n+            \"If unset, the value of the `java.io.tmpdir` System property will be used.\")\n         .configurationCategory(PROFILING_CATEGORY)\n         .dynamic(false)\n         .tags(\"added[1.18.0]\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3OTIwNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473779207", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +\n          \n          \n            \n                        \"Set this property to an alternative directory (e.g. `/var/tmp`) to resolve this.\\n\" +", "author": "felixbarny", "createdAt": "2020-08-20T08:50:33Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -163,6 +163,19 @@\n         .tags(\"added[1.15.0]\", \"internal\")\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<String> profilerLibDirectory = ConfigurationOption.<String>stringOption()\n+        .key(\"profiling_inferred_spans_lib_directory\")\n+        .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n+            \"is exported to a temporary location and loaded by the JVM.\\n\" +\n+            \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n+            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n+            \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +", "originalCommit": "546063cff6494164b8450808da1cf0d57c50ca03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1248deba0d5cea6f67319dd89f4b049ba0226199", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java\nindex 9b9267db2..9113344aa 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java\n\n@@ -168,9 +168,9 @@ public class ProfilingConfiguration extends ConfigurationOptionProvider {\n         .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n             \"is exported to a temporary location and loaded by the JVM.\\n\" +\n             \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n-            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n-            \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +\n-            \"If unset, the value of the \\\"java.io.tmpdir\\\" System property will be used.\")\n+            \"noexec may be set on the standard `/tmp` partition, leading to `java.lang.UnsatisfiedLinkError` errors.\\n\" +\n+            \"Set this property to an alternative directory (e.g. `/var/tmp`) to resolve this.\\n\" +\n+            \"If unset, the value of the `java.io.tmpdir` System property will be used.\")\n         .configurationCategory(PROFILING_CATEGORY)\n         .dynamic(false)\n         .tags(\"added[1.18.0]\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3OTY3NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473779674", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"If unset, the value of the \\\"java.io.tmpdir\\\" System property will be used.\")\n          \n          \n            \n                        \"If unset, the value of the `java.io.tmpdir` system property will be used.\")", "author": "felixbarny", "createdAt": "2020-08-20T08:51:05Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -163,6 +163,19 @@\n         .tags(\"added[1.15.0]\", \"internal\")\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<String> profilerLibDirectory = ConfigurationOption.<String>stringOption()\n+        .key(\"profiling_inferred_spans_lib_directory\")\n+        .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n+            \"is exported to a temporary location and loaded by the JVM.\\n\" +\n+            \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n+            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n+            \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +\n+            \"If unset, the value of the \\\"java.io.tmpdir\\\" System property will be used.\")", "originalCommit": "546063cff6494164b8450808da1cf0d57c50ca03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1248deba0d5cea6f67319dd89f4b049ba0226199", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java\nindex 9b9267db2..9113344aa 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java\n\n@@ -168,9 +168,9 @@ public class ProfilingConfiguration extends ConfigurationOptionProvider {\n         .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n             \"is exported to a temporary location and loaded by the JVM.\\n\" +\n             \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n-            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n-            \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +\n-            \"If unset, the value of the \\\"java.io.tmpdir\\\" System property will be used.\")\n+            \"noexec may be set on the standard `/tmp` partition, leading to `java.lang.UnsatisfiedLinkError` errors.\\n\" +\n+            \"Set this property to an alternative directory (e.g. `/var/tmp`) to resolve this.\\n\" +\n+            \"If unset, the value of the `java.io.tmpdir` System property will be used.\")\n         .configurationCategory(PROFILING_CATEGORY)\n         .dynamic(false)\n         .tags(\"added[1.18.0]\")\n"}}, {"oid": "1248deba0d5cea6f67319dd89f4b049ba0226199", "url": "https://github.com/elastic/apm-agent-java/commit/1248deba0d5cea6f67319dd89f4b049ba0226199", "message": "Address PR feedback\n\n- Use backticks in documentation\n- Remvove ProfilingConfiguration dependency in AsyncProfiler getInstance() method\n- Add package-private reset method to reset AsyncProfiler singleton\n- Use JUnit @TempDir to simplify temp directory creation in unit test", "committedDate": "2020-08-20T11:59:05Z", "type": "commit"}, {"oid": "774a07eb48158673555fbfea049625850ebccf5d", "url": "https://github.com/elastic/apm-agent-java/commit/774a07eb48158673555fbfea049625850ebccf5d", "message": "Lowercase System to system in documentation", "committedDate": "2020-08-20T12:45:48Z", "type": "commit"}, {"oid": "044aa644690c1958523d82cf951915044e0bc1c1", "url": "https://github.com/elastic/apm-agent-java/commit/044aa644690c1958523d82cf951915044e0bc1c1", "message": "Add backticks to CHANGELOG", "committedDate": "2020-08-20T12:52:53Z", "type": "commit"}]}