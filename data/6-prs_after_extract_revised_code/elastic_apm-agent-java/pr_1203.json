{"pr_number": 1203, "pr_title": "Jul deadlock workaround", "pr_createdAt": "2020-05-26T13:59:12Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1203", "timeline": [{"oid": "bf49abfd93793bd60e5d60a8c62e4d887dbc976d", "url": "https://github.com/elastic/apm-agent-java/commit/bf49abfd93793bd60e5d60a8c62e4d887dbc976d", "message": "Allow non-integer port to support Ingres/Actian", "committedDate": "2020-05-24T09:49:40Z", "type": "commit"}, {"oid": "6d02eecb82a9285cf05f3840d1457e78fb82e051", "url": "https://github.com/elastic/apm-agent-java/commit/6d02eecb82a9285cf05f3840d1457e78fb82e051", "message": "Test with numeric port", "committedDate": "2020-05-24T09:54:42Z", "type": "commit"}, {"oid": "43c35c71b154fc35abf5a1ff832fec14abad2a79", "url": "https://github.com/elastic/apm-agent-java/commit/43c35c71b154fc35abf5a1ff832fec14abad2a79", "message": "Make generic and add to chengelog", "committedDate": "2020-05-24T10:31:34Z", "type": "commit"}, {"oid": "55ed16f705f6c8ef6250cbd5e5bf77d163c2596f", "url": "https://github.com/elastic/apm-agent-java/commit/55ed16f705f6c8ef6250cbd5e5bf77d163c2596f", "message": "Merge remote-tracking branch 'upstream/master' into ingres-jdbc-port-parsing", "committedDate": "2020-05-26T05:10:59Z", "type": "commit"}, {"oid": "86bf6c6b072c7d38c8fe46a59027b9c351d41dc5", "url": "https://github.com/elastic/apm-agent-java/commit/86bf6c6b072c7d38c8fe46a59027b9c351d41dc5", "message": "Accept CHANGELOG suggestion", "committedDate": "2020-05-26T05:11:40Z", "type": "commit"}, {"oid": "9e72ae8e79fd3b2851dbc301cdd6148919082639", "url": "https://github.com/elastic/apm-agent-java/commit/9e72ae8e79fd3b2851dbc301cdd6148919082639", "message": "Alternative workaround for the JULI deadlock", "committedDate": "2020-05-26T13:54:04Z", "type": "commit"}, {"oid": "90929f5138a09ce376d7cf5b1cc3eb8ec45c4282", "url": "https://github.com/elastic/apm-agent-java/commit/90929f5138a09ce376d7cf5b1cc3eb8ec45c4282", "message": "Merge remote-tracking branch 'upstream/master' into jul-deadlock-workaround", "committedDate": "2020-05-26T13:59:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0MzY5NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1203#discussion_r430443695", "bodyText": "I'm pretty sure that this will fail the JBoss integration tests. JBoss needs to be able to set the java.util.logging.manager system property to override the default LogManager.\nSee also\n\n  \n    \n      apm-agent-java/apm-agent-plugins/apm-jmx-plugin/src/main/java/co/elastic/apm/agent/jmx/JmxMetricTracker.java\n    \n    \n        Lines 96 to 144\n      in\n      96b7d60\n    \n    \n    \n    \n\n        \n          \n           private synchronized void tryInit() { \n        \n\n        \n          \n               if (this.server != null || this.logManagerPropertyPoller != null) { \n        \n\n        \n          \n                   return; \n        \n\n        \n          \n               } \n        \n\n        \n          \n               // Avoid creating the platform MBean server, only get it if already initialized \n        \n\n        \n          \n               // otherwise WildFly fails to start with a IllegalStateException: \n        \n\n        \n          \n               // WFLYLOG0078: The logging subsystem requires the log manager to be org.jboss.logmanager.LogManager \n        \n\n        \n          \n               if (setsCustomLogManager()) { \n        \n\n        \n          \n                   if (!MBeanServerFactory.findMBeanServer(null).isEmpty()) { \n        \n\n        \n          \n                       // platform MBean server is already initialized \n        \n\n        \n          \n                       init(MBeanServerFactory.findMBeanServer(null).get(0)); \n        \n\n        \n          \n                   } else { \n        \n\n        \n          \n                       deferInit(); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } else { \n        \n\n        \n          \n                   init(ManagementFactory.getPlatformMBeanServer()); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           private void deferInit() { \n        \n\n        \n          \n               logger.debug(\"Deferring initialization of JMX metric tracking until log manager is initialized\"); \n        \n\n        \n          \n               Thread thread = new Thread(new Runnable() { \n        \n\n        \n          \n            \n        \n\n        \n          \n                   private final long timeout = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(5); \n        \n\n        \n          \n            \n        \n\n        \n          \n                   @Override \n        \n\n        \n          \n                   public void run() { \n        \n\n        \n          \n                       while (!Thread.currentThread().isInterrupted() || timeout <= System.currentTimeMillis()) { \n        \n\n        \n          \n                           if (System.getProperty(\"java.util.logging.manager\") != null || !MBeanServerFactory.findMBeanServer(null).isEmpty()) { \n        \n\n        \n          \n                               init(ManagementFactory.getPlatformMBeanServer()); \n        \n\n        \n          \n                               return; \n        \n\n        \n          \n                           } \n        \n\n        \n          \n                           try { \n        \n\n        \n          \n                               Thread.sleep(500); \n        \n\n        \n          \n                           } catch (InterruptedException e) { \n        \n\n        \n          \n                               Thread.currentThread().interrupt(); \n        \n\n        \n          \n                           } \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               }); \n        \n\n        \n          \n               thread.setName(\"elastic-apm-jmx-init\"); \n        \n\n        \n          \n               thread.setDaemon(true); \n        \n\n        \n          \n               thread.start(); \n        \n\n        \n          \n               logManagerPropertyPoller = thread; \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           private boolean setsCustomLogManager() { \n        \n\n        \n          \n               return ClassLoader.getSystemClassLoader().getResource(\"org/jboss/modules/Main.class\") != null; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nI assume because the health check runs in a background thread, JBoss has enough time to init the log manager. Maybe we can make the above more code more generic and fire the start lifecycle event only after java.util.logging.manager has been set if running on JBoss and fire immediately otherwise.", "author": "felixbarny", "createdAt": "2020-05-26T14:12:17Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracerBuilder.java", "diffHunk": "@@ -153,6 +155,21 @@ public ElasticApmTracer build() {\n         return tracer;\n     }\n \n+    /**\n+     * A noop method aimed for working around the JULI deadlock reported at https://github.com/elastic/apm-agent-java/issues/954.\n+     * The main thread creates an {@link ApmServerClient} and then starts the Tracer, which start the {@link LifecycleListener}s.\n+     * One of the listeners is the JMX metric tracker, that initializes the JUL mechanism. Concurrently, another thread is\n+     * doing healthcheck with the APM server (kicked from the {@link ApmServerClient}), and this may cause a deadlock.\n+     * Calling this method before both, should prevent this deadlock.\n+     */\n+    private void initializeJavaUtilLogging() {\n+        try {\n+            java.util.logging.Logger.getLogger(\"noop\");", "originalCommit": "90929f5138a09ce376d7cf5b1cc3eb8ec45c4282", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5MDkwNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1203#discussion_r430490905", "bodyText": "That's odd, the fact that it does get into this deadlock means that the server healthcheck is done quickly enough. But we can\n\nmake the above more code more generic and fire the start lifecycle event only after java.util.logging.manager has been set if running on JBoss and fire immediately otherwise\n\nto be on the safe side.", "author": "eyalkoren", "createdAt": "2020-05-26T15:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0MzY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3NDU4NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1203#discussion_r430874585", "bodyText": "OK, there are a lot of hidden subtleties that produce misleading behaviours here.\n\nWhy didn't we see this before with the healthcheck? This is the relevant thread stack taken from the deadlock thread dump:\n\n\"apm-server-healthcheck\":\n        at java.util.logging.LogManager.ensureLogManagerInitialized(LogManager.java:317)\n        - waiting to lock <0x0000000755bb5ef0> (a org.apache.juli.ClassLoaderLogManager)\n        at java.util.logging.LogManager.getLogManager(LogManager.java:378)\n        at java.util.logging.Logger.getPlatformLogger(Logger.java:572)\n        at java.util.logging.LoggingProxyImpl.getLogger(LoggingProxyImpl.java:41)\n        at sun.util.logging.LoggingSupport.getLogger(LoggingSupport.java:100)\n        at sun.util.logging.PlatformLogger$JavaLoggerProxy.<init>(PlatformLogger.java:602)\n        at sun.util.logging.PlatformLogger$JavaLoggerProxy.<init>(PlatformLogger.java:597)\n        at sun.util.logging.PlatformLogger.<init>(PlatformLogger.java:239)\n        at sun.util.logging.PlatformLogger.getLogger(PlatformLogger.java:198)\n        - locked <0x0000000756becbe0> (a java.lang.Class for sun.util.logging.PlatformLogger)\n        at sun.net.www.protocol.http.HttpURLConnection.<clinit>(HttpURLConnection.java:431)\n        at sun.net.www.protocol.http.Handler.openConnection(Handler.java:62)\n        at sun.net.www.protocol.http.Handler.openConnection(Handler.java:57)\n        at java.net.URL.openConnection(URL.java:979)\n        at co.elastic.apm.agent.report.ApmServerClient.startRequestToUrl(ApmServerClient.java:125)\n        at co.elastic.apm.agent.report.ApmServerClient.executeForAllUrls(ApmServerClient.java:236)\n        at co.elastic.apm.agent.report.ApmServerHealthChecker.call(ApmServerHealthChecker.java:69)\n        at co.elastic.apm.agent.report.ApmServerHealthChecker.call(ApmServerHealthChecker.java:47)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n        at java.lang.Thread.run(Thread.java:748)\n\nThe sun.net.www.protocol.http.HttpURLConnection static initializer calls sun.util.logging.PlatformLogger.getLogger() explicitly, which in turn creates a new PlatformLogger instance. This constructor uses the JavaLoggerProxy (resulting in the rest of the stack above) only if some java.util.logging.config system properties were previously set (see what I needed to do in my code snippet above in order to be able to reproduce the deadlock). If such are not set, it will instantiate a PlatformLogger.DefaultLoggerProxy instead, which will not continue with the JUL initialization chain, thus not interfering with WildFly's Log Manager obsession.\n2. So why don't the WildFly/JBoss integration tests fail when calling Logger.getLogger explicitly? Because of shading! The call I added is replaced with co.elastic.apm.agent.logging.JulBridgeLogger.getLogger \ud83e\udd26\nGoing back to the drawing board...", "author": "eyalkoren", "createdAt": "2020-05-27T06:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0MzY5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d33e48503025039be95fc8d21ef48d55f240aed4", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracerBuilder.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracerBuilder.java\nindex 003631c2b..ab8176c42 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracerBuilder.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracerBuilder.java\n\n@@ -155,21 +153,6 @@ public class ElasticApmTracerBuilder {\n         return tracer;\n     }\n \n-    /**\n-     * A noop method aimed for working around the JULI deadlock reported at https://github.com/elastic/apm-agent-java/issues/954.\n-     * The main thread creates an {@link ApmServerClient} and then starts the Tracer, which start the {@link LifecycleListener}s.\n-     * One of the listeners is the JMX metric tracker, that initializes the JUL mechanism. Concurrently, another thread is\n-     * doing healthcheck with the APM server (kicked from the {@link ApmServerClient}), and this may cause a deadlock.\n-     * Calling this method before both, should prevent this deadlock.\n-     */\n-    private void initializeJavaUtilLogging() {\n-        try {\n-            java.util.logging.Logger.getLogger(\"noop\");\n-        } catch (Throwable th) {\n-            logger.info(\"Failed to initialized the Java Util Logging mechanism\", th);\n-        }\n-    }\n-\n     private LifecycleListener scheduleReloadAtRate(final ConfigurationRegistry configurationRegistry, final int rate, TimeUnit seconds) {\n         final ScheduledThreadPoolExecutor configurationReloader = ExecutorUtils.createSingleThreadSchedulingDeamonPool(\"configuration-reloader\");\n         configurationReloader.scheduleAtFixedRate(new Runnable() {\n"}}, {"oid": "71010a8fc91677a020a94b0012523bb032b18066", "url": "https://github.com/elastic/apm-agent-java/commit/71010a8fc91677a020a94b0012523bb032b18066", "message": "Synchronizing health check and MBeanServer lookup", "committedDate": "2020-05-27T08:46:41Z", "type": "commit"}, {"oid": "d33e48503025039be95fc8d21ef48d55f240aed4", "url": "https://github.com/elastic/apm-agent-java/commit/d33e48503025039be95fc8d21ef48d55f240aed4", "message": "Removing Logging initialization", "committedDate": "2020-05-27T08:51:41Z", "type": "commit"}, {"oid": "5013af0cd9706c62556778949ef29efda75e93e7", "url": "https://github.com/elastic/apm-agent-java/commit/5013af0cd9706c62556778949ef29efda75e93e7", "message": "Merge remote-tracking branch 'upstream/master' into jul-deadlock-workaround", "committedDate": "2020-05-31T08:11:53Z", "type": "commit"}, {"oid": "525592f46e420b189f50fc01e1a359ada1b2e4c9", "url": "https://github.com/elastic/apm-agent-java/commit/525592f46e420b189f50fc01e1a359ada1b2e4c9", "message": "Add to changelog", "committedDate": "2020-05-31T08:16:28Z", "type": "commit"}]}