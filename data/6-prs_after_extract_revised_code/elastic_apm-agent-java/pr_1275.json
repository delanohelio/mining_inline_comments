{"pr_number": 1275, "pr_title": "Validate that tests don't leaks tracers, scopes and pooled objects", "pr_createdAt": "2020-07-08T08:12:46Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1275", "timeline": [{"oid": "881bb149b23c39e31c00b48ed60d6991a2cad441", "url": "https://github.com/elastic/apm-agent-java/commit/881bb149b23c39e31c00b48ed60d6991a2cad441", "message": "Make sure tracers don't leak tests\n\nValidate recycling and scope leaks after each test method\nFixes scope leak in Executor#submitAll instrumentation", "committedDate": "2020-07-08T08:55:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0OTc4Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1275#discussion_r451549786", "bodyText": "why?", "author": "eyalkoren", "createdAt": "2020-07-08T13:36:57Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java", "diffHunk": "@@ -143,7 +143,7 @@ public boolean hasContent() {\n     @Override\n     public void resetState() {\n         address.setLength(0);\n-        port = -1;\n+        port = 0;", "originalCommit": "881bb149b23c39e31c00b48ed60d6991a2cad441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMDcxMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1275#discussion_r451600711", "bodyText": "It made a test fail. In general, when calling resetState, the instance should be in the same state as if it had just been instantiated. The field is initialized with the default value of 0.", "author": "felixbarny", "createdAt": "2020-07-08T14:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0OTc4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTkzNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1275#discussion_r451569935", "bodyText": "Test is failing. Maybe revert to happen before the assertion and wait 20ms before asserting.", "author": "eyalkoren", "createdAt": "2020-07-08T14:03:39Z", "path": "apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java", "diffHunk": "@@ -56,14 +55,13 @@ void testTimerTask_scheduleWithFixedRate() throws InterruptedException {\n \n     @Test\n     void testTimerTask_scheduleWithFixedDelay() throws InterruptedException {\n-        reporter.reset();\n         TestTimerTask timerTask = new TestTimerTask();\n         Timer timer = new Timer(\"Timer\");\n         timer.schedule(timerTask, 1L, 10L);\n \n         reporter.awaitUntilAsserted(1000L, () -> {\n-            timer.cancel();\n             assertThat(reporter.getTransactions()).isNotEmpty();\n+            timer.cancel();", "originalCommit": "881bb149b23c39e31c00b48ed60d6991a2cad441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNzM3MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1275#discussion_r451617370", "bodyText": "I rewrote the test a little. It should be much more deterministic and resilient now.", "author": "felixbarny", "createdAt": "2020-07-08T15:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2OTkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8968f9bf80425798b5cd32f2ca96669a874d9dfd", "chunk": "diff --git a/apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java b/apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java\nindex 496882f8c..c6ae61c1c 100644\n--- a/apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java\n+++ b/apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java\n\n@@ -38,82 +40,68 @@ public class TimerTaskInstrumentationTest extends AbstractInstrumentationTest {\n \n     @Test\n     void testTimerTask_scheduleWithFixedRate() throws InterruptedException {\n-        TestTimerTask timerTask = new TestTimerTask();\n-        Timer timer = new Timer(true);\n-        timer.scheduleAtFixedRate(timerTask, 0, 10L);\n-\n-        reporter.awaitUntilAsserted(1000L, () -> {\n-            timer.cancel();\n-            assertThat(reporter.getTransactions()).isNotEmpty();\n-        });\n-\n-        assertThat(reporter.getTransactions().size()).isEqualTo(timerTask.getInvocationCount());\n-        Transaction firstTransaction = reporter.getTransactions().get(0);\n-        assertThat(firstTransaction.getNameAsString()).isEqualTo(\"TestTimerTask#run\");\n-        assertThat(firstTransaction.getFrameworkName()).isEqualTo(\"TimerTask\");\n+        new Timer(true)\n+            .scheduleAtFixedRate(new TestTimerTask(2), 1, 1);\n+\n+        reporter.awaitTransactionCount(2);\n+\n+        assertThat(reporter.getTransactions()\n+            .stream()\n+            .map(AbstractSpan::getNameAsString))\n+            .containsExactly(\"TestTimerTask#run\", \"TestTimerTask#run\");\n+        assertThat(reporter.getTransactions()\n+            .stream()\n+            .map(Transaction::getFrameworkName))\n+            .containsExactly(\"TimerTask\", \"TimerTask\");\n     }\n \n     @Test\n     void testTimerTask_scheduleWithFixedDelay() throws InterruptedException {\n-        TestTimerTask timerTask = new TestTimerTask();\n-        Timer timer = new Timer(\"Timer\");\n-        timer.schedule(timerTask, 1L, 10L);\n+        new Timer(\"Timer\")\n+            .schedule(new TestTimerTask(2), 1, 1);\n \n-        reporter.awaitUntilAsserted(1000L, () -> {\n-            assertThat(reporter.getTransactions()).isNotEmpty();\n-            timer.cancel();\n-        });\n+        reporter.awaitTransactionCount(2);\n \n-        assertThat(reporter.getTransactions().size()).isEqualTo(timerTask.getInvocationCount());\n-        assertThat(reporter.getTransactions().get(0).getNameAsString()).isEqualTo(\"TestTimerTask#run\");\n+        assertThat(reporter.getTransactions()\n+            .stream()\n+            .map(AbstractSpan::getNameAsString))\n+            .containsExactly(\"TestTimerTask#run\", \"TestTimerTask#run\");\n     }\n \n     @Test\n     void testTimerTask_scheduleOnce() throws InterruptedException {\n-        TestTimerTask timerTask = new TestTimerTask();\n-        Timer timer = new Timer(\"Timer\");\n-        long delay = 50L;\n-        timer.schedule(timerTask, delay);\n-\n-        reporter.awaitUntilAsserted(1000L, () -> {\n-            assertThat(reporter.getTransactions()).isNotEmpty();\n-        });\n+        new Timer(\"Timer\")\n+            .schedule(new TestTimerTask(1), 1);\n \n-        assertThat(reporter.getTransactions().size()).isEqualTo(1);\n+        reporter.awaitTransactionCount(1);\n         assertThat(reporter.getTransactions().get(0).getNameAsString()).isEqualTo(\"TestTimerTask#run\");\n     }\n \n     @Test\n     void testTimerTask_withAnonymousClass() throws InterruptedException {\n-        AtomicInteger count = new AtomicInteger(0);\n-\n-        TimerTask repeatedTask = new TimerTask() {\n+        new Timer(\"Timer\")\n+            .schedule(new TimerTask() {\n             public void run() {\n-                count.incrementAndGet();\n+                cancel();\n             }\n-        };\n-        Timer timer = new Timer(\"Timer\");\n-        long delay = 50L;\n-        timer.schedule(repeatedTask, delay);\n+        }, 1);\n \n-        reporter.awaitUntilAsserted(1000L, () -> {\n-            assertThat(reporter.getTransactions()).isNotEmpty();\n-        });\n-\n-        assertThat(reporter.getTransactions().size()).isEqualTo(1);\n+        reporter.awaitTransactionCount(1);\n         assertThat(reporter.getTransactions().get(0).getNameAsString()).isEqualTo(\"1#run\");\n     }\n \n     public static class TestTimerTask extends TimerTask {\n-        private AtomicInteger count = new AtomicInteger(0);\n+        private final AtomicInteger credits;\n \n-        @Override\n-        public void run() {\n-            this.count.incrementAndGet();\n+        public TestTimerTask(int maxInvocations) {\n+            credits = new AtomicInteger(maxInvocations);\n         }\n \n-        public int getInvocationCount() {\n-            return this.count.get();\n+        @Override\n+        public void run() {\n+            if (credits.decrementAndGet() == 0) {\n+                cancel();\n+            }\n         }\n     }\n }\n"}}, {"oid": "8968f9bf80425798b5cd32f2ca96669a874d9dfd", "url": "https://github.com/elastic/apm-agent-java/commit/8968f9bf80425798b5cd32f2ca96669a874d9dfd", "message": "Make TimerTaskInstrumentationTest more resilient", "committedDate": "2020-07-08T15:05:43Z", "type": "forcePushed"}, {"oid": "2035ed75094e05851d957a8ee07a881ea104e618", "url": "https://github.com/elastic/apm-agent-java/commit/2035ed75094e05851d957a8ee07a881ea104e618", "message": "Make sure tracers don't leak tests\n\nValidate recycling and scope leaks after each test method\nFixes scope leak in Executor#submitAll instrumentation", "committedDate": "2020-07-23T08:04:28Z", "type": "commit"}, {"oid": "5842ad6a3d1fcdbc30d53f9619c5cf377a4efeb0", "url": "https://github.com/elastic/apm-agent-java/commit/5842ad6a3d1fcdbc30d53f9619c5cf377a4efeb0", "message": "Make TimerTaskInstrumentationTest more resilient", "committedDate": "2020-07-23T08:13:10Z", "type": "commit"}, {"oid": "5842ad6a3d1fcdbc30d53f9619c5cf377a4efeb0", "url": "https://github.com/elastic/apm-agent-java/commit/5842ad6a3d1fcdbc30d53f9619c5cf377a4efeb0", "message": "Make TimerTaskInstrumentationTest more resilient", "committedDate": "2020-07-23T08:13:10Z", "type": "forcePushed"}]}