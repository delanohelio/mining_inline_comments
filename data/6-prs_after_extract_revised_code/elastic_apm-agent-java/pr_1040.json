{"pr_number": 1040, "pr_title": "Adding pause/resume functionality to reduce agent overhead on stress", "pr_createdAt": "2020-02-16T16:35:38Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1040", "timeline": [{"oid": "594450635696606dcb86b722ba46f5f57db83c59", "url": "https://github.com/elastic/apm-agent-java/commit/594450635696606dcb86b722ba46f5f57db83c59", "message": "Adding circuit breaker infrastructure", "committedDate": "2020-02-16T16:13:49Z", "type": "commit"}, {"oid": "d1b256d146d454cd277af215c8dec2bcfd0ca2df", "url": "https://github.com/elastic/apm-agent-java/commit/d1b256d146d454cd277af215c8dec2bcfd0ca2df", "message": "Resuming only if ALL monitors indicate we should", "committedDate": "2020-02-16T16:48:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MTg1Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r380061853", "bodyText": "Change to a simple volatile (benchmark to test)", "author": "eyalkoren", "createdAt": "2020-02-17T09:17:36Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -555,11 +561,57 @@ public void registerSpanListener(ActivationListener activationListener) {\n         return activationListeners;\n     }\n \n-    void registerLifecycleListeners(List<LifecycleListener> lifecycleListeners) {\n+    synchronized void start(List<LifecycleListener> lifecycleListeners) {\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n             lifecycleListener.start(this);\n         }\n+        setState(TracerState.RUNNING);\n+    }\n+\n+    public synchronized void pause() {\n+        if (state != TracerState.RUNNING) {\n+            logger.warn(\"Attempting to pause the agent when it is already in a {} state\", state);\n+            return;\n+        }\n+        setState(TracerState.PAUSED);\n+        for (LifecycleListener lifecycleListener : lifecycleListeners) {\n+            try {\n+                lifecycleListener.pause();\n+            } catch (Exception e) {\n+                logger.warn(\"Suppressed exception while calling pause()\", e);\n+            }\n+        }\n+    }\n+\n+    public synchronized void resume() {\n+        if (state != TracerState.PAUSED) {\n+            logger.warn(\"Attempting to resume the agent when it is in a {} state\", state);\n+            return;\n+        }\n+        for (LifecycleListener lifecycleListener : lifecycleListeners) {\n+            try {\n+                lifecycleListener.resume();\n+            } catch (Exception e) {\n+                logger.warn(\"Suppressed exception while calling resume()\", e);\n+            }\n+        }\n+        setState(TracerState.RUNNING);\n+    }\n+\n+    public boolean isRunning() {\n+        return state == TracerState.RUNNING;\n+    }\n+\n+    public TracerState getState() {\n+        return state;\n+    }\n+\n+    private synchronized TracerState setState(TracerState newState) {\n+        state = newState;", "originalCommit": "d1b256d146d454cd277af215c8dec2bcfd0ca2df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "624cfdc9c6d3b1bd685f302a6dbb72b32b9627d4", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\nindex 847f7897c..20e9d6929 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n\n@@ -566,15 +564,15 @@ public class ElasticApmTracer {\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n             lifecycleListener.start(this);\n         }\n-        setState(TracerState.RUNNING);\n+        tracerState = TracerState.RUNNING;\n     }\n \n     public synchronized void pause() {\n-        if (state != TracerState.RUNNING) {\n-            logger.warn(\"Attempting to pause the agent when it is already in a {} state\", state);\n+        if (tracerState != TracerState.RUNNING) {\n+            logger.warn(\"Attempting to pause the agent when it is already in a {} state\", tracerState);\n             return;\n         }\n-        setState(TracerState.PAUSED);\n+        tracerState = TracerState.PAUSED;\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n             try {\n                 lifecycleListener.pause();\n"}}, {"oid": "624cfdc9c6d3b1bd685f302a6dbb72b32b9627d4", "url": "https://github.com/elastic/apm-agent-java/commit/624cfdc9c6d3b1bd685f302a6dbb72b32b9627d4", "message": "Basic tests and concurrency issues", "committedDate": "2020-02-17T11:53:07Z", "type": "commit"}, {"oid": "ce7151155b94942a437f9a9dfa020d0cf32f4813", "url": "https://github.com/elastic/apm-agent-java/commit/ce7151155b94942a437f9a9dfa020d0cf32f4813", "message": "Test with independent tracer", "committedDate": "2020-02-18T06:50:02Z", "type": "commit"}, {"oid": "14559658f3cb8fc777e0bfdb842aef67bbf2df29", "url": "https://github.com/elastic/apm-agent-java/commit/14559658f3cb8fc777e0bfdb842aef67bbf2df29", "message": "Consolidating active config with the CircuitBreaker", "committedDate": "2020-02-19T09:36:58Z", "type": "commit"}, {"oid": "d2526d3ff743a83d2614b84b9a2bc8cf147eee89", "url": "https://github.com/elastic/apm-agent-java/commit/d2526d3ff743a83d2614b84b9a2bc8cf147eee89", "message": "dosc indentation", "committedDate": "2020-02-19T09:58:39Z", "type": "commit"}, {"oid": "5b0f5d23210b4ef9381330636c8d44024444b3f4", "url": "https://github.com/elastic/apm-agent-java/commit/5b0f5d23210b4ef9381330636c8d44024444b3f4", "message": "Make poll interval non-dynamic", "committedDate": "2020-02-19T12:13:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNjEyMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r381336121", "bodyText": "The state should be reset after each test. If there's an exception in this methods, the state should not leak into other tests. Probably best to call tracer.resume() in co.elastic.apm.agent.AbstractInstrumentationTest#afterAll", "author": "felixbarny", "createdAt": "2020-02-19T14:44:54Z", "path": "apm-agent-plugins/apm-servlet-plugin/src/test/java/co/elastic/apm/agent/servlet/ApmFilterTest.java", "diffHunk": "@@ -79,9 +79,10 @@ void testEndsTransaction() throws IOException, ServletException {\n \n     @Test\n     void testDisabled() throws IOException, ServletException {\n-        when(tracer.getConfig(CoreConfiguration.class).isActive()).thenReturn(false);\n+        tracer.pause();\n         filterChain.doFilter(new MockHttpServletRequest(), new MockHttpServletResponse());\n         assertThat(reporter.getTransactions()).hasSize(0);\n+        tracer.resume();", "originalCommit": "5b0f5d23210b4ef9381330636c8d44024444b3f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4NTg4Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382985887", "bodyText": "Added to be done as part of @AfterEach (needs to be reset between tests)", "author": "eyalkoren", "createdAt": "2020-02-23T09:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNjEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "chunk": "diff --git a/apm-agent-plugins/apm-servlet-plugin/src/test/java/co/elastic/apm/agent/servlet/ApmFilterTest.java b/apm-agent-plugins/apm-servlet-plugin/src/test/java/co/elastic/apm/agent/servlet/ApmFilterTest.java\nindex c845cf408..29ac5fda7 100644\n--- a/apm-agent-plugins/apm-servlet-plugin/src/test/java/co/elastic/apm/agent/servlet/ApmFilterTest.java\n+++ b/apm-agent-plugins/apm-servlet-plugin/src/test/java/co/elastic/apm/agent/servlet/ApmFilterTest.java\n\n@@ -79,10 +80,10 @@ class ApmFilterTest extends AbstractInstrumentationTest {\n \n     @Test\n     void testDisabled() throws IOException, ServletException {\n-        tracer.pause();\n+        TracerInternalApiUtils.pauseTracer(tracer);\n         filterChain.doFilter(new MockHttpServletRequest(), new MockHttpServletResponse());\n         assertThat(reporter.getTransactions()).hasSize(0);\n-        tracer.resume();\n+        TracerInternalApiUtils.resumeTracer(tracer);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNzA1Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r381337057", "bodyText": "This is quite a low-level config option. Maybe make it internal?", "author": "felixbarny", "createdAt": "2020-02-19T14:46:17Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.configuration.converter.TimeDurationValueConverter;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+import org.stagemonitor.configuration.ConfigurationOptionProvider;\n+\n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isNotInRange;\n+\n+public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n+    public static final String CIRCUIT_BREAKER_CATEGORY = \"Circuit-Breaker\";\n+\n+    private final ConfigurationOption<Boolean> circuitBreakerEnabled = ConfigurationOption.booleanOption()\n+        .key(\"circuit_breaker_enabled\")\n+        .tags(\"added[1.14.0]\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .description(\"A boolean specifying whether the circuit breaker should be enabled or not. \\n\" +\n+            \"When enabled, the agent periodically polls stress monitors to detect system/process/JVM stress state. \\n\" +\n+            \"If ANY of the monitors detects a stress indication, the agent will become inactive, as if the \\n\" +\n+            \"<<config-active>> configuration option has been set to `false`, thus reducing resource consumption to a minimum. \\n\" +\n+            \"When inactive, the agent continues polling the same monitors in order to detect whether the stress state \\n\" +\n+            \"has been relieved. If ALL monitors approve that the system/process/JVM is not under stress anymore, the \\n\" +\n+            \"agent will resume and become fully functional.\")\n+        .dynamic(true)\n+        .buildWithDefault(false);\n+\n+    private final ConfigurationOption<TimeDuration> stressMonitoringInterval = TimeDurationValueConverter.durationOption(\"s\")\n+        .key(\"stress_monitoring_interval\")", "originalCommit": "5b0f5d23210b4ef9381330636c8d44024444b3f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3MzI2Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382973263", "bodyText": "The main reason I want to expose it is the CPU monitor I am about to add- I think it is a delicate monitor and I certainly don't want to make a decision to pause the agent because CPU usage was over some threshold for 5 seconds or so. I am thinking of adding a CPU-monitor-config option that we define how many consecutive measurements should be considered before making a decision. I think having both together makes sense.", "author": "eyalkoren", "createdAt": "2020-02-23T07:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNzA1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\nindex bf4cb43ee..1a5fc3231 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\n\n@@ -29,6 +29,7 @@ import co.elastic.apm.agent.configuration.converter.TimeDurationValueConverter;\n import org.stagemonitor.configuration.ConfigurationOption;\n import org.stagemonitor.configuration.ConfigurationOptionProvider;\n \n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isInRange;\n import static co.elastic.apm.agent.configuration.validation.RangeValidator.isNotInRange;\n \n public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzODI3Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r381338272", "bodyText": "I think we should enable the circuit breaker by default. If the stress monitors have config options, maybe we don't need this global switch?", "author": "felixbarny", "createdAt": "2020-02-19T14:48:12Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.configuration.converter.TimeDurationValueConverter;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+import org.stagemonitor.configuration.ConfigurationOptionProvider;\n+\n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isNotInRange;\n+\n+public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n+    public static final String CIRCUIT_BREAKER_CATEGORY = \"Circuit-Breaker\";\n+\n+    private final ConfigurationOption<Boolean> circuitBreakerEnabled = ConfigurationOption.booleanOption()\n+        .key(\"circuit_breaker_enabled\")\n+        .tags(\"added[1.14.0]\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .description(\"A boolean specifying whether the circuit breaker should be enabled or not. \\n\" +\n+            \"When enabled, the agent periodically polls stress monitors to detect system/process/JVM stress state. \\n\" +\n+            \"If ANY of the monitors detects a stress indication, the agent will become inactive, as if the \\n\" +\n+            \"<<config-active>> configuration option has been set to `false`, thus reducing resource consumption to a minimum. \\n\" +\n+            \"When inactive, the agent continues polling the same monitors in order to detect whether the stress state \\n\" +\n+            \"has been relieved. If ALL monitors approve that the system/process/JVM is not under stress anymore, the \\n\" +\n+            \"agent will resume and become fully functional.\")\n+        .dynamic(true)\n+        .buildWithDefault(false);", "originalCommit": "5b0f5d23210b4ef9381330636c8d44024444b3f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NjEyMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382046122", "bodyText": "+1 on keeping it active by default, if config options have \"disabled values\" that make equivalent behavior that will be one less parameter to document and to explain.", "author": "SylvainJuge", "createdAt": "2020-02-20T14:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzODI3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3MzgzOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382973839", "bodyText": "We are thinking of making it on by default in the near future, in which case, in order to turn it off, users will have to change multiple configurations if we do that.\nI am thinking about someone getting sporadic pauses with their agents because of some specific JVM or other environmental setups, being required to do that. Moreover, I made sure it is dynamic as well so users can turn off while it's running, without being required to figure out which monitor settings need to be changed.\nI already documented and explained, so in terms of our time, the additional work is to remove. Regarding configuration settings clutter- I generally think it is not a problem if they have good defaults, they are documented properly and easy to lookup.", "author": "eyalkoren", "createdAt": "2020-02-23T07:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzODI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\nindex bf4cb43ee..1a5fc3231 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\n\n@@ -29,6 +29,7 @@ import co.elastic.apm.agent.configuration.converter.TimeDurationValueConverter;\n import org.stagemonitor.configuration.ConfigurationOption;\n import org.stagemonitor.configuration.ConfigurationOptionProvider;\n \n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isInRange;\n import static co.elastic.apm.agent.configuration.validation.RangeValidator.isNotInRange;\n \n public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzOTk3OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r381339978", "bodyText": "Probably not for the first version but I think it makes sense to wait until the stress monitors didn't detect stress for n consecutive iterations. Otherwise, we might quickly switch between off and on.", "author": "felixbarny", "createdAt": "2020-02-19T14:50:37Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.context.AbstractLifecycleListener;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.util.ExecutorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CircuitBreaker extends AbstractLifecycleListener {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);\n+\n+    private final ThreadPoolExecutor threadPool;\n+    private final ElasticApmTracer tracer;\n+    private final CircuitBreakerConfiguration circuitBreakerConfiguration;\n+    private final long pollInterval;\n+\n+    private boolean isCurrentlyUnderStress = false;\n+\n+    private final List<StressMonitor> stressMonitors = new CopyOnWriteArrayList<>();\n+\n+    public CircuitBreaker(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        circuitBreakerConfiguration = tracer.getConfig(CircuitBreakerConfiguration.class);\n+        pollInterval = circuitBreakerConfiguration.getStressMonitoringPollingInterval();\n+        threadPool = ExecutorUtils.createSingleThreadDeamonPool(\"circuit-breaker\", 1);\n+    }\n+\n+    @Override\n+    public void start(ElasticApmTracer tracer) {\n+        // todo: fill stress monitors\n+\n+        threadPool.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                pollStressMonitors();\n+            }\n+        });\n+    }\n+\n+    private void pollStressMonitors() {\n+        while (!Thread.currentThread().isInterrupted()) {\n+            try {\n+                if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n+                    if (isCurrentlyUnderStress) {\n+                        boolean stressRelieved = true;\n+                        for (StressMonitor stressMonitor : stressMonitors) {\n+                            stressRelieved &= stressMonitor.isStressRelieved();\n+                        }\n+                        if (stressRelieved) {\n+                            isCurrentlyUnderStress = false;\n+                            tracer.stressRelieved();", "originalCommit": "5b0f5d23210b4ef9381330636c8d44024444b3f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3NDIxMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382974211", "bodyText": "The stress is considered relieved by looking on a separate threshold, so this should be addressed.\nStill, deciding that there is stress based on CPU usage will probably make more sense if based on n consecutive iterations...", "author": "eyalkoren", "createdAt": "2020-02-23T08:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzOTk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\nindex 9d2b73f60..7ef8dea2c 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n\n@@ -57,7 +57,8 @@ public class CircuitBreaker extends AbstractLifecycleListener {\n \n     @Override\n     public void start(ElasticApmTracer tracer) {\n-        // todo: fill stress monitors\n+        // failsafe loading of stress monitors in isolation\n+        loadGCStressMonitor(tracer);\n \n         threadPool.execute(new Runnable() {\n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MDc1OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r381340758", "bodyText": "Log which stress monitor has detected stress and what the current values are (for example CPU% or heap%)", "author": "felixbarny", "createdAt": "2020-02-19T14:51:47Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.context.AbstractLifecycleListener;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.util.ExecutorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CircuitBreaker extends AbstractLifecycleListener {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);\n+\n+    private final ThreadPoolExecutor threadPool;\n+    private final ElasticApmTracer tracer;\n+    private final CircuitBreakerConfiguration circuitBreakerConfiguration;\n+    private final long pollInterval;\n+\n+    private boolean isCurrentlyUnderStress = false;\n+\n+    private final List<StressMonitor> stressMonitors = new CopyOnWriteArrayList<>();\n+\n+    public CircuitBreaker(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        circuitBreakerConfiguration = tracer.getConfig(CircuitBreakerConfiguration.class);\n+        pollInterval = circuitBreakerConfiguration.getStressMonitoringPollingInterval();\n+        threadPool = ExecutorUtils.createSingleThreadDeamonPool(\"circuit-breaker\", 1);\n+    }\n+\n+    @Override\n+    public void start(ElasticApmTracer tracer) {\n+        // todo: fill stress monitors\n+\n+        threadPool.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                pollStressMonitors();\n+            }\n+        });\n+    }\n+\n+    private void pollStressMonitors() {\n+        while (!Thread.currentThread().isInterrupted()) {\n+            try {\n+                if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n+                    if (isCurrentlyUnderStress) {\n+                        boolean stressRelieved = true;\n+                        for (StressMonitor stressMonitor : stressMonitors) {\n+                            stressRelieved &= stressMonitor.isStressRelieved();\n+                        }\n+                        if (stressRelieved) {\n+                            isCurrentlyUnderStress = false;\n+                            tracer.stressRelieved();\n+                        }\n+                    } else {\n+                        for (StressMonitor stressMonitor : stressMonitors) {\n+                            if (stressMonitor.isUnderStress()) {\n+                                isCurrentlyUnderStress = true;\n+                                tracer.stressDetected();", "originalCommit": "5b0f5d23210b4ef9381330636c8d44024444b3f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4OTAxNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382989016", "bodyText": "I did it through the GC monitor, but now added it to the API so it can be done centrally here", "author": "eyalkoren", "createdAt": "2020-02-23T09:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MDc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\nindex 9d2b73f60..7ef8dea2c 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n\n@@ -57,7 +57,8 @@ public class CircuitBreaker extends AbstractLifecycleListener {\n \n     @Override\n     public void start(ElasticApmTracer tracer) {\n-        // todo: fill stress monitors\n+        // failsafe loading of stress monitors in isolation\n+        loadGCStressMonitor(tracer);\n \n         threadPool.execute(new Runnable() {\n             @Override\n"}}, {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "url": "https://github.com/elastic/apm-agent-java/commit/e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "message": "Adding GC Stress Monitor", "committedDate": "2020-02-20T09:28:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMDg4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382030881", "bodyText": "remove FQN", "author": "SylvainJuge", "createdAt": "2020-02-20T14:25:40Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/context/ClosableLifecycleListenerAdapter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.context;\n+\n+import java.io.Closeable;\n+\n+public class ClosableLifecycleListenerAdapter extends AbstractLifecycleListener {\n+\n+    private final Closeable closeable;\n+\n+    public static LifecycleListener of(Closeable closeable) {\n+        return new co.elastic.apm.agent.context.ClosableLifecycleListenerAdapter(closeable);", "originalCommit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fbad8ab22f38353a84fc5a082b362d30479bf2a", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/context/ClosableLifecycleListenerAdapter.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/context/ClosableLifecycleListenerAdapter.java\nindex 8713a233a..f6eebdb29 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/context/ClosableLifecycleListenerAdapter.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/context/ClosableLifecycleListenerAdapter.java\n\n@@ -31,7 +31,7 @@ public class ClosableLifecycleListenerAdapter extends AbstractLifecycleListener\n     private final Closeable closeable;\n \n     public static LifecycleListener of(Closeable closeable) {\n-        return new co.elastic.apm.agent.context.ClosableLifecycleListenerAdapter(closeable);\n+        return new ClosableLifecycleListenerAdapter(closeable);\n     }\n \n     private ClosableLifecycleListenerAdapter(Closeable closeable) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMjEwMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382032101", "bodyText": "maybe replace \"are caught and handled\" maybe \"should be caught and handled\", because we document how users should use this method.", "author": "SylvainJuge", "createdAt": "2020-02-20T14:27:32Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java", "diffHunk": "@@ -47,6 +47,34 @@\n      */\n     void start(ElasticApmTracer tracer);\n \n+    /**\n+     * Callback for when {@link ElasticApmTracer#pause()} has been called.\n+     * <p>\n+     * Typically, this method is used to reduce overhead on the application to a minimum. This can be done by cleaning\n+     * up resources like object pools, as well as by avoiding tracing-related overhead.\n+     * </p>\n+     * <p>\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.", "originalCommit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3NzY5OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382977699", "bodyText": "because we document how users should use this method.\n\nNot really... It's a listener interface so we document how users should implement this method. The tracer is using it in a single place. This is basically to encourage implementors to throw informative Exceptions.", "author": "eyalkoren", "createdAt": "2020-02-23T08:14:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMjEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fbad8ab22f38353a84fc5a082b362d30479bf2a", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\nindex 36068caf4..03b944a90 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\n\n@@ -68,10 +68,10 @@ public interface LifecycleListener {\n      * the agent to restore all tracing capabilities\n      * </p>\n      * <p>\n-     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further resume actions.\n      * </p>\n      *\n-     * @throws Exception When something goes wrong performing the cleanup.\n+     * @throws Exception When something goes wrong while attempting to resume.\n      */\n     void resume() throws Exception;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMjIxNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382032217", "bodyText": "same as above, + reword it so we don't mention any cleanup (as it's a resume operation).", "author": "SylvainJuge", "createdAt": "2020-02-20T14:27:43Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java", "diffHunk": "@@ -47,6 +47,34 @@\n      */\n     void start(ElasticApmTracer tracer);\n \n+    /**\n+     * Callback for when {@link ElasticApmTracer#pause()} has been called.\n+     * <p>\n+     * Typically, this method is used to reduce overhead on the application to a minimum. This can be done by cleaning\n+     * up resources like object pools, as well as by avoiding tracing-related overhead.\n+     * </p>\n+     * <p>\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.\n+     * </p>\n+     *\n+     * @throws Exception When something goes wrong performing the cleanup.\n+     */\n+    void pause() throws Exception;\n+\n+    /**\n+     * Callback for when {@link ElasticApmTracer#resume()} has been called.\n+     * <p>\n+     * Typically, used in order to revert the actions taken by the {@link LifecycleListener#pause()} method, allowing\n+     * the agent to restore all tracing capabilities\n+     * </p>\n+     * <p>\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.", "originalCommit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3Nzk4Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382977983", "bodyText": "Same as above, reworded the cleanup to match resume, thanks for noticing!", "author": "eyalkoren", "createdAt": "2020-02-23T08:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMjIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "9fbad8ab22f38353a84fc5a082b362d30479bf2a", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\nindex 36068caf4..03b944a90 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\n\n@@ -68,10 +68,10 @@ public interface LifecycleListener {\n      * the agent to restore all tracing capabilities\n      * </p>\n      * <p>\n-     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further resume actions.\n      * </p>\n      *\n-     * @throws Exception When something goes wrong performing the cleanup.\n+     * @throws Exception When something goes wrong while attempting to resume.\n      */\n     void resume() throws Exception;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMzE2MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382033160", "bodyText": "cleanup > resume", "author": "SylvainJuge", "createdAt": "2020-02-20T14:29:11Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java", "diffHunk": "@@ -47,6 +47,34 @@\n      */\n     void start(ElasticApmTracer tracer);\n \n+    /**\n+     * Callback for when {@link ElasticApmTracer#pause()} has been called.\n+     * <p>\n+     * Typically, this method is used to reduce overhead on the application to a minimum. This can be done by cleaning\n+     * up resources like object pools, as well as by avoiding tracing-related overhead.\n+     * </p>\n+     * <p>\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.\n+     * </p>\n+     *\n+     * @throws Exception When something goes wrong performing the cleanup.\n+     */\n+    void pause() throws Exception;\n+\n+    /**\n+     * Callback for when {@link ElasticApmTracer#resume()} has been called.\n+     * <p>\n+     * Typically, used in order to revert the actions taken by the {@link LifecycleListener#pause()} method, allowing\n+     * the agent to restore all tracing capabilities\n+     * </p>\n+     * <p>\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.\n+     * </p>\n+     *\n+     * @throws Exception When something goes wrong performing the cleanup.", "originalCommit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fbad8ab22f38353a84fc5a082b362d30479bf2a", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\nindex 36068caf4..03b944a90 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\n\n@@ -68,10 +68,10 @@ public interface LifecycleListener {\n      * the agent to restore all tracing capabilities\n      * </p>\n      * <p>\n-     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further resume actions.\n      * </p>\n      *\n-     * @throws Exception When something goes wrong performing the cleanup.\n+     * @throws Exception When something goes wrong while attempting to resume.\n      */\n     void resume() throws Exception;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzODA0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382038042", "bodyText": "maybe describe a bit what are agent states and the main transitions between them.", "author": "SylvainJuge", "createdAt": "2020-02-20T14:36:52Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -641,4 +751,10 @@ private String getServiceName(@Nullable ClassLoader initiatingClassLoader) {\n     public void resetServiceNameOverrides() {\n         serviceNameByClassLoader.clear();\n     }\n+\n+    public enum TracerState {\n+        STOPPED,", "originalCommit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fbad8ab22f38353a84fc5a082b362d30479bf2a", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\nindex 2314eee1e..ce113e4a0 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n\n@@ -752,9 +752,25 @@ public class ElasticApmTracer {\n         serviceNameByClassLoader.clear();\n     }\n \n+    /**\n+     * An enumeration used to represent the current tracer state.\n+     */\n     public enum TracerState {\n+        /**\n+         * Agent is in this state either before starting, or after being stopped.\n+         */\n         STOPPED,\n+\n+        /**\n+         * Indicates that the agent is currently fully functional - tracing, monitoring and sending data to the APM server\n+         */\n         RUNNING,\n+\n+        /**\n+         * The agent is mostly idle, consuming minimal resources, ready to quickly resume back to RUNNING. When the agent\n+         * is PAUSED, it is not tracing and not communicating with the APM server. However, classes are still instrumented\n+         * and threads are still alive.\n+         */\n         PAUSED\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0MjA3NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382042074", "bodyText": "this is a bit hard to read due to lots of conditionals & try/catch, maybe splitting in two smaller methods isStressRelieved and isUnderStress would make the intent a bit easier to grasp.", "author": "SylvainJuge", "createdAt": "2020-02-20T14:42:55Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.context.AbstractLifecycleListener;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.util.ExecutorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CircuitBreaker extends AbstractLifecycleListener {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);\n+\n+    private final ThreadPoolExecutor threadPool;\n+    private final ElasticApmTracer tracer;\n+    private final CircuitBreakerConfiguration circuitBreakerConfiguration;\n+    private final long pollInterval;\n+\n+    private boolean isCurrentlyUnderStress = false;\n+\n+    private final List<StressMonitor> stressMonitors = new CopyOnWriteArrayList<>();\n+\n+    public CircuitBreaker(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        circuitBreakerConfiguration = tracer.getConfig(CircuitBreakerConfiguration.class);\n+        pollInterval = circuitBreakerConfiguration.getStressMonitoringPollingInterval();\n+        threadPool = ExecutorUtils.createSingleThreadDeamonPool(\"circuit-breaker\", 1);\n+    }\n+\n+    @Override\n+    public void start(ElasticApmTracer tracer) {\n+        // failsafe loading of stress monitors in isolation\n+        loadGCStressMonitor(tracer);\n+\n+        threadPool.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                pollStressMonitors();\n+            }\n+        });\n+    }\n+\n+    private void loadGCStressMonitor(ElasticApmTracer tracer) {\n+        try {\n+            stressMonitors.add(new GCStressMonitor(tracer));\n+        } catch (Throwable throwable) {\n+            logger.error(\"Failed to load the GC stress monitor. Circuit breaker will not be triggered based on GC events.\", throwable);\n+        }\n+    }\n+\n+    private void pollStressMonitors() {\n+        while (!Thread.currentThread().isInterrupted()) {\n+            try {\n+                if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n+                    if (isCurrentlyUnderStress) {\n+                        boolean stressRelieved = true;\n+                        for (StressMonitor stressMonitor : stressMonitors) {", "originalCommit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fbad8ab22f38353a84fc5a082b362d30479bf2a", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\nindex 7ef8dea2c..908f567b7 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n\n@@ -81,36 +81,12 @@ public class CircuitBreaker extends AbstractLifecycleListener {\n             try {\n                 if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n                     if (isCurrentlyUnderStress) {\n-                        boolean stressRelieved = true;\n-                        for (StressMonitor stressMonitor : stressMonitors) {\n-                            try {\n-                                stressRelieved &= stressMonitor.isStressRelieved();\n-                            } catch (Exception e) {\n-                                if (logger.isDebugEnabled()) {\n-                                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n-                                }\n-                            }\n-                        }\n-                        if (stressRelieved) {\n-                            isCurrentlyUnderStress = false;\n-                            tracer.stressRelieved();\n-                        }\n+                        checkIfStressRelieved();\n                     } else {\n-                        for (StressMonitor stressMonitor : stressMonitors) {\n-                            try {\n-                                if (stressMonitor.isUnderStress()) {\n-                                    isCurrentlyUnderStress = true;\n-                                    tracer.stressDetected();\n-                                    break;\n-                                }\n-                            } catch (Exception e) {\n-                                if (logger.isDebugEnabled()) {\n-                                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n-                                }\n-                            }\n-                        }\n+                        checkIfUnderStress();\n                     }\n                 } else if (isCurrentlyUnderStress) {\n+                    // to support dynamic disablement under current stress\n                     isCurrentlyUnderStress = false;\n                     tracer.stressRelieved();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0MzUwMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382043502", "bodyText": "what kind of failures do we expect here ? shouldn't they be managed at monitor implementation level ?\nif there are missing JMX attributes for example, we should rather have a monitor that does never calls pause/resume than an exception thrown from constructor.", "author": "SylvainJuge", "createdAt": "2020-02-20T14:44:59Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.context.AbstractLifecycleListener;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.util.ExecutorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CircuitBreaker extends AbstractLifecycleListener {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);\n+\n+    private final ThreadPoolExecutor threadPool;\n+    private final ElasticApmTracer tracer;\n+    private final CircuitBreakerConfiguration circuitBreakerConfiguration;\n+    private final long pollInterval;\n+\n+    private boolean isCurrentlyUnderStress = false;\n+\n+    private final List<StressMonitor> stressMonitors = new CopyOnWriteArrayList<>();\n+\n+    public CircuitBreaker(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        circuitBreakerConfiguration = tracer.getConfig(CircuitBreakerConfiguration.class);\n+        pollInterval = circuitBreakerConfiguration.getStressMonitoringPollingInterval();\n+        threadPool = ExecutorUtils.createSingleThreadDeamonPool(\"circuit-breaker\", 1);\n+    }\n+\n+    @Override\n+    public void start(ElasticApmTracer tracer) {\n+        // failsafe loading of stress monitors in isolation\n+        loadGCStressMonitor(tracer);\n+\n+        threadPool.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                pollStressMonitors();\n+            }\n+        });\n+    }\n+\n+    private void loadGCStressMonitor(ElasticApmTracer tracer) {\n+        try {\n+            stressMonitors.add(new GCStressMonitor(tracer));\n+        } catch (Throwable throwable) {\n+            logger.error(\"Failed to load the GC stress monitor. Circuit breaker will not be triggered based on GC events.\", throwable);", "originalCommit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4NDc4Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382984787", "bodyText": "what kind of failures do we expect here ?\n\nNot expecting, just watching out from\n\nshouldn't they be managed at monitor implementation level ?\n\nYes, unless the class itself fails to load, eg because of missing dependencies. Since it is JMX, I was cautious even though we ended up using a generic API. I can see why it seems overly cautious, but if there's no reason to remove, let's leave it.\n\nif there are missing JMX attributes for example, we should rather have a monitor that does never calls pause/resume than an exception thrown from constructor.\n\nI thought more about failure to load the class, rather than an exception in the constructor. This guard is not about the concern of pausing/resuming, it is in order to make sure we do not fail to register the next monitor if this one cannot be loaded.", "author": "eyalkoren", "createdAt": "2020-02-23T08:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0MzUwMg=="}], "type": "inlineReview", "revised_code": {"commit": "9fbad8ab22f38353a84fc5a082b362d30479bf2a", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\nindex 7ef8dea2c..908f567b7 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n\n@@ -81,36 +81,12 @@ public class CircuitBreaker extends AbstractLifecycleListener {\n             try {\n                 if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n                     if (isCurrentlyUnderStress) {\n-                        boolean stressRelieved = true;\n-                        for (StressMonitor stressMonitor : stressMonitors) {\n-                            try {\n-                                stressRelieved &= stressMonitor.isStressRelieved();\n-                            } catch (Exception e) {\n-                                if (logger.isDebugEnabled()) {\n-                                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n-                                }\n-                            }\n-                        }\n-                        if (stressRelieved) {\n-                            isCurrentlyUnderStress = false;\n-                            tracer.stressRelieved();\n-                        }\n+                        checkIfStressRelieved();\n                     } else {\n-                        for (StressMonitor stressMonitor : stressMonitors) {\n-                            try {\n-                                if (stressMonitor.isUnderStress()) {\n-                                    isCurrentlyUnderStress = true;\n-                                    tracer.stressDetected();\n-                                    break;\n-                                }\n-                            } catch (Exception e) {\n-                                if (logger.isDebugEnabled()) {\n-                                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n-                                }\n-                            }\n-                        }\n+                        checkIfUnderStress();\n                     }\n                 } else if (isCurrentlyUnderStress) {\n+                    // to support dynamic disablement under current stress\n                     isCurrentlyUnderStress = false;\n                     tracer.stressRelieved();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NDMzNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382044334", "bodyText": "this catch block should never be called, because all potential exceptions from stress monitor are already caught.", "author": "SylvainJuge", "createdAt": "2020-02-20T14:46:18Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.context.AbstractLifecycleListener;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.util.ExecutorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CircuitBreaker extends AbstractLifecycleListener {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);\n+\n+    private final ThreadPoolExecutor threadPool;\n+    private final ElasticApmTracer tracer;\n+    private final CircuitBreakerConfiguration circuitBreakerConfiguration;\n+    private final long pollInterval;\n+\n+    private boolean isCurrentlyUnderStress = false;\n+\n+    private final List<StressMonitor> stressMonitors = new CopyOnWriteArrayList<>();\n+\n+    public CircuitBreaker(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        circuitBreakerConfiguration = tracer.getConfig(CircuitBreakerConfiguration.class);\n+        pollInterval = circuitBreakerConfiguration.getStressMonitoringPollingInterval();\n+        threadPool = ExecutorUtils.createSingleThreadDeamonPool(\"circuit-breaker\", 1);\n+    }\n+\n+    @Override\n+    public void start(ElasticApmTracer tracer) {\n+        // failsafe loading of stress monitors in isolation\n+        loadGCStressMonitor(tracer);\n+\n+        threadPool.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                pollStressMonitors();\n+            }\n+        });\n+    }\n+\n+    private void loadGCStressMonitor(ElasticApmTracer tracer) {\n+        try {\n+            stressMonitors.add(new GCStressMonitor(tracer));\n+        } catch (Throwable throwable) {\n+            logger.error(\"Failed to load the GC stress monitor. Circuit breaker will not be triggered based on GC events.\", throwable);\n+        }\n+    }\n+\n+    private void pollStressMonitors() {\n+        while (!Thread.currentThread().isInterrupted()) {\n+            try {\n+                if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n+                    if (isCurrentlyUnderStress) {\n+                        boolean stressRelieved = true;\n+                        for (StressMonitor stressMonitor : stressMonitors) {\n+                            try {\n+                                stressRelieved &= stressMonitor.isStressRelieved();\n+                            } catch (Exception e) {\n+                                if (logger.isDebugEnabled()) {\n+                                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n+                                }\n+                            }\n+                        }\n+                        if (stressRelieved) {\n+                            isCurrentlyUnderStress = false;\n+                            tracer.stressRelieved();\n+                        }\n+                    } else {\n+                        for (StressMonitor stressMonitor : stressMonitors) {\n+                            try {\n+                                if (stressMonitor.isUnderStress()) {\n+                                    isCurrentlyUnderStress = true;\n+                                    tracer.stressDetected();\n+                                    break;\n+                                }\n+                            } catch (Exception e) {\n+                                if (logger.isDebugEnabled()) {\n+                                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n+                                }\n+                            }\n+                        }\n+                    }\n+                } else if (isCurrentlyUnderStress) {\n+                    isCurrentlyUnderStress = false;\n+                    tracer.stressRelieved();\n+                }\n+            } catch (Throwable throwable) {\n+                logger.error(\"Error occurred during Circuit Breaker polling\", throwable);", "originalCommit": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4NTI3Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382985272", "bodyText": "All potential Exceptions but not Throwables.\nIf, by accident, we get an OutOfMemoryError in our monitor, this is probably the only agent functionality I want to keep alive \ud83d\ude42 .\nThis is the thread's main loop, it makes sense to not let the thread die from unnatural causes.", "author": "eyalkoren", "createdAt": "2020-02-23T09:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NDMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MDQ3Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r383140477", "bodyText": "Ok then probably makes sense to at least add a comment why we need to catch everything here.", "author": "SylvainJuge", "createdAt": "2020-02-24T08:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NDMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "9fbad8ab22f38353a84fc5a082b362d30479bf2a", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\nindex 7ef8dea2c..908f567b7 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n\n@@ -81,36 +81,12 @@ public class CircuitBreaker extends AbstractLifecycleListener {\n             try {\n                 if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n                     if (isCurrentlyUnderStress) {\n-                        boolean stressRelieved = true;\n-                        for (StressMonitor stressMonitor : stressMonitors) {\n-                            try {\n-                                stressRelieved &= stressMonitor.isStressRelieved();\n-                            } catch (Exception e) {\n-                                if (logger.isDebugEnabled()) {\n-                                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n-                                }\n-                            }\n-                        }\n-                        if (stressRelieved) {\n-                            isCurrentlyUnderStress = false;\n-                            tracer.stressRelieved();\n-                        }\n+                        checkIfStressRelieved();\n                     } else {\n-                        for (StressMonitor stressMonitor : stressMonitors) {\n-                            try {\n-                                if (stressMonitor.isUnderStress()) {\n-                                    isCurrentlyUnderStress = true;\n-                                    tracer.stressDetected();\n-                                    break;\n-                                }\n-                            } catch (Exception e) {\n-                                if (logger.isDebugEnabled()) {\n-                                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n-                                }\n-                            }\n-                        }\n+                        checkIfUnderStress();\n                     }\n                 } else if (isCurrentlyUnderStress) {\n+                    // to support dynamic disablement under current stress\n                     isCurrentlyUnderStress = false;\n                     tracer.stressRelieved();\n                 }\n"}}, {"oid": "9fbad8ab22f38353a84fc5a082b362d30479bf2a", "url": "https://github.com/elastic/apm-agent-java/commit/9fbad8ab22f38353a84fc5a082b362d30479bf2a", "message": "Applying review suggestions", "committedDate": "2020-02-23T10:36:29Z", "type": "commit"}, {"oid": "e2ac040d9159e10f807b6514d42bcacdea38434c", "url": "https://github.com/elastic/apm-agent-java/commit/e2ac040d9159e10f807b6514d42bcacdea38434c", "message": "Adding System CPU Stress Monitor", "committedDate": "2020-02-24T18:59:53Z", "type": "commit"}, {"oid": "0b69110e369abe279ee1b84c0219d0455f4bffb5", "url": "https://github.com/elastic/apm-agent-java/commit/0b69110e369abe279ee1b84c0219d0455f4bffb5", "message": "Make CPU stress monitor (and metrics) J9-compatible", "committedDate": "2020-02-25T09:31:20Z", "type": "commit"}, {"oid": "5629bc4aeb613594da6c9cc8b91413792d524649", "url": "https://github.com/elastic/apm-agent-java/commit/5629bc4aeb613594da6c9cc8b91413792d524649", "message": "Verify that trace_methods spans are not allocated when PAUSED", "committedDate": "2020-02-26T08:43:04Z", "type": "commit"}, {"oid": "9c30ac89107a6a967b7957523ae5771f51f9ed6a", "url": "https://github.com/elastic/apm-agent-java/commit/9c30ac89107a6a967b7957523ae5771f51f9ed6a", "message": "Merge remote-tracking branch 'upstream/master' into circuit-breaker", "committedDate": "2020-02-26T09:18:59Z", "type": "commit"}, {"oid": "0d2c4bbf5da2ebff9b492aac34e4abefdc4d83a8", "url": "https://github.com/elastic/apm-agent-java/commit/0d2c4bbf5da2ebff9b492aac34e4abefdc4d83a8", "message": "Async profiler half-merge", "committedDate": "2020-02-26T10:08:13Z", "type": "commit"}, {"oid": "23d228576d8ce5378cff877f0d7bcd739f2a071d", "url": "https://github.com/elastic/apm-agent-java/commit/23d228576d8ce5378cff877f0d7bcd739f2a071d", "message": "Returning null transactions when agent is PAUSED", "committedDate": "2020-02-27T06:39:53Z", "type": "commit"}, {"oid": "9388ee82c948a07209aee19fd80927e8daed41e3", "url": "https://github.com/elastic/apm-agent-java/commit/9388ee82c948a07209aee19fd80927e8daed41e3", "message": "Apply review suggestion", "committedDate": "2020-02-27T08:24:56Z", "type": "commit"}, {"oid": "c9f5621cdfb7b3e2e30f841d1a366e0e750661d9", "url": "https://github.com/elastic/apm-agent-java/commit/c9f5621cdfb7b3e2e30f841d1a366e0e750661d9", "message": "Small servlet advice optimization and verification of proper context propagation", "committedDate": "2020-02-27T12:40:38Z", "type": "commit"}, {"oid": "a3337663354a1be6bbf129b92160c1345a0fcd78", "url": "https://github.com/elastic/apm-agent-java/commit/a3337663354a1be6bbf129b92160c1345a0fcd78", "message": "Merge remote-tracking branch 'upstream/master' into circuit-breaker", "committedDate": "2020-02-27T12:48:32Z", "type": "commit"}, {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "url": "https://github.com/elastic/apm-agent-java/commit/a269e40752300de9951c7d61266dcf7c4de8c6c5", "message": "Enhance quartz job test", "committedDate": "2020-03-01T10:02:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyNjQ1Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386426457", "bodyText": "It seems a bit strange that a method named check* modifies state. Could we just return a boolean here and handle based on that in pollStressMonitors?\nif (isUnderStress()) {\n    isCurrentlyUnderStress = true;\n    tracer.stressDetected();\n}", "author": "felixbarny", "createdAt": "2020-03-02T14:32:37Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -108,6 +115,41 @@ private void pollStressMonitors() {\n         }\n     }\n \n+    private void checkIfUnderStress() {", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMjUxMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386822511", "bodyText": "Yes we can", "author": "eyalkoren", "createdAt": "2020-03-03T06:35:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyNjQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "82421b64b98f12e47e47c4f2dff4baaf088e1c52", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\nindex 3147f5336..a3c2f2116 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n\n@@ -115,14 +120,12 @@ public class CircuitBreaker extends AbstractLifecycleListener {\n         }\n     }\n \n-    private void checkIfUnderStress() {\n+    private boolean isUnderStress() {\n         for (StressMonitor stressMonitor : stressMonitors) {\n             try {\n                 if (stressMonitor.isUnderStress()) {\n                     logger.info(\"Stress detected by {}: {}\", stressMonitor.getClass().getName(), stressMonitor.getStressDetectionInfo());\n-                    isCurrentlyUnderStress = true;\n-                    tracer.stressDetected();\n-                    break;\n+                    return true;\n                 }\n             } catch (Exception e) {\n                 if (logger.isDebugEnabled()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyNzIxMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386427210", "bodyText": "Similar story: return boolean and extract this part to the caller.", "author": "felixbarny", "createdAt": "2020-03-02T14:33:54Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -108,6 +115,41 @@ private void pollStressMonitors() {\n         }\n     }\n \n+    private void checkIfUnderStress() {\n+        for (StressMonitor stressMonitor : stressMonitors) {\n+            try {\n+                if (stressMonitor.isUnderStress()) {\n+                    logger.info(\"Stress detected by {}: {}\", stressMonitor.getClass().getName(), stressMonitor.getStressDetectionInfo());\n+                    isCurrentlyUnderStress = true;\n+                    tracer.stressDetected();\n+                    break;\n+                }\n+            } catch (Exception e) {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void checkIfStressRelieved() {\n+        boolean stressRelieved = true;\n+        for (StressMonitor stressMonitor : stressMonitors) {\n+            try {\n+                stressRelieved &= stressMonitor.isStressRelieved();\n+            } catch (Exception e) {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n+                }\n+            }\n+        }\n+        if (stressRelieved) {\n+            logger.info(\"All registered stress monitors indicate that the stress has been relieved\");\n+            isCurrentlyUnderStress = false;\n+            tracer.stressRelieved();\n+        }", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82421b64b98f12e47e47c4f2dff4baaf088e1c52", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\nindex 3147f5336..a3c2f2116 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java\n\n@@ -115,14 +120,12 @@ public class CircuitBreaker extends AbstractLifecycleListener {\n         }\n     }\n \n-    private void checkIfUnderStress() {\n+    private boolean isUnderStress() {\n         for (StressMonitor stressMonitor : stressMonitors) {\n             try {\n                 if (stressMonitor.isUnderStress()) {\n                     logger.info(\"Stress detected by {}: {}\", stressMonitor.getClass().getName(), stressMonitor.getStressDetectionInfo());\n-                    isCurrentlyUnderStress = true;\n-                    tracer.stressDetected();\n-                    break;\n+                    return true;\n                 }\n             } catch (Exception e) {\n                 if (logger.isDebugEnabled()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyODE1MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386428151", "bodyText": "Can we make this a TimeDuration option which calculates the number of measurements based on stress_monitoring_interval?", "author": "felixbarny", "createdAt": "2020-03-02T14:35:32Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java", "diffHunk": "@@ -51,17 +53,99 @@\n     private final ConfigurationOption<TimeDuration> stressMonitoringInterval = TimeDurationValueConverter.durationOption(\"s\")\n         .key(\"stress_monitoring_interval\")\n         .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n         .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n         .description(\"The interval at which the agent polls the stress monitors. Must be at least `1s`.\")\n         .addValidator(isNotInRange(TimeDuration.of(\"0ms\"), TimeDuration.of(\"999ms\")))\n         .dynamic(false)\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<Double> gcStressThreshold = ConfigurationOption.doubleOption()\n+        .key(\"stress_monitor_gc_stress_threshold\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .description(\"The threshold used by the GC monitor to rely on for identifying heap stress.\\n\" +\n+            \"The same threshold will be used for all heap pools, so that if ANY has a usage percentage that crosses it, \\n\" +\n+            \"the agent will consider it as a heap stress. The GC monitor relies only on memory consumption measured \\n\" +\n+            \"after a recent GC.\")\n+        .dynamic(true)\n+        .addValidator(isInRange(0d, 1d))\n+        .buildWithDefault(0.95);\n+\n+    private final ConfigurationOption<Double> gcReliefThreshold = ConfigurationOption.doubleOption()\n+        .key(\"stress_monitor_gc_relief_threshold\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .description(\"The threshold used by the GC monitor to rely on for identifying when the heap is not under stress .\\n\" +\n+            \"If `stress_monitor_gc_stress_threshold` has been crossed, the agent will consider it a heap-stress state. \\n\" +\n+            \"In order to determine that the stress state is over, percentage of occupied memory in ALL heap pools should \\n\" +\n+            \"be lower than this threshold. The GC monitor relies only on memory consumption measured after a recent GC.\")\n+        .dynamic(true)\n+        .addValidator(isInRange(0d, 1d))\n+        .buildWithDefault(0.75);\n+\n+    private final ConfigurationOption<Integer> cpuConsecutiveMeasurements = ConfigurationOption.integerOption()", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMjg3OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386822878", "bodyText": "Yes we can!", "author": "eyalkoren", "createdAt": "2020-03-03T06:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyODE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "82421b64b98f12e47e47c4f2dff4baaf088e1c52", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\nindex 9a05692a0..10f9d7a46 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\n\n@@ -86,15 +86,18 @@ public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n         .addValidator(isInRange(0d, 1d))\n         .buildWithDefault(0.75);\n \n-    private final ConfigurationOption<Integer> cpuConsecutiveMeasurements = ConfigurationOption.integerOption()\n-        .key(\"stress_monitor_cpu_num_measurements\")\n+    private final ConfigurationOption<TimeDuration> cpuStressDurationThreshold = TimeDurationValueConverter.durationOption(\"m\")\n+        .key(\"stress_monitor_cpu_duration_threshold\")\n         .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n         .tags(\"added[1.14.0]\")\n         .tags(\"performance\")\n-        .description(\"The number of measurements required in order to determine whether the system is \\n\" +\n-            \"either currently under stress, or that the stress detected previously has been relieved.\")\n+        .description(\"The minimal time required in order to determine whether the system is \\n\" +\n+            \"either currently under stress, or that the stress detected previously has been relieved. \\n\" +\n+            \"All measurements during this time must be consistent in comparison to the relevant threshold in \\n\" +\n+            \"order to detect a change of stress state. Must be at least `1m`.\")\n+        .addValidator(isNotInRange(TimeDuration.of(\"0ms\"), TimeDuration.of(\"59s\")))\n         .dynamic(true)\n-        .buildWithDefault(12);\n+        .buildWithDefault(TimeDuration.of(\"1m\"));\n \n     private final ConfigurationOption<Double> systemCpuStressThreshold = ConfigurationOption.doubleOption()\n         .key(\"stress_monitor_system_cpu_stress_threshold\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0OTE3OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386849178", "bodyText": "For consistency with other methods, would making this one throw Exception be a good idea ? as it's also invoked in a loop too, any failing LifecycleListener would make execution on other be skipped.", "author": "SylvainJuge", "createdAt": "2020-03-03T07:58:21Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java", "diffHunk": "@@ -47,6 +47,34 @@\n      */\n     void start(ElasticApmTracer tracer);", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\nindex 03b944a90..94c19aab1 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java\n\n@@ -45,7 +45,7 @@ public interface LifecycleListener {\n      *\n      * @param tracer The tracer.\n      */\n-    void start(ElasticApmTracer tracer);\n+    void start(ElasticApmTracer tracer) throws Exception;\n \n     /**\n      * Callback for when {@link ElasticApmTracer#pause()} has been called.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0OTc1NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386849755", "bodyText": "any listener that throws an exception here will make other listeners to not be executed.", "author": "SylvainJuge", "createdAt": "2020-03-03T07:59:43Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -560,11 +584,84 @@ public void registerSpanListener(ActivationListener activationListener) {\n         return activationListeners;\n     }\n \n-    void registerLifecycleListeners(List<LifecycleListener> lifecycleListeners) {\n+    synchronized void start(List<LifecycleListener> lifecycleListeners) {\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\nindex 0c9cb9660..fc39dde20 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n\n@@ -585,24 +591,32 @@ public class ElasticApmTracer {\n     }\n \n     synchronized void start(List<LifecycleListener> lifecycleListeners) {\n+        if (tracerState != TracerState.UNINITIALIZED) {\n+            logger.warn(\"Trying to start an already initialized agent\");\n+            return;\n+        }\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n-            lifecycleListener.start(this);\n+            try {\n+                lifecycleListener.start(this);\n+            } catch (Exception e) {\n+                logger.error(\"Failed to start \" + lifecycleListener.getClass().getName(), e);\n+            }\n         }\n+        tracerState = TracerState.RUNNING;\n         if (activeConfigOptionSet) {\n-            tracerState = TracerState.RUNNING;\n             logger.info(\"Tracer switched to RUNNING state\");\n         } else {\n             pause();\n         }\n     }\n \n-    public synchronized void stressDetected() {\n+    public synchronized void onStressDetected() {\n         currentlyUnderStress = true;\n         pause();\n     }\n \n-    public synchronized void stressRelieved() {\n+    public synchronized void onStressRelieved() {\n         currentlyUnderStress = false;\n         if (activeConfigOptionSet) {\n             resume();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MDMwMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386850300", "bodyText": "Naming, maybe onStressDetected would be more explicit, same for onStressRelieved below.", "author": "SylvainJuge", "createdAt": "2020-03-03T08:01:10Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -560,11 +584,84 @@ public void registerSpanListener(ActivationListener activationListener) {\n         return activationListeners;\n     }\n \n-    void registerLifecycleListeners(List<LifecycleListener> lifecycleListeners) {\n+    synchronized void start(List<LifecycleListener> lifecycleListeners) {\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n             lifecycleListener.start(this);\n         }\n+        if (activeConfigOptionSet) {\n+            tracerState = TracerState.RUNNING;\n+            logger.info(\"Tracer switched to RUNNING state\");\n+        } else {\n+            pause();\n+        }\n+    }\n+\n+    public synchronized void stressDetected() {", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\nindex 0c9cb9660..fc39dde20 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n\n@@ -585,24 +591,32 @@ public class ElasticApmTracer {\n     }\n \n     synchronized void start(List<LifecycleListener> lifecycleListeners) {\n+        if (tracerState != TracerState.UNINITIALIZED) {\n+            logger.warn(\"Trying to start an already initialized agent\");\n+            return;\n+        }\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n-            lifecycleListener.start(this);\n+            try {\n+                lifecycleListener.start(this);\n+            } catch (Exception e) {\n+                logger.error(\"Failed to start \" + lifecycleListener.getClass().getName(), e);\n+            }\n         }\n+        tracerState = TracerState.RUNNING;\n         if (activeConfigOptionSet) {\n-            tracerState = TracerState.RUNNING;\n             logger.info(\"Tracer switched to RUNNING state\");\n         } else {\n             pause();\n         }\n     }\n \n-    public synchronized void stressDetected() {\n+    public synchronized void onStressDetected() {\n         currentlyUnderStress = true;\n         pause();\n     }\n \n-    public synchronized void stressRelieved() {\n+    public synchronized void onStressRelieved() {\n         currentlyUnderStress = false;\n         if (activeConfigOptionSet) {\n             resume();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MTQ3OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386851479", "bodyText": "why do we have pause and resume as package-private ? if only for testing, doing it through stressDetected and stressRelieved methods above should be enough.", "author": "SylvainJuge", "createdAt": "2020-03-03T08:04:04Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -560,11 +584,84 @@ public void registerSpanListener(ActivationListener activationListener) {\n         return activationListeners;\n     }\n \n-    void registerLifecycleListeners(List<LifecycleListener> lifecycleListeners) {\n+    synchronized void start(List<LifecycleListener> lifecycleListeners) {\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n             lifecycleListener.start(this);\n         }\n+        if (activeConfigOptionSet) {\n+            tracerState = TracerState.RUNNING;\n+            logger.info(\"Tracer switched to RUNNING state\");\n+        } else {\n+            pause();\n+        }\n+    }\n+\n+    public synchronized void stressDetected() {\n+        currentlyUnderStress = true;\n+        pause();\n+    }\n+\n+    public synchronized void stressRelieved() {\n+        currentlyUnderStress = false;\n+        if (activeConfigOptionSet) {\n+            resume();\n+        }\n+    }\n+\n+    private synchronized void activeConfigChanged(boolean wasActive, boolean shouldBeActive) {\n+        // if changed from true to false then:\n+        //      if current state is RUNNING - pause the agent\n+        //      otherwise - ignore\n+        // if changed from false to true then:\n+        //      if current state is RUNNING or STOPPED - no effect\n+        //      if current state is PAUSED and currentlyUnderStress==false - then resume\n+        if (wasActive && !shouldBeActive && tracerState == TracerState.RUNNING) {\n+            pause();\n+        } else if (!wasActive && shouldBeActive && tracerState == TracerState.PAUSED && !currentlyUnderStress) {\n+            resume();\n+        }\n+        activeConfigOptionSet = shouldBeActive;\n+    }\n+\n+    synchronized void pause() {", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg4NDgyNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386884825", "bodyText": "This is an (internal) tracer API, so I think package private is a good choice.\nI use it widely in tests, which by itself qualifies to make it package private.\nTesting what happens when we pause the agent in the Quartz test through stressDetected is a much worse option in my opinion.", "author": "eyalkoren", "createdAt": "2020-03-03T09:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MTQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\nindex 0c9cb9660..fc39dde20 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n\n@@ -585,24 +591,32 @@ public class ElasticApmTracer {\n     }\n \n     synchronized void start(List<LifecycleListener> lifecycleListeners) {\n+        if (tracerState != TracerState.UNINITIALIZED) {\n+            logger.warn(\"Trying to start an already initialized agent\");\n+            return;\n+        }\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n-            lifecycleListener.start(this);\n+            try {\n+                lifecycleListener.start(this);\n+            } catch (Exception e) {\n+                logger.error(\"Failed to start \" + lifecycleListener.getClass().getName(), e);\n+            }\n         }\n+        tracerState = TracerState.RUNNING;\n         if (activeConfigOptionSet) {\n-            tracerState = TracerState.RUNNING;\n             logger.info(\"Tracer switched to RUNNING state\");\n         } else {\n             pause();\n         }\n     }\n \n-    public synchronized void stressDetected() {\n+    public synchronized void onStressDetected() {\n         currentlyUnderStress = true;\n         pause();\n     }\n \n-    public synchronized void stressRelieved() {\n+    public synchronized void onStressRelieved() {\n         currentlyUnderStress = false;\n         if (activeConfigOptionSet) {\n             resume();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MjM5MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386852390", "bodyText": "Maybe add a small comment to explain why those variables are volatile and which object is used to synchronize access to them.", "author": "SylvainJuge", "createdAt": "2020-03-03T08:06:28Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -119,7 +120,11 @@ protected Boolean initialValue() {\n     private final MetricRegistry metricRegistry;\n     private Sampler sampler;\n     boolean assertionsEnabled = false;\n-    private static final WeakConcurrentMap<ClassLoader, String> serviceNameByClassLoader = new WeakConcurrentMap.WithInlinedExpunction<>();\n+    private long lastSpanMaxWarningTimestamp;\n+\n+    private volatile TracerState tracerState = TracerState.STOPPED;", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\nindex 0c9cb9660..fc39dde20 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n\n@@ -122,7 +122,13 @@ public class ElasticApmTracer {\n     boolean assertionsEnabled = false;\n     private long lastSpanMaxWarningTimestamp;\n \n-    private volatile TracerState tracerState = TracerState.STOPPED;\n+    /**\n+     * The tracer state is volatile to ensure thread safety when queried through {@link ElasticApmTracer#isRunning()} or\n+     * {@link ElasticApmTracer#getState()}, or when updated through one of the lifecycle-effecting synchronized methods\n+     * {@link ElasticApmTracer#start(List)}, {@link ElasticApmTracer#pause()}, {@link ElasticApmTracer#resume()} or\n+     * {@link ElasticApmTracer#stop()}.\n+     */\n+    private volatile TracerState tracerState = TracerState.UNINITIALIZED;\n     private volatile boolean currentlyUnderStress = false;\n     private volatile boolean activeConfigOptionSet;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MzIyMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386853222", "bodyText": "When agent is in stopped state after being stopped, can we transition to any other state ?", "author": "SylvainJuge", "createdAt": "2020-03-03T08:08:33Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -646,4 +743,26 @@ private String getServiceName(@Nullable ClassLoader initiatingClassLoader) {\n     public void resetServiceNameOverrides() {\n         serviceNameByClassLoader.clear();\n     }\n+\n+    /**\n+     * An enumeration used to represent the current tracer state.\n+     */\n+    public enum TracerState {\n+        /**\n+         * Agent is in this state either before starting, or after being stopped.\n+         */\n+        STOPPED,", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg4NjcxMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386886710", "bodyText": "Currently no, there is no such option. This is actually something that bothered me when I introduced the state (the fact that there is no single definition to the STOPPED state).\nI will add an UNINITIALIZED state to distinguish and will add proper commenting.", "author": "eyalkoren", "createdAt": "2020-03-03T09:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MzIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\nindex 0c9cb9660..fc39dde20 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n\n@@ -749,12 +763,12 @@ public class ElasticApmTracer {\n      */\n     public enum TracerState {\n         /**\n-         * Agent is in this state either before starting, or after being stopped.\n+         * The agent's state before it has been started for the first time.\n          */\n-        STOPPED,\n+        UNINITIALIZED,\n \n         /**\n-         * Indicates that the agent is currently fully functional - tracing, monitoring and sending data to the APM server\n+         * Indicates that the agent is currently fully functional - tracing, monitoring and sending data to the APM server.\n          */\n         RUNNING,\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NTI1OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386855258", "bodyText": "Is that a number of consecutive measurements ? if yes (I guess it's the case) might be relevant to make it explicit here.", "author": "SylvainJuge", "createdAt": "2020-03-03T08:13:43Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.configuration.converter.TimeDurationValueConverter;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+import org.stagemonitor.configuration.ConfigurationOptionProvider;\n+\n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isInRange;\n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isNotInRange;\n+\n+public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n+    public static final String CIRCUIT_BREAKER_CATEGORY = \"Circuit-Breaker\";\n+\n+    private final ConfigurationOption<Boolean> circuitBreakerEnabled = ConfigurationOption.booleanOption()\n+        .key(\"circuit_breaker_enabled\")\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .description(\"A boolean specifying whether the circuit breaker should be enabled or not. \\n\" +\n+            \"When enabled, the agent periodically polls stress monitors to detect system/process/JVM stress state. \\n\" +\n+            \"If ANY of the monitors detects a stress indication, the agent will become inactive, as if the \\n\" +\n+            \"<<config-active>> configuration option has been set to `false`, thus reducing resource consumption to a minimum. \\n\" +\n+            \"When inactive, the agent continues polling the same monitors in order to detect whether the stress state \\n\" +\n+            \"has been relieved. If ALL monitors approve that the system/process/JVM is not under stress anymore, the \\n\" +\n+            \"agent will resume and become fully functional.\")\n+        .dynamic(true)\n+        .buildWithDefault(false);\n+\n+    private final ConfigurationOption<TimeDuration> stressMonitoringInterval = TimeDurationValueConverter.durationOption(\"s\")\n+        .key(\"stress_monitoring_interval\")\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .description(\"The interval at which the agent polls the stress monitors. Must be at least `1s`.\")\n+        .addValidator(isNotInRange(TimeDuration.of(\"0ms\"), TimeDuration.of(\"999ms\")))\n+        .dynamic(false)\n+        .buildWithDefault(TimeDuration.of(\"5s\"));\n+\n+    private final ConfigurationOption<Double> gcStressThreshold = ConfigurationOption.doubleOption()\n+        .key(\"stress_monitor_gc_stress_threshold\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .description(\"The threshold used by the GC monitor to rely on for identifying heap stress.\\n\" +\n+            \"The same threshold will be used for all heap pools, so that if ANY has a usage percentage that crosses it, \\n\" +\n+            \"the agent will consider it as a heap stress. The GC monitor relies only on memory consumption measured \\n\" +\n+            \"after a recent GC.\")\n+        .dynamic(true)\n+        .addValidator(isInRange(0d, 1d))\n+        .buildWithDefault(0.95);\n+\n+    private final ConfigurationOption<Double> gcReliefThreshold = ConfigurationOption.doubleOption()\n+        .key(\"stress_monitor_gc_relief_threshold\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .description(\"The threshold used by the GC monitor to rely on for identifying when the heap is not under stress .\\n\" +\n+            \"If `stress_monitor_gc_stress_threshold` has been crossed, the agent will consider it a heap-stress state. \\n\" +\n+            \"In order to determine that the stress state is over, percentage of occupied memory in ALL heap pools should \\n\" +\n+            \"be lower than this threshold. The GC monitor relies only on memory consumption measured after a recent GC.\")\n+        .dynamic(true)\n+        .addValidator(isInRange(0d, 1d))\n+        .buildWithDefault(0.75);\n+\n+    private final ConfigurationOption<Integer> cpuConsecutiveMeasurements = ConfigurationOption.integerOption()\n+        .key(\"stress_monitor_cpu_num_measurements\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .description(\"The number of measurements required in order to determine whether the system is \\n\" +", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg5MTE1NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386891154", "bodyText": "I am changing this one based on #1040 (comment)", "author": "eyalkoren", "createdAt": "2020-03-03T09:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NTI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "82421b64b98f12e47e47c4f2dff4baaf088e1c52", "chunk": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\nindex 9a05692a0..10f9d7a46 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java\n\n@@ -86,15 +86,18 @@ public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n         .addValidator(isInRange(0d, 1d))\n         .buildWithDefault(0.75);\n \n-    private final ConfigurationOption<Integer> cpuConsecutiveMeasurements = ConfigurationOption.integerOption()\n-        .key(\"stress_monitor_cpu_num_measurements\")\n+    private final ConfigurationOption<TimeDuration> cpuStressDurationThreshold = TimeDurationValueConverter.durationOption(\"m\")\n+        .key(\"stress_monitor_cpu_duration_threshold\")\n         .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n         .tags(\"added[1.14.0]\")\n         .tags(\"performance\")\n-        .description(\"The number of measurements required in order to determine whether the system is \\n\" +\n-            \"either currently under stress, or that the stress detected previously has been relieved.\")\n+        .description(\"The minimal time required in order to determine whether the system is \\n\" +\n+            \"either currently under stress, or that the stress detected previously has been relieved. \\n\" +\n+            \"All measurements during this time must be consistent in comparison to the relevant threshold in \\n\" +\n+            \"order to detect a change of stress state. Must be at least `1m`.\")\n+        .addValidator(isNotInRange(TimeDuration.of(\"0ms\"), TimeDuration.of(\"59s\")))\n         .dynamic(true)\n-        .buildWithDefault(12);\n+        .buildWithDefault(TimeDuration.of(\"1m\"));\n \n     private final ConfigurationOption<Double> systemCpuStressThreshold = ConfigurationOption.doubleOption()\n         .key(\"stress_monitor_system_cpu_stress_threshold\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDMyNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386860326", "bodyText": "why do we need to do that ? can you elaborate a bit when this is required and how it helps ?\nFor example, do we need to wait another part of the application (like an application server startup) to execute before trying to use this code ?", "author": "SylvainJuge", "createdAt": "2020-03-03T08:26:11Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/JmxUtils.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.lang.management.OperatingSystemMXBean;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * A utility to obtain JVM-specific MBean implementations, supporting HotSpot and J9.\n+ *\n+ * This implementation is based on io.micrometer.core.instrument.binder.system.ProcessorMetrics,\n+ * under Apache License 2.0\n+ */\n+public class JmxUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JmxUtils.class);\n+\n+    private static boolean initialized;\n+\n+    /**\n+     * List of public, exported interface class names from supported JVM implementations.\n+     */\n+    private static final List<String> OPERATING_SYSTEM_BEAN_CLASS_NAMES = Arrays.asList(\n+        // NOTE: THE ORDER IS IMPORTANT AS J9 CONTAINS THE SUN INTERFACE AS WELL\n+        \"com.ibm.lang.management.OperatingSystemMXBean\", // J9\n+        \"com.sun.management.OperatingSystemMXBean\" // HotSpot\n+    );\n+\n+    @Nullable\n+    private static Class<?> operatingSystemBeanClass;\n+\n+    @Nullable\n+    public synchronized static Method getOperatingSystemMBeanMethod(OperatingSystemMXBean operatingSystemBean, String methodName) {\n+        if (!initialized) {\n+            // lazy initialization - try loading the classes as late as possible", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg5NzA3MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386897071", "bodyText": "why do we need to do that ?\n\nBecause it is always a good idea to look for a class in the classpath as late as possible, as I elaborated. Otherwise this check may be premature.\n\nFor example, do we need to wait another part of the application (like an application server startup) to execute before trying to use this code ?\n\nMaybe \ud83d\ude42 . I rather not wait for someone reporting on such scenario. Unless there is a good reason to avoid, safer code seems like the better option.", "author": "eyalkoren", "createdAt": "2020-03-03T09:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDMyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MTE4Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386861187", "bodyText": "this will conflict with the changes I did in the JDBC PR, thus we need to not forget about this to be sure the right thing is merged afterwards.", "author": "SylvainJuge", "createdAt": "2020-03-03T08:28:06Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/AbstractServletTest.java", "diffHunk": "@@ -41,15 +49,30 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n public abstract class AbstractServletTest {\n-    protected static final MockReporter reporter = new MockReporter();\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    protected static ElasticApmTracer tracer;\n+\n     @Nullable\n     private static Server server;\n     protected OkHttpClient httpClient;\n \n+    @BeforeAll\n+    static void setup() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b9d1f3a3517bcc31732bc3490a4778b9d728adb", "chunk": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/AbstractServletTest.java b/apm-agent-plugins/apm-servlet-plugin/src/test/java/co/elastic/apm/agent/servlet/AbstractServletTest.java\nsimilarity index 57%\nrename from apm-agent-core/src/test/java/co/elastic/apm/agent/AbstractServletTest.java\nrename to apm-agent-plugins/apm-servlet-plugin/src/test/java/co/elastic/apm/agent/servlet/AbstractServletTest.java\nindex d1e238bb2..18a6f3d05 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/AbstractServletTest.java\n+++ b/apm-agent-plugins/apm-servlet-plugin/src/test/java/co/elastic/apm/agent/servlet/AbstractServletTest.java\n\n@@ -48,43 +40,30 @@ import java.util.concurrent.TimeUnit;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-public abstract class AbstractServletTest {\n-    protected static MockReporter reporter;\n-    protected static ConfigurationRegistry config;\n-    protected static ElasticApmTracer tracer;\n+abstract class AbstractServletTest extends AbstractInstrumentationTest {\n \n     @Nullable\n     private static Server server;\n+\n+    @Nullable\n     protected OkHttpClient httpClient;\n \n-    @BeforeAll\n-    static void setup() {\n-        reporter = new MockReporter();\n-        config = SpyConfiguration.createSpyConfig();\n-        tracer = new ElasticApmTracerBuilder()\n-            .configurationRegistry(config)\n-            .reporter(reporter)\n-            .build();\n-        ElasticApmAgent.initInstrumentation(tracer, ByteBuddyAgent.install());\n-    }\n+    @BeforeEach\n+    void initServerAndClient() throws Exception {\n \n-    @AfterAll\n-    static void cleanup() throws Exception {\n-        server.stop();\n-        server = null;\n-        ElasticApmAgent.reset();\n-    }\n+        // because we reuse the same classloader with different servlet context names\n+        // we need to explicitly reset the name cache to make service name detection work as expected\n+        ServletTransactionHelper.clearServiceNameCache();\n+\n+        // server is not reused between tests as handler is provided from subclass\n+        // another alternative\n+        server = new Server();\n+        server.addConnector(new ServerConnector(server));\n+        ServletContextHandler handler = new ServletContextHandler();\n+        setUpHandler(handler);\n+        server.setHandler(handler);\n+        server.start();\n \n-    @BeforeEach\n-    final void initServer() throws Exception {\n-        if (server == null) {\n-            server = new Server();\n-            server.addConnector(new ServerConnector(server));\n-            ServletContextHandler handler = new ServletContextHandler();\n-            setUpHandler(handler);\n-            server.setHandler(handler);\n-            server.start();\n-        }\n         assertThat(getPort()).isPositive();\n \n         httpClient = new OkHttpClient.Builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NjI5MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386866290", "bodyText": "why we have todos left here ? should we implement them or leave an empty impl. ?", "author": "SylvainJuge", "createdAt": "2020-03-03T08:39:09Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingFactory.java", "diffHunk": "@@ -58,6 +58,16 @@ public void start(ElasticApmTracer tracer) {\n         tracer.registerSpanListener(new ProfilingActivationListener(tracer, profiler));\n     }\n \n+    @Override\n+    public void pause() throws Exception {\n+        // todo - implement", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg5ODM5OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386898398", "bodyText": "Yes, I left that to @felixbarny with a comment at the top, I hope it was not missed...", "author": "eyalkoren", "createdAt": "2020-03-03T09:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NjI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingFactory.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingFactory.java\nindex 701159d23..666b7ace9 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingFactory.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingFactory.java\n\n@@ -58,16 +58,6 @@ public class ProfilingFactory implements LifecycleListener {\n         tracer.registerSpanListener(new ProfilingActivationListener(tracer, profiler));\n     }\n \n-    @Override\n-    public void pause() throws Exception {\n-        // todo - implement\n-    }\n-\n-    @Override\n-    public void resume() throws Exception {\n-        // todo - implement\n-    }\n-\n     @Override\n     public void stop() throws Exception {\n         profiler.stop();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NjQyNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386866426", "bodyText": "same as previous.", "author": "SylvainJuge", "createdAt": "2020-03-03T08:39:22Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java", "diffHunk": "@@ -546,6 +546,16 @@ public void start(ElasticApmTracer tracer) {\n         scheduler.submit(this);\n     }\n \n+    @Override\n+    public void pause() throws Exception {\n+        // todo - implement\n+    }\n+\n+    @Override\n+    public void resume() throws Exception {\n+        // todo - implement", "originalCommit": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "chunk": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\nindex 85f402f30..1f60e4f1e 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n\n@@ -546,16 +546,6 @@ public class SamplingProfiler implements Runnable, LifecycleListener {\n         scheduler.submit(this);\n     }\n \n-    @Override\n-    public void pause() throws Exception {\n-        // todo - implement\n-    }\n-\n-    @Override\n-    public void resume() throws Exception {\n-        // todo - implement\n-    }\n-\n     @Override\n     public void stop() throws Exception {\n         // cancels/interrupts the profiling thread\n"}}, {"oid": "82421b64b98f12e47e47c4f2dff4baaf088e1c52", "url": "https://github.com/elastic/apm-agent-java/commit/82421b64b98f12e47e47c4f2dff4baaf088e1c52", "message": "Applying review suggestions", "committedDate": "2020-03-03T08:54:46Z", "type": "commit"}, {"oid": "87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "url": "https://github.com/elastic/apm-agent-java/commit/87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "message": "Applying more review suggestions", "committedDate": "2020-03-03T11:03:59Z", "type": "commit"}, {"oid": "5b9d1f3a3517bcc31732bc3490a4778b9d728adb", "url": "https://github.com/elastic/apm-agent-java/commit/5b9d1f3a3517bcc31732bc3490a4778b9d728adb", "message": "Merge remote-tracking branch 'upstream/master' into circuit-breaker", "committedDate": "2020-03-03T11:22:51Z", "type": "commit"}, {"oid": "2794959bb01e5c1da36576e22437091dbbc5669a", "url": "https://github.com/elastic/apm-agent-java/commit/2794959bb01e5c1da36576e22437091dbbc5669a", "message": "Avoid auto-indentation on CHANGELOG", "committedDate": "2020-03-03T11:34:03Z", "type": "commit"}, {"oid": "071b68dd8b0ff484ec3d48d155fc45155e170646", "url": "https://github.com/elastic/apm-agent-java/commit/071b68dd8b0ff484ec3d48d155fc45155e170646", "message": "Fix merge error", "committedDate": "2020-03-03T11:35:25Z", "type": "commit"}, {"oid": "071b68dd8b0ff484ec3d48d155fc45155e170646", "url": "https://github.com/elastic/apm-agent-java/commit/071b68dd8b0ff484ec3d48d155fc45155e170646", "message": "Fix merge error", "committedDate": "2020-03-03T11:35:25Z", "type": "forcePushed"}, {"oid": "39c3c1c609d3946c5cb0daf2b2b559019025ec06", "url": "https://github.com/elastic/apm-agent-java/commit/39c3c1c609d3946c5cb0daf2b2b559019025ec06", "message": "Removing todo from ApmConfigurationSource", "committedDate": "2020-03-03T12:29:39Z", "type": "commit"}]}